namespace Cryogenic.Overrides;

 using Spice86.Emulator.Function;
using Spice86.Emulator.Memory;
using Spice86.Emulator.ReverseEngineer;
using Spice86.Emulator.VM;

using System;
using System.Collections.Generic;

public partial class Overrides : CSharpOverrideHelper {
/*  private ushort cs1; // 0x1000
  private ushort cs2; // 0x334B
  private ushort cs3; // 0x5635
  private ushort cs4; // 0x563E
  
*/
  /* Commented out as will likely want to use our own constructor to call your non generated overrides
  public GeneratedCode(Dictionary<SegmentedAddress, FunctionInformation> functionInformations, ushort entrySegment, Machine machine) : base(functionInformations, "generatedCode", machine) {
    this.cs1 = (ushort)(entrySegment + 0x0);
    this.cs2 = (ushort)(entrySegment + 0x234B);
    this.cs3 = (ushort)(entrySegment + 0x4635);
    this.cs4 = (ushort)(entrySegment + 0x463E);
    
    DefineGeneratedCodeOverrides(functionInformations);
    DetectCodeRewrites();
  }*/
  
  public void DefineGeneratedCodeOverrides() {
    // 0x1000
    DefineFunction(cs1, 0x0, entry_1000_0000_10000, false);
    DefineFunction(cs1, 0x83, unknown_1000_0083_10083, false);
    DefineFunction(cs1, 0x86, unknown_1000_0086_10086, false);
    DefineFunction(cs1, 0x98, ConvertIndexTableToPointerTable_1000_0098_10098, false);
    DefineFunction(cs1, 0xB0, initialize_2_ida_1000_00B0_100B0, false);
    DefineFunction(cs1, 0xD1, intialize_resources_ida_1000_00D1_100D1, false);
    DefineFunction(cs1, 0x169, map2_resource_func_ida_1000_0169_10169, false);
    DefineFunction(cs1, 0x1E0, unknown_1000_01E0_101E0, false);
    DefineFunction(cs1, 0x21C, play_intro2_ida_1000_021C_1021C, false);
    DefineFunction(cs1, 0x2C1, unknown_1000_02C1_102C1, false);
    DefineFunction(cs1, 0x2DE, unknown_1000_02DE_102DE, false);
    DefineFunction(cs1, 0x2E0, unknown_1000_02E0_102E0, false);
    DefineFunction(cs1, 0x2E3, unknown_1000_02E3_102E3, false);
    DefineFunction(cs1, 0x2F8, unknown_1000_02F8_102F8, false);
    DefineFunction(cs1, 0x2FB, unknown_1000_02FB_102FB, false);
    DefineFunction(cs1, 0x2FE, unknown_1000_02FE_102FE, false);
    DefineFunction(cs1, 0x301, unknown_1000_0301_10301, false);
    DefineFunction(cs1, 0x309, play_CREDITS_HNM_ida_1000_0309_10309, false);
    DefineFunction(cs1, 0x579, ClearGlobalVgaOffset_1000_0579_10579, false);
    DefineFunction(cs1, 0x580, play_intro_ida_1000_0580_10580, false);
    DefineFunction(cs1, 0x61C, load_VIRGIN_HNM_ida_1000_061C_1061C, false);
    DefineFunction(cs1, 0x625, play_VIRGIN_HNM_ida_1000_0625_10625, false);
    DefineFunction(cs1, 0x64D, load_CRYO_HNM_ida_1000_064D_1064D, false);
    DefineFunction(cs1, 0x658, load_CRYO2_HNM_ida_1000_0658_10658, false);
    DefineFunction(cs1, 0x661, play_CRYO_OR_CRYO2_HNM_ida_1000_0661_10661, false);
    DefineFunction(cs1, 0x678, load_PRESENT_HNM_ida_1000_0678_10678, false);
    DefineFunction(cs1, 0x684, play_PRESENT_HNM_ida_1000_0684_10684, false);
    DefineFunction(cs1, 0x69E, load_INTRO_HNM_ida_1000_069E_1069E, false);
    DefineFunction(cs1, 0x6AA, play_hnm_86_frames_ida_1000_06AA_106AA, false);
    DefineFunction(cs1, 0x6BD, play_hnm_skippable_ida_1000_06BD_106BD, false);
    DefineFunction(cs1, 0x76A, spice86_label_1000_076A_1076A, false);
    DefineFunction(cs1, 0x7EE, spice86_label_1000_07EE_107EE, false);
    DefineFunction(cs1, 0x911, unknown_1000_0911_10911, false);
    DefineFunction(cs1, 0x93F, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F, false);
    DefineFunction(cs1, 0x945, SetSceneSequenceOffsetToSi_1000_0945_10945, false);
    DefineFunction(cs1, 0x94A, unknown_1000_094A_1094A, false);
    DefineFunction(cs1, 0x9AD, spice86_label_1000_09AD_109AD, false);
    DefineFunction(cs1, 0x9C7, unknown_1000_09C7_109C7, false);
    DefineFunction(cs1, 0x9EF, play_CREDITS_HNM_ida_1000_09EF_109EF, false);
    DefineFunction(cs1, 0xA16, unknown_1000_0A16_10A16, false);
    DefineFunction(cs1, 0xA23, unknown_1000_0A23_10A23, false);
    DefineFunction(cs1, 0xA3E, unknown_1000_0A3E_10A3E, false);
    DefineFunction(cs1, 0xA44, unknown_1000_0A44_10A44, false);
    DefineFunction(cs1, 0xB21, unknown_1000_0B21_10B21, false);
    DefineFunction(cs1, 0xD45, unknown_1000_0D45_10D45, false);
    DefineFunction(cs1, 0xD8E, unknown_1000_0D8E_10D8E, false);
    DefineFunction(cs1, 0xE66, unknown_1000_0E66_10E66, false);
    DefineFunction(cs1, 0xE77, unknown_1000_0E77_10E77, false);
    DefineFunction(cs1, 0xED0, unknown_1000_0ED0_10ED0, false);
    DefineFunction(cs1, 0xF08, unknown_1000_0F08_10F08, false);
    DefineFunction(cs1, 0xF66, NoOp_1000_0F66_10F66, false);
    DefineFunction(cs1, 0xFD9, unknown_1000_0FD9_10FD9, false);
    DefineFunction(cs1, 0x100B, unknown_1000_100B_1100B, false);
    DefineFunction(cs1, 0x1011, unknown_1000_1011_11011, false);
    DefineFunction(cs1, 0x101B, unknown_1000_101B_1101B, false);
    DefineFunction(cs1, 0x1027, unknown_1000_1027_11027, false);
    DefineFunction(cs1, 0x102F, unknown_1000_102F_1102F, false);
    DefineFunction(cs1, 0x1045, unknown_1000_1045_11045, false);
    DefineFunction(cs1, 0x1053, unknown_1000_1053_11053, false);
    DefineFunction(cs1, 0x105B, unknown_1000_105B_1105B, false);
    DefineFunction(cs1, 0x1071, unknown_1000_1071_11071, false);
    DefineFunction(cs1, 0x121F, unknown_1000_121F_1121F, false);
    DefineFunction(cs1, 0x127C, unknown_1000_127C_1127C, false);
    DefineFunction(cs1, 0x1392, unknown_1000_1392_11392, false);
    DefineFunction(cs1, 0x1399, unknown_1000_1399_11399, false);
    DefineFunction(cs1, 0x1707, unknown_1000_1707_11707, false);
    DefineFunction(cs1, 0x176B, unknown_1000_176B_1176B, false);
    DefineFunction(cs1, 0x1797, unknown_1000_1797_11797, false);
    DefineFunction(cs1, 0x17BE, unknown_1000_17BE_117BE, false);
    DefineFunction(cs1, 0x17E6, unknown_1000_17E6_117E6, false);
    DefineFunction(cs1, 0x1803, unknown_1000_1803_11803, false);
    DefineFunction(cs1, 0x181E, unknown_1000_181E_1181E, false);
    DefineFunction(cs1, 0x1834, unknown_1000_1834_11834, false);
    DefineFunction(cs1, 0x1843, unknown_1000_1843_11843, false);
    DefineFunction(cs1, 0x1860, unknown_1000_1860_11860, false);
    DefineFunction(cs1, 0x186B, unknown_1000_186B_1186B, false);
    DefineFunction(cs1, 0x189A, unknown_1000_189A_1189A, false);
    DefineFunction(cs1, 0x18BA, unknown_1000_18BA_118BA, false);
    DefineFunction(cs1, 0x18EE, unknown_1000_18EE_118EE, false);
    DefineFunction(cs1, 0x1948, unknown_1000_1948_11948, false);
    DefineFunction(cs1, 0x19DF, unknown_1000_19DF_119DF, false);
    DefineFunction(cs1, 0x19FC, unknown_1000_19FC_119FC, false);
    DefineFunction(cs1, 0x1A0F, unknown_1000_1A0F_11A0F, false);
    DefineFunction(cs1, 0x1A34, unknown_1000_1A34_11A34, false);
    DefineFunction(cs1, 0x1A9B, unknown_1000_1A9B_11A9B, false);
    DefineFunction(cs1, 0x1AC5, unknown_1000_1AC5_11AC5, false);
    DefineFunction(cs1, 0x1AD1, GetSunlightDay_1000_1AD1_11AD1, false);
    DefineFunction(cs1, 0x1AE0, SetHourOfTheDayToAX_1000_1AE0_11AE0, false);
    DefineFunction(cs1, 0x1AE7, unknown_1000_1AE7_11AE7, false);
    DefineFunction(cs1, 0x1B0D, unknown_1000_1B0D_11B0D, false);
    DefineFunction(cs1, 0x1B23, unknown_1000_1B23_11B23, false);
    DefineFunction(cs1, 0x1BEC, unknown_1000_1BEC_11BEC, false);
    DefineFunction(cs1, 0x1C18, unknown_1000_1C18_11C18, false);
    DefineFunction(cs1, 0x1C46, unknown_1000_1C46_11C46, false);
    DefineFunction(cs1, 0x1CDA, unknown_1000_1CDA_11CDA, false);
    DefineFunction(cs1, 0x1D10, spice86_label_1000_1D10_11D10, false);
    DefineFunction(cs1, 0x1D66, unknown_1000_1D66_11D66, false);
    DefineFunction(cs1, 0x1D9F, unknown_1000_1D9F_11D9F, false);
    DefineFunction(cs1, 0x1DD3, unknown_1000_1DD3_11DD3, false);
    DefineFunction(cs1, 0x1DD4, unknown_1000_1DD4_11DD4, false);
    DefineFunction(cs1, 0x1DD7, unknown_1000_1DD7_11DD7, false);
    DefineFunction(cs1, 0x1DDA, unknown_1000_1DDA_11DDA, false);
    DefineFunction(cs1, 0x1DFE, unknown_1000_1DFE_11DFE, false);
    DefineFunction(cs1, 0x1E01, unknown_1000_1E01_11E01, false);
    DefineFunction(cs1, 0x1E43, unknown_1000_1E43_11E43, false);
    DefineFunction(cs1, 0x1EBE, unknown_1000_1EBE_11EBE, false);
    DefineFunction(cs1, 0x1F64, spice86_label_1000_1F64_11F64, false);
    DefineFunction(cs1, 0x2090, unknown_1000_2090_12090, false);
    DefineFunction(cs1, 0x20A4, spice86_label_1000_20A4_120A4, false);
    DefineFunction(cs1, 0x2170, unknown_1000_2170_12170, false);
    DefineFunction(cs1, 0x21FA, unknown_1000_21FA_121FA, false);
    DefineFunction(cs1, 0x22B1, unknown_1000_22B1_122B1, false);
    DefineFunction(cs1, 0x24D2, unknown_1000_24D2_124D2, false);
    DefineFunction(cs1, 0x2524, unknown_1000_2524_12524, false);
    DefineFunction(cs1, 0x2555, unknown_1000_2555_12555, false);
    DefineFunction(cs1, 0x2566, unknown_1000_2566_12566, false);
    DefineFunction(cs1, 0x26A6, unknown_1000_26A6_126A6, false);
    DefineFunction(cs1, 0x26AC, unknown_1000_26AC_126AC, false);
    DefineFunction(cs1, 0x274E, unknown_1000_274E_1274E, false);
    DefineFunction(cs1, 0x275F, unknown_1000_275F_1275F, false);
    DefineFunction(cs1, 0x2773, unknown_1000_2773_12773, false);
    DefineFunction(cs1, 0x2795, unknown_1000_2795_12795, false);
    DefineFunction(cs1, 0x27B6, unknown_1000_27B6_127B6, false);
    DefineFunction(cs1, 0x27C9, unknown_1000_27C9_127C9, false);
    DefineFunction(cs1, 0x2806, unknown_1000_2806_12806, false);
    DefineFunction(cs1, 0x281C, unknown_1000_281C_1281C, false);
    DefineFunction(cs1, 0x28A1, unknown_1000_28A1_128A1, false);
    DefineFunction(cs1, 0x28B5, unknown_1000_28B5_128B5, false);
    DefineFunction(cs1, 0x28E1, unknown_1000_28E1_128E1, false);
    DefineFunction(cs1, 0x2997, unknown_1000_2997_12997, false);
    DefineFunction(cs1, 0x29EE, unknown_1000_29EE_129EE, false);
    DefineFunction(cs1, 0x29F0, unknown_1000_29F0_129F0, false);
    DefineFunction(cs1, 0x2A34, unknown_1000_2A34_12A34, false);
    DefineFunction(cs1, 0x2A51, unknown_1000_2A51_12A51, false);
    DefineFunction(cs1, 0x2A7F, unknown_1000_2A7F_12A7F, false);
    DefineFunction(cs1, 0x2AAF, unknown_1000_2AAF_12AAF, false);
    DefineFunction(cs1, 0x2AD8, unknown_1000_2AD8_12AD8, false);
    DefineFunction(cs1, 0x2B00, unknown_1000_2B00_12B00, false);
    DefineFunction(cs1, 0x2B2A, unknown_1000_2B2A_12B2A, false);
    DefineFunction(cs1, 0x2C92, unknown_1000_2C92_12C92, false);
    DefineFunction(cs1, 0x2C9A, unknown_1000_2C9A_12C9A, false);
    DefineFunction(cs1, 0x2CC7, unknown_1000_2CC7_12CC7, false);
    DefineFunction(cs1, 0x2D74, open_SAL_resource_ida_1000_2D74_12D74, false);
    DefineFunction(cs1, 0x2DB1, unknown_1000_2DB1_12DB1, false);
    DefineFunction(cs1, 0x2DBF, unknown_1000_2DBF_12DBF, false);
    DefineFunction(cs1, 0x2DD3, unknown_1000_2DD3_12DD3, false);
    DefineFunction(cs1, 0x2E52, unknown_1000_2E52_12E52, false);
    DefineFunction(cs1, 0x2E98, unknown_1000_2E98_12E98, false);
    DefineFunction(cs1, 0x2EB2, unknown_1000_2EB2_12EB2, false);
    DefineFunction(cs1, 0x2EBF, unknown_1000_2EBF_12EBF, false);
    DefineFunction(cs1, 0x2EFB, unknown_1000_2EFB_12EFB, false);
    DefineFunction(cs1, 0x2FFB, unknown_1000_2FFB_12FFB, false);
    DefineFunction(cs1, 0x301A, unknown_1000_301A_1301A, false);
    DefineFunction(cs1, 0x3090, unknown_1000_3090_13090, false);
    DefineFunction(cs1, 0x3093, unknown_1000_3093_13093, false);
    DefineFunction(cs1, 0x30B9, unknown_1000_30B9_130B9, false);
    DefineFunction(cs1, 0x3120, unknown_1000_3120_13120, false);
    DefineFunction(cs1, 0x3127, unknown_1000_3127_13127, false);
    DefineFunction(cs1, 0x316E, unknown_1000_316E_1316E, false);
    DefineFunction(cs1, 0x31F6, unknown_1000_31F6_131F6, false);
    DefineFunction(cs1, 0x329D, unknown_1000_329D_1329D, false);
    DefineFunction(cs1, 0x32C7, unknown_1000_32C7_132C7, false);
    DefineFunction(cs1, 0x3310, unknown_1000_3310_13310, false);
    DefineFunction(cs1, 0x331E, unknown_1000_331E_1331E, false);
    DefineFunction(cs1, 0x3385, unknown_1000_3385_13385, false);
    DefineFunction(cs1, 0x33AD, unknown_1000_33AD_133AD, false);
    DefineFunction(cs1, 0x33BE, unknown_1000_33BE_133BE, false);
    DefineFunction(cs1, 0x33D9, unknown_1000_33D9_133D9, false);
    DefineFunction(cs1, 0x3406, unknown_1000_3406_13406, false);
    DefineFunction(cs1, 0x342D, unknown_1000_342D_1342D, false);
    DefineFunction(cs1, 0x34A5, unknown_1000_34A5_134A5, false);
    DefineFunction(cs1, 0x34D0, unknown_1000_34D0_134D0, false);
    DefineFunction(cs1, 0x3520, unknown_1000_3520_13520, false);
    DefineFunction(cs1, 0x3551, unknown_1000_3551_13551, false);
    DefineFunction(cs1, 0x35AD, unknown_1000_35AD_135AD, false);
    DefineFunction(cs1, 0x366F, unknown_1000_366F_1366F, false);
    DefineFunction(cs1, 0x368B, unknown_1000_368B_1368B, false);
    DefineFunction(cs1, 0x36D3, unknown_1000_36D3_136D3, false);
    DefineFunction(cs1, 0x36EE, unknown_1000_36EE_136EE, false);
    DefineFunction(cs1, 0x37AD, unknown_1000_37AD_137AD, false);
    DefineFunction(cs1, 0x37B2, unknown_1000_37B2_137B2, false);
    DefineFunction(cs1, 0x37B5, unknown_1000_37B5_137B5, false);
    DefineFunction(cs1, 0x37EB, unknown_1000_37EB_137EB, false);
    DefineFunction(cs1, 0x37F4, unknown_1000_37F4_137F4, false);
    DefineFunction(cs1, 0x380C, unknown_1000_380C_1380C, false);
    DefineFunction(cs1, 0x388D, unknown_1000_388D_1388D, false);
    DefineFunction(cs1, 0x38B4, unknown_1000_38B4_138B4, false);
    DefineFunction(cs1, 0x38E1, unknown_1000_38E1_138E1, false);
    DefineFunction(cs1, 0x38F1, unknown_1000_38F1_138F1, false);
    DefineFunction(cs1, 0x3916, unknown_1000_3916_13916, false);
    DefineFunction(cs1, 0x391D, unknown_1000_391D_1391D, false);
    DefineFunction(cs1, 0x3950, unknown_1000_3950_13950, false);
    DefineFunction(cs1, 0x395C, unknown_1000_395C_1395C, false);
    DefineFunction(cs1, 0x3971, unknown_1000_3971_13971, false);
    DefineFunction(cs1, 0x398C, unknown_1000_398C_1398C, false);
    DefineFunction(cs1, 0x39B9, unknown_1000_39B9_139B9, false);
    DefineFunction(cs1, 0x39E6, unknown_1000_39E6_139E6, false);
    DefineFunction(cs1, 0x3A73, unknown_1000_3A73_13A73, false);
    DefineFunction(cs1, 0x3A7C, unknown_1000_3A7C_13A7C, false);
    DefineFunction(cs1, 0x3A95, unknown_1000_3A95_13A95, false);
    DefineFunction(cs1, 0x3AA9, unknown_1000_3AA9_13AA9, false);
    DefineFunction(cs1, 0x3AE9, Fill47F8WithFF_1000_3AE9_13AE9, false);
    DefineFunction(cs1, 0x3AF9, unknown_1000_3AF9_13AF9, false);
    DefineFunction(cs1, 0x3B59, draw_SAL_ida_1000_3B59_13B59, false);
    DefineFunction(cs1, 0x3BE9, SAL_polygon_ida_1000_3BE9_13BE9, false);
    DefineFunction(cs1, 0x3D2F, unknown_1000_3D2F_13D2F, false);
    DefineFunction(cs1, 0x3D83, do_weird_shit_with_stack_buffer_ida_1000_3D83_13D83, false);
    DefineFunction(cs1, 0x3DF4, unknown_1000_3DF4_13DF4, false);
    DefineFunction(cs1, 0x3E13, unknown_1000_3E13_13E13, false);
    DefineFunction(cs1, 0x3E80, unknown_1000_3E80_13E80, false);
    DefineFunction(cs1, 0x3EFE, unknown_1000_3EFE_13EFE, false);
    DefineFunction(cs1, 0x3F15, unknown_1000_3F15_13F15, false);
    DefineFunction(cs1, 0x3F1A, unknown_1000_3F1A_13F1A, false);
    DefineFunction(cs1, 0x3F1F, unknown_1000_3F1F_13F1F, false);
    DefineFunction(cs1, 0x3F24, unknown_1000_3F24_13F24, false);
    DefineFunction(cs1, 0x401F, unknown_1000_401F_1401F, false);
    DefineFunction(cs1, 0x4057, unknown_1000_4057_14057, false);
    DefineFunction(cs1, 0x407E, unknown_1000_407E_1407E, false);
    DefineFunction(cs1, 0x409A, unknown_1000_409A_1409A, false);
    DefineFunction(cs1, 0x40AE, unknown_1000_40AE_140AE, false);
    DefineFunction(cs1, 0x40C3, unknown_1000_40C3_140C3, false);
    DefineFunction(cs1, 0x40C9, unknown_1000_40C9_140C9, false);
    DefineFunction(cs1, 0x40D5, unknown_1000_40D5_140D5, false);
    DefineFunction(cs1, 0x40E6, unknown_1000_40E6_140E6, false);
    DefineFunction(cs1, 0x40F9, unknown_1000_40F9_140F9, false);
    DefineFunction(cs1, 0x4182, unknown_1000_4182_14182, false);
    DefineFunction(cs1, 0x41C5, unknown_1000_41C5_141C5, false);
    DefineFunction(cs1, 0x41CC, unknown_1000_41CC_141CC, false);
    DefineFunction(cs1, 0x41E1, unknown_1000_41E1_141E1, false);
    DefineFunction(cs1, 0x425B, unknown_1000_425B_1425B, false);
    DefineFunction(cs1, 0x439F, unknown_1000_439F_1439F, false);
    DefineFunction(cs1, 0x43E3, unknown_1000_43E3_143E3, false);
    DefineFunction(cs1, 0x4415, unknown_1000_4415_14415, false);
    DefineFunction(cs1, 0x445D, unknown_1000_445D_1445D, false);
    DefineFunction(cs1, 0x44AB, unknown_1000_44AB_144AB, false);
    DefineFunction(cs1, 0x450E, unknown_1000_450E_1450E, false);
    DefineFunction(cs1, 0x456C, unknown_1000_456C_1456C, false);
    DefineFunction(cs1, 0x4586, unknown_1000_4586_14586, false);
    DefineFunction(cs1, 0x45DE, unknown_1000_45DE_145DE, false);
    DefineFunction(cs1, 0x4658, unknown_1000_4658_14658, false);
    DefineFunction(cs1, 0x469B, unknown_1000_469B_1469B, false);
    DefineFunction(cs1, 0x46B5, unknown_1000_46B5_146B5, false);
    DefineFunction(cs1, 0x4795, unknown_1000_4795_14795, false);
    DefineFunction(cs1, 0x4821, unknown_1000_4821_14821, false);
    DefineFunction(cs1, 0x488A, unknown_1000_488A_1488A, false);
    DefineFunction(cs1, 0x4944, unknown_1000_4944_14944, false);
    DefineFunction(cs1, 0x4988, unknown_1000_4988_14988, false);
    DefineFunction(cs1, 0x49EA, unknown_1000_49EA_149EA, false);
    DefineFunction(cs1, 0x4A00, unknown_1000_4A00_14A00, false);
    DefineFunction(cs1, 0x4A1A, unknown_1000_4A1A_14A1A, false);
    DefineFunction(cs1, 0x4A5A, unknown_1000_4A5A_14A5A, false);
    DefineFunction(cs1, 0x4AB8, unknown_1000_4AB8_14AB8, false);
    DefineFunction(cs1, 0x4ABE, unknown_1000_4ABE_14ABE, false);
    DefineFunction(cs1, 0x4AC4, SetUnknown11CATo0_1000_4AC4_14AC4, false);
    DefineFunction(cs1, 0x4ACA, SetUnknown11CATo1_1000_4ACA_14ACA, false);
    DefineFunction(cs1, 0x4B2B, unknown_1000_4B2B_14B2B, false);
    DefineFunction(cs1, 0x4B3B, unknown_1000_4B3B_14B3B, false);
    DefineFunction(cs1, 0x4D00, unknown_1000_4D00_14D00, false);
    DefineFunction(cs1, 0x4DED, unknown_1000_4DED_14DED, false);
    DefineFunction(cs1, 0x4E12, unknown_1000_4E12_14E12, false);
    DefineFunction(cs1, 0x4EC6, unknown_1000_4EC6_14EC6, false);
    DefineFunction(cs1, 0x4F0C, unknown_1000_4F0C_14F0C, false);
    DefineFunction(cs1, 0x503C, unknown_1000_503C_1503C, false);
    DefineFunction(cs1, 0x50BE, unknown_1000_50BE_150BE, false);
    DefineFunction(cs1, 0x5124, unknown_1000_5124_15124, false);
    DefineFunction(cs1, 0x5133, unknown_1000_5133_15133, false);
    DefineFunction(cs1, 0x514E, unknown_1000_514E_1514E, false);
    DefineFunction(cs1, 0x5198, unknown_1000_5198_15198, false);
    DefineFunction(cs1, 0x51CB, unknown_1000_51CB_151CB, false);
    DefineFunction(cs1, 0x5206, unknown_1000_5206_15206, false);
    DefineFunction(cs1, 0x5274, unknown_1000_5274_15274, false);
    DefineFunction(cs1, 0x5323, unknown_1000_5323_15323, false);
    DefineFunction(cs1, 0x541F, unknown_1000_541F_1541F, false);
    DefineFunction(cs1, 0x542F, unknown_1000_542F_1542F, false);
    DefineFunction(cs1, 0x557B, unknown_1000_557B_1557B, false);
    DefineFunction(cs1, 0x5584, unknown_1000_5584_15584, false);
    DefineFunction(cs1, 0x55DD, map_func_ida_1000_55DD_155DD, false);
    DefineFunction(cs1, 0x5605, unknown_1000_5605_15605, false);
    DefineFunction(cs1, 0x563E, unknown_1000_563E_1563E, false);
    DefineFunction(cs1, 0x5692, unknown_1000_5692_15692, false);
    DefineFunction(cs1, 0x56ED, unknown_1000_56ED_156ED, false);
    DefineFunction(cs1, 0x5728, unknown_1000_5728_15728, false);
    DefineFunction(cs1, 0x5746, unknown_1000_5746_15746, false);
    DefineFunction(cs1, 0x578B, unknown_1000_578B_1578B, false);
    DefineFunction(cs1, 0x57B2, unknown_1000_57B2_157B2, false);
    DefineFunction(cs1, 0x57E5, unknown_1000_57E5_157E5, false);
    DefineFunction(cs1, 0x586E, unknown_1000_586E_1586E, false);
    DefineFunction(cs1, 0x58E4, unknown_1000_58E4_158E4, false);
    DefineFunction(cs1, 0x58FA, unknown_1000_58FA_158FA, false);
    DefineFunction(cs1, 0x5944, unknown_1000_5944_15944, false);
    DefineFunction(cs1, 0x599F, unknown_1000_599F_1599F, false);
    DefineFunction(cs1, 0x59C1, unknown_1000_59C1_159C1, false);
    DefineFunction(cs1, 0x5A1A, unknown_1000_5A1A_15A1A, false);
    DefineFunction(cs1, 0x5A56, unknown_1000_5A56_15A56, false);
    DefineFunction(cs1, 0x5A9A, unknown_1000_5A9A_15A9A, false);
    DefineFunction(cs1, 0x5AD3, unknown_1000_5AD3_15AD3, false);
    DefineFunction(cs1, 0x5AD9, unknown_1000_5AD9_15AD9, false);
    DefineFunction(cs1, 0x5ADF, unknown_1000_5ADF_15ADF, false);
    DefineFunction(cs1, 0x5B55, unknown_1000_5B55_15B55, false);
    DefineFunction(cs1, 0x5B5D, unknown_1000_5B5D_15B5D, false);
    DefineFunction(cs1, 0x5B69, unknown_1000_5B69_15B69, false);
    DefineFunction(cs1, 0x5B6E, unknown_1000_5B6E_15B6E, false);
    DefineFunction(cs1, 0x5B8D, unknown_1000_5B8D_15B8D, false);
    DefineFunction(cs1, 0x5B93, unknown_1000_5B93_15B93, false);
    DefineFunction(cs1, 0x5B96, UnknownMemcopy_1000_5B96_15B96, false);
    DefineFunction(cs1, 0x5B99, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99, false);
    DefineFunction(cs1, 0x5BA0, MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0, false);
    DefineFunction(cs1, 0x5BA8, MemCopy8Bytes_1000_5BA8_15BA8, false);
    DefineFunction(cs1, 0x5BB0, unknown_1000_5BB0_15BB0, false);
    DefineFunction(cs1, 0x5BEB, unknown_1000_5BEB_15BEB, false);
    DefineFunction(cs1, 0x5C03, unknown_1000_5C03_15C03, false);
    DefineFunction(cs1, 0x5C76, unknown_1000_5C76_15C76, false);
    DefineFunction(cs1, 0x5D1D, unknown_1000_5D1D_15D1D, false);
    DefineFunction(cs1, 0x5D36, unknown_1000_5D36_15D36, false);
    DefineFunction(cs1, 0x5D6D, unknown_1000_5D6D_15D6D, false);
    DefineFunction(cs1, 0x5DCE, unknown_1000_5DCE_15DCE, false);
    DefineFunction(cs1, 0x5E42, unknown_1000_5E42_15E42, false);
    DefineFunction(cs1, 0x5E4F, calc_SAL_index_ida_1000_5E4F_15E4F, false);
    DefineFunction(cs1, 0x5E6D, unknown_1000_5E6D_15E6D, false);
    DefineFunction(cs1, 0x5ED0, unknown_1000_5ED0_15ED0, false);
    DefineFunction(cs1, 0x5EE4, unknown_1000_5EE4_15EE4, false);
    DefineFunction(cs1, 0x5F79, unknown_1000_5F79_15F79, false);
    DefineFunction(cs1, 0x5F91, unknown_1000_5F91_15F91, false);
    DefineFunction(cs1, 0x600E, unknown_1000_600E_1600E, false);
    DefineFunction(cs1, 0x60AC, unknown_1000_60AC_160AC, false);
    DefineFunction(cs1, 0x61D3, unknown_1000_61D3_161D3, false);
    DefineFunction(cs1, 0x6231, unknown_1000_6231_16231, false);
    DefineFunction(cs1, 0x6252, unknown_1000_6252_16252, false);
    DefineFunction(cs1, 0x627E, unknown_1000_627E_1627E, false);
    DefineFunction(cs1, 0x629D, unknown_1000_629D_1629D, false);
    DefineFunction(cs1, 0x62A6, unknown_1000_62A6_162A6, false);
    DefineFunction(cs1, 0x62C9, unknown_1000_62C9_162C9, false);
    DefineFunction(cs1, 0x62D6, unknown_1000_62D6_162D6, false);
    DefineFunction(cs1, 0x62F2, unknown_1000_62F2_162F2, false);
    DefineFunction(cs1, 0x6314, unknown_1000_6314_16314, false);
    DefineFunction(cs1, 0x633B, unknown_1000_633B_1633B, false);
    DefineFunction(cs1, 0x634D, unknown_1000_634D_1634D, false);
    DefineFunction(cs1, 0x636A, unknown_1000_636A_1636A, false);
    DefineFunction(cs1, 0x639A, unknown_1000_639A_1639A, false);
    DefineFunction(cs1, 0x63F0, map_func_qq_ida_1000_63F0_163F0, false);
    DefineFunction(cs1, 0x642E, unknown_1000_642E_1642E, false);
    DefineFunction(cs1, 0x644E, unknown_1000_644E_1644E, false);
    DefineFunction(cs1, 0x646F, unknown_1000_646F_1646F, false);
    DefineFunction(cs1, 0x64EF, unknown_1000_64EF_164EF, false);
    DefineFunction(cs1, 0x6603, unknown_1000_6603_16603, false);
    DefineFunction(cs1, 0x661D, unknown_1000_661D_1661D, false);
    DefineFunction(cs1, 0x6639, unknown_1000_6639_16639, false);
    DefineFunction(cs1, 0x66CE, unknown_1000_66CE_166CE, false);
    DefineFunction(cs1, 0x6715, unknown_1000_6715_16715, false);
    DefineFunction(cs1, 0x6757, unknown_1000_6757_16757, false);
    DefineFunction(cs1, 0x6770, unknown_1000_6770_16770, false);
    DefineFunction(cs1, 0x686E, unknown_1000_686E_1686E, false);
    DefineFunction(cs1, 0x68EB, unknown_1000_68EB_168EB, false);
    DefineFunction(cs1, 0x6906, unknown_1000_6906_16906, false);
    DefineFunction(cs1, 0x6917, unknown_1000_6917_16917, false);
    DefineFunction(cs1, 0x693B, unknown_1000_693B_1693B, false);
    DefineFunction(cs1, 0x6946, unknown_1000_6946_16946, false);
    DefineFunction(cs1, 0x697C, unknown_1000_697C_1697C, false);
    DefineFunction(cs1, 0x69A3, unknown_1000_69A3_169A3, false);
    DefineFunction(cs1, 0x6A33, unknown_1000_6A33_16A33, false);
    DefineFunction(cs1, 0x6A89, unknown_1000_6A89_16A89, false);
    DefineFunction(cs1, 0x6ACB, unknown_1000_6ACB_16ACB, false);
    DefineFunction(cs1, 0x6AD4, unknown_1000_6AD4_16AD4, false);
    DefineFunction(cs1, 0x6B25, unknown_1000_6B25_16B25, false);
    DefineFunction(cs1, 0x6B34, unknown_1000_6B34_16B34, false);
    DefineFunction(cs1, 0x6B8A, unknown_1000_6B8A_16B8A, false);
    DefineFunction(cs1, 0x6B96, unknown_1000_6B96_16B96, false);
    DefineFunction(cs1, 0x6C15, unknown_1000_6C15_16C15, false);
    DefineFunction(cs1, 0x6C46, unknown_1000_6C46_16C46, false);
    DefineFunction(cs1, 0x6C6F, unknown_1000_6C6F_16C6F, false);
    DefineFunction(cs1, 0x6CFC, unknown_1000_6CFC_16CFC, false);
    DefineFunction(cs1, 0x6D19, unknown_1000_6D19_16D19, false);
    DefineFunction(cs1, 0x6D7B, unknown_1000_6D7B_16D7B, false);
    DefineFunction(cs1, 0x6E20, unknown_1000_6E20_16E20, false);
    DefineFunction(cs1, 0x6E82, unknown_1000_6E82_16E82, false);
    DefineFunction(cs1, 0x6EA8, unknown_1000_6EA8_16EA8, false);
    DefineFunction(cs1, 0x6EBF, unknown_1000_6EBF_16EBF, false);
    DefineFunction(cs1, 0x6ECB, unknown_1000_6ECB_16ECB, false);
    DefineFunction(cs1, 0x6EDD, unknown_1000_6EDD_16EDD, false);
    DefineFunction(cs1, 0x6EFD, unknown_1000_6EFD_16EFD, false);
    DefineFunction(cs1, 0x6F78, unknown_1000_6F78_16F78, false);
    DefineFunction(cs1, 0x6F93, unknown_1000_6F93_16F93, false);
    DefineFunction(cs1, 0x6FE5, unknown_1000_6FE5_16FE5, false);
    DefineFunction(cs1, 0x7085, unknown_1000_7085_17085, false);
    DefineFunction(cs1, 0x708A, unknown_1000_708A_1708A, false);
    DefineFunction(cs1, 0x70CC, unknown_1000_70CC_170CC, false);
    DefineFunction(cs1, 0x714C, unknown_1000_714C_1714C, false);
    DefineFunction(cs1, 0x71BC, unknown_1000_71BC_171BC, false);
    DefineFunction(cs1, 0x739E, map_func_ida_1000_739E_1739E, false);
    DefineFunction(cs1, 0x77D7, unknown_1000_77D7_177D7, false);
    DefineFunction(cs1, 0x780A, unknown_1000_780A_1780A, false);
    DefineFunction(cs1, 0x7847, unknown_1000_7847_17847, false);
    DefineFunction(cs1, 0x79DE, unknown_1000_79DE_179DE, false);
    DefineFunction(cs1, 0x79EE, unknown_1000_79EE_179EE, false);
    DefineFunction(cs1, 0x7B0F, unknown_1000_7B0F_17B0F, false);
    DefineFunction(cs1, 0x7B1B, unknown_1000_7B1B_17B1B, false);
    DefineFunction(cs1, 0x7B2B, unknown_1000_7B2B_17B2B, false);
    DefineFunction(cs1, 0x7B36, unknown_1000_7B36_17B36, false);
    DefineFunction(cs1, 0x7B58, unknown_1000_7B58_17B58, false);
    DefineFunction(cs1, 0x7BA3, unknown_1000_7BA3_17BA3, false);
    DefineFunction(cs1, 0x7BB9, unknown_1000_7BB9_17BB9, false);
    DefineFunction(cs1, 0x7BBE, unknown_1000_7BBE_17BBE, false);
    DefineFunction(cs1, 0x7BE0, unknown_1000_7BE0_17BE0, false);
    DefineFunction(cs1, 0x7BED, unknown_1000_7BED_17BED, false);
    DefineFunction(cs1, 0x7C02, unknown_1000_7C02_17C02, false);
    DefineFunction(cs1, 0x7C63, unknown_1000_7C63_17C63, false);
    DefineFunction(cs1, 0x7C8F, unknown_1000_7C8F_17C8F, false);
    DefineFunction(cs1, 0x7D0C, unknown_1000_7D0C_17D0C, false);
    DefineFunction(cs1, 0x7D68, unknown_1000_7D68_17D68, false);
    DefineFunction(cs1, 0x7DD9, unknown_1000_7DD9_17DD9, false);
    DefineFunction(cs1, 0x7E1E, unknown_1000_7E1E_17E1E, false);
    DefineFunction(cs1, 0x7E3D, unknown_1000_7E3D_17E3D, false);
    DefineFunction(cs1, 0x7EE2, unknown_1000_7EE2_17EE2, false);
    DefineFunction(cs1, 0x7EFB, unknown_1000_7EFB_17EFB, false);
    DefineFunction(cs1, 0x7F11, unknown_1000_7F11_17F11, false);
    DefineFunction(cs1, 0x7F27, unknown_1000_7F27_17F27, false);
    DefineFunction(cs1, 0x7F2A, unknown_1000_7F2A_17F2A, false);
    DefineFunction(cs1, 0x7F5F, unknown_1000_7F5F_17F5F, false);
    DefineFunction(cs1, 0x7F75, unknown_1000_7F75_17F75, false);
    DefineFunction(cs1, 0x7F90, unknown_1000_7F90_17F90, false);
    DefineFunction(cs1, 0x8018, unknown_1000_8018_18018, false);
    DefineFunction(cs1, 0x80AC, unknown_1000_80AC_180AC, false);
    DefineFunction(cs1, 0x80DF, unknown_1000_80DF_180DF, false);
    DefineFunction(cs1, 0x813E, unknown_1000_813E_1813E, false);
    DefineFunction(cs1, 0x81D7, unknown_1000_81D7_181D7, false);
    DefineFunction(cs1, 0x81EC, unknown_1000_81EC_181EC, false);
    DefineFunction(cs1, 0x824D, unknown_1000_824D_1824D, false);
    DefineFunction(cs1, 0x8250, unknown_1000_8250_18250, false);
    DefineFunction(cs1, 0x8256, unknown_1000_8256_18256, false);
    DefineFunction(cs1, 0x82B7, unknown_1000_82B7_182B7, false);
    DefineFunction(cs1, 0x82DA, unknown_1000_82DA_182DA, false);
    DefineFunction(cs1, 0x8308, unknown_1000_8308_18308, false);
    DefineFunction(cs1, 0x8347, unknown_1000_8347_18347, false);
    DefineFunction(cs1, 0x8461, unknown_1000_8461_18461, false);
    DefineFunction(cs1, 0x848F, unknown_1000_848F_1848F, false);
    DefineFunction(cs1, 0x84A6, unknown_1000_84A6_184A6, false);
    DefineFunction(cs1, 0x851F, unknown_1000_851F_1851F, false);
    DefineFunction(cs1, 0x858C, unknown_1000_858C_1858C, false);
    DefineFunction(cs1, 0x85CC, unknown_1000_85CC_185CC, false);
    DefineFunction(cs1, 0x8604, unknown_1000_8604_18604, false);
    DefineFunction(cs1, 0x8751, unknown_1000_8751_18751, false);
    DefineFunction(cs1, 0x8763, unknown_1000_8763_18763, false);
    DefineFunction(cs1, 0x8770, unknown_1000_8770_18770, false);
    DefineFunction(cs1, 0x878C, unknown_1000_878C_1878C, false);
    DefineFunction(cs1, 0x881F, unknown_1000_881F_1881F, false);
    DefineFunction(cs1, 0x8824, unknown_1000_8824_18824, false);
    DefineFunction(cs1, 0x8829, unknown_1000_8829_18829, false);
    DefineFunction(cs1, 0x882E, unknown_1000_882E_1882E, false);
    DefineFunction(cs1, 0x8865, unknown_1000_8865_18865, false);
    DefineFunction(cs1, 0x88AF, unknown_1000_88AF_188AF, false);
    DefineFunction(cs1, 0x88D2, unknown_1000_88D2_188D2, false);
    DefineFunction(cs1, 0x88E1, unknown_1000_88E1_188E1, false);
    DefineFunction(cs1, 0x88F1, unknown_1000_88F1_188F1, false);
    DefineFunction(cs1, 0x8944, unknown_1000_8944_18944, false);
    DefineFunction(cs1, 0x8A23, unknown_1000_8A23_18A23, false);
    DefineFunction(cs1, 0x8A3B, unknown_1000_8A3B_18A3B, false);
    DefineFunction(cs1, 0x8AC3, unknown_1000_8AC3_18AC3, false);
    DefineFunction(cs1, 0x8ACC, unknown_1000_8ACC_18ACC, false);
    DefineFunction(cs1, 0x8B11, unknown_1000_8B11_18B11, false);
    DefineFunction(cs1, 0x8C8A, unknown_1000_8C8A_18C8A, false);
    DefineFunction(cs1, 0x8CCD, unknown_1000_8CCD_18CCD, false);
    DefineFunction(cs1, 0x8DF0, unknown_1000_8DF0_18DF0, false);
    DefineFunction(cs1, 0x8E16, unknown_1000_8E16_18E16, false);
    DefineFunction(cs1, 0x8E9E, unknown_1000_8E9E_18E9E, false);
    DefineFunction(cs1, 0x8ED3, unknown_1000_8ED3_18ED3, false);
    DefineFunction(cs1, 0x8F28, unknown_1000_8F28_18F28, false);
    DefineFunction(cs1, 0x8FD1, unknown_1000_8FD1_18FD1, false);
    DefineFunction(cs1, 0x9025, unknown_1000_9025_19025, false);
    DefineFunction(cs1, 0x9046, unknown_1000_9046_19046, false);
    DefineFunction(cs1, 0x908C, unknown_1000_908C_1908C, false);
    DefineFunction(cs1, 0x90BD, unknown_1000_90BD_190BD, false);
    DefineFunction(cs1, 0x9123, unknown_1000_9123_19123, false);
    DefineFunction(cs1, 0x9197, unknown_1000_9197_19197, false);
    DefineFunction(cs1, 0x91A0, unknown_1000_91A0_191A0, false);
    DefineFunction(cs1, 0x920F, unknown_1000_920F_1920F, false);
    DefineFunction(cs1, 0x9215, unknown_1000_9215_19215, false);
    DefineFunction(cs1, 0x9285, unknown_1000_9285_19285, false);
    DefineFunction(cs1, 0x92C9, unknown_1000_92C9_192C9, false);
    DefineFunction(cs1, 0x93DF, unknown_1000_93DF_193DF, false);
    DefineFunction(cs1, 0x941D, unknown_1000_941D_1941D, false);
    DefineFunction(cs1, 0x945B, unknown_1000_945B_1945B, false);
    DefineFunction(cs1, 0x9468, unknown_1000_9468_19468, false);
    DefineFunction(cs1, 0x94F3, unknown_1000_94F3_194F3, false);
    DefineFunction(cs1, 0x9556, unknown_1000_9556_19556, false);
    DefineFunction(cs1, 0x956D, unknown_1000_956D_1956D, false);
    DefineFunction(cs1, 0x9655, unknown_1000_9655_19655, false);
    DefineFunction(cs1, 0x9673, unknown_1000_9673_19673, false);
    DefineFunction(cs1, 0x96B5, unknown_1000_96B5_196B5, false);
    DefineFunction(cs1, 0x96D8, unknown_1000_96D8_196D8, false);
    DefineFunction(cs1, 0x96F1, unknown_1000_96F1_196F1, false);
    DefineFunction(cs1, 0x9702, unknown_1000_9702_19702, false);
    DefineFunction(cs1, 0x9719, unknown_1000_9719_19719, false);
    DefineFunction(cs1, 0x9761, unknown_1000_9761_19761, false);
    DefineFunction(cs1, 0x978E, unknown_1000_978E_1978E, false);
    DefineFunction(cs1, 0x97CF, unknown_1000_97CF_197CF, false);
    DefineFunction(cs1, 0x98B2, unknown_1000_98B2_198B2, false);
    DefineFunction(cs1, 0x98E6, unknown_1000_98E6_198E6, false);
    DefineFunction(cs1, 0x98F5, ClearUnknownValuesAndAX_1000_98F5_198F5, false);
    DefineFunction(cs1, 0x9901, Set479ETo0_1000_9901_19901, false);
    DefineFunction(cs1, 0x9908, unknown_1000_9908_19908, false);
    DefineFunction(cs1, 0x9945, unknown_1000_9945_19945, false);
    DefineFunction(cs1, 0x994F, unknown_1000_994F_1994F, false);
    DefineFunction(cs1, 0x996C, unknown_1000_996C_1996C, false);
    DefineFunction(cs1, 0x9985, unknown_1000_9985_19985, false);
    DefineFunction(cs1, 0x99BE, unknown_1000_99BE_199BE, false);
    DefineFunction(cs1, 0x99F6, unknown_1000_99F6_199F6, false);
    DefineFunction(cs1, 0x9A60, unknown_1000_9A60_19A60, false);
    DefineFunction(cs1, 0x9A7B, unknown_1000_9A7B_19A7B, false);
    DefineFunction(cs1, 0x9AB4, unknown_1000_9AB4_19AB4, false);
    DefineFunction(cs1, 0x9B09, unknown_1000_9B09_19B09, false);
    DefineFunction(cs1, 0x9B49, unknown_1000_9B49_19B49, false);
    DefineFunction(cs1, 0x9B8B, unknown_1000_9B8B_19B8B, false);
    DefineFunction(cs1, 0x9BAC, unknown_1000_9BAC_19BAC, false);
    DefineFunction(cs1, 0x9BB1, unknown_1000_9BB1_19BB1, false);
    DefineFunction(cs1, 0x9BEE, unknown_1000_9BEE_19BEE, false);
    DefineFunction(cs1, 0x9C2D, unknown_1000_9C2D_19C2D, false);
    DefineFunction(cs1, 0x9C54, unknown_1000_9C54_19C54, false);
    DefineFunction(cs1, 0x9CC6, unknown_1000_9CC6_19CC6, false);
    DefineFunction(cs1, 0x9D16, unknown_1000_9D16_19D16, false);
    DefineFunction(cs1, 0x9D6A, unknown_1000_9D6A_19D6A, false);
    DefineFunction(cs1, 0x9D94, unknown_1000_9D94_19D94, false);
    DefineFunction(cs1, 0x9EF1, unknown_1000_9EF1_19EF1, false);
    DefineFunction(cs1, 0x9EFD, unknown_1000_9EFD_19EFD, false);
    DefineFunction(cs1, 0x9F31, unknown_1000_9F31_19F31, false);
    DefineFunction(cs1, 0x9F40, unknown_1000_9F40_19F40, false);
    DefineFunction(cs1, 0x9F82, unknown_1000_9F82_19F82, false);
    DefineFunction(cs1, 0x9F8B, unknown_1000_9F8B_19F8B, false);
    DefineFunction(cs1, 0x9F9E, unknown_1000_9F9E_19F9E, false);
    DefineFunction(cs1, 0xA03F, unknown_1000_A03F_1A03F, false);
    DefineFunction(cs1, 0xA0F1, unknown_1000_A0F1_1A0F1, false);
    DefineFunction(cs1, 0xA125, unknown_1000_A125_1A125, false);
    DefineFunction(cs1, 0xA157, unknown_1000_A157_1A157, false);
    DefineFunction(cs1, 0xA172, unknown_1000_A172_1A172, false);
    DefineFunction(cs1, 0xA1C4, unknown_1000_A1C4_1A1C4, false);
    DefineFunction(cs1, 0xA1D0, unknown_1000_A1D0_1A1D0, false);
    DefineFunction(cs1, 0xA1D6, unknown_1000_A1D6_1A1D6, false);
    DefineFunction(cs1, 0xA1DC, unknown_1000_A1DC_1A1DC, false);
    DefineFunction(cs1, 0xA1E2, unknown_1000_A1E2_1A1E2, false);
    DefineFunction(cs1, 0xA1E8, IncUnknown47A8_1000_A1E8_1A1E8, false);
    DefineFunction(cs1, 0xA1F7, unknown_1000_A1F7_1A1F7, false);
    DefineFunction(cs1, 0xA219, unknown_1000_A219_1A219, false);
    DefineFunction(cs1, 0xA235, unknown_1000_A235_1A235, false);
    DefineFunction(cs1, 0xA244, unknown_1000_A244_1A244, false);
    DefineFunction(cs1, 0xA25B, unknown_1000_A25B_1A25B, false);
    DefineFunction(cs1, 0xA30B, unknown_1000_A30B_1A30B, false);
    DefineFunction(cs1, 0xA334, unknown_1000_A334_1A334, false);
    DefineFunction(cs1, 0xA396, unknown_1000_A396_1A396, false);
    DefineFunction(cs1, 0xA42C, unknown_1000_A42C_1A42C, false);
    DefineFunction(cs1, 0xA44C, unknown_1000_A44C_1A44C, false);
    DefineFunction(cs1, 0xA453, unknown_1000_A453_1A453, false);
    DefineFunction(cs1, 0xA45C, unknown_1000_A45C_1A45C, false);
    DefineFunction(cs1, 0xA465, unknown_1000_A465_1A465, false);
    DefineFunction(cs1, 0xA47D, unknown_1000_A47D_1A47D, false);
    DefineFunction(cs1, 0xA4C6, unknown_1000_A4C6_1A4C6, false);
    DefineFunction(cs1, 0xA502, unknown_1000_A502_1A502, false);
    DefineFunction(cs1, 0xA541, unknown_1000_A541_1A541, false);
    DefineFunction(cs1, 0xA576, unknown_1000_A576_1A576, false);
    DefineFunction(cs1, 0xA5AA, unknown_1000_A5AA_1A5AA, false);
    DefineFunction(cs1, 0xA637, unknown_1000_A637_1A637, false);
    DefineFunction(cs1, 0xA650, unknown_1000_A650_1A650, false);
    DefineFunction(cs1, 0xA6CC, unknown_1000_A6CC_1A6CC, false);
    DefineFunction(cs1, 0xA7A5, unknown_1000_A7A5_1A7A5, false);
    DefineFunction(cs1, 0xA7C2, unknown_1000_A7C2_1A7C2, false);
    DefineFunction(cs1, 0xA83F, unknown_1000_A83F_1A83F, false);
    DefineFunction(cs1, 0xA87E, audio_test_frequency_ida_1000_A87E_1A87E, false);
    DefineFunction(cs1, 0xA8B1, Unknown_1000_A8B1_1A8B1, false);
    DefineFunction(cs1, 0xA8BC, unknown_1000_A8BC_1A8BC, false);
    DefineFunction(cs1, 0xA90B, open_res_file_ida_1000_A90B_1A90B, false);
    DefineFunction(cs1, 0xA93F, read_audio_file_ida_1000_A93F_1A93F, false);
    DefineFunction(cs1, 0xA9A1, close_res_file_handle_ida_1000_A9A1_1A9A1, false);
    DefineFunction(cs1, 0xA9E7, pcm_test_audio_done_ida_1000_A9E7_1A9E7, false);
    DefineFunction(cs1, 0xAA0F, decode_sd_block_ida_1000_AA0F_1AA0F, false);
    DefineFunction(cs1, 0xAA70, transfer_sd_block_qq_ida_1000_AA70_1AA70, false);
    DefineFunction(cs1, 0xAA96, unknown_1000_AA96_1AA96, false);
    DefineFunction(cs1, 0xAB15, audio_start_voc_ida_1000_AB15_1AB15, false);
    DefineFunction(cs1, 0xAB45, unknown_1000_AB45_1AB45, false);
    DefineFunction(cs1, 0xAB4F, unknown_1000_AB4F_1AB4F, false);
    DefineFunction(cs1, 0xABA3, check_res_file_open_ida_1000_ABA3_1ABA3, false);
    DefineFunction(cs1, 0xABA9, unknown_1000_ABA9_1ABA9, false);
    DefineFunction(cs1, 0xABCC, IsUnknownDC2BZero_1000_ABCC_1ABCC, false);
    DefineFunction(cs1, 0xABD5, unknown_1000_ABD5_1ABD5, false);
    DefineFunction(cs1, 0xABE9, open_voc_resource_ida_1000_ABE9_1ABE9, false);
    DefineFunction(cs1, 0xAC14, pcm_stop_voc_q_ida_1000_AC14_1AC14, false);
    DefineFunction(cs1, 0xAC30, CallPcmFunc05_1000_AC30_1AC30, false);
    DefineFunction(cs1, 0xAC3A, unknown_1000_AC3A_1AC3A, false);
    DefineFunction(cs1, 0xACE6, unknown_1000_ACE6_1ACE6, false);
    DefineFunction(cs1, 0xAD43, unknown_1000_AD43_1AD43, false);
    DefineFunction(cs1, 0xAD50, unknown_1000_AD50_1AD50, false);
    DefineFunction(cs1, 0xAD57, play_music_MORNING_HSQ_ida_1000_AD57_1AD57, false);
    DefineFunction(cs1, 0xAD5E, unknown_1000_AD5E_1AD5E, false);
    DefineFunction(cs1, 0xAD95, unknown_1000_AD95_1AD95, false);
    DefineFunction(cs1, 0xADBE, unknown_1000_ADBE_1ADBE, false);
    DefineFunction(cs1, 0xADE0, unknown_1000_ADE0_1ADE0, false);
    DefineFunction(cs1, 0xADED, unknown_1000_ADED_1ADED, false);
    DefineFunction(cs1, 0xAE04, unknown_1000_AE04_1AE04, false);
    DefineFunction(cs1, 0xAE28, IsUnknownDBC80x100_1000_AE28_1AE28, false);
    DefineFunction(cs1, 0xAE2F, CheckPcmEnabled_1000_AE2F_1AE2F, false);
    DefineFunction(cs1, 0xAE3F, unknown_1000_AE3F_1AE3F, false);
    DefineFunction(cs1, 0xAE54, unknown_1000_AE54_1AE54, false);
    DefineFunction(cs1, 0xAE62, load_music_ida_1000_AE62_1AE62, false);
    DefineFunction(cs1, 0xAEB7, CallMidiFunc02_1000_AEB7_1AEB7, false);
    DefineFunction(cs1, 0xAEC6, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6, false);
    DefineFunction(cs1, 0xAED6, unknown_1000_AED6_1AED6, false);
    DefineFunction(cs1, 0xAF00, unknown_1000_AF00_1AF00, false);
    DefineFunction(cs1, 0xAF26, unknown_1000_AF26_1AF26, false);
    DefineFunction(cs1, 0xAF43, unknown_1000_AF43_1AF43, false);
    DefineFunction(cs1, 0xB024, unknown_1000_B024_1B024, false);
    DefineFunction(cs1, 0xB02C, unknown_1000_B02C_1B02C, false);
    DefineFunction(cs1, 0xB039, unknown_1000_B039_1B039, false);
    DefineFunction(cs1, 0xB126, unknown_1000_B126_1B126, false);
    DefineFunction(cs1, 0xB147, unknown_1000_B147_1B147, false);
    DefineFunction(cs1, 0xB150, unknown_1000_B150_1B150, false);
    DefineFunction(cs1, 0xB17A, unknown_1000_B17A_1B17A, false);
    DefineFunction(cs1, 0xB1AF, unknown_1000_B1AF_1B1AF, false);
    DefineFunction(cs1, 0xB1EE, unknown_1000_B1EE_1B1EE, false);
    DefineFunction(cs1, 0xB236, unknown_1000_B236_1B236, false);
    DefineFunction(cs1, 0xB23F, unknown_1000_B23F_1B23F, false);
    DefineFunction(cs1, 0xB254, unknown_1000_B254_1B254, false);
    DefineFunction(cs1, 0xB2AA, unknown_1000_B2AA_1B2AA, false);
    DefineFunction(cs1, 0xB2B3, unknown_1000_B2B3_1B2B3, false);
    DefineFunction(cs1, 0xB2B9, Inc2788_1000_B2B9_1B2B9, false);
    DefineFunction(cs1, 0xB2BE, SetUnknown2788To0_1000_B2BE_1B2BE, false);
    DefineFunction(cs1, 0xB2C4, unknown_1000_B2C4_1B2C4, false);
    DefineFunction(cs1, 0xB2CD, unknown_1000_B2CD_1B2CD, false);
    DefineFunction(cs1, 0xB30F, unknown_1000_B30F_1B30F, false);
    DefineFunction(cs1, 0xB389, open_sav_cl_ida_1000_B389_1B389, false);
    DefineFunction(cs1, 0xB427, map_func_ida_1000_B427_1B427, false);
    DefineFunction(cs1, 0xB473, unknown_1000_B473_1B473, false);
    DefineFunction(cs1, 0xB4BB, unknown_1000_B4BB_1B4BB, false);
    DefineFunction(cs1, 0xB4EA, unknown_1000_B4EA_1B4EA, false);
    DefineFunction(cs1, 0xB532, unknown_1000_B532_1B532, false);
    DefineFunction(cs1, 0xB53B, unknown_1000_B53B_1B53B, false);
    DefineFunction(cs1, 0xB56C, unknown_1000_B56C_1B56C, false);
    DefineFunction(cs1, 0xB58B, map_func_ida_1000_B58B_1B58B, false);
    DefineFunction(cs1, 0xB5A0, unknown_1000_B5A0_1B5A0, false);
    DefineFunction(cs1, 0xB5C5, unknown_1000_B5C5_1B5C5, false);
    DefineFunction(cs1, 0xB5CF, unknown_1000_B5CF_1B5CF, false);
    DefineFunction(cs1, 0xB5F9, unknown_1000_B5F9_1B5F9, false);
    DefineFunction(cs1, 0xB647, unknown_1000_B647_1B647, false);
    DefineFunction(cs1, 0xB683, unknown_1000_B683_1B683, false);
    DefineFunction(cs1, 0xB69A, unknown_1000_B69A_1B69A, false);
    DefineFunction(cs1, 0xB6C3, map_func_ida_1000_B6C3_1B6C3, false);
    DefineFunction(cs1, 0xB7D2, unknown_1000_B7D2_1B7D2, false);
    DefineFunction(cs1, 0xB827, unknown_1000_B827_1B827, false);
    DefineFunction(cs1, 0xB84A, unknown_1000_B84A_1B84A, false);
    DefineFunction(cs1, 0xB85A, unknown_1000_B85A_1B85A, false);
    DefineFunction(cs1, 0xB87E, unknown_1000_B87E_1B87E, false);
    DefineFunction(cs1, 0xB8A7, unknown_1000_B8A7_1B8A7, false);
    DefineFunction(cs1, 0xB8C6, unknown_1000_B8C6_1B8C6, false);
    DefineFunction(cs1, 0xB8EA, unknown_1000_B8EA_1B8EA, false);
    DefineFunction(cs1, 0xB8F3, unknown_1000_B8F3_1B8F3, false);
    DefineFunction(cs1, 0xB915, unknown_1000_B915_1B915, false);
    DefineFunction(cs1, 0xB930, unknown_1000_B930_1B930, false);
    DefineFunction(cs1, 0xB93B, unknown_1000_B93B_1B93B, false);
    DefineFunction(cs1, 0xB941, unknown_1000_B941_1B941, false);
    DefineFunction(cs1, 0xB96B, unknown_1000_B96B_1B96B, false);
    DefineFunction(cs1, 0xB977, map_func_gfx_ida_1000_B977_1B977, false);
    DefineFunction(cs1, 0xB98B, unknown_1000_B98B_1B98B, false);
    DefineFunction(cs1, 0xB9AE, unknown_1000_B9AE_1B9AE, false);
    DefineFunction(cs1, 0xB9E0, unknown_1000_B9E0_1B9E0, false);
    DefineFunction(cs1, 0xB9F6, unknown_1000_B9F6_1B9F6, false);
    DefineFunction(cs1, 0xBA15, unknown_1000_BA15_1BA15, false);
    DefineFunction(cs1, 0xBA75, unknown_1000_BA75_1BA75, false);
    DefineFunction(cs1, 0xBA9E, unknown_1000_BA9E_1BA9E, false);
    DefineFunction(cs1, 0xBAF2, unknown_1000_BAF2_1BAF2, false);
    DefineFunction(cs1, 0xBC0C, unknown_1000_BC0C_1BC0C, false);
    DefineFunction(cs1, 0xBC1F, unknown_1000_BC1F_1BC1F, false);
    DefineFunction(cs1, 0xBC4E, unknown_1000_BC4E_1BC4E, false);
    DefineFunction(cs1, 0xBC99, unknown_1000_BC99_1BC99, false);
    DefineFunction(cs1, 0xBD00, unknown_1000_BD00_1BD00, false);
    DefineFunction(cs1, 0xBDBB, unknown_1000_BDBB_1BDBB, false);
    DefineFunction(cs1, 0xBDFA, unknown_1000_BDFA_1BDFA, false);
    DefineFunction(cs1, 0xBE1D, unknown_1000_BE1D_1BE1D, false);
    DefineFunction(cs1, 0xBE57, unknown_1000_BE57_1BE57, false);
    DefineFunction(cs1, 0xBED7, unknown_1000_BED7_1BED7, false);
    DefineFunction(cs1, 0xBF26, unknown_1000_BF26_1BF26, false);
    DefineFunction(cs1, 0xBF61, unknown_1000_BF61_1BF61, false);
    DefineFunction(cs1, 0xBF73, unknown_1000_BF73_1BF73, false);
    DefineFunction(cs1, 0xBFA7, unknown_1000_BFA7_1BFA7, false);
    DefineFunction(cs1, 0xBFE3, map_func_ida_1000_BFE3_1BFE3, false);
    DefineFunction(cs1, 0xC02E, unknown_1000_C02E_1C02E, false);
    DefineFunction(cs1, 0xC07C, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C, false);
    DefineFunction(cs1, 0xC085, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085, false);
    DefineFunction(cs1, 0xC08E, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E, false);
    DefineFunction(cs1, 0xC097, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097, false);
    DefineFunction(cs1, 0xC0AD, ClearCurrentVideoBuffer_1000_C0AD_1C0AD, false);
    DefineFunction(cs1, 0xC0D5, unknown_1000_C0D5_1C0D5, false);
    DefineFunction(cs1, 0xC0E8, unknown_1000_C0E8_1C0E8, false);
    DefineFunction(cs1, 0xC0F4, unknown_1000_C0F4_1C0F4, false);
    DefineFunction(cs1, 0xC102, unknown_1000_C102_1C102, false);
    DefineFunction(cs1, 0xC108, transition_ida_1000_C108_1C108, false);
    DefineFunction(cs1, 0xC137, load_icons_sprites_ida_1000_C137_1C137, false);
    DefineFunction(cs1, 0xC13B, unknown_1000_C13B_1C13B, false);
    DefineFunction(cs1, 0xC13E, open_sprite_sheet_ida_1000_C13E_1C13E, false);
    DefineFunction(cs1, 0xC1AA, unknown_1000_C1AA_1C1AA, false);
    DefineFunction(cs1, 0xC1BA, hnm_apply_palette_ida_1000_C1BA_1C1BA, false);
    DefineFunction(cs1, 0xC1F4, GetEsSiPointerToUnknown_1000_C1F4_1C1F4, false);
    DefineFunction(cs1, 0xC202, unknown_1000_C202_1C202, false);
    DefineFunction(cs1, 0xC21B, unknown_1000_C21B_1C21B, false);
    DefineFunction(cs1, 0xC22F, draw_sprite_ida_1000_C22F_1C22F, false);
    DefineFunction(cs1, 0xC2A1, unknown_1000_C2A1_1C2A1, false);
    DefineFunction(cs1, 0xC2F2, unknown_1000_C2F2_1C2F2, false);
    DefineFunction(cs1, 0xC2FD, unknown_1000_C2FD_1C2FD, false);
    DefineFunction(cs1, 0xC305, unknown_1000_C305_1C305, false);
    DefineFunction(cs1, 0xC30D, unknown_1000_C30D_1C30D, false);
    DefineFunction(cs1, 0xC343, unknown_1000_C343_1C343, false);
    DefineFunction(cs1, 0xC370, unknown_1000_C370_1C370, false);
    DefineFunction(cs1, 0xC412, unknown_1000_C412_1C412, false);
    DefineFunction(cs1, 0xC432, unknown_1000_C432_1C432, false);
    DefineFunction(cs1, 0xC43E, unknown_1000_C43E_1C43E, false);
    DefineFunction(cs1, 0xC443, unknown_1000_C443_1C443, false);
    DefineFunction(cs1, 0xC446, unknown_1000_C446_1C446, false);
    DefineFunction(cs1, 0xC46F, unknown_1000_C46F_1C46F, false);
    DefineFunction(cs1, 0xC474, unknown_1000_C474_1C474, false);
    DefineFunction(cs1, 0xC477, gfx_copy_rect_at_si_ida_1000_C477_1C477, false);
    DefineFunction(cs1, 0xC49A, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A, false);
    DefineFunction(cs1, 0xC4AA, gfx_copy_rect_to_screen_ida_1000_C4AA_1C4AA, false);
    DefineFunction(cs1, 0xC4CD, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD, false);
    DefineFunction(cs1, 0xC4DD, unknown_1000_C4DD_1C4DD, false);
    DefineFunction(cs1, 0xC4ED, unknown_1000_C4ED_1C4ED, false);
    DefineFunction(cs1, 0xC4F0, rect_at_si_to_regs_ida_1000_C4F0_1C4F0, false);
    DefineFunction(cs1, 0xC4FB, unknown_1000_C4FB_1C4FB, false);
    DefineFunction(cs1, 0xC51E, unknown_1000_C51E_1C51E, false);
    DefineFunction(cs1, 0xC53E, unknown_1000_C53E_1C53E, false);
    DefineFunction(cs1, 0xC551, unknown_1000_C551_1C551, false);
    DefineFunction(cs1, 0xC560, unknown_1000_C560_1C560, false);
    DefineFunction(cs1, 0xC58A, unknown_1000_C58A_1C58A, false);
    DefineFunction(cs1, 0xC5CF, unknown_1000_C5CF_1C5CF, false);
    DefineFunction(cs1, 0xC60B, unknown_1000_C60B_1C60B, false);
    DefineFunction(cs1, 0xC661, unknown_1000_C661_1C661, false);
    DefineFunction(cs1, 0xC6AD, unknown_1000_C6AD_1C6AD, false);
    DefineFunction(cs1, 0xC7D4, unknown_1000_C7D4_1C7D4, false);
    DefineFunction(cs1, 0xC835, unknown_1000_C835_1C835, false);
    DefineFunction(cs1, 0xC85B, InitDialogue_1000_C85B_1C85B, false);
    DefineFunction(cs1, 0xC868, unknown_1000_C868_1C868, false);
    DefineFunction(cs1, 0xC8C1, unknown_1000_C8C1_1C8C1, false);
    DefineFunction(cs1, 0xC921, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921, false);
    DefineFunction(cs1, 0xC92B, hnm_reset_and_read_header_ida_1000_C92B_1C92B, false);
    DefineFunction(cs1, 0xC93C, hnm_read_header_ida_1000_C93C_1C93C, false);
    DefineFunction(cs1, 0xC9E8, hnm_do_frame_skippable_ida_1000_C9E8_1C9E8, false);
    DefineFunction(cs1, 0xC9F4, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4, false);
    DefineFunction(cs1, 0xCA01, hnm_close_resource_ida_1000_CA01_1CA01, false);
    DefineFunction(cs1, 0xCA1B, hnm_load_ida_1000_CA1B_1CA1B, false);
    DefineFunction(cs1, 0xCA59, VideoPlayRelated_1000_CA59_1CA59, false);
    DefineFunction(cs1, 0xCA60, hnm_do_frame_ida_1000_CA60_1CA60, false);
    DefineFunction(cs1, 0xCA8F, unknown_1000_CA8F_1CA8F, false);
    DefineFunction(cs1, 0xCA9A, unknown_1000_CA9A_1CA9A, false);
    DefineFunction(cs1, 0xCAA0, unknown_1000_CAA0_1CAA0, false);
    DefineFunction(cs1, 0xCAD4, unknown_1000_CAD4_1CAD4, false);
    DefineFunction(cs1, 0xCB1A, unknown_1000_CB1A_1CB1A, false);
    DefineFunction(cs1, 0xCC0C, unknown_1000_CC0C_1CC0C, false);
    DefineFunction(cs1, 0xCC2B, unknown_1000_CC2B_1CC2B, false);
    DefineFunction(cs1, 0xCC4E, unknown_1000_CC4E_1CC4E, false);
    DefineFunction(cs1, 0xCC85, CheckIfHnmComplete_1000_CC85_1CC85, false);
    DefineFunction(cs1, 0xCC96, hnm_decode_video_frame_ida_1000_CC96_1CC96, false);
    DefineFunction(cs1, 0xCCF4, unknown_1000_CCF4_1CCF4, false);
    DefineFunction(cs1, 0xCD8F, hnm_read_header_size_ida_1000_CD8F_1CD8F, false);
    DefineFunction(cs1, 0xCDA0, hnm_prepare_header_read_ida_1000_CDA0_1CDA0, false);
    DefineFunction(cs1, 0xCDBF, HnmReadFromFileHandle_1000_CDBF_1CDBF, false);
    DefineFunction(cs1, 0xCE01, unknown_1000_CE01_1CE01, false);
    DefineFunction(cs1, 0xCE07, unknown_1000_CE07_1CE07, false);
    DefineFunction(cs1, 0xCE1A, hnm_reset_ida_1000_CE1A_1CE1A, false);
    DefineFunction(cs1, 0xCE3B, hnm_handle_pal_chunk_ida_1000_CE3B_1CE3B, false);
    DefineFunction(cs1, 0xCE4B, unknown_1000_CE4B_1CE4B, false);
    DefineFunction(cs1, 0xCE53, unknown_1000_CE53_1CE53, false);
    DefineFunction(cs1, 0xCE6C, initialize_memory_handler_ida_1000_CE6C_1CE6C, false);
    DefineFunction(cs1, 0xCEB0, unknown_1000_CEB0_1CEB0, false);
    DefineFunction(cs1, 0xCEC9, unknown_1000_CEC9_1CEC9, false);
    DefineFunction(cs1, 0xCEFC, load_IRULn_HSQ_ida_1000_CEFC_1CEFC, false);
    DefineFunction(cs1, 0xCF1B, play_IRULx_HSQ_ida_1000_CF1B_1CF1B, false);
    DefineFunction(cs1, 0xCF4B, IRULx_draw_or_clear_subtitle_ida_1000_CF4B_1CF4B, false);
    DefineFunction(cs1, 0xCF70, unknown_1000_CF70_1CF70, false);
    DefineFunction(cs1, 0xCFA0, check_amr_or_eng_language_ida_1000_CFA0_1CFA0, false);
    DefineFunction(cs1, 0xCFB9, unknown_1000_CFB9_1CFB9, false);
    DefineFunction(cs1, 0xCFE4, unknown_1000_CFE4_1CFE4, false);
    DefineFunction(cs1, 0xD00F, load_PHRASExx_HSQ_ida_1000_D00F_1D00F, false);
    DefineFunction(cs1, 0xD03C, unknown_1000_D03C_1D03C, false);
    DefineFunction(cs1, 0xD04E, unknown_1000_D04E_1D04E, false);
    DefineFunction(cs1, 0xD05F, GetCharacterCoordsXY_1000_D05F_1D05F, false);
    DefineFunction(cs1, 0xD068, SetFontToIntro_1000_D068_1D068, false);
    DefineFunction(cs1, 0xD075, SetFontToMenu_1000_D075_1D075, false);
    DefineFunction(cs1, 0xD082, SetFontToBook_1000_D082_1D082, false);
    DefineFunction(cs1, 0xD096, unknown_1000_D096_1D096, false);
    DefineFunction(cs1, 0xD0E3, unknown_1000_D0E3_1D0E3, false);
    DefineFunction(cs1, 0xD0FF, unknown_1000_D0FF_1D0FF, false);
    DefineFunction(cs1, 0xD12F, unknown_1000_D12F_1D12F, false);
    DefineFunction(cs1, 0xD194, unknown_1000_D194_1D194, false);
    DefineFunction(cs1, 0xD19B, unknown_1000_D19B_1D19B, false);
    DefineFunction(cs1, 0xD1A6, unknown_1000_D1A6_1D1A6, false);
    DefineFunction(cs1, 0xD1BB, unknown_1000_D1BB_1D1BB, false);
    DefineFunction(cs1, 0xD1EF, unknown_1000_D1EF_1D1EF, false);
    DefineFunction(cs1, 0xD1F2, unknown_1000_D1F2_1D1F2, false);
    DefineFunction(cs1, 0xD200, unknown_1000_D200_1D200, false);
    DefineFunction(cs1, 0xD239, unknown_1000_D239_1D239, false);
    DefineFunction(cs1, 0xD23D, unknown_1000_D23D_1D23D, false);
    DefineFunction(cs1, 0xD280, unknown_1000_D280_1D280, false);
    DefineFunction(cs1, 0xD2BD, unknown_1000_D2BD_1D2BD, false);
    DefineFunction(cs1, 0xD2E2, unknown_1000_D2E2_1D2E2, false);
    DefineFunction(cs1, 0xD2EA, unknown_1000_D2EA_1D2EA, false);
    DefineFunction(cs1, 0xD2FD, unknown_1000_D2FD_1D2FD, false);
    DefineFunction(cs1, 0xD316, MenuAnimationRelated_1000_D316_1D316, false);
    DefineFunction(cs1, 0xD323, unknown_1000_D323_1D323, false);
    DefineFunction(cs1, 0xD338, unknown_1000_D338_1D338, false);
    DefineFunction(cs1, 0xD33A, unknown_1000_D33A_1D33A, false);
    DefineFunction(cs1, 0xD36D, unknown_1000_D36D_1D36D, false);
    DefineFunction(cs1, 0xD397, unknown_1000_D397_1D397, false);
    DefineFunction(cs1, 0xD41B, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B, false);
    DefineFunction(cs1, 0xD42F, unknown_1000_D42F_1D42F, false);
    DefineFunction(cs1, 0xD434, unknown_1000_D434_1D434, false);
    DefineFunction(cs1, 0xD439, unknown_1000_D439_1D439, false);
    DefineFunction(cs1, 0xD43E, unknown_1000_D43E_1D43E, false);
    DefineFunction(cs1, 0xD443, DispatcherJumpsToBX_1000_D443_1D443, false);
    DefineFunction(cs1, 0xD454, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454, false);
    DefineFunction(cs1, 0xD48A, unknown_1000_D48A_1D48A, false);
    DefineFunction(cs1, 0xD50F, unknown_1000_D50F_1D50F, false);
    DefineFunction(cs1, 0xD61D, unknown_1000_D61D_1D61D, false);
    DefineFunction(cs1, 0xD64E, unknown_1000_D64E_1D64E, false);
    DefineFunction(cs1, 0xD65A, unknown_1000_D65A_1D65A, false);
    DefineFunction(cs1, 0xD694, unknown_1000_D694_1D694, false);
    DefineFunction(cs1, 0xD6B7, unknown_1000_D6B7_1D6B7, false);
    DefineFunction(cs1, 0xD6FE, unknown_1000_D6FE_1D6FE, false);
    DefineFunction(cs1, 0xD717, unknown_1000_D717_1D717, false);
    DefineFunction(cs1, 0xD72B, unknown_1000_D72B_1D72B, false);
    DefineFunction(cs1, 0xD741, unknown_1000_D741_1D741, false);
    DefineFunction(cs1, 0xD75A, unknown_1000_D75A_1D75A, false);
    DefineFunction(cs1, 0xD763, unknown_1000_D763_1D763, false);
    DefineFunction(cs1, 0xD792, unknown_1000_D792_1D792, false);
    DefineFunction(cs1, 0xD795, unknown_1000_D795_1D795, false);
    DefineFunction(cs1, 0xD7AD, unknown_1000_D7AD_1D7AD, false);
    DefineFunction(cs1, 0xD7B2, unknown_1000_D7B2_1D7B2, false);
    DefineFunction(cs1, 0xD7B7, unknown_1000_D7B7_1D7B7, false);
    DefineFunction(cs1, 0xD815, unknown_1000_D815_1D815, false);
    DefineFunction(cs1, 0xD917, NoOp_1000_D917_1D917, false);
    DefineFunction(cs1, 0xD95B, SetMapClickHandlerAddressToInGame_1000_D95B_1D95B, false);
    DefineFunction(cs1, 0xD95E, SetMapClickHandlerAddressFromAx_1000_D95E_1D95E, false);
    DefineFunction(cs1, 0xD9D2, unknown_1000_D9D2_1D9D2, false);
    DefineFunction(cs1, 0xDA25, unknown_1000_DA25_1DA25, false);
    DefineFunction(cs1, 0xDA53, VgaInitRelated_1000_DA53_1DA53, false);
    DefineFunction(cs1, 0xDA5F, unknown_1000_DA5F_1DA5F, false);
    DefineFunction(cs1, 0xDAA3, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3, false);
    DefineFunction(cs1, 0xDAAA, SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA, false);
    DefineFunction(cs1, 0xDAE3, unknown_1000_DAE3_1DAE3, false);
    DefineFunction(cs1, 0xDB03, unknown_1000_DB03_1DB03, false);
    DefineFunction(cs1, 0xDB14, define_mouse_range_ida_1000_DB14_1DB14, false);
    DefineFunction(cs1, 0xDB44, ShlDXAndCXByAX_1000_DB44_1DB44, false);
    DefineFunction(cs1, 0xDB4C, mouse_stuff_ida_1000_DB4C_1DB4C, false);
    DefineFunction(cs1, 0xDB67, unknown_1000_DB67_1DB67, false);
    DefineFunction(cs1, 0xDB74, unknown_1000_DB74_1DB74, false);
    DefineFunction(cs1, 0xDBB2, call_restore_cursor_ida_1000_DBB2_1DBB2, false);
    DefineFunction(cs1, 0xDBEC, draw_mouse_ida_1000_DBEC_1DBEC, false);
    DefineFunction(cs1, 0xDC20, redraw_mouse_ida_1000_DC20_1DC20, false);
    DefineFunction(cs1, 0xDC6A, unknown_1000_DC6A_1DC6A, false);
    DefineFunction(cs1, 0xDCE0, read_game_port_ida_1000_DCE0_1DCE0, false);
    DefineFunction(cs1, 0xDD5A, get_key_hit_ida_1000_DD5A_1DD5A, false);
    DefineFunction(cs1, 0xDD63, stc_on_user_input_ida_1000_DD63_1DD63, false);
    DefineFunction(cs1, 0xDDB0, unknown_1000_DDB0_1DDB0, false);
    DefineFunction(cs1, 0xDDF0, unknown_1000_DDF0_1DDF0, false);
    DefineFunction(cs1, 0xDE0C, check_midi_ida_1000_DE0C_1DE0C, false);
    DefineFunction(cs1, 0xDE4E, SetCEE8To0_1000_DE4E_1DE4E, false);
    DefineFunction(cs1, 0xDE54, unknown_1000_DE54_1DE54, false);
    DefineFunction(cs1, 0xDE7B, unknown_1000_DE7B_1DE7B, false);
    DefineFunction(cs1, 0xDF1E, get_mouse_pos_etc_ida_1000_DF1E_1DF1E, false);
    DefineFunction(cs1, 0xE26F, NoOp_1000_E26F_1E26F, false);
    DefineFunction(cs1, 0xE270, PushAll_1000_E270_1E270, false);
    DefineFunction(cs1, 0xE283, PopAll_1000_E283_1E283, false);
    DefineFunction(cs1, 0xE290, unknown_1000_E290_1E290, false);
    DefineFunction(cs1, 0xE2DB, unknown_1000_E2DB_1E2DB, false);
    DefineFunction(cs1, 0xE2E3, unknown_1000_E2E3_1E2E3, false);
    DefineFunction(cs1, 0xE31C, unknown_1000_E31C_1E31C, false);
    DefineFunction(cs1, 0xE353, unknown_1000_E353_1E353, false);
    DefineFunction(cs1, 0xE387, unknown_1000_E387_1E387, false);
    DefineFunction(cs1, 0xE3A0, unknown_1000_E3A0_1E3A0, false);
    DefineFunction(cs1, 0xE3B7, unknown_1000_E3B7_1E3B7, false);
    DefineFunction(cs1, 0xE3CC, unknown_1000_E3CC_1E3CC, false);
    DefineFunction(cs1, 0xE3DF, unknown_1000_E3DF_1E3DF, false);
    DefineFunction(cs1, 0xE4AD, parse_command_line_ida_1000_E4AD_1E4AD, false);
    DefineFunction(cs1, 0xE56B, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B, false);
    DefineFunction(cs1, 0xE57B, load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B, false);
    DefineFunction(cs1, 0xE594, initialize_ida_1000_E594_1E594, false);
    DefineFunction(cs1, 0xE675, open_dune_dat_ida_1000_E675_1E675, false);
    DefineFunction(cs1, 0xE741, read_dune_dat_toc_ida_1000_E741_1E741, false);
    DefineFunction(cs1, 0xE75B, UnknownStructCreation_1000_E75B_1E75B, false);
    DefineFunction(cs1, 0xE76A, initialize_audio_ida_1000_E76A_1E76A, false);
    DefineFunction(cs1, 0xE826, unknown_1000_E826_1E826, false);
    DefineFunction(cs1, 0xE851, CheckUnknown39B9_1000_E851_1E851, false);
    DefineFunction(cs1, 0xE85C, unknown_1000_E85C_1E85C, false);
    DefineFunction(cs1, 0xE8A8, SetPitTimerToAX_1000_E8A8_1E8A8, false);
    DefineFunction(cs1, 0xE8B8, get_pit_timer_value_ida_1000_E8B8_1E8B8, false);
    DefineFunction(cs1, 0xE8D5, uninitialize_memory_driver_ida_1000_E8D5_1E8D5, false);
    DefineFunction(cs1, 0xE913, install_interrupt_handlers_ida_1000_E913_1E913, false);
    DefineFunction(cs1, 0xE97A, initialize_mouse_ida_1000_E97A_1E97A, false);
    DefineFunction(cs1, 0xE9F4, mouse_func_uncalled_ida_1000_E9F4_1E9F4, false);
    DefineFunction(cs1, 0xEA32, initialize_joystick_ida_1000_EA32_1EA32, false);
    DefineFunction(cs1, 0xEA7B, memory_func_qq_ida_1000_EA7B_1EA7B, false);
    DefineFunction(cs1, 0xEAB7, memory_func_qq_ida_1000_EAB7_1EAB7, false);
    DefineFunction(cs1, 0xEC46, call_memory_func_2_ida_1000_EC46_1EC46, false);
    DefineFunction(cs1, 0xEC59, call_memory_func_1_ida_1000_EC59_1EC59, false);
    DefineFunction(cs1, 0xEC9C, xms_memory_func_1_ida_1000_EC9C_1EC9C, false);
    DefineFunction(cs1, 0xECEC, xms_memory_func_1_ida_1000_ECEC_1ECEC, false);
    DefineFunction(cs1, 0xED40, get_ems_emm_handle_ida_1000_ED40_1ED40, false);
    DefineFunction(cs1, 0xED45, call_ems_func_ida_1000_ED45_1ED45, false);
    DefineFunction(cs1, 0xEDB9, map_ems_for_midi_audio_ida_1000_EDB9_1EDB9, false);
    DefineFunction(cs1, 0xEE02, ems_memory_func_2_ida_1000_EE02_1EE02, false);
    DefineFunction(cs1, 0xEE46, ems_memory_func_1_ida_1000_EE46_1EE46, false);
    DefineFunction(cs1, 0xEEA0, initialize_himem_sys_ida_1000_EEA0_1EEA0, false);
    DefineFunction(cs1, 0xEF22, call_xms_driver_func_ida_1000_EF22_1EF22, false);
    DefineFunction(cs1, 0xEF2B, call_xms_func_on_block_ida_1000_EF2B_1EF2B, false);
    DefineFunction(cs1, 0xEF32, xms_move_memory_ida_1000_EF32_1EF32, false);
    DefineFunction(cs1, 0xEF6A, interrupt_handler_0x8_1000_EF6A_1EF6A, false);
    DefineFunction(cs1, 0xEFBA, unknown_1000_EFBA_1EFBA, false);
    DefineFunction(cs1, 0xF05C, reset_keyboard_ida_1000_F05C_1F05C, false);
    DefineFunction(cs1, 0xF08E, clear_keyboard_array_ida_1000_F08E_1F08E, false);
    DefineFunction(cs1, 0xF0A0, open_resource_force_hsq_ida_1000_F0A0_1F0A0, false);
    DefineFunction(cs1, 0xF0B9, open_resource_by_index_si_ida_1000_F0B9_1F0B9, false);
    DefineFunction(cs1, 0xF0D6, read_and_maybe_hsq_ida_1000_F0D6_1F0D6, false);
    DefineFunction(cs1, 0xF0F6, bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6, false);
    DefineFunction(cs1, 0xF0FF, bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF, false);
    DefineFunction(cs1, 0xF11C, alloc_cx_pages_to_di_ida_1000_F11C_1F11C, false);
    DefineFunction(cs1, 0xF13F, allocator_attempt_to_free_space_ida_1000_F13F_1F13F, false);
    DefineFunction(cs1, 0xF1FB, open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB, false);
    DefineFunction(cs1, 0xF204, unknown_1000_F204_1F204, false);
    DefineFunction(cs1, 0xF229, open_res_or_file_or_die_ida_1000_F229_1F229, false);
    DefineFunction(cs1, 0xF244, read_resource_to_esdi_ida_1000_F244_1F244, false);
    DefineFunction(cs1, 0xF255, open_nonres_file_ida_1000_F255_1F255, false);
    DefineFunction(cs1, 0xF260, read_ffff_to_esdi_and_close_ida_1000_F260_1F260, false);
    DefineFunction(cs1, 0xF2A7, seek_dune_dat_to_res_dsdx_ida_1000_F2A7_1F2A7, false);
    DefineFunction(cs1, 0xF2D6, seek_dune_dat_offset_dxax_ida_1000_F2D6_1F2D6, false);
    DefineFunction(cs1, 0xF2EA, read_dune_dat_cx_to_esdi_ida_1000_F2EA_1F2EA, false);
    DefineFunction(cs1, 0xF2FC, strcpy_to_filename_buf_ida_1000_F2FC_1F2FC, false);
    DefineFunction(cs1, 0xF314, locate_res_by_name_dssi_ida_1000_F314_1F314, false);
    DefineFunction(cs1, 0xF3A7, unknown_1000_F3A7_1F3A7, false);
    DefineFunction(cs1, 0xF403, hsq_decomp_skip_header_dssi_to_esdi_ida_1000_F403_1F403, false);
    // 0x334B
    DefineFunction(cs2, 0x100, VgaFunc00SetMode_334B_0100_335B0, false);
    DefineFunction(cs2, 0x103, VgaFunc01GetInfoInAxCxBp_334B_0103_335B3, false);
    DefineFunction(cs2, 0x106, unknown_334B_0106_335B6, false);
    DefineFunction(cs2, 0x109, VgaFunc03DrawMouseCursor_334B_0109_335B9, false);
    DefineFunction(cs2, 0x10C, VgaFunc04RestoreImageUnderMouseCursor_334B_010C_335BC, false);
    DefineFunction(cs2, 0x10F, VgaFunc05Blit_334B_010F_335BF, false);
    DefineFunction(cs2, 0x112, unknown_334B_0112_335C2, false);
    DefineFunction(cs2, 0x115, unknown_334B_0115_335C5, false);
    DefineFunction(cs2, 0x118, VgaFunc08FillWithZeroFor64000AtES_334B_0118_335C8, false);
    DefineFunction(cs2, 0x11B, unknown_334B_011B_335CB, false);
    DefineFunction(cs2, 0x11E, unknown_334B_011E_335CE, false);
    DefineFunction(cs2, 0x121, VgaFunc11MemcpyDSToESFor64000_334B_0121_335D1, false);
    DefineFunction(cs2, 0x124, VgaFunc12CopyRectangle_334B_0124_335D4, false);
    DefineFunction(cs2, 0x12A, VgaFunc14CopySquareOfPixelsSiIsSourceSegment_334B_012A_335DA, false);
    DefineFunction(cs2, 0x12D, VgaFunc15MemcpyDSToESFor64000_334B_012D_335DD, false);
    DefineFunction(cs2, 0x130, VgaFunc16CopySquareOfPixels_334B_0130_335E0, false);
    DefineFunction(cs2, 0x133, VgaFunc17CopyframebufferExplodeAndCenter_334B_0133_335E3, false);
    DefineFunction(cs2, 0x136, unknown_334B_0136_335E6, false);
    DefineFunction(cs2, 0x139, unknown_334B_0139_335E9, false);
    DefineFunction(cs2, 0x13C, VgaFunc20NoOp_334B_013C_335EC, false);
    DefineFunction(cs2, 0x13F, VgaFunc21SetPixel_334B_013F_335EF, false);
    DefineFunction(cs2, 0x142, unknown_334B_0142_335F2, false);
    DefineFunction(cs2, 0x145, unknown_334B_0145_335F5, false);
    DefineFunction(cs2, 0x148, unknown_334B_0148_335F8, false);
    DefineFunction(cs2, 0x14B, unknown_334B_014B_335FB, false);
    DefineFunction(cs2, 0x14E, unknown_334B_014E_335FE, false);
    DefineFunction(cs2, 0x151, unknown_334B_0151_33601, false);
    DefineFunction(cs2, 0x154, unknown_334B_0154_33604, false);
    DefineFunction(cs2, 0x157, unknown_334B_0157_33607, false);
    DefineFunction(cs2, 0x15A, unknown_334B_015A_3360A, false);
    DefineFunction(cs2, 0x15D, unknown_334B_015D_3360D, false);
    DefineFunction(cs2, 0x160, unknown_334B_0160_33610, false);
    DefineFunction(cs2, 0x163, VgaFunc33UpdateVgaOffset01A3FromLineNumberAsAx_334B_0163_33613, false);
    DefineFunction(cs2, 0x169, unknown_334B_0169_33619, false);
    DefineFunction(cs2, 0x16C, VgaFunc36GenerateTextureOutBP_334B_016C_3361C, false);
    DefineFunction(cs2, 0x16F, unknown_334B_016F_3361F, false);
    DefineFunction(cs2, 0x172, unknown_334B_0172_33622, false);
    DefineFunction(cs2, 0x175, unknown_334B_0175_33625, false);
    DefineFunction(cs2, 0x17B, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B, false);
    DefineFunction(cs2, 0x17E, unknown_334B_017E_3362E, false);
    DefineFunction(cs2, 0x181, unknown_334B_0181_33631, false);
    DefineFunction(cs2, 0x184, unknown_334B_0184_33634, false);
    DefineFunction(cs2, 0x187, unknown_334B_0187_33637, false);
    DefineFunction(cs2, 0x967, spice86_label_334B_0967_33E17, false);
    DefineFunction(cs2, 0x975, spice86_label_334B_0975_33E25, false);
    DefineFunction(cs2, 0x9B8, WaitForRetrace_334B_09B8_33E68, false);
    DefineFunction(cs2, 0x9D9, not_observed_334B_09D9_033E89, false);
    DefineFunction(cs2, 0x9E2, spice86_label_334B_09E2_33E92, false);
    DefineFunction(cs2, 0xA21, SetBxCxPaletteRelated_334B_0A21_33ED1, false);
    DefineFunction(cs2, 0xA40, spice86_label_334B_0A40_33EF0, false);
    DefineFunction(cs2, 0xA58, CopyCsRamB5FToB2F_334B_0A58_33F08, false);
    DefineFunction(cs2, 0xA68, spice86_label_334B_0A68_33F18, false);
    DefineFunction(cs2, 0xA76, spice86_label_334B_0A76_33F26, false);
    DefineFunction(cs2, 0xAD7, spice86_label_334B_0AD7_33F87, false);
    DefineFunction(cs2, 0xB0C, unknown_334B_0B0C_33FBC, false);
    DefineFunction(cs2, 0xB68, LoadPaletteInVgaDac_334B_0B68_34018, false);
    DefineFunction(cs2, 0xBDC, unknown_334B_0BDC_3408C, false);
    DefineFunction(cs2, 0xC06, not_observed_334B_0C06_0340B6, false);
    DefineFunction(cs2, 0xC10, SetDiFromXYCordsDxBx_334B_0C10_340C0, false);
    DefineFunction(cs2, 0xC2D, not_observed_334B_0C2D_0340DD, false);
    DefineFunction(cs2, 0xC34, spice86_label_334B_0C34_340E4, false);
    DefineFunction(cs2, 0xF5B, spice86_label_334B_0F5B_3440B, false);
    DefineFunction(cs2, 0x1452, spice86_label_334B_1452_34902, false);
    DefineFunction(cs2, 0x1888, spice86_label_334B_1888_34D38, false);
    DefineFunction(cs2, 0x1940, not_observed_334B_1940_034DF0, false);
    DefineFunction(cs2, 0x1979, spice86_label_334B_1979_34E29, false);
    DefineFunction(cs2, 0x197B, spice86_label_334B_197B_34E2B, false);
    DefineFunction(cs2, 0x19C9, spice86_label_334B_19C9_34E79, false);
    DefineFunction(cs2, 0x19F7, not_observed_334B_19F7_034EA7, false);
    DefineFunction(cs2, 0x1A07, spice86_label_334B_1A07_34EB7, false);
    DefineFunction(cs2, 0x1ADC, unknown_334B_1ADC_34F8C, false);
    DefineFunction(cs2, 0x1B7C, MemcpyDSToESFor64000_334B_1B7C_3502C, false);
    DefineFunction(cs2, 0x1B8C, not_observed_334B_1B8C_03503C, false);
    DefineFunction(cs2, 0x1B8E, CopySquareOfPixels_334B_1B8E_3503E, false);
    DefineFunction(cs2, 0x1BCA, spice86_label_334B_1BCA_3507A, false);
    DefineFunction(cs2, 0x1BE7, spice86_label_334B_1BE7_35097, false);
    DefineFunction(cs2, 0x1BF5, spice86_label_334B_1BF5_350A5, false);
    DefineFunction(cs2, 0x1C46, spice86_label_334B_1C46_350F6, false);
    DefineFunction(cs2, 0x1C76, spice86_label_334B_1C76_35126, false);
    DefineFunction(cs2, 0x1CB6, spice86_label_334B_1CB6_35166, false);
    DefineFunction(cs2, 0x1D07, UnknownGlobeRelated_334B_1D07_351B7, false);
    DefineFunction(cs2, 0x1D5A, UnknownGlobeInitRelated_334B_1D5A_3520A, false);
    DefineFunction(cs2, 0x1F4C, spice86_label_334B_1F4C_353FC, false);
    DefineFunction(cs2, 0x2025, UnknownMapRelated_334B_2025_354D5, false);
    DefineFunction(cs2, 0x2123, unknown_334B_2123_355D3, false);
    DefineFunction(cs2, 0x2153, unknown_334B_2153_35603, false);
    DefineFunction(cs2, 0x2343, CopyMapBlock_334B_2343_357F3, false);
    DefineFunction(cs2, 0x2396, unknown_334B_2396_35846, false);
    DefineFunction(cs2, 0x23D7, unknown_334B_23D7_35887, false);
    DefineFunction(cs2, 0x23EB, spice86_label_334B_23EB_3589B, false);
    DefineFunction(cs2, 0x2413, unknown_334B_2413_358C3, false);
    DefineFunction(cs2, 0x2441, spice86_label_334B_2441_358F1, false);
    DefineFunction(cs2, 0x24AD, unknown_334B_24AD_3595D, false);
    DefineFunction(cs2, 0x24E9, unknown_334B_24E9_35999, false);
    DefineFunction(cs2, 0x253D, RetraceRelatedCalledOnEnterGlobe_334B_253D_359ED, false);
    DefineFunction(cs2, 0x2572, WaitForRetraceInTransitions_334B_2572_35A22, false);
    DefineFunction(cs2, 0x2596, unknown_334B_2596_35A46, false);
    DefineFunction(cs2, 0x25E7, spice86_label_334B_25E7_35A97, false);
    DefineFunction(cs2, 0x261D, WaitForRetraceDuringIntroVideo_334B_261D_35ACD, false);
    DefineFunction(cs2, 0x26E3, unknown_334B_26E3_35B93, false);
    DefineFunction(cs2, 0x2AB0, unknown_334B_2AB0_35F60, false);
    DefineFunction(cs2, 0x2B56, unknown_334B_2B56_36006, false);
    DefineFunction(cs2, 0x2BAC, unknown_334B_2BAC_3605C, false);
    DefineFunction(cs2, 0x2C02, unknown_334B_2C02_360B2, false);
    DefineFunction(cs2, 0x2C52, unknown_334B_2C52_36102, false);
    DefineFunction(cs2, 0x2FC1, unknown_334B_2FC1_36471, false);
    DefineFunction(cs2, 0x2FF9, unknown_334B_2FF9_364A9, false);
    DefineFunction(cs2, 0x3031, unknown_334B_3031_364E1, false);
    DefineFunction(cs2, 0x3047, unknown_334B_3047_364F7, false);
    DefineFunction(cs2, 0x308C, unknown_334B_308C_3653C, false);
    DefineFunction(cs2, 0x30C5, unknown_334B_30C5_36575, false);
    DefineFunction(cs2, 0x316D, unknown_334B_316D_3661D, false);
    DefineFunction(cs2, 0x3200, spice86_label_334B_3200_366B0, false);
    DefineFunction(cs2, 0x32C1, GenerateMenuTransitionFrame_334B_32C1_36771, false);
    DefineFunction(cs2, 0x356F, unknown_334B_356F_36A1F, false);
    DefineFunction(cs2, 0x35C8, unknown_334B_35C8_36A78, false);
    DefineFunction(cs2, 0x36B0, unknown_334B_36B0_36B60, false);
    DefineFunction(cs2, 0x3724, spice86_label_334B_3724_36BD4, false);
    DefineFunction(cs2, 0x372D, unknown_334B_372D_36BDD, false);
    DefineFunction(cs2, 0x3733, unknown_334B_3733_36BE3, false);
    DefineFunction(cs2, 0x37B1, unknown_334B_37B1_36C61, false);
    DefineFunction(cs2, 0x39E9, not_observed_334B_39E9_036E99, false);
    DefineFunction(cs2, 0x3A14, spice86_label_334B_3A14_36EC4, false);
    // 0x5635
    DefineFunction(cs3, 0x100, PcSpeakerActivationWithBXAndALCleanup_5635_0100_56450, false);
    DefineFunction(cs3, 0x10C, ClearAL_5635_010C_5645C, false);
    DefineFunction(cs3, 0x182, PcSpeakerActivationWithALCleanup_5635_0182_564D2, false);
    DefineFunction(cs3, 0x188, PcSpeakerActivation_5635_0188_564D8, false);
    // 0x563E
    DefineFunction(cs4, 0x100, PcSpeakerActivationWithBXAndALCleanup_563E_0100_564E0, false);
    DefineFunction(cs4, 0x106, ClearAL_563E_0106_564E6, false);
    DefineFunction(cs4, 0x10C, unknown_563E_010C_564EC, false);
    DefineFunction(cs4, 0x112, ClearAL_563E_0112_564F2, false);
    DefineFunction(cs4, 0x182, PcSpeakerActivationWithALCleanup_563E_0182_56562, false);
    DefineFunction(cs4, 0x188, PcSpeakerActivation_563E_0188_56568, false);
    DefineFunction(cs4, 0x1E1, unknown_563E_01E1_565C1, false);
    DefineFunction(cs4, 0x2AE, unknown_563E_02AE_5668E, false);
    DefineFunction(cs4, 0x2E0, unknown_563E_02E0_566C0, false);
    DefineFunction(cs4, 0x349, unknown_563E_0349_56729, false);
    DefineFunction(cs4, 0x36F, unknown_563E_036F_5674F, false);
    DefineFunction(cs4, 0x3C7, unknown_563E_03C7_567A7, false);
    DefineFunction(cs4, 0x41C, unknown_563E_041C_567FC, false);
    DefineFunction(cs4, 0x422, unknown_563E_0422_56802, false);
    DefineFunction(cs4, 0x428, unknown_563E_0428_56808, false);
    DefineFunction(cs4, 0x432, unknown_563E_0432_56812, false);
    DefineFunction(cs4, 0x453, unknown_563E_0453_56833, false);
    DefineFunction(cs4, 0x45D, unknown_563E_045D_5683D, false);
    DefineFunction(cs4, 0x49B, unknown_563E_049B_5687B, false);
    DefineFunction(cs4, 0x4D7, unknown_563E_04D7_568B7, false);
    DefineFunction(cs4, 0x52F, unknown_563E_052F_5690F, false);
    DefineFunction(cs4, 0x564, unknown_563E_0564_56944, false);
    DefineFunction(cs4, 0x5A6, unknown_563E_05A6_56986, false);
  }
  
  public void DetectCodeRewrites() {
    DefineExecutableArea(0x10000, 0x100A7);
    DefineExecutableArea(0x100B0, 0x1015E);
    DefineExecutableArea(0x10169, 0x1020B);
    DefineExecutableArea(0x1021C, 0x10336);
    DefineExecutableArea(0x10579, 0x10685);
    DefineExecutableArea(0x1069E, 0x106CD);
    DefineExecutableArea(0x10739, 0x1073B);
    DefineExecutableArea(0x1076A, 0x10770);
    DefineExecutableArea(0x107EE, 0x107FC);
    DefineExecutableArea(0x108F0, 0x1095C);
    DefineExecutableArea(0x10960, 0x10971);
    DefineExecutableArea(0x109AD, 0x109F4);
    DefineExecutableArea(0x10A16, 0x10ACC);
    DefineExecutableArea(0x10B21, 0x10B44);
    DefineExecutableArea(0x10D45, 0x10E3D);
    DefineExecutableArea(0x10E66, 0x10EA5);
    DefineExecutableArea(0x10EB9, 0x10F47);
    DefineExecutableArea(0x10F66, 0x10F66);
    DefineExecutableArea(0x10FA7, 0x10FB1);
    DefineExecutableArea(0x10FD9, 0x11020);
    DefineExecutableArea(0x11027, 0x11068);
    DefineExecutableArea(0x11071, 0x110A3);
    DefineExecutableArea(0x1121F, 0x11242);
    DefineExecutableArea(0x1127C, 0x1128E);
    DefineExecutableArea(0x11392, 0x1139F);
    DefineExecutableArea(0x116FC, 0x11D34);
    DefineExecutableArea(0x11D66, 0x11DB2);
    DefineExecutableArea(0x11DD3, 0x11EA0);
    DefineExecutableArea(0x11EA8, 0x11EA8);
    DefineExecutableArea(0x11EBE, 0x11ED9);
    DefineExecutableArea(0x11F64, 0x12016);
    DefineExecutableArea(0x12090, 0x12164);
    DefineExecutableArea(0x12170, 0x1221C);
    DefineExecutableArea(0x12239, 0x12317);
    DefineExecutableArea(0x12388, 0x123D4);
    DefineExecutableArea(0x12419, 0x12419);
    DefineExecutableArea(0x124A3, 0x1272E);
    DefineExecutableArea(0x1274E, 0x12839);
    DefineExecutableArea(0x128A1, 0x1290A);
    DefineExecutableArea(0x12992, 0x129D3);
    DefineExecutableArea(0x129EE, 0x12CCE);
    DefineExecutableArea(0x12D2C, 0x12D61);
    DefineExecutableArea(0x12D74, 0x13489);
    DefineExecutableArea(0x134A5, 0x13909);
    DefineExecutableArea(0x13916, 0x14284);
    DefineExecutableArea(0x142E9, 0x14376);
    DefineExecutableArea(0x1439F, 0x14912);
    DefineExecutableArea(0x14944, 0x14979);
    DefineExecutableArea(0x14988, 0x149D3);
    DefineExecutableArea(0x149EA, 0x14ACF);
    DefineExecutableArea(0x14AEB, 0x14B5E);
    DefineExecutableArea(0x14D00, 0x14D56);
    DefineExecutableArea(0x14DED, 0x14E03);
    DefineExecutableArea(0x14E12, 0x14E8C);
    DefineExecutableArea(0x14E8E, 0x14F08);
    DefineExecutableArea(0x14F0C, 0x14FFA);
    DefineExecutableArea(0x1503C, 0x15081);
    DefineExecutableArea(0x150BE, 0x150C3);
    DefineExecutableArea(0x15119, 0x15343);
    DefineExecutableArea(0x1541F, 0x155BF);
    DefineExecutableArea(0x155DD, 0x1588A);
    DefineExecutableArea(0x158E4, 0x15A02);
    DefineExecutableArea(0x15A1A, 0x15A3C);
    DefineExecutableArea(0x15A56, 0x15B04);
    DefineExecutableArea(0x15B10, 0x15B1D);
    DefineExecutableArea(0x15B55, 0x15CE3);
    DefineExecutableArea(0x15D1D, 0x15E6A);
    DefineExecutableArea(0x15E6D, 0x1605B);
    DefineExecutableArea(0x160AC, 0x160F7);
    DefineExecutableArea(0x161D2, 0x163C6);
    DefineExecutableArea(0x163F0, 0x16446);
    DefineExecutableArea(0x1644E, 0x164EC);
    DefineExecutableArea(0x164EF, 0x16514);
    DefineExecutableArea(0x165B6, 0x1666F);
    DefineExecutableArea(0x166CE, 0x1676D);
    DefineExecutableArea(0x16770, 0x168D1);
    DefineExecutableArea(0x168EB, 0x169B2);
    DefineExecutableArea(0x16A33, 0x16A43);
    DefineExecutableArea(0x16A89, 0x16AC4);
    DefineExecutableArea(0x16ACB, 0x16BD6);
    DefineExecutableArea(0x16C15, 0x16C25);
    DefineExecutableArea(0x16C46, 0x16D5E);
    DefineExecutableArea(0x16D7B, 0x16DBA);
    DefineExecutableArea(0x16E20, 0x16EDA);
    DefineExecutableArea(0x16EDD, 0x16F47);
    DefineExecutableArea(0x16F56, 0x16FAF);
    DefineExecutableArea(0x16FE5, 0x17147);
    DefineExecutableArea(0x17149, 0x171EE);
    DefineExecutableArea(0x1739E, 0x17418);
    DefineExecutableArea(0x17429, 0x174B5);
    DefineExecutableArea(0x1751D, 0x17551);
    DefineExecutableArea(0x177D7, 0x178BB);
    DefineExecutableArea(0x179DB, 0x17BDE);
    DefineExecutableArea(0x17BE0, 0x17C54);
    DefineExecutableArea(0x17C56, 0x17CBA);
    DefineExecutableArea(0x17D0C, 0x18063);
    DefineExecutableArea(0x180AC, 0x180C6);
    DefineExecutableArea(0x180DF, 0x1829F);
    DefineExecutableArea(0x182B7, 0x18402);
    DefineExecutableArea(0x1841F, 0x18453);
    DefineExecutableArea(0x18461, 0x186B8);
    DefineExecutableArea(0x1872C, 0x18C0D);
    DefineExecutableArea(0x18C0F, 0x192F1);
    DefineExecutableArea(0x19381, 0x19532);
    DefineExecutableArea(0x19556, 0x19583);
    DefineExecutableArea(0x1961A, 0x1961A);
    DefineExecutableArea(0x19655, 0x1983F);
    DefineExecutableArea(0x19849, 0x198AE);
    DefineExecutableArea(0x198B2, 0x1998D);
    DefineExecutableArea(0x199BE, 0x19BCA);
    DefineExecutableArea(0x19BCC, 0x19DE2);
    DefineExecutableArea(0x19ED5, 0x19F1B);
    DefineExecutableArea(0x19F31, 0x1A024);
    DefineExecutableArea(0x1A026, 0x1A106);
    DefineExecutableArea(0x1A125, 0x1A1C9);
    DefineExecutableArea(0x1A1D0, 0x1A1EC);
    DefineExecutableArea(0x1A1F7, 0x1A247);
    DefineExecutableArea(0x1A24A, 0x1A28D);
    DefineExecutableArea(0x1A30B, 0x1A33B);
    DefineExecutableArea(0x1A396, 0x1A3E7);
    DefineExecutableArea(0x1A3F9, 0x1A5DE);
    DefineExecutableArea(0x1A637, 0x1A671);
    DefineExecutableArea(0x1A6CC, 0x1A813);
    DefineExecutableArea(0x1A83F, 0x1A9F3);
    DefineExecutableArea(0x1AA0E, 0x1AB91);
    DefineExecutableArea(0x1ABA3, 0x1ABDA);
    DefineExecutableArea(0x1ABE9, 0x1AC34);
    DefineExecutableArea(0x1AC3A, 0x1AC6D);
    DefineExecutableArea(0x1ACE6, 0x1AEAE);
    DefineExecutableArea(0x1AEB7, 0x1AF57);
    DefineExecutableArea(0x1B024, 0x1B18A);
    DefineExecutableArea(0x1B1AF, 0x1B26F);
    DefineExecutableArea(0x1B2AA, 0x1B359);
    DefineExecutableArea(0x1B389, 0x1B3AF);
    DefineExecutableArea(0x1B427, 0x1B960);
    DefineExecutableArea(0x1B96B, 0x1B9AC);
    DefineExecutableArea(0x1B9AE, 0x1B9B8);
    DefineExecutableArea(0x1B9E0, 0x1BC63);
    DefineExecutableArea(0x1BC99, 0x1BD24);
    DefineExecutableArea(0x1BDBB, 0x1BF54);
    DefineExecutableArea(0x1BF61, 0x1C0B5);
    DefineExecutableArea(0x1C0D5, 0x1C219);
    DefineExecutableArea(0x1C21B, 0x1C32E);
    DefineExecutableArea(0x1C343, 0x1C421);
    DefineExecutableArea(0x1C432, 0x1C64B);
    DefineExecutableArea(0x1C653, 0x1C826);
    DefineExecutableArea(0x1C835, 0x1CC91);
    DefineExecutableArea(0x1CC96, 0x1D08E);
    DefineExecutableArea(0x1D096, 0x1D0D0);
    DefineExecutableArea(0x1D0E3, 0x1D169);
    DefineExecutableArea(0x1D194, 0x1D2DE);
    DefineExecutableArea(0x1D2E2, 0x1D422);
    DefineExecutableArea(0x1D42F, 0x1D616);
    DefineExecutableArea(0x1D61D, 0x1D676);
    DefineExecutableArea(0x1D694, 0x1D961);
    DefineExecutableArea(0x1D9D2, 0x1DD0F);
    DefineExecutableArea(0x1DD5A, 0x1DE67);
    DefineExecutableArea(0x1DE7A, 0x1DF06);
    DefineExecutableArea(0x1DF1E, 0x1DFA6);
    DefineExecutableArea(0x1DFB7, 0x1E067);
    DefineExecutableArea(0x1E1D1, 0x1E242);
    DefineExecutableArea(0x1E26F, 0x1E294);
    DefineExecutableArea(0x1E297, 0x1E2C9);
    DefineExecutableArea(0x1E2DB, 0x1E40A);
    DefineExecutableArea(0x1E4AD, 0x1E8D1);
    DefineExecutableArea(0x1E8D5, 0x1E949);
    DefineExecutableArea(0x1E97A, 0x1EA2F);
    DefineExecutableArea(0x1EA32, 0x1EA74);
    DefineExecutableArea(0x1EA7B, 0x1EB73);
    DefineExecutableArea(0x1EC46, 0x1EC6B);
    DefineExecutableArea(0x1EC9C, 0x1ED39);
    DefineExecutableArea(0x1ED40, 0x1ED4B);
    DefineExecutableArea(0x1EDB9, 0x1EE89);
    DefineExecutableArea(0x1EEA0, 0x1EEE8);
    DefineExecutableArea(0x1EF22, 0x1EFE0);
    DefineExecutableArea(0x1F05C, 0x1F29A);
    DefineExecutableArea(0x1F2A7, 0x1F2E6);
    DefineExecutableArea(0x1F2EA, 0x1F4A8);
    DefineExecutableArea(0x335B0, 0x335D6);
    DefineExecutableArea(0x335DA, 0x335EC);
    DefineExecutableArea(0x335EF, 0x33615);
    DefineExecutableArea(0x33619, 0x33627);
    DefineExecutableArea(0x3362B, 0x33639);
    DefineExecutableArea(0x33E17, 0x33F53);
    DefineExecutableArea(0x33F87, 0x340B3);
    DefineExecutableArea(0x340B6, 0x341DD);
    DefineExecutableArea(0x341DF, 0x341EC);
    DefineExecutableArea(0x341EE, 0x34230);
    DefineExecutableArea(0x34235, 0x344B4);
    DefineExecutableArea(0x344BA, 0x3458B);
    DefineExecutableArea(0x34592, 0x345FF);
    DefineExecutableArea(0x34601, 0x346AD);
    DefineExecutableArea(0x346AF, 0x34720);
    DefineExecutableArea(0x34722, 0x34765);
    DefineExecutableArea(0x34767, 0x349A4);
    DefineExecutableArea(0x349AD, 0x34A31);
    DefineExecutableArea(0x34A3A, 0x34AAA);
    DefineExecutableArea(0x34B57, 0x34BD7);
    DefineExecutableArea(0x34C98, 0x34CD3);
    DefineExecutableArea(0x34CD5, 0x3514F);
    DefineExecutableArea(0x35166, 0x35232);
    DefineExecutableArea(0x35235, 0x35270);
    DefineExecutableArea(0x35272, 0x35378);
    DefineExecutableArea(0x353FC, 0x35527);
    DefineExecutableArea(0x35529, 0x3554C);
    DefineExecutableArea(0x3554E, 0x35833);
    DefineExecutableArea(0x35846, 0x359E4);
    DefineExecutableArea(0x359ED, 0x35A37);
    DefineExecutableArea(0x35A46, 0x35A58);
    DefineExecutableArea(0x35A97, 0x35ACA);
    DefineExecutableArea(0x35ACD, 0x35AD7);
    DefineExecutableArea(0x35B93, 0x35BDD);
    DefineExecutableArea(0x35F60, 0x35F7F);
    DefineExecutableArea(0x36006, 0x36176);
    DefineExecutableArea(0x36471, 0x36486);
    DefineExecutableArea(0x364A9, 0x364BE);
    DefineExecutableArea(0x364E1, 0x3659F);
    DefineExecutableArea(0x365CA, 0x365DF);
    DefineExecutableArea(0x3661D, 0x36695);
    DefineExecutableArea(0x366B0, 0x366D2);
    DefineExecutableArea(0x36730, 0x36831);
    DefineExecutableArea(0x36A1F, 0x36A30);
    DefineExecutableArea(0x36A78, 0x36A99);
    DefineExecutableArea(0x36B60, 0x36CF0);
    DefineExecutableArea(0x36E99, 0x36EB5);
    DefineExecutableArea(0x36EC4, 0x36ED4);
    DefineExecutableArea(0x56450, 0x56471);
    DefineExecutableArea(0x564D2, 0x564F3);
    DefineExecutableArea(0x56562, 0x56583);
    DefineExecutableArea(0x565C1, 0x565E2);
    DefineExecutableArea(0x5668E, 0x566AF);
    DefineExecutableArea(0x566C0, 0x566E1);
    DefineExecutableArea(0x56729, 0x5674A);
    DefineExecutableArea(0x5674F, 0x56770);
    DefineExecutableArea(0x567A7, 0x567C8);
    DefineExecutableArea(0x567FC, 0x5681D);
    DefineExecutableArea(0x56833, 0x56854);
    DefineExecutableArea(0x5687B, 0x5689C);
    DefineExecutableArea(0x568B7, 0x568D8);
    DefineExecutableArea(0x5690F, 0x56930);
    DefineExecutableArea(0x56944, 0x56965);
    DefineExecutableArea(0x56986, 0x569A7);
  }
  
  
  public Action entry_1000_0000_10000(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3A: goto label_1000_003A_1003A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0000_10000:
    // MOV AX,0xdd1d (1000_0000 / 0x10000)
    AX = 0xDD1D;
    // CALL 0x1000:e4ad (1000_0003 / 0x10003)
    NearCall(cs1, 0x6, parse_command_line_ida_1000_E4AD_1E4AD);
    // CALL 0x1000:e594 (1000_0006 / 0x10006)
    NearCall(cs1, 0x9, initialize_ida_1000_E594_1E594);
    // CALL 0x1000:00b0 (1000_0009 / 0x10009)
    NearCall(cs1, 0xC, initialize_2_ida_1000_00B0_100B0);
    // STI  (1000_000C / 0x1000C)
    InterruptFlag = true;
    // CALL 0x1000:0580 (1000_000D / 0x1000D)
    NearCall(cs1, 0x10, play_intro_ida_1000_0580_10580);
    // CALL 0x1000:0309 (1000_0010 / 0x10010)
    NearCall(cs1, 0x13, play_CREDITS_HNM_ida_1000_0309_10309);
    // CALL 0x1000:021c (1000_0013 / 0x10013)
    NearCall(cs1, 0x16, play_intro2_ida_1000_021C_1021C);
    // CALL 0x1000:aeb7 (1000_0016 / 0x10016)
    NearCall(cs1, 0x19, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV byte ptr [0x3810],0x0 (1000_0019 / 0x10019)
    UInt8[DS, 0x3810] = 0x0;
    // MOV word ptr [0x2],0x2 (1000_001E / 0x1001E)
    UInt16[DS, 0x2] = 0x2;
    // CALL 0x1000:0083 (1000_0024 / 0x10024)
    NearCall(cs1, 0x27, unknown_1000_0083_10083);
    // MOV CL,0xff (1000_0027 / 0x10027)
    CL = 0xFF;
    // CALL 0x1000:b389 (1000_0029 / 0x10029)
    NearCall(cs1, 0x2C, open_sav_cl_ida_1000_B389_1B389);
    // CALL 0x1000:1860 (1000_002C / 0x1002C)
    NearCall(cs1, 0x2F, unknown_1000_1860_11860);
    // MOV byte ptr [0xce80],0xff (1000_002F / 0x1002F)
    UInt8[DS, 0xCE80] = 0xFF;
    // CALL 0x1000:b2be (1000_0034 / 0x10034)
    NearCall(cs1, 0x37, SetUnknown2788To0_1000_B2BE_1B2BE);
    // CALL 0x1000:d815 (1000_0037 / 0x10037)
    NearCall(cs1, 0x3A, unknown_1000_D815_1D815);
    label_1000_003A_1003A:
    // CLD  (1000_003A / 0x1003A)
    DirectionFlag = false;
    // XOR AX,AX (1000_003B / 0x1003B)
    AX = 0;
    // INT 0x33 (1000_003D / 0x1003D)
    Interrupt(0x33);
    // MOV AX,0x1f4b (1000_003F / 0x1003F)
    AX = 0x1F4B;
    // MOV DS,AX (1000_0042 / 0x10042)
    DS = AX;
    // CALL 0x1000:e8d5 (1000_0044 / 0x10044)
    NearCall(cs1, 0x47, uninitialize_memory_driver_ida_1000_E8D5_1E8D5);
    // CMP word ptr [0x3977],0x0 (1000_0047 / 0x10047)
    Alu.Sub16(UInt16[DS, 0x3977], 0x0);
    // JZ 0x1000:0056 (1000_004C / 0x1004C)
    if(ZeroFlag) {
      goto label_1000_0056_10056;
    }
    // CALLF [0x3975] (1000_004E / 0x1004E)
    // Indirect call to [0x3975], generating possible targets from emulator records
    uint targetAddress_1000_004E = (uint)(UInt16[DS, 0x3977] * 0x10 + UInt16[DS, 0x3975] - cs1 * 0x10);
    switch(targetAddress_1000_004E) {
      case 0x464E6 : FarCall(cs1, 0x52, ClearAL_563E_0106_564E6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_004E);
        break;
    }
    // CALLF [0x398d] (1000_0052 / 0x10052)
    // Indirect call to [0x398d], generating possible targets from emulator records
    uint targetAddress_1000_0052 = (uint)(UInt16[DS, 0x398F] * 0x10 + UInt16[DS, 0x398D] - cs1 * 0x10);
    switch(targetAddress_1000_0052) {
      case 0x46453 : throw FailAsUntested("Could not find a valid function at address 5635_0103 / 0x56453");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0052);
        break;
    }
    label_1000_0056_10056:
    // MOV AX,0x3 (1000_0056 / 0x10056)
    AX = 0x3;
    // INT 0x10 (1000_0059 / 0x10059)
    Interrupt(0x10);
    // MOV SI,word ptr [0x3cbc] (1000_005B / 0x1005B)
    SI = UInt16[DS, 0x3CBC];
    // OR SI,SI (1000_005F / 0x1005F)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:006e (1000_0061 / 0x10061)
    if(ZeroFlag) {
      goto label_1000_006E_1006E;
    }
    label_1000_0063_10063:
    // LODSB SI (1000_0063 / 0x10063)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_0064 / 0x10064)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:006e (1000_0066 / 0x10066)
    if(ZeroFlag) {
      goto label_1000_006E_1006E;
    }
    // MOV AH,0xe (1000_0068 / 0x10068)
    AH = 0xE;
    // INT 0x10 (1000_006A / 0x1006A)
    Interrupt(0x10);
    // JMP 0x1000:0063 (1000_006C / 0x1006C)
    goto label_1000_0063_10063;
    label_1000_006E_1006E:
    // MOV AX,0xe0d (1000_006E / 0x1006E)
    AX = 0xE0D;
    // INT 0x10 (1000_0071 / 0x10071)
    Interrupt(0x10);
    // MOV AX,0xe0a (1000_0073 / 0x10073)
    AX = 0xE0A;
    // INT 0x10 (1000_0076 / 0x10076)
    Interrupt(0x10);
    // MOV DL,0xff (1000_0078 / 0x10078)
    DL = 0xFF;
    // MOV AX,0xc06 (1000_007A / 0x1007A)
    AX = 0xC06;
    // INT 0x21 (1000_007D / 0x1007D)
    Interrupt(0x21);
    // MOV AH,0x4c (1000_007F / 0x1007F)
    AH = 0x4C;
    // INT 0x21 (1000_0081 / 0x10081)
    Interrupt(0x21);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_0083_10083(0);
  }
  
  public Action unknown_1000_0083_10083(int gotoTarget) {
    label_1000_0083_10083:
    // CALL 0x1000:cfa0 (1000_0083 / 0x10083)
    NearCall(cs1, 0x86, check_amr_or_eng_language_ida_1000_CFA0_1CFA0);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_0086_10086(0);
  }
  
  public Action unknown_1000_0086_10086(int gotoTarget) {
    label_1000_0086_10086:
    // CALL 0x1000:c07c (1000_0086 / 0x10086)
    NearCall(cs1, 0x89, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:c0ad (1000_0089 / 0x10089)
    NearCall(cs1, 0x8C, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV SI,0x1ae4 (1000_008C / 0x1008C)
    SI = 0x1AE4;
    // MOV BP,0xd1ef (1000_008F / 0x1008F)
    BP = 0xD1EF;
    // CALL 0x1000:c097 (1000_0092 / 0x10092)
    NearCall(cs1, 0x95, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // JMP 0x1000:1797 (1000_0095 / 0x10095)
    // Jump converted to entry function call
    return unknown_1000_1797_11797(0);
  }
  
  public Action ConvertIndexTableToPointerTable_1000_0098_10098(int gotoTarget) {
    label_1000_0098_10098:
    // MOV CX,word ptr ES:[DI] (1000_0098 / 0x10098)
    CX = UInt16[ES, DI];
    // SHR CX,1 (1000_009B / 0x1009B)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // MOV BX,DI (1000_009D / 0x1009D)
    BX = DI;
    label_1000_009F_1009F:
    // MOV AX,word ptr ES:[DI] (1000_009F / 0x1009F)
    AX = UInt16[ES, DI];
    // ADD AX,BX (1000_00A2 / 0x100A2)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // STOSW ES:DI (1000_00A4 / 0x100A4)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x1000:009f (1000_00A5 / 0x100A5)
    if(--CX != 0) {
      goto label_1000_009F_1009F;
    }
    // RET  (1000_00A7 / 0x100A7)
    return NearRet();
  }
  
  public Action initialize_2_ida_1000_00B0_100B0(int gotoTarget) {
    label_1000_00B0_100B0:
    // CALL 0x1000:00d1 (1000_00B0 / 0x100B0)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xB3, intialize_resources_ida_1000_00D1_100D1);
    // CALL 0x1000:0169 (1000_00B3 / 0x100B3)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xB6, map2_resource_func_ida_1000_0169_10169);
    // CALL 0x1000:da53 (1000_00B6 / 0x100B6)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xB9, VgaInitRelated_1000_DA53_1DA53);
    // CALL 0x1000:b17a (1000_00B9 / 0x100B9)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xBC, unknown_1000_B17A_1B17A);
    // CALL 0x1000:b17a (1000_00BC / 0x100BC)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xBF, unknown_1000_B17A_1B17A);
    // XOR AX,AX (1000_00BF / 0x100BF)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = 0;
    // MOV ES,AX (1000_00C1 / 0x100C1)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    ES = AX;
    // MOV AX,ES:[0x46c] (1000_00C3 / 0x100C3)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = UInt16[ES, 0x46C];
    // MOV [0xd824],AX (1000_00C7 / 0x100C7)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xD824] = AX;
    // MOV [0xd826],AX (1000_00CA / 0x100CA)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xD826] = AX;
    // MOV [0xd828],AX (1000_00CD / 0x100CD)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xD828] = AX;
    // RET  (1000_00D0 / 0x100D0)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return intialize_resources_ida_1000_00D1_100D1(0);
  }
  
  public Action intialize_resources_ida_1000_00D1_100D1(int gotoTarget) {
    label_1000_00D1_100D1:
    // PUSH DS (1000_00D1 / 0x100D1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    Stack.Push(DS);
    // POP ES (1000_00D2 / 0x100D2)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    ES = Stack.Pop();
    // MOV DI,0x4948 (1000_00D3 / 0x100D3)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    DI = 0x4948;
    // MOV SI,0xba (1000_00D6 / 0x100D6)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = 0xBA;
    // CALL 0x1000:f0b9 (1000_00D9 / 0x100D9)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0xDC, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // MOV CX,0x18c (1000_00DC / 0x100DC)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    CX = 0x18C;
    // MOV SI,DI (1000_00DF / 0x100DF)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = DI;
    label_1000_00E1_100E1:
    // LODSW SI (1000_00E1 / 0x100E1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AL,AH (1000_00E2 / 0x100E2)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    byte tmp_1000_00E2 = AL;
    AL = AH;
    AH = tmp_1000_00E2;
    // STOSW ES:DI (1000_00E4 / 0x100E4)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x1000:00e1 (1000_00E5 / 0x100E5)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    if(--CX != 0) {
      goto label_1000_00E1_100E1;
    }
    // MOV DI,0x4880 (1000_00E7 / 0x100E7)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    DI = 0x4880;
    // MOV CX,0x63 (1000_00EA / 0x100EA)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    CX = 0x63;
    // MOV SI,0x494a (1000_00ED / 0x100ED)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = 0x494A;
    label_1000_00F0_100F0:
    // XOR AX,AX (1000_00F0 / 0x100F0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = 0;
    // MOV DX,0x1 (1000_00F2 / 0x100F2)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    DX = 0x1;
    // MOV BX,word ptr [SI] (1000_00F5 / 0x100F5)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    BX = UInt16[DS, SI];
    // SHL BX,1 (1000_00F7 / 0x100F7)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // DIV BX (1000_00F9 / 0x100F9)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    Cpu.Div16(BX);
    // CMP word ptr [SI],DX (1000_00FB / 0x100FB)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    Alu.Sub16(UInt16[DS, SI], DX);
    // ADC AX,0x0 (1000_00FD / 0x100FD)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = Alu.Adc16(AX, 0x0);
    // STOSW ES:DI (1000_0100 / 0x10100)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD SI,0x8 (1000_0101 / 0x10101)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    // SI += 0x8;
    SI = Alu.Add16(SI, 0x8);
    // LOOP 0x1000:00f0 (1000_0104 / 0x10104)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    if(--CX != 0) {
      goto label_1000_00F0_100F0;
    }
    // MOV SI,0xbf (1000_0106 / 0x10106)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = 0xBF;
    // CALL 0x1000:f0b9 (1000_0109 / 0x10109)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x10C, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // MOV AX,DI (1000_010C / 0x1010C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = DI;
    // ADD AX,0x62fc (1000_010E / 0x1010E)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    // AX += 0x62FC;
    AX = Alu.Add16(AX, 0x62FC);
    // MOV [0xdcfe],AX (1000_0111 / 0x10111)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xDCFE] = AX;
    // MOV word ptr [0xdd00],ES (1000_0114 / 0x10114)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xDD00] = ES;
    // PUSH DS (1000_0118 / 0x10118)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    Stack.Push(DS);
    // POP ES (1000_0119 / 0x10119)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_B4A6_1B4A6
    ES = Stack.Pop();
    // MOV DI,0xaa76 (1000_011A / 0x1011A)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    DI = 0xAA76;
    // MOV SI,0xbd (1000_011D / 0x1011D)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = 0xBD;
    // CALL 0x1000:f0a0 (1000_0120 / 0x10120)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x123, open_resource_force_hsq_ida_1000_F0A0_1F0A0);
    // CALL 0x1000:0098 (1000_0123 / 0x10123)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x126, ConvertIndexTableToPointerTable_1000_0098_10098);
    // MOV SI,0xbc (1000_0126 / 0x10126)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    SI = 0xBC;
    // CALL 0x1000:f0b9 (1000_0129 / 0x10129)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x12C, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // MOV word ptr [0xaa72],DI (1000_012C / 0x1012C)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xAA72] = DI;
    // MOV word ptr [0xaa74],ES (1000_0130 / 0x10130)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0xAA74] = ES;
    // CALL 0x1000:0098 (1000_0134 / 0x10134)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x137, ConvertIndexTableToPointerTable_1000_0098_10098);
    // LES AX,[0x39b7] (1000_0137 / 0x10137)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // MOV [0x47ac],AX (1000_013B / 0x1013B)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0x47AC] = AX;
    // MOV word ptr [0x47ae],ES (1000_013E / 0x1013E)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    UInt16[DS, 0x47AE] = ES;
    // MOV CX,0x1d4c (1000_0142 / 0x10142)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    CX = 0x1D4C;
    // CALL 0x1000:f0ff (1000_0145 / 0x10145)
    // Instruction bytes at index 0, 1, 2 modified by those instruction(s): 1000_B4A6_1B4A6
    NearCall(cs1, 0x148, bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF);
    // LES AX,[0x39b7] (1000_0148 / 0x10148)
    // Instruction bytes at index 0, 1, 2, 3 modified by those instruction(s): 1000_B4A6_1B4A6
    AX = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // MOV [0x47b0],AX (1000_014C / 0x1014C)
    UInt16[DS, 0x47B0] = AX;
    // MOV word ptr [0x47b2],ES (1000_014F / 0x1014F)
    UInt16[DS, 0x47B2] = ES;
    // MOV CX,0xadd4 (1000_0153 / 0x10153)
    CX = 0xADD4;
    // CALL 0x1000:f0ff (1000_0156 / 0x10156)
    NearCall(cs1, 0x159, bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF);
    // CALL 0x1000:cfb9 (1000_0159 / 0x10159)
    NearCall(cs1, 0x15C, unknown_1000_CFB9_1CFB9);
    // JMP 0x1000:c137 (1000_015C / 0x1015C)
    // Jump converted to entry function call
    return load_icons_sprites_ida_1000_C137_1C137(0);
  }
  
  public Action map2_resource_func_ida_1000_0169_10169(int gotoTarget) {
    label_1000_0169_10169:
    // MOV AX,0x3a (1000_0169 / 0x10169)
    AX = 0x3A;
    // CALL 0x1000:c13e (1000_016C / 0x1016C)
    NearCall(cs1, 0x16F, open_sprite_sheet_ida_1000_C13E_1C13E);
    // PUSH DS (1000_016F / 0x1016F)
    Stack.Push(DS);
    // POP ES (1000_0170 / 0x10170)
    ES = Stack.Pop();
    // MOV DI,0x4c60 (1000_0171 / 0x10171)
    DI = 0x4C60;
    // PUSH DI (1000_0174 / 0x10174)
    Stack.Push(DI);
    // MOV AX,0x7 (1000_0175 / 0x10175)
    AX = 0x7;
    // MOV CX,0x100 (1000_0178 / 0x10178)
    CX = 0x100;
    while (CX-- != 0) {
      // STOSW ES:DI (1000_017B / 0x1017B)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP DI (1000_017D / 0x1017D)
    DI = Stack.Pop();
    // LES SI,[0xdbb0] (1000_017E / 0x1017E)
    SI = UInt16[DS, 0xDBB0];
    ES = UInt16[DS, 0xDBB2];
    // MOV CX,0xc5f9 (1000_0182 / 0x10182)
    CX = 0xC5F9;
    label_1000_0185_10185:
    // LODSB ES:SI (1000_0185 / 0x10185)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BX,AX (1000_0187 / 0x10187)
    BX = AX;
    // SHL BX,1 (1000_0189 / 0x10189)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // INC word ptr [BX + DI] (1000_018B / 0x1018B)
    UInt16[DS, (ushort)(BX + DI)] = Alu.Inc16(UInt16[DS, (ushort)(BX + DI)]);
    // LOOP 0x1000:0185 (1000_018D / 0x1018D)
    if(--CX != 0) {
      goto label_1000_0185_10185;
    }
    // MOV SI,0x100 (1000_018F / 0x1018F)
    SI = 0x100;
    label_1000_0192_10192:
    // MOV DX,word ptr [SI + 0x2] (1000_0192 / 0x10192)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BX,word ptr [SI + 0x4] (1000_0195 / 0x10195)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:b5c5 (1000_0198 / 0x10198)
    NearCall(cs1, 0x19B, unknown_1000_B5C5_1B5C5);
    // MOV word ptr [SI + 0x2],DX (1000_019B / 0x1019B)
    UInt16[DS, (ushort)(SI + 0x2)] = DX;
    // MOV word ptr [SI + 0x6],DI (1000_019E / 0x1019E)
    UInt16[DS, (ushort)(SI + 0x6)] = DI;
    // OR byte ptr ES:[DI],0x40 (1000_01A1 / 0x101A1)
    // UInt8[ES, DI] |= 0x40;
    UInt8[ES, DI] = Alu.Or8(UInt8[ES, DI], 0x40);
    // MOV ES,word ptr [0xdbb2] (1000_01A5 / 0x101A5)
    ES = UInt16[DS, 0xDBB2];
    // MOV AL,byte ptr ES:[DI] (1000_01A9 / 0x101A9)
    AL = UInt8[ES, DI];
    // MOV byte ptr [SI + 0x10],AL (1000_01AC / 0x101AC)
    UInt8[DS, (ushort)(SI + 0x10)] = AL;
    // XOR BX,BX (1000_01AF / 0x101AF)
    BX = 0;
    // MOV BL,AL (1000_01B1 / 0x101B1)
    BL = AL;
    // SHL BX,1 (1000_01B3 / 0x101B3)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV AX,word ptr [BX + 0x4c60] (1000_01B5 / 0x101B5)
    AX = UInt16[DS, (ushort)(BX + 0x4C60)];
    // MOV CL,0x4 (1000_01B9 / 0x101B9)
    CL = 0x4;
    // SHR AX,CL (1000_01BB / 0x101BB)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // MOV byte ptr [SI + 0x11],AL (1000_01BD / 0x101BD)
    UInt8[DS, (ushort)(SI + 0x11)] = AL;
    // ADD SI,0x1c (1000_01C0 / 0x101C0)
    // SI += 0x1C;
    SI = Alu.Add16(SI, 0x1C);
    // CMP byte ptr [SI],0xff (1000_01C3 / 0x101C3)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JNZ 0x1000:0192 (1000_01C6 / 0x101C6)
    if(!ZeroFlag) {
      goto label_1000_0192_10192;
    }
    // MOV DI,0x100 (1000_01C8 / 0x101C8)
    DI = 0x100;
    label_1000_01CB_101CB:
    // MOV BP,0x1e0 (1000_01CB / 0x101CB)
    BP = 0x1E0;
    // MOV DX,word ptr [DI + 0x2] (1000_01CE / 0x101CE)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_01D1 / 0x101D1)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // CALL 0x1000:6603 (1000_01D4 / 0x101D4)
    NearCall(cs1, 0x1D7, unknown_1000_6603_16603);
    // ADD DI,0x1c (1000_01D7 / 0x101D7)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP byte ptr [DI],0xff (1000_01DA / 0x101DA)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JNZ 0x1000:01cb (1000_01DD / 0x101DD)
    if(!ZeroFlag) {
      goto label_1000_01CB_101CB;
    }
    // RET  (1000_01DF / 0x101DF)
    return NearRet();
  }
  
  public Action unknown_1000_01E0_101E0(int gotoTarget) {
    label_1000_01E0_101E0:
    // MOV word ptr [SI + 0x4],DI (1000_01E0 / 0x101E0)
    UInt16[DS, (ushort)(SI + 0x4)] = DI;
    // MOV word ptr [SI + 0x6],DX (1000_01E3 / 0x101E3)
    UInt16[DS, (ushort)(SI + 0x6)] = DX;
    // MOV word ptr [SI + 0x8],BX (1000_01E6 / 0x101E6)
    UInt16[DS, (ushort)(SI + 0x8)] = BX;
    // MOV AL,byte ptr [DI] (1000_01E9 / 0x101E9)
    AL = UInt8[DS, DI];
    // MOV AH,byte ptr [SI + 0x12] (1000_01EB / 0x101EB)
    AH = UInt8[DS, (ushort)(SI + 0x12)];
    // AND AX,0x700f (1000_01EE / 0x101EE)
    // AX &= 0x700F;
    AX = Alu.And16(AX, 0x700F);
    // CMP AL,0x3 (1000_01F1 / 0x101F1)
    Alu.Sub8(AL, 0x3);
    // JBE 0x1000:0206 (1000_01F3 / 0x101F3)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_0206_10206;
    }
    // XOR AH,0x80 (1000_01F5 / 0x101F5)
    // AH ^= 0x80;
    AH = Alu.Xor8(AH, 0x80);
    // CMP AL,0x5 (1000_01F8 / 0x101F8)
    Alu.Sub8(AL, 0x5);
    // JBE 0x1000:0206 (1000_01FA / 0x101FA)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_0206_10206;
    }
    // XOR AH,0x80 (1000_01FC / 0x101FC)
    // AH ^= 0x80;
    AH = Alu.Xor8(AH, 0x80);
    // CMP AL,0x9 (1000_01FF / 0x101FF)
    Alu.Sub8(AL, 0x9);
    // JBE 0x1000:0206 (1000_0201 / 0x10201)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_0206_10206;
    }
    // XOR AH,0x80 (1000_0203 / 0x10203)
    // AH ^= 0x80;
    AH = Alu.Xor8(AH, 0x80);
    label_1000_0206_10206:
    // OR AL,AH (1000_0206 / 0x10206)
    // AL |= AH;
    AL = Alu.Or8(AL, AH);
    // MOV byte ptr [SI + 0x12],AL (1000_0208 / 0x10208)
    UInt8[DS, (ushort)(SI + 0x12)] = AL;
    // RET  (1000_020B / 0x1020B)
    return NearRet();
  }
  
  public Action play_intro2_ida_1000_021C_1021C(int gotoTarget) {
    label_1000_021C_1021C:
    // MOV byte ptr [0x289e],0x8c (1000_021C / 0x1021C)
    UInt8[DS, 0x289E] = 0x8C;
    // MOV byte ptr [0x28e7],0x1 (1000_0221 / 0x10221)
    UInt8[DS, 0x28E7] = 0x1;
    // JZ 0x1000:0292 (1000_0226 / 0x10226)
    if(ZeroFlag) {
      goto label_1000_0292_10292;
    }
    // CALL 0x1000:ad50 (1000_0228 / 0x10228)
    NearCall(cs1, 0x22B, unknown_1000_AD50_1AD50);
    // MOV AX,0x3e8 (1000_022B / 0x1022B)
    AX = 0x3E8;
    // MOV SI,0x1 (1000_022E / 0x1022E)
    SI = 0x1;
    label_1000_0231_10231:
    // PUSH SI (1000_0231 / 0x10231)
    Stack.Push(SI);
    // MOV BP,0x2c1 (1000_0232 / 0x10232)
    BP = 0x2C1;
    // CALL 0x1000:c102 (1000_0235 / 0x10235)
    NearCall(cs1, 0x238, unknown_1000_C102_1C102);
    // CALL 0x1000:ade0 (1000_0238 / 0x10238)
    NearCall(cs1, 0x23B, unknown_1000_ADE0_1ADE0);
    // POP AX (1000_023B / 0x1023B)
    AX = Stack.Pop();
    // PUSH AX (1000_023C / 0x1023C)
    Stack.Push(AX);
    // CALL 0x1000:ab4f (1000_023D / 0x1023D)
    NearCall(cs1, 0x240, unknown_1000_AB4F_1AB4F);
    // POP SI (1000_0240 / 0x10240)
    SI = Stack.Pop();
    // CALL 0x1000:de54 (1000_0241 / 0x10241)
    NearCall(cs1, 0x244, unknown_1000_DE54_1DE54);
    // JZ 0x1000:0292 (1000_0244 / 0x10244)
    if(ZeroFlag) {
      goto label_1000_0292_10292;
    }
    // PUSH SI (1000_0246 / 0x10246)
    Stack.Push(SI);
    // MOV AX,0x320 (1000_0247 / 0x10247)
    AX = 0x320;
    // MOV AX,0xfa0 (1000_024A / 0x1024A)
    AX = 0xFA0;
    // CALL 0x1000:ddb0 (1000_024D / 0x1024D)
    NearCall(cs1, 0x250, unknown_1000_DDB0_1DDB0);
    // PUSHF  (1000_0250 / 0x10250)
    Stack.Push(FlagRegister);
    // CALL 0x1000:0911 (1000_0251 / 0x10251)
    NearCall(cs1, 0x254, unknown_1000_0911_10911);
    // CALL 0x1000:ac14 (1000_0254 / 0x10254)
    NearCall(cs1, 0x257, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // CALL 0x1000:aded (1000_0257 / 0x10257)
    NearCall(cs1, 0x25A, unknown_1000_ADED_1ADED);
    // POPF  (1000_025A / 0x1025A)
    FlagRegister = Stack.Pop();
    // POP SI (1000_025B / 0x1025B)
    SI = Stack.Pop();
    // JZ 0x1000:0292 (1000_025C / 0x1025C)
    if(ZeroFlag) {
      goto label_1000_0292_10292;
    }
    // INC SI (1000_025E / 0x1025E)
    SI = Alu.Inc16(SI);
    // CMP SI,0x8 (1000_025F / 0x1025F)
    Alu.Sub16(SI, 0x8);
    // JBE 0x1000:0231 (1000_0262 / 0x10262)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_0231_10231;
    }
    // MOV BP,0x301 (1000_0264 / 0x10264)
    BP = 0x301;
    // MOV AL,0x10 (1000_0267 / 0x10267)
    AL = 0x10;
    // CALL 0x1000:c108 (1000_0269 / 0x10269)
    NearCall(cs1, 0x26C, transition_ida_1000_C108_1C108);
    // MOV AX,0xc8 (1000_026C / 0x1026C)
    AX = 0xC8;
    // CALL 0x1000:ddb0 (1000_026F / 0x1026F)
    NearCall(cs1, 0x272, unknown_1000_DDB0_1DDB0);
    // MOV BL,0xc (1000_0272 / 0x10272)
    BL = 0xC;
    // CALL 0x1000:38f1 (1000_0274 / 0x10274)
    NearCall(cs1, 0x277, unknown_1000_38F1_138F1);
    // MOV byte ptr [0x46df],0x1 (1000_0277 / 0x10277)
    UInt8[DS, 0x46DF] = 0x1;
    // MOV AX,0x4b0 (1000_027C / 0x1027C)
    AX = 0x4B0;
    // CALL 0x1000:ddb0 (1000_027F / 0x1027F)
    NearCall(cs1, 0x282, unknown_1000_DDB0_1DDB0);
    // CALL 0x1000:3950 (1000_0282 / 0x10282)
    NearCall(cs1, 0x285, unknown_1000_3950_13950);
    // MOV byte ptr [0x46df],0x0 (1000_0285 / 0x10285)
    UInt8[DS, 0x46DF] = 0x0;
    // MOV BP,0xc0ad (1000_028A / 0x1028A)
    BP = 0xC0AD;
    // MOV AL,0x10 (1000_028D / 0x1028D)
    AL = 0x10;
    // CALL 0x1000:c108 (1000_028F / 0x1028F)
    NearCall(cs1, 0x292, transition_ida_1000_C108_1C108);
    label_1000_0292_10292:
    // MOV ES,word ptr [0xdbd8] (1000_0292 / 0x10292)
    ES = UInt16[DS, 0xDBD8];
    // CALLF [0x38d5] (1000_0296 / 0x10296)
    // Indirect call to [0x38d5], generating possible targets from emulator records
    uint targetAddress_1000_0296 = (uint)(UInt16[DS, 0x38D7] * 0x10 + UInt16[DS, 0x38D5] - cs1 * 0x10);
    switch(targetAddress_1000_0296) {
      case 0x235C8 : FarCall(cs1, 0x29A, VgaFunc08FillWithZeroFor64000AtES_334B_0118_335C8);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0296);
        break;
    }
    // CALL 0x1000:ac14 (1000_029A / 0x1029A)
    NearCall(cs1, 0x29D, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // MOV byte ptr [0x227d],0x0 (1000_029D / 0x1029D)
    UInt8[DS, 0x227D] = 0x0;
    // MOV byte ptr [0xc5],0x0 (1000_02A2 / 0x102A2)
    UInt8[DS, 0xC5] = 0x0;
    // CALL 0x1000:0911 (1000_02A7 / 0x102A7)
    NearCall(cs1, 0x2AA, unknown_1000_0911_10911);
    // MOV byte ptr [0x28e7],0x0 (1000_02AA / 0x102AA)
    UInt8[DS, 0x28E7] = 0x0;
    // MOV byte ptr [0xdbe6],0x6 (1000_02AF / 0x102AF)
    UInt8[DS, 0xDBE6] = 0x6;
    // INC byte ptr [0x115] (1000_02B4 / 0x102B4)
    UInt8[DS, 0x115] = Alu.Inc8(UInt8[DS, 0x115]);
    // MOV DX,0x200a (1000_02B8 / 0x102B8)
    DX = 0x200A;
    // MOV BX,0x180 (1000_02BB / 0x102BB)
    BX = 0x180;
    // JMP 0x1000:08f0 (1000_02BE / 0x102BE)
    goto label_1000_08F0_108F0;
    label_1000_08F0_108F0:
    // XOR AL,AL (1000_08F0 / 0x108F0)
    AL = 0;
    // MOV [0x47a4],AL (1000_08F2 / 0x108F2)
    UInt8[DS, 0x47A4] = AL;
    // MOV [0x46df],AL (1000_08F5 / 0x108F5)
    UInt8[DS, 0x46DF] = AL;
    // MOV word ptr [0x4],DX (1000_08F8 / 0x108F8)
    UInt16[DS, 0x4] = DX;
    // MOV word ptr [0x6],BX (1000_08FC / 0x108FC)
    UInt16[DS, 0x6] = BX;
    // MOV byte ptr [0x8],DH (1000_0900 / 0x10900)
    UInt8[DS, 0x8] = DH;
    // MOV AL,0x1c (1000_0904 / 0x10904)
    AL = 0x1C;
    // MUL BH (1000_0906 / 0x10906)
    Cpu.Mul8(BH);
    // ADD AX,0xe4 (1000_0908 / 0x10908)
    // AX += 0xE4;
    AX = Alu.Add16(AX, 0xE4);
    // MOV [0x114e],AX (1000_090B / 0x1090B)
    UInt16[DS, 0x114E] = AX;
    // JMP 0x1000:2d74 (1000_090E / 0x1090E)
    // Jump converted to entry function call
    return open_SAL_resource_ida_1000_2D74_12D74(0);
  }
  
  public Action unknown_1000_02C1_102C1(int gotoTarget) {
    label_1000_02C1_102C1:
    // PUSH SI (1000_02C1 / 0x102C1)
    Stack.Push(SI);
    // CALL 0x1000:c0ad (1000_02C2 / 0x102C2)
    NearCall(cs1, 0x2C5, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // ADD SI,SI (1000_02C5 / 0x102C5)
    // SI += SI;
    SI = Alu.Add16(SI, SI);
    // MOV BP,word ptr CS:[SI + 0x20a] (1000_02C7 / 0x102C7)
    BP = UInt16[cs1, (ushort)(SI + 0x20A)];
    // CALL BP (1000_02CC / 0x102CC)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_02CC = (uint)(BP);
    switch(targetAddress_1000_02CC) {
      case 0x2DE : NearCall(cs1, 0x2CE, unknown_1000_02DE_102DE);
        break;
      case 0x2E3 : NearCall(cs1, 0x2CE, unknown_1000_02E3_102E3);
        break;
      case 0x94A : NearCall(cs1, 0x2CE, unknown_1000_094A_1094A);
        break;
      case 0x2F8 : NearCall(cs1, 0x2CE, unknown_1000_02F8_102F8);
        break;
      case 0x2FB : NearCall(cs1, 0x2CE, unknown_1000_02FB_102FB);
        break;
      case 0x2FE : NearCall(cs1, 0x2CE, unknown_1000_02FE_102FE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_02CC);
        break;
    }
    // POP AX (1000_02CE / 0x102CE)
    AX = Stack.Pop();
    // ADD AX,0x117 (1000_02CF / 0x102CF)
    // AX += 0x117;
    AX = Alu.Add16(AX, 0x117);
    // CALL 0x1000:d068 (1000_02D2 / 0x102D2)
    NearCall(cs1, 0x2D5, SetFontToIntro_1000_D068_1D068);
    // CALL 0x1000:9901 (1000_02D5 / 0x102D5)
    NearCall(cs1, 0x2D8, Set479ETo0_1000_9901_19901);
    // CALL 0x1000:88af (1000_02D8 / 0x102D8)
    NearCall(cs1, 0x2DB, unknown_1000_88AF_188AF);
    // JMP 0x1000:9901 (1000_02DB / 0x102DB)
    // Jump converted to entry function call
    return Set479ETo0_1000_9901_19901(0);
  }
  
  public Action unknown_1000_02DE_102DE(int gotoTarget) {
    label_1000_02DE_102DE:
    // XOR CX,CX (1000_02DE / 0x102DE)
    CX = 0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_02E0_102E0(0);
  }
  
  public Action unknown_1000_02E0_102E0(int gotoTarget) {
    label_1000_02E0_102E0:
    // JMP 0x1000:0a44 (1000_02E0 / 0x102E0)
    // Jump converted to entry function call
    return unknown_1000_0A44_10A44(0);
  }
  
  public Action unknown_1000_02E3_102E3(int gotoTarget) {
    label_1000_02E3_102E3:
    // MOV CX,0x20 (1000_02E3 / 0x102E3)
    CX = 0x20;
    // CALL 0x1000:02e0 (1000_02E6 / 0x102E6)
    NearCall(cs1, 0x2E9, unknown_1000_02E0_102E0);
    // CALL 0x1000:b8a7 (1000_02E9 / 0x102E9)
    NearCall(cs1, 0x2EC, unknown_1000_B8A7_1B8A7);
    // CALL 0x1000:b85a (1000_02EC / 0x102EC)
    NearCall(cs1, 0x2EF, unknown_1000_B85A_1B85A);
    // MOV AX,0x2c (1000_02EF / 0x102EF)
    AX = 0x2C;
    // CALL 0x1000:c13e (1000_02F2 / 0x102F2)
    NearCall(cs1, 0x2F5, open_sprite_sheet_ida_1000_C13E_1C13E);
    // JMP 0x1000:b8ea (1000_02F5 / 0x102F5)
    // Jump converted to entry function call
    return unknown_1000_B8EA_1B8EA(0);
  }
  
  public Action unknown_1000_02F8_102F8(int gotoTarget) {
    label_1000_02F8_102F8:
    // JMP 0x1000:07ee (1000_02F8 / 0x102F8)
    // Jump converted to entry function call
    return spice86_label_1000_07EE_107EE(0);
  }
  
  public Action unknown_1000_02FB_102FB(int gotoTarget) {
    label_1000_02FB_102FB:
    // JMP 0x1000:09ad (1000_02FB / 0x102FB)
    // Jump converted to entry function call
    return spice86_label_1000_09AD_109AD(0);
  }
  
  public Action unknown_1000_02FE_102FE(int gotoTarget) {
    label_1000_02FE_102FE:
    // JMP 0x1000:076a (1000_02FE / 0x102FE)
    // Jump converted to entry function call
    return spice86_label_1000_076A_1076A(0);
  }
  
  public Action unknown_1000_0301_10301(int gotoTarget) {
    label_1000_0301_10301:
    // CALL 0x1000:c0ad (1000_0301 / 0x10301)
    NearCall(cs1, 0x304, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AL,0x1b (1000_0304 / 0x10304)
    AL = 0x1B;
    // JMP 0x1000:c2f2 (1000_0306 / 0x10306)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
  }
  
  public Action play_CREDITS_HNM_ida_1000_0309_10309(int gotoTarget) {
    label_1000_0309_10309:
    // JZ 0x1000:0331 (1000_0309 / 0x10309)
    if(ZeroFlag) {
      goto label_1000_0331_10331;
    }
    // CALL 0x1000:de4e (1000_030B / 0x1030B)
    NearCall(cs1, 0x30E, SetCEE8To0_1000_DE4E_1DE4E);
    // CALL 0x1000:c07c (1000_030E / 0x1030E)
    NearCall(cs1, 0x311, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:c0ad (1000_0311 / 0x10311)
    NearCall(cs1, 0x314, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AX,0x18 (1000_0314 / 0x10314)
    AX = 0x18;
    // CALLF [0x3939] (1000_0317 / 0x10317)
    // Indirect call to [0x3939], generating possible targets from emulator records
    uint targetAddress_1000_0317 = (uint)(UInt16[DS, 0x393B] * 0x10 + UInt16[DS, 0x3939] - cs1 * 0x10);
    switch(targetAddress_1000_0317) {
      case 0x23613 : FarCall(cs1, 0x31B, VgaFunc33UpdateVgaOffset01A3FromLineNumberAsAx_334B_0163_33613);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0317);
        break;
    }
    // MOV BP,0x9ef (1000_031B / 0x1031B)
    BP = 0x9EF;
    // CALL 0x1000:c102 (1000_031E / 0x1031E)
    NearCall(cs1, 0x321, unknown_1000_C102_1C102);
    // CALL 0x1000:ad50 (1000_0321 / 0x10321)
    NearCall(cs1, 0x324, unknown_1000_AD50_1AD50);
    label_1000_0324_10324:
    // CALL 0x1000:0a16 (1000_0324 / 0x10324)
    NearCall(cs1, 0x327, unknown_1000_0A16_10A16);
    // CALL 0x1000:cc85 (1000_0327 / 0x10327)
    NearCall(cs1, 0x32A, CheckIfHnmComplete_1000_CC85_1CC85);
    // JNZ 0x1000:0331 (1000_032A / 0x1032A)
    if(!ZeroFlag) {
      goto label_1000_0331_10331;
    }
    // CALL 0x1000:dd63 (1000_032C / 0x1032C)
    NearCall(cs1, 0x32F, stc_on_user_input_ida_1000_DD63_1DD63);
    // JNC 0x1000:0324 (1000_032F / 0x1032F)
    if(!CarryFlag) {
      goto label_1000_0324_10324;
    }
    label_1000_0331_10331:
    // PUSHF  (1000_0331 / 0x10331)
    Stack.Push(FlagRegister);
    // CALL 0x1000:0579 (1000_0332 / 0x10332)
    NearCall(cs1, 0x335, ClearGlobalVgaOffset_1000_0579_10579);
    // POPF  (1000_0335 / 0x10335)
    FlagRegister = Stack.Pop();
    // RET  (1000_0336 / 0x10336)
    return NearRet();
  }
  
  public Action ClearGlobalVgaOffset_1000_0579_10579(int gotoTarget) {
    label_1000_0579_10579:
    // XOR AX,AX (1000_0579 / 0x10579)
    AX = 0;
    // CALLF [0x3939] (1000_057B / 0x1057B)
    // Indirect call to [0x3939], generating possible targets from emulator records
    uint targetAddress_1000_057B = (uint)(UInt16[DS, 0x393B] * 0x10 + UInt16[DS, 0x3939] - cs1 * 0x10);
    switch(targetAddress_1000_057B) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_057B);
        break;
    }
    // RET  (1000_057F / 0x1057F)
    return NearRet();
  }
  
  public Action play_intro_ida_1000_0580_10580(int gotoTarget) {
    label_1000_0580_10580:
    // CALL 0x1000:de54 (1000_0580 / 0x10580)
    NearCall(cs1, 0x583, unknown_1000_DE54_1DE54);
    // JZ 0x1000:05fd (1000_0583 / 0x10583)
    if(ZeroFlag) {
      goto label_1000_05FD_105FD;
    }
    // CALLF [0x3959] (1000_0585 / 0x10585)
    // Indirect call to [0x3959], generating possible targets from emulator records
    uint targetAddress_1000_0585 = (uint)(UInt16[DS, 0x395B] * 0x10 + UInt16[DS, 0x3959] - cs1 * 0x10);
    switch(targetAddress_1000_0585) {
      case 0x2362B : FarCall(cs1, 0x589, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0585);
        break;
    }
    // CALL 0x1000:aeb7 (1000_0589 / 0x10589)
    NearCall(cs1, 0x58C, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV SI,0x337 (1000_058C / 0x1058C)
    SI = 0x337;
    // CALL 0x1000:0945 (1000_058F / 0x1058F)
    NearCall(cs1, 0x592, SetSceneSequenceOffsetToSi_1000_0945_10945);
    label_1000_0592_10592:
    // MOV AX,0x18 (1000_0592 / 0x10592)
    AX = 0x18;
    // CALLF [0x3939] (1000_0595 / 0x10595)
    // Indirect call to [0x3939], generating possible targets from emulator records
    uint targetAddress_1000_0595 = (uint)(UInt16[DS, 0x393B] * 0x10 + UInt16[DS, 0x3939] - cs1 * 0x10);
    switch(targetAddress_1000_0595) {
      case 0x23613 : FarCall(cs1, 0x599, VgaFunc33UpdateVgaOffset01A3FromLineNumberAsAx_334B_0163_33613);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0595);
        break;
    }
    // CALL 0x1000:093f (1000_0599 / 0x10599)
    NearCall(cs1, 0x59C, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // MOV BX,AX (1000_059C / 0x1059C)
    BX = AX;
    // INC AX (1000_059E / 0x1059E)
    AX = Alu.Inc16(AX);
    // JNZ 0x1000:05a3 (1000_059F / 0x1059F)
    if(!ZeroFlag) {
      goto label_1000_05A3_105A3;
    }
    // JMP 0x1000:0580 (1000_05A1 / 0x105A1)
    goto label_1000_0580_10580;
    label_1000_05A3_105A3:
    // CALL 0x1000:de0c (1000_05A3 / 0x105A3)
    NearCall(cs1, 0x5A6, check_midi_ida_1000_DE0C_1DE0C);
    // JC 0x1000:05fd (1000_05A6 / 0x105A6)
    if(CarryFlag) {
      goto label_1000_05FD_105FD;
    }
    // CALL 0x1000:0911 (1000_05A8 / 0x105A8)
    NearCall(cs1, 0x5AB, unknown_1000_0911_10911);
    // CALLF [0x3959] (1000_05AB / 0x105AB)
    // Indirect call to [0x3959], generating possible targets from emulator records
    uint targetAddress_1000_05AB = (uint)(UInt16[DS, 0x395B] * 0x10 + UInt16[DS, 0x3959] - cs1 * 0x10);
    switch(targetAddress_1000_05AB) {
      case 0x2362B : FarCall(cs1, 0x5AF, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_05AB);
        break;
    }
    // CALL 0x1000:093f (1000_05AF / 0x105AF)
    NearCall(cs1, 0x5B2, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // MOV BP,AX (1000_05B2 / 0x105B2)
    BP = AX;
    // CALL 0x1000:c097 (1000_05B4 / 0x105B4)
    NearCall(cs1, 0x5B7, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // AND byte ptr [0x47d1],0x7f (1000_05B7 / 0x105B7)
    // UInt8[DS, 0x47D1] &= 0x7F;
    UInt8[DS, 0x47D1] = Alu.And8(UInt8[DS, 0x47D1], 0x7F);
    // CALL 0x1000:39e6 (1000_05BC / 0x105BC)
    NearCall(cs1, 0x5BF, unknown_1000_39E6_139E6);
    // CALL 0x1000:093f (1000_05BF / 0x105BF)
    NearCall(cs1, 0x5C2, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // MOV BX,AX (1000_05C2 / 0x105C2)
    BX = AX;
    // CALL 0x1000:de0c (1000_05C4 / 0x105C4)
    NearCall(cs1, 0x5C7, check_midi_ida_1000_DE0C_1DE0C);
    // JC 0x1000:05fd (1000_05C7 / 0x105C7)
    if(CarryFlag) {
      goto label_1000_05FD_105FD;
    }
    // CALL 0x1000:093f (1000_05C9 / 0x105C9)
    NearCall(cs1, 0x5CC, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // OR AX,AX (1000_05CC / 0x105CC)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x1000:05dc (1000_05CE / 0x105CE)
    if(SignFlag) {
      goto label_1000_05DC_105DC;
    }
    // MOV BP,0xf66 (1000_05D0 / 0x105D0)
    BP = 0xF66;
    // CALL 0x1000:c108 (1000_05D3 / 0x105D3)
    NearCall(cs1, 0x5D6, transition_ida_1000_C108_1C108);
    // CALL 0x1000:c0f4 (1000_05D6 / 0x105D6)
    NearCall(cs1, 0x5D9, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:3a7c (1000_05D9 / 0x105D9)
    NearCall(cs1, 0x5DC, unknown_1000_3A7C_13A7C);
    label_1000_05DC_105DC:
    // CALL 0x1000:c07c (1000_05DC / 0x105DC)
    NearCall(cs1, 0x5DF, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // OR byte ptr [0x47d1],0x80 (1000_05DF / 0x105DF)
    // UInt8[DS, 0x47D1] |= 0x80;
    UInt8[DS, 0x47D1] = Alu.Or8(UInt8[DS, 0x47D1], 0x80);
    // CALL 0x1000:dd63 (1000_05E4 / 0x105E4)
    NearCall(cs1, 0x5E7, stc_on_user_input_ida_1000_DD63_1DD63);
    // JC 0x1000:05fd (1000_05E7 / 0x105E7)
    if(CarryFlag) {
      goto label_1000_05FD_105FD;
    }
    // CALL 0x1000:093f (1000_05E9 / 0x105E9)
    NearCall(cs1, 0x5EC, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // CLC  (1000_05EC / 0x105EC)
    CarryFlag = false;
    // CALL AX (1000_05ED / 0x105ED)
    // Indirect call to AX, generating possible targets from emulator records
    uint targetAddress_1000_05ED = (uint)(AX);
    switch(targetAddress_1000_05ED) {
      case 0x625 : NearCall(cs1, 0x5EF, play_VIRGIN_HNM_ida_1000_0625_10625);
        break;
      case 0xF66 : NearCall(cs1, 0x5EF, NoOp_1000_0F66_10F66);
        break;
      case 0x661 : NearCall(cs1, 0x5EF, play_CRYO_OR_CRYO2_HNM_ida_1000_0661_10661);
        break;
      case 0x684 : NearCall(cs1, 0x5EF, play_PRESENT_HNM_ida_1000_0684_10684);
        break;
      case 0xCF1B : NearCall(cs1, 0x5EF, play_IRULx_HSQ_ida_1000_CF1B_1CF1B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_05ED);
        break;
    }
    // JC 0x1000:05fd (1000_05EF / 0x105EF)
    if(CarryFlag) {
      goto label_1000_05FD_105FD;
    }
    // CALL 0x1000:093f (1000_05F1 / 0x105F1)
    NearCall(cs1, 0x5F4, LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F);
    // OR AX,AX (1000_05F4 / 0x105F4)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:0592 (1000_05F6 / 0x105F6)
    if(ZeroFlag) {
      goto label_1000_0592_10592;
    }
    // CALL 0x1000:ddf0 (1000_05F8 / 0x105F8)
    NearCall(cs1, 0x5FB, unknown_1000_DDF0_1DDF0);
    // JNC 0x1000:0592 (1000_05FB / 0x105FB)
    if(!CarryFlag) {
      goto label_1000_0592_10592;
    }
    label_1000_05FD_105FD:
    // PUSHF  (1000_05FD / 0x105FD)
    Stack.Push(FlagRegister);
    // CALL 0x1000:9985 (1000_05FE / 0x105FE)
    NearCall(cs1, 0x601, unknown_1000_9985_19985);
    // MOV ES,word ptr [0xdbd8] (1000_0601 / 0x10601)
    ES = UInt16[DS, 0xDBD8];
    // CALLF [0x38d5] (1000_0605 / 0x10605)
    // Indirect call to [0x38d5], generating possible targets from emulator records
    uint targetAddress_1000_0605 = (uint)(UInt16[DS, 0x38D7] * 0x10 + UInt16[DS, 0x38D5] - cs1 * 0x10);
    switch(targetAddress_1000_0605) {
      case 0x235C8 : FarCall(cs1, 0x609, VgaFunc08FillWithZeroFor64000AtES_334B_0118_335C8);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0605);
        break;
    }
    // POPF  (1000_0609 / 0x10609)
    FlagRegister = Stack.Pop();
    // PUSHF  (1000_060A / 0x1060A)
    Stack.Push(FlagRegister);
    // CALL 0x1000:0579 (1000_060B / 0x1060B)
    NearCall(cs1, 0x60E, ClearGlobalVgaOffset_1000_0579_10579);
    // CALL 0x1000:ca01 (1000_060E / 0x1060E)
    NearCall(cs1, 0x611, hnm_close_resource_ida_1000_CA01_1CA01);
    // MOV word ptr [0x2],0x2 (1000_0611 / 0x10611)
    UInt16[DS, 0x2] = 0x2;
    // CALL 0x1000:0911 (1000_0617 / 0x10617)
    NearCall(cs1, 0x61A, unknown_1000_0911_10911);
    // POPF  (1000_061A / 0x1061A)
    FlagRegister = Stack.Pop();
    // RET  (1000_061B / 0x1061B)
    return NearRet();
  }
  
  public Action load_VIRGIN_HNM_ida_1000_061C_1061C(int gotoTarget) {
    label_1000_061C_1061C:
    // CALL 0x1000:ad57 (1000_061C / 0x1061C)
    NearCall(cs1, 0x61F, play_music_MORNING_HSQ_ida_1000_AD57_1AD57);
    // MOV AX,0x15 (1000_061F / 0x1061F)
    AX = 0x15;
    // JMP 0x1000:ca1b (1000_0622 / 0x10622)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action play_VIRGIN_HNM_ida_1000_0625_10625(int gotoTarget) {
    label_1000_0625_10625:
    // CALL 0x1000:c07c (1000_0625 / 0x10625)
    NearCall(cs1, 0x628, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    label_1000_0628_10628:
    // CALL 0x1000:dd63 (1000_0628 / 0x10628)
    NearCall(cs1, 0x62B, stc_on_user_input_ida_1000_DD63_1DD63);
    // JC 0x1000:064c (1000_062B / 0x1062B)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_064C / 0x1064C)
      return NearRet();
    }
    // CALL 0x1000:c9f4 (1000_062D / 0x1062D)
    NearCall(cs1, 0x630, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4);
    // JZ 0x1000:0628 (1000_0630 / 0x10630)
    if(ZeroFlag) {
      goto label_1000_0628_10628;
    }
    // CALL 0x1000:c4cd (1000_0632 / 0x10632)
    NearCall(cs1, 0x635, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // CMP word ptr [0xdbce],0x8 (1000_0635 / 0x10635)
    Alu.Sub16(UInt16[DS, 0xDBCE], 0x8);
    // JC 0x1000:0646 (1000_063A / 0x1063A)
    if(CarryFlag) {
      goto label_1000_0646_10646;
    }
    // CMP byte ptr [0xdbcb],0x0 (1000_063C / 0x1063C)
    Alu.Sub8(UInt8[DS, 0xDBCB], 0x0);
    // JZ 0x1000:0646 (1000_0641 / 0x10641)
    if(ZeroFlag) {
      goto label_1000_0646_10646;
    }
    // CALL 0x1000:aeb7 (1000_0643 / 0x10643)
    NearCall(cs1, 0x646, CallMidiFunc02_1000_AEB7_1AEB7);
    label_1000_0646_10646:
    // CALL 0x1000:cc85 (1000_0646 / 0x10646)
    NearCall(cs1, 0x649, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:0628 (1000_0649 / 0x10649)
    if(ZeroFlag) {
      goto label_1000_0628_10628;
    }
    // CLC  (1000_064B / 0x1064B)
    CarryFlag = false;
    label_1000_064C_1064C:
    // RET  (1000_064C / 0x1064C)
    return NearRet();
  }
  
  public Action load_CRYO_HNM_ida_1000_064D_1064D(int gotoTarget) {
    label_1000_064D_1064D:
    // MOV AL,0xa (1000_064D / 0x1064D)
    AL = 0xA;
    // CALL 0x1000:ad95 (1000_064F / 0x1064F)
    NearCall(cs1, 0x652, unknown_1000_AD95_1AD95);
    // MOV AX,0x16 (1000_0652 / 0x10652)
    AX = 0x16;
    // JMP 0x1000:ca1b (1000_0655 / 0x10655)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action load_CRYO2_HNM_ida_1000_0658_10658(int gotoTarget) {
    label_1000_0658_10658:
    // CALL 0x1000:c0ad (1000_0658 / 0x10658)
    NearCall(cs1, 0x65B, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AX,0x17 (1000_065B / 0x1065B)
    AX = 0x17;
    // JMP 0x1000:ca1b (1000_065E / 0x1065E)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action play_CRYO_OR_CRYO2_HNM_ida_1000_0661_10661(int gotoTarget) {
    label_1000_0661_10661:
    // CALL 0x1000:c07c (1000_0661 / 0x10661)
    NearCall(cs1, 0x664, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    label_1000_0664_10664:
    // CALL 0x1000:dd63 (1000_0664 / 0x10664)
    NearCall(cs1, 0x667, stc_on_user_input_ida_1000_DD63_1DD63);
    // JC 0x1000:064c (1000_0667 / 0x10667)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_064C / 0x1064C)
      return NearRet();
    }
    // CALL 0x1000:c9f4 (1000_0669 / 0x10669)
    NearCall(cs1, 0x66C, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4);
    // JZ 0x1000:0664 (1000_066C / 0x1066C)
    if(ZeroFlag) {
      goto label_1000_0664_10664;
    }
    // CALL 0x1000:c4cd (1000_066E / 0x1066E)
    NearCall(cs1, 0x671, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // CALL 0x1000:cc85 (1000_0671 / 0x10671)
    NearCall(cs1, 0x674, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:0664 (1000_0674 / 0x10674)
    if(ZeroFlag) {
      goto label_1000_0664_10664;
    }
    // CLC  (1000_0676 / 0x10676)
    CarryFlag = false;
    // RET  (1000_0677 / 0x10677)
    return NearRet();
  }
  
  public Action load_PRESENT_HNM_ida_1000_0678_10678(int gotoTarget) {
    label_1000_0678_10678:
    // CALL 0x1000:0579 (1000_0678 / 0x10678)
    NearCall(cs1, 0x67B, ClearGlobalVgaOffset_1000_0579_10579);
    // CALL 0x1000:c0ad (1000_067B / 0x1067B)
    NearCall(cs1, 0x67E, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AX,0x18 (1000_067E / 0x1067E)
    AX = 0x18;
    // JMP 0x1000:ca1b (1000_0681 / 0x10681)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action play_PRESENT_HNM_ida_1000_0684_10684(int gotoTarget) {
    label_1000_0684_10684:
    // JMP 0x1000:06bd (1000_0684 / 0x10684)
    // Jump converted to entry function call
    return play_hnm_skippable_ida_1000_06BD_106BD(0);
  }
  
  public Action load_INTRO_HNM_ida_1000_069E_1069E(int gotoTarget) {
    label_1000_069E_1069E:
    // CALL 0x1000:c07c (1000_069E / 0x1069E)
    NearCall(cs1, 0x6A1, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:0579 (1000_06A1 / 0x106A1)
    NearCall(cs1, 0x6A4, ClearGlobalVgaOffset_1000_0579_10579);
    // MOV AX,0xf (1000_06A4 / 0x106A4)
    AX = 0xF;
    // JMP 0x1000:ca1b (1000_06A7 / 0x106A7)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action play_hnm_86_frames_ida_1000_06AA_106AA(int gotoTarget) {
    label_1000_06AA_106AA:
    // CALL 0x1000:0579 (1000_06AA / 0x106AA)
    NearCall(cs1, 0x6AD, ClearGlobalVgaOffset_1000_0579_10579);
    // CALL 0x1000:c08e (1000_06AD / 0x106AD)
    NearCall(cs1, 0x6B0, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    label_1000_06B0_106B0:
    // CALL 0x1000:c9e8 (1000_06B0 / 0x106B0)
    NearCall(cs1, 0x6B3, hnm_do_frame_skippable_ida_1000_C9E8_1C9E8);
    // JC 0x1000:06bc (1000_06B3 / 0x106B3)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_06BC / 0x106BC)
      return NearRet();
    }
    // CMP word ptr [0xdbe8],0x56 (1000_06B5 / 0x106B5)
    Alu.Sub16(UInt16[DS, 0xDBE8], 0x56);
    // JNZ 0x1000:06b0 (1000_06BA / 0x106BA)
    if(!ZeroFlag) {
      goto label_1000_06B0_106B0;
    }
    // Function call generated as ASM continues to next function body without return
    return play_hnm_skippable_ida_1000_06BD_106BD(0x106BC - cs1 * 0x10);
  }
  
  public Action play_hnm_skippable_ida_1000_06BD_106BD(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6BD: goto label_1000_06BD_106BD;break;
      case 0x6BC: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_06BC_106BC:
    // RET  (1000_06BC / 0x106BC)
    return NearRet();
    entry:
    label_1000_06BD_106BD:
    // CALL 0x1000:0579 (1000_06BD / 0x106BD)
    NearCall(cs1, 0x6C0, ClearGlobalVgaOffset_1000_0579_10579);
    // CALL 0x1000:c08e (1000_06C0 / 0x106C0)
    NearCall(cs1, 0x6C3, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    label_1000_06C3_106C3:
    // CALL 0x1000:c9e8 (1000_06C3 / 0x106C3)
    NearCall(cs1, 0x6C6, hnm_do_frame_skippable_ida_1000_C9E8_1C9E8);
    // JC 0x1000:06bc (1000_06C6 / 0x106C6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_06BC / 0x106BC)
      return NearRet();
    }
    // CALL 0x1000:cc85 (1000_06C8 / 0x106C8)
    NearCall(cs1, 0x6CB, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:06c3 (1000_06CB / 0x106CB)
    if(ZeroFlag) {
      goto label_1000_06C3_106C3;
    }
    // RET  (1000_06CD / 0x106CD)
    return NearRet();
  }
  
  public Action spice86_label_1000_076A_1076A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x76A: goto label_1000_076A_1076A;break;
      case 0x739: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0739_10739:
    // JMP 0x1000:c2f2 (1000_0739 / 0x10739)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
    entry:
    label_1000_076A_1076A:
    // CALL 0x1000:c0ad (1000_076A / 0x1076A)
    NearCall(cs1, 0x76D, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AL,0x61 (1000_076D / 0x1076D)
    AL = 0x61;
    // JMP 0x1000:0739 (1000_076F / 0x1076F)
    // JMP target is JMP, inlining.
    // JMP 0x1000:c2f2 (1000_0739 / 0x10739)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
  }
  
  public Action spice86_label_1000_07EE_107EE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x960: goto label_1000_0960_10960;break;
      case 0x7EE: goto label_1000_07EE_107EE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_07EE_107EE:
    // MOV AX,0x30 (1000_07EE / 0x107EE)
    AX = 0x30;
    // CALL 0x1000:c13e (1000_07F1 / 0x107F1)
    NearCall(cs1, 0x7F4, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x1526 (1000_07F4 / 0x107F4)
    SI = 0x1526;
    // CALL 0x1000:c21b (1000_07F7 / 0x107F7)
    NearCall(cs1, 0x7FA, unknown_1000_C21B_1C21B);
    // JMP 0x1000:0960 (1000_07FA / 0x107FA)
    goto label_1000_0960_10960;
    label_1000_0960_10960:
    // CALL 0x1000:c412 (1000_0960 / 0x10960)
    NearCall(cs1, 0x963, unknown_1000_C412_1C412);
    // XOR DX,DX (1000_0963 / 0x10963)
    DX = 0;
    label_1000_0965_10965:
    // MOV AL,0x2d (1000_0965 / 0x10965)
    AL = 0x2D;
    // CALL 0x1000:09c7 (1000_0967 / 0x10967)
    NearCall(cs1, 0x96A, unknown_1000_09C7_109C7);
    // MOV byte ptr [0x478c],0x1 (1000_096A / 0x1096A)
    UInt8[DS, 0x478C] = 0x1;
    // JMP 0x1000:978e (1000_096F / 0x1096F)
    // Jump converted to entry function call
    return unknown_1000_978E_1978E(0);
  }
  
  public Action unknown_1000_0911_10911(int gotoTarget) {
    label_1000_0911_10911:
    // CALL 0x1000:39e6 (1000_0911 / 0x10911)
    NearCall(cs1, 0x914, unknown_1000_39E6_139E6);
    // CALL 0x1000:b930 (1000_0914 / 0x10914)
    NearCall(cs1, 0x917, unknown_1000_B930_1B930);
    // CALL 0x1000:0b21 (1000_0917 / 0x10917)
    NearCall(cs1, 0x91A, unknown_1000_0B21_10B21);
    // CALL 0x1000:9985 (1000_091A / 0x1091A)
    NearCall(cs1, 0x91D, unknown_1000_9985_19985);
    // CALL 0x1000:98e6 (1000_091D / 0x1091D)
    NearCall(cs1, 0x920, unknown_1000_98E6_198E6);
    // MOV byte ptr [0x22e3],0x1 (1000_0920 / 0x10920)
    UInt8[DS, 0x22E3] = 0x1;
    // MOV byte ptr [0x46d7],0x0 (1000_0925 / 0x10925)
    UInt8[DS, 0x46D7] = 0x0;
    // MOV SI,0x70c (1000_092A / 0x1092A)
    SI = 0x70C;
    // CALL 0x1000:da5f (1000_092D / 0x1092D)
    NearCall(cs1, 0x930, unknown_1000_DA5F_1DA5F);
    // MOV SI,0x3916 (1000_0930 / 0x10930)
    SI = 0x3916;
    // CALL 0x1000:da5f (1000_0933 / 0x10933)
    NearCall(cs1, 0x936, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:0a3e (1000_0936 / 0x10936)
    NearCall(cs1, 0x939, unknown_1000_0A3E_10A3E);
    // MOV SI,0x826 (1000_0939 / 0x10939)
    SI = 0x826;
    // JMP 0x1000:da5f (1000_093C / 0x1093C)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action LoadSceneSequenceDataIntoAXAndAdvanceSI_1000_093F_1093F(int gotoTarget) {
    label_1000_093F_1093F:
    // MOV SI,word ptr [0x4854] (1000_093F / 0x1093F)
    SI = UInt16[DS, 0x4854];
    // LODSW CS:SI (1000_0943 / 0x10943)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // Function call generated as ASM continues to next function entry point without return
    return SetSceneSequenceOffsetToSi_1000_0945_10945(0);
  }
  
  public Action SetSceneSequenceOffsetToSi_1000_0945_10945(int gotoTarget) {
    label_1000_0945_10945:
    // MOV word ptr [0x4854],SI (1000_0945 / 0x10945)
    UInt16[DS, 0x4854] = SI;
    // RET  (1000_0949 / 0x10949)
    return NearRet();
  }
  
  public Action unknown_1000_094A_1094A(int gotoTarget) {
    label_1000_094A_1094A:
    // CALL 0x1000:38b4 (1000_094A / 0x1094A)
    NearCall(cs1, 0x94D, unknown_1000_38B4_138B4);
    // MOV AX,0x2d (1000_094D / 0x1094D)
    AX = 0x2D;
    // CALL 0x1000:c13e (1000_0950 / 0x10950)
    NearCall(cs1, 0x953, open_sprite_sheet_ida_1000_C13E_1C13E);
    // XOR AX,AX (1000_0953 / 0x10953)
    AX = 0;
    // XOR DX,DX (1000_0955 / 0x10955)
    DX = 0;
    // MOV BX,0x3c (1000_0957 / 0x10957)
    BX = 0x3C;
    // JMP 0x1000:c22f (1000_095A / 0x1095A)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
  }
  
  public Action spice86_label_1000_09AD_109AD(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9AD: goto label_1000_09AD_109AD;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_09AD_109AD:
    // MOV AX,0x30 (1000_09AD / 0x109AD)
    AX = 0x30;
    // CALL 0x1000:c13e (1000_09B0 / 0x109B0)
    NearCall(cs1, 0x9B3, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x153a (1000_09B3 / 0x109B3)
    SI = 0x153A;
    // CALL 0x1000:c21b (1000_09B6 / 0x109B6)
    NearCall(cs1, 0x9B9, unknown_1000_C21B_1C21B);
    // CALL 0x1000:c412 (1000_09B9 / 0x109B9)
    NearCall(cs1, 0x9BC, unknown_1000_C412_1C412);
    // MOV AL,0x9 (1000_09BC / 0x109BC)
    AL = 0x9;
    // MOV DX,0x52 (1000_09BE / 0x109BE)
    DX = 0x52;
    // CALL 0x1000:09c7 (1000_09C1 / 0x109C1)
    NearCall(cs1, 0x9C4, unknown_1000_09C7_109C7);
    // JMP 0x1000:978e (1000_09C4 / 0x109C4)
    // Jump converted to entry function call
    return unknown_1000_978E_1978E(0);
  }
  
  public Action unknown_1000_09C7_109C7(int gotoTarget) {
    label_1000_09C7_109C7:
    // PUSH DX (1000_09C7 / 0x109C7)
    Stack.Push(DX);
    // XOR AH,AH (1000_09C8 / 0x109C8)
    AH = 0;
    // MOV [0x47c4],AX (1000_09CA / 0x109CA)
    UInt16[DS, 0x47C4] = AX;
    // CALL 0x1000:91a0 (1000_09CD / 0x109CD)
    NearCall(cs1, 0x9D0, unknown_1000_91A0_191A0);
    // MOV byte ptr [0x478c],0x1e (1000_09D0 / 0x109D0)
    UInt8[DS, 0x478C] = 0x1E;
    // MOV DI,0x1bf0 (1000_09D5 / 0x109D5)
    DI = 0x1BF0;
    // POP AX (1000_09D8 / 0x109D8)
    AX = Stack.Pop();
    // CMP word ptr [DI],AX (1000_09D9 / 0x109D9)
    Alu.Sub16(UInt16[DS, DI], AX);
    // JNC 0x1000:09ee (1000_09DB / 0x109DB)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_09EE / 0x109EE)
      return NearRet();
    }
    // ADD word ptr [DI],AX (1000_09DD / 0x109DD)
    // UInt16[DS, DI] += AX;
    UInt16[DS, DI] = Alu.Add16(UInt16[DS, DI], AX);
    // ADD word ptr [DI + 0x4],AX (1000_09DF / 0x109DF)
    // UInt16[DS, (ushort)(DI + 0x4)] += AX;
    UInt16[DS, (ushort)(DI + 0x4)] = Alu.Add16(UInt16[DS, (ushort)(DI + 0x4)], AX);
    // CMP word ptr [DI + 0x4],0x140 (1000_09E2 / 0x109E2)
    Alu.Sub16(UInt16[DS, (ushort)(DI + 0x4)], 0x140);
    // JLE 0x1000:09ee (1000_09E7 / 0x109E7)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_09EE / 0x109EE)
      return NearRet();
    }
    // MOV word ptr [DI + 0x4],0x140 (1000_09E9 / 0x109E9)
    UInt16[DS, (ushort)(DI + 0x4)] = 0x140;
    label_1000_09EE_109EE:
    // RET  (1000_09EE / 0x109EE)
    return NearRet();
  }
  
  public Action play_CREDITS_HNM_ida_1000_09EF_109EF(int gotoTarget) {
    label_1000_09EF_109EF:
    // MOV AX,0x14 (1000_09EF / 0x109EF)
    AX = 0x14;
    // JMP 0x1000:ca1b (1000_09F2 / 0x109F2)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action unknown_1000_0A16_10A16(int gotoTarget) {
    label_1000_0A16_10A16:
    // PUSH word ptr [0xdbda] (1000_0A16 / 0x10A16)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:0a23 (1000_0A1A / 0x10A1A)
    NearCall(cs1, 0xA1D, unknown_1000_0A23_10A23);
    // POP word ptr [0xdbda] (1000_0A1D / 0x10A1D)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    label_1000_0A21_10A21:
    // CLC  (1000_0A21 / 0x10A21)
    CarryFlag = false;
    // RET  (1000_0A22 / 0x10A22)
    return NearRet();
  }
  
  public Action unknown_1000_0A23_10A23(int gotoTarget) {
    label_1000_0A23_10A23:
    // CMP byte ptr [0x227d],0x0 (1000_0A23 / 0x10A23)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JZ 0x1000:0a30 (1000_0A28 / 0x10A28)
    if(ZeroFlag) {
      goto label_1000_0A30_10A30;
    }
    // CALL 0x1000:c08e (1000_0A2A / 0x10A2A)
    NearCall(cs1, 0xA2D, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // JMP 0x1000:ca60 (1000_0A2D / 0x10A2D)
    // Jump converted to entry function call
    return hnm_do_frame_ida_1000_CA60_1CA60(0);
    label_1000_0A30_10A30:
    // CALL 0x1000:c07c (1000_0A30 / 0x10A30)
    NearCall(cs1, 0xA33, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:c9f4 (1000_0A33 / 0x10A33)
    NearCall(cs1, 0xA36, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4);
    // JZ 0x1000:0a21 (1000_0A36 / 0x10A36)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_0A16_10A16(0x10A21 - cs1 * 0x10);
    }
    // CALL 0x1000:c4dd (1000_0A38 / 0x10A38)
    NearCall(cs1, 0xA3B, unknown_1000_C4DD_1C4DD);
    // JMP 0x1000:dbec (1000_0A3B / 0x10A3B)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
  }
  
  public Action unknown_1000_0A3E_10A3E(int gotoTarget) {
    label_1000_0A3E_10A3E:
    // MOV SI,0xa16 (1000_0A3E / 0x10A3E)
    SI = 0xA16;
    // JMP 0x1000:da5f (1000_0A41 / 0x10A41)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_0A44_10A44(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA44: goto label_1000_0A44_10A44;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0A44_10A44:
    // MOV AX,0x2c (1000_0A44 / 0x10A44)
    AX = 0x2C;
    // CALL 0x1000:c13e (1000_0A47 / 0x10A47)
    NearCall(cs1, 0xA4A, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:5ba8 (1000_0A4A / 0x10A4A)
    NearCall(cs1, 0xA4D, MemCopy8Bytes_1000_5BA8_15BA8);
    // CALL 0x1000:c07c (1000_0A4D / 0x10A4D)
    NearCall(cs1, 0xA50, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // PUSH CX (1000_0A50 / 0x10A50)
    Stack.Push(CX);
    // CALL 0x1000:c432 (1000_0A51 / 0x10A51)
    NearCall(cs1, 0xA54, unknown_1000_C432_1C432);
    // POP AX (1000_0A54 / 0x10A54)
    AX = Stack.Pop();
    // PUSH AX (1000_0A55 / 0x10A55)
    Stack.Push(AX);
    // MUL AL (1000_0A56 / 0x10A56)
    Cpu.Mul8(AL);
    // SHR AX,1 (1000_0A58 / 0x10A58)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV DX,AX (1000_0A5A / 0x10A5A)
    DX = AX;
    // NEG DX (1000_0A5C / 0x10A5C)
    DX = Alu.Sub16(0, DX);
    // PUSH DX (1000_0A5E / 0x10A5E)
    Stack.Push(DX);
    // XOR BX,BX (1000_0A5F / 0x10A5F)
    BX = 0;
    // XOR AX,AX (1000_0A61 / 0x10A61)
    AX = 0;
    // CALL 0x1000:c305 (1000_0A63 / 0x10A63)
    NearCall(cs1, 0xA66, unknown_1000_C305_1C305);
    // MOV AX,0x1 (1000_0A66 / 0x10A66)
    AX = 0x1;
    // ADD DX,0x130 (1000_0A69 / 0x10A69)
    // DX += 0x130;
    DX = Alu.Add16(DX, 0x130);
    // CALL 0x1000:c305 (1000_0A6D / 0x10A6D)
    NearCall(cs1, 0xA70, unknown_1000_C305_1C305);
    // MOV AX,0x2 (1000_0A70 / 0x10A70)
    AX = 0x2;
    // ADD DX,0x130 (1000_0A73 / 0x10A73)
    // DX += 0x130;
    DX = Alu.Add16(DX, 0x130);
    // CALL 0x1000:c30d (1000_0A77 / 0x10A77)
    NearCall(cs1, 0xA7A, unknown_1000_C30D_1C30D);
    // POP DX (1000_0A7A / 0x10A7A)
    DX = Stack.Pop();
    // PUSH DX (1000_0A7B / 0x10A7B)
    Stack.Push(DX);
    // SHL DX,1 (1000_0A7C / 0x10A7C)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // PUSH DX (1000_0A7E / 0x10A7E)
    Stack.Push(DX);
    // SHL DX,1 (1000_0A7F / 0x10A7F)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // ADD DX,0x45 (1000_0A81 / 0x10A81)
    // DX += 0x45;
    DX = Alu.Add16(DX, 0x45);
    // MOV AX,0x24 (1000_0A84 / 0x10A84)
    AX = 0x24;
    // MOV BX,0x4e (1000_0A87 / 0x10A87)
    BX = 0x4E;
    // CALL 0x1000:c343 (1000_0A8A / 0x10A8A)
    NearCall(cs1, 0xA8D, unknown_1000_C343_1C343);
    // POP DX (1000_0A8D / 0x10A8D)
    DX = Stack.Pop();
    // POP CX (1000_0A8E / 0x10A8E)
    CX = Stack.Pop();
    // POP AX (1000_0A8F / 0x10A8F)
    AX = Stack.Pop();
    // PUSH AX (1000_0A90 / 0x10A90)
    Stack.Push(AX);
    // PUSH CX (1000_0A91 / 0x10A91)
    Stack.Push(CX);
    // ADD DX,0x3e2 (1000_0A92 / 0x10A92)
    // DX += 0x3E2;
    DX = Alu.Add16(DX, 0x3E2);
    // CMP AX,0x14 (1000_0A96 / 0x10A96)
    Alu.Sub16(AX, 0x14);
    // JA 0x1000:0aa5 (1000_0A99 / 0x10A99)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_0AA5_10AA5;
    }
    // MOV DX,AX (1000_0A9B / 0x10A9B)
    DX = AX;
    // SHL DX,1 (1000_0A9D / 0x10A9D)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_0A9F / 0x10A9F)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // ADD DX,0xf2 (1000_0AA1 / 0x10AA1)
    // DX += 0xF2;
    DX = Alu.Add16(DX, 0xF2);
    label_1000_0AA5_10AA5:
    // SHR AX,1 (1000_0AA5 / 0x10AA5)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_0AA7 / 0x10AA7)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD AX,0x25 (1000_0AA9 / 0x10AA9)
    // AX += 0x25;
    AX = Alu.Add16(AX, 0x25);
    // MOV BX,0x67 (1000_0AAC / 0x10AAC)
    BX = 0x67;
    // CALL 0x1000:c343 (1000_0AAF / 0x10AAF)
    NearCall(cs1, 0xAB2, unknown_1000_C343_1C343);
    // POP DX (1000_0AB2 / 0x10AB2)
    DX = Stack.Pop();
    // POP AX (1000_0AB3 / 0x10AB3)
    AX = Stack.Pop();
    // NEG DX (1000_0AB4 / 0x10AB4)
    DX = Alu.Sub16(0, DX);
    // SHR DX,1 (1000_0AB6 / 0x10AB6)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (1000_0AB8 / 0x10AB8)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (1000_0ABA / 0x10ABA)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (1000_0ABC / 0x10ABC)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // ADD DX,0x80 (1000_0ABE / 0x10ABE)
    // DX += 0x80;
    DX = Alu.Add16(DX, 0x80);
    // ADD AL,0x3 (1000_0AC2 / 0x10AC2)
    // AL += 0x3;
    AL = Alu.Add8(AL, 0x3);
    // MOV BX,0x4f (1000_0AC4 / 0x10AC4)
    BX = 0x4F;
    // CALL 0x1000:c343 (1000_0AC7 / 0x10AC7)
    NearCall(cs1, 0xACA, unknown_1000_C343_1C343);
    // JMP 0x1000:c4dd (1000_0ACA / 0x10ACA)
    // Jump converted to entry function call
    return unknown_1000_C4DD_1C4DD(0);
  }
  
  public Action unknown_1000_0B21_10B21(int gotoTarget) {
    label_1000_0B21_10B21:
    // CALL 0x1000:ac30 (1000_0B21 / 0x10B21)
    NearCall(cs1, 0xB24, CallPcmFunc05_1000_AC30_1AC30);
    // MOV byte ptr CS:[0xc13c],0x25 (1000_0B24 / 0x10B24)
    UInt8[cs1, 0xC13C] = 0x25;
    // MOV SI,0xb45 (1000_0B2A / 0x10B2A)
    SI = 0xB45;
    // CALL 0x1000:da5f (1000_0B2D / 0x10B2D)
    NearCall(cs1, 0xB30, unknown_1000_DA5F_1DA5F);
    // CMP byte ptr [0x227d],0x0 (1000_0B30 / 0x10B30)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:0b3e (1000_0B35 / 0x10B35)
    if(!ZeroFlag) {
      goto label_1000_0B3E_10B3E;
    }
    // CMP byte ptr [0xfb],0x0 (1000_0B37 / 0x10B37)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:0b44 (1000_0B3C / 0x10B3C)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_0B44 / 0x10B44)
      return NearRet();
    }
    label_1000_0B3E_10B3E:
    // MOV word ptr [0x3cbe],0x0 (1000_0B3E / 0x10B3E)
    UInt16[DS, 0x3CBE] = 0x0;
    label_1000_0B44_10B44:
    // RET  (1000_0B44 / 0x10B44)
    return NearRet();
  }
  
  public Action unknown_1000_0D45_10D45(int gotoTarget) {
    label_1000_0D45_10D45:
    // CALL 0x1000:395c (1000_0D45 / 0x10D45)
    NearCall(cs1, 0xD48, unknown_1000_395C_1395C);
    // CALL 0x1000:3971 (1000_0D48 / 0x10D48)
    NearCall(cs1, 0xD4B, unknown_1000_3971_13971);
    // CALL 0x1000:39b9 (1000_0D4B / 0x10D4B)
    NearCall(cs1, 0xD4E, unknown_1000_39B9_139B9);
    // INC byte ptr [0x227d] (1000_0D4E / 0x10D4E)
    UInt8[DS, 0x227D] = Alu.Inc8(UInt8[DS, 0x227D]);
    // MOV CX,0x3 (1000_0D52 / 0x10D52)
    CX = 0x3;
    label_1000_0D55_10D55:
    // PUSH CX (1000_0D55 / 0x10D55)
    Stack.Push(CX);
    // MOV BL,0x28 (1000_0D56 / 0x10D56)
    BL = 0x28;
    // CALL 0x1000:3971 (1000_0D58 / 0x10D58)
    NearCall(cs1, 0xD5B, unknown_1000_3971_13971);
    // CALL 0x1000:398c (1000_0D5B / 0x10D5B)
    NearCall(cs1, 0xD5E, unknown_1000_398C_1398C);
    // CALL 0x1000:c0f4 (1000_0D5E / 0x10D5E)
    NearCall(cs1, 0xD61, unknown_1000_C0F4_1C0F4);
    // MOV byte ptr [0x46d7],0x20 (1000_0D61 / 0x10D61)
    UInt8[DS, 0x46D7] = 0x20;
    label_1000_0D66_10D66:
    // MOV BP,0x391d (1000_0D66 / 0x10D66)
    BP = 0x391D;
    // MOV AX,0x3 (1000_0D69 / 0x10D69)
    AX = 0x3;
    // CALL 0x1000:e353 (1000_0D6C / 0x10D6C)
    NearCall(cs1, 0xD6F, unknown_1000_E353_1E353);
    // CMP byte ptr [0x46d7],0x10 (1000_0D6F / 0x10D6F)
    Alu.Sub8(UInt8[DS, 0x46D7], 0x10);
    // JNC 0x1000:0d66 (1000_0D74 / 0x10D74)
    if(!CarryFlag) {
      goto label_1000_0D66_10D66;
    }
    // POP CX (1000_0D76 / 0x10D76)
    CX = Stack.Pop();
    // LOOP 0x1000:0d55 (1000_0D77 / 0x10D77)
    if(--CX != 0) {
      goto label_1000_0D55_10D55;
    }
    label_1000_0D79_10D79:
    // MOV BP,0x391d (1000_0D79 / 0x10D79)
    BP = 0x391D;
    // MOV AX,0x3 (1000_0D7C / 0x10D7C)
    AX = 0x3;
    // CALL 0x1000:e353 (1000_0D7F / 0x10D7F)
    NearCall(cs1, 0xD82, unknown_1000_E353_1E353);
    // CMP byte ptr [0x46d7],0x0 (1000_0D82 / 0x10D82)
    Alu.Sub8(UInt8[DS, 0x46D7], 0x0);
    // JNZ 0x1000:0d79 (1000_0D87 / 0x10D87)
    if(!ZeroFlag) {
      goto label_1000_0D79_10D79;
    }
    // DEC byte ptr [0x227d] (1000_0D89 / 0x10D89)
    UInt8[DS, 0x227D] = Alu.Dec8(UInt8[DS, 0x227D]);
    // RET  (1000_0D8D / 0x10D8D)
    return NearRet();
  }
  
  public Action unknown_1000_0D8E_10D8E(int gotoTarget) {
    label_1000_0D8E_10D8E:
    // CMP byte ptr [0x47a9],0x0 (1000_0D8E / 0x10D8E)
    Alu.Sub8(UInt8[DS, 0x47A9], 0x0);
    // JNZ 0x1000:0d9d (1000_0D93 / 0x10D93)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_0D9D / 0x10D9D)
      return NearRet();
    }
    // XOR AX,AX (1000_0D95 / 0x10D95)
    AX = 0;
    // CMP byte ptr [0x46d9],AL (1000_0D97 / 0x10D97)
    Alu.Sub8(UInt8[DS, 0x46D9], AL);
    // JNS 0x1000:0d9e (1000_0D9B / 0x10D9B)
    if(!SignFlag) {
      goto label_1000_0D9E_10D9E;
    }
    label_1000_0D9D_10D9D:
    // RET  (1000_0D9D / 0x10D9D)
    return NearRet();
    label_1000_0D9E_10D9E:
    // MOV [0x473b],AL (1000_0D9E / 0x10D9E)
    UInt8[DS, 0x473B] = AL;
    // MOV [0x46ec],AL (1000_0DA1 / 0x10DA1)
    UInt8[DS, 0x46EC] = AL;
    // CMP byte ptr [0xfb],AL (1000_0DA4 / 0x10DA4)
    Alu.Sub8(UInt8[DS, 0xFB], AL);
    // JNS 0x1000:0db0 (1000_0DA8 / 0x10DA8)
    if(!SignFlag) {
      goto label_1000_0DB0_10DB0;
    }
    // CALL 0x1000:dbb2 (1000_0DAA / 0x10DAA)
    NearCall(cs1, 0xDAD, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // JMP 0x1000:186b (1000_0DAD / 0x10DAD)
    // Jump converted to entry function call
    return unknown_1000_186B_1186B(0);
    label_1000_0DB0_10DB0:
    // CALL 0x1000:d2bd (1000_0DB0 / 0x10DB0)
    NearCall(cs1, 0xDB3, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:0d45 (1000_0DB3 / 0x10DB3)
    NearCall(cs1, 0xDB6, unknown_1000_0D45_10D45);
    // CALL 0x1000:dbb2 (1000_0DB6 / 0x10DB6)
    NearCall(cs1, 0xDB9, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:98e6 (1000_0DB9 / 0x10DB9)
    NearCall(cs1, 0xDBC, unknown_1000_98E6_198E6);
    // MOV word ptr [0x2],0x16c5 (1000_0DBC / 0x10DBC)
    UInt16[DS, 0x2] = 0x16C5;
    // CALL 0x1000:0e66 (1000_0DC2 / 0x10DC2)
    NearCall(cs1, 0xDC5, unknown_1000_0E66_10E66);
    // MOV byte ptr [0x11ca],0x1 (1000_0DC5 / 0x10DC5)
    UInt8[DS, 0x11CA] = 0x1;
    // CALL 0x1000:9f40 (1000_0DCA / 0x10DCA)
    NearCall(cs1, 0xDCD, unknown_1000_9F40_19F40);
    // MOV word ptr [0x47c4],0xffff (1000_0DCD / 0x10DCD)
    UInt16[DS, 0x47C4] = 0xFFFF;
    // MOV AL,0x80 (1000_0DD3 / 0x10DD3)
    AL = 0x80;
    // XCHG byte ptr [0x46d9],AL (1000_0DD5 / 0x10DD5)
    byte tmp_1000_0DD5 = UInt8[DS, 0x46D9];
    UInt8[DS, 0x46D9] = AL;
    AL = tmp_1000_0DD5;
    // XOR AH,AH (1000_0DD9 / 0x10DD9)
    AH = 0;
    // PUSH AX (1000_0DDB / 0x10DDB)
    Stack.Push(AX);
    // ADD AX,0xba (1000_0DDC / 0x10DDC)
    // AX += 0xBA;
    AX = Alu.Add16(AX, 0xBA);
    // CALL 0x1000:9901 (1000_0DDF / 0x10DDF)
    NearCall(cs1, 0xDE2, Set479ETo0_1000_9901_19901);
    // CALL 0x1000:88af (1000_0DE2 / 0x10DE2)
    NearCall(cs1, 0xDE5, unknown_1000_88AF_188AF);
    // CALL 0x1000:9901 (1000_0DE5 / 0x10DE5)
    NearCall(cs1, 0xDE8, Set479ETo0_1000_9901_19901);
    // MOV SI,0x2254 (1000_0DE8 / 0x10DE8)
    SI = 0x2254;
    // CALL 0x1000:7b1b (1000_0DEB / 0x10DEB)
    NearCall(cs1, 0xDEE, unknown_1000_7B1B_17B1B);
    // CALL 0x1000:da53 (1000_0DEE / 0x10DEE)
    NearCall(cs1, 0xDF1, VgaInitRelated_1000_DA53_1DA53);
    // POP AX (1000_0DF1 / 0x10DF1)
    AX = Stack.Pop();
    // MOV BX,0x225d (1000_0DF2 / 0x10DF2)
    BX = 0x225D;
    // XLAT BX (1000_0DF5 / 0x10DF5)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // OR AL,AL (1000_0DF6 / 0x10DF6)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:0e22 (1000_0DF8 / 0x10DF8)
    if(SignFlag) {
      goto label_1000_0E22_10E22;
    }
    // CALL 0x1000:91a0 (1000_0DFA / 0x10DFA)
    NearCall(cs1, 0xDFD, unknown_1000_91A0_191A0);
    // LES SI,[0xdbb0] (1000_0DFD / 0x10DFD)
    SI = UInt16[DS, 0xDBB0];
    ES = UInt16[DS, 0xDBB2];
    // LODSW ES:SI (1000_0E01 / 0x10E01)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SHR AX,1 (1000_0E03 / 0x10E03)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB AX,0x3 (1000_0E05 / 0x10E05)
    // AX -= 0x3;
    AX = Alu.Sub16(AX, 0x3);
    // MOV DX,word ptr [0x2254] (1000_0E08 / 0x10E08)
    DX = UInt16[DS, 0x2254];
    // MOV BX,word ptr [0x2256] (1000_0E0C / 0x10E0C)
    BX = UInt16[DS, 0x2256];
    // INC DX (1000_0E10 / 0x10E10)
    DX = Alu.Inc16(DX);
    // INC BX (1000_0E11 / 0x10E11)
    BX = Alu.Inc16(BX);
    // PUSH AX (1000_0E12 / 0x10E12)
    Stack.Push(AX);
    // CALL 0x1000:c2fd (1000_0E13 / 0x10E13)
    NearCall(cs1, 0xE16, unknown_1000_C2FD_1C2FD);
    // POP AX (1000_0E16 / 0x10E16)
    AX = Stack.Pop();
    // INC AX (1000_0E17 / 0x10E17)
    AX = Alu.Inc16(AX);
    // CALL 0x1000:c22f (1000_0E18 / 0x10E18)
    NearCall(cs1, 0xE1B, draw_sprite_ida_1000_C22F_1C22F);
    // CALLF [0x3935] (1000_0E1B / 0x10E1B)
    // Indirect call to [0x3935], generating possible targets from emulator records
    uint targetAddress_1000_0E1B = (uint)(UInt16[DS, 0x3937] * 0x10 + UInt16[DS, 0x3935] - cs1 * 0x10);
    switch(targetAddress_1000_0E1B) {
      case 0x23610 : FarCall(cs1, 0xE1F, unknown_334B_0160_33610);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_0E1B);
        break;
    }
    // CALL 0x1000:9efd (1000_0E1F / 0x10E1F)
    NearCall(cs1, 0xE22, unknown_1000_9EFD_19EFD);
    label_1000_0E22_10E22:
    // CALL 0x1000:c4cd (1000_0E22 / 0x10E22)
    NearCall(cs1, 0xE25, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // MOV byte ptr [0x4727],0x0 (1000_0E25 / 0x10E25)
    UInt8[DS, 0x4727] = 0x0;
    // CALL 0x1000:d741 (1000_0E2A / 0x10E2A)
    NearCall(cs1, 0xE2D, unknown_1000_D741_1D741);
    // MOV byte ptr [0x47a7],0x1 (1000_0E2D / 0x10E2D)
    UInt8[DS, 0x47A7] = 0x1;
    // MOV BP,0x20a2 (1000_0E32 / 0x10E32)
    BP = 0x20A2;
    // MOV BX,0xf66 (1000_0E35 / 0x10E35)
    BX = 0xF66;
    // CALL 0x1000:d323 (1000_0E38 / 0x10E38)
    NearCall(cs1, 0xE3B, unknown_1000_D323_1D323);
    // JMP 0x1000:dbec (1000_0E3B / 0x10E3B)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
  }
  
  public Action unknown_1000_0E66_10E66(int gotoTarget) {
    label_1000_0E66_10E66:
    // CALL 0x1000:ad5e (1000_0E66 / 0x10E66)
    NearCall(cs1, 0xE69, unknown_1000_AD5E_1AD5E);
    // MOV AX,0xc (1000_0E69 / 0x10E69)
    AX = 0xC;
    label_1000_0E6C_10E6C:
    // PUSH AX (1000_0E6C / 0x10E6C)
    Stack.Push(AX);
    // CALL 0x1000:a7a5 (1000_0E6D / 0x10E6D)
    NearCall(cs1, 0xE70, unknown_1000_A7A5_1A7A5);
    // POP AX (1000_0E70 / 0x10E70)
    AX = Stack.Pop();
    // MOV BP,0x181e (1000_0E71 / 0x10E71)
    BP = 0x181E;
    // JMP 0x1000:c8fb (1000_0E74 / 0x10E74)
    goto label_1000_C8FB_1C8FB;
    label_1000_C8FB_1C8FB:
    // CALL 0x1000:c07c (1000_C8FB / 0x1C8FB)
    NearCall(cs1, 0xC8FE, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // PUSH BP (1000_C8FE / 0x1C8FE)
    Stack.Push(BP);
    // CALL 0x1000:ca1b (1000_C8FF / 0x1C8FF)
    NearCall(cs1, 0xC902, hnm_load_ida_1000_CA1B_1CA1B);
    // CALL 0x1000:c4dd (1000_C902 / 0x1C902)
    NearCall(cs1, 0xC905, unknown_1000_C4DD_1C4DD);
    // CALL 0x1000:c0f4 (1000_C905 / 0x1C905)
    NearCall(cs1, 0xC908, unknown_1000_C0F4_1C0F4);
    // POP BP (1000_C908 / 0x1C908)
    BP = Stack.Pop();
    // CALL BP (1000_C909 / 0x1C909)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_C909 = (uint)(BP);
    switch(targetAddress_1000_C909) {
      case 0x181E : NearCall(cs1, 0xC90B, unknown_1000_181E_1181E);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C909);
        break;
    }
    label_1000_C90B_1C90B:
    // CALL 0x1000:c9f4 (1000_C90B / 0x1C90B)
    NearCall(cs1, 0xC90E, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4);
    // JZ 0x1000:c90b (1000_C90E / 0x1C90E)
    if(ZeroFlag) {
      goto label_1000_C90B_1C90B;
    }
    // CALL 0x1000:c4dd (1000_C910 / 0x1C910)
    NearCall(cs1, 0xC913, unknown_1000_C4DD_1C4DD);
    // CALL 0x1000:ace6 (1000_C913 / 0x1C913)
    NearCall(cs1, 0xC916, unknown_1000_ACE6_1ACE6);
    // CALL 0x1000:cc85 (1000_C916 / 0x1C916)
    NearCall(cs1, 0xC919, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:c90b (1000_C919 / 0x1C919)
    if(ZeroFlag) {
      goto label_1000_C90B_1C90B;
    }
    // CALL 0x1000:c412 (1000_C91B / 0x1C91B)
    NearCall(cs1, 0xC91E, unknown_1000_C412_1C412);
    // JMP 0x1000:ca01 (1000_C91E / 0x1C91E)
    // Jump converted to entry function call
    return hnm_close_resource_ida_1000_CA01_1CA01(0);
  }
  
  public Action unknown_1000_0E77_10E77(int gotoTarget) {
    label_1000_0E77_10E77:
    // CALL 0x1000:ad50 (1000_0E77 / 0x10E77)
    NearCall(cs1, 0xE7A, unknown_1000_AD50_1AD50);
    // CALL 0x1000:c07c (1000_0E7A / 0x10E7A)
    NearCall(cs1, 0xE7D, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV AX,0xb (1000_0E7D / 0x10E7D)
    AX = 0xB;
    // CALL 0x1000:ca1b (1000_0E80 / 0x10E80)
    NearCall(cs1, 0xE83, hnm_load_ida_1000_CA1B_1CA1B);
    // CALL 0x1000:c4dd (1000_0E83 / 0x10E83)
    NearCall(cs1, 0xE86, unknown_1000_C4DD_1C4DD);
    // CALL 0x1000:c0f4 (1000_0E86 / 0x10E86)
    NearCall(cs1, 0xE89, unknown_1000_C0F4_1C0F4);
    // MOV CX,0x5 (1000_0E89 / 0x10E89)
    CX = 0x5;
    label_1000_0E8C_10E8C:
    // PUSH CX (1000_0E8C / 0x10E8C)
    Stack.Push(CX);
    label_1000_0E8D_10E8D:
    // CALL 0x1000:c9f4 (1000_0E8D / 0x10E8D)
    NearCall(cs1, 0xE90, do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4);
    // JZ 0x1000:0e8d (1000_0E90 / 0x10E90)
    if(ZeroFlag) {
      goto label_1000_0E8D_10E8D;
    }
    // MOV AL,0x3c (1000_0E92 / 0x10E92)
    AL = 0x3C;
    // MOV BP,0x1797 (1000_0E94 / 0x10E94)
    BP = 0x1797;
    // CALL 0x1000:c108 (1000_0E97 / 0x10E97)
    NearCall(cs1, 0xE9A, transition_ida_1000_C108_1C108);
    // POP CX (1000_0E9A / 0x10E9A)
    CX = Stack.Pop();
    // LOOP 0x1000:0e8c (1000_0E9B / 0x10E9B)
    if(--CX != 0) {
      goto label_1000_0E8C_10E8C;
    }
    // CALL 0x1000:ca01 (1000_0E9D / 0x10E9D)
    NearCall(cs1, 0xEA0, hnm_close_resource_ida_1000_CA01_1CA01);
    // CALL 0x1000:c412 (1000_0EA0 / 0x10EA0)
    NearCall(cs1, 0xEA3, unknown_1000_C412_1C412);
    // JMP 0x1000:181e (1000_0EA3 / 0x10EA3)
    // Jump converted to entry function call
    return unknown_1000_181E_1181E(0);
  }
  
  public Action unknown_1000_0ED0_10ED0(int gotoTarget) {
    label_1000_0ED0_10ED0:
    // MOV AL,0x3b (1000_0ED0 / 0x10ED0)
    AL = 0x3B;
    // CALL 0x1000:c2f2 (1000_0ED2 / 0x10ED2)
    NearCall(cs1, 0xED5, unknown_1000_C2F2_1C2F2);
    // MOV AX,0x1 (1000_0ED5 / 0x10ED5)
    AX = 0x1;
    // CALL 0x1000:c22f (1000_0ED8 / 0x10ED8)
    NearCall(cs1, 0xEDB, draw_sprite_ida_1000_C22F_1C22F);
    // CALL 0x1000:0f08 (1000_0EDB / 0x10EDB)
    NearCall(cs1, 0xEDE, unknown_1000_0F08_10F08);
    // MOV AX,0x3b (1000_0EDE / 0x10EDE)
    AX = 0x3B;
    // CALL 0x1000:c13e (1000_0EE1 / 0x10EE1)
    NearCall(cs1, 0xEE4, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AX,0x2 (1000_0EE4 / 0x10EE4)
    AX = 0x2;
    // XOR DX,DX (1000_0EE7 / 0x10EE7)
    DX = 0;
    // XOR BX,BX (1000_0EE9 / 0x10EE9)
    BX = 0;
    // CALL 0x1000:c22f (1000_0EEB / 0x10EEB)
    NearCall(cs1, 0xEEE, draw_sprite_ida_1000_C22F_1C22F);
    // CALL 0x1000:1797 (1000_0EEE / 0x10EEE)
    NearCall(cs1, 0xEF1, unknown_1000_1797_11797);
    // MOV SI,0x1d1e (1000_0EF1 / 0x10EF1)
    SI = 0x1D1E;
    // CALL 0x1000:d72b (1000_0EF4 / 0x10EF4)
    NearCall(cs1, 0xEF7, unknown_1000_D72B_1D72B);
    // CALL 0x1000:98f5 (1000_0EF7 / 0x10EF7)
    NearCall(cs1, 0xEFA, ClearUnknownValuesAndAX_1000_98F5_198F5);
    // MOV byte ptr [0x1c06],0x80 (1000_0EFA / 0x10EFA)
    UInt8[DS, 0x1C06] = 0x80;
    // MOV BP,0x20c2 (1000_0EFF / 0x10EFF)
    BP = 0x20C2;
    // MOV BX,0xeb9 (1000_0F02 / 0x10F02)
    BX = 0xEB9;
    // JMP 0x1000:d338 (1000_0F05 / 0x10F05)
    // Jump converted to entry function call
    return unknown_1000_D338_1D338(0);
  }
  
  public Action unknown_1000_0F08_10F08(int gotoTarget) {
    label_1000_0F08_10F08:
    // TEST word ptr [0x10],0x80 (1000_0F08 / 0x10F08)
    Alu.And16(UInt16[DS, 0x10], 0x80);
    // JNZ 0x1000:0f13 (1000_0F0E / 0x10F0E)
    if(!ZeroFlag) {
      goto label_1000_0F13_10F13;
    }
    // JMP 0x1000:0960 (1000_0F10 / 0x10F10)
    // Jump converted to non entry function call
    return spice86_label_1000_07EE_107EE(0x10960 - cs1 * 0x10);
    label_1000_0F13_10F13:
    // CALL 0x1000:c412 (1000_0F13 / 0x10F13)
    NearCall(cs1, 0xF16, unknown_1000_C412_1C412);
    // MOV word ptr [0x47c4],0x7 (1000_0F16 / 0x10F16)
    UInt16[DS, 0x47C4] = 0x7;
    // CALL 0x1000:9197 (1000_0F1C / 0x10F1C)
    NearCall(cs1, 0xF1F, unknown_1000_9197_19197);
    // MOV byte ptr [0x478c],0x0 (1000_0F1F / 0x10F1F)
    UInt8[DS, 0x478C] = 0x0;
    // ADD word ptr [0x1bf2],0xf (1000_0F24 / 0x10F24)
    // UInt16[DS, 0x1BF2] += 0xF;
    UInt16[DS, 0x1BF2] = Alu.Add16(UInt16[DS, 0x1BF2], 0xF);
    // CALL 0x1000:978e (1000_0F29 / 0x10F29)
    NearCall(cs1, 0xF2C, unknown_1000_978E_1978E);
    // CALL 0x1000:998e (1000_0F2C / 0x10F2C)
    throw FailAsUntested("Could not find a valid function at address 1000_998E / 0x1998E");
    // MOV word ptr [0x22a6],0xffff (1000_0F2F / 0x10F2F)
    UInt16[DS, 0x22A6] = 0xFFFF;
    // INC byte ptr [0x47c3] (1000_0F35 / 0x10F35)
    UInt8[DS, 0x47C3] = Alu.Inc8(UInt8[DS, 0x47C3]);
    // MOV word ptr [0x47c6],0x1 (1000_0F39 / 0x10F39)
    UInt16[DS, 0x47C6] = 0x1;
    // CALL 0x1000:c412 (1000_0F3F / 0x10F3F)
    NearCall(cs1, 0xF42, unknown_1000_C412_1C412);
    // MOV DX,0x2d (1000_0F42 / 0x10F42)
    DX = 0x2D;
    // JMP 0x1000:0965 (1000_0F45 / 0x10F45)
    // Jump converted to non entry function call
    return spice86_label_1000_07EE_107EE(0x10965 - cs1 * 0x10);
  }
  
  public Action NoOp_1000_0F66_10F66(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF66: goto label_1000_0F66_10F66;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0F66_10F66:
    // RET  (1000_0F66 / 0x10F66)
    return NearRet();
  }
  
  public Action unknown_1000_0FD9_10FD9(int gotoTarget) {
    label_1000_0FD9_10FD9:
    // MOV byte ptr [0x46da],0x1 (1000_0FD9 / 0x10FD9)
    UInt8[DS, 0x46DA] = 0x1;
    // CALL 0x1000:b2be (1000_0FDE / 0x10FDE)
    NearCall(cs1, 0xFE1, SetUnknown2788To0_1000_B2BE_1B2BE);
    // OR CX,CX (1000_0FE1 / 0x10FE1)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JLE 0x1000:1005 (1000_0FE3 / 0x10FE3)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_1005_11005;
    }
    // PUSH CX (1000_0FE5 / 0x10FE5)
    Stack.Push(CX);
    // MOV AX,[0x146e] (1000_0FE6 / 0x10FE6)
    AX = UInt16[DS, 0x146E];
    // MOV [0x46db],AX (1000_0FE9 / 0x10FE9)
    UInt16[DS, 0x46DB] = AX;
    // CMP byte ptr [0x46dd],0x0 (1000_0FEC / 0x10FEC)
    Alu.Sub8(UInt8[DS, 0x46DD], 0x0);
    // JZ 0x1000:0ff6 (1000_0FF1 / 0x10FF1)
    if(ZeroFlag) {
      goto label_1000_0FF6_10FF6;
    }
    // CALL 0x1000:1b23 (1000_0FF3 / 0x10FF3)
    NearCall(cs1, 0xFF6, unknown_1000_1B23_11B23);
    label_1000_0FF6_10FF6:
    // INC word ptr [0x2] (1000_0FF6 / 0x10FF6)
    UInt16[DS, 0x2] = Alu.Inc16(UInt16[DS, 0x2]);
    // MOV byte ptr [0x46dd],0x1 (1000_0FFA / 0x10FFA)
    UInt8[DS, 0x46DD] = 0x1;
    // CALL 0x1000:1b23 (1000_0FFF / 0x10FFF)
    NearCall(cs1, 0x1002, unknown_1000_1B23_11B23);
    // POP CX (1000_1002 / 0x11002)
    CX = Stack.Pop();
    // LOOP 0x1000:0fd9 (1000_1003 / 0x11003)
    if(--CX != 0) {
      goto label_1000_0FD9_10FD9;
    }
    label_1000_1005_11005:
    // MOV byte ptr [0x46da],0x0 (1000_1005 / 0x11005)
    UInt8[DS, 0x46DA] = 0x0;
    // RET  (1000_100A / 0x1100A)
    return NearRet();
  }
  
  public Action unknown_1000_100B_1100B(int gotoTarget) {
    label_1000_100B_1100B:
    // MOV byte ptr [0x100b],0x1 (1000_100B / 0x1100B)
    UInt8[DS, 0x100B] = 0x1;
    // RET  (1000_1010 / 0x11010)
    return NearRet();
  }
  
  public Action unknown_1000_1011_11011(int gotoTarget) {
    label_1000_1011_11011:
    // DEC byte ptr [0x122a] (1000_1011 / 0x11011)
    UInt8[DS, 0x122A] = Alu.Dec8(UInt8[DS, 0x122A]);
    // MOV SI,0x1021 (1000_1015 / 0x11015)
    SI = 0x1021;
    // CALL 0x1000:105b (1000_1018 / 0x11018)
    NearCall(cs1, 0x101B, unknown_1000_105B_1105B);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_101B_1101B(0);
  }
  
  public Action unknown_1000_101B_1101B(int gotoTarget) {
    label_1000_101B_1101B:
    // MOV byte ptr [0xfe8],0x9 (1000_101B / 0x1101B)
    UInt8[DS, 0xFE8] = 0x9;
    // RET  (1000_1020 / 0x11020)
    return NearRet();
  }
  
  public Action unknown_1000_1027_11027(int gotoTarget) {
    label_1000_1027_11027:
    // AND byte ptr [0x122e],0x7f (1000_1027 / 0x11027)
    // UInt8[DS, 0x122E] &= 0x7F;
    UInt8[DS, 0x122E] = Alu.And8(UInt8[DS, 0x122E], 0x7F);
    // JMP 0x1000:2ffb (1000_102C / 0x1102C)
    // Jump converted to entry function call
    return unknown_1000_2FFB_12FFB(0);
  }
  
  public Action unknown_1000_102F_1102F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1771: goto label_1000_1771_11771;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_102F_1102F:
    // AND byte ptr [0x124a],0x7f (1000_102F / 0x1102F)
    // UInt8[DS, 0x124A] &= 0x7F;
    UInt8[DS, 0x124A] = Alu.And8(UInt8[DS, 0x124A], 0x7F);
    // AND byte ptr [0x1247],0x7f (1000_1034 / 0x11034)
    // UInt8[DS, 0x1247] &= 0x7F;
    UInt8[DS, 0x1247] = Alu.And8(UInt8[DS, 0x1247], 0x7F);
    // MOV word ptr [0x121d],0xffff (1000_1039 / 0x11039)
    UInt16[DS, 0x121D] = 0xFFFF;
    // MOV AX,0x1321 (1000_103F / 0x1103F)
    AX = 0x1321;
    // JMP 0x1000:1771 (1000_1042 / 0x11042)
    goto label_1000_1771_11771;
    label_1000_1771_11771:
    // MOV [0x477a],AX (1000_1771 / 0x11771)
    UInt16[DS, 0x477A] = AX;
    // MOV word ptr [0x4778],0x0 (1000_1774 / 0x11774)
    UInt16[DS, 0x4778] = 0x0;
    // INC byte ptr [0x4774] (1000_177A / 0x1177A)
    UInt8[DS, 0x4774] = Alu.Inc8(UInt8[DS, 0x4774]);
    // CALL 0x1000:b2b9 (1000_177E / 0x1177E)
    NearCall(cs1, 0x1781, Inc2788_1000_B2B9_1B2B9);
    // CALL 0x1000:ad5e (1000_1781 / 0x11781)
    NearCall(cs1, 0x1784, unknown_1000_AD5E_1AD5E);
    // MOV AL,[0x4] (1000_1784 / 0x11784)
    AL = UInt8[DS, 0x4];
    // MOV AH,byte ptr [0x46e0] (1000_1787 / 0x11787)
    AH = UInt8[DS, 0x46E0];
    // MOV [0x4776],AX (1000_178B / 0x1178B)
    UInt16[DS, 0x4776] = AX;
    // MOV BP,0x64 (1000_178E / 0x1178E)
    BP = 0x64;
    // MOV SI,0x176b (1000_1791 / 0x11791)
    SI = 0x176B;
    // JMP 0x1000:da25 (1000_1794 / 0x11794)
    // Jump converted to entry function call
    return unknown_1000_DA25_1DA25(0);
  }
  
  public Action unknown_1000_1045_11045(int gotoTarget) {
    switch(gotoTarget) {
      case 0x26DA: goto label_1000_26DA_126DA;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1045_11045:
    // MOV byte ptr [0xfd8],0x5 (1000_1045 / 0x11045)
    UInt8[DS, 0xFD8] = 0x5;
    // CALL 0x1000:101b (1000_104A / 0x1104A)
    NearCall(cs1, 0x104D, unknown_1000_101B_1101B);
    // MOV AX,0x10b (1000_104D / 0x1104D)
    AX = 0x10B;
    // JMP 0x1000:26da (1000_1050 / 0x11050)
    goto label_1000_26DA_126DA;
    label_1000_26DA_126DA:
    // CALL 0x1000:e270 (1000_26DA / 0x126DA)
    NearCall(cs1, 0x26DD, PushAll_1000_E270_1E270);
    // MOV CL,byte ptr [0xc8] (1000_26DD / 0x126DD)
    CL = UInt8[DS, 0xC8];
    // XOR CH,CH (1000_26E1 / 0x126E1)
    CH = 0;
    // JCXZ 0x1000:26f1 (1000_26E3 / 0x126E3)
    if(CX == 0) {
      goto label_1000_26F1_126F1;
    }
    // MOV SI,0x1179 (1000_26E5 / 0x126E5)
    SI = 0x1179;
    label_1000_26E8_126E8:
    // CMP AX,word ptr [SI] (1000_26E8 / 0x126E8)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JZ 0x1000:272b (1000_26EA / 0x126EA)
    if(ZeroFlag) {
      goto label_1000_272B_1272B;
    }
    // ADD SI,0x2 (1000_26EC / 0x126EC)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // LOOP 0x1000:26e8 (1000_26EF / 0x126EF)
    if(--CX != 0) {
      goto label_1000_26E8_126E8;
    }
    label_1000_26F1_126F1:
    // MOV CL,byte ptr [0xc8] (1000_26F1 / 0x126F1)
    CL = UInt8[DS, 0xC8];
    // MOV SI,0x1179 (1000_26F5 / 0x126F5)
    SI = 0x1179;
    // CMP CL,0xa (1000_26F8 / 0x126F8)
    Alu.Sub8(CL, 0xA);
    // JC 0x1000:2707 (1000_26FB / 0x126FB)
    if(CarryFlag) {
      goto label_1000_2707_12707;
    }
    // PUSH AX (1000_26FD / 0x126FD)
    Stack.Push(AX);
    // CALL 0x1000:272f (1000_26FE / 0x126FE)
    throw FailAsUntested("Could not find a valid function at address 1000_272F / 0x1272F");
    // MOV CL,0x9 (1000_2701 / 0x12701)
    CL = 0x9;
    // MOV SI,0x1179 (1000_2703 / 0x12703)
    SI = 0x1179;
    // POP AX (1000_2706 / 0x12706)
    AX = Stack.Pop();
    label_1000_2707_12707:
    // ADD CL,CL (1000_2707 / 0x12707)
    // CL += CL;
    CL = Alu.Add8(CL, CL);
    // XOR CH,CH (1000_2709 / 0x12709)
    CH = 0;
    // ADD SI,CX (1000_270B / 0x1270B)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV word ptr [SI],AX (1000_270D / 0x1270D)
    UInt16[DS, SI] = AX;
    // INC byte ptr [0xc8] (1000_270F / 0x1270F)
    UInt8[DS, 0xC8] = Alu.Inc8(UInt8[DS, 0xC8]);
    // INC byte ptr [0xc9] (1000_2713 / 0x12713)
    UInt8[DS, 0xC9] = Alu.Inc8(UInt8[DS, 0xC9]);
    // CMP byte ptr [0x2a],0x38 (1000_2717 / 0x12717)
    Alu.Sub8(UInt8[DS, 0x2A], 0x38);
    // JC 0x1000:272b (1000_271C / 0x1271C)
    if(CarryFlag) {
      goto label_1000_272B_1272B;
    }
    // CMP byte ptr [0xb],0x8 (1000_271E / 0x1271E)
    Alu.Sub8(UInt8[DS, 0xB], 0x8);
    // JZ 0x1000:272b (1000_2723 / 0x12723)
    if(ZeroFlag) {
      goto label_1000_272B_1272B;
    }
    // MOV AX,0x201 (1000_2725 / 0x12725)
    AX = 0x201;
    // CALL 0x1000:29ee (1000_2728 / 0x12728)
    NearCall(cs1, 0x272B, unknown_1000_29EE_129EE);
    label_1000_272B_1272B:
    // CALL 0x1000:e283 (1000_272B / 0x1272B)
    NearCall(cs1, 0x272E, PopAll_1000_E283_1E283);
    // RET  (1000_272E / 0x1272E)
    return NearRet();
  }
  
  public Action unknown_1000_1053_11053(int gotoTarget) {
    label_1000_1053_11053:
    // MOV byte ptr [0xfd8],0xa (1000_1053 / 0x11053)
    UInt8[DS, 0xFD8] = 0xA;
    // MOV SI,0x1069 (1000_1058 / 0x11058)
    SI = 0x1069;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_105B_1105B(0);
  }
  
  public Action unknown_1000_105B_1105B(int gotoTarget) {
    label_1000_105B_1105B:
    // LODSW CS:SI (1000_105B / 0x1105B)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_105D / 0x1105D)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:1068 (1000_105F / 0x1105F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1068 / 0x11068)
      return NearRet();
    }
    // MOV DI,AX (1000_1061 / 0x11061)
    DI = AX;
    // CALL 0x1000:425b (1000_1063 / 0x11063)
    NearCall(cs1, 0x1066, unknown_1000_425B_1425B);
    // JMP 0x1000:105b (1000_1066 / 0x11066)
    goto label_1000_105B_1105B;
    label_1000_1068_11068:
    // RET  (1000_1068 / 0x11068)
    return NearRet();
  }
  
  public Action unknown_1000_1071_11071(int gotoTarget) {
    label_1000_1071_11071:
    // MOV byte ptr [0xff],0x0 (1000_1071 / 0x11071)
    UInt8[DS, 0xFF] = 0x0;
    // MOV byte ptr [0x2a],0x15 (1000_1076 / 0x11076)
    UInt8[DS, 0x2A] = 0x15;
    // MOV byte ptr [0xfdb],0x1 (1000_107B / 0x1107B)
    UInt8[DS, 0xFDB] = 0x1;
    // MOV word ptr [0x1018],0x200b (1000_1080 / 0x11080)
    UInt16[DS, 0x1018] = 0x200B;
    // MOV word ptr [0x101a],0x180 (1000_1086 / 0x11086)
    UInt16[DS, 0x101A] = 0x180;
    // MOV byte ptr [0xfe8],0xa (1000_108C / 0x1108C)
    UInt8[DS, 0xFE8] = 0xA;
    // MOV byte ptr [0xd5],0xff (1000_1091 / 0x11091)
    UInt8[DS, 0xD5] = 0xFF;
    // CALL 0x1000:2090 (1000_1096 / 0x11096)
    NearCall(cs1, 0x1099, unknown_1000_2090_12090);
    // OR byte ptr [0xa],0x1 (1000_1099 / 0x11099)
    // UInt8[DS, 0xA] |= 0x1;
    UInt8[DS, 0xA] = Alu.Or8(UInt8[DS, 0xA], 0x1);
    // MOV AX,0x1 (1000_109E / 0x1109E)
    AX = 0x1;
    // JMP 0x1000:29ee (1000_10A1 / 0x110A1)
    // Jump converted to entry function call
    return unknown_1000_29EE_129EE(0);
  }
  
  public Action unknown_1000_121F_1121F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x121F: goto label_1000_121F_1121F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_121F_1121F:
    // CMP AL,byte ptr [0x2a] (1000_121F / 0x1121F)
    Alu.Sub8(AL, UInt8[DS, 0x2A]);
    // JBE 0x1000:1242 (1000_1223 / 0x11223)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_1242 / 0x11242)
      return NearRet();
    }
    // MOV [0x2a],AL (1000_1225 / 0x11225)
    UInt8[DS, 0x2A] = AL;
    // MOV byte ptr [0xff],0x0 (1000_1228 / 0x11228)
    UInt8[DS, 0xFF] = 0x0;
    // CALL 0x1000:b17a (1000_122D / 0x1122D)
    NearCall(cs1, 0x1230, unknown_1000_B17A_1B17A);
    // MOV BL,byte ptr [0x2a] (1000_1230 / 0x11230)
    BL = UInt8[DS, 0x2A];
    // CMP BL,0x6c (1000_1234 / 0x11234)
    Alu.Sub8(BL, 0x6C);
    // JA 0x1000:1242 (1000_1237 / 0x11237)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_1242 / 0x11242)
      return NearRet();
    }
    // XOR BH,BH (1000_1239 / 0x11239)
    BH = 0;
    // SHR BX,1 (1000_123B / 0x1123B)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // CALL word ptr CS:[BX + 0x11e7] (1000_123D / 0x1123D)
    // Indirect call to word ptr CS:[BX + 0x11e7], generating possible targets from emulator records
    uint targetAddress_1000_123D = (uint)(UInt16[cs1, (ushort)(BX + 0x11E7)]);
    switch(targetAddress_1000_123D) {
      case 0x1011 : NearCall(cs1, 0x1242, unknown_1000_1011_11011);
        break;
      case 0x1027 : NearCall(cs1, 0x1242, unknown_1000_1027_11027);
        break;
      case 0x102F : NearCall(cs1, 0x1242, unknown_1000_102F_1102F);
        break;
      case 0x1045 : NearCall(cs1, 0x1242, unknown_1000_1045_11045);
        break;
      case 0x1053 : NearCall(cs1, 0x1242, unknown_1000_1053_11053);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_123D);
        break;
    }
    label_1000_1242_11242:
    // RET  (1000_1242 / 0x11242)
    return NearRet();
  }
  
  public Action unknown_1000_127C_1127C(int gotoTarget) {
    label_1000_127C_1127C:
    // CMP AL,0x4 (1000_127C / 0x1127C)
    Alu.Sub8(AL, 0x4);
    // JNZ 0x1000:128d (1000_127E / 0x1127E)
    if(!ZeroFlag) {
      goto label_1000_128D_1128D;
    }
    // CMP byte ptr [0x2a],0x15 (1000_1280 / 0x11280)
    Alu.Sub8(UInt8[DS, 0x2A], 0x15);
    // JC 0x1000:128d (1000_1285 / 0x11285)
    if(CarryFlag) {
      goto label_1000_128D_1128D;
    }
    // CMP byte ptr [0x2a],0x20 (1000_1287 / 0x11287)
    Alu.Sub8(UInt8[DS, 0x2A], 0x20);
    // RET  (1000_128C / 0x1128C)
    return NearRet();
    label_1000_128D_1128D:
    // CLC  (1000_128D / 0x1128D)
    CarryFlag = false;
    // RET  (1000_128E / 0x1128E)
    return NearRet();
  }
  
  public Action unknown_1000_1392_11392(int gotoTarget) {
    label_1000_1392_11392:
    // MOV word ptr [0x2220],0x1fba (1000_1392 / 0x11392)
    UInt16[DS, 0x2220] = 0x1FBA;
    // RET  (1000_1398 / 0x11398)
    return NearRet();
  }
  
  public Action unknown_1000_1399_11399(int gotoTarget) {
    label_1000_1399_11399:
    // MOV word ptr [0x2220],0x1fae (1000_1399 / 0x11399)
    UInt16[DS, 0x2220] = 0x1FAE;
    // RET  (1000_139F / 0x1139F)
    return NearRet();
  }
  
  public Action unknown_1000_1707_11707(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9ED5: goto label_1000_9ED5_19ED5;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1707_11707:
    // CMP word ptr [0x2220],0x1fae (1000_1707 / 0x11707)
    Alu.Sub16(UInt16[DS, 0x2220], 0x1FAE);
    // JNZ 0x1000:171a (1000_170D / 0x1170D)
    if(!ZeroFlag) {
      goto label_1000_171A_1171A;
    }
    // MOV DI,0x1b56 (1000_170F / 0x1170F)
    DI = 0x1B56;
    // CALL 0x1000:d6fe (1000_1712 / 0x11712)
    NearCall(cs1, 0x1715, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:171a (1000_1715 / 0x11715)
    if(!CarryFlag) {
      goto label_1000_171A_1171A;
    }
    // JMP 0x1000:9ed5 (1000_1717 / 0x11717)
    goto label_1000_9ED5_19ED5;
    label_1000_171A_1171A:
    // MOV byte ptr [0xce9d],0x0 (1000_171A / 0x1171A)
    UInt8[DS, 0xCE9D] = 0x0;
    // MOV SI,word ptr [0x477a] (1000_171F / 0x1171F)
    SI = UInt16[DS, 0x477A];
    // LODSB CS:SI (1000_1723 / 0x11723)
    AL = UInt8[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_1725 / 0x11725)
    Alu.Sub8(AL, 0xFF);
    // JZ 0x1000:1736 (1000_1727 / 0x11727)
    if(ZeroFlag) {
      goto label_1000_1736_11736;
    }
    // MOV word ptr [0x477a],SI (1000_1729 / 0x11729)
    UInt16[DS, 0x477A] = SI;
    // XOR AH,AH (1000_172D / 0x1172D)
    AH = 0;
    // MOV BX,AX (1000_172F / 0x1172F)
    BX = AX;
    // JMP word ptr CS:[BX + 0x1475] (1000_1731 / 0x11731)
    // Indirect jump to word ptr CS:[BX + 0x1475], generating possible targets from emulator records
    uint targetAddress_1000_1731 = (uint)(UInt16[cs1, (ushort)(BX + 0x1475)]);
    switch(targetAddress_1000_1731) {
      case 0x13A0 : throw FailAsUntested("Would have been a goto but label label_1000_13A0_113A0 does not exist because no instruction was found there that belongs to a function.");
      case 0x13AA : throw FailAsUntested("Would have been a goto but label label_1000_13AA_113AA does not exist because no instruction was found there that belongs to a function.");
      case 0x13C8 : throw FailAsUntested("Would have been a goto but label label_1000_13C8_113C8 does not exist because no instruction was found there that belongs to a function.");
      case 0x1474 : throw FailAsUntested("Would have been a goto but label label_1000_1474_11474 does not exist because no instruction was found there that belongs to a function.");
      case 0x13E4 : throw FailAsUntested("Would have been a goto but label label_1000_13E4_113E4 does not exist because no instruction was found there that belongs to a function.");
      case 0x140B : throw FailAsUntested("Would have been a goto but label label_1000_140B_1140B does not exist because no instruction was found there that belongs to a function.");
      case 0x13DB : throw FailAsUntested("Would have been a goto but label label_1000_13DB_113DB does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_1731);
        break;
    }
    label_1000_1736_11736:
    // MOV SI,0x176b (1000_1736 / 0x11736)
    SI = 0x176B;
    // CALL 0x1000:da5f (1000_1739 / 0x11739)
    NearCall(cs1, 0x173C, unknown_1000_DA5F_1DA5F);
    // MOV AX,[0x4776] (1000_173C / 0x1173C)
    AX = UInt16[DS, 0x4776];
    // MOV [0x4],AL (1000_173F / 0x1173F)
    UInt8[DS, 0x4] = AL;
    // MOV byte ptr [0x46e0],AH (1000_1742 / 0x11742)
    UInt8[DS, 0x46E0] = AH;
    // XOR AL,AL (1000_1746 / 0x11746)
    AL = 0;
    // MOV [0x4774],AL (1000_1748 / 0x11748)
    UInt8[DS, 0x4774] = AL;
    // CMP byte ptr [0x2a],0x48 (1000_174B / 0x1174B)
    Alu.Sub8(UInt8[DS, 0x2A], 0x48);
    // JZ 0x1000:1755 (1000_1750 / 0x11750)
    if(ZeroFlag) {
      goto label_1000_1755_11755;
    }
    // CALL 0x1000:adbe (1000_1752 / 0x11752)
    NearCall(cs1, 0x1755, unknown_1000_ADBE_1ADBE);
    label_1000_1755_11755:
    // CALL 0x1000:b2be (1000_1755 / 0x11755)
    NearCall(cs1, 0x1758, SetUnknown2788To0_1000_B2BE_1B2BE);
    // CMP byte ptr [0xfb],0x0 (1000_1758 / 0x11758)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:1762 (1000_175D / 0x1175D)
    if(SignFlag) {
      goto label_1000_1762_11762;
    }
    // JMP 0x1000:0fa7 (1000_175F / 0x1175F)
    // Jump converted to non entry function call
    return unknown_1000_1B23_11B23(0x10FA7 - cs1 * 0x10);
    label_1000_1762_11762:
    // CALL 0x1000:ad5e (1000_1762 / 0x11762)
    NearCall(cs1, 0x1765, unknown_1000_AD5E_1AD5E);
    // CALL 0x1000:68eb (1000_1765 / 0x11765)
    NearCall(cs1, 0x1768, unknown_1000_68EB_168EB);
    // JMP 0x1000:780a (1000_1768 / 0x11768)
    // Jump converted to entry function call
    return unknown_1000_780A_1780A(0);
    label_1000_9ED5_19ED5:
    // CMP word ptr [0x47c4],0x10 (1000_9ED5 / 0x19ED5)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x10);
    // JNC 0x1000:9eeb (1000_9EDA / 0x19EDA)
    if(!CarryFlag) {
      goto label_1000_9EEB_19EEB;
    }
    // CALL 0x1000:9985 (1000_9EDC / 0x19EDC)
    NearCall(cs1, 0x9EDF, unknown_1000_9985_19985);
    // CMP byte ptr [0x47e1],0x81 (1000_9EDF / 0x19EDF)
    Alu.Sub8(UInt8[DS, 0x47E1], 0x81);
    // JNZ 0x1000:9eeb (1000_9EE4 / 0x19EE4)
    if(!ZeroFlag) {
      goto label_1000_9EEB_19EEB;
    }
    // MOV byte ptr [0x47e1],0x1 (1000_9EE6 / 0x19EE6)
    UInt8[DS, 0x47E1] = 0x1;
    label_1000_9EEB_19EEB:
    // CALL 0x1000:c85b (1000_9EEB / 0x19EEB)
    NearCall(cs1, 0x9EEE, InitDialogue_1000_C85B_1C85B);
    // MOV AL,[0x47dd] (1000_9EEE / 0x19EEE)
    AL = UInt8[DS, 0x47DD];
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9EF1_19EF1(0);
  }
  
  public Action unknown_1000_176B_1176B(int gotoTarget) {
    label_1000_176B_1176B:
    // XOR byte ptr [0x4775],0xff (1000_176B / 0x1176B)
    // UInt8[DS, 0x4775] ^= 0xFF;
    UInt8[DS, 0x4775] = Alu.Xor8(UInt8[DS, 0x4775], 0xFF);
    // RET  (1000_1770 / 0x11770)
    return NearRet();
  }
  
  public Action unknown_1000_1797_11797(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1797: goto label_1000_1797_11797;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1797_11797:
    // PUSH word ptr [0x2784] (1000_1797 / 0x11797)
    Stack.Push(UInt16[DS, 0x2784]);
    // CALL 0x1000:c137 (1000_179B / 0x1179B)
    NearCall(cs1, 0x179E, load_icons_sprites_ida_1000_C137_1C137);
    // MOV DX,0x7e (1000_179E / 0x1179E)
    DX = 0x7E;
    // MOV BX,0x94 (1000_17A1 / 0x117A1)
    BX = 0x94;
    // MOV AX,0xf (1000_17A4 / 0x117A4)
    AX = 0xF;
    // CALL 0x1000:c22f (1000_17A7 / 0x117A7)
    NearCall(cs1, 0x17AA, draw_sprite_ida_1000_C22F_1C22F);
    // MOV AX,0x10 (1000_17AA / 0x117AA)
    AX = 0x10;
    // ADD AL,byte ptr [0xe8] (1000_17AD / 0x117AD)
    // AL += UInt8[DS, 0xE8];
    AL = Alu.Add8(AL, UInt8[DS, 0xE8]);
    // MOV DX,0x96 (1000_17B1 / 0x117B1)
    DX = 0x96;
    // MOV BX,0x89 (1000_17B4 / 0x117B4)
    BX = 0x89;
    // CALL 0x1000:c22f (1000_17B7 / 0x117B7)
    NearCall(cs1, 0x17BA, draw_sprite_ida_1000_C22F_1C22F);
    // POP AX (1000_17BA / 0x117BA)
    AX = Stack.Pop();
    // JMP 0x1000:c13e (1000_17BB / 0x117BB)
    // Jump converted to entry function call
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action unknown_1000_17BE_117BE(int gotoTarget) {
    label_1000_17BE_117BE:
    // CALL 0x1000:c07c (1000_17BE / 0x117BE)
    NearCall(cs1, 0x17C1, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV SI,0x1e6e (1000_17C1 / 0x117C1)
    SI = 0x1E6E;
    // PUSH SI (1000_17C4 / 0x117C4)
    Stack.Push(SI);
    // CMP byte ptr [0xce66],0x0 (1000_17C5 / 0x117C5)
    Alu.Sub8(UInt8[DS, 0xCE66], 0x0);
    // JNZ 0x1000:17d1 (1000_17CA / 0x117CA)
    if(!ZeroFlag) {
      goto label_1000_17D1_117D1;
    }
    // CALL 0x1000:c446 (1000_17CC / 0x117CC)
    NearCall(cs1, 0x17CF, unknown_1000_C446_1C446);
    // JMP 0x1000:17df (1000_17CF / 0x117CF)
    goto label_1000_17DF_117DF;
    label_1000_17D1_117D1:
    // MOV BP,0x1e76 (1000_17D1 / 0x117D1)
    BP = 0x1E76;
    // MOV SI,0xcd9e (1000_17D4 / 0x117D4)
    SI = 0xCD9E;
    // MOV ES,word ptr [0xdbd6] (1000_17D7 / 0x117D7)
    ES = UInt16[DS, 0xDBD6];
    // CALLF [0x391d] (1000_17DB / 0x117DB)
    // Indirect call to [0x391d], generating possible targets from emulator records
    uint targetAddress_1000_17DB = (uint)(UInt16[DS, 0x391F] * 0x10 + UInt16[DS, 0x391D] - cs1 * 0x10);
    switch(targetAddress_1000_17DB) {
      case 0x235FE : FarCall(cs1, 0x17DF, unknown_334B_014E_335FE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_17DB);
        break;
    }
    label_1000_17DF_117DF:
    // CALL 0x1000:1797 (1000_17DF / 0x117DF)
    NearCall(cs1, 0x17E2, unknown_1000_1797_11797);
    // POP SI (1000_17E2 / 0x117E2)
    SI = Stack.Pop();
    // JMP 0x1000:c4f0 (1000_17E3 / 0x117E3)
    // Jump converted to entry function call
    return rect_at_si_to_regs_ida_1000_C4F0_1C4F0(0);
  }
  
  public Action unknown_1000_17E6_117E6(int gotoTarget) {
    switch(gotoTarget) {
      case 0x17E6: goto label_1000_17E6_117E6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_17E6_117E6:
    // CMP byte ptr [0x11c9],0x0 (1000_17E6 / 0x117E6)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:181d (1000_17EB / 0x117EB)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // CMP byte ptr [0xe8],0xa (1000_17ED / 0x117ED)
    Alu.Sub8(UInt8[DS, 0xE8], 0xA);
    // JZ 0x1000:181d (1000_17F2 / 0x117F2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // INC byte ptr [0xe8] (1000_17F4 / 0x117F4)
    UInt8[DS, 0xE8] = Alu.Inc8(UInt8[DS, 0xE8]);
    // CALL 0x1000:17be (1000_17F8 / 0x117F8)
    NearCall(cs1, 0x17FB, unknown_1000_17BE_117BE);
    // MOV AX,0x8 (1000_17FB / 0x117FB)
    AX = 0x8;
    // CALL 0x1000:e387 (1000_17FE / 0x117FE)
    NearCall(cs1, 0x1801, unknown_1000_E387_1E387);
    // JMP 0x1000:17e6 (1000_1801 / 0x11801)
    goto label_1000_17E6_117E6;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_1803_11803(0);
  }
  
  public Action unknown_1000_1803_11803(int gotoTarget) {
    label_1000_1803_11803:
    // CMP byte ptr [0x28e7],0x0 (1000_1803 / 0x11803)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x0);
    // JNZ 0x1000:181d (1000_1808 / 0x11808)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // CMP byte ptr [0xe8],0x0 (1000_180A / 0x1180A)
    Alu.Sub8(UInt8[DS, 0xE8], 0x0);
    // JZ 0x1000:181d (1000_180F / 0x1180F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // MOV byte ptr [0xce66],0x1 (1000_1811 / 0x11811)
    UInt8[DS, 0xCE66] = 0x1;
    // CALL 0x1000:181e (1000_1816 / 0x11816)
    NearCall(cs1, 0x1819, unknown_1000_181E_1181E);
    // DEC byte ptr [0xce66] (1000_1819 / 0x11819)
    UInt8[DS, 0xCE66] = Alu.Dec8(UInt8[DS, 0xCE66]);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_181E_1181E(0x1181D - cs1 * 0x10);
  }
  
  public Action unknown_1000_181E_1181E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x181E: goto label_1000_181E_1181E;break;
      case 0x181D: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_181D_1181D:
    // RET  (1000_181D / 0x1181D)
    return NearRet();
    entry:
    label_1000_181E_1181E:
    // CMP byte ptr [0xe8],0x0 (1000_181E / 0x1181E)
    Alu.Sub8(UInt8[DS, 0xE8], 0x0);
    // JZ 0x1000:181d (1000_1823 / 0x11823)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // DEC byte ptr [0xe8] (1000_1825 / 0x11825)
    UInt8[DS, 0xE8] = Alu.Dec8(UInt8[DS, 0xE8]);
    // CALL 0x1000:17be (1000_1829 / 0x11829)
    NearCall(cs1, 0x182C, unknown_1000_17BE_117BE);
    // MOV AX,0x8 (1000_182C / 0x1182C)
    AX = 0x8;
    // CALL 0x1000:e387 (1000_182F / 0x1182F)
    NearCall(cs1, 0x1832, unknown_1000_E387_1E387);
    // JMP 0x1000:181e (1000_1832 / 0x11832)
    goto label_1000_181E_1181E;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_1834_11834(0);
  }
  
  public Action unknown_1000_1834_11834(int gotoTarget) {
    label_1000_1834_11834:
    // MOV SI,0xcd9e (1000_1834 / 0x11834)
    SI = 0xCD9E;
    // MOV BP,0x1e76 (1000_1837 / 0x11837)
    BP = 0x1E76;
    // MOV ES,word ptr [0xdbd6] (1000_183A / 0x1183A)
    ES = UInt16[DS, 0xDBD6];
    // CALLF [0x3919] (1000_183E / 0x1183E)
    // Indirect call to [0x3919], generating possible targets from emulator records
    uint targetAddress_1000_183E = (uint)(UInt16[DS, 0x391B] * 0x10 + UInt16[DS, 0x3919] - cs1 * 0x10);
    switch(targetAddress_1000_183E) {
      case 0x235FB : FarCall(cs1, 0x1842, unknown_334B_014B_335FB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_183E);
        break;
    }
    // RET  (1000_1842 / 0x11842)
    return NearRet();
  }
  
  public Action unknown_1000_1843_11843(int gotoTarget) {
    label_1000_1843_11843:
    // CMP byte ptr [0xe8],0x0 (1000_1843 / 0x11843)
    Alu.Sub8(UInt8[DS, 0xE8], 0x0);
    // JZ 0x1000:181d (1000_1848 / 0x11848)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_181D / 0x1181D)
      return NearRet();
    }
    // MOV byte ptr [0xe8],0x9 (1000_184A / 0x1184A)
    UInt8[DS, 0xE8] = 0x9;
    // CALL 0x1000:17be (1000_184F / 0x1184F)
    NearCall(cs1, 0x1852, unknown_1000_17BE_117BE);
    // MOV AX,0x8 (1000_1852 / 0x11852)
    AX = 0x8;
    // CALL 0x1000:e387 (1000_1855 / 0x11855)
    NearCall(cs1, 0x1858, unknown_1000_E387_1E387);
    // MOV byte ptr [0xe8],0x8 (1000_1858 / 0x11858)
    UInt8[DS, 0xE8] = 0x8;
    // JMP 0x1000:17be (1000_185D / 0x1185D)
    // Jump converted to entry function call
    return unknown_1000_17BE_117BE(0);
  }
  
  public Action unknown_1000_1860_11860(int gotoTarget) {
    label_1000_1860_11860:
    // CMP byte ptr [0x11c9],0x0 (1000_1860 / 0x11860)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JZ 0x1000:1868 (1000_1865 / 0x11865)
    if(ZeroFlag) {
      goto label_1000_1868_11868;
    }
    // RET  (1000_1867 / 0x11867)
    return NearRet();
    label_1000_1868_11868:
    // CALL 0x1000:1843 (1000_1868 / 0x11868)
    NearCall(cs1, 0x186B, unknown_1000_1843_11843);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_186B_1186B(0);
  }
  
  public Action unknown_1000_186B_1186B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x186B: goto label_1000_186B_1186B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_186B_1186B:
    // CALL 0x1000:daa3 (1000_186B / 0x1186B)
    NearCall(cs1, 0x186E, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3);
    // NEG byte ptr [0xfb] (1000_186E / 0x1186E)
    UInt8[DS, 0xFB] = Alu.Sub8(0, UInt8[DS, 0xFB]);
    // JNS 0x1000:1877 (1000_1872 / 0x11872)
    if(!SignFlag) {
      goto label_1000_1877_11877;
    }
    // JMP 0x1000:5a1a (1000_1874 / 0x11874)
    // Jump converted to entry function call
    return unknown_1000_5A1A_15A1A(0);
    label_1000_1877_11877:
    // CALL 0x1000:d2bd (1000_1877 / 0x11877)
    NearCall(cs1, 0x187A, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:5adf (1000_187A / 0x1187A)
    NearCall(cs1, 0x187D, unknown_1000_5ADF_15ADF);
    // MOV AL,[0x28e8] (1000_187D / 0x1187D)
    AL = UInt8[DS, 0x28E8];
    // MOV [0x28e7],AL (1000_1880 / 0x11880)
    UInt8[DS, 0x28E7] = AL;
    // CALL 0x1000:b930 (1000_1883 / 0x11883)
    NearCall(cs1, 0x1886, unknown_1000_B930_1B930);
    // MOV word ptr [0x1c14],0x80 (1000_1886 / 0x11886)
    UInt16[DS, 0x1C14] = 0x80;
    // MOV word ptr [0x1c22],0x80 (1000_188C / 0x1188C)
    UInt16[DS, 0x1C22] = 0x80;
    // MOV BP,0xd75a (1000_1892 / 0x11892)
    BP = 0xD75A;
    // CALL 0x1000:c097 (1000_1895 / 0x11895)
    NearCall(cs1, 0x1898, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // MOV AL,0x34 (1000_1898 / 0x11898)
    AL = 0x34;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_189A_1189A(0);
  }
  
  public Action unknown_1000_189A_1189A(int gotoTarget) {
    label_1000_189A_1189A:
    // MOV BP,0x2db1 (1000_189A / 0x1189A)
    BP = 0x2DB1;
    // CMP byte ptr [0x46d9],0x0 (1000_189D / 0x1189D)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JZ 0x1000:18a6 (1000_18A2 / 0x118A2)
    if(ZeroFlag) {
      goto label_1000_18A6_118A6;
    }
    // JMP BP (1000_18A4 / 0x118A4)
    // Indirect jump to BP, generating possible targets from emulator records
    uint targetAddress_1000_18A4 = (uint)(BP);
    switch(targetAddress_1000_18A4) {
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_18A4);
        break;
    }
    label_1000_18A6_118A6:
    // XOR DX,DX (1000_18A6 / 0x118A6)
    DX = 0;
    // CALL 0x1000:c108 (1000_18A8 / 0x118A8)
    NearCall(cs1, 0x18AB, transition_ida_1000_C108_1C108);
    // CALL 0x1000:c07c (1000_18AB / 0x118AB)
    NearCall(cs1, 0x18AE, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:ae04 (1000_18AE / 0x118AE)
    NearCall(cs1, 0x18B1, unknown_1000_AE04_1AE04);
    // MOV AX,[0xce7a] (1000_18B1 / 0x118B1)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc5a],AX (1000_18B4 / 0x118B4)
    UInt16[DS, 0xDC5A] = AX;
    // JMP 0x1000:17e6 (1000_18B7 / 0x118B7)
    // Jump converted to entry function call
    return unknown_1000_17E6_117E6(0);
  }
  
  public Action unknown_1000_18BA_118BA(int gotoTarget) {
    label_1000_18BA_118BA:
    // MOV word ptr [0x1c06],0x0 (1000_18BA / 0x118BA)
    UInt16[DS, 0x1C06] = 0x0;
    // MOV word ptr [0x1c14],0x0 (1000_18C0 / 0x118C0)
    UInt16[DS, 0x1C14] = 0x0;
    // MOV word ptr [0x1c22],0x0 (1000_18C6 / 0x118C6)
    UInt16[DS, 0x1C22] = 0x0;
    // CALL 0x1000:39e6 (1000_18CC / 0x118CC)
    NearCall(cs1, 0x18CF, unknown_1000_39E6_139E6);
    // CALL 0x1000:ac30 (1000_18CF / 0x118CF)
    NearCall(cs1, 0x18D2, CallPcmFunc05_1000_AC30_1AC30);
    // CALL 0x1000:4d00 (1000_18D2 / 0x118D2)
    NearCall(cs1, 0x18D5, unknown_1000_4D00_14D00);
    // CALL 0x1000:d2bd (1000_18D5 / 0x118D5)
    NearCall(cs1, 0x18D8, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:4aca (1000_18D8 / 0x118D8)
    NearCall(cs1, 0x18DB, SetUnknown11CATo1_1000_4ACA_14ACA);
    // CALL 0x1000:98e6 (1000_18DB / 0x118DB)
    NearCall(cs1, 0x18DE, unknown_1000_98E6_198E6);
    // MOV byte ptr [0x46df],0x0 (1000_18DE / 0x118DE)
    UInt8[DS, 0x46DF] = 0x0;
    // CMP byte ptr [0x2b],0x0 (1000_18E3 / 0x118E3)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:18ed (1000_18E8 / 0x118E8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_18ED / 0x118ED)
      return NearRet();
    }
    // CALL 0x1000:0b21 (1000_18EA / 0x118EA)
    NearCall(cs1, 0x18ED, unknown_1000_0B21_10B21);
    label_1000_18ED_118ED:
    // RET  (1000_18ED / 0x118ED)
    return NearRet();
  }
  
  public Action unknown_1000_18EE_118EE(int gotoTarget) {
    label_1000_18EE_118EE:
    // CALL 0x1000:d41b (1000_18EE / 0x118EE)
    NearCall(cs1, 0x18F1, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x2012 (1000_18F1 / 0x118F1)
    Alu.Sub16(BP, 0x2012);
    // JNZ 0x1000:18fa (1000_18F5 / 0x118F5)
    if(!ZeroFlag) {
      goto label_1000_18FA_118FA;
    }
    // JMP 0x1000:d2e2 (1000_18F7 / 0x118F7)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_18FA_118FA:
    // MOV AX,[0x4] (1000_18FA / 0x118FA)
    AX = UInt16[DS, 0x4];
    // CMP AH,0x20 (1000_18FD / 0x118FD)
    Alu.Sub8(AH, 0x20);
    // JNZ 0x1000:1947 (1000_1900 / 0x11900)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1947 / 0x11947)
      return NearRet();
    }
    // CMP AL,0x1 (1000_1902 / 0x11902)
    Alu.Sub8(AL, 0x1);
    // JZ 0x1000:1947 (1000_1904 / 0x11904)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1947 / 0x11947)
      return NearRet();
    }
    // MOV AX,0x1aba (1000_1906 / 0x11906)
    AX = 0x1ABA;
    // CALL 0x1000:d95e (1000_1909 / 0x11909)
    NearCall(cs1, 0x190C, SetMapClickHandlerAddressFromAx_1000_D95E_1D95E);
    // CALL 0x1000:d2bd (1000_190C / 0x1190C)
    NearCall(cs1, 0x190F, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:c07c (1000_190F / 0x1190F)
    NearCall(cs1, 0x1912, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV SI,0x143c (1000_1912 / 0x11912)
    SI = 0x143C;
    // MOV AL,0xf1 (1000_1915 / 0x11915)
    AL = 0xF1;
    // MOV ES,word ptr [0xdbda] (1000_1917 / 0x11917)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38dd] (1000_191B / 0x1191B)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_191B = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_191B) {
      case 0x235CE : FarCall(cs1, 0x191F, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_191B);
        break;
    }
    // MOV SI,0x1444 (1000_191F / 0x1191F)
    SI = 0x1444;
    // MOV AL,0xf7 (1000_1922 / 0x11922)
    AL = 0xF7;
    // CALL 0x1000:5b6e (1000_1924 / 0x11924)
    NearCall(cs1, 0x1927, unknown_1000_5B6E_15B6E);
    // MOV AX,0x21 (1000_1927 / 0x11927)
    AX = 0x21;
    // CALL 0x1000:c13e (1000_192A / 0x1192A)
    NearCall(cs1, 0x192D, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x120b (1000_192D / 0x1192D)
    SI = 0x120B;
    // CALL 0x1000:c21b (1000_1930 / 0x11930)
    NearCall(cs1, 0x1933, unknown_1000_C21B_1C21B);
    // CALL 0x1000:1948 (1000_1933 / 0x11933)
    NearCall(cs1, 0x1936, unknown_1000_1948_11948);
    // MOV SI,0x143c (1000_1936 / 0x11936)
    SI = 0x143C;
    // MOV AL,0x10 (1000_1939 / 0x11939)
    AL = 0x10;
    // CALL 0x1000:c0d5 (1000_193B / 0x1193B)
    NearCall(cs1, 0x193E, unknown_1000_C0D5_1C0D5);
    // MOV BP,0x2012 (1000_193E / 0x1193E)
    BP = 0x2012;
    // MOV BX,0x19fc (1000_1941 / 0x11941)
    BX = 0x19FC;
    // JMP 0x1000:d323 (1000_1944 / 0x11944)
    // Jump converted to entry function call
    return unknown_1000_D323_1D323(0);
    label_1000_1947_11947:
    // RET  (1000_1947 / 0x11947)
    return NearRet();
  }
  
  public Action unknown_1000_1948_11948(int gotoTarget) {
    label_1000_1948_11948:
    // SUB SP,0x24 (1000_1948 / 0x11948)
    // SP -= 0x24;
    SP = Alu.Sub16(SP, 0x24);
    // MOV DI,SP (1000_194B / 0x1194B)
    DI = SP;
    // PUSH SS (1000_194D / 0x1194D)
    Stack.Push(SS);
    // POP ES (1000_194E / 0x1194E)
    ES = Stack.Pop();
    // MOV CX,0x24 (1000_194F / 0x1194F)
    CX = 0x24;
    // XOR AX,AX (1000_1952 / 0x11952)
    AX = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_1954 / 0x11954)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV SI,0xfd8 (1000_1956 / 0x11956)
    SI = 0xFD8;
    // MOV DI,SP (1000_1959 / 0x11959)
    DI = SP;
    // MOV CX,0x10 (1000_195B / 0x1195B)
    CX = 0x10;
    // MOV DH,byte ptr [0x7] (1000_195E / 0x1195E)
    DH = UInt8[DS, 0x7];
    label_1000_1962_11962:
    // CMP DH,byte ptr [SI + 0x3] (1000_1962 / 0x11962)
    Alu.Sub8(DH, UInt8[DS, (ushort)(SI + 0x3)]);
    // JNZ 0x1000:1980 (1000_1965 / 0x11965)
    if(!ZeroFlag) {
      goto label_1000_1980_11980;
    }
    // MOV AL,byte ptr [SI + 0xe] (1000_1967 / 0x11967)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // CALL 0x1000:127c (1000_196A / 0x1196A)
    NearCall(cs1, 0x196D, unknown_1000_127C_1127C);
    // JC 0x1000:1980 (1000_196D / 0x1196D)
    if(CarryFlag) {
      goto label_1000_1980_11980;
    }
    // MOV BX,word ptr [SI] (1000_196F / 0x1196F)
    BX = UInt16[DS, SI];
    // DEC BL (1000_1971 / 0x11971)
    BL = Alu.Dec8(BL);
    // XOR BH,BH (1000_1973 / 0x11973)
    BH = 0;
    // TEST byte ptr [SI + 0xf],0x40 (1000_1975 / 0x11975)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JZ 0x1000:197e (1000_1979 / 0x11979)
    if(ZeroFlag) {
      goto label_1000_197E_1197E;
    }
    // ADD BX,0xc (1000_197B / 0x1197B)
    // BX += 0xC;
    BX = Alu.Add16(BX, 0xC);
    label_1000_197E_1197E:
    // INC byte ptr [BX + DI] (1000_197E / 0x1197E)
    UInt8[DS, (ushort)(BX + DI)] = Alu.Inc8(UInt8[DS, (ushort)(BX + DI)]);
    label_1000_1980_11980:
    // ADD SI,0x10 (1000_1980 / 0x11980)
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // LOOP 0x1000:1962 (1000_1983 / 0x11983)
    if(--CX != 0) {
      goto label_1000_1962_11962;
    }
    // MOV BX,word ptr [0x4] (1000_1985 / 0x11985)
    BX = UInt16[DS, 0x4];
    // XOR BH,BH (1000_1989 / 0x11989)
    BH = 0;
    // CMP BL,0xc (1000_198B / 0x1198B)
    Alu.Sub8(BL, 0xC);
    // JA 0x1000:1995 (1000_198E / 0x1198E)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_1995_11995;
    }
    // ADD BL,0x17 (1000_1990 / 0x11990)
    // BL += 0x17;
    BL = Alu.Add8(BL, 0x17);
    // INC byte ptr [BX + DI] (1000_1993 / 0x11993)
    UInt8[DS, (ushort)(BX + DI)] = Alu.Inc8(UInt8[DS, (ushort)(BX + DI)]);
    label_1000_1995_11995:
    // MOV CX,0xb (1000_1995 / 0x11995)
    CX = 0xB;
    // INC DI (1000_1998 / 0x11998)
    DI = Alu.Inc16(DI);
    // MOV SI,0x1426 (1000_1999 / 0x11999)
    SI = 0x1426;
    label_1000_199C_1199C:
    // MOV DX,word ptr [0x120d] (1000_199C / 0x1199C)
    DX = UInt16[DS, 0x120D];
    // MOV BX,word ptr [0x120f] (1000_19A0 / 0x119A0)
    BX = UInt16[DS, 0x120F];
    // LODSB SI (1000_19A4 / 0x119A4)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_19A5 / 0x119A5)
    AH = 0;
    // ADD DX,AX (1000_19A7 / 0x119A7)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // LODSB SI (1000_19A9 / 0x119A9)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD BX,AX (1000_19AA / 0x119AA)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // PUSH CX (1000_19AC / 0x119AC)
    Stack.Push(CX);
    // PUSH SI (1000_19AD / 0x119AD)
    Stack.Push(SI);
    // PUSH DI (1000_19AE / 0x119AE)
    Stack.Push(DI);
    // ADD BX,0x2 (1000_19AF / 0x119AF)
    // BX += 0x2;
    BX = Alu.Add16(BX, 0x2);
    // ADD DX,0x3 (1000_19B2 / 0x119B2)
    // DX += 0x3;
    DX = Alu.Add16(DX, 0x3);
    // MOV CL,byte ptr [DI] (1000_19B5 / 0x119B5)
    CL = UInt8[DS, DI];
    // CALL 0x1000:19df (1000_19B7 / 0x119B7)
    NearCall(cs1, 0x19BA, unknown_1000_19DF_119DF);
    // ADD BX,0x7 (1000_19BA / 0x119BA)
    // BX += 0x7;
    BX = Alu.Add16(BX, 0x7);
    // MOV CL,byte ptr [DI + 0xc] (1000_19BD / 0x119BD)
    CL = UInt8[DS, (ushort)(DI + 0xC)];
    // CALL 0x1000:19df (1000_19C0 / 0x119C0)
    NearCall(cs1, 0x19C3, unknown_1000_19DF_119DF);
    // SUB BX,0x4 (1000_19C3 / 0x119C3)
    // BX -= 0x4;
    BX = Alu.Sub16(BX, 0x4);
    // ADD DX,0x9 (1000_19C6 / 0x119C6)
    // DX += 0x9;
    DX = Alu.Add16(DX, 0x9);
    // CMP byte ptr [DI + 0x18],0x0 (1000_19C9 / 0x119C9)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x18)], 0x0);
    // JZ 0x1000:19d5 (1000_19CD / 0x119CD)
    if(ZeroFlag) {
      goto label_1000_19D5_119D5;
    }
    // MOV AX,0x1 (1000_19CF / 0x119CF)
    AX = 0x1;
    // CALL 0x1000:c22f (1000_19D2 / 0x119D2)
    NearCall(cs1, 0x19D5, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_19D5_119D5:
    // POP DI (1000_19D5 / 0x119D5)
    DI = Stack.Pop();
    // POP SI (1000_19D6 / 0x119D6)
    SI = Stack.Pop();
    // POP CX (1000_19D7 / 0x119D7)
    CX = Stack.Pop();
    // INC DI (1000_19D8 / 0x119D8)
    DI = Alu.Inc16(DI);
    // LOOP 0x1000:199c (1000_19D9 / 0x119D9)
    if(--CX != 0) {
      goto label_1000_199C_1199C;
    }
    // ADD SP,0x24 (1000_19DB / 0x119DB)
    // SP += 0x24;
    SP = Alu.Add16(SP, 0x24);
    // RET  (1000_19DE / 0x119DE)
    return NearRet();
  }
  
  public Action unknown_1000_19DF_119DF(int gotoTarget) {
    label_1000_19DF_119DF:
    // XOR CH,CH (1000_19DF / 0x119DF)
    CH = 0;
    // JCXZ 0x1000:19fb (1000_19E1 / 0x119E1)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_19FB / 0x119FB)
      return NearRet();
    }
    // PUSH DX (1000_19E3 / 0x119E3)
    Stack.Push(DX);
    // PUSH DI (1000_19E4 / 0x119E4)
    Stack.Push(DI);
    // CMP CL,0x5 (1000_19E5 / 0x119E5)
    Alu.Sub8(CL, 0x5);
    // JBE 0x1000:19ec (1000_19E8 / 0x119E8)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_19EC_119EC;
    }
    // MOV CL,0x5 (1000_19EA / 0x119EA)
    CL = 0x5;
    label_1000_19EC_119EC:
    // PUSH CX (1000_19EC / 0x119EC)
    Stack.Push(CX);
    // MOV AX,0x2 (1000_19ED / 0x119ED)
    AX = 0x2;
    // CALL 0x1000:c2fd (1000_19F0 / 0x119F0)
    NearCall(cs1, 0x19F3, unknown_1000_C2FD_1C2FD);
    // POP CX (1000_19F3 / 0x119F3)
    CX = Stack.Pop();
    // ADD DX,0x4 (1000_19F4 / 0x119F4)
    // DX += 0x4;
    DX = Alu.Add16(DX, 0x4);
    // LOOP 0x1000:19ec (1000_19F7 / 0x119F7)
    if(--CX != 0) {
      goto label_1000_19EC_119EC;
    }
    // POP DI (1000_19F9 / 0x119F9)
    DI = Stack.Pop();
    // POP DX (1000_19FA / 0x119FA)
    DX = Stack.Pop();
    label_1000_19FB_119FB:
    // RET  (1000_19FB / 0x119FB)
    return NearRet();
  }
  
  public Action unknown_1000_19FC_119FC(int gotoTarget) {
    label_1000_19FC_119FC:
    // CALL 0x1000:daa3 (1000_19FC / 0x119FC)
    NearCall(cs1, 0x19FF, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3);
    // MOV SI,0x143c (1000_19FF / 0x119FF)
    SI = 0x143C;
    // PUSH SI (1000_1A02 / 0x11A02)
    Stack.Push(SI);
    // CALL 0x1000:c446 (1000_1A03 / 0x11A03)
    NearCall(cs1, 0x1A06, unknown_1000_C446_1C446);
    // POP SI (1000_1A06 / 0x11A06)
    SI = Stack.Pop();
    // MOV AL,0x12 (1000_1A07 / 0x11A07)
    AL = 0x12;
    // CALL 0x1000:c0d5 (1000_1A09 / 0x11A09)
    NearCall(cs1, 0x1A0C, unknown_1000_C0D5_1C0D5);
    // JMP 0x1000:d95b (1000_1A0C / 0x11A0C)
    // Jump converted to entry function call
    return SetMapClickHandlerAddressToInGame_1000_D95B_1D95B(0);
  }
  
  public Action unknown_1000_1A0F_11A0F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1A33: goto label_1000_1A33_11A33;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1A0F_11A0F:
    // CMP word ptr [0x1afe],0x0 (1000_1A0F / 0x11A0F)
    Alu.Sub16(UInt16[DS, 0x1AFE], 0x0);
    // JNZ 0x1000:1a33 (1000_1A14 / 0x11A14)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1A33 / 0x11A33)
      return NearRet();
    }
    // CALL 0x1000:dbb2 (1000_1A16 / 0x11A16)
    NearCall(cs1, 0x1A19, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // PUSH word ptr [0x2784] (1000_1A19 / 0x11A19)
    Stack.Push(UInt16[DS, 0x2784]);
    // CALL 0x1000:c137 (1000_1A1D / 0x11A1D)
    NearCall(cs1, 0x1A20, load_icons_sprites_ida_1000_C137_1C137);
    // MOV SI,0x1af4 (1000_1A20 / 0x11A20)
    SI = 0x1AF4;
    // CALL 0x1000:d200 (1000_1A23 / 0x11A23)
    NearCall(cs1, 0x1A26, unknown_1000_D200_1D200);
    // CALL 0x1000:1a34 (1000_1A26 / 0x11A26)
    NearCall(cs1, 0x1A29, unknown_1000_1A34_11A34);
    // MOV SI,0x1f06 (1000_1A29 / 0x11A29)
    SI = 0x1F06;
    // CALL 0x1000:c4aa (1000_1A2C / 0x11A2C)
    NearCall(cs1, 0x1A2F, gfx_copy_rect_to_screen_ida_1000_C4AA_1C4AA);
    // POP AX (1000_1A2F / 0x11A2F)
    AX = Stack.Pop();
    // CALL 0x1000:c13e (1000_1A30 / 0x11A30)
    NearCall(cs1, 0x1A33, open_sprite_sheet_ida_1000_C13E_1C13E);
    label_1000_1A33_11A33:
    // RET  (1000_1A33 / 0x11A33)
    return NearRet();
  }
  
  public Action unknown_1000_1A34_11A34(int gotoTarget) {
    label_1000_1A34_11A34:
    // CMP word ptr [0x1afe],0x0 (1000_1A34 / 0x11A34)
    Alu.Sub16(UInt16[DS, 0x1AFE], 0x0);
    // JNZ 0x1000:1a33 (1000_1A39 / 0x11A39)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1A33 / 0x11A33)
      return NearRet();
    }
    // PUSH word ptr [0xdbda] (1000_1A3B / 0x11A3B)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_1A3F / 0x11A3F)
    NearCall(cs1, 0x1A42, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV AX,[0x2] (1000_1A42 / 0x11A42)
    AX = UInt16[DS, 0x2];
    // AND AX,0xf (1000_1A45 / 0x11A45)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // SHL AX,1 (1000_1A48 / 0x11A48)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_1A4A / 0x11A4A)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_1A4C / 0x11A4C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD AX,0x1e7e (1000_1A4E / 0x11A4E)
    // AX += 0x1E7E;
    AX = Alu.Add16(AX, 0x1E7E);
    // MOV SI,AX (1000_1A51 / 0x11A51)
    SI = AX;
    // MOV AX,0x4a (1000_1A53 / 0x11A53)
    AX = 0x4A;
    // CALL 0x1000:1a9b (1000_1A56 / 0x11A56)
    NearCall(cs1, 0x1A59, unknown_1000_1A9B_11A9B);
    // MOV AX,0x4b (1000_1A59 / 0x11A59)
    AX = 0x4B;
    // CALL 0x1000:1a9b (1000_1A5C / 0x11A5C)
    NearCall(cs1, 0x1A5F, unknown_1000_1A9B_11A9B);
    // CALL 0x1000:d075 (1000_1A5F / 0x11A5F)
    NearCall(cs1, 0x1A62, SetFontToMenu_1000_D075_1D075);
    // MOV word ptr [0xdbe4],0xf1fa (1000_1A62 / 0x11A62)
    UInt16[DS, 0xDBE4] = 0xF1FA;
    // CALL 0x1000:1ad1 (1000_1A68 / 0x11A68)
    NearCall(cs1, 0x1A6B, GetSunlightDay_1000_1AD1_11AD1);
    // MOV BX,0x16d (1000_1A6B / 0x11A6B)
    BX = 0x16D;
    // ADD AX,BX (1000_1A6E / 0x11A6E)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    label_1000_1A70_11A70:
    // SUB AX,BX (1000_1A70 / 0x11A70)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,BX (1000_1A72 / 0x11A72)
    Alu.Sub16(AX, BX);
    // JNC 0x1000:1a70 (1000_1A74 / 0x11A74)
    if(!CarryFlag) {
      goto label_1000_1A70_11A70;
    }
    // INC AX (1000_1A76 / 0x11A76)
    AX = Alu.Inc16(AX);
    // MOV DX,0xb (1000_1A77 / 0x11A77)
    DX = 0xB;
    // MOV BX,0xbe (1000_1A7A / 0x11A7A)
    BX = 0xBE;
    // CMP AX,0x64 (1000_1A7D / 0x11A7D)
    Alu.Sub16(AX, 0x64);
    // JNC 0x1000:1a8d (1000_1A80 / 0x11A80)
    if(!CarryFlag) {
      goto label_1000_1A8D_11A8D;
    }
    // SUB DL,0x2 (1000_1A82 / 0x11A82)
    // DL -= 0x2;
    DL = Alu.Sub8(DL, 0x2);
    // CMP AX,0xa (1000_1A85 / 0x11A85)
    Alu.Sub16(AX, 0xA);
    // JNC 0x1000:1a8d (1000_1A88 / 0x11A88)
    if(!CarryFlag) {
      goto label_1000_1A8D_11A8D;
    }
    // SUB DL,0x2 (1000_1A8A / 0x11A8A)
    // DL -= 0x2;
    DL = Alu.Sub8(DL, 0x2);
    label_1000_1A8D_11A8D:
    // CALL 0x1000:e290 (1000_1A8D / 0x11A8D)
    NearCall(cs1, 0x1A90, unknown_1000_E290_1E290);
    // MOV AL,0x20 (1000_1A90 / 0x11A90)
    AL = 0x20;
    // CALL word ptr [0x2518] (1000_1A92 / 0x11A92)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_1A92 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_1A92) {
      case 0xD12F : NearCall(cs1, 0x1A96, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_1A92);
        break;
    }
    // POP word ptr [0xdbda] (1000_1A96 / 0x11A96)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_1A9A / 0x11A9A)
    return NearRet();
  }
  
  public Action unknown_1000_1A9B_11A9B(int gotoTarget) {
    label_1000_1A9B_11A9B:
    // PUSH AX (1000_1A9B / 0x11A9B)
    Stack.Push(AX);
    // LODSW SI (1000_1A9C / 0x11A9C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_1A9D / 0x11A9D)
    DX = AX;
    // LODSW SI (1000_1A9F / 0x11A9F)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_1AA0 / 0x11AA0)
    BX = AX;
    // POP AX (1000_1AA2 / 0x11AA2)
    AX = Stack.Pop();
    // OR DX,DX (1000_1AA3 / 0x11AA3)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:1ac4 (1000_1AA5 / 0x11AA5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1AC4 / 0x11AC4)
      return NearRet();
    }
    // PUSH SI (1000_1AA7 / 0x11AA7)
    Stack.Push(SI);
    // CALL 0x1000:c1f4 (1000_1AA8 / 0x11AA8)
    NearCall(cs1, 0x1AAB, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // PUSH DS (1000_1AAB / 0x11AAB)
    Stack.Push(DS);
    // PUSH ES (1000_1AAC / 0x11AAC)
    Stack.Push(ES);
    // MOV ES,word ptr [0xdbd8] (1000_1AAD / 0x11AAD)
    ES = UInt16[DS, 0xDBD8];
    // POP DS (1000_1AB1 / 0x11AB1)
    DS = Stack.Pop();
    // LODSW SI (1000_1AB2 / 0x11AB2)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_1AB3 / 0x11AB3)
    DI = AX;
    // LODSW SI (1000_1AB5 / 0x11AB5)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_1AB6 / 0x11AB6)
    CX = AX;
    // XOR CH,CH (1000_1AB8 / 0x11AB8)
    CH = 0;
    // MOV BP,0x1efe (1000_1ABA / 0x11ABA)
    BP = 0x1EFE;
    // CALLF [0x38cd] (1000_1ABD / 0x11ABD)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_1ABD = (uint)(UInt16[SS, 0x38CF] * 0x10 + UInt16[SS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_1ABD) {
      case 0x235C2 : FarCall(cs1, 0x1AC2, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_1ABD);
        break;
    }
    // POP DS (1000_1AC2 / 0x11AC2)
    DS = Stack.Pop();
    // POP SI (1000_1AC3 / 0x11AC3)
    SI = Stack.Pop();
    label_1000_1AC4_11AC4:
    // RET  (1000_1AC4 / 0x11AC4)
    return NearRet();
  }
  
  public Action unknown_1000_1AC5_11AC5(int gotoTarget) {
    label_1000_1AC5_11AC5:
    // MOV AX,[0x2] (1000_1AC5 / 0x11AC5)
    AX = UInt16[DS, 0x2];
    // SHR AX,1 (1000_1AC8 / 0x11AC8)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1ACA / 0x11ACA)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1ACC / 0x11ACC)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1ACE / 0x11ACE)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // RET  (1000_1AD0 / 0x11AD0)
    return NearRet();
  }
  
  public Action GetSunlightDay_1000_1AD1_11AD1(int gotoTarget) {
    label_1000_1AD1_11AD1:
    // MOV AX,[0x2] (1000_1AD1 / 0x11AD1)
    AX = UInt16[DS, 0x2];
    // ADD AX,0x3 (1000_1AD4 / 0x11AD4)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (1000_1AD7 / 0x11AD7)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1AD9 / 0x11AD9)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1ADB / 0x11ADB)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_1ADD / 0x11ADD)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // RET  (1000_1ADF / 0x11ADF)
    return NearRet();
  }
  
  public Action SetHourOfTheDayToAX_1000_1AE0_11AE0(int gotoTarget) {
    label_1000_1AE0_11AE0:
    // MOV AX,[0x2] (1000_1AE0 / 0x11AE0)
    AX = UInt16[DS, 0x2];
    // AND AX,0xf (1000_1AE3 / 0x11AE3)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // RET  (1000_1AE6 / 0x11AE6)
    return NearRet();
  }
  
  public Action unknown_1000_1AE7_11AE7(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1B0C: goto label_1000_1B0C_11B0C;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1AE7_11AE7:
    // CALL 0x1000:d41b (1000_1AE7 / 0x11AE7)
    NearCall(cs1, 0x1AEA, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1f7e (1000_1AEA / 0x11AEA)
    Alu.Sub16(BP, 0x1F7E);
    // JNZ 0x1000:1b0c (1000_1AEE / 0x11AEE)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // MOV AX,[0xce7a] (1000_1AF0 / 0x11AF0)
    AX = UInt16[DS, 0xCE7A];
    // CMP AX,word ptr [0x4770] (1000_1AF3 / 0x11AF3)
    Alu.Sub16(AX, UInt16[DS, 0x4770]);
    // JZ 0x1000:1b0c (1000_1AF7 / 0x11AF7)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // MOV [0x4770],AX (1000_1AF9 / 0x11AF9)
    UInt16[DS, 0x4770] = AX;
    // SUB AX,word ptr [0x476e] (1000_1AFC / 0x11AFC)
    // AX -= UInt16[DS, 0x476E];
    AX = Alu.Sub16(AX, UInt16[DS, 0x476E]);
    // CMP AX,word ptr [0x4772] (1000_1B00 / 0x11B00)
    Alu.Sub16(AX, UInt16[DS, 0x4772]);
    // JC 0x1000:1b0c (1000_1B04 / 0x11B04)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // CALL 0x1000:c85b (1000_1B06 / 0x11B06)
    NearCall(cs1, 0x1B09, InitDialogue_1000_C85B_1C85B);
    // CALL 0x1000:c868 (1000_1B09 / 0x11B09)
    NearCall(cs1, 0x1B0C, unknown_1000_C868_1C868);
    label_1000_1B0C_11B0C:
    // RET  (1000_1B0C / 0x11B0C)
    return NearRet();
  }
  
  public Action unknown_1000_1B0D_11B0D(int gotoTarget) {
    label_1000_1B0D_11B0D:
    // CALL 0x1000:abcc (1000_1B0D / 0x11B0D)
    NearCall(cs1, 0x1B10, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:1b0c (1000_1B10 / 0x11B10)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // CMP byte ptr [0x2788],0x0 (1000_1B12 / 0x11B12)
    Alu.Sub8(UInt8[DS, 0x2788], 0x0);
    // JNZ 0x1000:1b0c (1000_1B17 / 0x11B17)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // CMP byte ptr [0x2a],0xc8 (1000_1B19 / 0x11B19)
    Alu.Sub8(UInt8[DS, 0x2A], 0xC8);
    // JNC 0x1000:1b0c (1000_1B1E / 0x11B1E)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // CALL 0x1000:2b2a (1000_1B20 / 0x11B20)
    NearCall(cs1, 0x1B23, unknown_1000_2B2A_12B2A);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_1B23_11B23(0);
  }
  
  public Action unknown_1000_1B23_11B23(int gotoTarget) {
    switch(gotoTarget) {
      case 0xFA7: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0FA7_10FA7:
    // CALL 0x1000:dbb2 (1000_0FA7 / 0x10FA7)
    NearCall(cs1, 0xFAA, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // MOV AL,0x2a (1000_0FAA / 0x10FAA)
    AL = 0x2A;
    // CALL 0x1000:189a (1000_0FAC / 0x10FAC)
    NearCall(cs1, 0xFAF, unknown_1000_189A_1189A);
    // JMP 0x1000:d763 (1000_0FAF / 0x10FAF)
    // Jump converted to entry function call
    return unknown_1000_D763_1D763(0);
    entry:
    label_1000_1B23_11B23:
    // CMP byte ptr [0x46dd],0x0 (1000_1B23 / 0x11B23)
    Alu.Sub8(UInt8[DS, 0x46DD], 0x0);
    // JZ 0x1000:1b0c (1000_1B28 / 0x11B28)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1B0C / 0x11B0C)
      return NearRet();
    }
    // MOV byte ptr [0x46dd],0x0 (1000_1B2A / 0x11B2A)
    UInt8[DS, 0x46DD] = 0x0;
    // MOV AL,[0xf4] (1000_1B2F / 0x11B2F)
    AL = UInt8[DS, 0xF4];
    // DEC AL (1000_1B32 / 0x11B32)
    AL = Alu.Dec8(AL);
    // CMP AL,0x10 (1000_1B34 / 0x11B34)
    Alu.Sub8(AL, 0x10);
    // JGE 0x1000:1b3d (1000_1B36 / 0x11B36)
    if(SignFlag == OverflowFlag) {
      goto label_1000_1B3D_11B3D;
    }
    // XOR AL,AL (1000_1B38 / 0x11B38)
    AL = 0;
    // MOV [0xf5],AL (1000_1B3A / 0x11B3A)
    UInt8[DS, 0xF5] = AL;
    label_1000_1B3D_11B3D:
    // MOV [0xf4],AL (1000_1B3D / 0x11B3D)
    UInt8[DS, 0xF4] = AL;
    // CALL 0x1000:1a0f (1000_1B40 / 0x11B40)
    NearCall(cs1, 0x1B43, unknown_1000_1A0F_11A0F);
    // CALL 0x1000:38e1 (1000_1B43 / 0x11B43)
    NearCall(cs1, 0x1B46, unknown_1000_38E1_138E1);
    // MOV AX,[0x2] (1000_1B46 / 0x11B46)
    AX = UInt16[DS, 0x2];
    // MOV CX,AX (1000_1B49 / 0x11B49)
    CX = AX;
    // XCHG word ptr [0x1174],AX (1000_1B4B / 0x11B4B)
    ushort tmp_1000_1B4B = UInt16[DS, 0x1174];
    UInt16[DS, 0x1174] = AX;
    AX = tmp_1000_1B4B;
    // AND AL,0xf0 (1000_1B4F / 0x11B4F)
    // AL &= 0xF0;
    AL = Alu.And8(AL, 0xF0);
    // AND CL,0xf0 (1000_1B51 / 0x11B51)
    // CL &= 0xF0;
    CL = Alu.And8(CL, 0xF0);
    // SUB AL,CL (1000_1B54 / 0x11B54)
    // AL -= CL;
    AL = Alu.Sub8(AL, CL);
    // MOV [0x46de],AL (1000_1B56 / 0x11B56)
    UInt8[DS, 0x46DE] = AL;
    // JZ 0x1000:1b5e (1000_1B59 / 0x11B59)
    if(ZeroFlag) {
      goto label_1000_1B5E_11B5E;
    }
    // CALL 0x1000:1c46 (1000_1B5B / 0x11B5B)
    NearCall(cs1, 0x1B5E, unknown_1000_1C46_11C46);
    label_1000_1B5E_11B5E:
    // CMP byte ptr [0xc2],0x7 (1000_1B5E / 0x11B5E)
    Alu.Sub8(UInt8[DS, 0xC2], 0x7);
    // JNC 0x1000:1bb2 (1000_1B63 / 0x11B63)
    if(!CarryFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CALL 0x1000:1d9f (1000_1B65 / 0x11B65)
    NearCall(cs1, 0x1B68, unknown_1000_1D9F_11D9F);
    // PUSH word ptr [0x11f7] (1000_1B68 / 0x11B68)
    Stack.Push(UInt16[DS, 0x11F7]);
    // PUSH word ptr [0x11ce] (1000_1B6C / 0x11B6C)
    Stack.Push(UInt16[DS, 0x11CE]);
    // CALL 0x1000:6c6f (1000_1B70 / 0x11B70)
    NearCall(cs1, 0x1B73, unknown_1000_6C6F_16C6F);
    // CALL 0x1000:63f0 (1000_1B73 / 0x11B73)
    NearCall(cs1, 0x1B76, map_func_qq_ida_1000_63F0_163F0);
    // CALL 0x1000:1ae0 (1000_1B76 / 0x11B76)
    NearCall(cs1, 0x1B79, SetHourOfTheDayToAX_1000_1AE0_11AE0);
    // SHL AX,1 (1000_1B79 / 0x11B79)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,AX (1000_1B7B / 0x11B7B)
    SI = AX;
    // CALL word ptr CS:[SI + 0x1db3] (1000_1B7D / 0x11B7D)
    // Indirect call to word ptr CS:[SI + 0x1db3], generating possible targets from emulator records
    uint targetAddress_1000_1B7D = (uint)(UInt16[cs1, (ushort)(SI + 0x1DB3)]);
    switch(targetAddress_1000_1B7D) {
      case 0x1DD4 : NearCall(cs1, 0x1B82, unknown_1000_1DD4_11DD4);
        break;
      case 0x1DD7 : NearCall(cs1, 0x1B82, unknown_1000_1DD7_11DD7);
        break;
      case 0x1DD3 : NearCall(cs1, 0x1B82, unknown_1000_1DD3_11DD3);
        break;
      case 0x1DDA : NearCall(cs1, 0x1B82, unknown_1000_1DDA_11DDA);
        break;
      case 0x1DFE : NearCall(cs1, 0x1B82, unknown_1000_1DFE_11DFE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_1B7D);
        break;
    }
    // CALL 0x1000:1c18 (1000_1B82 / 0x11B82)
    NearCall(cs1, 0x1B85, unknown_1000_1C18_11C18);
    // POP DI (1000_1B85 / 0x11B85)
    DI = Stack.Pop();
    // CALL 0x1000:331e (1000_1B86 / 0x11B86)
    NearCall(cs1, 0x1B89, unknown_1000_331E_1331E);
    // POP word ptr [0x11f7] (1000_1B89 / 0x11B89)
    UInt16[DS, 0x11F7] = Stack.Pop();
    // CALL 0x1000:1bec (1000_1B8D / 0x11B8D)
    NearCall(cs1, 0x1B90, unknown_1000_1BEC_11BEC);
    // CMP byte ptr [0x46d9],0x0 (1000_1B90 / 0x11B90)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JNZ 0x1000:1bb2 (1000_1B95 / 0x11B95)
    if(!ZeroFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CMP byte ptr [0x46ec],0x0 (1000_1B97 / 0x11B97)
    Alu.Sub8(UInt8[DS, 0x46EC], 0x0);
    // JZ 0x1000:1ba1 (1000_1B9C / 0x11B9C)
    if(ZeroFlag) {
      goto label_1000_1BA1_11BA1;
    }
    // CALL 0x1000:5d6d (1000_1B9E / 0x11B9E)
    NearCall(cs1, 0x1BA1, unknown_1000_5D6D_15D6D);
    label_1000_1BA1_11BA1:
    // MOV DI,word ptr [0x114e] (1000_1BA1 / 0x11BA1)
    DI = UInt16[DS, 0x114E];
    // OR DI,DI (1000_1BA5 / 0x11BA5)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:1bb2 (1000_1BA7 / 0x11BA7)
    if(ZeroFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CMP byte ptr [0x473b],0x0 (1000_1BA9 / 0x11BA9)
    Alu.Sub8(UInt8[DS, 0x473B], 0x0);
    // JS 0x1000:1bd2 (1000_1BAE / 0x11BAE)
    if(SignFlag) {
      goto label_1000_1BD2_11BD2;
    }
    // JA 0x1000:1bb8 (1000_1BB0 / 0x11BB0)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_1BB8_11BB8;
    }
    label_1000_1BB2_11BB2:
    // MOV byte ptr [0x473b],0x0 (1000_1BB2 / 0x11BB2)
    UInt8[DS, 0x473B] = 0x0;
    // RET  (1000_1BB7 / 0x11BB7)
    return NearRet();
    label_1000_1BB8_11BB8:
    // CMP byte ptr [0xfb],0x0 (1000_1BB8 / 0x11BB8)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:1bb2 (1000_1BBD / 0x11BBD)
    if(SignFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CMP byte ptr [0x46da],0x0 (1000_1BBF / 0x11BBF)
    Alu.Sub8(UInt8[DS, 0x46DA], 0x0);
    // JNZ 0x1000:1bb2 (1000_1BC4 / 0x11BC4)
    if(!ZeroFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CALL 0x1000:dbb2 (1000_1BC6 / 0x11BC6)
    NearCall(cs1, 0x1BC9, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:1bb2 (1000_1BC9 / 0x11BC9)
    throw FailAsUntested("Could not find a valid function at address 1000_1BB2 / 0x11BB2");
    // CALL 0x1000:0b21 (1000_1BCC / 0x11BCC)
    NearCall(cs1, 0x1BCF, unknown_1000_0B21_10B21);
    // JMP 0x1000:2db1 (1000_1BCF / 0x11BCF)
    // Jump converted to entry function call
    return unknown_1000_2DB1_12DB1(0);
    label_1000_1BD2_11BD2:
    // CALL 0x1000:1bb2 (1000_1BD2 / 0x11BD2)
    throw FailAsUntested("Could not find a valid function at address 1000_1BB2 / 0x11BB2");
    // CMP byte ptr [0xfb],0x0 (1000_1BD5 / 0x11BD5)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:1be9 (1000_1BDA / 0x11BDA)
    if(SignFlag) {
      // JS target is JMP, inlining.
      // JMP 0x1000:5d6d (1000_1BE9 / 0x11BE9)
      // Jump converted to entry function call
      return unknown_1000_5D6D_15D6D(0);
    }
    // CMP byte ptr [0x46da],0x0 (1000_1BDC / 0x11BDC)
    Alu.Sub8(UInt8[DS, 0x46DA], 0x0);
    // JNZ 0x1000:1bb2 (1000_1BE1 / 0x11BE1)
    if(!ZeroFlag) {
      goto label_1000_1BB2_11BB2;
    }
    // CALL 0x1000:d2bd (1000_1BE3 / 0x11BE3)
    NearCall(cs1, 0x1BE6, unknown_1000_D2BD_1D2BD);
    // JMP 0x1000:0fa7 (1000_1BE6 / 0x11BE6)
    goto label_1000_0FA7_10FA7;
    label_1000_1BE9_11BE9:
    // JMP 0x1000:5d6d (1000_1BE9 / 0x11BE9)
    // Jump converted to entry function call
    return unknown_1000_5D6D_15D6D(0);
  }
  
  public Action unknown_1000_1BEC_11BEC(int gotoTarget) {
    label_1000_1BEC_11BEC:
    // CMP byte ptr [0x2b],0x0 (1000_1BEC / 0x11BEC)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:1c17 (1000_1BF1 / 0x11BF1)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1C17 / 0x11C17)
      return NearRet();
    }
    // MOV DI,word ptr [0x114e] (1000_1BF3 / 0x11BF3)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:503c (1000_1BF7 / 0x11BF7)
    NearCall(cs1, 0x1BFA, unknown_1000_503C_1503C);
    // CMP byte ptr [0x46d9],0x0 (1000_1BFA / 0x11BFA)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JZ 0x1000:1c06 (1000_1BFF / 0x11BFF)
    if(ZeroFlag) {
      goto label_1000_1C06_11C06;
    }
    // MOV byte ptr [0x46d9],0x6 (1000_1C01 / 0x11C01)
    UInt8[DS, 0x46D9] = 0x6;
    label_1000_1C06_11C06:
    // CMP byte ptr [0x2b],0x0 (1000_1C06 / 0x11C06)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:1c17 (1000_1C0B / 0x11C0B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1C17 / 0x11C17)
      return NearRet();
    }
    // PUSH DI (1000_1C0D / 0x11C0D)
    Stack.Push(DI);
    // CALL 0x1000:0b21 (1000_1C0E / 0x11C0E)
    NearCall(cs1, 0x1C11, unknown_1000_0B21_10B21);
    // POP DI (1000_1C11 / 0x11C11)
    DI = Stack.Pop();
    // OR byte ptr [0x473b],0x1 (1000_1C12 / 0x11C12)
    // UInt8[DS, 0x473B] |= 0x1;
    UInt8[DS, 0x473B] = Alu.Or8(UInt8[DS, 0x473B], 0x1);
    label_1000_1C17_11C17:
    // RET  (1000_1C17 / 0x11C17)
    return NearRet();
  }
  
  public Action unknown_1000_1C18_11C18(int gotoTarget) {
    label_1000_1C18_11C18:
    // CMP byte ptr [0x46eb],0x0 (1000_1C18 / 0x11C18)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNS 0x1000:1c39 (1000_1C1D / 0x11C1D)
    if(!SignFlag) {
      goto label_1000_1C39_11C39;
    }
    // CALL 0x1000:c13b (1000_1C1F / 0x11C1F)
    NearCall(cs1, 0x1C22, unknown_1000_C13B_1C13B);
    // MOV SI,word ptr [0x46fa] (1000_1C22 / 0x11C22)
    SI = UInt16[DS, 0x46FA];
    // OR SI,SI (1000_1C26 / 0x11C26)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:1c2d (1000_1C28 / 0x11C28)
    if(ZeroFlag) {
      goto label_1000_1C2D_11C2D;
    }
    // CALL 0x1000:78e9 (1000_1C2A / 0x11C2A)
    throw FailAsUntested("Could not find a valid function at address 1000_78E9 / 0x178E9");
    label_1000_1C2D_11C2D:
    // MOV DI,word ptr [0x46f8] (1000_1C2D / 0x11C2D)
    DI = UInt16[DS, 0x46F8];
    // OR DI,DI (1000_1C31 / 0x11C31)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:1c38 (1000_1C33 / 0x11C33)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1C38 / 0x11C38)
      return NearRet();
    }
    // CALL 0x1000:600e (1000_1C35 / 0x11C35)
    NearCall(cs1, 0x1C38, unknown_1000_600E_1600E);
    label_1000_1C38_11C38:
    // RET  (1000_1C38 / 0x11C38)
    return NearRet();
    label_1000_1C39_11C39:
    // JNZ 0x1000:1c45 (1000_1C39 / 0x11C39)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1C45 / 0x11C45)
      return NearRet();
    }
    // CMP byte ptr [0xfb],0x0 (1000_1C3B / 0x11C3B)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JNS 0x1000:1c45 (1000_1C40 / 0x11C40)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_1C45 / 0x11C45)
      return NearRet();
    }
    // CALL 0x1000:bdbb (1000_1C42 / 0x11C42)
    NearCall(cs1, 0x1C45, unknown_1000_BDBB_1BDBB);
    label_1000_1C45_11C45:
    // RET  (1000_1C45 / 0x11C45)
    return NearRet();
  }
  
  public Action unknown_1000_1C46_11C46(int gotoTarget) {
    label_1000_1C46_11C46:
    // MOV AL,[0x2a] (1000_1C46 / 0x11C46)
    AL = UInt8[DS, 0x2A];
    // MOV AH,AL (1000_1C49 / 0x11C49)
    AH = AL;
    // XCHG byte ptr [0xfe],AL (1000_1C4B / 0x11C4B)
    byte tmp_1000_1C4B = UInt8[DS, 0xFE];
    UInt8[DS, 0xFE] = AL;
    AL = tmp_1000_1C4B;
    // CMP AL,AH (1000_1C4F / 0x11C4F)
    Alu.Sub8(AL, AH);
    // JZ 0x1000:1c58 (1000_1C51 / 0x11C51)
    if(ZeroFlag) {
      goto label_1000_1C58_11C58;
    }
    // MOV byte ptr [0xff],0x0 (1000_1C53 / 0x11C53)
    UInt8[DS, 0xFF] = 0x0;
    label_1000_1C58_11C58:
    // INC byte ptr [0xff] (1000_1C58 / 0x11C58)
    UInt8[DS, 0xFF] = Alu.Inc8(UInt8[DS, 0xFF]);
    // CALL 0x1000:1d66 (1000_1C5C / 0x11C5C)
    NearCall(cs1, 0x1C5F, unknown_1000_1D66_11D66);
    // CALL 0x1000:1e43 (1000_1C5F / 0x11C5F)
    NearCall(cs1, 0x1C62, unknown_1000_1E43_11E43);
    // MOV AL,[0xd5] (1000_1C62 / 0x11C62)
    AL = UInt8[DS, 0xD5];
    // INC AL (1000_1C65 / 0x11C65)
    AL = Alu.Inc8(AL);
    // CMP AL,0x2 (1000_1C67 / 0x11C67)
    Alu.Sub8(AL, 0x2);
    // JC 0x1000:1c6e (1000_1C69 / 0x11C69)
    if(CarryFlag) {
      goto label_1000_1C6E_11C6E;
    }
    // MOV [0xd5],AL (1000_1C6B / 0x11C6B)
    UInt8[DS, 0xD5] = AL;
    label_1000_1C6E_11C6E:
    // XOR AX,AX (1000_1C6E / 0x11C6E)
    AX = 0;
    // XCHG word ptr [0x1172],AX (1000_1C70 / 0x11C70)
    ushort tmp_1000_1C70 = UInt16[DS, 0x1172];
    UInt16[DS, 0x1172] = AX;
    AX = tmp_1000_1C70;
    // MOV BX,word ptr [0xa0] (1000_1C74 / 0x11C74)
    BX = UInt16[DS, 0xA0];
    // ADD AX,BX (1000_1C78 / 0x11C78)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // XCHG word ptr [0x1170],BX (1000_1C7A / 0x11C7A)
    ushort tmp_1000_1C7A = UInt16[DS, 0x1170];
    UInt16[DS, 0x1170] = BX;
    BX = tmp_1000_1C7A;
    // SUB AX,BX (1000_1C7E / 0x11C7E)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JNC 0x1000:1c84 (1000_1C80 / 0x11C80)
    if(!CarryFlag) {
      goto label_1000_1C84_11C84;
    }
    // XOR AX,AX (1000_1C82 / 0x11C82)
    AX = 0;
    label_1000_1C84_11C84:
    // MOV [0xa6],AX (1000_1C84 / 0x11C84)
    UInt16[DS, 0xA6] = AX;
    // XCHG word ptr [0xae],AX (1000_1C87 / 0x11C87)
    ushort tmp_1000_1C87 = UInt16[DS, 0xAE];
    UInt16[DS, 0xAE] = AX;
    AX = tmp_1000_1C87;
    // XOR BX,BX (1000_1C8B / 0x11C8B)
    BX = 0;
    // SUB AX,word ptr [0xa6] (1000_1C8D / 0x11C8D)
    // AX -= UInt16[DS, 0xA6];
    AX = Alu.Sub16(AX, UInt16[DS, 0xA6]);
    // JNC 0x1000:1c96 (1000_1C91 / 0x11C91)
    if(!CarryFlag) {
      goto label_1000_1C96_11C96;
    }
    // NEG AX (1000_1C93 / 0x11C93)
    AX = Alu.Sub16(0, AX);
    // XCHG AX,BX (1000_1C95 / 0x11C95)
    ushort tmp_1000_1C95 = AX;
    AX = BX;
    BX = tmp_1000_1C95;
    label_1000_1C96_11C96:
    // MOV [0xb2],AX (1000_1C96 / 0x11C96)
    UInt16[DS, 0xB2] = AX;
    // MOV word ptr [0xb0],BX (1000_1C99 / 0x11C99)
    UInt16[DS, 0xB0] = BX;
    // CALL 0x1000:1cda (1000_1C9D / 0x11C9D)
    NearCall(cs1, 0x1CA0, unknown_1000_1CDA_11CDA);
    // CALL 0x1000:c02e (1000_1CA0 / 0x11CA0)
    NearCall(cs1, 0x1CA3, unknown_1000_C02E_1C02E);
    // CALL 0x1000:bf26 (1000_1CA3 / 0x11CA3)
    NearCall(cs1, 0x1CA6, unknown_1000_BF26_1BF26);
    // CALL 0x1000:e3cc (1000_1CA6 / 0x11CA6)
    NearCall(cs1, 0x1CA9, unknown_1000_E3CC_1E3CC);
    // MOV BX,AX (1000_1CA9 / 0x11CA9)
    BX = AX;
    // MOV SI,0x10d8 (1000_1CAB / 0x11CAB)
    SI = 0x10D8;
    label_1000_1CAE_11CAE:
    // TEST byte ptr [SI + 0x2],0x8 (1000_1CAE / 0x11CAE)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x2)], 0x8);
    // JZ 0x1000:1cd1 (1000_1CB2 / 0x11CB2)
    if(ZeroFlag) {
      goto label_1000_1CD1_11CD1;
    }
    // MOV BP,0x4 (1000_1CB4 / 0x11CB4)
    BP = 0x4;
    label_1000_1CB7_11CB7:
    // CMP byte ptr [BP + SI + 0x4],0x0 (1000_1CB7 / 0x11CB7)
    Alu.Sub8(UInt8[SS, (ushort)(BP + SI + 0x4)], 0x0);
    // JNZ 0x1000:1cce (1000_1CBB / 0x11CBB)
    if(!ZeroFlag) {
      goto label_1000_1CCE_11CCE;
    }
    // CMP byte ptr [BP + SI + 0x9],0x0 (1000_1CBD / 0x11CBD)
    Alu.Sub8(UInt8[SS, (ushort)(BP + SI + 0x9)], 0x0);
    // JNS 0x1000:1cce (1000_1CC1 / 0x11CC1)
    if(!SignFlag) {
      goto label_1000_1CCE_11CCE;
    }
    // ROL BX,1 (1000_1CC3 / 0x11CC3)
    BX = Alu.Rol16(BX, 1);
    // ROL BX,1 (1000_1CC5 / 0x11CC5)
    BX = Alu.Rol16(BX, 1);
    // MOV AL,BL (1000_1CC7 / 0x11CC7)
    AL = BL;
    // AND AL,0x3 (1000_1CC9 / 0x11CC9)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // MOV byte ptr [BP + SI + 0x4],AL (1000_1CCB / 0x11CCB)
    UInt8[SS, (ushort)(BP + SI + 0x4)] = AL;
    label_1000_1CCE_11CCE:
    // DEC BP (1000_1CCE / 0x11CCE)
    BP = Alu.Dec16(BP);
    // JNS 0x1000:1cb7 (1000_1CCF / 0x11CCF)
    if(!SignFlag) {
      goto label_1000_1CB7_11CB7;
    }
    label_1000_1CD1_11CD1:
    // ADD SI,0x11 (1000_1CD1 / 0x11CD1)
    // SI += 0x11;
    SI = Alu.Add16(SI, 0x11);
    // CMP byte ptr [SI],0x14 (1000_1CD4 / 0x11CD4)
    Alu.Sub8(UInt8[DS, SI], 0x14);
    // JC 0x1000:1cae (1000_1CD7 / 0x11CD7)
    if(CarryFlag) {
      goto label_1000_1CAE_11CAE;
    }
    // RET  (1000_1CD9 / 0x11CD9)
    return NearRet();
  }
  
  public Action unknown_1000_1CDA_11CDA(int gotoTarget) {
    label_1000_1CDA_11CDA:
    // MOV DI,0x100 (1000_1CDA / 0x11CDA)
    DI = 0x100;
    // XOR CX,CX (1000_1CDD / 0x11CDD)
    CX = 0;
    // XOR DX,DX (1000_1CDF / 0x11CDF)
    DX = 0;
    label_1000_1CE1_11CE1:
    // CALL 0x1000:5d36 (1000_1CE1 / 0x11CE1)
    NearCall(cs1, 0x1CE4, unknown_1000_5D36_15D36);
    // JC 0x1000:1cf4 (1000_1CE4 / 0x11CE4)
    if(CarryFlag) {
      goto label_1000_1CF4_11CF4;
    }
    // INC DX (1000_1CE6 / 0x11CE6)
    DX = Alu.Inc16(DX);
    // MOV AL,byte ptr [DI + 0x12] (1000_1CE7 / 0x11CE7)
    AL = UInt8[DS, (ushort)(DI + 0x12)];
    // SHR AL,1 (1000_1CEA / 0x11CEA)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_1CEC / 0x11CEC)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_1CEE / 0x11CEE)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // XOR AH,AH (1000_1CF0 / 0x11CF0)
    AH = 0;
    // ADD CX,AX (1000_1CF2 / 0x11CF2)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    label_1000_1CF4_11CF4:
    // ADD DI,0x1c (1000_1CF4 / 0x11CF4)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP byte ptr [DI],0xff (1000_1CF7 / 0x11CF7)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JNZ 0x1000:1ce1 (1000_1CFA / 0x11CFA)
    if(!ZeroFlag) {
      goto label_1000_1CE1_11CE1;
    }
    // MOV BX,CX (1000_1CFC / 0x11CFC)
    BX = CX;
    // SHR BX,1 (1000_1CFE / 0x11CFE)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_1D00 / 0x11D00)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_1D02 / 0x11D02)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_1D04 / 0x11D04)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // CALL 0x1000:e3df (1000_1D06 / 0x11D06)
    NearCall(cs1, 0x1D09, unknown_1000_E3DF_1E3DF);
    // ADD CX,AX (1000_1D09 / 0x11D09)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // MOV word ptr [0xa8],CX (1000_1D0B / 0x11D0B)
    UInt16[DS, 0xA8] = CX;
    // RET  (1000_1D0F / 0x11D0F)
    return NearRet();
  }
  
  public Action spice86_label_1000_1D10_11D10(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1D10: goto label_1000_1D10_11D10;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1D10_11D10:
    // ROL word ptr [0x0],1 (1000_1D10 / 0x11D10)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // JNC 0x1000:1d34 (1000_1D14 / 0x11D14)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_1D34 / 0x11D34)
      return NearRet();
    }
    // MOV SI,0x8aa (1000_1D16 / 0x11D16)
    SI = 0x8AA;
    label_1000_1D19_11D19:
    // TEST byte ptr [SI + 0x10],0x80 (1000_1D19 / 0x11D19)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JZ 0x1000:1d2b (1000_1D1D / 0x11D1D)
    if(ZeroFlag) {
      goto label_1000_1D2B_11D2B;
    }
    // MOV AL,byte ptr [SI + 0x1a] (1000_1D1F / 0x11D1F)
    AL = UInt8[DS, (ushort)(SI + 0x1A)];
    // DEC AL (1000_1D22 / 0x11D22)
    AL = Alu.Dec8(AL);
    // CMP AL,0xc7 (1000_1D24 / 0x11D24)
    Alu.Sub8(AL, 0xC7);
    // JNC 0x1000:1d2b (1000_1D26 / 0x11D26)
    if(!CarryFlag) {
      goto label_1000_1D2B_11D2B;
    }
    // INC byte ptr [SI + 0x1a] (1000_1D28 / 0x11D28)
    UInt8[DS, (ushort)(SI + 0x1A)] = Alu.Inc8(UInt8[DS, (ushort)(SI + 0x1A)]);
    label_1000_1D2B_11D2B:
    // ADD SI,0x1b (1000_1D2B / 0x11D2B)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfa0 (1000_1D2E / 0x11D2E)
    Alu.Sub16(SI, 0xFA0);
    // JC 0x1000:1d19 (1000_1D32 / 0x11D32)
    if(CarryFlag) {
      goto label_1000_1D19_11D19;
    }
    label_1000_1D34_11D34:
    // RET  (1000_1D34 / 0x11D34)
    return NearRet();
  }
  
  public Action unknown_1000_1D66_11D66(int gotoTarget) {
    label_1000_1D66_11D66:
    // MOV SI,0xfd8 (1000_1D66 / 0x11D66)
    SI = 0xFD8;
    // MOV CX,0xc (1000_1D69 / 0x11D69)
    CX = 0xC;
    label_1000_1D6C_11D6C:
    // MOV AX,word ptr [SI + 0x2] (1000_1D6C / 0x11D6C)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // CMP AL,0x80 (1000_1D6F / 0x11D6F)
    Alu.Sub8(AL, 0x80);
    // JNZ 0x1000:1d99 (1000_1D71 / 0x11D71)
    if(!ZeroFlag) {
      goto label_1000_1D99_11D99;
    }
    // CMP AH,0xff (1000_1D73 / 0x11D73)
    Alu.Sub8(AH, 0xFF);
    // JZ 0x1000:1d99 (1000_1D76 / 0x11D76)
    if(ZeroFlag) {
      goto label_1000_1D99_11D99;
    }
    // MOV AL,0x1c (1000_1D78 / 0x11D78)
    AL = 0x1C;
    // MUL AH (1000_1D7A / 0x11D7A)
    Cpu.Mul8(AH);
    // ADD AX,0xe4 (1000_1D7C / 0x11D7C)
    // AX += 0xE4;
    AX = Alu.Add16(AX, 0xE4);
    // MOV DI,AX (1000_1D7F / 0x11D7F)
    DI = AX;
    // MOV AX,word ptr [SI] (1000_1D81 / 0x11D81)
    AX = UInt16[DS, SI];
    // MOV BL,byte ptr [DI + 0x8] (1000_1D83 / 0x11D83)
    BL = UInt8[DS, (ushort)(DI + 0x8)];
    // CMP AH,BL (1000_1D86 / 0x11D86)
    Alu.Sub8(AH, BL);
    // JNZ 0x1000:1d93 (1000_1D88 / 0x11D88)
    if(!ZeroFlag) {
      goto label_1000_1D93_11D93;
    }
    // XOR BH,BH (1000_1D8A / 0x11D8A)
    BH = 0;
    // CMP AL,byte ptr CS:[BX + 0x1d35] (1000_1D8C / 0x11D8C)
    Alu.Sub8(AL, UInt8[cs1, (ushort)(BX + 0x1D35)]);
    // JBE 0x1000:1d99 (1000_1D91 / 0x11D91)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_1D99_11D99;
    }
    label_1000_1D93_11D93:
    // MOV AH,BL (1000_1D93 / 0x11D93)
    AH = BL;
    // MOV AL,0x1 (1000_1D95 / 0x11D95)
    AL = 0x1;
    // MOV word ptr [SI],AX (1000_1D97 / 0x11D97)
    UInt16[DS, SI] = AX;
    label_1000_1D99_11D99:
    // ADD SI,0x10 (1000_1D99 / 0x11D99)
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // LOOP 0x1000:1d6c (1000_1D9C / 0x11D9C)
    if(--CX != 0) {
      goto label_1000_1D6C_11D6C;
    }
    // RET  (1000_1D9E / 0x11D9E)
    return NearRet();
  }
  
  public Action unknown_1000_1D9F_11D9F(int gotoTarget) {
    label_1000_1D9F_11D9F:
    // TEST word ptr [0x12],0x80 (1000_1D9F / 0x11D9F)
    Alu.And16(UInt16[DS, 0x12], 0x80);
    // JNZ 0x1000:1db2 (1000_1DA5 / 0x11DA5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1DB2 / 0x11DB2)
      return NearRet();
    }
    // MOV SI,0x1048 (1000_1DA7 / 0x11DA7)
    SI = 0x1048;
    // CALL 0x1000:1e01 (1000_1DAA / 0x11DAA)
    NearCall(cs1, 0x1DAD, unknown_1000_1E01_11E01);
    // JNC 0x1000:1db2 (1000_1DAD / 0x11DAD)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_1DB2 / 0x11DB2)
      return NearRet();
    }
    // CALL 0x1000:1eda (1000_1DAF / 0x11DAF)
    throw FailAsUntested("Could not find a valid function at address 1000_1EDA / 0x11EDA");
    label_1000_1DB2_11DB2:
    // RET  (1000_1DB2 / 0x11DB2)
    return NearRet();
  }
  
  public Action unknown_1000_1DD3_11DD3(int gotoTarget) {
    label_1000_1DD3_11DD3:
    // RET  (1000_1DD3 / 0x11DD3)
    return NearRet();
  }
  
  public Action unknown_1000_1DD4_11DD4(int gotoTarget) {
    label_1000_1DD4_11DD4:
    // JMP 0x1000:20a4 (1000_1DD4 / 0x11DD4)
    // Jump converted to entry function call
    return spice86_label_1000_20A4_120A4(0);
  }
  
  public Action unknown_1000_1DD7_11DD7(int gotoTarget) {
    label_1000_1DD7_11DD7:
    // JMP 0x1000:1f64 (1000_1DD7 / 0x11DD7)
    // Jump converted to entry function call
    return spice86_label_1000_1F64_11F64(0);
  }
  
  public Action unknown_1000_1DDA_11DDA(int gotoTarget) {
    label_1000_1DDA_11DDA:
    // TEST byte ptr [0xbf],0x10 (1000_1DDA / 0x11DDA)
    Alu.And8(UInt8[DS, 0xBF], 0x10);
    // JZ 0x1000:1dfd (1000_1DDF / 0x11DDF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1DFD / 0x11DFD)
      return NearRet();
    }
    // TEST word ptr [0x10],0x8 (1000_1DE1 / 0x11DE1)
    Alu.And16(UInt16[DS, 0x10], 0x8);
    // JNZ 0x1000:1dfd (1000_1DE7 / 0x11DE7)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1DFD / 0x11DFD)
      return NearRet();
    }
    // CMP byte ptr [0xb],0x8 (1000_1DE9 / 0x11DE9)
    Alu.Sub8(UInt8[DS, 0xB], 0x8);
    // JZ 0x1000:1dfd (1000_1DEE / 0x11DEE)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1DFD / 0x11DFD)
      return NearRet();
    }
    // CMP byte ptr [0xc2],0x0 (1000_1DF0 / 0x11DF0)
    Alu.Sub8(UInt8[DS, 0xC2], 0x0);
    // JNZ 0x1000:1dfd (1000_1DF5 / 0x11DF5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1DFD / 0x11DFD)
      return NearRet();
    }
    // MOV AX,0x30b (1000_1DF7 / 0x11DF7)
    AX = 0x30B;
    // CALL 0x1000:29ee (1000_1DFA / 0x11DFA)
    NearCall(cs1, 0x1DFD, unknown_1000_29EE_129EE);
    label_1000_1DFD_11DFD:
    // RET  (1000_1DFD / 0x11DFD)
    return NearRet();
  }
  
  public Action unknown_1000_1DFE_11DFE(int gotoTarget) {
    label_1000_1DFE_11DFE:
    // JMP 0x1000:1d10 (1000_1DFE / 0x11DFE)
    // Jump converted to entry function call
    return spice86_label_1000_1D10_11D10(0);
  }
  
  public Action unknown_1000_1E01_11E01(int gotoTarget) {
    label_1000_1E01_11E01:
    // CMP byte ptr [0x2a],0x5d (1000_1E01 / 0x11E01)
    Alu.Sub8(UInt8[DS, 0x2A], 0x5D);
    // JNZ 0x1000:1e3e (1000_1E06 / 0x11E06)
    if(!ZeroFlag) {
      goto label_1000_1E3E_11E3E;
    }
    // CMP byte ptr [SI + 0xe],0x7 (1000_1E08 / 0x11E08)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0xE)], 0x7);
    // JNZ 0x1000:1e3e (1000_1E0C / 0x11E0C)
    if(!ZeroFlag) {
      goto label_1000_1E3E_11E3E;
    }
    // MOV BX,word ptr [SI + 0x2] (1000_1E0E / 0x11E0E)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // CMP BL,0x80 (1000_1E11 / 0x11E11)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:1e3e (1000_1E14 / 0x11E14)
    if(!ZeroFlag) {
      goto label_1000_1E3E_11E3E;
    }
    // MOV byte ptr [SI],0x2 (1000_1E16 / 0x11E16)
    UInt8[DS, SI] = 0x2;
    // JNZ 0x1000:1e3e (1000_1E19 / 0x11E19)
    if(!ZeroFlag) {
      goto label_1000_1E3E_11E3E;
    }
    // MOV AL,0x1c (1000_1E1B / 0x11E1B)
    AL = 0x1C;
    // MUL BH (1000_1E1D / 0x11E1D)
    Cpu.Mul8(BH);
    // ADD AX,0xe4 (1000_1E1F / 0x11E1F)
    // AX += 0xE4;
    AX = Alu.Add16(AX, 0xE4);
    // MOV DI,AX (1000_1E22 / 0x11E22)
    DI = AX;
    label_1000_1E24_11E24:
    // MOV AL,byte ptr [DI + 0x9] (1000_1E24 / 0x11E24)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // OR AL,AL (1000_1E27 / 0x11E27)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:1e3e (1000_1E29 / 0x11E29)
    if(ZeroFlag) {
      goto label_1000_1E3E_11E3E;
    }
    // PUSH SI (1000_1E2B / 0x11E2B)
    Stack.Push(SI);
    label_1000_1E2C_11E2C:
    // CALL 0x1000:6906 (1000_1E2C / 0x11E2C)
    NearCall(cs1, 0x1E2F, unknown_1000_6906_16906);
    // TEST word ptr [SI + 0x12],0x400 (1000_1E2F / 0x11E2F)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x400);
    // JNZ 0x1000:1e40 (1000_1E34 / 0x11E34)
    if(!ZeroFlag) {
      goto label_1000_1E40_11E40;
    }
    // MOV AL,byte ptr [SI + 0x1] (1000_1E36 / 0x11E36)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // OR AL,AL (1000_1E39 / 0x11E39)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:1e2c (1000_1E3B / 0x11E3B)
    if(!ZeroFlag) {
      goto label_1000_1E2C_11E2C;
    }
    // POP SI (1000_1E3D / 0x11E3D)
    SI = Stack.Pop();
    label_1000_1E3E_11E3E:
    // CLC  (1000_1E3E / 0x11E3E)
    CarryFlag = false;
    // RET  (1000_1E3F / 0x11E3F)
    return NearRet();
    label_1000_1E40_11E40:
    // POP SI (1000_1E40 / 0x11E40)
    SI = Stack.Pop();
    // STC  (1000_1E41 / 0x11E41)
    CarryFlag = true;
    // RET  (1000_1E42 / 0x11E42)
    return NearRet();
  }
  
  public Action unknown_1000_1E43_11E43(int gotoTarget) {
    label_1000_1E43_11E43:
    // CALL 0x1000:1ac5 (1000_1E43 / 0x11E43)
    NearCall(cs1, 0x1E46, unknown_1000_1AC5_11AC5);
    // CMP AX,word ptr [0x1156] (1000_1E46 / 0x11E46)
    Alu.Sub16(AX, UInt16[DS, 0x1156]);
    // JC 0x1000:1ea8 (1000_1E4A / 0x11E4A)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_1EA8 / 0x11EA8)
      return NearRet();
    }
    // CMP byte ptr [0x2a],0x5c (1000_1E4C / 0x11E4C)
    Alu.Sub8(UInt8[DS, 0x2A], 0x5C);
    // JNZ 0x1000:1ea8 (1000_1E51 / 0x11E51)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1EA8 / 0x11EA8)
      return NearRet();
    }
    // CMP word ptr [0x114e],0x7c8 (1000_1E53 / 0x11E53)
    Alu.Sub16(UInt16[DS, 0x114E], 0x7C8);
    // JZ 0x1000:1ea8 (1000_1E59 / 0x11E59)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1EA8 / 0x11EA8)
      return NearRet();
    }
    // MOV DI,0x100 (1000_1E5B / 0x11E5B)
    DI = 0x100;
    // XOR CX,CX (1000_1E5E / 0x11E5E)
    CX = 0;
    label_1000_1E60_11E60:
    // CMP byte ptr [DI + 0x8],0x28 (1000_1E60 / 0x11E60)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JNC 0x1000:1e82 (1000_1E64 / 0x11E64)
    if(!CarryFlag) {
      goto label_1000_1E82_11E82;
    }
    // TEST byte ptr [DI + 0xa],0x80 (1000_1E66 / 0x11E66)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x80);
    // JNZ 0x1000:1e82 (1000_1E6A / 0x11E6A)
    if(!ZeroFlag) {
      goto label_1000_1E82_11E82;
    }
    // CMP DI,0x2c0 (1000_1E6C / 0x11E6C)
    Alu.Sub16(DI, 0x2C0);
    // JZ 0x1000:1e82 (1000_1E70 / 0x11E70)
    if(ZeroFlag) {
      goto label_1000_1E82_11E82;
    }
    // XOR DX,DX (1000_1E72 / 0x11E72)
    DX = 0;
    // MOV BP,0x1ea1 (1000_1E74 / 0x11E74)
    BP = 0x1EA1;
    // CALL 0x1000:661d (1000_1E77 / 0x11E77)
    NearCall(cs1, 0x1E7A, unknown_1000_661D_1661D);
    // CMP DX,CX (1000_1E7A / 0x11E7A)
    Alu.Sub16(DX, CX);
    // JBE 0x1000:1e82 (1000_1E7C / 0x11E7C)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_1E82_11E82;
    }
    // MOV CX,DX (1000_1E7E / 0x11E7E)
    CX = DX;
    // MOV BX,DI (1000_1E80 / 0x11E80)
    BX = DI;
    label_1000_1E82_11E82:
    // ADD DI,0x1c (1000_1E82 / 0x11E82)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP byte ptr [DI],0xff (1000_1E85 / 0x11E85)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JNZ 0x1000:1e60 (1000_1E88 / 0x11E88)
    if(!ZeroFlag) {
      goto label_1000_1E60_11E60;
    }
    // JCXZ 0x1000:1ea8 (1000_1E8A / 0x11E8A)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_1EA8 / 0x11EA8)
      return NearRet();
    }
    // MOV DI,BX (1000_1E8C / 0x11E8C)
    DI = BX;
    // MOV word ptr [0x11db],DI (1000_1E8E / 0x11E8E)
    UInt16[DS, 0x11DB] = DI;
    // INC byte ptr [0xf8] (1000_1E92 / 0x11E92)
    UInt8[DS, 0xF8] = Alu.Inc8(UInt8[DS, 0xF8]);
    // MOV BP,0x1ea9 (1000_1E96 / 0x11E96)
    BP = 0x1EA9;
    // CALL 0x1000:661d (1000_1E99 / 0x11E99)
    NearCall(cs1, 0x1E9C, unknown_1000_661D_1661D);
    // MOV AL,0x8 (1000_1E9C / 0x11E9C)
    AL = 0x8;
    // JMP 0x1000:71b2 (1000_1E9E / 0x11E9E)
    // Jump converted to non entry function call
    return unknown_1000_70CC_170CC(0x171B2 - cs1 * 0x10);
    label_1000_1EA8_11EA8:
    // RET  (1000_1EA8 / 0x11EA8)
    return NearRet();
  }
  
  public Action unknown_1000_1EBE_11EBE(int gotoTarget) {
    label_1000_1EBE_11EBE:
    // TEST word ptr [SI + 0x12],0x800 (1000_1EBE / 0x11EBE)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x800);
    // JZ 0x1000:1ed9 (1000_1EC3 / 0x11EC3)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_1ED9 / 0x11ED9)
      return NearRet();
    }
    // MOV AL,[0x2a] (1000_1EC5 / 0x11EC5)
    AL = UInt8[DS, 0x2A];
    // SUB AL,0x60 (1000_1EC8 / 0x11EC8)
    // AL -= 0x60;
    AL = Alu.Sub8(AL, 0x60);
    // CMP AL,0x4 (1000_1ECA / 0x11ECA)
    Alu.Sub8(AL, 0x4);
    // JNC 0x1000:1ed9 (1000_1ECC / 0x11ECC)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_1ED9 / 0x11ED9)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_1ECE / 0x11ECE)
    NearCall(cs1, 0x1ED1, PushAll_1000_E270_1E270);
    // MOV AL,0x64 (1000_1ED1 / 0x11ED1)
    AL = 0x64;
    // CALL 0x1000:121f (1000_1ED3 / 0x11ED3)
    NearCall(cs1, 0x1ED6, unknown_1000_121F_1121F);
    // CALL 0x1000:e283 (1000_1ED6 / 0x11ED6)
    NearCall(cs1, 0x1ED9, PopAll_1000_E283_1E283);
    label_1000_1ED9_11ED9:
    // RET  (1000_1ED9 / 0x11ED9)
    return NearRet();
  }
  
  public Action spice86_label_1000_1F64_11F64(int gotoTarget) {
    switch(gotoTarget) {
      case 0x1F64: goto label_1000_1F64_11F64;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_1F64_11F64:
    // CMP byte ptr [0x2a],0x3c (1000_1F64 / 0x11F64)
    Alu.Sub8(UInt8[DS, 0x2A], 0x3C);
    // JNC 0x1000:1f79 (1000_1F69 / 0x11F69)
    if(!CarryFlag) {
      goto label_1000_1F79_11F79;
    }
    // MOV AX,[0x2] (1000_1F6B / 0x11F6B)
    AX = UInt16[DS, 0x2];
    // SUB AX,word ptr [0x1154] (1000_1F6E / 0x11F6E)
    // AX -= UInt16[DS, 0x1154];
    AX = Alu.Sub16(AX, UInt16[DS, 0x1154]);
    // JC 0x1000:1f91 (1000_1F72 / 0x11F72)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_1F91 / 0x11F91)
      return NearRet();
    }
    // CMP AX,0x70 (1000_1F74 / 0x11F74)
    Alu.Sub16(AX, 0x70);
    // JC 0x1000:1f91 (1000_1F77 / 0x11F77)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_1F91 / 0x11F91)
      return NearRet();
    }
    label_1000_1F79_11F79:
    // TEST word ptr [0x2],0x10 (1000_1F79 / 0x11F79)
    Alu.And16(UInt16[DS, 0x2], 0x10);
    // JNZ 0x1000:1f91 (1000_1F7F / 0x11F7F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1F91 / 0x11F91)
      return NearRet();
    }
    // XOR AL,AL (1000_1F81 / 0x11F81)
    AL = 0;
    // XCHG byte ptr [0x11bc],AL (1000_1F83 / 0x11F83)
    byte tmp_1000_1F83 = UInt8[DS, 0x11BC];
    UInt8[DS, 0x11BC] = AL;
    AL = tmp_1000_1F83;
    // OR AL,AL (1000_1F87 / 0x11F87)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:1f91 (1000_1F89 / 0x11F89)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_1F91 / 0x11F91)
      return NearRet();
    }
    // ROL word ptr [0x0],1 (1000_1F8B / 0x11F8B)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // JC 0x1000:1f92 (1000_1F8F / 0x11F8F)
    if(CarryFlag) {
      goto label_1000_1F92_11F92;
    }
    label_1000_1F91_11F91:
    // RET  (1000_1F91 / 0x11F91)
    return NearRet();
    label_1000_1F92_11F92:
    // CALL 0x1000:2017 (1000_1F92 / 0x11F92)
    throw FailAsUntested("Could not find a valid function at address 1000_2017 / 0x12017");
    // JZ 0x1000:2013 (1000_1F95 / 0x11F95)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2013 / 0x12013)
      return NearRet();
    }
    // INC byte ptr [0xc4] (1000_1F97 / 0x11F97)
    UInt8[DS, 0xC4] = Alu.Inc8(UInt8[DS, 0xC4]);
    // MOV CX,0x2 (1000_1F9B / 0x11F9B)
    CX = 0x2;
    label_1000_1F9E_11F9E:
    // MOV AL,byte ptr [BP + 0x9] (1000_1F9E / 0x11F9E)
    AL = UInt8[SS, (ushort)(BP + 0x9)];
    label_1000_1FA1_11FA1:
    // OR AL,AL (1000_1FA1 / 0x11FA1)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:1fcb (1000_1FA3 / 0x11FA3)
    if(ZeroFlag) {
      goto label_1000_1FCB_11FCB;
    }
    // CALL 0x1000:6906 (1000_1FA5 / 0x11FA5)
    NearCall(cs1, 0x1FA8, unknown_1000_6906_16906);
    // MOV AL,byte ptr [SI + 0x1] (1000_1FA8 / 0x11FA8)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // TEST byte ptr [SI + 0x10],0x80 (1000_1FAB / 0x11FAB)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JZ 0x1000:1fa1 (1000_1FAF / 0x11FAF)
    if(ZeroFlag) {
      goto label_1000_1FA1_11FA1;
    }
    // PUSH CX (1000_1FB1 / 0x11FB1)
    Stack.Push(CX);
    // PUSH BP (1000_1FB2 / 0x11FB2)
    Stack.Push(BP);
    // PUSH SI (1000_1FB3 / 0x11FB3)
    Stack.Push(SI);
    // PUSH DI (1000_1FB4 / 0x11FB4)
    Stack.Push(DI);
    // MOV byte ptr [SI + 0x3],0x8d (1000_1FB5 / 0x11FB5)
    UInt8[DS, (ushort)(SI + 0x3)] = 0x8D;
    // CALL 0x1000:84a6 (1000_1FB9 / 0x11FB9)
    NearCall(cs1, 0x1FBC, unknown_1000_84A6_184A6);
    // POP DI (1000_1FBC / 0x11FBC)
    DI = Stack.Pop();
    // POP SI (1000_1FBD / 0x11FBD)
    SI = Stack.Pop();
    // AND byte ptr [SI + 0x10],0xef (1000_1FBE / 0x11FBE)
    // UInt8[DS, (ushort)(SI + 0x10)] &= 0xEF;
    UInt8[DS, (ushort)(SI + 0x10)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0xEF);
    // PUSH DI (1000_1FC2 / 0x11FC2)
    Stack.Push(DI);
    // CALL 0x1000:8357 (1000_1FC3 / 0x11FC3)
    throw FailAsUntested("Could not find a valid function at address 1000_8357 / 0x18357");
    // POP DI (1000_1FC6 / 0x11FC6)
    DI = Stack.Pop();
    // POP BP (1000_1FC7 / 0x11FC7)
    BP = Stack.Pop();
    // POP CX (1000_1FC8 / 0x11FC8)
    CX = Stack.Pop();
    // LOOP 0x1000:1f9e (1000_1FC9 / 0x11FC9)
    if(--CX != 0) {
      goto label_1000_1F9E_11F9E;
    }
    label_1000_1FCB_11FCB:
    // OR byte ptr [DI + 0xa],0x2 (1000_1FCB / 0x11FCB)
    // UInt8[DS, (ushort)(DI + 0xA)] |= 0x2;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // CALL 0x1000:83fd (1000_1FCF / 0x11FCF)
    throw FailAsUntested("Could not find a valid function at address 1000_83FD / 0x183FD");
    // CALL 0x1000:40ae (1000_1FD2 / 0x11FD2)
    NearCall(cs1, 0x1FD5, unknown_1000_40AE_140AE);
    // MOV SI,0xfd8 (1000_1FD5 / 0x11FD5)
    SI = 0xFD8;
    // MOV CX,0x9 (1000_1FD8 / 0x11FD8)
    CX = 0x9;
    label_1000_1FDB_11FDB:
    // CMP BX,word ptr [SI + 0x2] (1000_1FDB / 0x11FDB)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNZ 0x1000:1fe2 (1000_1FDE / 0x11FDE)
    if(!ZeroFlag) {
      goto label_1000_1FE2_11FE2;
    }
    // MOV word ptr [SI],DX (1000_1FE0 / 0x11FE0)
    UInt16[DS, SI] = DX;
    label_1000_1FE2_11FE2:
    // ADD SI,0x10 (1000_1FE2 / 0x11FE2)
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // LOOP 0x1000:1fdb (1000_1FE5 / 0x11FE5)
    if(--CX != 0) {
      goto label_1000_1FDB_11FDB;
    }
    // MOV AL,0xc (1000_1FE7 / 0x11FE7)
    AL = 0xC;
    // MOV SI,0x8e0 (1000_1FE9 / 0x11FE9)
    SI = 0x8E0;
    // CMP DI,word ptr [SI + 0x4] (1000_1FEC / 0x11FEC)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x4)]);
    // JNZ 0x1000:1ff3 (1000_1FEF / 0x11FEF)
    if(!ZeroFlag) {
      goto label_1000_1FF3_11FF3;
    }
    // INC AL (1000_1FF1 / 0x11FF1)
    AL = Alu.Inc8(AL);
    label_1000_1FF3_11FF3:
    // PUSH BX (1000_1FF3 / 0x11FF3)
    Stack.Push(BX);
    // PUSH DX (1000_1FF4 / 0x11FF4)
    Stack.Push(DX);
    // CALL 0x1000:71b2 (1000_1FF5 / 0x11FF5)
    throw FailAsUntested("Could not find a valid function at address 1000_71B2 / 0x171B2");
    // POP DX (1000_1FF8 / 0x11FF8)
    DX = Stack.Pop();
    // POP BX (1000_1FF9 / 0x11FF9)
    BX = Stack.Pop();
    // CMP BX,word ptr [0x6] (1000_1FFA / 0x11FFA)
    Alu.Sub16(BX, UInt16[DS, 0x6]);
    // JNZ 0x1000:2014 (1000_1FFE / 0x11FFE)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:5d50 (1000_2014 / 0x12014)
      // Jump converted to non entry function call
      return unknown_1000_8308_18308(0x15D50 - cs1 * 0x10);
    }
    // MOV word ptr [0x4],DX (1000_2000 / 0x12000)
    UInt16[DS, 0x4] = DX;
    // MOV AL,DL (1000_2004 / 0x12004)
    AL = DL;
    // MOV [0xb],AL (1000_2006 / 0x12006)
    UInt8[DS, 0xB] = AL;
    // OR byte ptr [0x473b],AL (1000_2009 / 0x12009)
    // UInt8[DS, 0x473B] |= AL;
    UInt8[DS, 0x473B] = Alu.Or8(UInt8[DS, 0x473B], AL);
    // MOV [0x2b],AL (1000_200D / 0x1200D)
    UInt8[DS, 0x2B] = AL;
    // CALL 0x1000:6144 (1000_2010 / 0x12010)
    throw FailAsUntested("Could not find a valid function at address 1000_6144 / 0x16144");
    label_1000_2013_12013:
    // RET  (1000_2013 / 0x12013)
    return NearRet();
    label_1000_2014_12014:
    // JMP 0x1000:5d50 (1000_2014 / 0x12014)
    // Jump converted to non entry function call
    return unknown_1000_8308_18308(0x15D50 - cs1 * 0x10);
  }
  
  public Action unknown_1000_2090_12090(int gotoTarget) {
    switch(gotoTarget) {
      case 0x20D2: goto label_1000_20D2_120D2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2090_12090:
    // CALL 0x1000:1ac5 (1000_2090 / 0x12090)
    NearCall(cs1, 0x2093, unknown_1000_1AC5_11AC5);
    // MOV [0x118d],AX (1000_2093 / 0x12093)
    UInt16[DS, 0x118D] = AX;
    // JMP 0x1000:20d2 (1000_2096 / 0x12096)
    goto label_1000_20D2_120D2;
    label_1000_20D2_120D2:
    // MOV AL,[0xc3] (1000_20D2 / 0x120D2)
    AL = UInt8[DS, 0xC3];
    // INC byte ptr [0xc3] (1000_20D5 / 0x120D5)
    UInt8[DS, 0xC3] = Alu.Inc8(UInt8[DS, 0xC3]);
    // MOV BX,0x96 (1000_20D9 / 0x120D9)
    BX = 0x96;
    // MUL BX (1000_20DC / 0x120DC)
    Cpu.Mul16(BX);
    // OR DX,DX (1000_20DE / 0x120DE)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNZ 0x1000:2111 (1000_20E0 / 0x120E0)
    if(!ZeroFlag) {
      goto label_1000_2111_12111;
    }
    // ADD AX,0x64 (1000_20E2 / 0x120E2)
    // AX += 0x64;
    AX = Alu.Add16(AX, 0x64);
    // JC 0x1000:2111 (1000_20E5 / 0x120E5)
    if(CarryFlag) {
      goto label_1000_2111_12111;
    }
    // MOV CX,AX (1000_20E7 / 0x120E7)
    CX = AX;
    // MOV BX,0x3f (1000_20E9 / 0x120E9)
    BX = 0x3F;
    // CALL 0x1000:e3b7 (1000_20EC / 0x120EC)
    NearCall(cs1, 0x20EF, unknown_1000_E3B7_1E3B7);
    // ADD AX,0xe0 (1000_20EF / 0x120EF)
    // AX += 0xE0;
    AX = Alu.Add16(AX, 0xE0);
    // MUL CX (1000_20F2 / 0x120F2)
    Cpu.Mul16(CX);
    // OR DH,DH (1000_20F4 / 0x120F4)
    // DH |= DH;
    DH = Alu.Or8(DH, DH);
    // JNZ 0x1000:2111 (1000_20F6 / 0x120F6)
    if(!ZeroFlag) {
      goto label_1000_2111_12111;
    }
    // MOV DH,DL (1000_20F8 / 0x120F8)
    DH = DL;
    // MOV DL,AH (1000_20FA / 0x120FA)
    DL = AH;
    // MOV AL,[0xbe] (1000_20FC / 0x120FC)
    AL = UInt8[DS, 0xBE];
    // SHL AL,1 (1000_20FF / 0x120FF)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JC 0x1000:2114 (1000_2101 / 0x12101)
    if(CarryFlag) {
      goto label_1000_2114_12114;
    }
    // NOT AL (1000_2103 / 0x12103)
    AL = (byte)~AL;
    // MOV AH,0x1 (1000_2105 / 0x12105)
    AH = 0x1;
    // MUL DX (1000_2107 / 0x12107)
    Cpu.Mul16(DX);
    // XCHG DH,DL (1000_2109 / 0x12109)
    byte tmp_1000_2109 = DH;
    DH = DL;
    DL = tmp_1000_2109;
    // XCHG AH,DL (1000_210B / 0x1210B)
    byte tmp_1000_210B = AH;
    AH = DL;
    DL = tmp_1000_210B;
    // OR AH,AH (1000_210D / 0x1210D)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:2114 (1000_210F / 0x1210F)
    if(ZeroFlag) {
      goto label_1000_2114_12114;
    }
    label_1000_2111_12111:
    // MOV DX,0xffff (1000_2111 / 0x12111)
    DX = 0xFFFF;
    label_1000_2114_12114:
    // MOV word ptr [0xbc],DX (1000_2114 / 0x12114)
    UInt16[DS, 0xBC] = DX;
    // MOV byte ptr [0xcf],0x0 (1000_2118 / 0x12118)
    UInt8[DS, 0xCF] = 0x0;
    // OR byte ptr [0xbf],0x90 (1000_211D / 0x1211D)
    // UInt8[DS, 0xBF] |= 0x90;
    UInt8[DS, 0xBF] = Alu.Or8(UInt8[DS, 0xBF], 0x90);
    // MOV AX,0x20b (1000_2122 / 0x12122)
    AX = 0x20B;
    // CMP byte ptr [0xbe],0x0 (1000_2125 / 0x12125)
    Alu.Sub8(UInt8[DS, 0xBE], 0x0);
    // JS 0x1000:212e (1000_212A / 0x1212A)
    if(SignFlag) {
      // JS target is JMP, inlining.
      // JMP 0x1000:26da (1000_212E / 0x1212E)
      // Jump converted to non entry function call
      return unknown_1000_1045_11045(0x126DA - cs1 * 0x10);
    }
    // INC AH (1000_212C / 0x1212C)
    AH = Alu.Inc8(AH);
    label_1000_212E_1212E:
    // JMP 0x1000:26da (1000_212E / 0x1212E)
    // Jump converted to non entry function call
    return unknown_1000_1045_11045(0x126DA - cs1 * 0x10);
  }
  
  public Action spice86_label_1000_20A4_120A4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x20A4: goto label_1000_20A4_120A4;break;
      case 0x2098: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2098_12098:
    // SUB AX,word ptr [0x118d] (1000_2098 / 0x12098)
    // AX -= UInt16[DS, 0x118D];
    AX = Alu.Sub16(AX, UInt16[DS, 0x118D]);
    // JZ 0x1000:20d1 (1000_209C / 0x1209C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_20D1 / 0x120D1)
      return NearRet();
    }
    // NEG AX (1000_209E / 0x1209E)
    AX = Alu.Sub16(0, AX);
    // MOV [0xcf],AL (1000_20A0 / 0x120A0)
    UInt8[DS, 0xCF] = AL;
    // RET  (1000_20A3 / 0x120A3)
    return NearRet();
    entry:
    label_1000_20A4_120A4:
    // TEST byte ptr [0xbf],0x80 (1000_20A4 / 0x120A4)
    Alu.And8(UInt8[DS, 0xBF], 0x80);
    // JZ 0x1000:20d1 (1000_20A9 / 0x120A9)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_20D1 / 0x120D1)
      return NearRet();
    }
    // CALL 0x1000:1ac5 (1000_20AB / 0x120AB)
    NearCall(cs1, 0x20AE, unknown_1000_1AC5_11AC5);
    // CMP byte ptr [0xc2],0x0 (1000_20AE / 0x120AE)
    Alu.Sub8(UInt8[DS, 0xC2], 0x0);
    // JNZ 0x1000:2098 (1000_20B3 / 0x120B3)
    if(!ZeroFlag) {
      goto label_1000_2098_12098;
    }
    // TEST byte ptr [0xbf],0x10 (1000_20B5 / 0x120B5)
    Alu.And8(UInt8[DS, 0xBF], 0x10);
    // JNZ 0x1000:2131 (1000_20BA / 0x120BA)
    if(!ZeroFlag) {
      goto label_1000_2131_12131;
    }
    // CMP byte ptr [0x11bb],0x0 (1000_20BC / 0x120BC)
    Alu.Sub8(UInt8[DS, 0x11BB], 0x0);
    // JZ 0x1000:20c6 (1000_20C1 / 0x120C1)
    if(ZeroFlag) {
      goto label_1000_20C6_120C6;
    }
    // JMP 0x1000:215f (1000_20C3 / 0x120C3)
    goto label_1000_215F_1215F;
    label_1000_20C6_120C6:
    // SUB AX,word ptr [0x118d] (1000_20C6 / 0x120C6)
    // AX -= UInt16[DS, 0x118D];
    AX = Alu.Sub16(AX, UInt16[DS, 0x118D]);
    // JZ 0x1000:20d2 (1000_20CA / 0x120CA)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_2090_12090(0x120D2 - cs1 * 0x10);
    }
    // NEG AX (1000_20CC / 0x120CC)
    AX = Alu.Sub16(0, AX);
    // MOV [0xcf],AL (1000_20CE / 0x120CE)
    UInt8[DS, 0xCF] = AL;
    label_1000_20D1_120D1:
    // RET  (1000_20D1 / 0x120D1)
    return NearRet();
    label_1000_2131_12131:
    // SUB AX,word ptr [0x118d] (1000_2131 / 0x12131)
    // AX -= UInt16[DS, 0x118D];
    AX = Alu.Sub16(AX, UInt16[DS, 0x118D]);
    // JZ 0x1000:20d1 (1000_2135 / 0x12135)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_20D1 / 0x120D1)
      return NearRet();
    }
    // CMP AX,0x4 (1000_2137 / 0x12137)
    Alu.Sub16(AX, 0x4);
    // JNC 0x1000:215f (1000_213A / 0x1213A)
    if(!CarryFlag) {
      goto label_1000_215F_1215F;
    }
    // SHL AL,1 (1000_213C / 0x1213C)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_213E / 0x1213E)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // MOV BL,AL (1000_2140 / 0x12140)
    BL = AL;
    // CALL 0x1000:24d2 (1000_2142 / 0x12142)
    NearCall(cs1, 0x2145, unknown_1000_24D2_124D2);
    // MOV AL,AH (1000_2145 / 0x12145)
    AL = AH;
    // CMP AL,0x3 (1000_2147 / 0x12147)
    Alu.Sub8(AL, 0x3);
    // JC 0x1000:214d (1000_2149 / 0x12149)
    if(CarryFlag) {
      goto label_1000_214D_1214D;
    }
    // MOV AL,0x2 (1000_214B / 0x1214B)
    AL = 0x2;
    label_1000_214D_1214D:
    // ADD AL,BL (1000_214D / 0x1214D)
    // AL += BL;
    AL = Alu.Add8(AL, BL);
    // MOV BX,0x2161 (1000_214F / 0x1214F)
    BX = 0x2161;
    // XLAT CS:BX (1000_2152 / 0x12152)
    AL = UInt8[cs1, (ushort)(BX + AL)];
    // OR AL,AL (1000_2154 / 0x12154)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:215f (1000_2156 / 0x12156)
    if(ZeroFlag) {
      goto label_1000_215F_1215F;
    }
    // MOV AH,AL (1000_2158 / 0x12158)
    AH = AL;
    // MOV AL,0xb (1000_215A / 0x1215A)
    AL = 0xB;
    // JMP 0x1000:26da (1000_215C / 0x1215C)
    // Jump converted to non entry function call
    return unknown_1000_1045_11045(0x126DA - cs1 * 0x10);
    label_1000_215F_1215F:
    // MOV byte ptr [0x46d9],0x7 (1000_215F / 0x1215F)
    UInt8[DS, 0x46D9] = 0x7;
    // RET  (1000_2164 / 0x12164)
    return NearRet();
  }
  
  public Action unknown_1000_2170_12170(int gotoTarget) {
    label_1000_2170_12170:
    // CALL 0x1000:e270 (1000_2170 / 0x12170)
    NearCall(cs1, 0x2173, PushAll_1000_E270_1E270);
    // MOV SI,0xfd8 (1000_2173 / 0x12173)
    SI = 0xFD8;
    // MOV CX,0x9 (1000_2176 / 0x12176)
    CX = 0x9;
    label_1000_2179_12179:
    // TEST byte ptr [SI + 0xf],0x40 (1000_2179 / 0x12179)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JNZ 0x1000:21f1 (1000_217D / 0x1217D)
    if(!ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // MOV DX,word ptr [SI] (1000_217F / 0x1217F)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_2181 / 0x12181)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // CMP SI,0x1008 (1000_2184 / 0x12184)
    Alu.Sub16(SI, 0x1008);
    // JNZ 0x1000:2194 (1000_2188 / 0x12188)
    if(!ZeroFlag) {
      goto label_1000_2194_12194;
    }
    // CMP BX,0x180 (1000_218A / 0x1218A)
    Alu.Sub16(BX, 0x180);
    // JNZ 0x1000:2194 (1000_218E / 0x1218E)
    if(!ZeroFlag) {
      goto label_1000_2194_12194;
    }
    // MOV DL,0x4 (1000_2190 / 0x12190)
    DL = 0x4;
    // MOV word ptr [SI],DX (1000_2192 / 0x12192)
    UInt16[DS, SI] = DX;
    label_1000_2194_12194:
    // CMP BL,0x80 (1000_2194 / 0x12194)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:21ee (1000_2197 / 0x12197)
    if(!ZeroFlag) {
      goto label_1000_21EE_121EE;
    }
    // CMP DL,0x1 (1000_2199 / 0x12199)
    Alu.Sub8(DL, 0x1);
    // JNZ 0x1000:21dc (1000_219C / 0x1219C)
    if(!ZeroFlag) {
      goto label_1000_21DC_121DC;
    }
    // CMP DH,0x21 (1000_219E / 0x1219E)
    Alu.Sub8(DH, 0x21);
    // JNC 0x1000:21f1 (1000_21A1 / 0x121A1)
    if(!CarryFlag) {
      goto label_1000_21F1_121F1;
    }
    // CMP BH,byte ptr [0x9] (1000_21A3 / 0x121A3)
    Alu.Sub8(BH, UInt8[DS, 0x9]);
    // JZ 0x1000:21f1 (1000_21A7 / 0x121A7)
    if(ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // MOV AL,0x1c (1000_21A9 / 0x121A9)
    AL = 0x1C;
    // MUL BH (1000_21AB / 0x121AB)
    Cpu.Mul8(BH);
    // ADD AX,0xe4 (1000_21AD / 0x121AD)
    // AX += 0xE4;
    AX = Alu.Add16(AX, 0xE4);
    // MOV DI,AX (1000_21B0 / 0x121B0)
    DI = AX;
    // TEST byte ptr [DI + 0xa],0x2 (1000_21B2 / 0x121B2)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:21f1 (1000_21B6 / 0x121B6)
    if(!ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // INC byte ptr [SI] (1000_21B8 / 0x121B8)
    UInt8[DS, SI] = Alu.Inc8(UInt8[DS, SI]);
    // CMP BH,0x1 (1000_21BA / 0x121BA)
    Alu.Sub8(BH, 0x1);
    // JNZ 0x1000:21f1 (1000_21BD / 0x121BD)
    if(!ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // MOV BX,0x144d (1000_21BF / 0x121BF)
    BX = 0x144D;
    // MOV AL,byte ptr [SI + 0xe] (1000_21C2 / 0x121C2)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // XLAT BX (1000_21C5 / 0x121C5)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // MOV byte ptr [SI],AL (1000_21C6 / 0x121C6)
    UInt8[DS, SI] = AL;
    // AND byte ptr [SI + 0xf],0xfb (1000_21C8 / 0x121C8)
    // UInt8[DS, (ushort)(SI + 0xF)] &= 0xFB;
    UInt8[DS, (ushort)(SI + 0xF)] = Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0xFB);
    // CMP AL,0x6 (1000_21CC / 0x121CC)
    Alu.Sub8(AL, 0x6);
    // JNZ 0x1000:21f1 (1000_21CE / 0x121CE)
    if(!ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // CMP byte ptr [0x2a],0x24 (1000_21D0 / 0x121D0)
    Alu.Sub8(UInt8[DS, 0x2A], 0x24);
    // JNC 0x1000:21f1 (1000_21D5 / 0x121D5)
    if(!CarryFlag) {
      goto label_1000_21F1_121F1;
    }
    // MOV byte ptr [SI],0xa (1000_21D7 / 0x121D7)
    UInt8[DS, SI] = 0xA;
    // JMP 0x1000:21f1 (1000_21DA / 0x121DA)
    goto label_1000_21F1_121F1;
    label_1000_21DC_121DC:
    // CMP SI,0x1028 (1000_21DC / 0x121DC)
    Alu.Sub16(SI, 0x1028);
    // JC 0x1000:21f1 (1000_21E0 / 0x121E0)
    if(CarryFlag) {
      goto label_1000_21F1_121F1;
    }
    // CMP BH,0x1 (1000_21E2 / 0x121E2)
    Alu.Sub8(BH, 0x1);
    // JNZ 0x1000:21f1 (1000_21E5 / 0x121E5)
    if(!ZeroFlag) {
      goto label_1000_21F1_121F1;
    }
    // CALL 0x1000:21fa (1000_21E7 / 0x121E7)
    NearCall(cs1, 0x21EA, unknown_1000_21FA_121FA);
    // MOV byte ptr [SI],AL (1000_21EA / 0x121EA)
    UInt8[DS, SI] = AL;
    // JMP 0x1000:21f1 (1000_21EC / 0x121EC)
    goto label_1000_21F1_121F1;
    label_1000_21EE_121EE:
    // CALL 0x1000:221d (1000_21EE / 0x121EE)
    throw FailAsUntested("Could not find a valid function at address 1000_221D / 0x1221D");
    label_1000_21F1_121F1:
    // ADD SI,0x10 (1000_21F1 / 0x121F1)
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // LOOP 0x1000:2179 (1000_21F4 / 0x121F4)
    if(--CX != 0) {
      goto label_1000_2179_12179;
    }
    // CALL 0x1000:e283 (1000_21F6 / 0x121F6)
    NearCall(cs1, 0x21F9, PopAll_1000_E283_1E283);
    // RET  (1000_21F9 / 0x121F9)
    return NearRet();
  }
  
  public Action unknown_1000_21FA_121FA(int gotoTarget) {
    label_1000_21FA_121FA:
    // MOV BX,0xa (1000_21FA / 0x121FA)
    BX = 0xA;
    // CALL 0x1000:e3df (1000_21FD / 0x121FD)
    NearCall(cs1, 0x2200, unknown_1000_E3DF_1E3DF);
    // ADD AL,0x2 (1000_2200 / 0x12200)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    // CMP byte ptr [0x2a],0x54 (1000_2202 / 0x12202)
    Alu.Sub8(UInt8[DS, 0x2A], 0x54);
    // JNC 0x1000:221c (1000_2207 / 0x12207)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_221C / 0x1221C)
      return NearRet();
    }
    // CMP AL,0x3 (1000_2209 / 0x12209)
    Alu.Sub8(AL, 0x3);
    // JZ 0x1000:21fa (1000_220B / 0x1220B)
    if(ZeroFlag) {
      goto label_1000_21FA_121FA;
    }
    // CMP byte ptr [0x2a],0x24 (1000_220D / 0x1220D)
    Alu.Sub8(UInt8[DS, 0x2A], 0x24);
    // JNC 0x1000:221c (1000_2212 / 0x12212)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_221C / 0x1221C)
      return NearRet();
    }
    // CMP AL,0xb (1000_2214 / 0x12214)
    Alu.Sub8(AL, 0xB);
    // JZ 0x1000:21fa (1000_2216 / 0x12216)
    if(ZeroFlag) {
      goto label_1000_21FA_121FA;
    }
    // CMP AL,0x6 (1000_2218 / 0x12218)
    Alu.Sub8(AL, 0x6);
    // JZ 0x1000:21fa (1000_221A / 0x1221A)
    if(ZeroFlag) {
      goto label_1000_21FA_121FA;
    }
    label_1000_221C_1221C:
    // RET  (1000_221C / 0x1221C)
    return NearRet();
  }
  
  public Action unknown_1000_22B1_122B1(int gotoTarget) {
    label_1000_22B1_122B1:
    // MOV BP,0xb4 (1000_22B1 / 0x122B1)
    BP = 0xB4;
    // AND byte ptr [0xbf],0xf9 (1000_22B4 / 0x122B4)
    // UInt8[DS, 0xBF] &= 0xF9;
    UInt8[DS, 0xBF] = Alu.And8(UInt8[DS, 0xBF], 0xF9);
    // MOV BX,word ptr [0xbc] (1000_22B9 / 0x122B9)
    BX = UInt16[DS, 0xBC];
    // MOV CX,BX (1000_22BD / 0x122BD)
    CX = BX;
    // SHR CX,1 (1000_22BF / 0x122BF)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // ADD CX,BX (1000_22C1 / 0x122C1)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // MOV DX,BX (1000_22C3 / 0x122C3)
    DX = BX;
    // ADD DX,DX (1000_22C5 / 0x122C5)
    // DX += DX;
    DX = Alu.Add16(DX, DX);
    // MOV SI,AX (1000_22C7 / 0x122C7)
    SI = AX;
    // SHR SI,1 (1000_22C9 / 0x122C9)
    // SI >>= 1;
    SI = Alu.Shr16(SI, 1);
    // MOV DI,AX (1000_22CB / 0x122CB)
    DI = AX;
    // SHR DI,1 (1000_22CD / 0x122CD)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR DI,1 (1000_22CF / 0x122CF)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // ADD DI,SI (1000_22D1 / 0x122D1)
    // DI += SI;
    DI = Alu.Add16(DI, SI);
    // CMP AX,BX (1000_22D3 / 0x122D3)
    Alu.Sub16(AX, BX);
    // JC 0x1000:22f1 (1000_22D5 / 0x122D5)
    if(CarryFlag) {
      goto label_1000_22F1_122F1;
    }
    // MOV word ptr [BP + 0x0],BX (1000_22D7 / 0x122D7)
    UInt16[SS, BP] = BX;
    // MOV word ptr [BP + 0x2],AX (1000_22DA / 0x122DA)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // CMP AX,CX (1000_22DD / 0x122DD)
    Alu.Sub16(AX, CX);
    // JC 0x1000:2300 (1000_22DF / 0x122DF)
    if(CarryFlag) {
      goto label_1000_2300_12300;
    }
    // CMP AX,DX (1000_22E1 / 0x122E1)
    Alu.Sub16(AX, DX);
    // JC 0x1000:230c (1000_22E3 / 0x122E3)
    if(CarryFlag) {
      goto label_1000_230C_1230C;
    }
    // MOV word ptr [BP + 0x4],CX (1000_22E5 / 0x122E5)
    UInt16[SS, (ushort)(BP + 0x4)] = CX;
    // MOV word ptr [BP + 0x6],DX (1000_22E8 / 0x122E8)
    UInt16[SS, (ushort)(BP + 0x6)] = DX;
    // OR byte ptr [0xbf],0x6 (1000_22EB / 0x122EB)
    // UInt8[DS, 0xBF] |= 0x6;
    UInt8[DS, 0xBF] = Alu.Or8(UInt8[DS, 0xBF], 0x6);
    // RET  (1000_22F0 / 0x122F0)
    return NearRet();
    label_1000_22F1_122F1:
    // MOV word ptr [BP + 0x0],AX (1000_22F1 / 0x122F1)
    UInt16[SS, BP] = AX;
    // MOV word ptr [BP + 0x2],DI (1000_22F4 / 0x122F4)
    UInt16[SS, (ushort)(BP + 0x2)] = DI;
    // MOV word ptr [BP + 0x4],SI (1000_22F7 / 0x122F7)
    UInt16[SS, (ushort)(BP + 0x4)] = SI;
    // SUB DI,SI (1000_22FA / 0x122FA)
    // DI -= SI;
    DI = Alu.Sub16(DI, SI);
    // MOV word ptr [BP + 0x6],DI (1000_22FC / 0x122FC)
    UInt16[SS, (ushort)(BP + 0x6)] = DI;
    // RET  (1000_22FF / 0x122FF)
    return NearRet();
    label_1000_2300_12300:
    // MOV word ptr [BP + 0x4],DI (1000_2300 / 0x12300)
    UInt16[SS, (ushort)(BP + 0x4)] = DI;
    // MOV word ptr [BP + 0x6],SI (1000_2303 / 0x12303)
    UInt16[SS, (ushort)(BP + 0x6)] = SI;
    // OR byte ptr [0xbf],0x2 (1000_2306 / 0x12306)
    // UInt8[DS, 0xBF] |= 0x2;
    UInt8[DS, 0xBF] = Alu.Or8(UInt8[DS, 0xBF], 0x2);
    // RET  (1000_230B / 0x1230B)
    return NearRet();
    label_1000_230C_1230C:
    // MOV word ptr [BP + 0x4],DI (1000_230C / 0x1230C)
    UInt16[SS, (ushort)(BP + 0x4)] = DI;
    // MOV word ptr [BP + 0x6],CX (1000_230F / 0x1230F)
    UInt16[SS, (ushort)(BP + 0x6)] = CX;
    // OR byte ptr [0xbf],0x4 (1000_2312 / 0x12312)
    // UInt8[DS, 0xBF] |= 0x4;
    UInt8[DS, 0xBF] = Alu.Or8(UInt8[DS, 0xBF], 0x4);
    // RET  (1000_2317 / 0x12317)
    return NearRet();
  }
  
  public Action unknown_1000_24D2_124D2(int gotoTarget) {
    label_1000_24D2_124D2:
    // MOV AL,[0xbe] (1000_24D2 / 0x124D2)
    AL = UInt8[DS, 0xBE];
    // XOR CL,CL (1000_24D5 / 0x124D5)
    CL = 0;
    // XOR AH,AH (1000_24D7 / 0x124D7)
    AH = 0;
    // CMP AL,0x1 (1000_24D9 / 0x124D9)
    Alu.Sub8(AL, 0x1);
    // ADC AH,CL (1000_24DB / 0x124DB)
    AH = Alu.Adc8(AH, CL);
    // CMP AL,0x40 (1000_24DD / 0x124DD)
    Alu.Sub8(AL, 0x40);
    // ADC AH,CL (1000_24DF / 0x124DF)
    AH = Alu.Adc8(AH, CL);
    // CMP AL,0x80 (1000_24E1 / 0x124E1)
    Alu.Sub8(AL, 0x80);
    // ADC AH,CL (1000_24E3 / 0x124E3)
    AH = Alu.Adc8(AH, CL);
    // CMP AL,0x90 (1000_24E5 / 0x124E5)
    Alu.Sub8(AL, 0x90);
    // ADC AH,CL (1000_24E7 / 0x124E7)
    AH = Alu.Adc8(AH, CL);
    // CMP AL,0xff (1000_24E9 / 0x124E9)
    Alu.Sub8(AL, 0xFF);
    // ADC AH,CL (1000_24EB / 0x124EB)
    AH = Alu.Adc8(AH, CL);
    // RET  (1000_24ED / 0x124ED)
    return NearRet();
  }
  
  public Action unknown_1000_2524_12524(int gotoTarget) {
    label_1000_2524_12524:
    // SUB word ptr [0xa0],AX (1000_2524 / 0x12524)
    // UInt16[DS, 0xA0] -= AX;
    UInt16[DS, 0xA0] = Alu.Sub16(UInt16[DS, 0xA0], AX);
    // ADD word ptr [0x1172],AX (1000_2528 / 0x12528)
    // UInt16[DS, 0x1172] += AX;
    UInt16[DS, 0x1172] = Alu.Add16(UInt16[DS, 0x1172], AX);
    // RET  (1000_252C / 0x1252C)
    return NearRet();
  }
  
  public Action unknown_1000_2555_12555(int gotoTarget) {
    label_1000_2555_12555:
    // MOV AL,0xa (1000_2555 / 0x12555)
    AL = 0xA;
    // CALL 0x1000:ab15 (1000_2557 / 0x12557)
    NearCall(cs1, 0x255A, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV DX,0x8c (1000_255A / 0x1255A)
    DX = 0x8C;
    // MOV BX,0x27 (1000_255D / 0x1255D)
    BX = 0x27;
    // MOV AX,0x1b (1000_2560 / 0x12560)
    AX = 0x1B;
    // JMP 0x1000:c22f (1000_2563 / 0x12563)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
  }
  
  public Action unknown_1000_2566_12566(int gotoTarget) {
    label_1000_2566_12566:
    // MOV SI,0x1008 (1000_2566 / 0x12566)
    SI = 0x1008;
    // PUSH AX (1000_2569 / 0x12569)
    Stack.Push(AX);
    // CALL 0x1000:40e6 (1000_256A / 0x1256A)
    NearCall(cs1, 0x256D, unknown_1000_40E6_140E6);
    // POP AX (1000_256D / 0x1256D)
    AX = Stack.Pop();
    // MOV BX,AX (1000_256E / 0x1256E)
    BX = AX;
    // CALL 0x1000:2524 (1000_2570 / 0x12570)
    NearCall(cs1, 0x2573, unknown_1000_2524_12524);
    // MOV AX,BX (1000_2573 / 0x12573)
    AX = BX;
    // XOR DX,DX (1000_2575 / 0x12575)
    DX = 0;
    // XCHG AH,AL (1000_2577 / 0x12577)
    byte tmp_1000_2577 = AH;
    AH = AL;
    AL = tmp_1000_2577;
    // XCHG DL,AL (1000_2579 / 0x12579)
    byte tmp_1000_2579 = DL;
    DL = AL;
    AL = tmp_1000_2579;
    // DIV word ptr [0xbc] (1000_257B / 0x1257B)
    Cpu.Div16(UInt16[DS, 0xBC]);
    // CMP AX,0x200 (1000_257F / 0x1257F)
    Alu.Sub16(AX, 0x200);
    // JC 0x1000:2587 (1000_2582 / 0x12582)
    if(CarryFlag) {
      goto label_1000_2587_12587;
    }
    // MOV AX,0x1ff (1000_2584 / 0x12584)
    AX = 0x1FF;
    label_1000_2587_12587:
    // SHR AX,1 (1000_2587 / 0x12587)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // JNZ 0x1000:258d (1000_2589 / 0x12589)
    if(!ZeroFlag) {
      goto label_1000_258D_1258D;
    }
    // MOV AL,0x1 (1000_258B / 0x1258B)
    AL = 0x1;
    label_1000_258D_1258D:
    // MOV [0xbe],AL (1000_258D / 0x1258D)
    UInt8[DS, 0xBE] = AL;
    // MOV AH,0x40 (1000_2590 / 0x12590)
    AH = 0x40;
    // MOV BX,0x7 (1000_2592 / 0x12592)
    BX = 0x7;
    // CMP AL,0xc0 (1000_2595 / 0x12595)
    Alu.Sub8(AL, 0xC0);
    // JNC 0x1000:25b3 (1000_2597 / 0x12597)
    if(!CarryFlag) {
      goto label_1000_25B3_125B3;
    }
    // DEC BX (1000_2599 / 0x12599)
    BX = Alu.Dec16(BX);
    // CMP AL,0x80 (1000_259A / 0x1259A)
    Alu.Sub8(AL, 0x80);
    // JA 0x1000:25b3 (1000_259C / 0x1259C)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_25B3_125B3;
    }
    // DEC BX (1000_259E / 0x1259E)
    BX = Alu.Dec16(BX);
    // XOR AH,AH (1000_259F / 0x1259F)
    AH = 0;
    // CMP AL,0x80 (1000_25A1 / 0x125A1)
    Alu.Sub8(AL, 0x80);
    // JZ 0x1000:25b3 (1000_25A3 / 0x125A3)
    if(ZeroFlag) {
      goto label_1000_25B3_125B3;
    }
    // DEC BX (1000_25A5 / 0x125A5)
    BX = Alu.Dec16(BX);
    // MOV AH,0x8 (1000_25A6 / 0x125A6)
    AH = 0x8;
    // TEST byte ptr [0xbf],AH (1000_25A8 / 0x125A8)
    Alu.And8(UInt8[DS, 0xBF], AH);
    // JZ 0x1000:25b3 (1000_25AC / 0x125AC)
    if(ZeroFlag) {
      goto label_1000_25B3_125B3;
    }
    // MOV byte ptr [0xbe],0x0 (1000_25AE / 0x125AE)
    UInt8[DS, 0xBE] = 0x0;
    label_1000_25B3_125B3:
    // OR AH,0x80 (1000_25B3 / 0x125B3)
    // AH |= 0x80;
    AH = Alu.Or8(AH, 0x80);
    // MOV byte ptr [0xbf],AH (1000_25B6 / 0x125B6)
    UInt8[DS, 0xBF] = AH;
    // MOV SI,0x118d (1000_25BA / 0x125BA)
    SI = 0x118D;
    // ADD word ptr [SI],BX (1000_25BD / 0x125BD)
    // UInt16[DS, SI] += BX;
    UInt16[DS, SI] = Alu.Add16(UInt16[DS, SI], BX);
    // MOV BL,byte ptr [0xc3] (1000_25BF / 0x125BF)
    BL = UInt8[DS, 0xC3];
    // SHR BL,1 (1000_25C3 / 0x125C3)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // AND BX,0x3 (1000_25C5 / 0x125C5)
    // BX &= 0x3;
    BX = Alu.And16(BX, 0x3);
    // CALL 0x1000:e3b7 (1000_25C8 / 0x125C8)
    NearCall(cs1, 0x25CB, unknown_1000_E3B7_1E3B7);
    // ADD word ptr [SI],AX (1000_25CB / 0x125CB)
    // UInt16[DS, SI] += AX;
    UInt16[DS, SI] = Alu.Add16(UInt16[DS, SI], AX);
    // CALL 0x1000:1ac5 (1000_25CD / 0x125CD)
    NearCall(cs1, 0x25D0, unknown_1000_1AC5_11AC5);
    // SUB AX,word ptr [SI] (1000_25D0 / 0x125D0)
    // AX -= UInt16[DS, SI];
    AX = Alu.Sub16(AX, UInt16[DS, SI]);
    // NEG AX (1000_25D2 / 0x125D2)
    AX = Alu.Sub16(0, AX);
    // MOV [0xcf],AL (1000_25D4 / 0x125D4)
    UInt8[DS, 0xCF] = AL;
    // MOV word ptr [0x1158],0x0 (1000_25D7 / 0x125D7)
    UInt16[DS, 0x1158] = 0x0;
    // CALL 0x1000:2806 (1000_25DD / 0x125DD)
    NearCall(cs1, 0x25E0, unknown_1000_2806_12806);
    // CALL 0x1000:2795 (1000_25E0 / 0x125E0)
    NearCall(cs1, 0x25E3, unknown_1000_2795_12795);
    // CALL 0x1000:c49a (1000_25E3 / 0x125E3)
    NearCall(cs1, 0x25E6, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A);
    // MOV AX,0x2c (1000_25E6 / 0x125E6)
    AX = 0x2C;
    // CALL 0x1000:c13e (1000_25E9 / 0x125E9)
    NearCall(cs1, 0x25EC, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:c0f4 (1000_25EC / 0x125EC)
    NearCall(cs1, 0x25EF, unknown_1000_C0F4_1C0F4);
    // MOV BP,0x2555 (1000_25EF / 0x125EF)
    BP = 0x2555;
    // MOV AL,0x8 (1000_25F2 / 0x125F2)
    AL = 0x8;
    // CALL 0x1000:c108 (1000_25F4 / 0x125F4)
    NearCall(cs1, 0x25F7, transition_ida_1000_C108_1C108);
    // MOV AX,0x64 (1000_25F7 / 0x125F7)
    AX = 0x64;
    // CALL 0x1000:ddb0 (1000_25FA / 0x125FA)
    NearCall(cs1, 0x25FD, unknown_1000_DDB0_1DDB0);
    // MOV CX,0x18 (1000_25FD / 0x125FD)
    CX = 0x18;
    // MOV BP,0xa44 (1000_2600 / 0x12600)
    BP = 0xA44;
    // MOV AL,0x6 (1000_2603 / 0x12603)
    AL = 0x6;
    // CALL 0x1000:c108 (1000_2605 / 0x12605)
    NearCall(cs1, 0x2608, transition_ida_1000_C108_1C108);
    // MOV CX,0x18 (1000_2608 / 0x12608)
    CX = 0x18;
    label_1000_260B_1260B:
    // PUSH CX (1000_260B / 0x1260B)
    Stack.Push(CX);
    // MOV BP,0xa44 (1000_260C / 0x1260C)
    BP = 0xA44;
    // MOV AX,0xc (1000_260F / 0x1260F)
    AX = 0xC;
    // DEC CX (1000_2612 / 0x12612)
    CX = Alu.Dec16(CX);
    // CALL 0x1000:e353 (1000_2613 / 0x12613)
    NearCall(cs1, 0x2616, unknown_1000_E353_1E353);
    // POP CX (1000_2616 / 0x12616)
    CX = Stack.Pop();
    // LOOP 0x1000:260b (1000_2617 / 0x12617)
    if(--CX != 0) {
      goto label_1000_260B_1260B;
    }
    // MOV AX,0x27 (1000_2619 / 0x12619)
    AX = 0x27;
    // CALL 0x1000:ab4f (1000_261C / 0x1261C)
    NearCall(cs1, 0x261F, unknown_1000_AB4F_1AB4F);
    // MOV SI,0x4c60 (1000_261F / 0x1261F)
    SI = 0x4C60;
    // MOV BP,0x15aa (1000_2622 / 0x12622)
    BP = 0x15AA;
    // MOV ES,word ptr [0xdbd6] (1000_2625 / 0x12625)
    ES = UInt16[DS, 0xDBD6];
    // CALLF [0x3919] (1000_2629 / 0x12629)
    // Indirect call to [0x3919], generating possible targets from emulator records
    uint targetAddress_1000_2629 = (uint)(UInt16[DS, 0x391B] * 0x10 + UInt16[DS, 0x3919] - cs1 * 0x10);
    switch(targetAddress_1000_2629) {
      case 0x235FB : FarCall(cs1, 0x262D, unknown_334B_014B_335FB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_2629);
        break;
    }
    // MOV AX,0xc8 (1000_262D / 0x1262D)
    AX = 0xC8;
    // CALL 0x1000:ddb0 (1000_2630 / 0x12630)
    NearCall(cs1, 0x2633, unknown_1000_DDB0_1DDB0);
    // CALL 0x1000:aba9 (1000_2633 / 0x12633)
    NearCall(cs1, 0x2636, unknown_1000_ABA9_1ABA9);
    // MOV AL,0x1 (1000_2636 / 0x12636)
    AL = 0x1;
    // CALL 0x1000:ab15 (1000_2638 / 0x12638)
    NearCall(cs1, 0x263B, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV CX,0x1 (1000_263B / 0x1263B)
    CX = 0x1;
    label_1000_263E_1263E:
    // PUSH CX (1000_263E / 0x1263E)
    Stack.Push(CX);
    // MOV SI,0x15b2 (1000_263F / 0x1263F)
    SI = 0x15B2;
    label_1000_2642_12642:
    // PUSH SI (1000_2642 / 0x12642)
    Stack.Push(SI);
    // MOV BP,0x26ac (1000_2643 / 0x12643)
    BP = 0x26AC;
    // MOV AX,0xc (1000_2646 / 0x12646)
    AX = 0xC;
    // CALL 0x1000:e353 (1000_2649 / 0x12649)
    NearCall(cs1, 0x264C, unknown_1000_E353_1E353);
    // POP SI (1000_264C / 0x1264C)
    SI = Stack.Pop();
    // CMP SI,0x161e (1000_264D / 0x1264D)
    Alu.Sub16(SI, 0x161E);
    // JNZ 0x1000:2656 (1000_2651 / 0x12651)
    if(!ZeroFlag) {
      goto label_1000_2656_12656;
    }
    // CALL 0x1000:ac30 (1000_2653 / 0x12653)
    NearCall(cs1, 0x2656, CallPcmFunc05_1000_AC30_1AC30);
    label_1000_2656_12656:
    // ADD SI,0x6 (1000_2656 / 0x12656)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // CMP byte ptr [SI],0xff (1000_2659 / 0x12659)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JNZ 0x1000:2642 (1000_265C / 0x1265C)
    if(!ZeroFlag) {
      goto label_1000_2642_12642;
    }
    // POP CX (1000_265E / 0x1265E)
    CX = Stack.Pop();
    // LOOP 0x1000:263e (1000_265F / 0x1265F)
    if(--CX != 0) {
      goto label_1000_263E_1263E;
    }
    // CALL 0x1000:26ac (1000_2661 / 0x12661)
    NearCall(cs1, 0x2664, unknown_1000_26AC_126AC);
    // XOR CX,CX (1000_2664 / 0x12664)
    CX = 0;
    label_1000_2666_12666:
    // INC CX (1000_2666 / 0x12666)
    CX = Alu.Inc16(CX);
    // PUSH CX (1000_2667 / 0x12667)
    Stack.Push(CX);
    // MOV BP,0xa44 (1000_2668 / 0x12668)
    BP = 0xA44;
    // MOV AX,0xc (1000_266B / 0x1266B)
    AX = 0xC;
    // CALL 0x1000:e353 (1000_266E / 0x1266E)
    NearCall(cs1, 0x2671, unknown_1000_E353_1E353);
    // POP CX (1000_2671 / 0x12671)
    CX = Stack.Pop();
    // CMP CX,0x19 (1000_2672 / 0x12672)
    Alu.Sub16(CX, 0x19);
    // JC 0x1000:2666 (1000_2675 / 0x12675)
    if(CarryFlag) {
      goto label_1000_2666_12666;
    }
    // MOV byte ptr [0x47a9],0x1 (1000_2677 / 0x12677)
    UInt8[DS, 0x47A9] = 0x1;
    // MOV BP,0x2db1 (1000_267C / 0x1267C)
    BP = 0x2DB1;
    // CALL 0x1000:c097 (1000_267F / 0x1267F)
    NearCall(cs1, 0x2682, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // MOV AX,0x2c (1000_2682 / 0x12682)
    AX = 0x2C;
    // CALL 0x1000:c13e (1000_2685 / 0x12685)
    NearCall(cs1, 0x2688, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AL,0x6 (1000_2688 / 0x12688)
    AL = 0x6;
    // MOV BP,0x2555 (1000_268A / 0x1268A)
    BP = 0x2555;
    // CALL 0x1000:c108 (1000_268D / 0x1268D)
    NearCall(cs1, 0x2690, transition_ida_1000_C108_1C108);
    // MOV BP,0x2db1 (1000_2690 / 0x12690)
    BP = 0x2DB1;
    // CALL 0x1000:c097 (1000_2693 / 0x12693)
    NearCall(cs1, 0x2696, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // MOV byte ptr [0x47a9],0x0 (1000_2696 / 0x12696)
    UInt8[DS, 0x47A9] = 0x0;
    // MOV BP,0x26a6 (1000_269B / 0x1269B)
    BP = 0x26A6;
    // MOV AL,0x8 (1000_269E / 0x1269E)
    AL = 0x8;
    // CALL 0x1000:c108 (1000_26A0 / 0x126A0)
    NearCall(cs1, 0x26A3, transition_ida_1000_C108_1C108);
    // JMP 0x1000:2773 (1000_26A3 / 0x126A3)
    // Jump converted to entry function call
    return unknown_1000_2773_12773(0);
  }
  
  public Action unknown_1000_26A6_126A6(int gotoTarget) {
    label_1000_26A6_126A6:
    // CALL 0x1000:c43e (1000_26A6 / 0x126A6)
    NearCall(cs1, 0x26A9, unknown_1000_C43E_1C43E);
    // JMP 0x1000:1797 (1000_26A9 / 0x126A9)
    // Jump converted to entry function call
    return unknown_1000_1797_11797(0);
  }
  
  public Action unknown_1000_26AC_126AC(int gotoTarget) {
    label_1000_26AC_126AC:
    // PUSH SI (1000_26AC / 0x126AC)
    Stack.Push(SI);
    // MOV BP,0x15aa (1000_26AD / 0x126AD)
    BP = 0x15AA;
    // MOV SI,0x4c60 (1000_26B0 / 0x126B0)
    SI = 0x4C60;
    // MOV ES,word ptr [0xdbd6] (1000_26B3 / 0x126B3)
    ES = UInt16[DS, 0xDBD6];
    // CALLF [0x391d] (1000_26B7 / 0x126B7)
    // Indirect call to [0x391d], generating possible targets from emulator records
    uint targetAddress_1000_26B7 = (uint)(UInt16[DS, 0x391F] * 0x10 + UInt16[DS, 0x391D] - cs1 * 0x10);
    switch(targetAddress_1000_26B7) {
      case 0x235FE : FarCall(cs1, 0x26BB, unknown_334B_014E_335FE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_26B7);
        break;
    }
    // POP SI (1000_26BB / 0x126BB)
    SI = Stack.Pop();
    // LODSW SI (1000_26BC / 0x126BC)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_26BD / 0x126BD)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x1000:26cb (1000_26BF / 0x126BF)
    if(SignFlag) {
      goto label_1000_26CB_126CB;
    }
    // MOV BX,AX (1000_26C1 / 0x126C1)
    BX = AX;
    // LODSW SI (1000_26C3 / 0x126C3)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_26C4 / 0x126C4)
    DX = AX;
    // LODSW SI (1000_26C6 / 0x126C6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,BX (1000_26C7 / 0x126C7)
    ushort tmp_1000_26C7 = AX;
    AX = BX;
    BX = tmp_1000_26C7;
    // CALL 0x1000:c22f (1000_26C8 / 0x126C8)
    NearCall(cs1, 0x26CB, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_26CB_126CB:
    // MOV DX,0x7e (1000_26CB / 0x126CB)
    DX = 0x7E;
    // MOV BX,0x4c (1000_26CE / 0x126CE)
    BX = 0x4C;
    // MOV BP,0xc2 (1000_26D1 / 0x126D1)
    BP = 0xC2;
    // MOV AX,0x4c (1000_26D4 / 0x126D4)
    AX = 0x4C;
    // JMP 0x1000:c526 (1000_26D7 / 0x126D7)
    // Jump converted to non entry function call
    return unknown_1000_C51E_1C51E(0x1C526 - cs1 * 0x10);
  }
  
  public Action unknown_1000_274E_1274E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x274E: goto label_1000_274E_1274E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_274E_1274E:
    // CALL 0x1000:c08e (1000_274E / 0x1274E)
    NearCall(cs1, 0x2751, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV AX,0x15 (1000_2751 / 0x12751)
    AX = 0x15;
    // CALL 0x1000:c13e (1000_2754 / 0x12754)
    NearCall(cs1, 0x2757, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x14c8 (1000_2757 / 0x12757)
    SI = 0x14C8;
    // CALL 0x1000:c21b (1000_275A / 0x1275A)
    NearCall(cs1, 0x275D, unknown_1000_C21B_1C21B);
    // MOV AL,0x1 (1000_275D / 0x1275D)
    AL = 0x1;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_275F_1275F(0);
  }
  
  public Action unknown_1000_275F_1275F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x275F: goto label_1000_275F_1275F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_275F_1275F:
    // CALL 0x1000:c08e (1000_275F / 0x1275F)
    NearCall(cs1, 0x2762, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // AND AX,0x7 (1000_2762 / 0x12762)
    // AX &= 0x7;
    AX = Alu.And16(AX, 0x7);
    // ADD AL,0xb (1000_2765 / 0x12765)
    // AL += 0xB;
    AL = Alu.Add8(AL, 0xB);
    // MOV BX,0x56 (1000_2767 / 0x12767)
    BX = 0x56;
    // MOV DX,0x64 (1000_276A / 0x1276A)
    DX = 0x64;
    // CALL 0x1000:c22f (1000_276D / 0x1276D)
    NearCall(cs1, 0x2770, draw_sprite_ida_1000_C22F_1C22F);
    // JMP 0x1000:c07c (1000_2770 / 0x12770)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_2773_12773(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2773: goto label_1000_2773_12773;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2773_12773:
    // MOV AX,0x15 (1000_2773 / 0x12773)
    AX = 0x15;
    // CALL 0x1000:c13e (1000_2776 / 0x12776)
    NearCall(cs1, 0x2779, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AL,0x9 (1000_2779 / 0x12779)
    AL = 0x9;
    // CALL 0x1000:ab15 (1000_277B / 0x1277B)
    NearCall(cs1, 0x277E, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV word ptr [0xd816],0x4 (1000_277E / 0x1277E)
    UInt16[DS, 0xD816] = 0x4;
    label_1000_2784_12784:
    // MOV BP,0x27b6 (1000_2784 / 0x12784)
    BP = 0x27B6;
    // MOV AX,0x9 (1000_2787 / 0x12787)
    AX = 0x9;
    // CALL 0x1000:e353 (1000_278A / 0x1278A)
    NearCall(cs1, 0x278D, unknown_1000_E353_1E353);
    // DEC word ptr [0xd816] (1000_278D / 0x1278D)
    UInt16[DS, 0xD816] = Alu.Dec16(UInt16[DS, 0xD816]);
    // JNS 0x1000:2784 (1000_2791 / 0x12791)
    if(!SignFlag) {
      goto label_1000_2784_12784;
    }
    // JMP 0x1000:274e (1000_2793 / 0x12793)
    // Jump converted to entry function call
    return unknown_1000_274E_1274E(0);
  }
  
  public Action unknown_1000_2795_12795(int gotoTarget) {
    label_1000_2795_12795:
    // MOV AX,0x15 (1000_2795 / 0x12795)
    AX = 0x15;
    // CALL 0x1000:c13e (1000_2798 / 0x12798)
    NearCall(cs1, 0x279B, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV word ptr [0xd816],0x0 (1000_279B / 0x1279B)
    UInt16[DS, 0xD816] = 0x0;
    label_1000_27A1_127A1:
    // MOV BP,0x27b6 (1000_27A1 / 0x127A1)
    BP = 0x27B6;
    // MOV AX,0x9 (1000_27A4 / 0x127A4)
    AX = 0x9;
    // CALL 0x1000:e353 (1000_27A7 / 0x127A7)
    NearCall(cs1, 0x27AA, unknown_1000_E353_1E353);
    // INC word ptr [0xd816] (1000_27AA / 0x127AA)
    UInt16[DS, 0xD816] = Alu.Inc16(UInt16[DS, 0xD816]);
    // CMP word ptr [0xd816],0xd (1000_27AE / 0x127AE)
    Alu.Sub16(UInt16[DS, 0xD816], 0xD);
    // JC 0x1000:27a1 (1000_27B3 / 0x127B3)
    if(CarryFlag) {
      goto label_1000_27A1_127A1;
    }
    // RET  (1000_27B5 / 0x127B5)
    return NearRet();
  }
  
  public Action unknown_1000_27B6_127B6(int gotoTarget) {
    label_1000_27B6_127B6:
    // MOV AX,[0xd816] (1000_27B6 / 0x127B6)
    AX = UInt16[DS, 0xD816];
    // AND AX,0x7 (1000_27B9 / 0x127B9)
    // AX &= 0x7;
    AX = Alu.And16(AX, 0x7);
    // CMP AL,0x5 (1000_27BC / 0x127BC)
    Alu.Sub8(AL, 0x5);
    // JC 0x1000:27c4 (1000_27BE / 0x127BE)
    if(CarryFlag) {
      goto label_1000_27C4_127C4;
    }
    // SUB AL,0x8 (1000_27C0 / 0x127C0)
    // AL -= 0x8;
    AL = Alu.Sub8(AL, 0x8);
    // NEG AL (1000_27C2 / 0x127C2)
    AL = Alu.Sub8(0, AL);
    label_1000_27C4_127C4:
    // ADD AL,0x2 (1000_27C4 / 0x127C4)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    // CALL 0x1000:275f (1000_27C6 / 0x127C6)
    NearCall(cs1, 0x27C9, unknown_1000_275F_1275F);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_27C9_127C9(0);
  }
  
  public Action unknown_1000_27C9_127C9(int gotoTarget) {
    label_1000_27C9_127C9:
    // CALL 0x1000:c08e (1000_27C9 / 0x127C9)
    NearCall(cs1, 0x27CC, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV BX,0x67 (1000_27CC / 0x127CC)
    BX = 0x67;
    label_1000_27CF_127CF:
    // PUSH BX (1000_27CF / 0x127CF)
    Stack.Push(BX);
    // MOV BX,0xf (1000_27D0 / 0x127D0)
    BX = 0xF;
    label_1000_27D3_127D3:
    // CALL 0x1000:e3b7 (1000_27D3 / 0x127D3)
    NearCall(cs1, 0x27D6, unknown_1000_E3B7_1E3B7);
    // CMP AL,DL (1000_27D6 / 0x127D6)
    Alu.Sub8(AL, DL);
    // JZ 0x1000:27d3 (1000_27D8 / 0x127D8)
    if(ZeroFlag) {
      goto label_1000_27D3_127D3;
    }
    // MOV DL,AL (1000_27DA / 0x127DA)
    DL = AL;
    // ADD AX,0x17 (1000_27DC / 0x127DC)
    // AX += 0x17;
    AX = Alu.Add16(AX, 0x17);
    // POP BX (1000_27DF / 0x127DF)
    BX = Stack.Pop();
    // PUSH DX (1000_27E0 / 0x127E0)
    Stack.Push(DX);
    // MOV DX,0xa3 (1000_27E1 / 0x127E1)
    DX = 0xA3;
    // CALL 0x1000:c2fd (1000_27E4 / 0x127E4)
    NearCall(cs1, 0x27E7, unknown_1000_C2FD_1C2FD);
    // POP DX (1000_27E7 / 0x127E7)
    DX = Stack.Pop();
    // ADD BX,0x3 (1000_27E8 / 0x127E8)
    // BX += 0x3;
    BX = Alu.Add16(BX, 0x3);
    // CMP BX,0x70 (1000_27EB / 0x127EB)
    Alu.Sub16(BX, 0x70);
    // JBE 0x1000:27cf (1000_27EE / 0x127EE)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_27CF_127CF;
    }
    // MOV SI,0x14ce (1000_27F0 / 0x127F0)
    SI = 0x14CE;
    // MOV AX,[0xd816] (1000_27F3 / 0x127F3)
    AX = UInt16[DS, 0xD816];
    // AND AX,0x3 (1000_27F6 / 0x127F6)
    // AX &= 0x3;
    AX = Alu.And16(AX, 0x3);
    // ADD AL,0x13 (1000_27F9 / 0x127F9)
    // AL += 0x13;
    AL = Alu.Add8(AL, 0x13);
    // MOV byte ptr [SI],AL (1000_27FB / 0x127FB)
    UInt8[DS, SI] = AL;
    // MOV byte ptr [SI + 0x6],AL (1000_27FD / 0x127FD)
    UInt8[DS, (ushort)(SI + 0x6)] = AL;
    // CALL 0x1000:c21b (1000_2800 / 0x12800)
    NearCall(cs1, 0x2803, unknown_1000_C21B_1C21B);
    // JMP 0x1000:c07c (1000_2803 / 0x12803)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_2806_12806(int gotoTarget) {
    label_1000_2806_12806:
    // CALL 0x1000:274e (1000_2806 / 0x12806)
    NearCall(cs1, 0x2809, unknown_1000_274E_1274E);
    // MOV AL,0x2 (1000_2809 / 0x12809)
    AL = 0x2;
    // CALL 0x1000:275f (1000_280B / 0x1280B)
    NearCall(cs1, 0x280E, unknown_1000_275F_1275F);
    // MOV CX,0x14 (1000_280E / 0x1280E)
    CX = 0x14;
    // CALL 0x1000:281c (1000_2811 / 0x12811)
    NearCall(cs1, 0x2814, unknown_1000_281C_1281C);
    // CALL 0x1000:aba9 (1000_2814 / 0x12814)
    NearCall(cs1, 0x2817, unknown_1000_ABA9_1ABA9);
    // MOV AL,0x1 (1000_2817 / 0x12817)
    AL = 0x1;
    // JMP 0x1000:275f (1000_2819 / 0x12819)
    // Jump converted to entry function call
    return unknown_1000_275F_1275F(0);
  }
  
  public Action unknown_1000_281C_1281C(int gotoTarget) {
    label_1000_281C_1281C:
    // MOV AX,0x15 (1000_281C / 0x1281C)
    AX = 0x15;
    // CALL 0x1000:c13e (1000_281F / 0x1281F)
    NearCall(cs1, 0x2822, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV word ptr [0xd816],0x0 (1000_2822 / 0x12822)
    UInt16[DS, 0xD816] = 0x0;
    label_1000_2828_12828:
    // PUSH CX (1000_2828 / 0x12828)
    Stack.Push(CX);
    // CALL 0x1000:27c9 (1000_2829 / 0x12829)
    NearCall(cs1, 0x282C, unknown_1000_27C9_127C9);
    // MOV AX,0x9 (1000_282C / 0x1282C)
    AX = 0x9;
    // CALL 0x1000:e3a0 (1000_282F / 0x1282F)
    NearCall(cs1, 0x2832, unknown_1000_E3A0_1E3A0);
    // INC word ptr [0xd816] (1000_2832 / 0x12832)
    UInt16[DS, 0xD816] = Alu.Inc16(UInt16[DS, 0xD816]);
    // POP CX (1000_2836 / 0x12836)
    CX = Stack.Pop();
    // LOOP 0x1000:2828 (1000_2837 / 0x12837)
    if(--CX != 0) {
      goto label_1000_2828_12828;
    }
    // RET  (1000_2839 / 0x12839)
    return NearRet();
  }
  
  public Action unknown_1000_28A1_128A1(int gotoTarget) {
    label_1000_28A1_128A1:
    // MOV [0x47a9],AL (1000_28A1 / 0x128A1)
    UInt8[DS, 0x47A9] = AL;
    // CALL 0x1000:2795 (1000_28A4 / 0x128A4)
    NearCall(cs1, 0x28A7, unknown_1000_2795_12795);
    // CALL 0x1000:c49a (1000_28A7 / 0x128A7)
    NearCall(cs1, 0x28AA, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A);
    // CALL 0x1000:aba9 (1000_28AA / 0x128AA)
    NearCall(cs1, 0x28AD, unknown_1000_ABA9_1ABA9);
    // MOV BP,0x28b5 (1000_28AD / 0x128AD)
    BP = 0x28B5;
    // MOV AL,0x8 (1000_28B0 / 0x128B0)
    AL = 0x8;
    // JMP 0x1000:c108 (1000_28B2 / 0x128B2)
    // Jump converted to entry function call
    return transition_ida_1000_C108_1C108(0);
  }
  
  public Action unknown_1000_28B5_128B5(int gotoTarget) {
    label_1000_28B5_128B5:
    // MOV AX,0x15 (1000_28B5 / 0x128B5)
    AX = 0x15;
    // CALL 0x1000:c13e (1000_28B8 / 0x128B8)
    NearCall(cs1, 0x28BB, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AL,0xa (1000_28BB / 0x128BB)
    AL = 0xA;
    // CALL 0x1000:ab15 (1000_28BD / 0x128BD)
    NearCall(cs1, 0x28C0, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV AL,[0x47a9] (1000_28C0 / 0x128C0)
    AL = UInt8[DS, 0x47A9];
    // XOR AH,AH (1000_28C3 / 0x128C3)
    AH = 0;
    // MOV SI,AX (1000_28C5 / 0x128C5)
    SI = AX;
    // SHL SI,1 (1000_28C7 / 0x128C7)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV DX,word ptr [SI + 0x225d] (1000_28C9 / 0x128C9)
    DX = UInt16[DS, (ushort)(SI + 0x225D)];
    // XOR BX,BX (1000_28CD / 0x128CD)
    BX = 0;
    // XCHG DH,BL (1000_28CF / 0x128CF)
    byte tmp_1000_28CF = DH;
    DH = BL;
    BL = tmp_1000_28CF;
    // ADD AX,0x1e (1000_28D1 / 0x128D1)
    // AX += 0x1E;
    AX = Alu.Add16(AX, 0x1E);
    // SHL SI,1 (1000_28D4 / 0x128D4)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV word ptr [SI + 0x47f8],DX (1000_28D6 / 0x128D6)
    UInt16[DS, (ushort)(SI + 0x47F8)] = DX;
    // MOV word ptr [SI + 0x47fa],BX (1000_28DA / 0x128DA)
    UInt16[DS, (ushort)(SI + 0x47FA)] = BX;
    // JMP 0x1000:c22f (1000_28DE / 0x128DE)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
  }
  
  public Action unknown_1000_28E1_128E1(int gotoTarget) {
    label_1000_28E1_128E1:
    // CMP byte ptr [0x24],0xc (1000_28E1 / 0x128E1)
    Alu.Sub8(UInt8[DS, 0x24], 0xC);
    // JNZ 0x1000:28eb (1000_28E6 / 0x128E6)
    if(!ZeroFlag) {
      goto label_1000_28EB_128EB;
    }
    // CALL 0x1000:215f (1000_28E8 / 0x128E8)
    throw FailAsUntested("Could not find a valid function at address 1000_215F / 0x1215F");
    label_1000_28EB_128EB:
    // CMP byte ptr [0x47a9],0x0 (1000_28EB / 0x128EB)
    Alu.Sub8(UInt8[DS, 0x47A9], 0x0);
    // JZ 0x1000:290a (1000_28F0 / 0x128F0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_290A / 0x1290A)
      return NearRet();
    }
    // CALL 0x1000:c49a (1000_28F2 / 0x128F2)
    NearCall(cs1, 0x28F5, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A);
    // MOV byte ptr [0x47a6],0xff (1000_28F5 / 0x128F5)
    UInt8[DS, 0x47A6] = 0xFF;
    // MOV AL,0x8 (1000_28FA / 0x128FA)
    AL = 0x8;
    // MOV BP,0x2dd3 (1000_28FC / 0x128FC)
    BP = 0x2DD3;
    // CALL 0x1000:c108 (1000_28FF / 0x128FF)
    NearCall(cs1, 0x2902, transition_ida_1000_C108_1C108);
    // MOV byte ptr [0x47a9],0x0 (1000_2902 / 0x12902)
    UInt8[DS, 0x47A9] = 0x0;
    // CALL 0x1000:2773 (1000_2907 / 0x12907)
    NearCall(cs1, 0x290A, unknown_1000_2773_12773);
    label_1000_290A_1290A:
    // RET  (1000_290A / 0x1290A)
    return NearRet();
  }
  
  public Action unknown_1000_2997_12997(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2999: goto label_1000_2999_12999;break;
      case 0x2992: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2992_12992:
    // RET  (1000_2992 / 0x12992)
    return NearRet();
    entry:
    label_1000_2997_12997:
    // XOR AL,AL (1000_2997 / 0x12997)
    AL = 0;
    label_1000_2999_12999:
    // MOV BL,byte ptr [0xc9] (1000_2999 / 0x12999)
    BL = UInt8[DS, 0xC9];
    // MOV byte ptr [0xeb],BL (1000_299D / 0x1299D)
    UInt8[DS, 0xEB] = BL;
    // CMP byte ptr [0x47a9],0x0 (1000_29A1 / 0x129A1)
    Alu.Sub8(UInt8[DS, 0x47A9], 0x0);
    // JZ 0x1000:2992 (1000_29A6 / 0x129A6)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2992 / 0x12992)
      return NearRet();
    }
    // PUSH AX (1000_29A8 / 0x129A8)
    Stack.Push(AX);
    // CALL 0x1000:97cf (1000_29A9 / 0x129A9)
    NearCall(cs1, 0x29AC, unknown_1000_97CF_197CF);
    // CALL 0x1000:98f5 (1000_29AC / 0x129AC)
    NearCall(cs1, 0x29AF, ClearUnknownValuesAndAX_1000_98F5_198F5);
    // CALL 0x1000:c08e (1000_29AF / 0x129AF)
    NearCall(cs1, 0x29B2, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:28b5 (1000_29B2 / 0x129B2)
    NearCall(cs1, 0x29B5, unknown_1000_28B5_128B5);
    // CALL 0x1000:28e1 (1000_29B5 / 0x129B5)
    NearCall(cs1, 0x29B8, unknown_1000_28E1_128E1);
    // MOV byte ptr [0x24],0x0 (1000_29B8 / 0x129B8)
    UInt8[DS, 0x24] = 0x0;
    // POP AX (1000_29BD / 0x129BD)
    AX = Stack.Pop();
    // MOV [0x23],AL (1000_29BE / 0x129BE)
    UInt8[DS, 0x23] = AL;
    // CALL 0x1000:d316 (1000_29C1 / 0x129C1)
    NearCall(cs1, 0x29C4, MenuAnimationRelated_1000_D316_1D316);
    // CALL 0x1000:2eb2 (1000_29C4 / 0x129C4)
    NearCall(cs1, 0x29C7, unknown_1000_2EB2_12EB2);
    // CALL 0x1000:2dd3 (1000_29C7 / 0x129C7)
    NearCall(cs1, 0x29CA, unknown_1000_2DD3_12DD3);
    // CMP byte ptr [0x47a7],0x0 (1000_29CA / 0x129CA)
    Alu.Sub8(UInt8[DS, 0x47A7], 0x0);
    // JNZ 0x1000:2992 (1000_29CF / 0x129CF)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2992 / 0x12992)
      return NearRet();
    }
    // JMP 0x1000:d280 (1000_29D1 / 0x129D1)
    // Jump converted to entry function call
    return unknown_1000_D280_1D280(0);
  }
  
  public Action unknown_1000_29EE_129EE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x29EE: goto label_1000_29EE_129EE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_29EE_129EE:
    // XOR DI,DI (1000_29EE / 0x129EE)
    DI = 0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_29F0_129F0(0);
  }
  
  public Action unknown_1000_29F0_129F0(int gotoTarget) {
    label_1000_29F0_129F0:
    // TEST byte ptr [0xa],0x1 (1000_29F0 / 0x129F0)
    Alu.And8(UInt8[DS, 0xA], 0x1);
    // JZ 0x1000:2a33 (1000_29F5 / 0x129F5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2A33 / 0x12A33)
      return NearRet();
    }
    // MOV SI,0x1190 (1000_29F7 / 0x129F7)
    SI = 0x1190;
    // MOV CL,byte ptr [SI] (1000_29FA / 0x129FA)
    CL = UInt8[DS, SI];
    // XOR CH,CH (1000_29FC / 0x129FC)
    CH = 0;
    // JCXZ 0x1000:2a14 (1000_29FE / 0x129FE)
    if(CX == 0) {
      goto label_1000_2A14_12A14;
    }
    // INC SI (1000_2A00 / 0x12A00)
    SI = Alu.Inc16(SI);
    label_1000_2A01_12A01:
    // CMP AX,word ptr [SI] (1000_2A01 / 0x12A01)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JNZ 0x1000:2a0a (1000_2A03 / 0x12A03)
    if(!ZeroFlag) {
      goto label_1000_2A0A_12A0A;
    }
    // CMP DI,word ptr [SI + 0x2] (1000_2A05 / 0x12A05)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x2)]);
    // JZ 0x1000:2a33 (1000_2A08 / 0x12A08)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2A33 / 0x12A33)
      return NearRet();
    }
    label_1000_2A0A_12A0A:
    // ADD SI,0x4 (1000_2A0A / 0x12A0A)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LOOP 0x1000:2a01 (1000_2A0D / 0x12A0D)
    if(--CX != 0) {
      goto label_1000_2A01_12A01;
    }
    // MOV SI,0x1190 (1000_2A0F / 0x12A0F)
    SI = 0x1190;
    // MOV CL,byte ptr [SI] (1000_2A12 / 0x12A12)
    CL = UInt8[DS, SI];
    label_1000_2A14_12A14:
    // CMP CX,0xa (1000_2A14 / 0x12A14)
    Alu.Sub16(CX, 0xA);
    // JC 0x1000:2a25 (1000_2A17 / 0x12A17)
    if(CarryFlag) {
      goto label_1000_2A25_12A25;
    }
    // PUSH AX (1000_2A19 / 0x12A19)
    Stack.Push(AX);
    // PUSH SI (1000_2A1A / 0x12A1A)
    Stack.Push(SI);
    // PUSH DI (1000_2A1B / 0x12A1B)
    Stack.Push(DI);
    // CALL 0x1000:2a34 (1000_2A1C / 0x12A1C)
    NearCall(cs1, 0x2A1F, unknown_1000_2A34_12A34);
    // POP DI (1000_2A1F / 0x12A1F)
    DI = Stack.Pop();
    // POP SI (1000_2A20 / 0x12A20)
    SI = Stack.Pop();
    // POP AX (1000_2A21 / 0x12A21)
    AX = Stack.Pop();
    // MOV CX,0x9 (1000_2A22 / 0x12A22)
    CX = 0x9;
    label_1000_2A25_12A25:
    // INC byte ptr [SI] (1000_2A25 / 0x12A25)
    UInt8[DS, SI] = Alu.Inc8(UInt8[DS, SI]);
    // INC SI (1000_2A27 / 0x12A27)
    SI = Alu.Inc16(SI);
    // ADD CX,CX (1000_2A28 / 0x12A28)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD CX,CX (1000_2A2A / 0x12A2A)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD SI,CX (1000_2A2C / 0x12A2C)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV word ptr [SI],AX (1000_2A2E / 0x12A2E)
    UInt16[DS, SI] = AX;
    // MOV word ptr [SI + 0x2],DI (1000_2A30 / 0x12A30)
    UInt16[DS, (ushort)(SI + 0x2)] = DI;
    label_1000_2A33_12A33:
    // RET  (1000_2A33 / 0x12A33)
    return NearRet();
  }
  
  public Action unknown_1000_2A34_12A34(int gotoTarget) {
    label_1000_2A34_12A34:
    // MOV SI,0x1190 (1000_2A34 / 0x12A34)
    SI = 0x1190;
    // DEC byte ptr [SI] (1000_2A37 / 0x12A37)
    UInt8[DS, SI] = Alu.Dec8(UInt8[DS, SI]);
    // JNZ 0x1000:2a3f (1000_2A39 / 0x12A39)
    if(!ZeroFlag) {
      goto label_1000_2A3F_12A3F;
    }
    // MOV byte ptr [SI + -0x1],0x0 (1000_2A3B / 0x12A3B)
    UInt8[DS, (ushort)(SI - 0x1)] = 0x0;
    label_1000_2A3F_12A3F:
    // INC SI (1000_2A3F / 0x12A3F)
    SI = Alu.Inc16(SI);
    // MOV DI,SI (1000_2A40 / 0x12A40)
    DI = SI;
    // ADD SI,0x4 (1000_2A42 / 0x12A42)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // PUSH DS (1000_2A45 / 0x12A45)
    Stack.Push(DS);
    // POP ES (1000_2A46 / 0x12A46)
    ES = Stack.Pop();
    // MOV CX,0x12 (1000_2A47 / 0x12A47)
    CX = 0x12;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_2A4A / 0x12A4A)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XOR AX,AX (1000_2A4C / 0x12A4C)
    AX = 0;
    // STOSW ES:DI (1000_2A4E / 0x12A4E)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_2A4F / 0x12A4F)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_2A50 / 0x12A50)
    return NearRet();
  }
  
  public Action unknown_1000_2A51_12A51(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2AAE: goto label_1000_2AAE_12AAE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2A51_12A51:
    // MOV SI,0x1190 (1000_2A51 / 0x12A51)
    SI = 0x1190;
    // MOV DL,AL (1000_2A54 / 0x12A54)
    DL = AL;
    // MOV BX,DI (1000_2A56 / 0x12A56)
    BX = DI;
    // XOR CX,CX (1000_2A58 / 0x12A58)
    CX = 0;
    // XOR BP,BP (1000_2A5A / 0x12A5A)
    BP = 0;
    // LODSB SI (1000_2A5C / 0x12A5C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV CL,AL (1000_2A5D / 0x12A5D)
    CL = AL;
    // JCXZ 0x1000:2aae (1000_2A5F / 0x12A5F)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_2AAE / 0x12AAE)
      return NearRet();
    }
    // MOV DI,SI (1000_2A61 / 0x12A61)
    DI = SI;
    // PUSH DS (1000_2A63 / 0x12A63)
    Stack.Push(DS);
    // POP ES (1000_2A64 / 0x12A64)
    ES = Stack.Pop();
    label_1000_2A65_12A65:
    // LODSW SI (1000_2A65 / 0x12A65)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AH,DL (1000_2A66 / 0x12A66)
    Alu.Sub8(AH, DL);
    // JNZ 0x1000:2a78 (1000_2A68 / 0x12A68)
    if(!ZeroFlag) {
      goto label_1000_2A78_12A78;
    }
    // CMP DL,0xf (1000_2A6A / 0x12A6A)
    Alu.Sub8(DL, 0xF);
    // JNZ 0x1000:2a73 (1000_2A6D / 0x12A6D)
    if(!ZeroFlag) {
      goto label_1000_2A73_12A73;
    }
    // CMP BX,word ptr [SI] (1000_2A6F / 0x12A6F)
    Alu.Sub16(BX, UInt16[DS, SI]);
    // JNZ 0x1000:2a78 (1000_2A71 / 0x12A71)
    if(!ZeroFlag) {
      goto label_1000_2A78_12A78;
    }
    label_1000_2A73_12A73:
    // ADD SI,0x2 (1000_2A73 / 0x12A73)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // JMP 0x1000:2a7b (1000_2A76 / 0x12A76)
    goto label_1000_2A7B_12A7B;
    label_1000_2A78_12A78:
    // STOSW ES:DI (1000_2A78 / 0x12A78)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2A79 / 0x12A79)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC BP (1000_2A7A / 0x12A7A)
    BP = Alu.Inc16(BP);
    label_1000_2A7B_12A7B:
    // LOOP 0x1000:2a65 (1000_2A7B / 0x12A7B)
    if(--CX != 0) {
      goto label_1000_2A65_12A65;
    }
    // JMP 0x1000:2a9e (1000_2A7D / 0x12A7D)
    goto label_1000_2A9E_12A9E;
    label_1000_2A9E_12A9E:
    // MOV CX,BP (1000_2A9E / 0x12A9E)
    CX = BP;
    // MOV CH,CL (1000_2AA0 / 0x12AA0)
    CH = CL;
    // XCHG byte ptr [0x1190],CL (1000_2AA2 / 0x12AA2)
    byte tmp_1000_2AA2 = UInt8[DS, 0x1190];
    UInt8[DS, 0x1190] = CL;
    CL = tmp_1000_2AA2;
    // CMP CL,CH (1000_2AA6 / 0x12AA6)
    Alu.Sub8(CL, CH);
    // JZ 0x1000:2aae (1000_2AA8 / 0x12AA8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2AAE / 0x12AAE)
      return NearRet();
    }
    // XOR AX,AX (1000_2AAA / 0x12AAA)
    AX = 0;
    // STOSW ES:DI (1000_2AAC / 0x12AAC)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_2AAD / 0x12AAD)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_2AAE_12AAE:
    // RET  (1000_2AAE / 0x12AAE)
    return NearRet();
  }
  
  public Action unknown_1000_2A7F_12A7F(int gotoTarget) {
    label_1000_2A7F_12A7F:
    // MOV SI,0x1190 (1000_2A7F / 0x12A7F)
    SI = 0x1190;
    // XOR CX,CX (1000_2A82 / 0x12A82)
    CX = 0;
    // XOR BP,BP (1000_2A84 / 0x12A84)
    BP = 0;
    // LODSB SI (1000_2A86 / 0x12A86)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV CL,AL (1000_2A87 / 0x12A87)
    CL = AL;
    // JCXZ 0x1000:2aae (1000_2A89 / 0x12A89)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_2AAE / 0x12AAE)
      return NearRet();
    }
    // MOV DI,SI (1000_2A8B / 0x12A8B)
    DI = SI;
    // PUSH DS (1000_2A8D / 0x12A8D)
    Stack.Push(DS);
    // POP ES (1000_2A8E / 0x12A8E)
    ES = Stack.Pop();
    label_1000_2A8F_12A8F:
    // LODSW SI (1000_2A8F / 0x12A8F)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AL,0x1 (1000_2A90 / 0x12A90)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:2a99 (1000_2A92 / 0x12A92)
    if(!ZeroFlag) {
      goto label_1000_2A99_12A99;
    }
    // ADD SI,0x2 (1000_2A94 / 0x12A94)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // JMP 0x1000:2a9c (1000_2A97 / 0x12A97)
    goto label_1000_2A9C_12A9C;
    label_1000_2A99_12A99:
    // STOSW ES:DI (1000_2A99 / 0x12A99)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2A9A / 0x12A9A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC BP (1000_2A9B / 0x12A9B)
    BP = Alu.Inc16(BP);
    label_1000_2A9C_12A9C:
    // LOOP 0x1000:2a8f (1000_2A9C / 0x12A9C)
    if(--CX != 0) {
      goto label_1000_2A8F_12A8F;
    }
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_2A51_12A51(0x12A9E - cs1 * 0x10);
  }
  
  public Action unknown_1000_2AAF_12AAF(int gotoTarget) {
    label_1000_2AAF_12AAF:
    // PUSH SI (1000_2AAF / 0x12AAF)
    Stack.Push(SI);
    // MOV SI,0x1190 (1000_2AB0 / 0x12AB0)
    SI = 0x1190;
    // XOR CX,CX (1000_2AB3 / 0x12AB3)
    CX = 0;
    // MOV CL,byte ptr [SI] (1000_2AB5 / 0x12AB5)
    CL = UInt8[DS, SI];
    // JCXZ 0x1000:2acd (1000_2AB7 / 0x12AB7)
    if(CX == 0) {
      goto label_1000_2ACD_12ACD;
    }
    // INC SI (1000_2AB9 / 0x12AB9)
    SI = Alu.Inc16(SI);
    label_1000_2ABA_12ABA:
    // CMP AL,byte ptr [SI + 0x1] (1000_2ABA / 0x12ABA)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0x1)]);
    // JNZ 0x1000:2ac8 (1000_2ABD / 0x12ABD)
    if(!ZeroFlag) {
      goto label_1000_2AC8_12AC8;
    }
    // CMP AL,0xf (1000_2ABF / 0x12ABF)
    Alu.Sub8(AL, 0xF);
    // JNZ 0x1000:2ad0 (1000_2AC1 / 0x12AC1)
    if(!ZeroFlag) {
      goto label_1000_2AD0_12AD0;
    }
    // CMP DI,word ptr [SI + 0x2] (1000_2AC3 / 0x12AC3)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x2)]);
    // JZ 0x1000:2ad0 (1000_2AC6 / 0x12AC6)
    if(ZeroFlag) {
      goto label_1000_2AD0_12AD0;
    }
    label_1000_2AC8_12AC8:
    // ADD SI,0x4 (1000_2AC8 / 0x12AC8)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LOOP 0x1000:2aba (1000_2ACB / 0x12ACB)
    if(--CX != 0) {
      goto label_1000_2ABA_12ABA;
    }
    label_1000_2ACD_12ACD:
    // POP SI (1000_2ACD / 0x12ACD)
    SI = Stack.Pop();
    // CLC  (1000_2ACE / 0x12ACE)
    CarryFlag = false;
    // RET  (1000_2ACF / 0x12ACF)
    return NearRet();
    label_1000_2AD0_12AD0:
    // MOV AX,word ptr [SI] (1000_2AD0 / 0x12AD0)
    AX = UInt16[DS, SI];
    // MOV DI,word ptr [SI + 0x2] (1000_2AD2 / 0x12AD2)
    DI = UInt16[DS, (ushort)(SI + 0x2)];
    // POP SI (1000_2AD5 / 0x12AD5)
    SI = Stack.Pop();
    // STC  (1000_2AD6 / 0x12AD6)
    CarryFlag = true;
    // RET  (1000_2AD7 / 0x12AD7)
    return NearRet();
  }
  
  public Action unknown_1000_2AD8_12AD8(int gotoTarget) {
    label_1000_2AD8_12AD8:
    // PUSH AX (1000_2AD8 / 0x12AD8)
    Stack.Push(AX);
    // MOV AX,[0x1191] (1000_2AD9 / 0x12AD9)
    AX = UInt16[DS, 0x1191];
    // MOV BX,word ptr [0x12] (1000_2ADC / 0x12ADC)
    BX = UInt16[DS, 0x12];
    // MOV CL,AH (1000_2AE0 / 0x12AE0)
    CL = AH;
    // SHR BX,CL (1000_2AE2 / 0x12AE2)
    // BX >>= CL;
    BX = Alu.Shr16(BX, CL);
    // SHR BX,1 (1000_2AE4 / 0x12AE4)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // JNC 0x1000:2af7 (1000_2AE6 / 0x12AE6)
    if(!CarryFlag) {
      goto label_1000_2AF7_12AF7;
    }
    // MOV DI,word ptr [0x1193] (1000_2AE8 / 0x12AE8)
    DI = UInt16[DS, 0x1193];
    // CMP CL,0xf (1000_2AEC / 0x12AEC)
    Alu.Sub8(CL, 0xF);
    // JNZ 0x1000:2afa (1000_2AEF / 0x12AEF)
    if(!ZeroFlag) {
      goto label_1000_2AFA_12AFA;
    }
    // CMP DI,word ptr [0x114e] (1000_2AF1 / 0x12AF1)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JZ 0x1000:2afa (1000_2AF5 / 0x12AF5)
    if(ZeroFlag) {
      goto label_1000_2AFA_12AFA;
    }
    label_1000_2AF7_12AF7:
    // POP AX (1000_2AF7 / 0x12AF7)
    AX = Stack.Pop();
    // CLC  (1000_2AF8 / 0x12AF8)
    CarryFlag = false;
    // RET  (1000_2AF9 / 0x12AF9)
    return NearRet();
    label_1000_2AFA_12AFA:
    // ADD SP,0x2 (1000_2AFA / 0x12AFA)
    // SP += 0x2;
    SP = Alu.Add16(SP, 0x2);
    // CALL 0x1000:dbb2 (1000_2AFD / 0x12AFD)
    NearCall(cs1, 0x2B00, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_2B00_12B00(0);
  }
  
  public Action unknown_1000_2B00_12B00(int gotoTarget) {
    label_1000_2B00_12B00:
    // PUSH word ptr [0x11ce] (1000_2B00 / 0x12B00)
    Stack.Push(UInt16[DS, 0x11CE]);
    // OR DI,DI (1000_2B04 / 0x12B04)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:2b0d (1000_2B06 / 0x12B06)
    if(ZeroFlag) {
      goto label_1000_2B0D_12B0D;
    }
    // PUSH AX (1000_2B08 / 0x12B08)
    Stack.Push(AX);
    // CALL 0x1000:331e (1000_2B09 / 0x12B09)
    NearCall(cs1, 0x2B0C, unknown_1000_331E_1331E);
    // POP AX (1000_2B0C / 0x12B0C)
    AX = Stack.Pop();
    label_1000_2B0D_12B0D:
    // MOV [0xea],AL (1000_2B0D / 0x12B0D)
    UInt8[DS, 0xEA] = AL;
    // MOV AL,AH (1000_2B10 / 0x12B10)
    AL = AH;
    // XOR AH,AH (1000_2B12 / 0x12B12)
    AH = 0;
    // CALL 0x1000:96d8 (1000_2B14 / 0x12B14)
    NearCall(cs1, 0x2B17, unknown_1000_96D8_196D8);
    // CALL 0x1000:9945 (1000_2B17 / 0x12B17)
    NearCall(cs1, 0x2B1A, unknown_1000_9945_19945);
    // MOV byte ptr [0xea],0xff (1000_2B1A / 0x12B1A)
    UInt8[DS, 0xEA] = 0xFF;
    // MOV AL,0x1 (1000_2B1F / 0x12B1F)
    AL = 0x1;
    // CALL 0x1000:9ef1 (1000_2B21 / 0x12B21)
    NearCall(cs1, 0x2B24, unknown_1000_9EF1_19EF1);
    // POP DI (1000_2B24 / 0x12B24)
    DI = Stack.Pop();
    // CALL 0x1000:331e (1000_2B25 / 0x12B25)
    NearCall(cs1, 0x2B28, unknown_1000_331E_1331E);
    // STC  (1000_2B28 / 0x12B28)
    CarryFlag = true;
    // RET  (1000_2B29 / 0x12B29)
    return NearRet();
  }
  
  public Action unknown_1000_2B2A_12B2A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3542: goto label_1000_3542_13542;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2B2A_12B2A:
    // MOV AL,[0x46d9] (1000_2B2A / 0x12B2A)
    AL = UInt8[DS, 0x46D9];
    // OR AL,byte ptr [0x4774] (1000_2B2D / 0x12B2D)
    // AL |= UInt8[DS, 0x4774];
    AL = Alu.Or8(AL, UInt8[DS, 0x4774]);
    // OR AL,byte ptr [0x11c9] (1000_2B31 / 0x12B31)
    // AL |= UInt8[DS, 0x11C9];
    AL = Alu.Or8(AL, UInt8[DS, 0x11C9]);
    // JNZ 0x1000:2b8f (1000_2B35 / 0x12B35)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // CALL 0x1000:d41b (1000_2B37 / 0x12B37)
    NearCall(cs1, 0x2B3A, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1f0e (1000_2B3A / 0x12B3A)
    Alu.Sub16(BP, 0x1F0E);
    // JNZ 0x1000:2b8f (1000_2B3E / 0x12B3E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // CMP byte ptr [0xfb],0x0 (1000_2B40 / 0x12B40)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:2b8f (1000_2B45 / 0x12B45)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // MOV AX,[0xce7a] (1000_2B47 / 0x12B47)
    AX = UInt16[DS, 0xCE7A];
    // CMP byte ptr [0x2a],0x14 (1000_2B4A / 0x12B4A)
    Alu.Sub8(UInt8[DS, 0x2A], 0x14);
    // JC 0x1000:2b8f (1000_2B4F / 0x12B4F)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // JZ 0x1000:2ba1 (1000_2B51 / 0x12B51)
    if(ZeroFlag) {
      goto label_1000_2BA1_12BA1;
    }
    // CMP byte ptr [0x1190],0x0 (1000_2B53 / 0x12B53)
    Alu.Sub8(UInt8[DS, 0x1190], 0x0);
    // JZ 0x1000:2b8f (1000_2B58 / 0x12B58)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // SUB AX,word ptr [0xdc5a] (1000_2B5A / 0x12B5A)
    // AX -= UInt16[DS, 0xDC5A];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDC5A]);
    // CMP AX,0x32 (1000_2B5E / 0x12B5E)
    Alu.Sub16(AX, 0x32);
    // JC 0x1000:2b8f (1000_2B61 / 0x12B61)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // CALL 0x1000:2ad8 (1000_2B63 / 0x12B63)
    NearCall(cs1, 0x2B66, unknown_1000_2AD8_12AD8);
    // JNC 0x1000:2b70 (1000_2B66 / 0x12B66)
    if(!CarryFlag) {
      goto label_1000_2B70_12B70;
    }
    // MOV byte ptr [0x23],0x0 (1000_2B68 / 0x12B68)
    UInt8[DS, 0x23] = 0x0;
    // JMP 0x1000:3542 (1000_2B6D / 0x12B6D)
    goto label_1000_3542_13542;
    label_1000_2B70_12B70:
    // CMP byte ptr [0x2b],0x0 (1000_2B70 / 0x12B70)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:2bd2 (1000_2B75 / 0x12B75)
    if(!ZeroFlag) {
      goto label_1000_2BD2_12BD2;
    }
    // MOV BL,0x28 (1000_2B77 / 0x12B77)
    BL = 0x28;
    // CMP AX,0x96 (1000_2B79 / 0x12B79)
    Alu.Sub16(AX, 0x96);
    // JC 0x1000:2b90 (1000_2B7C / 0x12B7C)
    if(CarryFlag) {
      goto label_1000_2B90_12B90;
    }
    // CMP AX,0xfa (1000_2B7E / 0x12B7E)
    Alu.Sub16(AX, 0xFA);
    // JC 0x1000:2b8f (1000_2B81 / 0x12B81)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // CMP AX,0x15e (1000_2B83 / 0x12B83)
    Alu.Sub16(AX, 0x15E);
    // MOV BL,0x26 (1000_2B86 / 0x12B86)
    BL = 0x26;
    // JC 0x1000:2b90 (1000_2B88 / 0x12B88)
    if(CarryFlag) {
      goto label_1000_2B90_12B90;
    }
    // CMP AX,0x1c2 (1000_2B8A / 0x12B8A)
    Alu.Sub16(AX, 0x1C2);
    // JNC 0x1000:2bd2 (1000_2B8D / 0x12B8D)
    if(!CarryFlag) {
      goto label_1000_2BD2_12BD2;
    }
    label_1000_2B8F_12B8F:
    // RET  (1000_2B8F / 0x12B8F)
    return NearRet();
    label_1000_2B90_12B90:
    // PUSH BX (1000_2B90 / 0x12B90)
    Stack.Push(BX);
    // CALL 0x1000:dbb2 (1000_2B91 / 0x12B91)
    NearCall(cs1, 0x2B94, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:c49a (1000_2B94 / 0x12B94)
    NearCall(cs1, 0x2B97, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A);
    // POP AX (1000_2B97 / 0x12B97)
    AX = Stack.Pop();
    // MOV BP,0xf66 (1000_2B98 / 0x12B98)
    BP = 0xF66;
    // CALL 0x1000:c108 (1000_2B9B / 0x12B9B)
    NearCall(cs1, 0x2B9E, transition_ida_1000_C108_1C108);
    // JMP 0x1000:dbec (1000_2B9E / 0x12B9E)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
    label_1000_2BA1_12BA1:
    // CMP word ptr [0x10],0x0 (1000_2BA1 / 0x12BA1)
    Alu.Sub16(UInt16[DS, 0x10], 0x0);
    // JNZ 0x1000:2b8f (1000_2BA6 / 0x12BA6)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // CMP byte ptr [0x8],0xff (1000_2BA8 / 0x12BA8)
    Alu.Sub8(UInt8[DS, 0x8], 0xFF);
    // JNZ 0x1000:2b8f (1000_2BAD / 0x12BAD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // SUB AX,word ptr [0xdc5a] (1000_2BAF / 0x12BAF)
    // AX -= UInt16[DS, 0xDC5A];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDC5A]);
    // CMP AX,0x3e8 (1000_2BB3 / 0x12BB3)
    Alu.Sub16(AX, 0x3E8);
    // JC 0x1000:2b8f (1000_2BB6 / 0x12BB6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_2B8F / 0x12B8F)
      return NearRet();
    }
    // ADD word ptr [0xdc5a],0x3b6 (1000_2BB8 / 0x12BB8)
    // UInt16[DS, 0xDC5A] += 0x3B6;
    UInt16[DS, 0xDC5A] = Alu.Add16(UInt16[DS, 0xDC5A], 0x3B6);
    // CALL 0x1000:1071 (1000_2BBE / 0x12BBE)
    NearCall(cs1, 0x2BC1, unknown_1000_1071_11071);
    // CALL 0x1000:b17a (1000_2BC1 / 0x12BC1)
    NearCall(cs1, 0x2BC4, unknown_1000_B17A_1B17A);
    label_1000_2BC4_12BC4:
    // CALL 0x1000:2b2a (1000_2BC4 / 0x12BC4)
    NearCall(cs1, 0x2BC7, unknown_1000_2B2A_12B2A);
    // CMP byte ptr [0xea],0xff (1000_2BC7 / 0x12BC7)
    Alu.Sub8(UInt8[DS, 0xEA], 0xFF);
    // JNZ 0x1000:2bc4 (1000_2BCC / 0x12BCC)
    if(!ZeroFlag) {
      goto label_1000_2BC4_12BC4;
    }
    // RET  (1000_2BCE / 0x12BCE)
    return NearRet();
    label_1000_2BCF_12BCF:
    // JMP 0x1000:2a34 (1000_2BCF / 0x12BCF)
    // Jump converted to entry function call
    return unknown_1000_2A34_12A34(0);
    label_1000_2BD2_12BD2:
    // CALL 0x1000:dbb2 (1000_2BD2 / 0x12BD2)
    NearCall(cs1, 0x2BD5, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:ad5e (1000_2BD5 / 0x12BD5)
    NearCall(cs1, 0x2BD8, unknown_1000_AD5E_1AD5E);
    // MOV DI,word ptr [0x1193] (1000_2BD8 / 0x12BD8)
    DI = UInt16[DS, 0x1193];
    // OR DI,DI (1000_2BDC / 0x12BDC)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:2bf4 (1000_2BDE / 0x12BDE)
    if(ZeroFlag) {
      goto label_1000_2BF4_12BF4;
    }
    // MOV AX,DI (1000_2BE0 / 0x12BE0)
    AX = DI;
    // SUB AX,0x100 (1000_2BE2 / 0x12BE2)
    // AX -= 0x100;
    AX = Alu.Sub16(AX, 0x100);
    // CMP AX,0x7aa (1000_2BE5 / 0x12BE5)
    Alu.Sub16(AX, 0x7AA);
    // JC 0x1000:2bf1 (1000_2BE8 / 0x12BE8)
    if(CarryFlag) {
      goto label_1000_2BF1_12BF1;
    }
    // MOV byte ptr [0x1193],0x0 (1000_2BEA / 0x12BEA)
    UInt8[DS, 0x1193] = 0x0;
    // JMP 0x1000:2bf4 (1000_2BEF / 0x12BEF)
    goto label_1000_2BF4_12BF4;
    label_1000_2BF1_12BF1:
    // CALL 0x1000:331e (1000_2BF1 / 0x12BF1)
    NearCall(cs1, 0x2BF4, unknown_1000_331E_1331E);
    label_1000_2BF4_12BF4:
    // MOV AX,[0x1191] (1000_2BF4 / 0x12BF4)
    AX = UInt16[DS, 0x1191];
    // MOV [0xea],AL (1000_2BF7 / 0x12BF7)
    UInt8[DS, 0xEA] = AL;
    // CMP AL,0x1 (1000_2BFA / 0x12BFA)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:2c01 (1000_2BFC / 0x12BFC)
    if(!ZeroFlag) {
      goto label_1000_2C01_12C01;
    }
    // MOV [0xeb],AL (1000_2BFE / 0x12BFE)
    UInt8[DS, 0xEB] = AL;
    label_1000_2C01_12C01:
    // MOV AL,AH (1000_2C01 / 0x12C01)
    AL = AH;
    // XOR AH,AH (1000_2C03 / 0x12C03)
    AH = 0;
    // MOV DI,word ptr [0x1193] (1000_2C05 / 0x12C05)
    DI = UInt16[DS, 0x1193];
    // CMP AX,0x10 (1000_2C09 / 0x12C09)
    Alu.Sub16(AX, 0x10);
    // JNC 0x1000:2bcf (1000_2C0C / 0x12C0C)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:2a34 (1000_2BCF / 0x12BCF)
      // Jump converted to entry function call
      return unknown_1000_2A34_12A34(0);
    }
    // CMP AL,0xe (1000_2C0E / 0x12C0E)
    Alu.Sub8(AL, 0xE);
    // JNZ 0x1000:2c16 (1000_2C10 / 0x12C10)
    if(!ZeroFlag) {
      goto label_1000_2C16_12C16;
    }
    // OR DI,DI (1000_2C12 / 0x12C12)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:2bcf (1000_2C14 / 0x12C14)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:2a34 (1000_2BCF / 0x12BCF)
      // Jump converted to entry function call
      return unknown_1000_2A34_12A34(0);
    }
    label_1000_2C16_12C16:
    // MOV [0x47c4],AX (1000_2C16 / 0x12C16)
    UInt16[DS, 0x47C4] = AX;
    // OR DI,DI (1000_2C19 / 0x12C19)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:2c47 (1000_2C1B / 0x12C1B)
    if(ZeroFlag) {
      goto label_1000_2C47_12C47;
    }
    // CALL 0x1000:331e (1000_2C1D / 0x12C1D)
    NearCall(cs1, 0x2C20, unknown_1000_331E_1331E);
    // CALL 0x1000:2e98 (1000_2C20 / 0x12C20)
    NearCall(cs1, 0x2C23, unknown_1000_2E98_12E98);
    // CMP word ptr [0x47c4],0xe (1000_2C23 / 0x12C23)
    Alu.Sub16(UInt16[DS, 0x47C4], 0xE);
    // JC 0x1000:2c47 (1000_2C28 / 0x12C28)
    if(CarryFlag) {
      goto label_1000_2C47_12C47;
    }
    // MOV AL,0x3 (1000_2C2A / 0x12C2A)
    AL = 0x3;
    // CMP byte ptr [0xea],0xe (1000_2C2C / 0x12C2C)
    Alu.Sub8(UInt8[DS, 0xEA], 0xE);
    // JZ 0x1000:2c3a (1000_2C31 / 0x12C31)
    if(ZeroFlag) {
      goto label_1000_2C3A_12C3A;
    }
    // MOV AL,byte ptr [DI + 0x9] (1000_2C33 / 0x12C33)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // OR AL,AL (1000_2C36 / 0x12C36)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:2c47 (1000_2C38 / 0x12C38)
    if(ZeroFlag) {
      goto label_1000_2C47_12C47;
    }
    label_1000_2C3A_12C3A:
    // CALL 0x1000:6906 (1000_2C3A / 0x12C3A)
    NearCall(cs1, 0x2C3D, unknown_1000_6906_16906);
    // MOV word ptr [0x47c4],0xe (1000_2C3D / 0x12C3D)
    UInt16[DS, 0x47C4] = 0xE;
    // MOV word ptr [0x4756],SI (1000_2C43 / 0x12C43)
    UInt16[DS, 0x4756] = SI;
    label_1000_2C47_12C47:
    // CALL 0x1000:2c92 (1000_2C47 / 0x12C47)
    NearCall(cs1, 0x2C4A, unknown_1000_2C92_12C92);
    // MOV AL,0x1 (1000_2C4A / 0x12C4A)
    AL = 0x1;
    // CALL 0x1000:9ef1 (1000_2C4C / 0x12C4C)
    NearCall(cs1, 0x2C4F, unknown_1000_9EF1_19EF1);
    // CALL 0x1000:2a34 (1000_2C4F / 0x12C4F)
    NearCall(cs1, 0x2C52, unknown_1000_2A34_12A34);
    // XOR AX,AX (1000_2C52 / 0x12C52)
    AX = 0;
    // MOV [0x1f0f],AL (1000_2C54 / 0x12C54)
    UInt8[DS, 0x1F0F] = AL;
    // MOV [0x1f10],AX (1000_2C57 / 0x12C57)
    UInt16[DS, 0x1F10] = AX;
    // CALL 0x1000:d397 (1000_2C5A / 0x12C5A)
    NearCall(cs1, 0x2C5D, unknown_1000_D397_1D397);
    // CALL 0x1000:b2b9 (1000_2C5D / 0x12C5D)
    NearCall(cs1, 0x2C60, Inc2788_1000_B2B9_1B2B9);
    // MOV AX,0xbb8 (1000_2C60 / 0x12C60)
    AX = 0xBB8;
    // CALL 0x1000:ddb0 (1000_2C63 / 0x12C63)
    NearCall(cs1, 0x2C66, unknown_1000_DDB0_1DDB0);
    // CALL 0x1000:b2b3 (1000_2C66 / 0x12C66)
    NearCall(cs1, 0x2C69, unknown_1000_B2B3_1B2B3);
    // MOV SI,0x2cc7 (1000_2C69 / 0x12C69)
    SI = 0x2CC7;
    // CALL 0x1000:da5f (1000_2C6C / 0x12C6C)
    NearCall(cs1, 0x2C6F, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:98e6 (1000_2C6F / 0x12C6F)
    NearCall(cs1, 0x2C72, unknown_1000_98E6_198E6);
    // XOR AX,AX (1000_2C72 / 0x12C72)
    AX = 0;
    // MOV [0x479e],AX (1000_2C74 / 0x12C74)
    UInt16[DS, 0x479E] = AX;
    // MOV [0x4540],AX (1000_2C77 / 0x12C77)
    UInt16[DS, 0x4540] = AX;
    // MOV byte ptr [0xea],0xff (1000_2C7A / 0x12C7A)
    UInt8[DS, 0xEA] = 0xFF;
    // MOV byte ptr [0xe8],0xa (1000_2C7F / 0x12C7F)
    UInt8[DS, 0xE8] = 0xA;
    // MOV word ptr [0xdc30],0x0 (1000_2C84 / 0x12C84)
    UInt16[DS, 0xDC30] = 0x0;
    // MOV AL,0x6 (1000_2C8A / 0x12C8A)
    AL = 0x6;
    // CALL 0x1000:189a (1000_2C8C / 0x12C8C)
    NearCall(cs1, 0x2C8F, unknown_1000_189A_1189A);
    // JMP 0x1000:c412 (1000_2C8F / 0x12C8F)
    // Jump converted to entry function call
    return unknown_1000_C412_1C412(0);
    label_1000_3542_13542:
    // MOV AX,[0x47c4] (1000_3542 / 0x13542)
    AX = UInt16[DS, 0x47C4];
    // MOV DI,word ptr [0x114e] (1000_3545 / 0x13545)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:2a51 (1000_3549 / 0x13549)
    NearCall(cs1, 0x354C, unknown_1000_2A51_12A51);
    // MOV byte ptr [0xe7],0x0 (1000_354C / 0x1354C)
    UInt8[DS, 0xE7] = 0x0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_3551_13551(0);
  }
  
  public Action unknown_1000_2C92_12C92(int gotoTarget) {
    label_1000_2C92_12C92:
    // MOV AL,0x6 (1000_2C92 / 0x12C92)
    AL = 0x6;
    // MOV BP,0x2c9a (1000_2C94 / 0x12C94)
    BP = 0x2C9A;
    // JMP 0x1000:c108 (1000_2C97 / 0x12C97)
    // Jump converted to entry function call
    return transition_ida_1000_C108_1C108(0);
  }
  
  public Action unknown_1000_2C9A_12C9A(int gotoTarget) {
    label_1000_2C9A_12C9A:
    // MOV byte ptr [0xe8],0x0 (1000_2C9A / 0x12C9A)
    UInt8[DS, 0xE8] = 0x0;
    // MOV AL,0x23 (1000_2C9F / 0x12C9F)
    AL = 0x23;
    // CALL 0x1000:c2f2 (1000_2CA1 / 0x12CA1)
    NearCall(cs1, 0x2CA4, unknown_1000_C2F2_1C2F2);
    // CALL 0x1000:c412 (1000_2CA4 / 0x12CA4)
    NearCall(cs1, 0x2CA7, unknown_1000_C412_1C412);
    // MOV AX,[0x47c4] (1000_2CA7 / 0x12CA7)
    AX = UInt16[DS, 0x47C4];
    // CALL 0x1000:96d8 (1000_2CAA / 0x12CAA)
    NearCall(cs1, 0x2CAD, unknown_1000_96D8_196D8);
    // XOR AX,AX (1000_2CAD / 0x12CAD)
    AX = 0;
    // MOV [0x1bea],AX (1000_2CAF / 0x12CAF)
    UInt16[DS, 0x1BEA] = AX;
    // MOV [0x1bf8],AX (1000_2CB2 / 0x12CB2)
    UInt16[DS, 0x1BF8] = AX;
    // MOV [0x46df],AL (1000_2CB5 / 0x12CB5)
    UInt8[DS, 0x46DF] = AL;
    // MOV SI,0xc0b6 (1000_2CB8 / 0x12CB8)
    SI = 0xC0B6;
    // CALL 0x1000:da5f (1000_2CBB / 0x12CBB)
    NearCall(cs1, 0x2CBE, unknown_1000_DA5F_1DA5F);
    // MOV SI,0x2cc7 (1000_2CBE / 0x12CBE)
    SI = 0x2CC7;
    // MOV BP,0x6 (1000_2CC1 / 0x12CC1)
    BP = 0x6;
    // JMP 0x1000:da25 (1000_2CC4 / 0x12CC4)
    // Jump converted to entry function call
    return unknown_1000_DA25_1DA25(0);
  }
  
  public Action unknown_1000_2CC7_12CC7(int gotoTarget) {
    label_1000_2CC7_12CC7:
    // MOV AL,0xa (1000_2CC7 / 0x12CC7)
    AL = 0xA;
    // MOV SI,0x1478 (1000_2CC9 / 0x12CC9)
    SI = 0x1478;
    // JMP 0x1000:c0d5 (1000_2CCC / 0x12CCC)
    // Jump converted to entry function call
    return unknown_1000_C0D5_1C0D5(0);
  }
  
  public Action open_SAL_resource_ida_1000_2D74_12D74(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2D74: goto label_1000_2D74_12D74;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2D74_12D74:
    // MOV SI,word ptr [0x114e] (1000_2D74 / 0x12D74)
    SI = UInt16[DS, 0x114E];
    // CMP SI,0x100 (1000_2D78 / 0x12D78)
    Alu.Sub16(SI, 0x100);
    // JC 0x1000:2db0 (1000_2D7C / 0x12D7C)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_2DB0 / 0x12DB0)
      return NearRet();
    }
    // XOR AX,AX (1000_2D7E / 0x12D7E)
    AX = 0;
    // CALL 0x1000:5e4f (1000_2D80 / 0x12D80)
    NearCall(cs1, 0x2D83, calc_SAL_index_ida_1000_5E4F_15E4F);
    // CMP AX,0x2 (1000_2D83 / 0x12D83)
    Alu.Sub16(AX, 0x2);
    // JNC 0x1000:2d8f (1000_2D86 / 0x12D86)
    if(!CarryFlag) {
      goto label_1000_2D8F_12D8F;
    }
    // TEST byte ptr [0x4732],0x1 (1000_2D88 / 0x12D88)
    Alu.And8(UInt8[DS, 0x4732], 0x1);
    // JNZ 0x1000:2db0 (1000_2D8D / 0x12D8D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2DB0 / 0x12DB0)
      return NearRet();
    }
    label_1000_2D8F_12D8F:
    // CMP AX,0x4 (1000_2D8F / 0x12D8F)
    Alu.Sub16(AX, 0x4);
    // JA 0x1000:2db0 (1000_2D92 / 0x12D92)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_2DB0 / 0x12DB0)
      return NearRet();
    }
    // JNZ 0x1000:2d97 (1000_2D94 / 0x12D94)
    if(!ZeroFlag) {
      goto label_1000_2D97_12D97;
    }
    // DEC AX (1000_2D96 / 0x12D96)
    AX = Alu.Dec16(AX);
    label_1000_2D97_12D97:
    // CMP byte ptr [0x144c],AL (1000_2D97 / 0x12D97)
    Alu.Sub8(UInt8[DS, 0x144C], AL);
    // JZ 0x1000:2db0 (1000_2D9B / 0x12D9B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2DB0 / 0x12DB0)
      return NearRet();
    }
    // MOV [0x144c],AL (1000_2D9D / 0x12D9D)
    UInt8[DS, 0x144C] = AL;
    // ADD AX,0xa1 (1000_2DA0 / 0x12DA0)
    // AX += 0xA1;
    AX = Alu.Add16(AX, 0xA1);
    // PUSH DS (1000_2DA3 / 0x12DA3)
    Stack.Push(DS);
    // POP ES (1000_2DA4 / 0x12DA4)
    ES = Stack.Pop();
    // MOV DI,0xbc6e (1000_2DA5 / 0x12DA5)
    DI = 0xBC6E;
    // MOV SI,AX (1000_2DA8 / 0x12DA8)
    SI = AX;
    // CALL 0x1000:f0b9 (1000_2DAA / 0x12DAA)
    NearCall(cs1, 0x2DAD, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // CALL 0x1000:0098 (1000_2DAD / 0x12DAD)
    NearCall(cs1, 0x2DB0, ConvertIndexTableToPointerTable_1000_0098_10098);
    label_1000_2DB0_12DB0:
    // RET  (1000_2DB0 / 0x12DB0)
    return NearRet();
  }
  
  public Action unknown_1000_2DB1_12DB1(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2DB1: goto label_1000_2DB1_12DB1;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2DB1_12DB1:
    // MOV BP,0xd717 (1000_2DB1 / 0x12DB1)
    BP = 0xD717;
    // CALL 0x1000:c097 (1000_2DB4 / 0x12DB4)
    NearCall(cs1, 0x2DB7, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // CALL 0x1000:d95b (1000_2DB7 / 0x12DB7)
    NearCall(cs1, 0x2DBA, SetMapClickHandlerAddressToInGame_1000_D95B_1D95B);
    // MOV byte ptr [0x47a6],0xff (1000_2DBA / 0x12DBA)
    UInt8[DS, 0x47A6] = 0xFF;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_2DBF_12DBF(0);
  }
  
  public Action unknown_1000_2DBF_12DBF(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2DBF: goto label_1000_2DBF_12DBF;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2DBF_12DBF:
    // CALL 0x1000:2d74 (1000_2DBF / 0x12DBF)
    NearCall(cs1, 0x2DC2, open_SAL_resource_ida_1000_2D74_12D74);
    // XOR AX,AX (1000_2DC2 / 0x12DC2)
    AX = 0;
    // MOV [0xdce6],AL (1000_2DC4 / 0x12DC4)
    UInt8[DS, 0xDCE6] = AL;
    // MOV [0x47a4],AL (1000_2DC7 / 0x12DC7)
    UInt8[DS, 0x47A4] = AL;
    // MOV [0x47aa],AX (1000_2DCA / 0x12DCA)
    UInt16[DS, 0x47AA] = AX;
    // MOV BP,0x2eb2 (1000_2DCD / 0x12DCD)
    BP = 0x2EB2;
    // CALL 0x1000:c097 (1000_2DD0 / 0x12DD0)
    NearCall(cs1, 0x2DD3, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_2DD3_12DD3(0);
  }
  
  public Action unknown_1000_2DD3_12DD3(int gotoTarget) {
    label_1000_2DD3_12DD3:
    // CMP byte ptr [0x2b],0x0 (1000_2DD3 / 0x12DD3)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:2dfb (1000_2DD8 / 0x12DD8)
    if(ZeroFlag) {
      goto label_1000_2DFB_12DFB;
    }
    // MOV byte ptr [0x4732],0x0 (1000_2DDA / 0x12DDA)
    UInt8[DS, 0x4732] = 0x0;
    // CALL 0x1000:2d74 (1000_2DDF / 0x12DDF)
    NearCall(cs1, 0x2DE2, open_SAL_resource_ida_1000_2D74_12D74);
    // OR byte ptr [0x11bc],0x1 (1000_2DE2 / 0x12DE2)
    // UInt8[DS, 0x11BC] |= 0x1;
    UInt8[DS, 0x11BC] = Alu.Or8(UInt8[DS, 0x11BC], 0x1);
    // MOV byte ptr [0x46df],0x0 (1000_2DE7 / 0x12DE7)
    UInt8[DS, 0x46DF] = 0x0;
    // CALL 0x1000:0acd (1000_2DEC / 0x12DEC)
    throw FailAsUntested("Could not find a valid function at address 1000_0ACD / 0x10ACD");
    // CALL 0x1000:1797 (1000_2DEF / 0x12DEF)
    NearCall(cs1, 0x2DF2, unknown_1000_1797_11797);
    // CALL 0x1000:c4cd (1000_2DF2 / 0x12DF2)
    NearCall(cs1, 0x2DF5, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // CALL 0x1000:c0f4 (1000_2DF5 / 0x12DF5)
    NearCall(cs1, 0x2DF8, unknown_1000_C0F4_1C0F4);
    // JMP 0x1000:17e6 (1000_2DF8 / 0x12DF8)
    // Jump converted to entry function call
    return unknown_1000_17E6_117E6(0);
    label_1000_2DFB_12DFB:
    // TEST byte ptr [0x4732],0x1 (1000_2DFB / 0x12DFB)
    Alu.And8(UInt8[DS, 0x4732], 0x1);
    // JZ 0x1000:2e05 (1000_2E00 / 0x12E00)
    if(ZeroFlag) {
      goto label_1000_2E05_12E05;
    }
    // CALL 0x1000:488a (1000_2E02 / 0x12E02)
    NearCall(cs1, 0x2E05, unknown_1000_488A_1488A);
    label_1000_2E05_12E05:
    // XOR AX,AX (1000_2E05 / 0x12E05)
    AX = 0;
    // MOV [0x14],AX (1000_2E07 / 0x12E07)
    UInt16[DS, 0x14] = AX;
    // MOV [0x46df],AL (1000_2E0A / 0x12E0A)
    UInt8[DS, 0x46DF] = AL;
    // CALL 0x1000:c07c (1000_2E0D / 0x12E0D)
    NearCall(cs1, 0x2E10, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:5ba0 (1000_2E10 / 0x12E10)
    NearCall(cs1, 0x2E13, MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0);
    // CALL 0x1000:37b2 (1000_2E13 / 0x12E13)
    NearCall(cs1, 0x2E16, unknown_1000_37B2_137B2);
    // TEST byte ptr [0x11c9],0x3 (1000_2E16 / 0x12E16)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JNZ 0x1000:2e20 (1000_2E1B / 0x12E1B)
    if(!ZeroFlag) {
      goto label_1000_2E20_12E20;
    }
    // CALL 0x1000:c412 (1000_2E1D / 0x12E1D)
    NearCall(cs1, 0x2E20, unknown_1000_C412_1C412);
    label_1000_2E20_12E20:
    // CALL 0x1000:ad5e (1000_2E20 / 0x12E20)
    NearCall(cs1, 0x2E23, unknown_1000_AD5E_1AD5E);
    // CALL 0x1000:1834 (1000_2E23 / 0x12E23)
    NearCall(cs1, 0x2E26, unknown_1000_1834_11834);
    // CALL 0x1000:1797 (1000_2E26 / 0x12E26)
    NearCall(cs1, 0x2E29, unknown_1000_1797_11797);
    // MOV AL,[0x46df] (1000_2E29 / 0x12E29)
    AL = UInt8[DS, 0x46DF];
    // MOV AH,AL (1000_2E2C / 0x12E2C)
    AH = AL;
    // XCHG byte ptr [0x46e0],AL (1000_2E2E / 0x12E2E)
    byte tmp_1000_2E2E = UInt8[DS, 0x46E0];
    UInt8[DS, 0x46E0] = AL;
    AL = tmp_1000_2E2E;
    // CMP AL,AH (1000_2E32 / 0x12E32)
    Alu.Sub8(AL, AH);
    // JZ 0x1000:2e4c (1000_2E34 / 0x12E34)
    if(ZeroFlag) {
      goto label_1000_2E4C_12E4C;
    }
    // MOV AX,[0xdbd6] (1000_2E36 / 0x12E36)
    AX = UInt16[DS, 0xDBD6];
    // CMP AX,word ptr [0xdbd8] (1000_2E39 / 0x12E39)
    Alu.Sub16(AX, UInt16[DS, 0xDBD8]);
    // JZ 0x1000:2e52 (1000_2E3D / 0x12E3D)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_2E52_12E52(0);
    }
    // MOV AL,0x10 (1000_2E3F / 0x12E3F)
    AL = 0x10;
    // MOV BP,0xf66 (1000_2E41 / 0x12E41)
    BP = 0xF66;
    // CALL 0x1000:c108 (1000_2E44 / 0x12E44)
    NearCall(cs1, 0x2E47, transition_ida_1000_C108_1C108);
    // CALL 0x1000:ae04 (1000_2E47 / 0x12E47)
    NearCall(cs1, 0x2E4A, unknown_1000_AE04_1AE04);
    // JMP 0x1000:2e52 (1000_2E4A / 0x12E4A)
    // Jump converted to entry function call
    return unknown_1000_2E52_12E52(0);
    label_1000_2E4C_12E4C:
    // CALL 0x1000:c0f4 (1000_2E4C / 0x12E4C)
    NearCall(cs1, 0x2E4F, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c4cd (1000_2E4F / 0x12E4F)
    NearCall(cs1, 0x2E52, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_2E52_12E52(0);
  }
  
  public Action unknown_1000_2E52_12E52(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2E52: goto label_1000_2E52_12E52;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2E52_12E52:
    // CALL 0x1000:35ad (1000_2E52 / 0x12E52)
    NearCall(cs1, 0x2E55, unknown_1000_35AD_135AD);
    // MOV AX,[0xce7a] (1000_2E55 / 0x12E55)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc5a],AX (1000_2E58 / 0x12E58)
    UInt16[DS, 0xDC5A] = AX;
    // CMP byte ptr [0x47a7],0x0 (1000_2E5B / 0x12E5B)
    Alu.Sub8(UInt8[DS, 0x47A7], 0x0);
    // JNZ 0x1000:2e97 (1000_2E60 / 0x12E60)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2E97 / 0x12E97)
      return NearRet();
    }
    // MOV AL,[0x4735] (1000_2E62 / 0x12E62)
    AL = UInt8[DS, 0x4735];
    // OR AL,AL (1000_2E65 / 0x12E65)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:2e6c (1000_2E67 / 0x12E67)
    if(!SignFlag) {
      goto label_1000_2E6C_12E6C;
    }
    // JMP 0x1000:3723 (1000_2E69 / 0x12E69)
    goto label_1000_3723_13723;
    label_1000_2E6C_12E6C:
    // CMP byte ptr [0x8],0xff (1000_2E6C / 0x12E6C)
    Alu.Sub8(UInt8[DS, 0x8], 0xFF);
    // JZ 0x1000:2e7d (1000_2E71 / 0x12E71)
    if(ZeroFlag) {
      goto label_1000_2E7D_12E7D;
    }
    // CMP byte ptr [0x4774],0x0 (1000_2E73 / 0x12E73)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JNZ 0x1000:2e97 (1000_2E78 / 0x12E78)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2E97 / 0x12E97)
      return NearRet();
    }
    // JMP 0x1000:17e6 (1000_2E7A / 0x12E7A)
    // Jump converted to entry function call
    return unknown_1000_17E6_117E6(0);
    label_1000_2E7D_12E7D:
    // CMP byte ptr [0x11c9],0x0 (1000_2E7D / 0x12E7D)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:2e97 (1000_2E82 / 0x12E82)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_2E97 / 0x12E97)
      return NearRet();
    }
    // MOV SI,word ptr [0x47aa] (1000_2E84 / 0x12E84)
    SI = UInt16[DS, 0x47AA];
    // OR SI,SI (1000_2E88 / 0x12E88)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:2e97 (1000_2E8A / 0x12E8A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2E97 / 0x12E97)
      return NearRet();
    }
    // XOR AX,AX (1000_2E8C / 0x12E8C)
    AX = 0;
    // MOV AL,byte ptr [SI + 0xe] (1000_2E8E / 0x12E8E)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV [0x47c4],AX (1000_2E91 / 0x12E91)
    UInt16[DS, 0x47C4] = AX;
    // CALL 0x1000:978e (1000_2E94 / 0x12E94)
    NearCall(cs1, 0x2E97, unknown_1000_978E_1978E);
    label_1000_2E97_12E97:
    // RET  (1000_2E97 / 0x12E97)
    return NearRet();
    label_1000_3722_13722:
    // RET  (1000_3722 / 0x13722)
    return NearRet();
    label_1000_3723_13723:
    // AND byte ptr [0x4735],0x7f (1000_3723 / 0x13723)
    // UInt8[DS, 0x4735] &= 0x7F;
    UInt8[DS, 0x4735] = Alu.And8(UInt8[DS, 0x4735], 0x7F);
    // SUB AL,0x94 (1000_3728 / 0x13728)
    // AL -= 0x94;
    AL = Alu.Sub8(AL, 0x94);
    // JC 0x1000:3722 (1000_372A / 0x1372A)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_3722 / 0x13722)
      return NearRet();
    }
    // TEST AL,0xf (1000_372C / 0x1372C)
    Alu.And8(AL, 0xF);
    // JNZ 0x1000:3722 (1000_372E / 0x1372E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_3722 / 0x13722)
      return NearRet();
    }
    // PUSH AX (1000_3730 / 0x13730)
    Stack.Push(AX);
    // CALL 0x1000:dbb2 (1000_3731 / 0x13731)
    NearCall(cs1, 0x3734, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:c07c (1000_3734 / 0x13734)
    NearCall(cs1, 0x3737, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:37ad (1000_3737 / 0x13737)
    NearCall(cs1, 0x373A, unknown_1000_37AD_137AD);
    // CALL 0x1000:c4dd (1000_373A / 0x1373A)
    NearCall(cs1, 0x373D, unknown_1000_C4DD_1C4DD);
    // POP AX (1000_373D / 0x1373D)
    AX = Stack.Pop();
    // XOR AH,AH (1000_373E / 0x1373E)
    AH = 0;
    // MOV CL,0x4 (1000_3740 / 0x13740)
    CL = 0x4;
    // SHR AX,CL (1000_3742 / 0x13742)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // INC AX (1000_3744 / 0x13744)
    AX = Alu.Inc16(AX);
    // CMP AL,0xa (1000_3745 / 0x13745)
    Alu.Sub8(AL, 0xA);
    // JC 0x1000:374b (1000_3747 / 0x13747)
    if(CarryFlag) {
      goto label_1000_374B_1374B;
    }
    // MOV AL,0xa (1000_3749 / 0x13749)
    AL = 0xA;
    label_1000_374B_1374B:
    // XCHG AH,AL (1000_374B / 0x1374B)
    byte tmp_1000_374B = AH;
    AH = AL;
    AL = tmp_1000_374B;
    // CALL 0x1000:e387 (1000_374D / 0x1374D)
    NearCall(cs1, 0x3750, unknown_1000_E387_1E387);
    // CMP byte ptr [0x4735],0x37 (1000_3750 / 0x13750)
    Alu.Sub8(UInt8[DS, 0x4735], 0x37);
    // JC 0x1000:37aa (1000_3755 / 0x13755)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:2db1 (1000_37AA / 0x137AA)
      // Jump converted to entry function call
      return unknown_1000_2DB1_12DB1(0);
    }
    // CALL 0x1000:0e77 (1000_3757 / 0x13757)
    NearCall(cs1, 0x375A, unknown_1000_0E77_10E77);
    // MOV CX,0x5 (1000_375A / 0x1375A)
    CX = 0x5;
    // CALL 0x1000:0fd9 (1000_375D / 0x1375D)
    NearCall(cs1, 0x3760, unknown_1000_0FD9_10FD9);
    // MOV BP,0xc0ad (1000_3760 / 0x13760)
    BP = 0xC0AD;
    // MOV AL,0x34 (1000_3763 / 0x13763)
    AL = 0x34;
    // CALL 0x1000:c108 (1000_3765 / 0x13765)
    NearCall(cs1, 0x3768, transition_ida_1000_C108_1C108);
    // CALL 0x1000:0086 (1000_3768 / 0x13768)
    NearCall(cs1, 0x376B, unknown_1000_0086_10086);
    // MOV BP,0x1a0f (1000_376B / 0x1376B)
    BP = 0x1A0F;
    // CALL 0x1000:c097 (1000_376E / 0x1376E)
    NearCall(cs1, 0x3771, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // MOV SI,word ptr [0x1150] (1000_3771 / 0x13771)
    SI = UInt16[DS, 0x1150];
    // MOV byte ptr [0x47a6],0xff (1000_3775 / 0x13775)
    UInt8[DS, 0x47A6] = 0xFF;
    // MOV BP,0x401f (1000_377A / 0x1377A)
    BP = 0x401F;
    // CALL 0x1000:c097 (1000_377D / 0x1377D)
    NearCall(cs1, 0x3780, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // MOV DX,word ptr [0x4] (1000_3780 / 0x13780)
    DX = UInt16[DS, 0x4];
    // MOV BX,word ptr [0x6] (1000_3784 / 0x13784)
    BX = UInt16[DS, 0x6];
    // CMP DH,0x21 (1000_3788 / 0x13788)
    Alu.Sub8(DH, 0x21);
    // JNC 0x1000:3796 (1000_378B / 0x1378B)
    if(!CarryFlag) {
      goto label_1000_3796_13796;
    }
    // MOV DL,0x2 (1000_378D / 0x1378D)
    DL = 0x2;
    // CMP DH,0x20 (1000_378F / 0x1378F)
    Alu.Sub8(DH, 0x20);
    // JNZ 0x1000:3796 (1000_3792 / 0x13792)
    if(!ZeroFlag) {
      goto label_1000_3796_13796;
    }
    // MOV DL,0xa (1000_3794 / 0x13794)
    DL = 0xA;
    label_1000_3796_13796:
    // MOV BP,0x4057 (1000_3796 / 0x13796)
    BP = 0x4057;
    // MOV AL,0x34 (1000_3799 / 0x13799)
    AL = 0x34;
    // MOV byte ptr [0x47a6],0xff (1000_379B / 0x1379B)
    UInt8[DS, 0x47A6] = 0xFF;
    // CALL 0x1000:c108 (1000_37A0 / 0x137A0)
    NearCall(cs1, 0x37A3, transition_ida_1000_C108_1C108);
    // INC byte ptr [0xe7] (1000_37A3 / 0x137A3)
    UInt8[DS, 0xE7] = Alu.Inc8(UInt8[DS, 0xE7]);
    // JMP 0x1000:35ad (1000_37A7 / 0x137A7)
    // Jump converted to entry function call
    return unknown_1000_35AD_135AD(0);
    label_1000_37AA_137AA:
    // JMP 0x1000:2db1 (1000_37AA / 0x137AA)
    // Jump converted to entry function call
    return unknown_1000_2DB1_12DB1(0);
  }
  
  public Action unknown_1000_2E98_12E98(int gotoTarget) {
    label_1000_2E98_12E98:
    // MOV word ptr [0x47e6],DI (1000_2E98 / 0x12E98)
    UInt16[DS, 0x47E6] = DI;
    // XOR AH,AH (1000_2E9C / 0x12E9C)
    AH = 0;
    // MOV AL,byte ptr [DI] (1000_2E9E / 0x12E9E)
    AL = UInt8[DS, DI];
    // ADD AX,0x0 (1000_2EA0 / 0x12EA0)
    // AX += 0x0;
    AX = Alu.Add16(AX, 0x0);
    // MOV [0x11ed],AX (1000_2EA3 / 0x12EA3)
    UInt16[DS, 0x11ED] = AX;
    // MOV AL,byte ptr [DI + 0x1] (1000_2EA6 / 0x12EA6)
    AL = UInt8[DS, (ushort)(DI + 0x1)];
    // XOR AH,AH (1000_2EA9 / 0x12EA9)
    AH = 0;
    // ADD AX,0xc (1000_2EAB / 0x12EAB)
    // AX += 0xC;
    AX = Alu.Add16(AX, 0xC);
    // MOV [0x11ef],AX (1000_2EAE / 0x12EAE)
    UInt16[DS, 0x11EF] = AX;
    // RET  (1000_2EB1 / 0x12EB1)
    return NearRet();
  }
  
  public Action unknown_1000_2EB2_12EB2(int gotoTarget) {
    label_1000_2EB2_12EB2:
    // CMP byte ptr [0x4774],0x0 (1000_2EB2 / 0x12EB2)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JZ 0x1000:2ec9 (1000_2EB7 / 0x12EB7)
    if(ZeroFlag) {
      goto label_1000_2EC9_12EC9;
    }
    // CALL 0x1000:301a (1000_2EB9 / 0x12EB9)
    NearCall(cs1, 0x2EBC, unknown_1000_301A_1301A);
    // CALL 0x1000:98e6 (1000_2EBC / 0x12EBC)
    NearCall(cs1, 0x2EBF, unknown_1000_98E6_198E6);
    label_1000_2EC9_12EC9:
    // MOV DI,word ptr [0x114e] (1000_2EC9 / 0x12EC9)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:2e98 (1000_2ECD / 0x12ECD)
    NearCall(cs1, 0x2ED0, unknown_1000_2E98_12E98);
    // CALL 0x1000:2efb (1000_2ED0 / 0x12ED0)
    NearCall(cs1, 0x2ED3, unknown_1000_2EFB_12EFB);
    // CMP byte ptr [0x11c9],0x0 (1000_2ED3 / 0x12ED3)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:2edd (1000_2ED8 / 0x12ED8)
    if(!ZeroFlag) {
      goto label_1000_2EDD_12EDD;
    }
    // CALL 0x1000:3090 (1000_2EDA / 0x12EDA)
    NearCall(cs1, 0x2EDD, unknown_1000_3090_13090);
    label_1000_2EDD_12EDD:
    // MOV AX,[0xdc38] (1000_2EDD / 0x12EDD)
    AX = UInt16[DS, 0xDC38];
    // CMP AX,0x74 (1000_2EE0 / 0x12EE0)
    Alu.Sub16(AX, 0x74);
    // JC 0x1000:2eec (1000_2EE3 / 0x12EE3)
    if(CarryFlag) {
      goto label_1000_2EEC_12EEC;
    }
    // MOV AX,0xdbec (1000_2EE5 / 0x12EE5)
    AX = 0xDBEC;
    // PUSH AX (1000_2EE8 / 0x12EE8)
    Stack.Push(AX);
    // CALL 0x1000:dbb2 (1000_2EE9 / 0x12EE9)
    NearCall(cs1, 0x2EEC, call_restore_cursor_ida_1000_DBB2_1DBB2);
    label_1000_2EEC_12EEC:
    // CALL 0x1000:2ffb (1000_2EEC / 0x12EEC)
    NearCall(cs1, 0x2EEF, unknown_1000_2FFB_12FFB);
    // CALL 0x1000:d763 (1000_2EEF / 0x12EEF)
    NearCall(cs1, 0x2EF2, unknown_1000_D763_1D763);
    // MOV BP,0x1f0e (1000_2EF2 / 0x12EF2)
    BP = 0x1F0E;
    // MOV BX,0xf66 (1000_2EF5 / 0x12EF5)
    BX = 0xF66;
    // JMP 0x1000:d338 (1000_2EF8 / 0x12EF8)
    // Jump converted to entry function call
    return unknown_1000_D338_1D338(0);
  }
  
  public Action unknown_1000_2EBF_12EBF(int gotoTarget) {
    label_1000_2EBF_12EBF:
    // MOV BP,word ptr [0x2220] (1000_2EBF / 0x12EBF)
    BP = UInt16[DS, 0x2220];
    // MOV BX,0xf66 (1000_2EC3 / 0x12EC3)
    BX = 0xF66;
    // JMP 0x1000:d338 (1000_2EC6 / 0x12EC6)
    // Jump converted to entry function call
    return unknown_1000_D338_1D338(0);
  }
  
  public Action unknown_1000_2EFB_12EFB(int gotoTarget) {
    label_1000_2EFB_12EFB:
    // PUSH DS (1000_2EFB / 0x12EFB)
    Stack.Push(DS);
    // POP ES (1000_2EFC / 0x12EFC)
    ES = Stack.Pop();
    // MOV DI,0x1f0f (1000_2EFD / 0x12EFD)
    DI = 0x1F0F;
    // XOR AL,AL (1000_2F00 / 0x12F00)
    AL = 0;
    // STOSB ES:DI (1000_2F02 / 0x12F02)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BX,word ptr [0x6] (1000_2F03 / 0x12F03)
    BX = UInt16[DS, 0x6];
    // MOV DX,word ptr [0x4] (1000_2F07 / 0x12F07)
    DX = UInt16[DS, 0x4];
    // CMP BL,0x80 (1000_2F0B / 0x12F0B)
    Alu.Sub8(BL, 0x80);
    // JZ 0x1000:2f13 (1000_2F0E / 0x12F0E)
    if(ZeroFlag) {
      goto label_1000_2F13_12F13;
    }
    // JMP 0x1000:2faa (1000_2F10 / 0x12F10)
    goto label_1000_2FAA_12FAA;
    label_1000_2F13_12F13:
    // MOV SI,0x220c (1000_2F13 / 0x12F13)
    SI = 0x220C;
    // MOVSW ES:DI,SI (1000_2F16 / 0x12F16)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F17 / 0x12F17)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP DL,0x1 (1000_2F18 / 0x12F18)
    Alu.Sub8(DL, 0x1);
    // JNZ 0x1000:2f58 (1000_2F1B / 0x12F1B)
    if(!ZeroFlag) {
      goto label_1000_2F58_12F58;
    }
    // CMP byte ptr [0x2b],0x0 (1000_2F1D / 0x12F1D)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:2f3d (1000_2F22 / 0x12F22)
    if(ZeroFlag) {
      goto label_1000_2F3D_12F3D;
    }
    // MOV SI,0x2218 (1000_2F24 / 0x12F24)
    SI = 0x2218;
    // MOVSW ES:DI,SI (1000_2F27 / 0x12F27)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F28 / 0x12F28)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F29 / 0x12F29)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F2A / 0x12F2A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV SI,0x2214 (1000_2F2B / 0x12F2B)
    SI = 0x2214;
    // LODSW SI (1000_2F2E / 0x12F2E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP byte ptr [0x2a],0x4f (1000_2F2F / 0x12F2F)
    Alu.Sub8(UInt8[DS, 0x2A], 0x4F);
    // SBB AH,AH (1000_2F34 / 0x12F34)
    AH = Alu.Sbb8(AH, AH);
    // AND AH,0x40 (1000_2F36 / 0x12F36)
    // AH &= 0x40;
    AH = Alu.And8(AH, 0x40);
    // STOSW ES:DI (1000_2F39 / 0x12F39)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F3A / 0x12F3A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JMP 0x1000:2fa3 (1000_2F3B / 0x12F3B)
    goto label_1000_2FA3_12FA3;
    label_1000_2F3D_12F3D:
    // PUSH DI (1000_2F3D / 0x12F3D)
    Stack.Push(DI);
    // MOV DI,word ptr [0x114e] (1000_2F3E / 0x12F3E)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:7f27 (1000_2F42 / 0x12F42)
    NearCall(cs1, 0x2F45, unknown_1000_7F27_17F27);
    // POP DI (1000_2F45 / 0x12F45)
    DI = Stack.Pop();
    // MOV SI,0x21dc (1000_2F46 / 0x12F46)
    SI = 0x21DC;
    // LODSW SI (1000_2F49 / 0x12F49)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP byte ptr [0x46ff],0x1 (1000_2F4A / 0x12F4A)
    Alu.Sub8(UInt8[DS, 0x46FF], 0x1);
    // SBB AH,AH (1000_2F4F / 0x12F4F)
    AH = Alu.Sbb8(AH, AH);
    // AND AH,0x40 (1000_2F51 / 0x12F51)
    // AH &= 0x40;
    AH = Alu.And8(AH, 0x40);
    // STOSW ES:DI (1000_2F54 / 0x12F54)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F55 / 0x12F55)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JMP 0x1000:2fa3 (1000_2F56 / 0x12F56)
    goto label_1000_2FA3_12FA3;
    label_1000_2F58_12F58:
    // CMP BH,0x1 (1000_2F58 / 0x12F58)
    Alu.Sub8(BH, 0x1);
    // JNZ 0x1000:2fa3 (1000_2F5B / 0x12F5B)
    if(!ZeroFlag) {
      goto label_1000_2FA3_12FA3;
    }
    // CMP DL,0x8 (1000_2F5D / 0x12F5D)
    Alu.Sub8(DL, 0x8);
    // JNZ 0x1000:2f99 (1000_2F60 / 0x12F60)
    if(!ZeroFlag) {
      goto label_1000_2F99_12F99;
    }
    // CMP byte ptr [0xc8],0x0 (1000_2F62 / 0x12F62)
    Alu.Sub8(UInt8[DS, 0xC8], 0x0);
    // JZ 0x1000:2fa3 (1000_2F67 / 0x12F67)
    if(ZeroFlag) {
      goto label_1000_2FA3_12FA3;
    }
    // MOV SI,0x21e8 (1000_2F69 / 0x12F69)
    SI = 0x21E8;
    // LODSW SI (1000_2F6C / 0x12F6C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CL,byte ptr [0xc9] (1000_2F6D / 0x12F6D)
    CL = UInt8[DS, 0xC9];
    // MOV CH,0x27 (1000_2F71 / 0x12F71)
    CH = 0x27;
    // CMP CL,0x1 (1000_2F73 / 0x12F73)
    Alu.Sub8(CL, 0x1);
    // SBB AH,AH (1000_2F76 / 0x12F76)
    AH = Alu.Sbb8(AH, AH);
    // ADD CH,AH (1000_2F78 / 0x12F78)
    // CH += AH;
    CH = Alu.Add8(CH, AH);
    // CMP byte ptr [0x47a9],0x0 (1000_2F7A / 0x12F7A)
    Alu.Sub8(UInt8[DS, 0x47A9], 0x0);
    // JZ 0x1000:2f83 (1000_2F7F / 0x12F7F)
    if(ZeroFlag) {
      goto label_1000_2F83_12F83;
    }
    // MOV CH,0x28 (1000_2F81 / 0x12F81)
    CH = 0x28;
    label_1000_2F83_12F83:
    // MOV byte ptr [0x1248],CH (1000_2F83 / 0x12F83)
    UInt8[DS, 0x1248] = CH;
    // AND AH,0x40 (1000_2F87 / 0x12F87)
    // AH &= 0x40;
    AH = Alu.And8(AH, 0x40);
    // STOSW ES:DI (1000_2F8A / 0x12F8A)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F8B / 0x12F8B)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_2F8C / 0x12F8C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP CL,byte ptr [0xc8] (1000_2F8D / 0x12F8D)
    Alu.Sub8(CL, UInt8[DS, 0xC8]);
    // CMC  (1000_2F91 / 0x12F91)
    CarryFlag = !CarryFlag;
    // SBB AH,AH (1000_2F92 / 0x12F92)
    AH = Alu.Sbb8(AH, AH);
    // AND AH,0x40 (1000_2F94 / 0x12F94)
    // AH &= 0x40;
    AH = Alu.And8(AH, 0x40);
    // STOSW ES:DI (1000_2F97 / 0x12F97)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2F98 / 0x12F98)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_2F99_12F99:
    // CMP DL,0x9 (1000_2F99 / 0x12F99)
    Alu.Sub8(DL, 0x9);
    // JNZ 0x1000:2fa3 (1000_2F9C / 0x12F9C)
    if(!ZeroFlag) {
      goto label_1000_2FA3_12FA3;
    }
    // MOV SI,0x21f0 (1000_2F9E / 0x12F9E)
    SI = 0x21F0;
    // MOVSW ES:DI,SI (1000_2FA1 / 0x12FA1)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FA2 / 0x12FA2)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_2FA3_12FA3:
    // MOV SI,0x21f4 (1000_2FA3 / 0x12FA3)
    SI = 0x21F4;
    // MOVSW ES:DI,SI (1000_2FA6 / 0x12FA6)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FA7 / 0x12FA7)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JMP 0x1000:2ff7 (1000_2FA8 / 0x12FA8)
    goto label_1000_2FF7_12FF7;
    label_1000_2FAA_12FAA:
    // TEST byte ptr [0x11c9],0x3 (1000_2FAA / 0x12FAA)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JNZ 0x1000:2fd7 (1000_2FAF / 0x12FAF)
    if(!ZeroFlag) {
      goto label_1000_2FD7_12FD7;
    }
    // MOV SI,0x220c (1000_2FB1 / 0x12FB1)
    SI = 0x220C;
    // MOVSW ES:DI,SI (1000_2FB4 / 0x12FB4)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FB5 / 0x12FB5)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV SI,0x2214 (1000_2FB6 / 0x12FB6)
    SI = 0x2214;
    // LODSW SI (1000_2FB9 / 0x12FB9)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP byte ptr [0x2a],0x4f (1000_2FBA / 0x12FBA)
    Alu.Sub8(UInt8[DS, 0x2A], 0x4F);
    // SBB AH,AH (1000_2FBF / 0x12FBF)
    AH = Alu.Sbb8(AH, AH);
    // AND AH,0x40 (1000_2FC1 / 0x12FC1)
    // AH &= 0x40;
    AH = Alu.And8(AH, 0x40);
    // STOSW ES:DI (1000_2FC4 / 0x12FC4)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FC5 / 0x12FC5)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CALL 0x1000:1ae0 (1000_2FC6 / 0x12FC6)
    NearCall(cs1, 0x2FC9, SetHourOfTheDayToAX_1000_1AE0_11AE0);
    // MOV SI,0x21e0 (1000_2FC9 / 0x12FC9)
    SI = 0x21E0;
    // CMP AL,0xb (1000_2FCC / 0x12FCC)
    Alu.Sub8(AL, 0xB);
    // JC 0x1000:2fd3 (1000_2FCE / 0x12FCE)
    if(CarryFlag) {
      goto label_1000_2FD3_12FD3;
    }
    // ADD SI,0x4 (1000_2FD0 / 0x12FD0)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    label_1000_2FD3_12FD3:
    // MOVSW ES:DI,SI (1000_2FD3 / 0x12FD3)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FD4 / 0x12FD4)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JMP 0x1000:2fa3 (1000_2FD5 / 0x12FD5)
    goto label_1000_2FA3_12FA3;
    label_1000_2FD7_12FD7:
    // MOV SI,0x21fc (1000_2FD7 / 0x12FD7)
    SI = 0x21FC;
    // CMP byte ptr [0x11cb],0x0 (1000_2FDA / 0x12FDA)
    Alu.Sub8(UInt8[DS, 0x11CB], 0x0);
    // JZ 0x1000:2ff0 (1000_2FDF / 0x12FDF)
    if(ZeroFlag) {
      goto label_1000_2FF0_12FF0;
    }
    // MOV SI,0x2200 (1000_2FE1 / 0x12FE1)
    SI = 0x2200;
    // CMP byte ptr [0x2a],0x32 (1000_2FE4 / 0x12FE4)
    Alu.Sub8(UInt8[DS, 0x2A], 0x32);
    // JC 0x1000:2ff0 (1000_2FE9 / 0x12FE9)
    if(CarryFlag) {
      goto label_1000_2FF0_12FF0;
    }
    // MOVSW ES:DI,SI (1000_2FEB / 0x12FEB)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FEC / 0x12FEC)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV SI,0x2204 (1000_2FED / 0x12FED)
    SI = 0x2204;
    label_1000_2FF0_12FF0:
    // MOVSW ES:DI,SI (1000_2FF0 / 0x12FF0)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FF1 / 0x12FF1)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV SI,0x21f8 (1000_2FF2 / 0x12FF2)
    SI = 0x21F8;
    // MOVSW ES:DI,SI (1000_2FF5 / 0x12FF5)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_2FF6 / 0x12FF6)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_2FF7_12FF7:
    // XOR AX,AX (1000_2FF7 / 0x12FF7)
    AX = 0;
    // STOSW ES:DI (1000_2FF9 / 0x12FF9)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_2FFA / 0x12FFA)
    return NearRet();
  }
  
  public Action unknown_1000_2FFB_12FFB(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2FFB: goto label_1000_2FFB_12FFB;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_2FFB_12FFB:
    // CMP byte ptr [0x2b],0x0 (1000_2FFB / 0x12FFB)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:301a (1000_3000 / 0x13000)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_301A_1301A(0);
    }
    // TEST byte ptr [0x11c9],0x3 (1000_3002 / 0x13002)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JZ 0x1000:3020 (1000_3007 / 0x13007)
    if(ZeroFlag) {
      goto label_1000_3020_13020;
    }
    // CMP byte ptr [0x11ca],0x0 (1000_3009 / 0x13009)
    Alu.Sub8(UInt8[DS, 0x11CA], 0x0);
    // JNZ 0x1000:301a (1000_300E / 0x1300E)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_301A_1301A(0);
    }
    // MOV SI,0x1d72 (1000_3010 / 0x13010)
    SI = 0x1D72;
    // CMP byte ptr [0x11cb],0x0 (1000_3013 / 0x13013)
    Alu.Sub8(UInt8[DS, 0x11CB], 0x0);
    // JNZ 0x1000:301d (1000_3018 / 0x13018)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:d72b (1000_301D / 0x1301D)
      // Jump converted to entry function call
      return unknown_1000_D72B_1D72B(0);
    }
    label_1000_3020_13020:
    // MOV BX,word ptr [0x6] (1000_3020 / 0x13020)
    BX = UInt16[DS, 0x6];
    // CMP BL,0x80 (1000_3024 / 0x13024)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:3073 (1000_3027 / 0x13027)
    if(!ZeroFlag) {
      goto label_1000_3073_13073;
    }
    // MOV DX,word ptr [0x4] (1000_3029 / 0x13029)
    DX = UInt16[DS, 0x4];
    // CMP DH,0x21 (1000_302D / 0x1302D)
    Alu.Sub8(DH, 0x21);
    // JZ 0x1000:3073 (1000_3030 / 0x13030)
    if(ZeroFlag) {
      goto label_1000_3073_13073;
    }
    // CALL 0x1000:3efe (1000_3032 / 0x13032)
    NearCall(cs1, 0x3035, unknown_1000_3EFE_13EFE);
    // INC SI (1000_3035 / 0x13035)
    SI = Alu.Inc16(SI);
    // MOV DI,0x1b96 (1000_3036 / 0x13036)
    DI = 0x1B96;
    // MOV AL,0x20 (1000_3039 / 0x13039)
    AL = 0x20;
    // CMP word ptr [0x114e],0x100 (1000_303B / 0x1303B)
    Alu.Sub16(UInt16[DS, 0x114E], 0x100);
    // JNZ 0x1000:3045 (1000_3041 / 0x13041)
    if(!ZeroFlag) {
      goto label_1000_3045_13045;
    }
    // MOV AL,0x80 (1000_3043 / 0x13043)
    AL = 0x80;
    label_1000_3045_13045:
    // MOV BX,0x21 (1000_3045 / 0x13045)
    BX = 0x21;
    // CMP DL,0x1 (1000_3048 / 0x13048)
    Alu.Sub8(DL, 0x1);
    // JNZ 0x1000:3050 (1000_304B / 0x1304B)
    if(!ZeroFlag) {
      goto label_1000_3050_13050;
    }
    // INC BX (1000_304D / 0x1304D)
    BX = Alu.Inc16(BX);
    // MOV AL,0x20 (1000_304E / 0x1304E)
    AL = 0x20;
    label_1000_3050_13050:
    // MOV word ptr [DI + 0x2],BX (1000_3050 / 0x13050)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // MOV byte ptr [DI + 0x46],AL (1000_3053 / 0x13053)
    UInt8[DS, (ushort)(DI + 0x46)] = AL;
    // MOV [0x1cc4],AL (1000_3056 / 0x13056)
    UInt8[DS, 0x1CC4] = AL;
    // MOV CX,0x4 (1000_3059 / 0x13059)
    CX = 0x4;
    label_1000_305C_1305C:
    // LODSB SI (1000_305C / 0x1305C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DI,0xe (1000_305D / 0x1305D)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // MOV AH,0x20 (1000_3060 / 0x13060)
    AH = 0x20;
    // OR AL,AL (1000_3062 / 0x13062)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:306c (1000_3064 / 0x13064)
    if(ZeroFlag) {
      goto label_1000_306C_1306C;
    }
    // CMP AL,0xfb (1000_3066 / 0x13066)
    Alu.Sub8(AL, 0xFB);
    // JL 0x1000:306c (1000_3068 / 0x13068)
    if(SignFlag != OverflowFlag) {
      goto label_1000_306C_1306C;
    }
    // MOV AH,0x80 (1000_306A / 0x1306A)
    AH = 0x80;
    label_1000_306C_1306C:
    // MOV byte ptr [DI],AH (1000_306C / 0x1306C)
    UInt8[DS, DI] = AH;
    // LOOP 0x1000:305c (1000_306E / 0x1306E)
    if(--CX != 0) {
      goto label_1000_305C_1305C;
    }
    // JMP 0x1000:d735 (1000_3070 / 0x13070)
    // Jump converted to non entry function call
    return unknown_1000_D72B_1D72B(0x1D735 - cs1 * 0x10);
    label_1000_3073_13073:
    // MOV DI,0x1b98 (1000_3073 / 0x13073)
    DI = 0x1B98;
    // MOV word ptr [DI],0x23 (1000_3076 / 0x13076)
    UInt16[DS, DI] = 0x23;
    // MOV BX,0x1d (1000_307A / 0x1307A)
    BX = 0x1D;
    // MOV CX,0x4 (1000_307D / 0x1307D)
    CX = 0x4;
    label_1000_3080_13080:
    // ADD DI,0xe (1000_3080 / 0x13080)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // MOV word ptr [DI],BX (1000_3083 / 0x13083)
    UInt16[DS, DI] = BX;
    // MOV word ptr [DI + -0x2],0x80 (1000_3085 / 0x13085)
    UInt16[DS, (ushort)(DI - 0x2)] = 0x80;
    // INC BX (1000_308A / 0x1308A)
    BX = Alu.Inc16(BX);
    // LOOP 0x1000:3080 (1000_308B / 0x1308B)
    if(--CX != 0) {
      goto label_1000_3080_13080;
    }
    // JMP 0x1000:d735 (1000_308D / 0x1308D)
    // Jump converted to non entry function call
    return unknown_1000_D72B_1D72B(0x1D735 - cs1 * 0x10);
  }
  
  public Action unknown_1000_301A_1301A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x301A: goto label_1000_301A_1301A;break;
      case 0x301D: goto label_1000_301D_1301D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_301A_1301A:
    // MOV SI,0x1d1e (1000_301A / 0x1301A)
    SI = 0x1D1E;
    label_1000_301D_1301D:
    // JMP 0x1000:d72b (1000_301D / 0x1301D)
    // Jump converted to entry function call
    return unknown_1000_D72B_1D72B(0);
  }
  
  public Action unknown_1000_3090_13090(int gotoTarget) {
    label_1000_3090_13090:
    // CALL 0x1000:98e6 (1000_3090 / 0x13090)
    NearCall(cs1, 0x3093, unknown_1000_98E6_198E6);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_3093_13093(0);
  }
  
  public Action unknown_1000_3093_13093(int gotoTarget) {
    label_1000_3093_13093:
    // CALL 0x1000:3127 (1000_3093 / 0x13093)
    NearCall(cs1, 0x3096, unknown_1000_3127_13127);
    // MOV DI,0x1f0c (1000_3096 / 0x13096)
    DI = 0x1F0C;
    label_1000_3099_13099:
    // ADD DI,0x4 (1000_3099 / 0x13099)
    // DI += 0x4;
    DI = Alu.Add16(DI, 0x4);
    // CMP word ptr [DI],0x0 (1000_309C / 0x1309C)
    Alu.Sub16(UInt16[DS, DI], 0x0);
    // JNZ 0x1000:3099 (1000_309F / 0x1309F)
    if(!ZeroFlag) {
      goto label_1000_3099_13099;
    }
    // MOV word ptr [0x12],0x0 (1000_30A1 / 0x130A1)
    UInt16[DS, 0x12] = 0x0;
    // PUSH DS (1000_30A7 / 0x130A7)
    Stack.Push(DS);
    // POP ES (1000_30A8 / 0x130A8)
    ES = Stack.Pop();
    // MOV BP,0x30b9 (1000_30A9 / 0x130A9)
    BP = 0x30B9;
    // CALL 0x1000:36ee (1000_30AC / 0x130AC)
    NearCall(cs1, 0x30AF, unknown_1000_36EE_136EE);
    // MOV BP,0x3120 (1000_30AF / 0x130AF)
    BP = 0x3120;
    // CALL 0x1000:36ee (1000_30B2 / 0x130B2)
    NearCall(cs1, 0x30B5, unknown_1000_36EE_136EE);
    // XOR AX,AX (1000_30B5 / 0x130B5)
    AX = 0;
    // STOSW ES:DI (1000_30B7 / 0x130B7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_30B8 / 0x130B8)
    return NearRet();
  }
  
  public Action unknown_1000_30B9_130B9(int gotoTarget) {
    switch(gotoTarget) {
      case 0x30CA: goto label_1000_30CA_130CA;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_30B9_130B9:
    // TEST byte ptr [SI + 0xf],0x40 (1000_30B9 / 0x130B9)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JNZ 0x1000:311f (1000_30BD / 0x130BD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_311F / 0x1311F)
      return NearRet();
    }
    // CMP word ptr [0x47aa],0x0 (1000_30BF / 0x130BF)
    Alu.Sub16(UInt16[DS, 0x47AA], 0x0);
    // JNZ 0x1000:30ca (1000_30C4 / 0x130C4)
    if(!ZeroFlag) {
      goto label_1000_30CA_130CA;
    }
    // MOV word ptr [0x47aa],SI (1000_30C6 / 0x130C6)
    UInt16[DS, 0x47AA] = SI;
    label_1000_30CA_130CA:
    // MOV AL,byte ptr [SI + 0xe] (1000_30CA / 0x130CA)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV CL,AL (1000_30CD / 0x130CD)
    CL = AL;
    // XOR AH,AH (1000_30CF / 0x130CF)
    AH = 0;
    // ADD AX,0x78 (1000_30D1 / 0x130D1)
    // AX += 0x78;
    AX = Alu.Add16(AX, 0x78);
    // STOSW ES:DI (1000_30D4 / 0x130D4)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,0x1 (1000_30D5 / 0x130D5)
    AX = 0x1;
    // SHL AX,CL (1000_30D8 / 0x130D8)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // OR word ptr [0x12],AX (1000_30DA / 0x130DA)
    // UInt16[DS, 0x12] |= AX;
    UInt16[DS, 0x12] = Alu.Or16(UInt16[DS, 0x12], AX);
    // MOV AX,word ptr [SI + 0x4] (1000_30DE / 0x130DE)
    AX = UInt16[DS, (ushort)(SI + 0x4)];
    // STOSW ES:DI (1000_30E1 / 0x130E1)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP CL,0xf (1000_30E2 / 0x130E2)
    Alu.Sub8(CL, 0xF);
    // JNZ 0x1000:311f (1000_30E5 / 0x130E5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_311F / 0x1311F)
      return NearRet();
    }
    // MOV CL,byte ptr [0x476a] (1000_30E7 / 0x130E7)
    CL = UInt8[DS, 0x476A];
    // XOR CH,CH (1000_30EB / 0x130EB)
    CH = 0;
    // DEC CX (1000_30ED / 0x130ED)
    CX = Alu.Dec16(CX);
    // JLE 0x1000:30fe (1000_30EE / 0x130EE)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_30FE_130FE;
    }
    // PUSH SI (1000_30F0 / 0x130F0)
    Stack.Push(SI);
    // MOV SI,AX (1000_30F1 / 0x130F1)
    SI = AX;
    // MOV AX,0x87 (1000_30F3 / 0x130F3)
    AX = 0x87;
    label_1000_30F6_130F6:
    // INC AX (1000_30F6 / 0x130F6)
    AX = Alu.Inc16(AX);
    // STOSW ES:DI (1000_30F7 / 0x130F7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,SI (1000_30F8 / 0x130F8)
    ushort tmp_1000_30F8 = AX;
    AX = SI;
    SI = tmp_1000_30F8;
    // STOSW ES:DI (1000_30F9 / 0x130F9)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,SI (1000_30FA / 0x130FA)
    ushort tmp_1000_30FA = AX;
    AX = SI;
    SI = tmp_1000_30FA;
    // LOOP 0x1000:30f6 (1000_30FB / 0x130FB)
    if(--CX != 0) {
      goto label_1000_30F6_130F6;
    }
    // POP SI (1000_30FD / 0x130FD)
    SI = Stack.Pop();
    label_1000_30FE_130FE:
    // CMP byte ptr [0x2a],0x5 (1000_30FE / 0x130FE)
    Alu.Sub8(UInt8[DS, 0x2A], 0x5);
    // JC 0x1000:311f (1000_3103 / 0x13103)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_311F / 0x1311F)
      return NearRet();
    }
    // MOV AL,[0x476b] (1000_3105 / 0x13105)
    AL = UInt8[DS, 0x476B];
    // OR AL,AL (1000_3108 / 0x13108)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:311f (1000_310A / 0x1310A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_311F / 0x1311F)
      return NearRet();
    }
    // PUSH DI (1000_310C / 0x1310C)
    Stack.Push(DI);
    // DEC AL (1000_310D / 0x1310D)
    AL = Alu.Dec8(AL);
    // SUB AL,byte ptr [0x476a] (1000_310F / 0x1310F)
    // AL -= UInt8[DS, 0x476A];
    AL = Alu.Sub8(AL, UInt8[DS, 0x476A]);
    // CBW  (1000_3113 / 0x13113)
    AX = (ushort)((short)((sbyte)AL));
    // SHL AX,1 (1000_3114 / 0x13114)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3116 / 0x13116)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD DI,AX (1000_3118 / 0x13118)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV word ptr [DI],0x8f (1000_311A / 0x1311A)
    UInt16[DS, DI] = 0x8F;
    // POP DI (1000_311E / 0x1311E)
    DI = Stack.Pop();
    label_1000_311F_1311F:
    // RET  (1000_311F / 0x1311F)
    return NearRet();
  }
  
  public Action unknown_1000_3120_13120(int gotoTarget) {
    label_1000_3120_13120:
    // TEST byte ptr [SI + 0xf],0x40 (1000_3120 / 0x13120)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JNZ 0x1000:30ca (1000_3124 / 0x13124)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_30B9_130B9(0x130CA - cs1 * 0x10);
    }
    // RET  (1000_3126 / 0x13126)
    return NearRet();
  }
  
  public Action unknown_1000_3127_13127(int gotoTarget) {
    switch(gotoTarget) {
      case 0x316D: goto label_1000_316D_1316D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3127_13127:
    // MOV byte ptr [0x476b],0x0 (1000_3127 / 0x13127)
    UInt8[DS, 0x476B] = 0x0;
    // MOV byte ptr [0x476a],0x0 (1000_312C / 0x1312C)
    UInt8[DS, 0x476A] = 0x0;
    // MOV AX,0x7f80 (1000_3131 / 0x13131)
    AX = 0x7F80;
    // MOV [0x10ca],AX (1000_3134 / 0x13134)
    UInt16[DS, 0x10CA] = AX;
    // MOV [0x10ba],AX (1000_3137 / 0x13137)
    UInt16[DS, 0x10BA] = AX;
    // MOV [0x10aa],AX (1000_313A / 0x1313A)
    UInt16[DS, 0x10AA] = AX;
    // MOV [0x109a],AX (1000_313D / 0x1313D)
    UInt16[DS, 0x109A] = AX;
    // MOV BX,word ptr [0x6] (1000_3140 / 0x13140)
    BX = UInt16[DS, 0x6];
    // CMP BL,0x80 (1000_3144 / 0x13144)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:316d (1000_3147 / 0x13147)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_316D / 0x1316D)
      return NearRet();
    }
    // MOV DI,word ptr [0x114e] (1000_3149 / 0x13149)
    DI = UInt16[DS, 0x114E];
    // MOV DX,word ptr [0x4] (1000_314D / 0x1314D)
    DX = UInt16[DS, 0x4];
    // MOV BP,0x316e (1000_3151 / 0x13151)
    BP = 0x316E;
    // CALL 0x1000:6603 (1000_3154 / 0x13154)
    NearCall(cs1, 0x3157, unknown_1000_6603_16603);
    // CMP byte ptr [DI + 0x8],0x21 (1000_3157 / 0x13157)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x21);
    // JNZ 0x1000:316a (1000_315B / 0x1315B)
    if(!ZeroFlag) {
      goto label_1000_316A_1316A;
    }
    // MOV word ptr [0x10a8],DX (1000_315D / 0x1315D)
    UInt16[DS, 0x10A8] = DX;
    // MOV word ptr [0x10aa],BX (1000_3161 / 0x13161)
    UInt16[DS, 0x10AA] = BX;
    // PUSH DI (1000_3165 / 0x13165)
    Stack.Push(DI);
    // CALL 0x1000:2318 (1000_3166 / 0x13166)
    throw FailAsUntested("Could not find a valid function at address 1000_2318 / 0x12318");
    // POP DI (1000_3169 / 0x13169)
    DI = Stack.Pop();
    label_1000_316A_1316A:
    // CALL 0x1000:331e (1000_316A / 0x1316A)
    NearCall(cs1, 0x316D, unknown_1000_331E_1331E);
    label_1000_316D_1316D:
    // RET  (1000_316D / 0x1316D)
    return NearRet();
  }
  
  public Action unknown_1000_316E_1316E(int gotoTarget) {
    label_1000_316E_1316E:
    // MOV AL,byte ptr [SI + 0x3] (1000_316E / 0x1316E)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // MOV AH,0x2 (1000_3171 / 0x13171)
    AH = 0x2;
    // TEST AL,0x20 (1000_3173 / 0x13173)
    Alu.And8(AL, 0x20);
    // JZ 0x1000:3181 (1000_3175 / 0x13175)
    if(ZeroFlag) {
      goto label_1000_3181_13181;
    }
    // CMP byte ptr [DI + 0x8],0x28 (1000_3177 / 0x13177)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JC 0x1000:3190 (1000_317B / 0x1317B)
    if(CarryFlag) {
      goto label_1000_3190_13190;
    }
    // INC AH (1000_317D / 0x1317D)
    AH = Alu.Inc8(AH);
    // JMP 0x1000:3190 (1000_317F / 0x1317F)
    goto label_1000_3190_13190;
    label_1000_3181_13181:
    // TEST byte ptr [SI + 0x10],0x80 (1000_3181 / 0x13181)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:316d (1000_3185 / 0x13185)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_316D / 0x1316D)
      return NearRet();
    }
    // CMP byte ptr [0x2b],0x0 (1000_3187 / 0x13187)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:3190 (1000_318C / 0x1318C)
    if(ZeroFlag) {
      goto label_1000_3190_13190;
    }
    // DEC AH (1000_318E / 0x1318E)
    AH = Alu.Dec8(AH);
    label_1000_3190_13190:
    // CMP AH,DL (1000_3190 / 0x13190)
    Alu.Sub8(AH, DL);
    // JNZ 0x1000:316d (1000_3192 / 0x13192)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_316D / 0x1316D)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x10],0x80 (1000_3194 / 0x13194)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:31c9 (1000_3198 / 0x13198)
    if(!ZeroFlag) {
      goto label_1000_31C9_131C9;
    }
    // MOV BP,0x10b8 (1000_319A / 0x1319A)
    BP = 0x10B8;
    // MOV DI,0x4756 (1000_319D / 0x1319D)
    DI = 0x4756;
    // CMP AL,0x80 (1000_31A0 / 0x131A0)
    Alu.Sub8(AL, 0x80);
    // JNC 0x1000:31ed (1000_31A2 / 0x131A2)
    if(!CarryFlag) {
      goto label_1000_31ED_131ED;
    }
    // MOV BP,0x10c8 (1000_31A4 / 0x131A4)
    BP = 0x10C8;
    // MOV DI,0x4758 (1000_31A7 / 0x131A7)
    DI = 0x4758;
    // AND byte ptr [0x476a],0x7 (1000_31AA / 0x131AA)
    // UInt8[DS, 0x476A] &= 0x7;
    UInt8[DS, 0x476A] = Alu.And8(UInt8[DS, 0x476A], 0x7);
    // MOV AL,[0x476a] (1000_31AF / 0x131AF)
    AL = UInt8[DS, 0x476A];
    // INC byte ptr [0x476a] (1000_31B2 / 0x131B2)
    UInt8[DS, 0x476A] = Alu.Inc8(UInt8[DS, 0x476A]);
    // XOR AH,AH (1000_31B6 / 0x131B6)
    AH = 0;
    // CMP SI,0x8e0 (1000_31B8 / 0x131B8)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:31c3 (1000_31BC / 0x131BC)
    if(!ZeroFlag) {
      goto label_1000_31C3_131C3;
    }
    // INC AX (1000_31BE / 0x131BE)
    AX = Alu.Inc16(AX);
    // MOV [0x476b],AL (1000_31BF / 0x131BF)
    UInt8[DS, 0x476B] = AL;
    // DEC AX (1000_31C2 / 0x131C2)
    AX = Alu.Dec16(AX);
    label_1000_31C3_131C3:
    // SHL AX,1 (1000_31C3 / 0x131C3)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD DI,AX (1000_31C5 / 0x131C5)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // JMP 0x1000:31ed (1000_31C7 / 0x131C7)
    goto label_1000_31ED_131ED;
    label_1000_31C9_131C9:
    // MOV BP,0x1098 (1000_31C9 / 0x131C9)
    BP = 0x1098;
    // MOV DI,0x4768 (1000_31CC / 0x131CC)
    DI = 0x4768;
    // MOV AL,byte ptr [SI + 0x3] (1000_31CF / 0x131CF)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0x10 (1000_31D2 / 0x131D2)
    // AL &= 0x10;
    AL = Alu.And8(AL, 0x10);
    // AND byte ptr [BP + 0xf],0xef (1000_31D4 / 0x131D4)
    // UInt8[SS, (ushort)(BP + 0xF)] &= 0xEF;
    UInt8[SS, (ushort)(BP + 0xF)] = Alu.And8(UInt8[SS, (ushort)(BP + 0xF)], 0xEF);
    // OR byte ptr [BP + 0xf],AL (1000_31D8 / 0x131D8)
    // UInt8[SS, (ushort)(BP + 0xF)] |= AL;
    UInt8[SS, (ushort)(BP + 0xF)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0xF)], AL);
    // MOV word ptr [0xee],0x0 (1000_31DB / 0x131DB)
    UInt16[DS, 0xEE] = 0x0;
    // OR AL,AL (1000_31E1 / 0x131E1)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // MOV AL,0xff (1000_31E3 / 0x131E3)
    AL = 0xFF;
    // JNZ 0x1000:31ea (1000_31E5 / 0x131E5)
    if(!ZeroFlag) {
      goto label_1000_31EA_131EA;
    }
    // MOV AL,byte ptr [SI + 0x15] (1000_31E7 / 0x131E7)
    AL = UInt8[DS, (ushort)(SI + 0x15)];
    label_1000_31EA_131EA:
    // MOV [0xed],AL (1000_31EA / 0x131EA)
    UInt8[DS, 0xED] = AL;
    label_1000_31ED_131ED:
    // MOV word ptr [DI],SI (1000_31ED / 0x131ED)
    UInt16[DS, DI] = SI;
    // MOV word ptr [BP + 0x0],DX (1000_31EF / 0x131EF)
    UInt16[SS, BP] = DX;
    // MOV word ptr [BP + 0x2],BX (1000_31F2 / 0x131F2)
    UInt16[SS, (ushort)(BP + 0x2)] = BX;
    // RET  (1000_31F5 / 0x131F5)
    return NearRet();
  }
  
  public Action unknown_1000_31F6_131F6(int gotoTarget) {
    label_1000_31F6_131F6:
    // CALL 0x1000:e270 (1000_31F6 / 0x131F6)
    NearCall(cs1, 0x31F9, PushAll_1000_E270_1E270);
    // MOV DI,word ptr [SI + 0x4] (1000_31F9 / 0x131F9)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV word ptr [0x2c],DI (1000_31FC / 0x131FC)
    UInt16[DS, 0x2C] = DI;
    // MOV AL,byte ptr [SI] (1000_3200 / 0x13200)
    AL = UInt8[DS, SI];
    // MOV [0x2e],AL (1000_3202 / 0x13202)
    UInt8[DS, 0x2E] = AL;
    // MOV AL,byte ptr [SI + 0x3] (1000_3205 / 0x13205)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // MOV [0x30],AL (1000_3208 / 0x13208)
    UInt8[DS, 0x30] = AL;
    // AND AX,0xf (1000_320B / 0x1320B)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // MOV [0x2f],AL (1000_320E / 0x1320E)
    UInt8[DS, 0x2F] = AL;
    // ADD AX,0x18 (1000_3211 / 0x13211)
    // AX += 0x18;
    AX = Alu.Add16(AX, 0x18);
    // MOV [0x11f3],AX (1000_3214 / 0x13214)
    UInt16[DS, 0x11F3] = AX;
    // CALL 0x1000:32c7 (1000_3217 / 0x13217)
    NearCall(cs1, 0x321A, unknown_1000_32C7_132C7);
    // CALL 0x1000:329d (1000_321A / 0x1321A)
    NearCall(cs1, 0x321D, unknown_1000_329D_1329D);
    // MOV [0x48],AX (1000_321D / 0x1321D)
    UInt16[DS, 0x48] = AX;
    // MOV AX,word ptr [SI + 0x10] (1000_3220 / 0x13220)
    AX = UInt16[DS, (ushort)(SI + 0x10)];
    // MOV [0x32],AX (1000_3223 / 0x13223)
    UInt16[DS, 0x32] = AX;
    // MOV AX,word ptr [SI + 0x12] (1000_3226 / 0x13226)
    AX = UInt16[DS, (ushort)(SI + 0x12)];
    // MOV [0x34],AX (1000_3229 / 0x13229)
    UInt16[DS, 0x34] = AX;
    // AND AX,0xf (1000_322C / 0x1322C)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // MOV [0x31],AL (1000_322F / 0x1322F)
    UInt8[DS, 0x31] = AL;
    // ADD AX,0x0 (1000_3232 / 0x13232)
    // AX += 0x0;
    AX = Alu.Add16(AX, 0x0);
    // MOV [0x11ff],AX (1000_3235 / 0x13235)
    UInt16[DS, 0x11FF] = AX;
    // CALL 0x1000:6efd (1000_3238 / 0x13238)
    NearCall(cs1, 0x323B, unknown_1000_6EFD_16EFD);
    // MOV [0x36],AL (1000_323B / 0x1323B)
    UInt8[DS, 0x36] = AL;
    // MOV AL,byte ptr [SI + 0x16] (1000_323E / 0x1323E)
    AL = UInt8[DS, (ushort)(SI + 0x16)];
    // MOV [0x38],AL (1000_3241 / 0x13241)
    UInt8[DS, 0x38] = AL;
    // CALL 0x1000:3310 (1000_3244 / 0x13244)
    NearCall(cs1, 0x3247, unknown_1000_3310_13310);
    // MOV [0x11f7],AX (1000_3247 / 0x13247)
    UInt16[DS, 0x11F7] = AX;
    // MOV AL,byte ptr [SI + 0x17] (1000_324A / 0x1324A)
    AL = UInt8[DS, (ushort)(SI + 0x17)];
    // MOV [0x39],AL (1000_324D / 0x1324D)
    UInt8[DS, 0x39] = AL;
    // CALL 0x1000:3310 (1000_3250 / 0x13250)
    NearCall(cs1, 0x3253, unknown_1000_3310_13310);
    // MOV [0x11f9],AX (1000_3253 / 0x13253)
    UInt16[DS, 0x11F9] = AX;
    // MOV AL,byte ptr [SI + 0x18] (1000_3256 / 0x13256)
    AL = UInt8[DS, (ushort)(SI + 0x18)];
    // MOV [0x3a],AL (1000_3259 / 0x13259)
    UInt8[DS, 0x3A] = AL;
    // CALL 0x1000:3310 (1000_325C / 0x1325C)
    NearCall(cs1, 0x325F, unknown_1000_3310_13310);
    // MOV [0x11fb],AX (1000_325F / 0x1325F)
    UInt16[DS, 0x11FB] = AX;
    // MOV AX,word ptr [SI + 0xc] (1000_3262 / 0x13262)
    AX = UInt16[DS, (ushort)(SI + 0xC)];
    // MOV [0x44],AX (1000_3265 / 0x13265)
    UInt16[DS, 0x44] = AX;
    // MOV AX,word ptr [SI + 0xe] (1000_3268 / 0x13268)
    AX = UInt16[DS, (ushort)(SI + 0xE)];
    // MOV [0x46],AX (1000_326B / 0x1326B)
    UInt16[DS, 0x46] = AX;
    // XOR AH,AH (1000_326E / 0x1326E)
    AH = 0;
    // ADD AX,0xe8 (1000_3270 / 0x13270)
    // AX += 0xE8;
    AX = Alu.Add16(AX, 0xE8);
    // MOV [0x11f1],AX (1000_3273 / 0x13273)
    UInt16[DS, 0x11F1] = AX;
    // CALL 0x1000:693b (1000_3276 / 0x13276)
    NearCall(cs1, 0x3279, unknown_1000_693B_1693B);
    // MOV BP,AX (1000_3279 / 0x13279)
    BP = AX;
    // MOV AL,byte ptr [BP + SI + 0x16] (1000_327B / 0x1327B)
    AL = UInt8[SS, (ushort)(BP + SI + 0x16)];
    // MOV [0x37],AL (1000_327E / 0x1327E)
    UInt8[DS, 0x37] = AL;
    // MOV AL,byte ptr [SI + 0x19] (1000_3281 / 0x13281)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // MOV [0x3b],AL (1000_3284 / 0x13284)
    UInt8[DS, 0x3B] = AL;
    // MOV AL,byte ptr [SI + 0x1a] (1000_3287 / 0x13287)
    AL = UInt8[DS, (ushort)(SI + 0x1A)];
    // MOV [0x3c],AL (1000_328A / 0x1328A)
    UInt8[DS, 0x3C] = AL;
    // CALL 0x1000:1ac5 (1000_328D / 0x1328D)
    NearCall(cs1, 0x3290, unknown_1000_1AC5_11AC5);
    // SUB AL,byte ptr [SI + 0x14] (1000_3290 / 0x13290)
    // AL -= UInt8[DS, (ushort)(SI + 0x14)];
    AL = Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0x14)]);
    // MOV [0x40],AL (1000_3293 / 0x13293)
    UInt8[DS, 0x40] = AL;
    // CALL 0x1000:331e (1000_3296 / 0x13296)
    NearCall(cs1, 0x3299, unknown_1000_331E_1331E);
    // CALL 0x1000:e283 (1000_3299 / 0x13299)
    NearCall(cs1, 0x329C, PopAll_1000_E283_1E283);
    // RET  (1000_329C / 0x1329C)
    return NearRet();
  }
  
  public Action unknown_1000_329D_1329D(int gotoTarget) {
    label_1000_329D_1329D:
    // CMP byte ptr [SI + 0x3],0x0 (1000_329D / 0x1329D)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x3)], 0x0);
    // JZ 0x1000:32aa (1000_32A1 / 0x132A1)
    if(ZeroFlag) {
      goto label_1000_32AA_132AA;
    }
    // XOR AX,AX (1000_32A3 / 0x132A3)
    AX = 0;
    // AND word ptr [SI + 0x10],0xfff3 (1000_32A5 / 0x132A5)
    // UInt16[DS, (ushort)(SI + 0x10)] &= 0xFFF3;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0xFFF3);
    // RET  (1000_32A9 / 0x132A9)
    return NearRet();
    label_1000_32AA_132AA:
    // MOV AX,[0x42] (1000_32AA / 0x132AA)
    AX = UInt16[DS, 0x42];
    // OR AX,AX (1000_32AD / 0x132AD)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:32c1 (1000_32AF / 0x132AF)
    if(ZeroFlag) {
      goto label_1000_32C1_132C1;
    }
    // MOV CX,AX (1000_32B1 / 0x132B1)
    CX = AX;
    // MOV AX,word ptr [SI + 0xe] (1000_32B3 / 0x132B3)
    AX = UInt16[DS, (ushort)(SI + 0xE)];
    // XOR DX,DX (1000_32B6 / 0x132B6)
    DX = 0;
    // DIV CX (1000_32B8 / 0x132B8)
    Cpu.Div16(CX);
    // SHL DX,1 (1000_32BA / 0x132BA)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // CMP CX,DX (1000_32BC / 0x132BC)
    Alu.Sub16(CX, DX);
    // ADC AX,0x0 (1000_32BE / 0x132BE)
    AX = Alu.Adc16(AX, 0x0);
    label_1000_32C1_132C1:
    // MOV [0x4a],AX (1000_32C1 / 0x132C1)
    UInt16[DS, 0x4A] = AX;
    // JMP 0x1000:708a (1000_32C4 / 0x132C4)
    // Jump converted to entry function call
    return unknown_1000_708A_1708A(0);
  }
  
  public Action unknown_1000_32C7_132C7(int gotoTarget) {
    label_1000_32C7_132C7:
    // MOV AX,[0x2] (1000_32C7 / 0x132C7)
    AX = UInt16[DS, 0x2];
    // SUB AX,word ptr [SI + 0xa] (1000_32CA / 0x132CA)
    // AX -= UInt16[DS, (ushort)(SI + 0xA)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0xA)]);
    // MOV [0x42],AX (1000_32CD / 0x132CD)
    UInt16[DS, 0x42] = AX;
    // MOV DX,AX (1000_32D0 / 0x132D0)
    DX = AX;
    // MOV CL,0x4 (1000_32D2 / 0x132D2)
    CL = 0x4;
    // SHR AX,CL (1000_32D4 / 0x132D4)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // MOV [0x41],AL (1000_32D6 / 0x132D6)
    UInt8[DS, 0x41] = AL;
    // MOV AX,0x74 (1000_32D9 / 0x132D9)
    AX = 0x74;
    // TEST byte ptr [SI + 0x3],0x10 (1000_32DC / 0x132DC)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x10);
    // JNZ 0x1000:330c (1000_32E0 / 0x132E0)
    if(!ZeroFlag) {
      goto label_1000_330C_1330C;
    }
    // MOV AX,0x70 (1000_32E2 / 0x132E2)
    AX = 0x70;
    // CMP DX,0x3 (1000_32E5 / 0x132E5)
    Alu.Sub16(DX, 0x3);
    // JC 0x1000:330c (1000_32E8 / 0x132E8)
    if(CarryFlag) {
      goto label_1000_330C_1330C;
    }
    // INC AX (1000_32EA / 0x132EA)
    AX = Alu.Inc16(AX);
    // CMP DX,0x10 (1000_32EB / 0x132EB)
    Alu.Sub16(DX, 0x10);
    // JC 0x1000:330c (1000_32EE / 0x132EE)
    if(CarryFlag) {
      goto label_1000_330C_1330C;
    }
    // INC AX (1000_32F0 / 0x132F0)
    AX = Alu.Inc16(AX);
    // CMP DX,0x20 (1000_32F1 / 0x132F1)
    Alu.Sub16(DX, 0x20);
    // JC 0x1000:330c (1000_32F4 / 0x132F4)
    if(CarryFlag) {
      goto label_1000_330C_1330C;
    }
    // INC AX (1000_32F6 / 0x132F6)
    AX = Alu.Inc16(AX);
    // PUSH AX (1000_32F7 / 0x132F7)
    Stack.Push(AX);
    // PUSH SI (1000_32F8 / 0x132F8)
    Stack.Push(SI);
    // MOV SI,AX (1000_32F9 / 0x132F9)
    SI = AX;
    // CALL 0x1000:cf70 (1000_32FB / 0x132FB)
    NearCall(cs1, 0x32FE, unknown_1000_CF70_1CF70);
    // CALL 0x1000:d03c (1000_32FE / 0x132FE)
    NearCall(cs1, 0x3301, unknown_1000_D03C_1D03C);
    // MOV AX,DX (1000_3301 / 0x13301)
    AX = DX;
    // MOV CL,0x4 (1000_3303 / 0x13303)
    CL = 0x4;
    // SHR AX,CL (1000_3305 / 0x13305)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // CALL 0x1000:e2e3 (1000_3307 / 0x13307)
    NearCall(cs1, 0x330A, unknown_1000_E2E3_1E2E3);
    // POP SI (1000_330A / 0x1330A)
    SI = Stack.Pop();
    // POP AX (1000_330B / 0x1330B)
    AX = Stack.Pop();
    label_1000_330C_1330C:
    // MOV [0x11f5],AX (1000_330C / 0x1330C)
    UInt16[DS, 0x11F5] = AX;
    // RET  (1000_330F / 0x1330F)
    return NearRet();
  }
  
  public Action unknown_1000_3310_13310(int gotoTarget) {
    label_1000_3310_13310:
    // XOR AH,AH (1000_3310 / 0x13310)
    AH = 0;
    // SHR AX,1 (1000_3312 / 0x13312)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3314 / 0x13314)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3316 / 0x13316)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3318 / 0x13318)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD AX,0xd1 (1000_331A / 0x1331A)
    // AX += 0xD1;
    AX = Alu.Add16(AX, 0xD1);
    // RET  (1000_331D / 0x1331D)
    return NearRet();
  }
  
  public Action unknown_1000_331E_1331E(int gotoTarget) {
    label_1000_331E_1331E:
    // MOV word ptr [0x11ce],DI (1000_331E / 0x1331E)
    UInt16[DS, 0x11CE] = DI;
    // PUSH SI (1000_3322 / 0x13322)
    Stack.Push(SI);
    // PUSH DI (1000_3323 / 0x13323)
    Stack.Push(DI);
    // MOV AH,byte ptr [DI] (1000_3324 / 0x13324)
    AH = UInt8[DS, DI];
    // MOV AL,byte ptr [DI + 0x1] (1000_3326 / 0x13326)
    AL = UInt8[DS, (ushort)(DI + 0x1)];
    // MOV [0x4e],AX (1000_3329 / 0x13329)
    UInt16[DS, 0x4E] = AX;
    // MOV BX,0x1141 (1000_332C / 0x1332C)
    BX = 0x1141;
    // XLAT BX (1000_332F / 0x1332F)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // MOV [0x50],AL (1000_3330 / 0x13330)
    UInt8[DS, 0x50] = AL;
    // MOV AL,byte ptr [DI + 0xa] (1000_3333 / 0x13333)
    AL = UInt8[DS, (ushort)(DI + 0xA)];
    // MOV [0x51],AL (1000_3336 / 0x13336)
    UInt8[DS, 0x51] = AL;
    // MOV AL,byte ptr [DI + 0x12] (1000_3339 / 0x13339)
    AL = UInt8[DS, (ushort)(DI + 0x12)];
    // MOV [0x52],AL (1000_333C / 0x1333C)
    UInt8[DS, 0x52] = AL;
    // MOV AL,byte ptr [DI + 0x1b] (1000_333F / 0x1333F)
    AL = UInt8[DS, (ushort)(DI + 0x1B)];
    // MOV [0x54],AL (1000_3342 / 0x13342)
    UInt8[DS, 0x54] = AL;
    // MOV AL,byte ptr [DI + 0x8] (1000_3345 / 0x13345)
    AL = UInt8[DS, (ushort)(DI + 0x8)];
    // MOV [0x4d],AL (1000_3348 / 0x13348)
    UInt8[DS, 0x4D] = AL;
    // PUSH DS (1000_334B / 0x1334B)
    Stack.Push(DS);
    // POP ES (1000_334C / 0x1334C)
    ES = Stack.Pop();
    // PUSH DI (1000_334D / 0x1334D)
    Stack.Push(DI);
    // LEA SI,[DI + 0x14] (1000_334E / 0x1334E)
    SI = (ushort)(DI + 0x14);
    // MOV DI,0x55 (1000_3351 / 0x13351)
    DI = 0x55;
    // MOV CX,0x7 (1000_3354 / 0x13354)
    CX = 0x7;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_3357 / 0x13357)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DI (1000_3359 / 0x13359)
    DI = Stack.Pop();
    // CALL 0x1000:33be (1000_335A / 0x1335A)
    NearCall(cs1, 0x335D, unknown_1000_33BE_133BE);
    // CALL 0x1000:34a5 (1000_335D / 0x1335D)
    NearCall(cs1, 0x3360, unknown_1000_34A5_134A5);
    // CALL 0x1000:7f27 (1000_3360 / 0x13360)
    NearCall(cs1, 0x3363, unknown_1000_7F27_17F27);
    // MOV DI,0x46fe (1000_3363 / 0x13363)
    DI = 0x46FE;
    // MOV AL,0xff (1000_3366 / 0x13366)
    AL = 0xFF;
    // MOV CX,0x7 (1000_3368 / 0x13368)
    CX = 0x7;
    label_1000_336B_1336B:
    // CMP byte ptr [DI],0x1 (1000_336B / 0x1336B)
    Alu.Sub8(UInt8[DS, DI], 0x1);
    // RCL AL,1 (1000_336E / 0x1336E)
    AL = Alu.Rcl8(AL, 1);
    // INC DI (1000_3370 / 0x13370)
    DI = Alu.Inc16(DI);
    // LOOP 0x1000:336b (1000_3371 / 0x13371)
    if(--CX != 0) {
      goto label_1000_336B_1336B;
    }
    // NOT AL (1000_3373 / 0x13373)
    AL = (byte)~AL;
    // MOV CL,0x1 (1000_3375 / 0x13375)
    CL = 0x1;
    // SHL AL,CL (1000_3377 / 0x13377)
    // AL <<= CL;
    AL = Alu.Shl8(AL, CL);
    // MOV [0x53],AL (1000_3379 / 0x13379)
    UInt8[DS, 0x53] = AL;
    // POP DI (1000_337C / 0x1337C)
    DI = Stack.Pop();
    // CALL 0x1000:3385 (1000_337D / 0x1337D)
    NearCall(cs1, 0x3380, unknown_1000_3385_13385);
    // CALL 0x1000:5274 (1000_3380 / 0x13380)
    NearCall(cs1, 0x3383, unknown_1000_5274_15274);
    // POP SI (1000_3383 / 0x13383)
    SI = Stack.Pop();
    // RET  (1000_3384 / 0x13384)
    return NearRet();
  }
  
  public Action unknown_1000_3385_13385(int gotoTarget) {
    switch(gotoTarget) {
      case 0x33BD: goto label_1000_33BD_133BD;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3385_13385:
    // MOV byte ptr [0xf7],0x0 (1000_3385 / 0x13385)
    UInt8[DS, 0xF7] = 0x0;
    // CMP DI,word ptr [0x1150] (1000_338A / 0x1338A)
    Alu.Sub16(DI, UInt16[DS, 0x1150]);
    // JZ 0x1000:33bd (1000_338E / 0x1338E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_33BD / 0x133BD)
      return NearRet();
    }
    // MOV AX,DI (1000_3390 / 0x13390)
    AX = DI;
    // SUB AX,0x100 (1000_3392 / 0x13392)
    // AX -= 0x100;
    AX = Alu.Sub16(AX, 0x100);
    // MOV BL,0x1c (1000_3395 / 0x13395)
    BL = 0x1C;
    // DIV BL (1000_3397 / 0x13397)
    Cpu.Div8(BL);
    // INC AX (1000_3399 / 0x13399)
    AX = Alu.Inc16(AX);
    // MOV BH,AL (1000_339A / 0x1339A)
    BH = AL;
    // MOV BL,0x80 (1000_339C / 0x1339C)
    BL = 0x80;
    // MOV SI,0x1018 (1000_339E / 0x1339E)
    SI = 0x1018;
    // CALL 0x1000:33ad (1000_33A1 / 0x133A1)
    NearCall(cs1, 0x33A4, unknown_1000_33AD_133AD);
    // MOV SI,0x1028 (1000_33A4 / 0x133A4)
    SI = 0x1028;
    // CALL 0x1000:33ad (1000_33A7 / 0x133A7)
    NearCall(cs1, 0x33AA, unknown_1000_33AD_133AD);
    // MOV SI,0x1048 (1000_33AA / 0x133AA)
    SI = 0x1048;
    label_1000_33BD_133BD:
    // RET  (1000_33BD / 0x133BD)
    return NearRet();
  }
  
  public Action unknown_1000_33AD_133AD(int gotoTarget) {
    label_1000_33AD_133AD:
    // CMP BX,word ptr [SI + 0x2] (1000_33AD / 0x133AD)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNZ 0x1000:33bd (1000_33B0 / 0x133B0)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_33BD / 0x133BD)
      return NearRet();
    }
    // MOV CL,byte ptr [SI + 0xe] (1000_33B2 / 0x133B2)
    CL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV AL,0x1 (1000_33B5 / 0x133B5)
    AL = 0x1;
    // SHL AL,CL (1000_33B7 / 0x133B7)
    // AL <<= CL;
    AL = Alu.Shl8(AL, CL);
    // OR byte ptr [0xf7],AL (1000_33B9 / 0x133B9)
    // UInt8[DS, 0xF7] |= AL;
    UInt8[DS, 0xF7] = Alu.Or8(UInt8[DS, 0xF7], AL);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_3385_13385(0x133BD - cs1 * 0x10);
  }
  
  public Action unknown_1000_33BE_133BE(int gotoTarget) {
    label_1000_33BE_133BE:
    // XOR AX,AX (1000_33BE / 0x133BE)
    AX = 0;
    // MOV [0x94],AX (1000_33C0 / 0x133C0)
    UInt16[DS, 0x94] = AX;
    // MOV [0x96],AX (1000_33C3 / 0x133C3)
    UInt16[DS, 0x96] = AX;
    // MOV [0x5c],AX (1000_33C6 / 0x133C6)
    UInt16[DS, 0x5C] = AX;
    // MOV [0x5e],AX (1000_33C9 / 0x133C9)
    UInt16[DS, 0x5E] = AX;
    // MOV BP,0x3406 (1000_33CC / 0x133CC)
    BP = 0x3406;
    // CALL 0x1000:6603 (1000_33CF / 0x133CF)
    NearCall(cs1, 0x33D2, unknown_1000_6603_16603);
    // CALL 0x1000:33d9 (1000_33D2 / 0x133D2)
    NearCall(cs1, 0x33D5, unknown_1000_33D9_133D9);
    // MOV [0x9c],AL (1000_33D5 / 0x133D5)
    UInt8[DS, 0x9C] = AL;
    // RET  (1000_33D8 / 0x133D8)
    return NearRet();
  }
  
  public Action unknown_1000_33D9_133D9(int gotoTarget) {
    label_1000_33D9_133D9:
    // MOV AX,[0x96] (1000_33D9 / 0x133D9)
    AX = UInt16[DS, 0x96];
    // MOV DX,word ptr [0x94] (1000_33DC / 0x133DC)
    DX = UInt16[DS, 0x94];
    // CMP AX,DX (1000_33E0 / 0x133E0)
    Alu.Sub16(AX, DX);
    // PUSHF  (1000_33E2 / 0x133E2)
    Stack.Push(FlagRegister);
    // JNC 0x1000:33e6 (1000_33E3 / 0x133E3)
    if(!CarryFlag) {
      goto label_1000_33E6_133E6;
    }
    // XCHG AX,DX (1000_33E5 / 0x133E5)
    ushort tmp_1000_33E5 = AX;
    AX = DX;
    DX = tmp_1000_33E5;
    label_1000_33E6_133E6:
    // MOV CX,DX (1000_33E6 / 0x133E6)
    CX = DX;
    // JCXZ 0x1000:33fd (1000_33E8 / 0x133E8)
    if(CX == 0) {
      goto label_1000_33FD_133FD;
    }
    // XOR DX,DX (1000_33EA / 0x133EA)
    DX = 0;
    // XCHG DL,AH (1000_33EC / 0x133EC)
    byte tmp_1000_33EC = DL;
    DL = AH;
    AH = tmp_1000_33EC;
    // XCHG AH,AL (1000_33EE / 0x133EE)
    byte tmp_1000_33EE = AH;
    AH = AL;
    AL = tmp_1000_33EE;
    // CMP DX,CX (1000_33F0 / 0x133F0)
    Alu.Sub16(DX, CX);
    // JNC 0x1000:33fd (1000_33F2 / 0x133F2)
    if(!CarryFlag) {
      goto label_1000_33FD_133FD;
    }
    // DIV CX (1000_33F4 / 0x133F4)
    Cpu.Div16(CX);
    // SHR AX,1 (1000_33F6 / 0x133F6)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // CMP AX,0xfc (1000_33F8 / 0x133F8)
    Alu.Sub16(AX, 0xFC);
    // JC 0x1000:3400 (1000_33FB / 0x133FB)
    if(CarryFlag) {
      goto label_1000_3400_13400;
    }
    label_1000_33FD_133FD:
    // MOV AX,0xfc (1000_33FD / 0x133FD)
    AX = 0xFC;
    label_1000_3400_13400:
    // POPF  (1000_3400 / 0x13400)
    FlagRegister = Stack.Pop();
    // JNC 0x1000:3405 (1000_3401 / 0x13401)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_3405 / 0x13405)
      return NearRet();
    }
    // NEG AL (1000_3403 / 0x13403)
    AL = Alu.Sub8(0, AL);
    label_1000_3405_13405:
    // RET  (1000_3405 / 0x13405)
    return NearRet();
  }
  
  public Action unknown_1000_3406_13406(int gotoTarget) {
    label_1000_3406_13406:
    // TEST byte ptr [SI + 0x3],0x20 (1000_3406 / 0x13406)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // JNZ 0x1000:342c (1000_340A / 0x1340A)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_342C / 0x1342C)
      return NearRet();
    }
    // CALL 0x1000:342d (1000_340C / 0x1340C)
    NearCall(cs1, 0x340F, unknown_1000_342D_1342D);
    // TEST byte ptr [SI + 0x10],0x80 (1000_340F / 0x1340F)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:3428 (1000_3413 / 0x13413)
    if(!ZeroFlag) {
      goto label_1000_3428_13428;
    }
    // ADD word ptr [0x96],AX (1000_3415 / 0x13415)
    // UInt16[DS, 0x96] += AX;
    UInt16[DS, 0x96] = Alu.Add16(UInt16[DS, 0x96], AX);
    // MOV AX,word ptr [SI + 0x10] (1000_3419 / 0x13419)
    AX = UInt16[DS, (ushort)(SI + 0x10)];
    // OR word ptr [0x5c],AX (1000_341C / 0x1341C)
    // UInt16[DS, 0x5C] |= AX;
    UInt16[DS, 0x5C] = Alu.Or16(UInt16[DS, 0x5C], AX);
    // MOV AX,word ptr [SI + 0x12] (1000_3420 / 0x13420)
    AX = UInt16[DS, (ushort)(SI + 0x12)];
    // OR word ptr [0x5e],AX (1000_3423 / 0x13423)
    // UInt16[DS, 0x5E] |= AX;
    UInt16[DS, 0x5E] = Alu.Or16(UInt16[DS, 0x5E], AX);
    // RET  (1000_3427 / 0x13427)
    return NearRet();
    label_1000_3428_13428:
    // ADD word ptr [0x94],AX (1000_3428 / 0x13428)
    // UInt16[DS, 0x94] += AX;
    UInt16[DS, 0x94] = Alu.Add16(UInt16[DS, 0x94], AX);
    label_1000_342C_1342C:
    // RET  (1000_342C / 0x1342C)
    return NearRet();
  }
  
  public Action unknown_1000_342D_1342D(int gotoTarget) {
    label_1000_342D_1342D:
    // CALL 0x1000:6efd (1000_342D / 0x1342D)
    NearCall(cs1, 0x3430, unknown_1000_6EFD_16EFD);
    // XOR AH,AH (1000_3430 / 0x13430)
    AH = 0;
    // ADD AL,AL (1000_3432 / 0x13432)
    // AL += AL;
    AL = Alu.Add8(AL, AL);
    // ADD AL,byte ptr [SI + 0x17] (1000_3434 / 0x13434)
    // AL += UInt8[DS, (ushort)(SI + 0x17)];
    AL = Alu.Add8(AL, UInt8[DS, (ushort)(SI + 0x17)]);
    // JNC 0x1000:343b (1000_3437 / 0x13437)
    if(!CarryFlag) {
      goto label_1000_343B_1343B;
    }
    // MOV AL,0xff (1000_3439 / 0x13439)
    AL = 0xFF;
    label_1000_343B_1343B:
    // MUL byte ptr [SI + 0x1a] (1000_343B / 0x1343B)
    Cpu.Mul8(UInt8[DS, (ushort)(SI + 0x1A)]);
    // SHR AX,1 (1000_343E / 0x1343E)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3440 / 0x13440)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3442 / 0x13442)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_3444 / 0x13444)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV DX,AX (1000_3446 / 0x13446)
    DX = AX;
    // MOV BL,byte ptr [SI + 0x19] (1000_3448 / 0x13448)
    BL = UInt8[DS, (ushort)(SI + 0x19)];
    // SHL BL,1 (1000_344B / 0x1344B)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // SHL BL,1 (1000_344D / 0x1344D)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // SHL DX,1 (1000_344F / 0x1344F)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL BL,1 (1000_3451 / 0x13451)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // JNC 0x1000:3459 (1000_3453 / 0x13453)
    if(!CarryFlag) {
      goto label_1000_3459_13459;
    }
    // ADD AX,DX (1000_3455 / 0x13455)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // JC 0x1000:3477 (1000_3457 / 0x13457)
    if(CarryFlag) {
      goto label_1000_3477_13477;
    }
    label_1000_3459_13459:
    // SHL DX,1 (1000_3459 / 0x13459)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL BL,1 (1000_345B / 0x1345B)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // JNC 0x1000:3463 (1000_345D / 0x1345D)
    if(!CarryFlag) {
      goto label_1000_3463_13463;
    }
    // ADD AX,DX (1000_345F / 0x1345F)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // JC 0x1000:3477 (1000_3461 / 0x13461)
    if(CarryFlag) {
      goto label_1000_3477_13477;
    }
    label_1000_3463_13463:
    // SHL DX,1 (1000_3463 / 0x13463)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL BL,1 (1000_3465 / 0x13465)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // JNC 0x1000:346d (1000_3467 / 0x13467)
    if(!CarryFlag) {
      goto label_1000_346D_1346D;
    }
    // ADD AX,DX (1000_3469 / 0x13469)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // JC 0x1000:3477 (1000_346B / 0x1346B)
    if(CarryFlag) {
      goto label_1000_3477_13477;
    }
    label_1000_346D_1346D:
    // SHL DX,1 (1000_346D / 0x1346D)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL BL,1 (1000_346F / 0x1346F)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // JNC 0x1000:347a (1000_3471 / 0x13471)
    if(!CarryFlag) {
      goto label_1000_347A_1347A;
    }
    // ADD AX,DX (1000_3473 / 0x13473)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // JNC 0x1000:347a (1000_3475 / 0x13475)
    if(!CarryFlag) {
      goto label_1000_347A_1347A;
    }
    label_1000_3477_13477:
    // MOV AX,0xffff (1000_3477 / 0x13477)
    AX = 0xFFFF;
    label_1000_347A_1347A:
    // MOV AL,AH (1000_347A / 0x1347A)
    AL = AH;
    // XOR AH,AH (1000_347C / 0x1347C)
    AH = 0;
    // OR AX,AX (1000_347E / 0x1347E)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNZ 0x1000:3489 (1000_3480 / 0x13480)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_3489 / 0x13489)
      return NearRet();
    }
    // CMP byte ptr [SI + 0x1a],0x1 (1000_3482 / 0x13482)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x1A)], 0x1);
    // CMC  (1000_3486 / 0x13486)
    CarryFlag = !CarryFlag;
    // ADC AL,AH (1000_3487 / 0x13487)
    AL = Alu.Adc8(AL, AH);
    label_1000_3489_13489:
    // RET  (1000_3489 / 0x13489)
    return NearRet();
  }
  
  public Action unknown_1000_34A5_134A5(int gotoTarget) {
    label_1000_34A5_134A5:
    // PUSH SI (1000_34A5 / 0x134A5)
    Stack.Push(SI);
    // PUSH DS (1000_34A6 / 0x134A6)
    Stack.Push(DS);
    // POP ES (1000_34A7 / 0x134A7)
    ES = Stack.Pop();
    // PUSH DI (1000_34A8 / 0x134A8)
    Stack.Push(DI);
    // MOV DI,0x60 (1000_34A9 / 0x134A9)
    DI = 0x60;
    // MOV CX,0x33 (1000_34AC / 0x134AC)
    CX = 0x33;
    // XOR AL,AL (1000_34AF / 0x134AF)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_34B1 / 0x134B1)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DI (1000_34B3 / 0x134B3)
    DI = Stack.Pop();
    // MOV BP,0x34d0 (1000_34B4 / 0x134B4)
    BP = 0x34D0;
    // CALL 0x1000:6639 (1000_34B7 / 0x134B7)
    NearCall(cs1, 0x34BA, unknown_1000_6639_16639);
    // MOV AL,[0x60] (1000_34BA / 0x134BA)
    AL = UInt8[DS, 0x60];
    // ADD AL,byte ptr [0x7e] (1000_34BD / 0x134BD)
    // AL += UInt8[DS, 0x7E];
    AL = Alu.Add8(AL, UInt8[DS, 0x7E]);
    // MOV [0x91],AL (1000_34C1 / 0x134C1)
    UInt8[DS, 0x91] = AL;
    // MOV AL,[0x61] (1000_34C4 / 0x134C4)
    AL = UInt8[DS, 0x61];
    // ADD AL,byte ptr [0x7f] (1000_34C7 / 0x134C7)
    // AL += UInt8[DS, 0x7F];
    AL = Alu.Add8(AL, UInt8[DS, 0x7F]);
    // MOV [0x92],AL (1000_34CB / 0x134CB)
    UInt8[DS, 0x92] = AL;
    // POP SI (1000_34CE / 0x134CE)
    SI = Stack.Pop();
    // RET  (1000_34CF / 0x134CF)
    return NearRet();
  }
  
  public Action unknown_1000_34D0_134D0(int gotoTarget) {
    switch(gotoTarget) {
      case 0x351A: goto label_1000_351A_1351A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_34D0_134D0:
    // TEST byte ptr [SI + 0x3],0x20 (1000_34D0 / 0x134D0)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // JNZ 0x1000:351a (1000_34D4 / 0x134D4)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_351A / 0x1351A)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_34D6 / 0x134D6)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // MOV DX,0x61 (1000_34D9 / 0x134D9)
    DX = 0x61;
    // TEST AL,0x40 (1000_34DC / 0x134DC)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:34e3 (1000_34DE / 0x134DE)
    if(ZeroFlag) {
      goto label_1000_34E3_134E3;
    }
    // MOV DX,0x7f (1000_34E0 / 0x134E0)
    DX = 0x7F;
    label_1000_34E3_134E3:
    // MOV BX,DX (1000_34E3 / 0x134E3)
    BX = DX;
    // TEST byte ptr [SI + 0x10],0x80 (1000_34E5 / 0x134E5)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:34f0 (1000_34E9 / 0x134E9)
    if(!ZeroFlag) {
      goto label_1000_34F0_134F0;
    }
    // DEC BX (1000_34EB / 0x134EB)
    BX = Alu.Dec16(BX);
    // CMP AL,0x80 (1000_34EC / 0x134EC)
    Alu.Sub8(AL, 0x80);
    // JZ 0x1000:351b (1000_34EE / 0x134EE)
    if(ZeroFlag) {
      goto label_1000_351B_1351B;
    }
    label_1000_34F0_134F0:
    // INC byte ptr [BX] (1000_34F0 / 0x134F0)
    UInt8[DS, BX] = Alu.Inc8(UInt8[DS, BX]);
    // MOV AH,AL (1000_34F2 / 0x134F2)
    AH = AL;
    // AND AX,0x30f (1000_34F4 / 0x134F4)
    // AX &= 0x30F;
    AX = Alu.And16(AX, 0x30F);
    // CMP AH,0x3 (1000_34F7 / 0x134F7)
    Alu.Sub8(AH, 0x3);
    // JNZ 0x1000:34fe (1000_34FA / 0x134FA)
    if(!ZeroFlag) {
      goto label_1000_34FE_134FE;
    }
    // AND AL,0xfc (1000_34FC / 0x134FC)
    // AL &= 0xFC;
    AL = Alu.And8(AL, 0xFC);
    label_1000_34FE_134FE:
    // XOR AH,AH (1000_34FE / 0x134FE)
    AH = 0;
    // MOV BX,DX (1000_3500 / 0x13500)
    BX = DX;
    // ADD BX,AX (1000_3502 / 0x13502)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // INC byte ptr [BX + 0x1] (1000_3504 / 0x13504)
    UInt8[DS, (ushort)(BX + 0x1)] = Alu.Inc8(UInt8[DS, (ushort)(BX + 0x1)]);
    // CMP BX,0x7f (1000_3507 / 0x13507)
    Alu.Sub16(BX, 0x7F);
    // JNC 0x1000:351a (1000_350B / 0x1350B)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_351A / 0x1351A)
      return NearRet();
    }
    // MOV AX,word ptr [SI + 0x12] (1000_350D / 0x1350D)
    AX = UInt16[DS, (ushort)(SI + 0x12)];
    // AND AX,0xf (1000_3510 / 0x13510)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // MOV BX,0x71 (1000_3513 / 0x13513)
    BX = 0x71;
    // ADD BX,AX (1000_3516 / 0x13516)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // INC byte ptr [BX] (1000_3518 / 0x13518)
    UInt8[DS, BX] = Alu.Inc8(UInt8[DS, BX]);
    label_1000_351A_1351A:
    // RET  (1000_351A / 0x1351A)
    return NearRet();
    label_1000_351B_1351B:
    // INC byte ptr [0x90] (1000_351B / 0x1351B)
    UInt8[DS, 0x90] = Alu.Inc8(UInt8[DS, 0x90]);
    // RET  (1000_351F / 0x1351F)
    return NearRet();
  }
  
  public Action unknown_1000_3520_13520(int gotoTarget) {
    switch(gotoTarget) {
      case 0x35AC: goto label_1000_35AC_135AC;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3520_13520:
    // CMP byte ptr [0x47a7],0x0 (1000_3520 / 0x13520)
    Alu.Sub8(UInt8[DS, 0x47A7], 0x0);
    // JNZ 0x1000:351a (1000_3525 / 0x13525)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_351A / 0x1351A)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0xe] (1000_3527 / 0x13527)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // XOR AH,AH (1000_352A / 0x1352A)
    AH = 0;
    // PUSH SI (1000_352C / 0x1352C)
    Stack.Push(SI);
    // CALL 0x1000:96f1 (1000_352D / 0x1352D)
    NearCall(cs1, 0x3530, unknown_1000_96F1_196F1);
    // POP SI (1000_3530 / 0x13530)
    SI = Stack.Pop();
    // JNC 0x1000:3542 (1000_3531 / 0x13531)
    if(!CarryFlag) {
      // Jump converted to non entry function call
      return unknown_1000_2B2A_12B2A(0x13542 - cs1 * 0x10);
    }
    // MOV AX,[0x47c4] (1000_3533 / 0x13533)
    AX = UInt16[DS, 0x47C4];
    // MOV DI,word ptr [0x114e] (1000_3536 / 0x13536)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:2aaf (1000_353A / 0x1353A)
    NearCall(cs1, 0x353D, unknown_1000_2AAF_12AAF);
    // JNC 0x1000:35ac (1000_353D / 0x1353D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_35AC / 0x135AC)
      return NearRet();
    }
    // CALL 0x1000:2b00 (1000_353F / 0x1353F)
    NearCall(cs1, 0x3542, unknown_1000_2B00_12B00);
    label_1000_35AC_135AC:
    // RET  (1000_35AC / 0x135AC)
    return NearRet();
  }
  
  public Action unknown_1000_3551_13551(int gotoTarget) {
    label_1000_3551_13551:
    // INC byte ptr [0x47a7] (1000_3551 / 0x13551)
    UInt8[DS, 0x47A7] = Alu.Inc8(UInt8[DS, 0x47A7]);
    // CMP byte ptr [0x23],0x3 (1000_3555 / 0x13555)
    Alu.Sub8(UInt8[DS, 0x23], 0x3);
    // JNZ 0x1000:3572 (1000_355A / 0x1355A)
    if(!ZeroFlag) {
      goto label_1000_3572_13572;
    }
    // MOV BP,0x1f92 (1000_355C / 0x1355C)
    BP = 0x1F92;
    // MOV BX,0x97cf (1000_355F / 0x1355F)
    BX = 0x97CF;
    // CALL 0x1000:d323 (1000_3562 / 0x13562)
    NearCall(cs1, 0x3565, unknown_1000_D323_1D323);
    // MOV word ptr [0x1bea],0x0 (1000_3565 / 0x13565)
    UInt16[DS, 0x1BEA] = 0x0;
    // MOV word ptr [0x1bf8],0x0 (1000_356B / 0x1356B)
    UInt16[DS, 0x1BF8] = 0x0;
    // RET  (1000_3571 / 0x13571)
    return NearRet();
    label_1000_3572_13572:
    // CMP byte ptr [0x23],0x4 (1000_3572 / 0x13572)
    Alu.Sub8(UInt8[DS, 0x23], 0x4);
    // JNZ 0x1000:3595 (1000_3577 / 0x13577)
    if(!ZeroFlag) {
      goto label_1000_3595_13595;
    }
    // MOV BP,0x1f9e (1000_3579 / 0x13579)
    BP = 0x1F9E;
    // AND byte ptr [BP + 0xb],0xbf (1000_357C / 0x1357C)
    // UInt8[SS, (ushort)(BP + 0xB)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.And8(UInt8[SS, (ushort)(BP + 0xB)], 0xBF);
    // MOV BX,0x97cf (1000_3580 / 0x13580)
    BX = 0x97CF;
    // CALL 0x1000:d323 (1000_3583 / 0x13583)
    NearCall(cs1, 0x3586, unknown_1000_D323_1D323);
    // MOV word ptr [0x1bea],0x0 (1000_3586 / 0x13586)
    UInt16[DS, 0x1BEA] = 0x0;
    // MOV word ptr [0x1bf8],0x0 (1000_358C / 0x1358C)
    UInt16[DS, 0x1BF8] = 0x0;
    // JMP 0x1000:2ffb (1000_3592 / 0x13592)
    // Jump converted to entry function call
    return unknown_1000_2FFB_12FFB(0);
    label_1000_3595_13595:
    // CMP byte ptr [0x4774],0x0 (1000_3595 / 0x13595)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JNZ 0x1000:35ac (1000_359A / 0x1359A)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_35AC / 0x135AC)
      return NearRet();
    }
    // CMP byte ptr [0x23],0x64 (1000_359C / 0x1359C)
    Alu.Sub8(UInt8[DS, 0x23], 0x64);
    // JNC 0x1000:35ac (1000_35A1 / 0x135A1)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_35AC / 0x135AC)
      return NearRet();
    }
    // MOV AX,[0x47c4] (1000_35A3 / 0x135A3)
    AX = UInt16[DS, 0x47C4];
    // CALL 0x1000:93df (1000_35A6 / 0x135A6)
    NearCall(cs1, 0x35A9, unknown_1000_93DF_193DF);
    // CALL 0x1000:d280 (1000_35A9 / 0x135A9)
    NearCall(cs1, 0x35AC, unknown_1000_D280_1D280);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_3520_13520(0x135AC - cs1 * 0x10);
  }
  
  public Action unknown_1000_35AD_135AD(int gotoTarget) {
    switch(gotoTarget) {
      case 0x35AD: goto label_1000_35AD_135AD;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_35AD_135AD:
    // CMP byte ptr [0x11c9],0x0 (1000_35AD / 0x135AD)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:35e9 (1000_35B2 / 0x135B2)
    if(!ZeroFlag) {
      goto label_1000_35E9_135E9;
    }
    // XOR AX,AX (1000_35B4 / 0x135B4)
    AX = 0;
    // MOV [0x1a],AL (1000_35B6 / 0x135B6)
    UInt8[DS, 0x1A] = AL;
    // MOV [0x47a7],AL (1000_35B9 / 0x135B9)
    UInt8[DS, 0x47A7] = AL;
    // XCHG byte ptr [0x47a6],AL (1000_35BC / 0x135BC)
    byte tmp_1000_35BC = UInt8[DS, 0x47A6];
    UInt8[DS, 0x47A6] = AL;
    AL = tmp_1000_35BC;
    // OR AL,AL (1000_35C0 / 0x135C0)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:35ac (1000_35C2 / 0x135C2)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_35AC / 0x135AC)
      return NearRet();
    }
    // INC byte ptr [0x1a] (1000_35C4 / 0x135C4)
    UInt8[DS, 0x1A] = Alu.Inc8(UInt8[DS, 0x1A]);
    // CMP byte ptr [0xb],0x8 (1000_35C8 / 0x135C8)
    Alu.Sub8(UInt8[DS, 0xB], 0x8);
    // JNZ 0x1000:35e3 (1000_35CD / 0x135CD)
    if(!ZeroFlag) {
      goto label_1000_35E3_135E3;
    }
    // MOV AX,[0xc0] (1000_35CF / 0x135CF)
    AX = UInt16[DS, 0xC0];
    // AND AX,word ptr [0x1158] (1000_35D2 / 0x135D2)
    // AX &= UInt16[DS, 0x1158];
    AX = Alu.And16(AX, UInt16[DS, 0x1158]);
    // JZ 0x1000:35e3 (1000_35D6 / 0x135D6)
    if(ZeroFlag) {
      goto label_1000_35E3_135E3;
    }
    // TEST word ptr [0x12],0x8 (1000_35D8 / 0x135D8)
    Alu.And16(UInt16[DS, 0x12], 0x8);
    // JZ 0x1000:35e3 (1000_35DE / 0x135DE)
    if(ZeroFlag) {
      goto label_1000_35E3_135E3;
    }
    // CALL 0x1000:2566 (1000_35E0 / 0x135E0)
    NearCall(cs1, 0x35E3, unknown_1000_2566_12566);
    label_1000_35E3_135E3:
    // MOV BP,0x3520 (1000_35E3 / 0x135E3)
    BP = 0x3520;
    // JMP 0x1000:36ee (1000_35E6 / 0x135E6)
    // Jump converted to entry function call
    return unknown_1000_36EE_136EE(0);
    label_1000_35E9_135E9:
    // XOR AX,AX (1000_35E9 / 0x135E9)
    AX = 0;
    // MOV [0x1a],AL (1000_35EB / 0x135EB)
    UInt8[DS, 0x1A] = AL;
    // MOV [0x47a7],AL (1000_35EE / 0x135EE)
    UInt8[DS, 0x47A7] = AL;
    // MOV [0x23],AL (1000_35F1 / 0x135F1)
    UInt8[DS, 0x23] = AL;
    // XCHG byte ptr [0x47a6],AL (1000_35F4 / 0x135F4)
    byte tmp_1000_35F4 = UInt8[DS, 0x47A6];
    UInt8[DS, 0x47A6] = AL;
    AL = tmp_1000_35F4;
    // OR AL,AL (1000_35F8 / 0x135F8)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:35ac (1000_35FA / 0x135FA)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_35AC / 0x135AC)
      return NearRet();
    }
    // CMP word ptr [0x1152],-0x1 (1000_35FC / 0x135FC)
    Alu.Sub16(UInt16[DS, 0x1152], 0xFFFF);
    // JZ 0x1000:3637 (1000_3601 / 0x13601)
    if(ZeroFlag) {
      goto label_1000_3637_13637;
    }
    // CALL 0x1000:40f9 (1000_3603 / 0x13603)
    NearCall(cs1, 0x3606, unknown_1000_40F9_140F9);
    // CALL 0x1000:4182 (1000_3606 / 0x13606)
    NearCall(cs1, 0x3609, unknown_1000_4182_14182);
    // CMP byte ptr [0x23],0x0 (1000_3609 / 0x13609)
    Alu.Sub8(UInt8[DS, 0x23], 0x0);
    // JZ 0x1000:3636 (1000_360E / 0x1360E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_3636 / 0x13636)
      return NearRet();
    }
    // CALL 0x1000:366f (1000_3610 / 0x13610)
    NearCall(cs1, 0x3613, unknown_1000_366F_1366F);
    // JS 0x1000:3636 (1000_3613 / 0x13613)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_3636 / 0x13636)
      return NearRet();
    }
    // CALL 0x1000:dbb2 (1000_3615 / 0x13615)
    NearCall(cs1, 0x3618, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:368b (1000_3618 / 0x13618)
    NearCall(cs1, 0x361B, unknown_1000_368B_1368B);
    // PUSH AX (1000_361B / 0x1361B)
    Stack.Push(AX);
    // MOV AX,0x4b (1000_361C / 0x1361C)
    AX = 0x4B;
    // CALL 0x1000:e387 (1000_361F / 0x1361F)
    NearCall(cs1, 0x3622, unknown_1000_E387_1E387);
    // POP AX (1000_3622 / 0x13622)
    AX = Stack.Pop();
    // PUSH AX (1000_3623 / 0x13623)
    Stack.Push(AX);
    // CALL 0x1000:96d8 (1000_3624 / 0x13624)
    NearCall(cs1, 0x3627, unknown_1000_96D8_196D8);
    // POP AX (1000_3627 / 0x13627)
    AX = Stack.Pop();
    // JC 0x1000:3636 (1000_3628 / 0x13628)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_3636 / 0x13636)
      return NearRet();
    }
    // MOV CL,0x10 (1000_362A / 0x1362A)
    CL = 0x10;
    // MUL CL (1000_362C / 0x1362C)
    Cpu.Mul8(CL);
    // ADD AX,0xfd8 (1000_362E / 0x1362E)
    // AX += 0xFD8;
    AX = Alu.Add16(AX, 0xFD8);
    // MOV SI,AX (1000_3631 / 0x13631)
    SI = AX;
    // CALL 0x1000:3551 (1000_3633 / 0x13633)
    NearCall(cs1, 0x3636, unknown_1000_3551_13551);
    label_1000_3636_13636:
    // RET  (1000_3636 / 0x13636)
    return NearRet();
    label_1000_3637_13637:
    // CALL 0x1000:4182 (1000_3637 / 0x13637)
    NearCall(cs1, 0x363A, unknown_1000_4182_14182);
    // CMP byte ptr [0x23],0x0 (1000_363A / 0x1363A)
    Alu.Sub8(UInt8[DS, 0x23], 0x0);
    // JZ 0x1000:3636 (1000_363F / 0x1363F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_3636 / 0x13636)
      return NearRet();
    }
    // CALL 0x1000:dbb2 (1000_3641 / 0x13641)
    NearCall(cs1, 0x3644, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:439f (1000_3644 / 0x13644)
    NearCall(cs1, 0x3647, unknown_1000_439F_1439F);
    // MOV CX,0x200c (1000_3647 / 0x13647)
    CX = 0x200C;
    // MOV DX,0x66 (1000_364A / 0x1364A)
    DX = 0x66;
    // MOV BX,0x4e (1000_364D / 0x1364D)
    BX = 0x4E;
    // MOV AX,0xbf (1000_3650 / 0x13650)
    AX = 0xBF;
    // CALL 0x1000:d194 (1000_3653 / 0x13653)
    NearCall(cs1, 0x3656, unknown_1000_D194_1D194);
    // CALL 0x1000:c0f4 (1000_3656 / 0x13656)
    NearCall(cs1, 0x3659, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c4dd (1000_3659 / 0x13659)
    NearCall(cs1, 0x365C, unknown_1000_C4DD_1C4DD);
    // CALL 0x1000:4aca (1000_365C / 0x1365C)
    NearCall(cs1, 0x365F, SetUnknown11CATo1_1000_4ACA_14ACA);
    // MOV BP,0x1f9e (1000_365F / 0x1365F)
    BP = 0x1F9E;
    // OR byte ptr [BP + 0xb],0x40 (1000_3662 / 0x13662)
    // UInt8[SS, (ushort)(BP + 0xB)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0xB)], 0x40);
    // MOV BX,0x4abe (1000_3666 / 0x13666)
    BX = 0x4ABE;
    // CALL 0x1000:d323 (1000_3669 / 0x13669)
    NearCall(cs1, 0x366C, unknown_1000_D323_1D323);
    // JMP 0x1000:2ffb (1000_366C / 0x1366C)
    // Jump converted to entry function call
    return unknown_1000_2FFB_12FFB(0);
  }
  
  public Action unknown_1000_366F_1366F(int gotoTarget) {
    label_1000_366F_1366F:
    // MOV AX,[0x1152] (1000_366F / 0x1366F)
    AX = UInt16[DS, 0x1152];
    // CMP AX,0xffff (1000_3672 / 0x13672)
    Alu.Sub16(AX, 0xFFFF);
    // JZ 0x1000:3688 (1000_3675 / 0x13675)
    if(ZeroFlag) {
      goto label_1000_3688_13688;
    }
    // CMP AH,0xff (1000_3677 / 0x13677)
    Alu.Sub8(AH, 0xFF);
    // JZ 0x1000:3686 (1000_367A / 0x1367A)
    if(ZeroFlag) {
      goto label_1000_3686_13686;
    }
    // TEST word ptr [0x0],0x80 (1000_367C / 0x1367C)
    Alu.And16(UInt16[DS, 0x0], 0x80);
    // JNZ 0x1000:3686 (1000_3682 / 0x13682)
    if(!ZeroFlag) {
      goto label_1000_3686_13686;
    }
    // XCHG AH,AL (1000_3684 / 0x13684)
    byte tmp_1000_3684 = AH;
    AH = AL;
    AL = tmp_1000_3684;
    label_1000_3686_13686:
    // XOR AH,AH (1000_3686 / 0x13686)
    AH = 0;
    label_1000_3688_13688:
    // OR AX,AX (1000_3688 / 0x13688)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // RET  (1000_368A / 0x1368A)
    return NearRet();
  }
  
  public Action unknown_1000_368B_1368B(int gotoTarget) {
    label_1000_368B_1368B:
    // CALL 0x1000:e270 (1000_368B / 0x1368B)
    NearCall(cs1, 0x368E, PushAll_1000_E270_1E270);
    // OR byte ptr [0x4728],0x1 (1000_368E / 0x1368E)
    // UInt8[DS, 0x4728] |= 0x1;
    UInt8[DS, 0x4728] = Alu.Or8(UInt8[DS, 0x4728], 0x1);
    // MOV BL,byte ptr [0x11c9] (1000_3693 / 0x13693)
    BL = UInt8[DS, 0x11C9];
    // AND BL,0x3 (1000_3697 / 0x13697)
    // BL &= 0x3;
    BL = Alu.And8(BL, 0x3);
    // CMP BL,0x2 (1000_369A / 0x1369A)
    Alu.Sub8(BL, 0x2);
    // JZ 0x1000:36cb (1000_369D / 0x1369D)
    if(ZeroFlag) {
      goto label_1000_36CB_136CB;
    }
    // DEC BL (1000_369F / 0x1369F)
    BL = Alu.Dec8(BL);
    // JNZ 0x1000:36c7 (1000_36A1 / 0x136A1)
    if(!ZeroFlag) {
      goto label_1000_36C7_136C7;
    }
    // MOV byte ptr [0x473e],0x1 (1000_36A3 / 0x136A3)
    UInt8[DS, 0x473E] = 0x1;
    // MOV byte ptr [0x47a4],0x1 (1000_36A8 / 0x136A8)
    UInt8[DS, 0x47A4] = 0x1;
    // PUSH AX (1000_36AD / 0x136AD)
    Stack.Push(AX);
    // MOV AL,0x34 (1000_36AE / 0x136AE)
    AL = 0x34;
    // CALL 0x1000:c2f2 (1000_36B0 / 0x136B0)
    NearCall(cs1, 0x36B3, unknown_1000_C2F2_1C2F2);
    // CALL 0x1000:c0f4 (1000_36B3 / 0x136B3)
    NearCall(cs1, 0x36B6, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c412 (1000_36B6 / 0x136B6)
    NearCall(cs1, 0x36B9, unknown_1000_C412_1C412);
    // POP AX (1000_36B9 / 0x136B9)
    AX = Stack.Pop();
    // OR AX,AX (1000_36BA / 0x136BA)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x1000:36c4 (1000_36BC / 0x136BC)
    if(SignFlag) {
      goto label_1000_36C4_136C4;
    }
    // MOV [0x47c4],AX (1000_36BE / 0x136BE)
    UInt16[DS, 0x47C4] = AX;
    // CALL 0x1000:978e (1000_36C1 / 0x136C1)
    NearCall(cs1, 0x36C4, unknown_1000_978E_1978E);
    label_1000_36C4_136C4:
    // CALL 0x1000:c4dd (1000_36C4 / 0x136C4)
    NearCall(cs1, 0x36C7, unknown_1000_C4DD_1C4DD);
    label_1000_36C7_136C7:
    // CALL 0x1000:e283 (1000_36C7 / 0x136C7)
    NearCall(cs1, 0x36CA, PopAll_1000_E283_1E283);
    // RET  (1000_36CA / 0x136CA)
    return NearRet();
    label_1000_36CB_136CB:
    // CALL 0x1000:4aeb (1000_36CB / 0x136CB)
    throw FailAsUntested("Could not find a valid function at address 1000_4AEB / 0x14AEB");
    // CALL 0x1000:c474 (1000_36CE / 0x136CE)
    NearCall(cs1, 0x36D1, unknown_1000_C474_1C474);
    // JMP 0x1000:36c7 (1000_36D1 / 0x136D1)
    goto label_1000_36C7_136C7;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_36D3_136D3(0);
  }
  
  public Action unknown_1000_36D3_136D3(int gotoTarget) {
    label_1000_36D3_136D3:
    // CMP byte ptr [0x23],0x0 (1000_36D3 / 0x136D3)
    Alu.Sub8(UInt8[DS, 0x23], 0x0);
    // JZ 0x1000:36ed (1000_36D8 / 0x136D8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_36ED / 0x136ED)
      return NearRet();
    }
    // CALL 0x1000:98b2 (1000_36DA / 0x136DA)
    NearCall(cs1, 0x36DD, unknown_1000_98B2_198B2);
    // MOV byte ptr [0x47a7],0x0 (1000_36DD / 0x136DD)
    UInt8[DS, 0x47A7] = 0x0;
    // MOV BP,0x3520 (1000_36E2 / 0x136E2)
    BP = 0x3520;
    // CALL 0x1000:36ee (1000_36E5 / 0x136E5)
    NearCall(cs1, 0x36E8, unknown_1000_36EE_136EE);
    // MOV byte ptr [0x23],0x0 (1000_36E8 / 0x136E8)
    UInt8[DS, 0x23] = 0x0;
    label_1000_36ED_136ED:
    // RET  (1000_36ED / 0x136ED)
    return NearRet();
  }
  
  public Action unknown_1000_36EE_136EE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x36EE: goto label_1000_36EE_136EE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_36EE_136EE:
    // PUSH BX (1000_36EE / 0x136EE)
    Stack.Push(BX);
    // PUSH DX (1000_36EF / 0x136EF)
    Stack.Push(DX);
    // MOV SI,0xfd8 (1000_36F0 / 0x136F0)
    SI = 0xFD8;
    // MOV CX,0x10 (1000_36F3 / 0x136F3)
    CX = 0x10;
    // MOV BX,word ptr [0x6] (1000_36F6 / 0x136F6)
    BX = UInt16[DS, 0x6];
    // MOV DX,word ptr [0x4] (1000_36FA / 0x136FA)
    DX = UInt16[DS, 0x4];
    label_1000_36FE_136FE:
    // CMP BX,word ptr [SI + 0x2] (1000_36FE / 0x136FE)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNZ 0x1000:371b (1000_3701 / 0x13701)
    if(!ZeroFlag) {
      goto label_1000_371B_1371B;
    }
    // CMP DX,word ptr [SI] (1000_3703 / 0x13703)
    Alu.Sub16(DX, UInt16[DS, SI]);
    // JNZ 0x1000:371b (1000_3705 / 0x13705)
    if(!ZeroFlag) {
      goto label_1000_371B_1371B;
    }
    // POP DX (1000_3707 / 0x13707)
    DX = Stack.Pop();
    // POP BX (1000_3708 / 0x13708)
    BX = Stack.Pop();
    // PUSH BX (1000_3709 / 0x13709)
    Stack.Push(BX);
    // PUSH DX (1000_370A / 0x1370A)
    Stack.Push(DX);
    // PUSH CX (1000_370B / 0x1370B)
    Stack.Push(CX);
    // PUSH SI (1000_370C / 0x1370C)
    Stack.Push(SI);
    // PUSH BP (1000_370D / 0x1370D)
    Stack.Push(BP);
    // CALL BP (1000_370E / 0x1370E)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_370E = (uint)(BP);
    switch(targetAddress_1000_370E) {
      case 0x30B9 : NearCall(cs1, 0x3710, unknown_1000_30B9_130B9);
        break;
      case 0x3120 : NearCall(cs1, 0x3710, unknown_1000_3120_13120);
        break;
      case 0x3520 : NearCall(cs1, 0x3710, unknown_1000_3520_13520);
        break;
      case 0x40C9 : NearCall(cs1, 0x3710, unknown_1000_40C9_140C9);
        break;
      case 0x40E6 : NearCall(cs1, 0x3710, unknown_1000_40E6_140E6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_370E);
        break;
    }
    // POP BP (1000_3710 / 0x13710)
    BP = Stack.Pop();
    // POP SI (1000_3711 / 0x13711)
    SI = Stack.Pop();
    // POP CX (1000_3712 / 0x13712)
    CX = Stack.Pop();
    // MOV BX,word ptr [0x6] (1000_3713 / 0x13713)
    BX = UInt16[DS, 0x6];
    // MOV DX,word ptr [0x4] (1000_3717 / 0x13717)
    DX = UInt16[DS, 0x4];
    label_1000_371B_1371B:
    // ADD SI,0x10 (1000_371B / 0x1371B)
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // LOOP 0x1000:36fe (1000_371E / 0x1371E)
    if(--CX != 0) {
      goto label_1000_36FE_136FE;
    }
    // POP DX (1000_3720 / 0x13720)
    DX = Stack.Pop();
    // POP BX (1000_3721 / 0x13721)
    BX = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_2E52_12E52(0x13722 - cs1 * 0x10);
  }
  
  public Action unknown_1000_37AD_137AD(int gotoTarget) {
    label_1000_37AD_137AD:
    // MOV AL,0x22 (1000_37AD / 0x137AD)
    AL = 0x22;
    // JMP 0x1000:c2f2 (1000_37AF / 0x137AF)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
  }
  
  public Action unknown_1000_37B2_137B2(int gotoTarget) {
    label_1000_37B2_137B2:
    // CALL 0x1000:98e6 (1000_37B2 / 0x137B2)
    NearCall(cs1, 0x37B5, unknown_1000_98E6_198E6);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_37B5_137B5(0);
  }
  
  public Action unknown_1000_37B5_137B5(int gotoTarget) {
    label_1000_37B5_137B5:
    // CALL 0x1000:4d00 (1000_37B5 / 0x137B5)
    NearCall(cs1, 0x37B8, unknown_1000_4D00_14D00);
    // MOV word ptr [0x472d],0x0 (1000_37B8 / 0x137B8)
    UInt16[DS, 0x472D] = 0x0;
    // CALL 0x1000:5ba8 (1000_37BE / 0x137BE)
    NearCall(cs1, 0x37C1, MemCopy8Bytes_1000_5BA8_15BA8);
    // CALL 0x1000:c432 (1000_37C1 / 0x137C1)
    NearCall(cs1, 0x37C4, unknown_1000_C432_1C432);
    // MOV AX,0xffff (1000_37C4 / 0x137C4)
    AX = 0xFFFF;
    // CMP byte ptr [0x8],AL (1000_37C7 / 0x137C7)
    Alu.Sub8(UInt8[DS, 0x8], AL);
    // JZ 0x1000:37d5 (1000_37CB / 0x137CB)
    if(ZeroFlag) {
      goto label_1000_37D5_137D5;
    }
    // MOV DX,word ptr [0x4] (1000_37CD / 0x137CD)
    DX = UInt16[DS, 0x4];
    // CALL 0x1000:3efe (1000_37D1 / 0x137D1)
    NearCall(cs1, 0x37D4, unknown_1000_3EFE_13EFE);
    // LODSB SI (1000_37D4 / 0x137D4)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_37D5_137D5:
    // OR AX,AX (1000_37D5 / 0x137D5)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x1000:37dc (1000_37D7 / 0x137D7)
    if(SignFlag) {
      goto label_1000_37DC_137DC;
    }
    // JMP 0x1000:39ec (1000_37D9 / 0x137D9)
    goto label_1000_39EC_139EC;
    label_1000_37DC_137DC:
    // CALL 0x1000:3ae9 (1000_37DC / 0x137DC)
    NearCall(cs1, 0x37DF, Fill47F8WithFF_1000_3AE9_13AE9);
    // OR byte ptr [0x47a4],0x1 (1000_37DF / 0x137DF)
    // UInt8[DS, 0x47A4] |= 0x1;
    UInt8[DS, 0x47A4] = Alu.Or8(UInt8[DS, 0x47A4], 0x1);
    // TEST byte ptr [0x11c9],0x3 (1000_37E4 / 0x137E4)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JNZ 0x1000:37f4 (1000_37E9 / 0x137E9)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_37F4_137F4(0);
    }
    label_1000_39EC_139EC:
    // MOV byte ptr [0x22e3],0x1 (1000_39EC / 0x139EC)
    UInt8[DS, 0x22E3] = 0x1;
    // PUSH AX (1000_39F1 / 0x139F1)
    Stack.Push(AX);
    // CALL 0x1000:3ae9 (1000_39F2 / 0x139F2)
    NearCall(cs1, 0x39F5, Fill47F8WithFF_1000_3AE9_13AE9);
    // MOV AX,[0x4] (1000_39F5 / 0x139F5)
    AX = UInt16[DS, 0x4];
    // CMP AX,0x2005 (1000_39F8 / 0x139F8)
    Alu.Sub16(AX, 0x2005);
    // JZ 0x1000:3a1d (1000_39FB / 0x139FB)
    if(ZeroFlag) {
      goto label_1000_3A1D_13A1D;
    }
    // CMP AX,0x1005 (1000_39FD / 0x139FD)
    Alu.Sub16(AX, 0x1005);
    // JZ 0x1000:3a18 (1000_3A00 / 0x13A00)
    if(ZeroFlag) {
      goto label_1000_3A18_13A18;
    }
    // DEC AL (1000_3A02 / 0x13A02)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:3a20 (1000_3A04 / 0x13A04)
    if(!ZeroFlag) {
      goto label_1000_3A20_13A20;
    }
    // CMP AH,0x21 (1000_3A06 / 0x13A06)
    Alu.Sub8(AH, 0x21);
    // JNZ 0x1000:3a13 (1000_3A09 / 0x13A09)
    if(!ZeroFlag) {
      goto label_1000_3A13_13A13;
    }
    // POP AX (1000_3A0B / 0x13A0B)
    AX = Stack.Pop();
    // MOV DI,word ptr [0x114e] (1000_3A0C / 0x13A0C)
    DI = UInt16[DS, 0x114E];
    // MOV AL,byte ptr [DI] (1000_3A10 / 0x13A10)
    AL = UInt8[DS, DI];
    // PUSH AX (1000_3A12 / 0x13A12)
    Stack.Push(AX);
    label_1000_3A13_13A13:
    // CALL 0x1000:37eb (1000_3A13 / 0x13A13)
    NearCall(cs1, 0x3A16, unknown_1000_37EB_137EB);
    // JMP 0x1000:3a20 (1000_3A16 / 0x13A16)
    goto label_1000_3A20_13A20;
    label_1000_3A18_13A18:
    // MOV byte ptr [0x22e3],0x0 (1000_3A18 / 0x13A18)
    UInt8[DS, 0x22E3] = 0x0;
    label_1000_3A1D_13A1D:
    // CALL 0x1000:38b4 (1000_3A1D / 0x13A1D)
    NearCall(cs1, 0x3A20, unknown_1000_38B4_138B4);
    label_1000_3A20_13A20:
    // POP AX (1000_3A20 / 0x13A20)
    AX = Stack.Pop();
    // CALL 0x1000:3b59 (1000_3A21 / 0x13A21)
    NearCall(cs1, 0x3A24, draw_SAL_ida_1000_3B59_13B59);
    // CMP byte ptr [0x46df],0x0 (1000_3A24 / 0x13A24)
    Alu.Sub8(UInt8[DS, 0x46DF], 0x0);
    // JZ 0x1000:3a7c (1000_3A29 / 0x13A29)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_3A7C_13A7C(0);
    }
    // CMP byte ptr [0x4],0x1 (1000_3A2B / 0x13A2B)
    Alu.Sub8(UInt8[DS, 0x4], 0x1);
    // JNZ 0x1000:3a7c (1000_3A30 / 0x13A30)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_3A7C_13A7C(0);
    }
    // CMP byte ptr [0x4731],0xff (1000_3A32 / 0x13A32)
    Alu.Sub8(UInt8[DS, 0x4731], 0xFF);
    // JZ 0x1000:3a7b (1000_3A37 / 0x13A37)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_3A7B / 0x13A7B)
      return NearRet();
    }
    // MOV CL,byte ptr [0x46ff] (1000_3A39 / 0x13A39)
    CL = UInt8[DS, 0x46FF];
    // XOR CH,CH (1000_3A3D / 0x13A3D)
    CH = 0;
    // JCXZ 0x1000:3a7b (1000_3A3F / 0x13A3F)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_3A7B / 0x13A7B)
      return NearRet();
    }
    // MOV AX,0x388d (1000_3A41 / 0x13A41)
    AX = 0x388D;
    // PUSH AX (1000_3A44 / 0x13A44)
    Stack.Push(AX);
    // MOV byte ptr [0x4731],0x0 (1000_3A45 / 0x13A45)
    UInt8[DS, 0x4731] = 0x0;
    // TEST byte ptr [0x47a4],0x81 (1000_3A4A / 0x13A4A)
    Alu.And8(UInt8[DS, 0x47A4], 0x81);
    // JNZ 0x1000:3a7b (1000_3A4F / 0x13A4F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_3A7B / 0x13A7B)
      return NearRet();
    }
    // MOV AX,0x33 (1000_3A51 / 0x13A51)
    AX = 0x33;
    // CALL 0x1000:c13e (1000_3A54 / 0x13A54)
    NearCall(cs1, 0x3A57, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:3a95 (1000_3A57 / 0x13A57)
    NearCall(cs1, 0x3A5A, unknown_1000_3A95_13A95);
    // MOV AX,DX (1000_3A5A / 0x13A5A)
    AX = DX;
    // ADD AX,0xc (1000_3A5C / 0x13A5C)
    // AX += 0xC;
    AX = Alu.Add16(AX, 0xC);
    // MOV [0x472d],AX (1000_3A5F / 0x13A5F)
    UInt16[DS, 0x472D] = AX;
    // MOV AX,BX (1000_3A62 / 0x13A62)
    AX = BX;
    // ADD AX,0x8 (1000_3A64 / 0x13A64)
    // AX += 0x8;
    AX = Alu.Add16(AX, 0x8);
    // MOV [0x472f],AX (1000_3A67 / 0x13A67)
    UInt16[DS, 0x472F] = AX;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_3A73_13A73(0x13A6A - cs1 * 0x10);
  }
  
  public Action unknown_1000_37EB_137EB(int gotoTarget) {
    label_1000_37EB_137EB:
    // CALL 0x1000:380c (1000_37EB / 0x137EB)
    NearCall(cs1, 0x37EE, unknown_1000_380C_1380C);
    // CALL 0x1000:4e12 (1000_37EE / 0x137EE)
    NearCall(cs1, 0x37F1, unknown_1000_4E12_14E12);
    // JMP 0x1000:4d06 (1000_37F1 / 0x137F1)
    goto label_1000_4D06_14D06;
    label_1000_4D06_14D06:
    // MOV byte ptr [0xf6],0x0 (1000_4D06 / 0x14D06)
    UInt8[DS, 0xF6] = 0x0;
    // MOV DI,word ptr [0x1150] (1000_4D0B / 0x14D0B)
    DI = UInt16[DS, 0x1150];
    // MOV DX,word ptr [DI + 0x2] (1000_4D0F / 0x14D0F)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // CMP DX,word ptr [0x4] (1000_4D12 / 0x14D12)
    Alu.Sub16(DX, UInt16[DS, 0x4]);
    // JNZ 0x1000:4d56 (1000_4D16 / 0x14D16)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4D56 / 0x14D56)
      return NearRet();
    }
    // MOV AX,[0x4733] (1000_4D18 / 0x14D18)
    AX = UInt16[DS, 0x4733];
    // OR AH,AH (1000_4D1B / 0x14D1B)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:4d56 (1000_4D1D / 0x14D1D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4D56 / 0x14D56)
      return NearRet();
    }
    // MOV BX,word ptr [0x6] (1000_4D1F / 0x14D1F)
    BX = UInt16[DS, 0x6];
    // CMP BL,byte ptr [DI + 0x4] (1000_4D23 / 0x14D23)
    Alu.Sub8(BL, UInt8[DS, (ushort)(DI + 0x4)]);
    // JNZ 0x1000:4d56 (1000_4D26 / 0x14D26)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4D56 / 0x14D56)
      return NearRet();
    }
    // CMP BH,AH (1000_4D28 / 0x14D28)
    Alu.Sub8(BH, AH);
    // JA 0x1000:4d56 (1000_4D2A / 0x14D2A)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_4D56 / 0x14D56)
      return NearRet();
    }
    // PUSH AX (1000_4D2C / 0x14D2C)
    Stack.Push(AX);
    // PUSH BX (1000_4D2D / 0x14D2D)
    Stack.Push(BX);
    // INC byte ptr [0xf6] (1000_4D2E / 0x14D2E)
    UInt8[DS, 0xF6] = Alu.Inc8(UInt8[DS, 0xF6]);
    // MOV AH,0x1 (1000_4D32 / 0x14D32)
    AH = 0x1;
    // CALL 0x1000:4d57 (1000_4D34 / 0x14D34)
    throw FailAsUntested("Could not find a valid function at address 1000_4D57 / 0x14D57");
    // CALL 0x1000:4bdf (1000_4D37 / 0x14D37)
    throw FailAsUntested("Could not find a valid function at address 1000_4BDF / 0x14BDF");
    // CALL 0x1000:c412 (1000_4D3A / 0x14D3A)
    NearCall(cs1, 0x4D3D, unknown_1000_C412_1C412);
    // POP BX (1000_4D3D / 0x14D3D)
    BX = Stack.Pop();
    // POP AX (1000_4D3E / 0x14D3E)
    AX = Stack.Pop();
    // CMP BH,AL (1000_4D3F / 0x14D3F)
    Alu.Sub8(BH, AL);
    // JA 0x1000:4d56 (1000_4D41 / 0x14D41)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_4D56 / 0x14D56)
      return NearRet();
    }
    // MOV AL,0x5 (1000_4D43 / 0x14D43)
    AL = 0x5;
    // CALL 0x1000:ab15 (1000_4D45 / 0x14D45)
    NearCall(cs1, 0x4D48, audio_start_voc_ida_1000_AB15_1AB15);
    // XOR AH,AH (1000_4D48 / 0x14D48)
    AH = 0;
    // CALL 0x1000:4d57 (1000_4D4A / 0x14D4A)
    throw FailAsUntested("Could not find a valid function at address 1000_4D57 / 0x14D57");
    // MOV SI,0x4bb9 (1000_4D4D / 0x14D4D)
    SI = 0x4BB9;
    // MOV BP,0x10 (1000_4D50 / 0x14D50)
    BP = 0x10;
    // CALL 0x1000:da25 (1000_4D53 / 0x14D53)
    NearCall(cs1, 0x4D56, unknown_1000_DA25_1DA25);
    label_1000_4D56_14D56:
    // RET  (1000_4D56 / 0x14D56)
    return NearRet();
  }
  
  public Action unknown_1000_37F4_137F4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x37F4: goto label_1000_37F4_137F4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_37F4_137F4:
    // MOV byte ptr [0x4728],0x0 (1000_37F4 / 0x137F4)
    UInt8[DS, 0x4728] = 0x0;
    // CALL 0x1000:4988 (1000_37F9 / 0x137F9)
    NearCall(cs1, 0x37FC, unknown_1000_4988_14988);
    // CALL 0x1000:4a5a (1000_37FC / 0x137FC)
    NearCall(cs1, 0x37FF, unknown_1000_4A5A_14A5A);
    // MOV AX,[0x487e] (1000_37FF / 0x137FF)
    AX = UInt16[DS, 0x487E];
    // CALL 0x1000:ca1b (1000_3802 / 0x13802)
    NearCall(cs1, 0x3805, hnm_load_ida_1000_CA1B_1CA1B);
    // CALLF [0x3959] (1000_3805 / 0x13805)
    // Indirect call to [0x3959], generating possible targets from emulator records
    uint targetAddress_1000_3805 = (uint)(UInt16[DS, 0x395B] * 0x10 + UInt16[DS, 0x3959] - cs1 * 0x10);
    switch(targetAddress_1000_3805) {
      case 0x2362B : FarCall(cs1, 0x3809, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3805);
        break;
    }
    // JMP 0x1000:388d (1000_3809 / 0x13809)
    // Jump converted to entry function call
    return unknown_1000_388D_1388D(0);
  }
  
  public Action unknown_1000_380C_1380C(int gotoTarget) {
    label_1000_380C_1380C:
    // MOV byte ptr [0x22e3],0x1 (1000_380C / 0x1380C)
    UInt8[DS, 0x22E3] = 0x1;
    // CALL 0x1000:388d (1000_3811 / 0x13811)
    NearCall(cs1, 0x3814, unknown_1000_388D_1388D);
    // MOV SI,word ptr [0x1150] (1000_3814 / 0x13814)
    SI = UInt16[DS, 0x1150];
    // MOV AX,0x1972 (1000_3818 / 0x13818)
    AX = 0x1972;
    // CALL 0x1000:5e4f (1000_381B / 0x1381B)
    NearCall(cs1, 0x381E, calc_SAL_index_ida_1000_5E4F_15E4F);
    // MOV BX,AX (1000_381E / 0x1381E)
    BX = AX;
    // MOV DX,word ptr [0x4] (1000_3820 / 0x13820)
    DX = UInt16[DS, 0x4];
    // MOV AX,[0x6] (1000_3824 / 0x13824)
    AX = UInt16[DS, 0x6];
    // CMP AL,0x80 (1000_3827 / 0x13827)
    Alu.Sub8(AL, 0x80);
    // MOV AL,0x0 (1000_3829 / 0x13829)
    AL = 0x0;
    // JZ 0x1000:3834 (1000_382B / 0x1382B)
    if(ZeroFlag) {
      goto label_1000_3834_13834;
    }
    // CMP DX,word ptr [SI + 0x2] (1000_382D / 0x1382D)
    Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNZ 0x1000:384a (1000_3830 / 0x13830)
    if(!ZeroFlag) {
      goto label_1000_384A_1384A;
    }
    // MOV AL,AH (1000_3832 / 0x13832)
    AL = AH;
    label_1000_3834_13834:
    // CMP AL,byte ptr [BX + 0x5] (1000_3834 / 0x13834)
    Alu.Sub8(AL, UInt8[DS, (ushort)(BX + 0x5)]);
    // JNC 0x1000:384a (1000_3837 / 0x13837)
    if(!CarryFlag) {
      goto label_1000_384A_1384A;
    }
    // ADD AL,byte ptr [BX] (1000_3839 / 0x13839)
    // AL += UInt8[DS, BX];
    AL = Alu.Add8(AL, UInt8[DS, BX]);
    // CMP AL,0x7f (1000_383B / 0x1383B)
    Alu.Sub8(AL, 0x7F);
    // JNZ 0x1000:3847 (1000_383D / 0x1383D)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:c2f2 (1000_3847 / 0x13847)
      // Jump converted to entry function call
      return unknown_1000_C2F2_1C2F2(0);
    }
    // MOV AH,byte ptr [SI] (1000_383F / 0x1383F)
    AH = UInt8[DS, SI];
    // SHR AH,1 (1000_3841 / 0x13841)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // ADD AL,AH (1000_3843 / 0x13843)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // SUB AL,0x5 (1000_3845 / 0x13845)
    // AL -= 0x5;
    AL = Alu.Sub8(AL, 0x5);
    label_1000_3847_13847:
    // JMP 0x1000:c2f2 (1000_3847 / 0x13847)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
    label_1000_384A_1384A:
    // MOV DI,word ptr [0x1150] (1000_384A / 0x1384A)
    DI = UInt16[DS, 0x1150];
    // TEST byte ptr [DI + 0xa],0x1 (1000_384E / 0x1384E)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x1);
    // JNZ 0x1000:3872 (1000_3852 / 0x13852)
    if(!ZeroFlag) {
      goto label_1000_3872_13872;
    }
    // CALL 0x1000:407e (1000_3854 / 0x13854)
    NearCall(cs1, 0x3857, unknown_1000_407E_1407E);
    // CALL 0x1000:b58b (1000_3857 / 0x13857)
    NearCall(cs1, 0x385A, map_func_ida_1000_B58B_1B58B);
    // DEC DI (1000_385A / 0x1385A)
    DI = Alu.Dec16(DI);
    // MOV CX,0x4 (1000_385B / 0x1385B)
    CX = 0x4;
    label_1000_385E_1385E:
    // MOV AL,byte ptr ES:[DI] (1000_385E / 0x1385E)
    AL = UInt8[ES, DI];
    // INC DI (1000_3861 / 0x13861)
    DI = Alu.Inc16(DI);
    // AND AL,0x30 (1000_3862 / 0x13862)
    // AL &= 0x30;
    AL = Alu.And8(AL, 0x30);
    // CMP AL,0x10 (1000_3864 / 0x13864)
    Alu.Sub8(AL, 0x10);
    // JZ 0x1000:3872 (1000_3866 / 0x13866)
    if(ZeroFlag) {
      goto label_1000_3872_13872;
    }
    // LOOP 0x1000:385e (1000_3868 / 0x13868)
    if(--CX != 0) {
      goto label_1000_385E_1385E;
    }
    // MOV BX,0x13 (1000_386A / 0x1386A)
    BX = 0x13;
    // MOV CX,0x42 (1000_386D / 0x1386D)
    CX = 0x42;
    // JMP 0x1000:3878 (1000_3870 / 0x13870)
    goto label_1000_3878_13878;
    label_1000_3872_13872:
    // MOV BX,0xa (1000_3872 / 0x13872)
    BX = 0xA;
    // MOV CX,0x88 (1000_3875 / 0x13875)
    CX = 0x88;
    label_1000_3878_13878:
    // MOV AX,[0x6] (1000_3878 / 0x13878)
    AX = UInt16[DS, 0x6];
    // XCHG AH,AL (1000_387B / 0x1387B)
    byte tmp_1000_387B = AH;
    AH = AL;
    AL = tmp_1000_387B;
    // XOR AX,word ptr [0x4] (1000_387D / 0x1387D)
    // AX ^= UInt16[DS, 0x4];
    AX = Alu.Xor16(AX, UInt16[DS, 0x4]);
    // INC AX (1000_3881 / 0x13881)
    AX = Alu.Inc16(AX);
    // XOR DX,DX (1000_3882 / 0x13882)
    DX = 0;
    // DIV BX (1000_3884 / 0x13884)
    Cpu.Div16(BX);
    // MOV AX,DX (1000_3886 / 0x13886)
    AX = DX;
    // ADD AX,CX (1000_3888 / 0x13888)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // JMP 0x1000:c2f2 (1000_388A / 0x1388A)
    // Jump converted to entry function call
    return unknown_1000_C2F2_1C2F2(0);
  }
  
  public Action unknown_1000_388D_1388D(int gotoTarget) {
    switch(gotoTarget) {
      case 0x388D: goto label_1000_388D_1388D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_388D_1388D:
    // MOV byte ptr [0x46df],0x1 (1000_388D / 0x1388D)
    UInt8[DS, 0x46DF] = 0x1;
    // CALL 0x1000:395c (1000_3892 / 0x13892)
    NearCall(cs1, 0x3895, unknown_1000_395C_1395C);
    // CMP byte ptr [0x46d7],0x0 (1000_3895 / 0x13895)
    Alu.Sub8(UInt8[DS, 0x46D7], 0x0);
    // JZ 0x1000:38ad (1000_389A / 0x1389A)
    if(ZeroFlag) {
      goto label_1000_38AD_138AD;
    }
    // CMP byte ptr [0x46d6],BL (1000_389C / 0x1389C)
    Alu.Sub8(UInt8[DS, 0x46D6], BL);
    // JZ 0x1000:38b3 (1000_38A0 / 0x138A0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_38B3 / 0x138B3)
      return NearRet();
    }
    // MOV byte ptr [0x46d7],0x30 (1000_38A2 / 0x138A2)
    UInt8[DS, 0x46D7] = 0x30;
    // CALL 0x1000:3971 (1000_38A7 / 0x138A7)
    NearCall(cs1, 0x38AA, unknown_1000_3971_13971);
    // JMP 0x1000:39b9 (1000_38AA / 0x138AA)
    // Jump converted to entry function call
    return unknown_1000_39B9_139B9(0);
    label_1000_38AD_138AD:
    // CALL 0x1000:3971 (1000_38AD / 0x138AD)
    NearCall(cs1, 0x38B0, unknown_1000_3971_13971);
    // CALL 0x1000:398c (1000_38B0 / 0x138B0)
    NearCall(cs1, 0x38B3, unknown_1000_398C_1398C);
    label_1000_38B3_138B3:
    // RET  (1000_38B3 / 0x138B3)
    return NearRet();
  }
  
  public Action unknown_1000_38B4_138B4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x38E0: goto label_1000_38E0_138E0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_38B4_138B4:
    // CALL 0x1000:388d (1000_38B4 / 0x138B4)
    NearCall(cs1, 0x38B7, unknown_1000_388D_1388D);
    // MOV AX,0x28 (1000_38B7 / 0x138B7)
    AX = 0x28;
    // CALL 0x1000:c13e (1000_38BA / 0x138BA)
    NearCall(cs1, 0x38BD, open_sprite_sheet_ida_1000_C13E_1C13E);
    // XOR AX,AX (1000_38BD / 0x138BD)
    AX = 0;
    // MOV BP,0x14 (1000_38BF / 0x138BF)
    BP = 0x14;
    // XOR BX,BX (1000_38C2 / 0x138C2)
    BX = 0;
    // MOV CX,0x4 (1000_38C4 / 0x138C4)
    CX = 0x4;
    label_1000_38C7_138C7:
    // XOR DX,DX (1000_38C7 / 0x138C7)
    DX = 0;
    // PUSH CX (1000_38C9 / 0x138C9)
    Stack.Push(CX);
    // PUSH BP (1000_38CA / 0x138CA)
    Stack.Push(BP);
    label_1000_38CB_138CB:
    // PUSH AX (1000_38CB / 0x138CB)
    Stack.Push(AX);
    // CALL 0x1000:c2fd (1000_38CC / 0x138CC)
    NearCall(cs1, 0x38CF, unknown_1000_C2FD_1C2FD);
    // POP AX (1000_38CF / 0x138CF)
    AX = Stack.Pop();
    // ADD DX,0x28 (1000_38D0 / 0x138D0)
    // DX += 0x28;
    DX = Alu.Add16(DX, 0x28);
    // CMP DX,0x140 (1000_38D3 / 0x138D3)
    Alu.Sub16(DX, 0x140);
    // JC 0x1000:38cb (1000_38D7 / 0x138D7)
    if(CarryFlag) {
      goto label_1000_38CB_138CB;
    }
    // POP BP (1000_38D9 / 0x138D9)
    BP = Stack.Pop();
    // POP CX (1000_38DA / 0x138DA)
    CX = Stack.Pop();
    // INC AX (1000_38DB / 0x138DB)
    AX = Alu.Inc16(AX);
    // ADD BX,BP (1000_38DC / 0x138DC)
    // BX += BP;
    BX = Alu.Add16(BX, BP);
    // LOOP 0x1000:38c7 (1000_38DE / 0x138DE)
    if(--CX != 0) {
      goto label_1000_38C7_138C7;
    }
    label_1000_38E0_138E0:
    // RET  (1000_38E0 / 0x138E0)
    return NearRet();
  }
  
  public Action unknown_1000_38E1_138E1(int gotoTarget) {
    label_1000_38E1_138E1:
    // CMP byte ptr [0x46df],0x0 (1000_38E1 / 0x138E1)
    Alu.Sub8(UInt8[DS, 0x46DF], 0x0);
    // JZ 0x1000:38e0 (1000_38E6 / 0x138E6)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_38E0 / 0x138E0)
      return NearRet();
    }
    // CALL 0x1000:395c (1000_38E8 / 0x138E8)
    NearCall(cs1, 0x38EB, unknown_1000_395C_1395C);
    // CMP byte ptr [0x46d6],BL (1000_38EB / 0x138EB)
    Alu.Sub8(UInt8[DS, 0x46D6], BL);
    // JZ 0x1000:38e0 (1000_38EF / 0x138EF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_38E0 / 0x138E0)
      return NearRet();
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_38F1_138F1(0);
  }
  
  public Action unknown_1000_38F1_138F1(int gotoTarget) {
    label_1000_38F1_138F1:
    // CALL 0x1000:3971 (1000_38F1 / 0x138F1)
    NearCall(cs1, 0x38F4, unknown_1000_3971_13971);
    // CALL 0x1000:39b9 (1000_38F4 / 0x138F4)
    NearCall(cs1, 0x38F7, unknown_1000_39B9_139B9);
    // MOV AL,0x40 (1000_38F7 / 0x138F7)
    AL = 0x40;
    // XCHG byte ptr [0x46d7],AL (1000_38F9 / 0x138F9)
    byte tmp_1000_38F9 = UInt8[DS, 0x46D7];
    UInt8[DS, 0x46D7] = AL;
    AL = tmp_1000_38F9;
    // OR AL,AL (1000_38FD / 0x138FD)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:38e0 (1000_38FF / 0x138FF)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_38E0 / 0x138E0)
      return NearRet();
    }
    // MOV SI,0x3916 (1000_3901 / 0x13901)
    SI = 0x3916;
    // MOV BP,0x10 (1000_3904 / 0x13904)
    BP = 0x10;
    // JMP 0x1000:da25 (1000_3907 / 0x13907)
    // Jump converted to entry function call
    return unknown_1000_DA25_1DA25(0);
  }
  
  public Action unknown_1000_3916_13916(int gotoTarget) {
    label_1000_3916_13916:
    // CMP byte ptr [0x46df],0x0 (1000_3916 / 0x13916)
    Alu.Sub8(UInt8[DS, 0x46DF], 0x0);
    // JZ 0x1000:3950 (1000_391B / 0x1391B)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_3950_13950(0);
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_391D_1391D(0);
  }
  
  public Action unknown_1000_391D_1391D(int gotoTarget) {
    label_1000_391D_1391D:
    // MOV CX,0x1c5 (1000_391D / 0x1391D)
    CX = 0x1C5;
    // MOV BX,0xdb (1000_3920 / 0x13920)
    BX = 0xDB;
    // CMP byte ptr [0x22e3],0x0 (1000_3923 / 0x13923)
    Alu.Sub8(UInt8[DS, 0x22E3], 0x0);
    // JNZ 0x1000:3930 (1000_3928 / 0x13928)
    if(!ZeroFlag) {
      goto label_1000_3930_13930;
    }
    // MOV CX,0xf0 (1000_392A / 0x1392A)
    CX = 0xF0;
    // MOV BX,0x180 (1000_392D / 0x1392D)
    BX = 0x180;
    label_1000_3930_13930:
    // MOV AL,[0x46d7] (1000_3930 / 0x13930)
    AL = UInt8[DS, 0x46D7];
    // PUSH AX (1000_3933 / 0x13933)
    Stack.Push(AX);
    // CALLF [0x3951] (1000_3934 / 0x13934)
    // Indirect call to [0x3951], generating possible targets from emulator records
    uint targetAddress_1000_3934 = (uint)(UInt16[DS, 0x3953] * 0x10 + UInt16[DS, 0x3951] - cs1 * 0x10);
    switch(targetAddress_1000_3934) {
      case 0x23625 : FarCall(cs1, 0x3938, unknown_334B_0175_33625);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3934);
        break;
    }
    // POP AX (1000_3938 / 0x13938)
    AX = Stack.Pop();
    // CMP byte ptr [0x227d],0x0 (1000_3939 / 0x13939)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:394a (1000_393E / 0x1393E)
    if(!ZeroFlag) {
      goto label_1000_394A_1394A;
    }
    // MOV CX,0x30 (1000_3940 / 0x13940)
    CX = 0x30;
    // MOV BX,0x2d0 (1000_3943 / 0x13943)
    BX = 0x2D0;
    // CALLF [0x3951] (1000_3946 / 0x13946)
    // Indirect call to [0x3951], generating possible targets from emulator records
    uint targetAddress_1000_3946 = (uint)(UInt16[DS, 0x3953] * 0x10 + UInt16[DS, 0x3951] - cs1 * 0x10);
    switch(targetAddress_1000_3946) {
      case 0x23625 : FarCall(cs1, 0x394A, unknown_334B_0175_33625);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3946);
        break;
    }
    label_1000_394A_1394A:
    // DEC byte ptr [0x46d7] (1000_394A / 0x1394A)
    UInt8[DS, 0x46D7] = Alu.Dec8(UInt8[DS, 0x46D7]);
    // JNZ 0x1000:395b (1000_394E / 0x1394E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_395B / 0x1395B)
      return NearRet();
    }
    label_1000_395B_1395B:
    // RET  (1000_395B / 0x1395B)
    return NearRet();
  }
  
  public Action unknown_1000_3950_13950(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3950: goto label_1000_3950_13950;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3950_13950:
    // MOV byte ptr [0x46d7],0x0 (1000_3950 / 0x13950)
    UInt8[DS, 0x46D7] = 0x0;
    // MOV SI,0x3916 (1000_3955 / 0x13955)
    SI = 0x3916;
    // JMP 0x1000:da5f (1000_3958 / 0x13958)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_395C_1395C(int gotoTarget) {
    label_1000_395C_1395C:
    // MOV AX,[0x2] (1000_395C / 0x1395C)
    AX = UInt16[DS, 0x2];
    // MOV AH,AL (1000_395F / 0x1395F)
    AH = AL;
    // SHR AH,1 (1000_3961 / 0x13961)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (1000_3963 / 0x13963)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // AND AX,0x1c0f (1000_3965 / 0x13965)
    // AX &= 0x1C0F;
    AX = Alu.And16(AX, 0x1C0F);
    // MOV BX,0x2280 (1000_3968 / 0x13968)
    BX = 0x2280;
    // XLAT BX (1000_396B / 0x1396B)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // ADD AL,AH (1000_396C / 0x1396C)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // MOV BL,AL (1000_396E / 0x1396E)
    BL = AL;
    // RET  (1000_3970 / 0x13970)
    return NearRet();
  }
  
  public Action unknown_1000_3971_13971(int gotoTarget) {
    label_1000_3971_13971:
    // MOV AX,0x28 (1000_3971 / 0x13971)
    AX = 0x28;
    // ADD AL,byte ptr [0x22e3] (1000_3974 / 0x13974)
    // AL += UInt8[DS, 0x22E3];
    AL = Alu.Add8(AL, UInt8[DS, 0x22E3]);
    // MOV [0xdbb4],AL (1000_3978 / 0x13978)
    UInt8[DS, 0xDBB4] = AL;
    // CALL 0x1000:c13e (1000_397B / 0x1397B)
    NearCall(cs1, 0x397E, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AL,BL (1000_397E / 0x1397E)
    AL = BL;
    // XOR AH,AH (1000_3980 / 0x13980)
    AH = 0;
    // MOV [0x46d6],AL (1000_3982 / 0x13982)
    UInt8[DS, 0x46D6] = AL;
    // CALL 0x1000:c1f4 (1000_3985 / 0x13985)
    NearCall(cs1, 0x3988, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // LEA DX,[SI + 0x6] (1000_3988 / 0x13988)
    DX = (ushort)(SI + 0x6);
    // RET  (1000_398B / 0x1398B)
    return NearRet();
  }
  
  public Action unknown_1000_398C_1398C(int gotoTarget) {
    label_1000_398C_1398C:
    // MOV CX,0x1c5 (1000_398C / 0x1398C)
    CX = 0x1C5;
    // MOV BX,0xdb (1000_398F / 0x1398F)
    BX = 0xDB;
    // CMP byte ptr [0x22e3],0x0 (1000_3992 / 0x13992)
    Alu.Sub8(UInt8[DS, 0x22E3], 0x0);
    // JNZ 0x1000:399f (1000_3997 / 0x13997)
    if(!ZeroFlag) {
      goto label_1000_399F_1399F;
    }
    // MOV CX,0xf0 (1000_3999 / 0x13999)
    CX = 0xF0;
    // MOV BX,0x180 (1000_399C / 0x1399C)
    BX = 0x180;
    label_1000_399F_1399F:
    // PUSH CX (1000_399F / 0x1399F)
    Stack.Push(CX);
    // CALLF [0x38bd] (1000_39A0 / 0x139A0)
    // Indirect call to [0x38bd], generating possible targets from emulator records
    uint targetAddress_1000_39A0 = (uint)(UInt16[DS, 0x38BF] * 0x10 + UInt16[DS, 0x38BD] - cs1 * 0x10);
    switch(targetAddress_1000_39A0) {
      case 0x235B6 : FarCall(cs1, 0x39A4, unknown_334B_0106_335B6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_39A0);
        break;
    }
    // POP CX (1000_39A4 / 0x139A4)
    CX = Stack.Pop();
    // ADD DX,CX (1000_39A5 / 0x139A5)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    // CMP byte ptr [0x227d],0x0 (1000_39A7 / 0x139A7)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:39b8 (1000_39AC / 0x139AC)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_39B8 / 0x139B8)
      return NearRet();
    }
    // MOV CX,0x30 (1000_39AE / 0x139AE)
    CX = 0x30;
    // MOV BX,0x2d0 (1000_39B1 / 0x139B1)
    BX = 0x2D0;
    // CALLF [0x38bd] (1000_39B4 / 0x139B4)
    // Indirect call to [0x38bd], generating possible targets from emulator records
    uint targetAddress_1000_39B4 = (uint)(UInt16[DS, 0x38BF] * 0x10 + UInt16[DS, 0x38BD] - cs1 * 0x10);
    switch(targetAddress_1000_39B4) {
      case 0x235B6 : FarCall(cs1, 0x39B8, unknown_334B_0106_335B6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_39B4);
        break;
    }
    label_1000_39B8_139B8:
    // RET  (1000_39B8 / 0x139B8)
    return NearRet();
  }
  
  public Action unknown_1000_39B9_139B9(int gotoTarget) {
    switch(gotoTarget) {
      case 0x39B9: goto label_1000_39B9_139B9;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_39B9_139B9:
    // MOV CX,0x1c5 (1000_39B9 / 0x139B9)
    CX = 0x1C5;
    // MOV BX,0xdb (1000_39BC / 0x139BC)
    BX = 0xDB;
    // CMP byte ptr [0x22e3],0x0 (1000_39BF / 0x139BF)
    Alu.Sub8(UInt8[DS, 0x22E3], 0x0);
    // JNZ 0x1000:39cc (1000_39C4 / 0x139C4)
    if(!ZeroFlag) {
      goto label_1000_39CC_139CC;
    }
    // MOV CX,0xf0 (1000_39C6 / 0x139C6)
    CX = 0xF0;
    // MOV BX,0x180 (1000_39C9 / 0x139C9)
    BX = 0x180;
    label_1000_39CC_139CC:
    // PUSH CX (1000_39CC / 0x139CC)
    Stack.Push(CX);
    // CALLF [0x394d] (1000_39CD / 0x139CD)
    // Indirect call to [0x394d], generating possible targets from emulator records
    uint targetAddress_1000_39CD = (uint)(UInt16[DS, 0x394F] * 0x10 + UInt16[DS, 0x394D] - cs1 * 0x10);
    switch(targetAddress_1000_39CD) {
      case 0x23622 : FarCall(cs1, 0x39D1, unknown_334B_0172_33622);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_39CD);
        break;
    }
    // POP CX (1000_39D1 / 0x139D1)
    CX = Stack.Pop();
    // ADD DX,CX (1000_39D2 / 0x139D2)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    // CMP byte ptr [0x227d],0x0 (1000_39D4 / 0x139D4)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:39e5 (1000_39D9 / 0x139D9)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_39E5 / 0x139E5)
      return NearRet();
    }
    // MOV CX,0x30 (1000_39DB / 0x139DB)
    CX = 0x30;
    // MOV BX,0x2d0 (1000_39DE / 0x139DE)
    BX = 0x2D0;
    // CALLF [0x394d] (1000_39E1 / 0x139E1)
    // Indirect call to [0x394d], generating possible targets from emulator records
    uint targetAddress_1000_39E1 = (uint)(UInt16[DS, 0x394F] * 0x10 + UInt16[DS, 0x394D] - cs1 * 0x10);
    switch(targetAddress_1000_39E1) {
      case 0x23622 : FarCall(cs1, 0x39E5, unknown_334B_0172_33622);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_39E1);
        break;
    }
    label_1000_39E5_139E5:
    // RET  (1000_39E5 / 0x139E5)
    return NearRet();
  }
  
  public Action unknown_1000_39E6_139E6(int gotoTarget) {
    label_1000_39E6_139E6:
    // MOV SI,0xc0b6 (1000_39E6 / 0x139E6)
    SI = 0xC0B6;
    // JMP 0x1000:da5f (1000_39E9 / 0x139E9)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_3A73_13A73(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3A7B: goto label_1000_3A7B_13A7B;break;
      case 0x3A6A: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3A6A_13A6A:
    // PUSH CX (1000_3A6A / 0x13A6A)
    Stack.Push(CX);
    // PUSH BX (1000_3A6B / 0x13A6B)
    Stack.Push(BX);
    // PUSH DX (1000_3A6C / 0x13A6C)
    Stack.Push(DX);
    // CALL 0x1000:3aa9 (1000_3A6D / 0x13A6D)
    NearCall(cs1, 0x3A70, unknown_1000_3AA9_13AA9);
    // POP DX (1000_3A70 / 0x13A70)
    DX = Stack.Pop();
    // POP BX (1000_3A71 / 0x13A71)
    BX = Stack.Pop();
    // POP CX (1000_3A72 / 0x13A72)
    CX = Stack.Pop();
    entry:
    label_1000_3A73_13A73:
    // ADD DX,0x46 (1000_3A73 / 0x13A73)
    // DX += 0x46;
    DX = Alu.Add16(DX, 0x46);
    // ADD BX,0xa (1000_3A76 / 0x13A76)
    // BX += 0xA;
    BX = Alu.Add16(BX, 0xA);
    // LOOP 0x1000:3a6a (1000_3A79 / 0x13A79)
    if(--CX != 0) {
      goto label_1000_3A6A_13A6A;
    }
    label_1000_3A7B_13A7B:
    // RET  (1000_3A7B / 0x13A7B)
    return NearRet();
  }
  
  public Action unknown_1000_3A7C_13A7C(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3A7C: goto label_1000_3A7C_13A7C;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3A7C_13A7C:
    // CALL 0x1000:39e6 (1000_3A7C / 0x13A7C)
    NearCall(cs1, 0x3A7F, unknown_1000_39E6_139E6);
    // MOV AX,[0x4] (1000_3A7F / 0x13A7F)
    AX = UInt16[DS, 0x4];
    // CMP AL,0x4 (1000_3A82 / 0x13A82)
    Alu.Sub8(AL, 0x4);
    // JNZ 0x1000:3a94 (1000_3A84 / 0x13A84)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_3A94 / 0x13A94)
      return NearRet();
    }
    // CMP AH,0x20 (1000_3A86 / 0x13A86)
    Alu.Sub8(AH, 0x20);
    // JNC 0x1000:3a94 (1000_3A89 / 0x13A89)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_3A94 / 0x13A94)
      return NearRet();
    }
    // MOV SI,0xc0b6 (1000_3A8B / 0x13A8B)
    SI = 0xC0B6;
    // MOV BP,0xc (1000_3A8E / 0x13A8E)
    BP = 0xC;
    // CALL 0x1000:da25 (1000_3A91 / 0x13A91)
    NearCall(cs1, 0x3A94, unknown_1000_DA25_1DA25);
    label_1000_3A94_13A94:
    // RET  (1000_3A94 / 0x13A94)
    return NearRet();
  }
  
  public Action unknown_1000_3A95_13A95(int gotoTarget) {
    label_1000_3A95_13A95:
    // MOV DX,0x95 (1000_3A95 / 0x13A95)
    DX = 0x95;
    // MOV BX,0x39 (1000_3A98 / 0x13A98)
    BX = 0x39;
    // CMP byte ptr [0x5],0x20 (1000_3A9B / 0x13A9B)
    Alu.Sub8(UInt8[DS, 0x5], 0x20);
    // JC 0x1000:3aa8 (1000_3AA0 / 0x13AA0)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_3AA8 / 0x13AA8)
      return NearRet();
    }
    // MOV DX,0xca (1000_3AA2 / 0x13AA2)
    DX = 0xCA;
    // MOV BX,0x49 (1000_3AA5 / 0x13AA5)
    BX = 0x49;
    label_1000_3AA8_13AA8:
    // RET  (1000_3AA8 / 0x13AA8)
    return NearRet();
  }
  
  public Action unknown_1000_3AA9_13AA9(int gotoTarget) {
    label_1000_3AA9_13AA9:
    // XOR AX,AX (1000_3AA9 / 0x13AA9)
    AX = 0;
    // CALL 0x1000:c305 (1000_3AAB / 0x13AAB)
    NearCall(cs1, 0x3AAE, unknown_1000_C305_1C305);
    // ADD DX,0x6 (1000_3AAE / 0x13AAE)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // ADD BX,0x1e (1000_3AB1 / 0x13AB1)
    // BX += 0x1E;
    BX = Alu.Add16(BX, 0x1E);
    // MOV AX,0x1 (1000_3AB4 / 0x13AB4)
    AX = 0x1;
    // CALL 0x1000:c305 (1000_3AB7 / 0x13AB7)
    NearCall(cs1, 0x3ABA, unknown_1000_C305_1C305);
    // SUB DX,0x2 (1000_3ABA / 0x13ABA)
    // DX -= 0x2;
    DX = Alu.Sub16(DX, 0x2);
    // ADD BX,0x14 (1000_3ABD / 0x13ABD)
    // BX += 0x14;
    BX = Alu.Add16(BX, 0x14);
    // MOV AL,[0x4731] (1000_3AC0 / 0x13AC0)
    AL = UInt8[DS, 0x4731];
    // XOR AH,AH (1000_3AC3 / 0x13AC3)
    AH = 0;
    // PUSH AX (1000_3AC5 / 0x13AC5)
    Stack.Push(AX);
    // SUB AL,0xf (1000_3AC6 / 0x13AC6)
    // AL -= 0xF;
    AL = Alu.Sub8(AL, 0xF);
    // JNC 0x1000:3acc (1000_3AC8 / 0x13AC8)
    if(!CarryFlag) {
      goto label_1000_3ACC_13ACC;
    }
    // XOR AX,AX (1000_3ACA / 0x13ACA)
    AX = 0;
    label_1000_3ACC_13ACC:
    // CMP AL,0x5 (1000_3ACC / 0x13ACC)
    Alu.Sub8(AL, 0x5);
    // JBE 0x1000:3ad2 (1000_3ACE / 0x13ACE)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_3AD2_13AD2;
    }
    // MOV AL,0x5 (1000_3AD0 / 0x13AD0)
    AL = 0x5;
    label_1000_3AD2_13AD2:
    // ADD AL,0x2 (1000_3AD2 / 0x13AD2)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    // CALL 0x1000:c305 (1000_3AD4 / 0x13AD4)
    NearCall(cs1, 0x3AD7, unknown_1000_C305_1C305);
    // SUB DX,0x55 (1000_3AD7 / 0x13AD7)
    // DX -= 0x55;
    DX = Alu.Sub16(DX, 0x55);
    // SUB BX,0x35 (1000_3ADA / 0x13ADA)
    // BX -= 0x35;
    BX = Alu.Sub16(BX, 0x35);
    // POP AX (1000_3ADD / 0x13ADD)
    AX = Stack.Pop();
    // CMP AL,0xe (1000_3ADE / 0x13ADE)
    Alu.Sub8(AL, 0xE);
    // JC 0x1000:3ae4 (1000_3AE0 / 0x13AE0)
    if(CarryFlag) {
      goto label_1000_3AE4_13AE4;
    }
    // MOV AL,0xe (1000_3AE2 / 0x13AE2)
    AL = 0xE;
    label_1000_3AE4_13AE4:
    // ADD AL,0x8 (1000_3AE4 / 0x13AE4)
    // AL += 0x8;
    AL = Alu.Add8(AL, 0x8);
    // JMP 0x1000:c30d (1000_3AE6 / 0x13AE6)
    // Jump converted to entry function call
    return unknown_1000_C30D_1C30D(0);
  }
  
  public Action Fill47F8WithFF_1000_3AE9_13AE9(int gotoTarget) {
    label_1000_3AE9_13AE9:
    // PUSH AX (1000_3AE9 / 0x13AE9)
    Stack.Push(AX);
    // PUSH DS (1000_3AEA / 0x13AEA)
    Stack.Push(DS);
    // POP ES (1000_3AEB / 0x13AEB)
    ES = Stack.Pop();
    // MOV CX,0x2e (1000_3AEC / 0x13AEC)
    CX = 0x2E;
    // MOV AX,0xffff (1000_3AEF / 0x13AEF)
    AX = 0xFFFF;
    // MOV DI,0x47f8 (1000_3AF2 / 0x13AF2)
    DI = 0x47F8;
    while (CX-- != 0) {
      // STOSW ES:DI (1000_3AF5 / 0x13AF5)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP AX (1000_3AF7 / 0x13AF7)
    AX = Stack.Pop();
    // RET  (1000_3AF8 / 0x13AF8)
    return NearRet();
  }
  
  public Action unknown_1000_3AF9_13AF9(int gotoTarget) {
    label_1000_3AF9_13AF9:
    // CMP byte ptr [0x2b],0x0 (1000_3AF9 / 0x13AF9)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:3b03 (1000_3AFE / 0x13AFE)
    if(ZeroFlag) {
      goto label_1000_3B03_13B03;
    }
    // JMP 0x1000:c43e (1000_3B00 / 0x13B00)
    // Jump converted to entry function call
    return unknown_1000_C43E_1C43E(0);
    label_1000_3B03_13B03:
    // CMP byte ptr [0x47a4],0x0 (1000_3B03 / 0x13B03)
    Alu.Sub8(UInt8[DS, 0x47A4], 0x0);
    // JS 0x1000:3b58 (1000_3B08 / 0x13B08)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_3B58 / 0x13B58)
      return NearRet();
    }
    // MOV AX,[0x47c4] (1000_3B0A / 0x13B0A)
    AX = UInt16[DS, 0x47C4];
    // CMP AL,0xf (1000_3B0D / 0x13B0D)
    Alu.Sub8(AL, 0xF);
    // JNZ 0x1000:3b15 (1000_3B0F / 0x13B0F)
    if(!ZeroFlag) {
      goto label_1000_3B15_13B15;
    }
    // ADD AL,byte ptr [0x476c] (1000_3B11 / 0x13B11)
    // AL += UInt8[DS, 0x476C];
    AL = Alu.Add8(AL, UInt8[DS, 0x476C]);
    label_1000_3B15_13B15:
    // MOV DI,AX (1000_3B15 / 0x13B15)
    DI = AX;
    // SHL DI,1 (1000_3B17 / 0x13B17)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // SHL DI,1 (1000_3B19 / 0x13B19)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV DX,word ptr [DI + 0x47f8] (1000_3B1B / 0x13B1B)
    DX = UInt16[DS, (ushort)(DI + 0x47F8)];
    // OR DX,DX (1000_3B1F / 0x13B1F)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JS 0x1000:3b58 (1000_3B21 / 0x13B21)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_3B58 / 0x13B58)
      return NearRet();
    }
    // PUSH word ptr [DI + 0x47fa] (1000_3B23 / 0x13B23)
    Stack.Push(UInt16[DS, (ushort)(DI + 0x47FA)]);
    // PUSH DX (1000_3B27 / 0x13B27)
    Stack.Push(DX);
    // OR byte ptr [0x47a4],0x80 (1000_3B28 / 0x13B28)
    // UInt8[DS, 0x47A4] |= 0x80;
    UInt8[DS, 0x47A4] = Alu.Or8(UInt8[DS, 0x47A4], 0x80);
    // CALL 0x1000:37b5 (1000_3B2D / 0x13B2D)
    NearCall(cs1, 0x3B30, unknown_1000_37B5_137B5);
    // POP DX (1000_3B30 / 0x13B30)
    DX = Stack.Pop();
    // POP BX (1000_3B31 / 0x13B31)
    BX = Stack.Pop();
    // CMP DX,0xf0 (1000_3B32 / 0x13B32)
    Alu.Sub16(DX, 0xF0);
    // JC 0x1000:3b3b (1000_3B36 / 0x13B36)
    if(CarryFlag) {
      goto label_1000_3B3B_13B3B;
    }
    // MOV DX,0xf0 (1000_3B38 / 0x13B38)
    DX = 0xF0;
    label_1000_3B3B_13B3B:
    // CMP BX,0x71 (1000_3B3B / 0x13B3B)
    Alu.Sub16(BX, 0x71);
    // JC 0x1000:3b43 (1000_3B3E / 0x13B3E)
    if(CarryFlag) {
      goto label_1000_3B43_13B43;
    }
    // MOV BX,0x71 (1000_3B40 / 0x13B40)
    BX = 0x71;
    label_1000_3B43_13B43:
    // MOV ES,word ptr [0xdbde] (1000_3B43 / 0x13B43)
    ES = UInt16[DS, 0xDBDE];
    // PUSH DS (1000_3B47 / 0x13B47)
    Stack.Push(DS);
    // MOV DS,word ptr [0xdbda] (1000_3B48 / 0x13B48)
    DS = UInt16[DS, 0xDBDA];
    // MOV BP,0x6 (1000_3B4C / 0x13B4C)
    BP = 0x6;
    // CALLF [0x3949] (1000_3B4F / 0x13B4F)
    // Indirect call to [0x3949], generating possible targets from emulator records
    uint targetAddress_1000_3B4F = (uint)(UInt16[SS, 0x394B] * 0x10 + UInt16[SS, 0x3949] - cs1 * 0x10);
    switch(targetAddress_1000_3B4F) {
      case 0x2361F : FarCall(cs1, 0x3B54, unknown_334B_016F_3361F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3B4F);
        break;
    }
    // POP DS (1000_3B54 / 0x13B54)
    DS = Stack.Pop();
    // JMP 0x1000:c43e (1000_3B55 / 0x13B55)
    // Jump converted to entry function call
    return unknown_1000_C43E_1C43E(0);
    label_1000_3B58_13B58:
    // RET  (1000_3B58 / 0x13B58)
    return NearRet();
  }
  
  public Action draw_SAL_ida_1000_3B59_13B59(int gotoTarget) {
    label_1000_3B59_13B59:
    // SUB SP,0x18 (1000_3B59 / 0x13B59)
    // SP -= 0x18;
    SP = Alu.Sub16(SP, 0x18);
    // MOV word ptr [0x47f6],SP (1000_3B5C / 0x13B5C)
    UInt16[DS, 0x47F6] = SP;
    // XOR AH,AH (1000_3B60 / 0x13B60)
    AH = 0;
    // DEC AX (1000_3B62 / 0x13B62)
    AX = Alu.Dec16(AX);
    // PUSH AX (1000_3B63 / 0x13B63)
    Stack.Push(AX);
    // MOV CL,0x4 (1000_3B64 / 0x13B64)
    CL = 0x4;
    // SHR AX,CL (1000_3B66 / 0x13B66)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // JZ 0x1000:3b70 (1000_3B68 / 0x13B68)
    if(ZeroFlag) {
      goto label_1000_3B70_13B70;
    }
    // ADD AX,0x13 (1000_3B6A / 0x13B6A)
    // AX += 0x13;
    AX = Alu.Add16(AX, 0x13);
    // CALL 0x1000:c13e (1000_3B6D / 0x13B6D)
    NearCall(cs1, 0x3B70, open_sprite_sheet_ida_1000_C13E_1C13E);
    label_1000_3B70_13B70:
    // POP AX (1000_3B70 / 0x13B70)
    AX = Stack.Pop();
    // AND AX,0xf (1000_3B71 / 0x13B71)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // SHL AX,1 (1000_3B74 / 0x13B74)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,0xbc6e (1000_3B76 / 0x13B76)
    SI = 0xBC6E;
    // ADD SI,AX (1000_3B79 / 0x13B79)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV SI,word ptr [SI] (1000_3B7B / 0x13B7B)
    SI = UInt16[DS, SI];
    // CALL 0x1000:3d83 (1000_3B7D / 0x13B7D)
    NearCall(cs1, 0x3B80, do_weird_shit_with_stack_buffer_ida_1000_3D83_13D83);
    label_1000_3B80_13B80:
    // LODSW SI (1000_3B80 / 0x13B80)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,0xffff (1000_3B81 / 0x13B81)
    Alu.Sub16(AX, 0xFFFF);
    // JZ 0x1000:3bb5 (1000_3B84 / 0x13B84)
    if(ZeroFlag) {
      goto label_1000_3BB5_13BB5;
    }
    // JS 0x1000:3bbf (1000_3B86 / 0x13B86)
    if(SignFlag) {
      goto label_1000_3BBF_13BBF;
    }
    // MOV DI,AX (1000_3B88 / 0x13B88)
    DI = AX;
    // SHR AH,1 (1000_3B8A / 0x13B8A)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // AND AH,0x1 (1000_3B8C / 0x13B8C)
    // AH &= 0x1;
    AH = Alu.And8(AH, 0x1);
    // LODSB SI (1000_3B8F / 0x13B8F)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV DX,AX (1000_3B90 / 0x13B90)
    DX = AX;
    // LODSB SI (1000_3B92 / 0x13B92)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_3B93 / 0x13B93)
    AH = 0;
    // MOV BX,AX (1000_3B95 / 0x13B95)
    BX = AX;
    // LODSB SI (1000_3B97 / 0x13B97)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // PUSH SI (1000_3B98 / 0x13B98)
    Stack.Push(SI);
    // MOV CS:[0xc21a],AL (1000_3B99 / 0x13B99)
    UInt8[cs1, 0xC21A] = AL;
    // MOV AX,DI (1000_3B9D / 0x13B9D)
    AX = DI;
    // AND AX,0xfdff (1000_3B9F / 0x13B9F)
    // AX &= 0xFDFF;
    AX = Alu.And16(AX, 0xFDFF);
    // DEC AX (1000_3BA2 / 0x13BA2)
    AX = Alu.Dec16(AX);
    // AND DI,0x1ff (1000_3BA3 / 0x13BA3)
    // DI &= 0x1FF;
    DI = Alu.And16(DI, 0x1FF);
    // CMP DI,0x1 (1000_3BA7 / 0x13BA7)
    Alu.Sub16(DI, 0x1);
    // JNZ 0x1000:3baf (1000_3BAA / 0x13BAA)
    if(!ZeroFlag) {
      goto label_1000_3BAF_13BAF;
    }
    // JMP 0x1000:3d12 (1000_3BAC / 0x13BAC)
    goto label_1000_3D12_13D12;
    label_1000_3BAF_13BAF:
    // CALL 0x1000:c22f (1000_3BAF / 0x13BAF)
    NearCall(cs1, 0x3BB2, draw_sprite_ida_1000_C22F_1C22F);
    // POP SI (1000_3BB2 / 0x13BB2)
    SI = Stack.Pop();
    // JMP 0x1000:3b80 (1000_3BB3 / 0x13BB3)
    goto label_1000_3B80_13B80;
    label_1000_3BB5_13BB5:
    // MOV byte ptr CS:[0xc21a],0x0 (1000_3BB5 / 0x13BB5)
    UInt8[cs1, 0xC21A] = 0x0;
    // ADD SP,0x18 (1000_3BBB / 0x13BBB)
    // SP += 0x18;
    SP = Alu.Add16(SP, 0x18);
    // RET  (1000_3BBE / 0x13BBE)
    return NearRet();
    label_1000_3BBF_13BBF:
    // CMP AH,0xc0 (1000_3BBF / 0x13BBF)
    Alu.Sub8(AH, 0xC0);
    // JZ 0x1000:3bc9 (1000_3BC2 / 0x13BC2)
    if(ZeroFlag) {
      goto label_1000_3BC9_13BC9;
    }
    // CALL 0x1000:3be9 (1000_3BC4 / 0x13BC4)
    NearCall(cs1, 0x3BC7, SAL_polygon_ida_1000_3BE9_13BE9);
    // JMP 0x1000:3b80 (1000_3BC7 / 0x13BC7)
    goto label_1000_3B80_13B80;
    label_1000_3BC9_13BC9:
    // PUSH AX (1000_3BC9 / 0x13BC9)
    Stack.Push(AX);
    // MOV ES,word ptr [0xdbda] (1000_3BCA / 0x13BCA)
    ES = UInt16[DS, 0xDBDA];
    // LODSW SI (1000_3BCE / 0x13BCE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_3BCF / 0x13BCF)
    DX = AX;
    // LODSW SI (1000_3BD1 / 0x13BD1)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_3BD2 / 0x13BD2)
    BX = AX;
    // LODSW SI (1000_3BD4 / 0x13BD4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_3BD5 / 0x13BD5)
    DI = AX;
    // LODSW SI (1000_3BD7 / 0x13BD7)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_3BD8 / 0x13BD8)
    CX = AX;
    // POP AX (1000_3BDA / 0x13BDA)
    AX = Stack.Pop();
    // PUSH SI (1000_3BDB / 0x13BDB)
    Stack.Push(SI);
    // MOV BP,0xffff (1000_3BDC / 0x13BDC)
    BP = 0xFFFF;
    // MOV SI,0x1470 (1000_3BDF / 0x13BDF)
    SI = 0x1470;
    // CALLF [0x3901] (1000_3BE2 / 0x13BE2)
    // Indirect call to [0x3901], generating possible targets from emulator records
    uint targetAddress_1000_3BE2 = (uint)(UInt16[DS, 0x3903] * 0x10 + UInt16[DS, 0x3901] - cs1 * 0x10);
    switch(targetAddress_1000_3BE2) {
      case 0x235E9 : FarCall(cs1, 0x3BE6, unknown_334B_0139_335E9);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3BE2);
        break;
    }
    // POP SI (1000_3BE6 / 0x13BE6)
    SI = Stack.Pop();
    // JMP 0x1000:3b80 (1000_3BE7 / 0x13BE7)
    goto label_1000_3B80_13B80;
    label_1000_3D12_13D12:
    // TEST byte ptr [0x47a4],0x81 (1000_3D12 / 0x13D12)
    Alu.And8(UInt8[DS, 0x47A4], 0x81);
    // JNZ 0x1000:3d2b (1000_3D17 / 0x13D17)
    if(!ZeroFlag) {
      goto label_1000_3D2B_13D2B;
    }
    // MOV DI,word ptr [0x47f6] (1000_3D19 / 0x13D19)
    DI = UInt16[DS, 0x47F6];
    // DEC word ptr [0x47f6] (1000_3D1D / 0x13D1D)
    UInt16[DS, 0x47F6] = Alu.Dec16(UInt16[DS, 0x47F6]);
    // CMP byte ptr [DI],0xff (1000_3D21 / 0x13D21)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JZ 0x1000:3d2b (1000_3D24 / 0x13D24)
    if(ZeroFlag) {
      goto label_1000_3D2B_13D2B;
    }
    // MOV AL,byte ptr [DI] (1000_3D26 / 0x13D26)
    AL = UInt8[DS, DI];
    // CALL 0x1000:3d2f (1000_3D28 / 0x13D28)
    NearCall(cs1, 0x3D2B, unknown_1000_3D2F_13D2F);
    label_1000_3D2B_13D2B:
    // POP SI (1000_3D2B / 0x13D2B)
    SI = Stack.Pop();
    // JMP 0x1000:3b80 (1000_3D2C / 0x13D2C)
    goto label_1000_3B80_13B80;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_3D2F_13D2F(0);
  }
  
  public Action SAL_polygon_ida_1000_3BE9_13BE9(int gotoTarget) {
    label_1000_3BE9_13BE9:
    // MOV word ptr [0x22d9],0x4c60 (1000_3BE9 / 0x13BE9)
    UInt16[DS, 0x22D9] = 0x4C60;
    // PUSH DS (1000_3BEF / 0x13BEF)
    Stack.Push(DS);
    // POP ES (1000_3BF0 / 0x13BF0)
    ES = Stack.Pop();
    // MOV AL,byte ptr [SI + -0x2] (1000_3BF1 / 0x13BF1)
    AL = UInt8[DS, (ushort)(SI - 0x2)];
    // MOV [0x47ed],AL (1000_3BF4 / 0x13BF4)
    UInt8[DS, 0x47ED] = AL;
    // MOV AL,byte ptr [SI + -0x1] (1000_3BF7 / 0x13BF7)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // MOV [0x47ec],AL (1000_3BFA / 0x13BFA)
    UInt8[DS, 0x47EC] = AL;
    // LODSB SI (1000_3BFD / 0x13BFD)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CBW  (1000_3BFE / 0x13BFE)
    AX = (ushort)((short)((sbyte)AL));
    // SHL AX,1 (1000_3BFF / 0x13BFF)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C01 / 0x13C01)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C03 / 0x13C03)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C05 / 0x13C05)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV [0x22db],AX (1000_3C07 / 0x13C07)
    UInt16[DS, 0x22DB] = AX;
    // LODSB SI (1000_3C0A / 0x13C0A)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CBW  (1000_3C0B / 0x13C0B)
    AX = (ushort)((short)((sbyte)AL));
    // SHL AX,1 (1000_3C0C / 0x13C0C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C0E / 0x13C0E)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C10 / 0x13C10)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_3C12 / 0x13C12)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV [0x22dd],AX (1000_3C14 / 0x13C14)
    UInt16[DS, 0x22DD] = AX;
    // LODSW SI (1000_3C17 / 0x13C17)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_3C18 / 0x13C18)
    DX = AX;
    // LODSW SI (1000_3C1A / 0x13C1A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_3C1B / 0x13C1B)
    BX = AX;
    // MOV word ptr [0x47ee],DX (1000_3C1D / 0x13C1D)
    UInt16[DS, 0x47EE] = DX;
    // MOV word ptr [0x47f0],BX (1000_3C21 / 0x13C21)
    UInt16[DS, 0x47F0] = BX;
    label_1000_3C25_13C25:
    // LODSW SI (1000_3C25 / 0x13C25)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // PUSH AX (1000_3C26 / 0x13C26)
    Stack.Push(AX);
    // AND AX,0x3fff (1000_3C27 / 0x13C27)
    // AX &= 0x3FFF;
    AX = Alu.And16(AX, 0x3FFF);
    // MOV DI,AX (1000_3C2A / 0x13C2A)
    DI = AX;
    // LODSW SI (1000_3C2C / 0x13C2C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_3C2D / 0x13C2D)
    CX = AX;
    // CALL 0x1000:3e13 (1000_3C2F / 0x13C2F)
    NearCall(cs1, 0x3C32, unknown_1000_3E13_13E13);
    // MOV DX,DI (1000_3C32 / 0x13C32)
    DX = DI;
    // MOV BX,CX (1000_3C34 / 0x13C34)
    BX = CX;
    // POP AX (1000_3C36 / 0x13C36)
    AX = Stack.Pop();
    // TEST AX,0x4000 (1000_3C37 / 0x13C37)
    Alu.And16(AX, 0x4000);
    // JZ 0x1000:3c25 (1000_3C3A / 0x13C3A)
    if(ZeroFlag) {
      goto label_1000_3C25_13C25;
    }
    // MOV word ptr [0x47f2],DI (1000_3C3C / 0x13C3C)
    UInt16[DS, 0x47F2] = DI;
    // MOV word ptr [0x47f4],CX (1000_3C40 / 0x13C40)
    UInt16[DS, 0x47F4] = CX;
    // MOV DX,word ptr [0x47ee] (1000_3C44 / 0x13C44)
    DX = UInt16[DS, 0x47EE];
    // MOV BX,word ptr [0x47f0] (1000_3C48 / 0x13C48)
    BX = UInt16[DS, 0x47F0];
    // MOV word ptr [0x22d9],0x4c62 (1000_3C4C / 0x13C4C)
    UInt16[DS, 0x22D9] = 0x4C62;
    // TEST AX,0x8000 (1000_3C52 / 0x13C52)
    Alu.And16(AX, 0x8000);
    // JNZ 0x1000:3c71 (1000_3C55 / 0x13C55)
    if(!ZeroFlag) {
      goto label_1000_3C71_13C71;
    }
    label_1000_3C57_13C57:
    // LODSW SI (1000_3C57 / 0x13C57)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // PUSH AX (1000_3C58 / 0x13C58)
    Stack.Push(AX);
    // AND AX,0x3fff (1000_3C59 / 0x13C59)
    // AX &= 0x3FFF;
    AX = Alu.And16(AX, 0x3FFF);
    // MOV DI,AX (1000_3C5C / 0x13C5C)
    DI = AX;
    // LODSW SI (1000_3C5E / 0x13C5E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_3C5F / 0x13C5F)
    CX = AX;
    // CALL 0x1000:3e13 (1000_3C61 / 0x13C61)
    NearCall(cs1, 0x3C64, unknown_1000_3E13_13E13);
    // MOV DX,DI (1000_3C64 / 0x13C64)
    DX = DI;
    // MOV BX,CX (1000_3C66 / 0x13C66)
    BX = CX;
    // POP AX (1000_3C68 / 0x13C68)
    AX = Stack.Pop();
    // OR AX,AX (1000_3C69 / 0x13C69)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:3c57 (1000_3C6B / 0x13C6B)
    if(!SignFlag) {
      goto label_1000_3C57_13C57;
    }
    // MOV DX,DI (1000_3C6D / 0x13C6D)
    DX = DI;
    // MOV BX,CX (1000_3C6F / 0x13C6F)
    BX = CX;
    label_1000_3C71_13C71:
    // MOV DI,word ptr [0x47f2] (1000_3C71 / 0x13C71)
    DI = UInt16[DS, 0x47F2];
    // MOV CX,word ptr [0x47f4] (1000_3C75 / 0x13C75)
    CX = UInt16[DS, 0x47F4];
    // CALL 0x1000:3e13 (1000_3C79 / 0x13C79)
    NearCall(cs1, 0x3C7C, unknown_1000_3E13_13E13);
    // MOV ES,word ptr [0xdbda] (1000_3C7C / 0x13C7C)
    ES = UInt16[DS, 0xDBDA];
    // PUSH SI (1000_3C80 / 0x13C80)
    Stack.Push(SI);
    // MOV BX,word ptr [0x47f0] (1000_3C81 / 0x13C81)
    BX = UInt16[DS, 0x47F0];
    // MOV BP,word ptr [0x47f4] (1000_3C85 / 0x13C85)
    BP = UInt16[DS, 0x47F4];
    // SUB BP,BX (1000_3C89 / 0x13C89)
    // BP -= BX;
    BP = Alu.Sub16(BP, BX);
    // LEA SI,[0x4c60] (1000_3C8B / 0x13C8B)
    SI = 0x4C60;
    // MOV CX,BP (1000_3C8F / 0x13C8F)
    CX = BP;
    // MOV BP,0x0 (1000_3C91 / 0x13C91)
    BP = 0x0;
    // MOV AH,byte ptr [0x47ec] (1000_3C94 / 0x13C94)
    AH = UInt8[DS, 0x47EC];
    // AND AH,0x3e (1000_3C98 / 0x13C98)
    // AH &= 0x3E;
    AH = Alu.And8(AH, 0x3E);
    // JZ 0x1000:3ca0 (1000_3C9B / 0x13C9B)
    if(ZeroFlag) {
      goto label_1000_3CA0_13CA0;
    }
    // MOV BP,0x1 (1000_3C9D / 0x13C9D)
    BP = 0x1;
    label_1000_3CA0_13CA0:
    // MOV AL,0x2 (1000_3CA0 / 0x13CA0)
    AL = 0x2;
    // MOV [0x22df],AX (1000_3CA2 / 0x13CA2)
    UInt16[DS, 0x22DF] = AX;
    // MOV AH,byte ptr [0x47ed] (1000_3CA5 / 0x13CA5)
    AH = UInt8[DS, 0x47ED];
    // XOR AL,AL (1000_3CA9 / 0x13CA9)
    AL = 0;
    // TEST byte ptr [0x47ec],0x1 (1000_3CAB / 0x13CAB)
    Alu.And8(UInt8[DS, 0x47EC], 0x1);
    // JNZ 0x1000:3ce0 (1000_3CB0 / 0x13CB0)
    if(!ZeroFlag) {
      goto label_1000_3CE0_13CE0;
    }
    label_1000_3CB2_13CB2:
    // PUSH CX (1000_3CB2 / 0x13CB2)
    Stack.Push(CX);
    // PUSH AX (1000_3CB3 / 0x13CB3)
    Stack.Push(AX);
    // LODSW SI (1000_3CB4 / 0x13CB4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_3CB5 / 0x13CB5)
    DX = AX;
    // LODSW SI (1000_3CB7 / 0x13CB7)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_3CB8 / 0x13CB8)
    CX = AX;
    // POP AX (1000_3CBA / 0x13CBA)
    AX = Stack.Pop();
    // CMP DX,CX (1000_3CBB / 0x13CBB)
    Alu.Sub16(DX, CX);
    // JC 0x1000:3cc1 (1000_3CBD / 0x13CBD)
    if(CarryFlag) {
      goto label_1000_3CC1_13CC1;
    }
    // XCHG CX,DX (1000_3CBF / 0x13CBF)
    ushort tmp_1000_3CBF = CX;
    CX = DX;
    DX = tmp_1000_3CBF;
    label_1000_3CC1_13CC1:
    // INC CX (1000_3CC1 / 0x13CC1)
    CX = Alu.Inc16(CX);
    // SUB CX,DX (1000_3CC2 / 0x13CC2)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // JZ 0x1000:3cd6 (1000_3CC4 / 0x13CC4)
    if(ZeroFlag) {
      goto label_1000_3CD6_13CD6;
    }
    // PUSH SI (1000_3CC6 / 0x13CC6)
    Stack.Push(SI);
    // PUSH BX (1000_3CC7 / 0x13CC7)
    Stack.Push(BX);
    // MOV SI,word ptr [0x22df] (1000_3CC8 / 0x13CC8)
    SI = UInt16[DS, 0x22DF];
    // MOV DI,word ptr [0x22db] (1000_3CCC / 0x13CCC)
    DI = UInt16[DS, 0x22DB];
    // CALLF [0x3945] (1000_3CD0 / 0x13CD0)
    // Indirect call to [0x3945], generating possible targets from emulator records
    uint targetAddress_1000_3CD0 = (uint)(UInt16[DS, 0x3947] * 0x10 + UInt16[DS, 0x3945] - cs1 * 0x10);
    switch(targetAddress_1000_3CD0) {
      case 0x2361C : FarCall(cs1, 0x3CD4, VgaFunc36GenerateTextureOutBP_334B_016C_3361C);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3CD0);
        break;
    }
    // POP BX (1000_3CD4 / 0x13CD4)
    BX = Stack.Pop();
    // POP SI (1000_3CD5 / 0x13CD5)
    SI = Stack.Pop();
    label_1000_3CD6_13CD6:
    // ADD AX,word ptr [0x22dd] (1000_3CD6 / 0x13CD6)
    // AX += UInt16[DS, 0x22DD];
    AX = Alu.Add16(AX, UInt16[DS, 0x22DD]);
    // INC BX (1000_3CDA / 0x13CDA)
    BX = Alu.Inc16(BX);
    // POP CX (1000_3CDB / 0x13CDB)
    CX = Stack.Pop();
    // LOOP 0x1000:3cb2 (1000_3CDC / 0x13CDC)
    if(--CX != 0) {
      goto label_1000_3CB2_13CB2;
    }
    // POP SI (1000_3CDE / 0x13CDE)
    SI = Stack.Pop();
    // RET  (1000_3CDF / 0x13CDF)
    return NearRet();
    label_1000_3CE0_13CE0:
    // PUSH CX (1000_3CE0 / 0x13CE0)
    Stack.Push(CX);
    // PUSH AX (1000_3CE1 / 0x13CE1)
    Stack.Push(AX);
    // LODSW SI (1000_3CE2 / 0x13CE2)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_3CE3 / 0x13CE3)
    DX = AX;
    // LODSW SI (1000_3CE5 / 0x13CE5)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_3CE6 / 0x13CE6)
    CX = AX;
    // POP AX (1000_3CE8 / 0x13CE8)
    AX = Stack.Pop();
    // CMP DX,CX (1000_3CE9 / 0x13CE9)
    Alu.Sub16(DX, CX);
    // JNC 0x1000:3cef (1000_3CEB / 0x13CEB)
    if(!CarryFlag) {
      goto label_1000_3CEF_13CEF;
    }
    // XCHG CX,DX (1000_3CED / 0x13CED)
    ushort tmp_1000_3CED = CX;
    CX = DX;
    DX = tmp_1000_3CED;
    label_1000_3CEF_13CEF:
    // DEC CX (1000_3CEF / 0x13CEF)
    CX = Alu.Dec16(CX);
    // SUB CX,DX (1000_3CF0 / 0x13CF0)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // JZ 0x1000:3d08 (1000_3CF2 / 0x13CF2)
    if(ZeroFlag) {
      goto label_1000_3D08_13D08;
    }
    // NEG CX (1000_3CF4 / 0x13CF4)
    CX = Alu.Sub16(0, CX);
    // PUSH SI (1000_3CF6 / 0x13CF6)
    Stack.Push(SI);
    // PUSH BX (1000_3CF7 / 0x13CF7)
    Stack.Push(BX);
    // MOV SI,word ptr [0x22df] (1000_3CF8 / 0x13CF8)
    SI = UInt16[DS, 0x22DF];
    // MOV DI,word ptr [0x22db] (1000_3CFC / 0x13CFC)
    DI = UInt16[DS, 0x22DB];
    // STD  (1000_3D00 / 0x13D00)
    DirectionFlag = true;
    // CALLF [0x3945] (1000_3D01 / 0x13D01)
    // Indirect call to [0x3945], generating possible targets from emulator records
    uint targetAddress_1000_3D01 = (uint)(UInt16[DS, 0x3947] * 0x10 + UInt16[DS, 0x3945] - cs1 * 0x10);
    switch(targetAddress_1000_3D01) {
      case 0x2361C : FarCall(cs1, 0x3D05, VgaFunc36GenerateTextureOutBP_334B_016C_3361C);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_3D01);
        break;
    }
    // POP BX (1000_3D05 / 0x13D05)
    BX = Stack.Pop();
    // POP SI (1000_3D06 / 0x13D06)
    SI = Stack.Pop();
    // CLD  (1000_3D07 / 0x13D07)
    DirectionFlag = false;
    label_1000_3D08_13D08:
    // ADD AX,word ptr [0x22dd] (1000_3D08 / 0x13D08)
    // AX += UInt16[DS, 0x22DD];
    AX = Alu.Add16(AX, UInt16[DS, 0x22DD]);
    // INC BX (1000_3D0C / 0x13D0C)
    BX = Alu.Inc16(BX);
    // POP CX (1000_3D0D / 0x13D0D)
    CX = Stack.Pop();
    // LOOP 0x1000:3ce0 (1000_3D0E / 0x13D0E)
    if(--CX != 0) {
      goto label_1000_3CE0_13CE0;
    }
    // POP SI (1000_3D10 / 0x13D10)
    SI = Stack.Pop();
    // RET  (1000_3D11 / 0x13D11)
    return NearRet();
  }
  
  public Action unknown_1000_3D2F_13D2F(int gotoTarget) {
    label_1000_3D2F_13D2F:
    // PUSH word ptr [0x2784] (1000_3D2F / 0x13D2F)
    Stack.Push(UInt16[DS, 0x2784]);
    // PUSH AX (1000_3D33 / 0x13D33)
    Stack.Push(AX);
    // XOR AH,AH (1000_3D34 / 0x13D34)
    AH = 0;
    // MOV DI,AX (1000_3D36 / 0x13D36)
    DI = AX;
    // SHL DI,1 (1000_3D38 / 0x13D38)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // SHL DI,1 (1000_3D3A / 0x13D3A)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV word ptr [DI + 0x47f8],DX (1000_3D3C / 0x13D3C)
    UInt16[DS, (ushort)(DI + 0x47F8)] = DX;
    // MOV word ptr [DI + 0x47fa],BX (1000_3D40 / 0x13D40)
    UInt16[DS, (ushort)(DI + 0x47FA)] = BX;
    // MOV AX,0x26 (1000_3D44 / 0x13D44)
    AX = 0x26;
    // CALL 0x1000:c13e (1000_3D47 / 0x13D47)
    NearCall(cs1, 0x3D4A, open_sprite_sheet_ida_1000_C13E_1C13E);
    // POP AX (1000_3D4A / 0x13D4A)
    AX = Stack.Pop();
    // MOV CH,AH (1000_3D4B / 0x13D4B)
    CH = AH;
    // CMP AL,0xf (1000_3D4D / 0x13D4D)
    Alu.Sub8(AL, 0xF);
    // JC 0x1000:3d58 (1000_3D4F / 0x13D4F)
    if(CarryFlag) {
      goto label_1000_3D58_13D58;
    }
    // SUB AL,0xf (1000_3D51 / 0x13D51)
    // AL -= 0xF;
    AL = Alu.Sub8(AL, 0xF);
    // MOV [0x476c],AL (1000_3D53 / 0x13D53)
    UInt8[DS, 0x476C] = AL;
    // MOV AL,0xf (1000_3D56 / 0x13D56)
    AL = 0xF;
    label_1000_3D58_13D58:
    // CALL 0x1000:9123 (1000_3D58 / 0x13D58)
    NearCall(cs1, 0x3D5B, unknown_1000_9123_19123);
    // CALL 0x1000:127c (1000_3D5B / 0x13D5B)
    NearCall(cs1, 0x3D5E, unknown_1000_127C_1127C);
    // JNC 0x1000:3d65 (1000_3D5E / 0x13D5E)
    if(!CarryFlag) {
      goto label_1000_3D65_13D65;
    }
    // MOV AL,0x11 (1000_3D60 / 0x13D60)
    AL = 0x11;
    // ADD BX,0x35 (1000_3D62 / 0x13D62)
    // BX += 0x35;
    BX = Alu.Add16(BX, 0x35);
    label_1000_3D65_13D65:
    // CMP AL,0xc (1000_3D65 / 0x13D65)
    Alu.Sub8(AL, 0xC);
    // JNZ 0x1000:3d72 (1000_3D67 / 0x13D67)
    if(!ZeroFlag) {
      goto label_1000_3D72_13D72;
    }
    // TEST byte ptr [0x10a7],0x10 (1000_3D69 / 0x13D69)
    Alu.And8(UInt8[DS, 0x10A7], 0x10);
    // JZ 0x1000:3d72 (1000_3D6E / 0x13D6E)
    if(ZeroFlag) {
      goto label_1000_3D72_13D72;
    }
    // MOV AL,0x12 (1000_3D70 / 0x13D70)
    AL = 0x12;
    label_1000_3D72_13D72:
    // MOV AH,CH (1000_3D72 / 0x13D72)
    AH = CH;
    // SHL AL,1 (1000_3D74 / 0x13D74)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // PUSH AX (1000_3D76 / 0x13D76)
    Stack.Push(AX);
    // CALL 0x1000:c2fd (1000_3D77 / 0x13D77)
    NearCall(cs1, 0x3D7A, unknown_1000_C2FD_1C2FD);
    // POP AX (1000_3D7A / 0x13D7A)
    AX = Stack.Pop();
    // INC AX (1000_3D7B / 0x13D7B)
    AX = Alu.Inc16(AX);
    // CALL 0x1000:c22f (1000_3D7C / 0x13D7C)
    NearCall(cs1, 0x3D7F, draw_sprite_ida_1000_C22F_1C22F);
    // POP AX (1000_3D7F / 0x13D7F)
    AX = Stack.Pop();
    // JMP 0x1000:c13e (1000_3D80 / 0x13D80)
    // Jump converted to entry function call
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action do_weird_shit_with_stack_buffer_ida_1000_3D83_13D83(int gotoTarget) {
    label_1000_3D83_13D83:
    // PUSH DS (1000_3D83 / 0x13D83)
    Stack.Push(DS);
    // POP ES (1000_3D84 / 0x13D84)
    ES = Stack.Pop();
    // MOV AX,0xffff (1000_3D85 / 0x13D85)
    AX = 0xFFFF;
    // MOV CX,0x17 (1000_3D88 / 0x13D88)
    CX = 0x17;
    // MOV DI,word ptr [0x47f6] (1000_3D8B / 0x13D8B)
    DI = UInt16[DS, 0x47F6];
    while (CX-- != 0) {
      // STOSB ES:DI (1000_3D8F / 0x13D8F)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV DI,word ptr [0x47f6] (1000_3D91 / 0x13D91)
    DI = UInt16[DS, 0x47F6];
    // CMP byte ptr [0x4774],0x0 (1000_3D95 / 0x13D95)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JZ 0x1000:3db0 (1000_3D9A / 0x13D9A)
    if(ZeroFlag) {
      goto label_1000_3DB0_13DB0;
    }
    // MOV AX,[0x4778] (1000_3D9C / 0x13D9C)
    AX = UInt16[DS, 0x4778];
    // OR AX,AX (1000_3D9F / 0x13D9F)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:3db0 (1000_3DA1 / 0x13DA1)
    if(ZeroFlag) {
      goto label_1000_3DB0_13DB0;
    }
    // PUSH SI (1000_3DA3 / 0x13DA3)
    Stack.Push(SI);
    // MOV SI,AX (1000_3DA4 / 0x13DA4)
    SI = AX;
    // LODSB CS:SI (1000_3DA6 / 0x13DA6)
    AL = UInt8[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV CL,AL (1000_3DA8 / 0x13DA8)
    CL = AL;
    while (CX-- != 0) {
      // MOVSB ES:DI,CS:SI (1000_3DAA / 0x13DAA)
      UInt8[ES, DI] = UInt8[cs1, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP SI (1000_3DAD / 0x13DAD)
    SI = Stack.Pop();
    // JMP 0x1000:3de5 (1000_3DAE / 0x13DAE)
    goto label_1000_3DE5_13DE5;
    label_1000_3DB0_13DB0:
    // MOV DX,word ptr [0x12] (1000_3DB0 / 0x13DB0)
    DX = UInt16[DS, 0x12];
    // XOR DX,word ptr [0x10] (1000_3DB4 / 0x13DB4)
    // DX ^= UInt16[DS, 0x10];
    DX = Alu.Xor16(DX, UInt16[DS, 0x10]);
    // MOV CL,byte ptr [SI] (1000_3DB8 / 0x13DB8)
    CL = UInt8[DS, SI];
    // OR CL,CL (1000_3DBA / 0x13DBA)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JZ 0x1000:3de5 (1000_3DBC / 0x13DBC)
    if(ZeroFlag) {
      goto label_1000_3DE5_13DE5;
    }
    // MOV CH,byte ptr [0xc5] (1000_3DBE / 0x13DBE)
    CH = UInt8[DS, 0xC5];
    // AND CH,0xf (1000_3DC2 / 0x13DC2)
    // CH &= 0xF;
    CH = Alu.And8(CH, 0xF);
    // MOV AX,0xffff (1000_3DC5 / 0x13DC5)
    AX = 0xFFFF;
    label_1000_3DC8_13DC8:
    // INC AX (1000_3DC8 / 0x13DC8)
    AX = Alu.Inc16(AX);
    // SHR DX,1 (1000_3DC9 / 0x13DC9)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // JNC 0x1000:3dd0 (1000_3DCB / 0x13DCB)
    if(!CarryFlag) {
      goto label_1000_3DD0_13DD0;
    }
    // CALL 0x1000:3df4 (1000_3DCD / 0x13DCD)
    NearCall(cs1, 0x3DD0, unknown_1000_3DF4_13DF4);
    label_1000_3DD0_13DD0:
    // OR DX,DX (1000_3DD0 / 0x13DD0)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNZ 0x1000:3dc8 (1000_3DD2 / 0x13DD2)
    if(!ZeroFlag) {
      goto label_1000_3DC8_13DC8;
    }
    // MOV DL,byte ptr [0x476a] (1000_3DD4 / 0x13DD4)
    DL = UInt8[DS, 0x476A];
    // DEC DX (1000_3DD8 / 0x13DD8)
    DX = Alu.Dec16(DX);
    // JLE 0x1000:3de5 (1000_3DD9 / 0x13DD9)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_3DE5_13DE5;
    }
    // MOV AX,0xf (1000_3DDB / 0x13DDB)
    AX = 0xF;
    label_1000_3DDE_13DDE:
    // INC AX (1000_3DDE / 0x13DDE)
    AX = Alu.Inc16(AX);
    // CALL 0x1000:3df4 (1000_3DDF / 0x13DDF)
    NearCall(cs1, 0x3DE2, unknown_1000_3DF4_13DF4);
    // DEC DX (1000_3DE2 / 0x13DE2)
    DX = Alu.Dec16(DX);
    // JNZ 0x1000:3dde (1000_3DE3 / 0x13DE3)
    if(!ZeroFlag) {
      goto label_1000_3DDE_13DDE;
    }
    label_1000_3DE5_13DE5:
    // LODSB SI (1000_3DE5 / 0x13DE5)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_3DE6 / 0x13DE6)
    AH = 0;
    // MOV DI,word ptr [0x47f6] (1000_3DE8 / 0x13DE8)
    DI = UInt16[DS, 0x47F6];
    // DEC AX (1000_3DEC / 0x13DEC)
    AX = Alu.Dec16(AX);
    // ADD DI,AX (1000_3DED / 0x13DED)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV word ptr [0x47f6],DI (1000_3DEF / 0x13DEF)
    UInt16[DS, 0x47F6] = DI;
    // RET  (1000_3DF3 / 0x13DF3)
    return NearRet();
  }
  
  public Action unknown_1000_3DF4_13DF4(int gotoTarget) {
    label_1000_3DF4_13DF4:
    // MOV BX,AX (1000_3DF4 / 0x13DF4)
    BX = AX;
    // ADD BL,CH (1000_3DF6 / 0x13DF6)
    // BL += CH;
    BL = Alu.Add8(BL, CH);
    label_1000_3DF8_13DF8:
    // SUB BL,CL (1000_3DF8 / 0x13DF8)
    // BL -= CL;
    BL = Alu.Sub8(BL, CL);
    // JNC 0x1000:3df8 (1000_3DFA / 0x13DFA)
    if(!CarryFlag) {
      goto label_1000_3DF8_13DF8;
    }
    // ADD BL,CL (1000_3DFC / 0x13DFC)
    // BL += CL;
    BL = Alu.Add8(BL, CL);
    // CMP byte ptr [BX + DI],0xff (1000_3DFE / 0x13DFE)
    Alu.Sub8(UInt8[DS, (ushort)(BX + DI)], 0xFF);
    // JZ 0x1000:3e10 (1000_3E01 / 0x13E01)
    if(ZeroFlag) {
      goto label_1000_3E10_13E10;
    }
    // MOV BX,0xffff (1000_3E03 / 0x13E03)
    BX = 0xFFFF;
    label_1000_3E06_13E06:
    // INC BX (1000_3E06 / 0x13E06)
    BX = Alu.Inc16(BX);
    // CMP BL,CL (1000_3E07 / 0x13E07)
    Alu.Sub8(BL, CL);
    // JNC 0x1000:3e12 (1000_3E09 / 0x13E09)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_3E12 / 0x13E12)
      return NearRet();
    }
    // CMP byte ptr [BX + DI],0xff (1000_3E0B / 0x13E0B)
    Alu.Sub8(UInt8[DS, (ushort)(BX + DI)], 0xFF);
    // JNZ 0x1000:3e06 (1000_3E0E / 0x13E0E)
    if(!ZeroFlag) {
      goto label_1000_3E06_13E06;
    }
    label_1000_3E10_13E10:
    // MOV byte ptr [BX + DI],AL (1000_3E10 / 0x13E10)
    UInt8[DS, (ushort)(BX + DI)] = AL;
    label_1000_3E12_13E12:
    // RET  (1000_3E12 / 0x13E12)
    return NearRet();
  }
  
  public Action unknown_1000_3E13_13E13(int gotoTarget) {
    label_1000_3E13_13E13:
    // PUSH BX (1000_3E13 / 0x13E13)
    Stack.Push(BX);
    // PUSH CX (1000_3E14 / 0x13E14)
    Stack.Push(CX);
    // PUSH DX (1000_3E15 / 0x13E15)
    Stack.Push(DX);
    // PUSH DI (1000_3E16 / 0x13E16)
    Stack.Push(DI);
    // MOV word ptr [0x47e8],DX (1000_3E17 / 0x13E17)
    UInt16[DS, 0x47E8] = DX;
    // MOV word ptr [0x47ea],BX (1000_3E1B / 0x13E1B)
    UInt16[DS, 0x47EA] = BX;
    // SUB BX,CX (1000_3E1F / 0x13E1F)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // SUB DX,DI (1000_3E21 / 0x13E21)
    // DX -= DI;
    DX = Alu.Sub16(DX, DI);
    // NEG BX (1000_3E23 / 0x13E23)
    BX = Alu.Sub16(0, BX);
    // NEG DX (1000_3E25 / 0x13E25)
    DX = Alu.Sub16(0, DX);
    // CALL 0x1000:3e80 (1000_3E27 / 0x13E27)
    NearCall(cs1, 0x3E2A, unknown_1000_3E80_13E80);
    // POP DI (1000_3E2A / 0x13E2A)
    DI = Stack.Pop();
    // POP DX (1000_3E2B / 0x13E2B)
    DX = Stack.Pop();
    // POP CX (1000_3E2C / 0x13E2C)
    CX = Stack.Pop();
    // POP BX (1000_3E2D / 0x13E2D)
    BX = Stack.Pop();
    // RET  (1000_3E2E / 0x13E2E)
    return NearRet();
  }
  
  public Action unknown_1000_3E80_13E80(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3E2F: break;
      case 0: goto entry; break; //
    }
    label_1000_3E2F_13E2F:
    // MOV BX,word ptr [0x47ea] (1000_3E2F / 0x13E2F)
    BX = UInt16[DS, 0x47EA];
    // MOV CX,DX (1000_3E33 / 0x13E33)
    CX = DX;
    // MOV DX,word ptr [0x47e8] (1000_3E35 / 0x13E35)
    DX = UInt16[DS, 0x47E8];
    // ADD word ptr [0x47e8],CX (1000_3E39 / 0x13E39)
    // UInt16[DS, 0x47E8] += CX;
    UInt16[DS, 0x47E8] = Alu.Add16(UInt16[DS, 0x47E8], CX);
    // JNC 0x1000:3e41 (1000_3E3D / 0x13E3D)
    if(!CarryFlag) {
      goto label_1000_3E41_13E41;
    }
    // ADD DX,CX (1000_3E3F / 0x13E3F)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    label_1000_3E41_13E41:
    // MOV DI,word ptr [0x22d9] (1000_3E41 / 0x13E41)
    DI = UInt16[DS, 0x22D9];
    // MOV AX,DX (1000_3E45 / 0x13E45)
    AX = DX;
    // STOSW ES:DI (1000_3E47 / 0x13E47)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x2 (1000_3E48 / 0x13E48)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // MOV word ptr [0x22d9],DI (1000_3E4B / 0x13E4B)
    UInt16[DS, 0x22D9] = DI;
    // POP SI (1000_3E4F / 0x13E4F)
    SI = Stack.Pop();
    // POP DI (1000_3E50 / 0x13E50)
    DI = Stack.Pop();
    // RET  (1000_3E51 / 0x13E51)
    return NearRet();
    label_1000_3E52_13E52:
    // MOV CX,BX (1000_3E52 / 0x13E52)
    CX = BX;
    // MOV BX,word ptr [0x47ea] (1000_3E54 / 0x13E54)
    BX = UInt16[DS, 0x47EA];
    // MOV DX,word ptr [0x47e8] (1000_3E58 / 0x13E58)
    DX = UInt16[DS, 0x47E8];
    // OR AX,AX (1000_3E5C / 0x13E5C)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:3e68 (1000_3E5E / 0x13E5E)
    if(!SignFlag) {
      goto label_1000_3E68_13E68;
    }
    // SUB word ptr [0x47ea],CX (1000_3E60 / 0x13E60)
    // UInt16[DS, 0x47EA] -= CX;
    UInt16[DS, 0x47EA] = Alu.Sub16(UInt16[DS, 0x47EA], CX);
    // SUB BX,CX (1000_3E64 / 0x13E64)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // JMP 0x1000:3e6c (1000_3E66 / 0x13E66)
    goto label_1000_3E6C_13E6C;
    label_1000_3E68_13E68:
    // ADD word ptr [0x47ea],CX (1000_3E68 / 0x13E68)
    // UInt16[DS, 0x47EA] += CX;
    UInt16[DS, 0x47EA] = Alu.Add16(UInt16[DS, 0x47EA], CX);
    label_1000_3E6C_13E6C:
    // INC CX (1000_3E6C / 0x13E6C)
    CX = Alu.Inc16(CX);
    // MOV DI,word ptr [0x22d9] (1000_3E6D / 0x13E6D)
    DI = UInt16[DS, 0x22D9];
    // MOV AX,DX (1000_3E71 / 0x13E71)
    AX = DX;
    label_1000_3E73_13E73:
    // STOSW ES:DI (1000_3E73 / 0x13E73)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x2 (1000_3E74 / 0x13E74)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // LOOP 0x1000:3e73 (1000_3E77 / 0x13E77)
    if(--CX != 0) {
      goto label_1000_3E73_13E73;
    }
    // MOV word ptr [0x22d9],DI (1000_3E79 / 0x13E79)
    UInt16[DS, 0x22D9] = DI;
    // POP SI (1000_3E7D / 0x13E7D)
    SI = Stack.Pop();
    // POP DI (1000_3E7E / 0x13E7E)
    DI = Stack.Pop();
    // RET  (1000_3E7F / 0x13E7F)
    return NearRet();
    entry:
    label_1000_3E80_13E80:
    // PUSH DI (1000_3E80 / 0x13E80)
    Stack.Push(DI);
    // PUSH SI (1000_3E81 / 0x13E81)
    Stack.Push(SI);
    // OR BX,BX (1000_3E82 / 0x13E82)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:3e2f (1000_3E84 / 0x13E84)
    if(ZeroFlag) {
      goto label_1000_3E2F_13E2F;
    }
    // MOV AX,0x1 (1000_3E86 / 0x13E86)
    AX = 0x1;
    // JNS 0x1000:3e8f (1000_3E89 / 0x13E89)
    if(!SignFlag) {
      goto label_1000_3E8F_13E8F;
    }
    // NEG BX (1000_3E8B / 0x13E8B)
    BX = Alu.Sub16(0, BX);
    // NEG AX (1000_3E8D / 0x13E8D)
    AX = Alu.Sub16(0, AX);
    label_1000_3E8F_13E8F:
    // OR DX,DX (1000_3E8F / 0x13E8F)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:3e52 (1000_3E91 / 0x13E91)
    if(ZeroFlag) {
      goto label_1000_3E52_13E52;
    }
    // MOV CX,0x1 (1000_3E93 / 0x13E93)
    CX = 0x1;
    // JNS 0x1000:3e9c (1000_3E96 / 0x13E96)
    if(!SignFlag) {
      goto label_1000_3E9C_13E9C;
    }
    // NEG CX (1000_3E98 / 0x13E98)
    CX = Alu.Sub16(0, CX);
    // NEG DX (1000_3E9A / 0x13E9A)
    DX = Alu.Sub16(0, DX);
    label_1000_3E9C_13E9C:
    // PUSH AX (1000_3E9C / 0x13E9C)
    Stack.Push(AX);
    // PUSH CX (1000_3E9D / 0x13E9D)
    Stack.Push(CX);
    // PUSH AX (1000_3E9E / 0x13E9E)
    Stack.Push(AX);
    // PUSH CX (1000_3E9F / 0x13E9F)
    Stack.Push(CX);
    // MOV BP,SP (1000_3EA0 / 0x13EA0)
    BP = SP;
    // MOV SI,BX (1000_3EA2 / 0x13EA2)
    SI = BX;
    // MOV DI,DX (1000_3EA4 / 0x13EA4)
    DI = DX;
    // XOR AX,AX (1000_3EA6 / 0x13EA6)
    AX = 0;
    // CMP DX,BX (1000_3EA8 / 0x13EA8)
    Alu.Sub16(DX, BX);
    // JBE 0x1000:3eb1 (1000_3EAA / 0x13EAA)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_3EB1_13EB1;
    }
    // MOV word ptr [BP + 0x2],AX (1000_3EAC / 0x13EAC)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // JMP 0x1000:3eba (1000_3EAF / 0x13EAF)
    goto label_1000_3EBA_13EBA;
    label_1000_3EB1_13EB1:
    // OR BX,BX (1000_3EB1 / 0x13EB1)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:3ef8 (1000_3EB3 / 0x13EB3)
    if(ZeroFlag) {
      goto label_1000_3EF8_13EF8;
    }
    // XCHG SI,DI (1000_3EB5 / 0x13EB5)
    ushort tmp_1000_3EB5 = SI;
    SI = DI;
    DI = tmp_1000_3EB5;
    // MOV word ptr [BP + 0x0],AX (1000_3EB7 / 0x13EB7)
    UInt16[SS, BP] = AX;
    label_1000_3EBA_13EBA:
    // MOV AX,DI (1000_3EBA / 0x13EBA)
    AX = DI;
    // MOV CX,DI (1000_3EBC / 0x13EBC)
    CX = DI;
    // SHR AX,1 (1000_3EBE / 0x13EBE)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    label_1000_3EC0_13EC0:
    // ADD AX,SI (1000_3EC0 / 0x13EC0)
    // AX += SI;
    AX = Alu.Add16(AX, SI);
    // CMP AX,DI (1000_3EC2 / 0x13EC2)
    Alu.Sub16(AX, DI);
    // JC 0x1000:3ed0 (1000_3EC4 / 0x13EC4)
    if(CarryFlag) {
      goto label_1000_3ED0_13ED0;
    }
    // SUB AX,DI (1000_3EC6 / 0x13EC6)
    // AX -= DI;
    AX = Alu.Sub16(AX, DI);
    // MOV DX,word ptr [BP + 0x4] (1000_3EC8 / 0x13EC8)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV BX,word ptr [BP + 0x6] (1000_3ECB / 0x13ECB)
    BX = UInt16[SS, (ushort)(BP + 0x6)];
    // JMP 0x1000:3ed6 (1000_3ECE / 0x13ECE)
    goto label_1000_3ED6_13ED6;
    label_1000_3ED0_13ED0:
    // MOV DX,word ptr [BP + 0x0] (1000_3ED0 / 0x13ED0)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (1000_3ED3 / 0x13ED3)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    label_1000_3ED6_13ED6:
    // ADD DX,word ptr [0x47e8] (1000_3ED6 / 0x13ED6)
    // DX += UInt16[DS, 0x47E8];
    DX = Alu.Add16(DX, UInt16[DS, 0x47E8]);
    // CMP BX,0x1 (1000_3EDA / 0x13EDA)
    Alu.Sub16(BX, 0x1);
    // JNZ 0x1000:3ef2 (1000_3EDD / 0x13EDD)
    if(!ZeroFlag) {
      goto label_1000_3EF2_13EF2;
    }
    // PUSH DI (1000_3EDF / 0x13EDF)
    Stack.Push(DI);
    // PUSH AX (1000_3EE0 / 0x13EE0)
    Stack.Push(AX);
    // MOV DI,word ptr [0x22d9] (1000_3EE1 / 0x13EE1)
    DI = UInt16[DS, 0x22D9];
    // MOV AX,[0x47e8] (1000_3EE5 / 0x13EE5)
    AX = UInt16[DS, 0x47E8];
    // STOSW ES:DI (1000_3EE8 / 0x13EE8)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x2 (1000_3EE9 / 0x13EE9)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // MOV word ptr [0x22d9],DI (1000_3EEC / 0x13EEC)
    UInt16[DS, 0x22D9] = DI;
    // POP AX (1000_3EF0 / 0x13EF0)
    AX = Stack.Pop();
    // POP DI (1000_3EF1 / 0x13EF1)
    DI = Stack.Pop();
    label_1000_3EF2_13EF2:
    // MOV word ptr [0x47e8],DX (1000_3EF2 / 0x13EF2)
    UInt16[DS, 0x47E8] = DX;
    // LOOP 0x1000:3ec0 (1000_3EF6 / 0x13EF6)
    if(--CX != 0) {
      goto label_1000_3EC0_13EC0;
    }
    label_1000_3EF8_13EF8:
    // ADD SP,0x8 (1000_3EF8 / 0x13EF8)
    // SP += 0x8;
    SP = Alu.Add16(SP, 0x8);
    // POP SI (1000_3EFB / 0x13EFB)
    SI = Stack.Pop();
    // POP DI (1000_3EFC / 0x13EFC)
    DI = Stack.Pop();
    // RET  (1000_3EFD / 0x13EFD)
    return NearRet();
  }
  
  public Action unknown_1000_3EFE_13EFE(int gotoTarget) {
    label_1000_3EFE_13EFE:
    // MOV AL,DH (1000_3EFE / 0x13EFE)
    AL = DH;
    // XOR AH,AH (1000_3F00 / 0x13F00)
    AH = 0;
    // SHL AX,1 (1000_3F02 / 0x13F02)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,AX (1000_3F04 / 0x13F04)
    SI = AX;
    // MOV SI,word ptr [SI + 0x13c4] (1000_3F06 / 0x13F06)
    SI = UInt16[DS, (ushort)(SI + 0x13C4)];
    // MOV AL,DL (1000_3F0A / 0x13F0A)
    AL = DL;
    // DEC AL (1000_3F0C / 0x13F0C)
    AL = Alu.Dec8(AL);
    // MOV AH,0x5 (1000_3F0E / 0x13F0E)
    AH = 0x5;
    // MUL AH (1000_3F10 / 0x13F10)
    Cpu.Mul8(AH);
    // ADD SI,AX (1000_3F12 / 0x13F12)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    label_1000_3F14_13F14:
    // RET  (1000_3F14 / 0x13F14)
    return NearRet();
  }
  
  public Action unknown_1000_3F15_13F15(int gotoTarget) {
    switch(gotoTarget) {
      case 0x3F15: goto label_1000_3F15_13F15;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3F15_13F15:
    // MOV BP,0x1 (1000_3F15 / 0x13F15)
    BP = 0x1;
    // JMP 0x1000:3f27 (1000_3F18 / 0x13F18)
    // Jump converted to non entry function call
    return unknown_1000_3F1F_13F1F(0x13F27 - cs1 * 0x10);
  }
  
  public Action unknown_1000_3F1A_13F1A(int gotoTarget) {
    label_1000_3F1A_13F1A:
    // MOV BP,0x2 (1000_3F1A / 0x13F1A)
    BP = 0x2;
    // JMP 0x1000:3f27 (1000_3F1D / 0x13F1D)
    // Jump converted to non entry function call
    return unknown_1000_3F1F_13F1F(0x13F27 - cs1 * 0x10);
  }
  
  public Action unknown_1000_3F1F_13F1F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4002: goto label_1000_4002_14002;break;
      case 0x3F27: goto label_1000_3F27_13F27;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_3F1F_13F1F:
    // MOV BP,0x3 (1000_3F1F / 0x13F1F)
    BP = 0x3;
    // JMP 0x1000:3f27 (1000_3F22 / 0x13F22)
    goto label_1000_3F27_13F27;
    label_1000_3F27_13F27:
    // PUSH BP (1000_3F27 / 0x13F27)
    Stack.Push(BP);
    // CALL 0x1000:d2bd (1000_3F28 / 0x13F28)
    NearCall(cs1, 0x3F2B, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:ac30 (1000_3F2B / 0x13F2B)
    NearCall(cs1, 0x3F2E, CallPcmFunc05_1000_AC30_1AC30);
    // CALL 0x1000:a7a5 (1000_3F2E / 0x13F2E)
    NearCall(cs1, 0x3F31, unknown_1000_A7A5_1A7A5);
    // POP BP (1000_3F31 / 0x13F31)
    BP = Stack.Pop();
    // MOV byte ptr [0x47a9],0x0 (1000_3F32 / 0x13F32)
    UInt8[DS, 0x47A9] = 0x0;
    // MOV byte ptr [0x26],0x0 (1000_3F37 / 0x13F37)
    UInt8[DS, 0x26] = 0x0;
    // MOV DX,word ptr [0x4] (1000_3F3C / 0x13F3C)
    DX = UInt16[DS, 0x4];
    // MOV BX,word ptr [0x6] (1000_3F40 / 0x13F40)
    BX = UInt16[DS, 0x6];
    // CMP BL,0x80 (1000_3F44 / 0x13F44)
    Alu.Sub8(BL, 0x80);
    // JZ 0x1000:3f67 (1000_3F47 / 0x13F47)
    if(ZeroFlag) {
      goto label_1000_3F67_13F67;
    }
    // MOV AL,[0x4735] (1000_3F49 / 0x13F49)
    AL = UInt8[DS, 0x4735];
    // AND AL,0x7f (1000_3F4C / 0x13F4C)
    // AL &= 0x7F;
    AL = Alu.And8(AL, 0x7F);
    // INC AL (1000_3F4E / 0x13F4E)
    AL = Alu.Inc8(AL);
    // JNS 0x1000:3f54 (1000_3F50 / 0x13F50)
    if(!SignFlag) {
      goto label_1000_3F54_13F54;
    }
    // DEC AL (1000_3F52 / 0x13F52)
    AL = Alu.Dec8(AL);
    label_1000_3F54_13F54:
    // OR AL,0x80 (1000_3F54 / 0x13F54)
    // AL |= 0x80;
    AL = Alu.Or8(AL, 0x80);
    // MOV [0x4735],AL (1000_3F56 / 0x13F56)
    UInt8[DS, 0x4735] = AL;
    // CMP byte ptr [0xf4],0x14 (1000_3F59 / 0x13F59)
    Alu.Sub8(UInt8[DS, 0xF4], 0x14);
    // JNC 0x1000:3f64 (1000_3F5E / 0x13F5E)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:3ff5 (1000_3F64 / 0x13F64)
      goto label_1000_3FF5_13FF5;
    }
    // INC byte ptr [0xf4] (1000_3F60 / 0x13F60)
    UInt8[DS, 0xF4] = Alu.Inc8(UInt8[DS, 0xF4]);
    label_1000_3F64_13F64:
    // JMP 0x1000:3ff5 (1000_3F64 / 0x13F64)
    goto label_1000_3FF5_13FF5;
    label_1000_3F67_13F67:
    // CALL 0x1000:3efe (1000_3F67 / 0x13F67)
    NearCall(cs1, 0x3F6A, unknown_1000_3EFE_13EFE);
    // MOV DL,byte ptr [BP + SI] (1000_3F6A / 0x13F6A)
    DL = UInt8[SS, (ushort)(BP + SI)];
    // OR DL,DL (1000_3F6C / 0x13F6C)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x1000:3f14 (1000_3F6E / 0x13F6E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_3F14 / 0x13F14)
      return NearRet();
    }
    // JS 0x1000:3fd2 (1000_3F70 / 0x13F70)
    if(SignFlag) {
      goto label_1000_3FD2_13FD2;
    }
    // CMP byte ptr [0xb],0x1 (1000_3F72 / 0x13F72)
    Alu.Sub8(UInt8[DS, 0xB], 0x1);
    // JNZ 0x1000:3f84 (1000_3F77 / 0x13F77)
    if(!ZeroFlag) {
      goto label_1000_3F84_13F84;
    }
    // CALL 0x1000:e270 (1000_3F79 / 0x13F79)
    NearCall(cs1, 0x3F7C, PushAll_1000_E270_1E270);
    // MOV CL,0x2 (1000_3F7C / 0x13F7C)
    CL = 0x2;
    // CALL 0x1000:b389 (1000_3F7E / 0x13F7E)
    NearCall(cs1, 0x3F81, open_sav_cl_ida_1000_B389_1B389);
    // CALL 0x1000:e283 (1000_3F81 / 0x13F81)
    NearCall(cs1, 0x3F84, PopAll_1000_E283_1E283);
    label_1000_3F84_13F84:
    // MOV SI,word ptr [0x114e] (1000_3F84 / 0x13F84)
    SI = UInt16[DS, 0x114E];
    // TEST byte ptr [SI + 0xa],0x10 (1000_3F88 / 0x13F88)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x10);
    // JNZ 0x1000:3faa (1000_3F8C / 0x13F8C)
    if(!ZeroFlag) {
      goto label_1000_3FAA_13FAA;
    }
    // OR byte ptr [SI + 0xa],0x10 (1000_3F8E / 0x13F8E)
    // UInt8[DS, (ushort)(SI + 0xA)] |= 0x10;
    UInt8[DS, (ushort)(SI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0xA)], 0x10);
    // CMP DH,0x20 (1000_3F92 / 0x13F92)
    Alu.Sub8(DH, 0x20);
    // ADC byte ptr [0x25],0x0 (1000_3F95 / 0x13F95)
    UInt8[DS, 0x25] = Alu.Adc8(UInt8[DS, 0x25], 0x0);
    // MOV byte ptr [0x26],0xff (1000_3F9A / 0x13F9A)
    UInt8[DS, 0x26] = 0xFF;
    // CALL 0x1000:e270 (1000_3F9F / 0x13F9F)
    NearCall(cs1, 0x3FA2, PushAll_1000_E270_1E270);
    // MOV CL,0x3 (1000_3FA2 / 0x13FA2)
    CL = 0x3;
    // CALL 0x1000:b389 (1000_3FA4 / 0x13FA4)
    NearCall(cs1, 0x3FA7, open_sav_cl_ida_1000_B389_1B389);
    // CALL 0x1000:e283 (1000_3FA7 / 0x13FA7)
    NearCall(cs1, 0x3FAA, PopAll_1000_E283_1E283);
    label_1000_3FAA_13FAA:
    // MOV byte ptr [0xc],DL (1000_3FAA / 0x13FAA)
    UInt8[DS, 0xC] = DL;
    // MOV byte ptr [0x23],0x1 (1000_3FAE / 0x13FAE)
    UInt8[DS, 0x23] = 0x1;
    // CALL 0x1000:a1c4 (1000_3FB3 / 0x13FB3)
    NearCall(cs1, 0x3FB6, unknown_1000_A1C4_1A1C4);
    // PUSH BX (1000_3FB6 / 0x13FB6)
    Stack.Push(BX);
    // PUSH DX (1000_3FB7 / 0x13FB7)
    Stack.Push(DX);
    // CALL 0x1000:36d3 (1000_3FB8 / 0x13FB8)
    NearCall(cs1, 0x3FBB, unknown_1000_36D3_136D3);
    // POP DX (1000_3FBB / 0x13FBB)
    DX = Stack.Pop();
    // POP BX (1000_3FBC / 0x13FBC)
    BX = Stack.Pop();
    // CALL 0x1000:a1e2 (1000_3FBD / 0x13FBD)
    NearCall(cs1, 0x3FC0, unknown_1000_A1E2_1A1E2);
    // JZ 0x1000:3fc3 (1000_3FC0 / 0x13FC0)
    if(ZeroFlag) {
      goto label_1000_3FC3_13FC3;
    }
    // RET  (1000_3FC2 / 0x13FC2)
    return NearRet();
    label_1000_3FC3_13FC3:
    // PUSH BX (1000_3FC3 / 0x13FC3)
    Stack.Push(BX);
    // PUSH DX (1000_3FC4 / 0x13FC4)
    Stack.Push(DX);
    // CALL 0x1000:abd5 (1000_3FC5 / 0x13FC5)
    NearCall(cs1, 0x3FC8, unknown_1000_ABD5_1ABD5);
    // POP DX (1000_3FC8 / 0x13FC8)
    DX = Stack.Pop();
    // POP BX (1000_3FC9 / 0x13FC9)
    BX = Stack.Pop();
    // MOV byte ptr [0x23],0x5 (1000_3FCA / 0x13FCA)
    UInt8[DS, 0x23] = 0x5;
    // JMP 0x1000:4057 (1000_3FCF / 0x13FCF)
    // Jump converted to entry function call
    return unknown_1000_4057_14057(0);
    label_1000_3FD2_13FD2:
    // MOV byte ptr [0xe7],0x0 (1000_3FD2 / 0x13FD2)
    UInt8[DS, 0xE7] = 0x0;
    // XOR DH,DH (1000_3FD7 / 0x13FD7)
    DH = 0;
    // NEG DL (1000_3FD9 / 0x13FD9)
    DL = Alu.Sub8(0, DL);
    // MOV BP,DX (1000_3FDB / 0x13FDB)
    BP = DX;
    // XOR SI,SI (1000_3FDD / 0x13FDD)
    SI = 0;
    // XCHG word ptr [0x114e],SI (1000_3FDF / 0x13FDF)
    ushort tmp_1000_3FDF = UInt16[DS, 0x114E];
    UInt16[DS, 0x114E] = SI;
    SI = tmp_1000_3FDF;
    // MOV DX,word ptr [SI + 0x2] (1000_3FE3 / 0x13FE3)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BX,word ptr [SI + 0x4] (1000_3FE6 / 0x13FE6)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // XOR BH,BH (1000_3FE9 / 0x13FE9)
    BH = 0;
    // MOV byte ptr [0x8],0xff (1000_3FEB / 0x13FEB)
    UInt8[DS, 0x8] = 0xFF;
    // MOV byte ptr [0x9],0xff (1000_3FF0 / 0x13FF0)
    UInt8[DS, 0x9] = 0xFF;
    label_1000_3FF5_13FF5:
    // SHL BP,1 (1000_3FF5 / 0x13FF5)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // MOV AX,word ptr [BP + 0x1454] (1000_3FF7 / 0x13FF7)
    AX = UInt16[SS, (ushort)(BP + 0x1454)];
    // CALL 0x1000:b5cf (1000_3FFB / 0x13FFB)
    NearCall(cs1, 0x3FFE, unknown_1000_B5CF_1B5CF);
    // OR BH,BH (1000_3FFE / 0x13FFE)
    // BH |= BH;
    BH = Alu.Or8(BH, BH);
    // JNZ 0x1000:4057 (1000_4000 / 0x14000)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_4057_14057(0);
    }
    label_1000_4002_14002:
    // MOV AX,BX (1000_4002 / 0x14002)
    AX = BX;
    // CBW  (1000_4004 / 0x14004)
    AX = (ushort)((short)((sbyte)AL));
    // MOV BX,AX (1000_4005 / 0x14005)
    BX = AX;
    // CALL 0x1000:b532 (1000_4007 / 0x14007)
    NearCall(cs1, 0x400A, unknown_1000_B532_1B532);
    // XOR BH,BH (1000_400A / 0x1400A)
    BH = 0;
    // TEST AL,0x40 (1000_400C / 0x1400C)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:4057 (1000_400E / 0x1400E)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_4057_14057(0);
    }
    // CALL 0x1000:409a (1000_4010 / 0x14010)
    NearCall(cs1, 0x4013, unknown_1000_409A_1409A);
    // JNZ 0x1000:4057 (1000_4013 / 0x14013)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_4057_14057(0);
    }
    // CMP DX,word ptr [SI + 0x2] (1000_4015 / 0x14015)
    Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNZ 0x1000:4057 (1000_4018 / 0x14018)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_4057_14057(0);
    }
    // MOV AX,BX (1000_401A / 0x1401A)
    AX = BX;
    // CBW  (1000_401C / 0x1401C)
    AX = (ushort)((short)((sbyte)AL));
    // MOV BX,AX (1000_401D / 0x1401D)
    BX = AX;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_401F_1401F(0);
  }
  
  public Action unknown_1000_3F24_13F24(int gotoTarget) {
    label_1000_3F24_13F24:
    // MOV BP,0x4 (1000_3F24 / 0x13F24)
    BP = 0x4;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_3F1F_13F1F(0x13F27 - cs1 * 0x10);
  }
  
  public Action unknown_1000_401F_1401F(int gotoTarget) {
    label_1000_401F_1401F:
    // MOV byte ptr [0x4735],0x0 (1000_401F / 0x1401F)
    UInt8[DS, 0x4735] = 0x0;
    // MOV word ptr [0x114e],SI (1000_4024 / 0x14024)
    UInt16[DS, 0x114E] = SI;
    // MOV word ptr [0x1150],SI (1000_4028 / 0x14028)
    UInt16[DS, 0x1150] = SI;
    // MOV DI,SI (1000_402C / 0x1402C)
    DI = SI;
    // CALL 0x1000:503c (1000_402E / 0x1402E)
    NearCall(cs1, 0x4031, unknown_1000_503C_1503C);
    // MOV word ptr [0x9a],0x0 (1000_4031 / 0x14031)
    UInt16[DS, 0x9A] = 0x0;
    // MOV word ptr [0x98],0x0 (1000_4037 / 0x14037)
    UInt16[DS, 0x98] = 0x0;
    // CALL 0x1000:425b (1000_403D / 0x1403D)
    NearCall(cs1, 0x4040, unknown_1000_425B_1425B);
    // CALL 0x1000:40ae (1000_4040 / 0x14040)
    NearCall(cs1, 0x4043, unknown_1000_40AE_140AE);
    // MOV byte ptr [0x8],DH (1000_4043 / 0x14043)
    UInt8[DS, 0x8] = DH;
    // MOV byte ptr [0x9],BH (1000_4047 / 0x14047)
    UInt8[DS, 0x9] = BH;
    // CMP DH,0x20 (1000_404B / 0x1404B)
    Alu.Sub8(DH, 0x20);
    // JC 0x1000:4054 (1000_404E / 0x1404E)
    if(CarryFlag) {
      goto label_1000_4054_14054;
    }
    // OR byte ptr [SI + 0xa],0x10 (1000_4050 / 0x14050)
    // UInt8[DS, (ushort)(SI + 0xA)] |= 0x10;
    UInt8[DS, (ushort)(SI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0xA)], 0x10);
    label_1000_4054_14054:
    // CALL 0x1000:2170 (1000_4054 / 0x14054)
    NearCall(cs1, 0x4057, unknown_1000_2170_12170);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_4057_14057(0);
  }
  
  public Action unknown_1000_4057_14057(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4057: goto label_1000_4057_14057;break;
      case 0x16FC: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_16FC_116FC:
    // MOV byte ptr [0x2a],0xc8 (1000_16FC / 0x116FC)
    UInt8[DS, 0x2A] = 0xC8;
    // MOV AX,0x128f (1000_1701 / 0x11701)
    AX = 0x128F;
    // CALL 0x1000:1771 (1000_1704 / 0x11704)
    throw FailAsUntested("Could not find a valid function at address 1000_1771 / 0x11771");
    entry:
    label_1000_4057_14057:
    // CALL 0x1000:40c3 (1000_4057 / 0x14057)
    NearCall(cs1, 0x405A, unknown_1000_40C3_140C3);
    // MOV word ptr [0x4],DX (1000_405A / 0x1405A)
    UInt16[DS, 0x4] = DX;
    // MOV AL,DL (1000_405E / 0x1405E)
    AL = DL;
    // XCHG byte ptr [0xb],AL (1000_4060 / 0x14060)
    byte tmp_1000_4060 = UInt8[DS, 0xB];
    UInt8[DS, 0xB] = AL;
    AL = tmp_1000_4060;
    // MOV [0xd],AL (1000_4064 / 0x14064)
    UInt8[DS, 0xD] = AL;
    // MOV word ptr [0x6],BX (1000_4067 / 0x14067)
    UInt16[DS, 0x6] = BX;
    // CMP byte ptr [0x46eb],0x0 (1000_406B / 0x1406B)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JS 0x1000:4099 (1000_4070 / 0x14070)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_4099 / 0x14099)
      return NearRet();
    }
    // CMP DX,0x3002 (1000_4072 / 0x14072)
    Alu.Sub16(DX, 0x3002);
    // JNZ 0x1000:407b (1000_4076 / 0x14076)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:2dbf (1000_407B / 0x1407B)
      // Jump converted to entry function call
      return unknown_1000_2DBF_12DBF(0);
    }
    // JMP 0x1000:16fc (1000_4078 / 0x14078)
    goto label_1000_16FC_116FC;
    label_1000_407B_1407B:
    // JMP 0x1000:2dbf (1000_407B / 0x1407B)
    // Jump converted to entry function call
    return unknown_1000_2DBF_12DBF(0);
    label_1000_4099_14099:
    // RET  (1000_4099 / 0x14099)
    return NearRet();
  }
  
  public Action unknown_1000_407E_1407E(int gotoTarget) {
    label_1000_407E_1407E:
    // MOV DX,word ptr [0x4] (1000_407E / 0x1407E)
    DX = UInt16[DS, 0x4];
    // MOV BX,word ptr [0x6] (1000_4082 / 0x14082)
    BX = UInt16[DS, 0x6];
    // CMP BL,0x80 (1000_4086 / 0x14086)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:4096 (1000_4089 / 0x14089)
    if(!ZeroFlag) {
      goto label_1000_4096_14096;
    }
    // MOV SI,word ptr [0x114e] (1000_408B / 0x1408B)
    SI = UInt16[DS, 0x114E];
    // MOV DX,word ptr [SI + 0x2] (1000_408F / 0x1408F)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BX,word ptr [SI + 0x4] (1000_4092 / 0x14092)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // RET  (1000_4095 / 0x14095)
    return NearRet();
    label_1000_4096_14096:
    // XCHG AX,BX (1000_4096 / 0x14096)
    ushort tmp_1000_4096 = AX;
    AX = BX;
    BX = tmp_1000_4096;
    // CBW  (1000_4097 / 0x14097)
    AX = (ushort)((short)((sbyte)AL));
    // XCHG AX,BX (1000_4098 / 0x14098)
    ushort tmp_1000_4098 = AX;
    AX = BX;
    BX = tmp_1000_4098;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_4057_14057(0x14099 - cs1 * 0x10);
  }
  
  public Action unknown_1000_409A_1409A(int gotoTarget) {
    label_1000_409A_1409A:
    // MOV SI,0xe4 (1000_409A / 0x1409A)
    SI = 0xE4;
    label_1000_409D_1409D:
    // ADD SI,0x1c (1000_409D / 0x1409D)
    // SI += 0x1C;
    SI = Alu.Add16(SI, 0x1C);
    // CMP word ptr [SI],-0x1 (1000_40A0 / 0x140A0)
    Alu.Sub16(UInt16[DS, SI], 0xFFFF);
    // JZ 0x1000:40ab (1000_40A3 / 0x140A3)
    if(ZeroFlag) {
      goto label_1000_40AB_140AB;
    }
    // CMP DI,word ptr [SI + 0x6] (1000_40A5 / 0x140A5)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x6)]);
    // JNZ 0x1000:409d (1000_40A8 / 0x140A8)
    if(!ZeroFlag) {
      goto label_1000_409D_1409D;
    }
    // RET  (1000_40AA / 0x140AA)
    return NearRet();
    label_1000_40AB_140AB:
    // OR SI,SI (1000_40AB / 0x140AB)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // RET  (1000_40AD / 0x140AD)
    return NearRet();
  }
  
  public Action unknown_1000_40AE_140AE(int gotoTarget) {
    label_1000_40AE_140AE:
    // MOV AX,DI (1000_40AE / 0x140AE)
    AX = DI;
    // SUB AX,0x100 (1000_40B0 / 0x140B0)
    // AX -= 0x100;
    AX = Alu.Sub16(AX, 0x100);
    // MOV BL,0x1c (1000_40B3 / 0x140B3)
    BL = 0x1C;
    // DIV BL (1000_40B5 / 0x140B5)
    Cpu.Div8(BL);
    // MOV BH,AL (1000_40B7 / 0x140B7)
    BH = AL;
    // INC BH (1000_40B9 / 0x140B9)
    BH = Alu.Inc8(BH);
    // MOV BL,0x80 (1000_40BB / 0x140BB)
    BL = 0x80;
    // MOV DH,byte ptr [DI + 0x8] (1000_40BD / 0x140BD)
    DH = UInt8[DS, (ushort)(DI + 0x8)];
    // MOV DL,0x1 (1000_40C0 / 0x140C0)
    DL = 0x1;
    // RET  (1000_40C2 / 0x140C2)
    return NearRet();
  }
  
  public Action unknown_1000_40C3_140C3(int gotoTarget) {
    label_1000_40C3_140C3:
    // MOV BP,0x40c9 (1000_40C3 / 0x140C3)
    BP = 0x40C9;
    // JMP 0x1000:36ee (1000_40C6 / 0x140C6)
    // Jump converted to entry function call
    return unknown_1000_36EE_136EE(0);
  }
  
  public Action unknown_1000_40C9_140C9(int gotoTarget) {
    label_1000_40C9_140C9:
    // TEST byte ptr [SI + 0xf],0x40 (1000_40C9 / 0x140C9)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JZ 0x1000:40d4 (1000_40CD / 0x140CD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_40D4 / 0x140D4)
      return NearRet();
    }
    // MOV word ptr [SI],DX (1000_40CF / 0x140CF)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],BX (1000_40D1 / 0x140D1)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    label_1000_40D4_140D4:
    // RET  (1000_40D4 / 0x140D4)
    return NearRet();
  }
  
  public Action unknown_1000_40D5_140D5(int gotoTarget) {
    label_1000_40D5_140D5:
    // MOV byte ptr [0x23],0x7 (1000_40D5 / 0x140D5)
    UInt8[DS, 0x23] = 0x7;
    // CALL 0x1000:36d3 (1000_40DA / 0x140DA)
    NearCall(cs1, 0x40DD, unknown_1000_36D3_136D3);
    // CALL 0x1000:4ac4 (1000_40DD / 0x140DD)
    NearCall(cs1, 0x40E0, SetUnknown11CATo0_1000_4AC4_14AC4);
    // MOV BP,0x40e6 (1000_40E0 / 0x140E0)
    BP = 0x40E6;
    // JMP 0x1000:36ee (1000_40E3 / 0x140E3)
    // Jump converted to entry function call
    return unknown_1000_36EE_136EE(0);
  }
  
  public Action unknown_1000_40E6_140E6(int gotoTarget) {
    label_1000_40E6_140E6:
    // TEST byte ptr [SI + 0xf],0x40 (1000_40E6 / 0x140E6)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JZ 0x1000:40f8 (1000_40EA / 0x140EA)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_40F8 / 0x140F8)
      return NearRet();
    }
    // TEST byte ptr [SI + 0xf],0x2 (1000_40EC / 0x140EC)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x2);
    // JZ 0x1000:40f8 (1000_40F0 / 0x140F0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_40F8 / 0x140F8)
      return NearRet();
    }
    // CALL 0x1000:9556 (1000_40F2 / 0x140F2)
    NearCall(cs1, 0x40F5, unknown_1000_9556_19556);
    // CALL 0x1000:9655 (1000_40F5 / 0x140F5)
    NearCall(cs1, 0x40F8, unknown_1000_9655_19655);
    label_1000_40F8_140F8:
    // RET  (1000_40F8 / 0x140F8)
    return NearRet();
  }
  
  public Action unknown_1000_40F9_140F9(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4181: goto label_1000_4181_14181;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_40F9_140F9:
    // TEST byte ptr [0x11c9],0x3 (1000_40F9 / 0x140F9)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JNZ 0x1000:4101 (1000_40FE / 0x140FE)
    if(!ZeroFlag) {
      goto label_1000_4101_14101;
    }
    // RET  (1000_4100 / 0x14100)
    return NearRet();
    label_1000_4101_14101:
    // CMP word ptr [0x10],0x0 (1000_4101 / 0x14101)
    Alu.Sub16(UInt16[DS, 0x10], 0x0);
    // JZ 0x1000:4181 (1000_4106 / 0x14106)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4181 / 0x14181)
      return NearRet();
    }
    // CALL 0x1000:407e (1000_4108 / 0x14108)
    NearCall(cs1, 0x410B, unknown_1000_407E_1407E);
    // MOV CX,0x9 (1000_410B / 0x1410B)
    CX = 0x9;
    // MOV AX,0x9 (1000_410E / 0x1410E)
    AX = 0x9;
    // CALL 0x1000:b56c (1000_4111 / 0x14111)
    NearCall(cs1, 0x4114, unknown_1000_B56C_1B56C);
    // MOV CX,0x51 (1000_4114 / 0x14114)
    CX = 0x51;
    label_1000_4117_14117:
    // LODSB SI (1000_4117 / 0x14117)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // TEST AL,0x40 (1000_4118 / 0x14118)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:417c (1000_411A / 0x1411A)
    if(ZeroFlag) {
      goto label_1000_417C_1417C;
    }
    // MOV DI,word ptr [SI] (1000_411C / 0x1411C)
    DI = UInt16[DS, SI];
    // PUSH CX (1000_411E / 0x1411E)
    Stack.Push(CX);
    // PUSH SI (1000_411F / 0x1411F)
    Stack.Push(SI);
    // CALL 0x1000:409a (1000_4120 / 0x14120)
    NearCall(cs1, 0x4123, unknown_1000_409A_1409A);
    // JNZ 0x1000:417a (1000_4123 / 0x14123)
    if(!ZeroFlag) {
      goto label_1000_417A_1417A;
    }
    // TEST byte ptr [SI + 0xa],0x80 (1000_4125 / 0x14125)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x80);
    // JZ 0x1000:417a (1000_4129 / 0x14129)
    if(ZeroFlag) {
      goto label_1000_417A_1417A;
    }
    // MOV AL,[0x2a] (1000_412B / 0x1412B)
    AL = UInt8[DS, 0x2A];
    // CMP AL,byte ptr [SI + 0xb] (1000_412E / 0x1412E)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xB)]);
    // JC 0x1000:417a (1000_4131 / 0x14131)
    if(CarryFlag) {
      goto label_1000_417A_1417A;
    }
    // MOV DI,SI (1000_4133 / 0x14133)
    DI = SI;
    // CALL 0x1000:5124 (1000_4135 / 0x14135)
    NearCall(cs1, 0x4138, unknown_1000_5124_15124);
    // JC 0x1000:417a (1000_4138 / 0x14138)
    if(CarryFlag) {
      goto label_1000_417A_1417A;
    }
    // SUB AL,byte ptr [0x11c7] (1000_413A / 0x1413A)
    // AL -= UInt8[DS, 0x11C7];
    AL = Alu.Sub8(AL, UInt8[DS, 0x11C7]);
    // ADD AL,0x60 (1000_413E / 0x1413E)
    // AL += 0x60;
    AL = Alu.Add8(AL, 0x60);
    // CMP AL,0xc0 (1000_4140 / 0x14140)
    Alu.Sub8(AL, 0xC0);
    // JNC 0x1000:417a (1000_4142 / 0x14142)
    if(!CarryFlag) {
      goto label_1000_417A_1417A;
    }
    // XOR AH,AH (1000_4144 / 0x14144)
    AH = 0;
    // MOV CX,0xce (1000_4146 / 0x14146)
    CX = 0xCE;
    // CMP AL,0x60 (1000_4149 / 0x14149)
    Alu.Sub8(AL, 0x60);
    // JC 0x1000:4152 (1000_414B / 0x1414B)
    if(CarryFlag) {
      goto label_1000_4152_14152;
    }
    // INC AH (1000_414D / 0x1414D)
    AH = Alu.Inc8(AH);
    // ADD CX,0x2 (1000_414F / 0x1414F)
    // CX += 0x2;
    CX = Alu.Add16(CX, 0x2);
    label_1000_4152_14152:
    // MOV word ptr [0x11f5],CX (1000_4152 / 0x14152)
    UInt16[DS, 0x11F5] = CX;
    // MOV byte ptr [0xe1],AH (1000_4156 / 0x14156)
    UInt8[DS, 0xE1] = AH;
    // CALL 0x1000:6231 (1000_415A / 0x1415A)
    NearCall(cs1, 0x415D, unknown_1000_6231_16231);
    // ADD AX,0x48 (1000_415D / 0x1415D)
    // AX += 0x48;
    AX = Alu.Add16(AX, 0x48);
    // MOV [0x11f3],AX (1000_4160 / 0x14160)
    UInt16[DS, 0x11F3] = AX;
    // MOV byte ptr [0x23],0x3 (1000_4163 / 0x14163)
    UInt8[DS, 0x23] = 0x3;
    // CALL 0x1000:425b (1000_4168 / 0x14168)
    NearCall(cs1, 0x416B, unknown_1000_425B_1425B);
    // CALL 0x1000:4944 (1000_416B / 0x1416B)
    NearCall(cs1, 0x416E, unknown_1000_4944_14944);
    // CALL 0x1000:dbb2 (1000_416E / 0x1416E)
    NearCall(cs1, 0x4171, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:2efb (1000_4171 / 0x14171)
    NearCall(cs1, 0x4174, unknown_1000_2EFB_12EFB);
    // CALL 0x1000:2ffb (1000_4174 / 0x14174)
    NearCall(cs1, 0x4177, unknown_1000_2FFB_12FFB);
    // CALL 0x1000:d397 (1000_4177 / 0x14177)
    NearCall(cs1, 0x417A, unknown_1000_D397_1D397);
    label_1000_417A_1417A:
    // POP SI (1000_417A / 0x1417A)
    SI = Stack.Pop();
    // POP CX (1000_417B / 0x1417B)
    CX = Stack.Pop();
    label_1000_417C_1417C:
    // ADD SI,0x2 (1000_417C / 0x1417C)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // LOOP 0x1000:4117 (1000_417F / 0x1417F)
    if(--CX != 0) {
      goto label_1000_4117_14117;
    }
    label_1000_4181_14181:
    // RET  (1000_4181 / 0x14181)
    return NearRet();
  }
  
  public Action unknown_1000_4182_14182(int gotoTarget) {
    label_1000_4182_14182:
    // MOV AL,[0x11c9] (1000_4182 / 0x14182)
    AL = UInt8[DS, 0x11C9];
    // AND AL,0x3 (1000_4185 / 0x14185)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // DEC AL (1000_4187 / 0x14187)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:4181 (1000_4189 / 0x14189)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4181 / 0x14181)
      return NearRet();
    }
    // CMP byte ptr [0x11cb],0x0 (1000_418B / 0x1418B)
    Alu.Sub8(UInt8[DS, 0x11CB], 0x0);
    // JNZ 0x1000:419b (1000_4190 / 0x14190)
    if(!ZeroFlag) {
      goto label_1000_419B_1419B;
    }
    // MOV DI,word ptr [0x11c5] (1000_4192 / 0x14192)
    DI = UInt16[DS, 0x11C5];
    // CALL 0x1000:5d36 (1000_4196 / 0x14196)
    NearCall(cs1, 0x4199, unknown_1000_5D36_15D36);
    // JC 0x1000:41c5 (1000_4199 / 0x14199)
    if(CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_41C5_141C5(0);
    }
    label_1000_419B_1419B:
    // CALL 0x1000:407e (1000_419B / 0x1419B)
    NearCall(cs1, 0x419E, unknown_1000_407E_1407E);
    // CALL 0x1000:b532 (1000_419E / 0x1419E)
    NearCall(cs1, 0x41A1, unknown_1000_B532_1B532);
    // AND AL,0x30 (1000_41A1 / 0x141A1)
    // AL &= 0x30;
    AL = Alu.And8(AL, 0x30);
    // CMP AL,0x30 (1000_41A3 / 0x141A3)
    Alu.Sub8(AL, 0x30);
    // JC 0x1000:41c5 (1000_41A5 / 0x141A5)
    if(CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_41C5_141C5(0);
    }
    // CMP byte ptr [0x4726],0x0 (1000_41A7 / 0x141A7)
    Alu.Sub8(UInt8[DS, 0x4726], 0x0);
    // JNZ 0x1000:41b3 (1000_41AC / 0x141AC)
    if(!ZeroFlag) {
      goto label_1000_41B3_141B3;
    }
    // MOV byte ptr [0x23],0x4 (1000_41AE / 0x141AE)
    UInt8[DS, 0x23] = 0x4;
    label_1000_41B3_141B3:
    // MOV AL,0x40 (1000_41B3 / 0x141B3)
    AL = 0x40;
    // CALL 0x1000:41cc (1000_41B5 / 0x141B5)
    NearCall(cs1, 0x41B8, unknown_1000_41CC_141CC);
    // SUB byte ptr [0x4726],0x20 (1000_41B8 / 0x141B8)
    // UInt8[DS, 0x4726] -= 0x20;
    UInt8[DS, 0x4726] = Alu.Sub8(UInt8[DS, 0x4726], 0x20);
    // JNZ 0x1000:4181 (1000_41BD / 0x141BD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4181 / 0x14181)
      return NearRet();
    }
    // MOV byte ptr [0x46d9],0x2 (1000_41BF / 0x141BF)
    UInt8[DS, 0x46D9] = 0x2;
    // RET  (1000_41C4 / 0x141C4)
    return NearRet();
  }
  
  public Action unknown_1000_41C5_141C5(int gotoTarget) {
    switch(gotoTarget) {
      case 0x41C5: goto label_1000_41C5_141C5;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_41C5_141C5:
    // MOV byte ptr [0x4726],0x0 (1000_41C5 / 0x141C5)
    UInt8[DS, 0x4726] = 0x0;
    // XOR AL,AL (1000_41CA / 0x141CA)
    AL = 0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_41CC_141CC(0);
  }
  
  public Action unknown_1000_41CC_141CC(int gotoTarget) {
    label_1000_41CC_141CC:
    // MOV [0x21fd],AL (1000_41CC / 0x141CC)
    UInt8[DS, 0x21FD] = AL;
    // CMP word ptr [0x1f12],0x4ffb (1000_41CF / 0x141CF)
    Alu.Sub16(UInt16[DS, 0x1F12], 0x4FFB);
    // JNZ 0x1000:41da (1000_41D5 / 0x141D5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_41DA / 0x141DA)
      return NearRet();
    }
    // MOV [0x1f11],AL (1000_41D7 / 0x141D7)
    UInt8[DS, 0x1F11] = AL;
    label_1000_41DA_141DA:
    // RET  (1000_41DA / 0x141DA)
    return NearRet();
  }
  
  public Action unknown_1000_41E1_141E1(int gotoTarget) {
    switch(gotoTarget) {
      case 0x41DB: break;
      case 0: goto entry; break; //
    }
    label_1000_41DB_141DB:
    // DEC byte ptr [0x196c] (1000_41DB / 0x141DB)
    UInt8[DS, 0x196C] = Alu.Dec8(UInt8[DS, 0x196C]);
    // CLC  (1000_41DF / 0x141DF)
    CarryFlag = false;
    // RET  (1000_41E0 / 0x141E0)
    return NearRet();
    entry:
    label_1000_41E1_141E1:
    // CMP byte ptr [0x196c],0x0 (1000_41E1 / 0x141E1)
    Alu.Sub8(UInt8[DS, 0x196C], 0x0);
    // JNZ 0x1000:41db (1000_41E6 / 0x141E6)
    if(!ZeroFlag) {
      goto label_1000_41DB_141DB;
    }
    // MOV AL,[0x11c7] (1000_41E8 / 0x141E8)
    AL = UInt8[DS, 0x11C7];
    // ADD AL,0x20 (1000_41EB / 0x141EB)
    // AL += 0x20;
    AL = Alu.Add8(AL, 0x20);
    // TEST AL,0x40 (1000_41ED / 0x141ED)
    Alu.And8(AL, 0x40);
    // MOV CX,0x1 (1000_41EF / 0x141EF)
    CX = 0x1;
    // MOV AX,0x8 (1000_41F2 / 0x141F2)
    AX = 0x8;
    // JZ 0x1000:41f8 (1000_41F5 / 0x141F5)
    if(ZeroFlag) {
      goto label_1000_41F8_141F8;
    }
    // XCHG AX,CX (1000_41F7 / 0x141F7)
    ushort tmp_1000_41F7 = AX;
    AX = CX;
    CX = tmp_1000_41F7;
    label_1000_41F8_141F8:
    // CALL 0x1000:b56c (1000_41F8 / 0x141F8)
    NearCall(cs1, 0x41FB, unknown_1000_B56C_1B56C);
    // MOV CX,0x8 (1000_41FB / 0x141FB)
    CX = 0x8;
    label_1000_41FE_141FE:
    // LODSB SI (1000_41FE / 0x141FE)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // TEST AL,0x40 (1000_41FF / 0x141FF)
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:420a (1000_4201 / 0x14201)
    if(!ZeroFlag) {
      goto label_1000_420A_1420A;
    }
    label_1000_4203_14203:
    // ADD SI,0x2 (1000_4203 / 0x14203)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // LOOP 0x1000:41fe (1000_4206 / 0x14206)
    if(--CX != 0) {
      goto label_1000_41FE_141FE;
    }
    // CLC  (1000_4208 / 0x14208)
    CarryFlag = false;
    // RET  (1000_4209 / 0x14209)
    return NearRet();
    label_1000_420A_1420A:
    // MOV DI,word ptr [SI] (1000_420A / 0x1420A)
    DI = UInt16[DS, SI];
    // PUSH CX (1000_420C / 0x1420C)
    Stack.Push(CX);
    // PUSH SI (1000_420D / 0x1420D)
    Stack.Push(SI);
    // CALL 0x1000:409a (1000_420E / 0x1420E)
    NearCall(cs1, 0x4211, unknown_1000_409A_1409A);
    // JNZ 0x1000:4257 (1000_4211 / 0x14211)
    if(!ZeroFlag) {
      goto label_1000_4257_14257;
    }
    // TEST byte ptr [SI + 0xa],0x80 (1000_4213 / 0x14213)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x80);
    // JZ 0x1000:4221 (1000_4217 / 0x14217)
    if(ZeroFlag) {
      goto label_1000_4221_14221;
    }
    // MOV AL,[0x2a] (1000_4219 / 0x14219)
    AL = UInt8[DS, 0x2A];
    // CMP AL,byte ptr [SI + 0xb] (1000_421C / 0x1421C)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xB)]);
    // JC 0x1000:4257 (1000_421F / 0x1421F)
    if(CarryFlag) {
      goto label_1000_4257_14257;
    }
    label_1000_4221_14221:
    // MOV DI,SI (1000_4221 / 0x14221)
    DI = SI;
    // CALL 0x1000:5124 (1000_4223 / 0x14223)
    NearCall(cs1, 0x4226, unknown_1000_5124_15124);
    // JC 0x1000:4257 (1000_4226 / 0x14226)
    if(CarryFlag) {
      goto label_1000_4257_14257;
    }
    // SUB AL,byte ptr [0x11c7] (1000_4228 / 0x14228)
    // AL -= UInt8[DS, 0x11C7];
    AL = Alu.Sub8(AL, UInt8[DS, 0x11C7]);
    // ADD AL,0x20 (1000_422C / 0x1422C)
    // AL += 0x20;
    AL = Alu.Add8(AL, 0x20);
    // CMP AL,0x40 (1000_422E / 0x1422E)
    Alu.Sub8(AL, 0x40);
    // JNC 0x1000:4257 (1000_4230 / 0x14230)
    if(!CarryFlag) {
      goto label_1000_4257_14257;
    }
    // SUB AL,0x20 (1000_4232 / 0x14232)
    // AL -= 0x20;
    AL = Alu.Sub8(AL, 0x20);
    // CBW  (1000_4234 / 0x14234)
    AX = (ushort)((short)((sbyte)AL));
    // SHL AX,1 (1000_4235 / 0x14235)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_4237 / 0x14237)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_4239 / 0x14239)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_423B / 0x1423B)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_423D / 0x1423D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV [0x1968],AX (1000_423F / 0x1423F)
    UInt16[DS, 0x1968] = AX;
    // XOR AX,AX (1000_4242 / 0x14242)
    AX = 0;
    // CALL 0x1000:5e4f (1000_4244 / 0x14244)
    NearCall(cs1, 0x4247, calc_SAL_index_ida_1000_5E4F_15E4F);
    // MOV BX,0x196d (1000_4247 / 0x14247)
    BX = 0x196D;
    // XLAT BX (1000_424A / 0x1424A)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // MOV [0x196a],AX (1000_424B / 0x1424B)
    UInt16[DS, 0x196A] = AX;
    // POP SI (1000_424E / 0x1424E)
    SI = Stack.Pop();
    // POP CX (1000_424F / 0x1424F)
    CX = Stack.Pop();
    // MOV byte ptr [0x196c],0x6 (1000_4250 / 0x14250)
    UInt8[DS, 0x196C] = 0x6;
    // STC  (1000_4255 / 0x14255)
    CarryFlag = true;
    // RET  (1000_4256 / 0x14256)
    return NearRet();
    label_1000_4257_14257:
    // POP SI (1000_4257 / 0x14257)
    SI = Stack.Pop();
    // POP CX (1000_4258 / 0x14258)
    CX = Stack.Pop();
    // JMP 0x1000:4203 (1000_4259 / 0x14259)
    goto label_1000_4203_14203;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_425B_1425B(0);
  }
  
  public Action unknown_1000_425B_1425B(int gotoTarget) {
    label_1000_425B_1425B:
    // TEST byte ptr [DI + 0xa],0x80 (1000_425B / 0x1425B)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x80);
    // JZ 0x1000:4284 (1000_425F / 0x1425F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4284 / 0x14284)
      return NearRet();
    }
    // AND byte ptr [DI + 0xa],0x7f (1000_4261 / 0x14261)
    // UInt8[DS, (ushort)(DI + 0xA)] &= 0x7F;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x7F);
    // MOV byte ptr [DI + 0xb],0x0 (1000_4265 / 0x14265)
    UInt8[DS, (ushort)(DI + 0xB)] = 0x0;
    // CMP byte ptr [DI + 0x8],0x20 (1000_4269 / 0x14269)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x20);
    // JNC 0x1000:4284 (1000_426D / 0x1426D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_4284 / 0x14284)
      return NearRet();
    }
    // INC byte ptr [0x27] (1000_426F / 0x1426F)
    UInt8[DS, 0x27] = Alu.Inc8(UInt8[DS, 0x27]);
    // CMP word ptr [DI],0x603 (1000_4273 / 0x14273)
    Alu.Sub16(UInt16[DS, DI], 0x603);
    // JNZ 0x1000:4284 (1000_4277 / 0x14277)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4284 / 0x14284)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_4279 / 0x14279)
    NearCall(cs1, 0x427C, PushAll_1000_E270_1E270);
    // MOV AL,0x10 (1000_427C / 0x1427C)
    AL = 0x10;
    // CALL 0x1000:121f (1000_427E / 0x1427E)
    NearCall(cs1, 0x4281, unknown_1000_121F_1121F);
    // CALL 0x1000:e283 (1000_4281 / 0x14281)
    NearCall(cs1, 0x4284, PopAll_1000_E283_1E283);
    label_1000_4284_14284:
    // RET  (1000_4284 / 0x14284)
    return NearRet();
  }
  
  public Action unknown_1000_439F_1439F(int gotoTarget) {
    label_1000_439F_1439F:
    // CALL 0x1000:c07c (1000_439F / 0x1439F)
    NearCall(cs1, 0x43A2, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CMP byte ptr [0x473e],0x0 (1000_43A2 / 0x143A2)
    Alu.Sub8(UInt8[DS, 0x473E], 0x0);
    // JNZ 0x1000:43cc (1000_43A7 / 0x143A7)
    if(!ZeroFlag) {
      goto label_1000_43CC_143CC;
    }
    // MOV AX,0x24 (1000_43A9 / 0x143A9)
    AX = 0x24;
    // CALL 0x1000:c13e (1000_43AC / 0x143AC)
    NearCall(cs1, 0x43AF, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:c49a (1000_43AF / 0x143AF)
    NearCall(cs1, 0x43B2, gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A);
    // CALL 0x1000:c412 (1000_43B2 / 0x143B2)
    NearCall(cs1, 0x43B5, unknown_1000_C412_1C412);
    // CALLF [0x3935] (1000_43B5 / 0x143B5)
    // Indirect call to [0x3935], generating possible targets from emulator records
    uint targetAddress_1000_43B5 = (uint)(UInt16[DS, 0x3937] * 0x10 + UInt16[DS, 0x3935] - cs1 * 0x10);
    switch(targetAddress_1000_43B5) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_43B5);
        break;
    }
    // CALL 0x1000:5b69 (1000_43B9 / 0x143B9)
    NearCall(cs1, 0x43BC, unknown_1000_5B69_15B69);
    // MOV SI,0x14a4 (1000_43BC / 0x143BC)
    SI = 0x14A4;
    // MOV AL,0xf5 (1000_43BF / 0x143BF)
    AL = 0xF5;
    // MOV ES,word ptr [0xdbda] (1000_43C1 / 0x143C1)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38dd] (1000_43C5 / 0x143C5)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_43C5 = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_43C5) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_43C5);
        break;
    }
    // JMP 0x1000:c4dd (1000_43C9 / 0x143C9)
    // Jump converted to entry function call
    return unknown_1000_C4DD_1C4DD(0);
    label_1000_43CC_143CC:
    // CMP byte ptr [0x2b],0x0 (1000_43CC / 0x143CC)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:43d6 (1000_43D1 / 0x143D1)
    if(!ZeroFlag) {
      goto label_1000_43D6_143D6;
    }
    // CALL 0x1000:38b4 (1000_43D3 / 0x143D3)
    NearCall(cs1, 0x43D6, unknown_1000_38B4_138B4);
    label_1000_43D6_143D6:
    // MOV AX,0x24 (1000_43D6 / 0x143D6)
    AX = 0x24;
    // CALL 0x1000:c13e (1000_43D9 / 0x143D9)
    NearCall(cs1, 0x43DC, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x14b4 (1000_43DC / 0x143DC)
    SI = 0x14B4;
    // CALL 0x1000:c21b (1000_43DF / 0x143DF)
    NearCall(cs1, 0x43E2, unknown_1000_C21B_1C21B);
    // RET  (1000_43E2 / 0x143E2)
    return NearRet();
  }
  
  public Action unknown_1000_43E3_143E3(int gotoTarget) {
    label_1000_43E3_143E3:
    // CMP byte ptr [0x473e],0x0 (1000_43E3 / 0x143E3)
    Alu.Sub8(UInt8[DS, 0x473E], 0x0);
    // JNZ 0x1000:43fc (1000_43E8 / 0x143E8)
    if(!ZeroFlag) {
      goto label_1000_43FC_143FC;
    }
    // CMP word ptr [0xdbea],0x0 (1000_43EA / 0x143EA)
    Alu.Sub16(UInt16[DS, 0xDBEA], 0x0);
    // JNZ 0x1000:440f (1000_43EF / 0x143EF)
    if(!ZeroFlag) {
      goto label_1000_440F_1440F;
    }
    // MOV SI,0x14ac (1000_43F1 / 0x143F1)
    SI = 0x14AC;
    // PUSH SI (1000_43F4 / 0x143F4)
    Stack.Push(SI);
    // CALL 0x1000:c446 (1000_43F5 / 0x143F5)
    NearCall(cs1, 0x43F8, unknown_1000_C446_1C446);
    // POP SI (1000_43F8 / 0x143F8)
    SI = Stack.Pop();
    // JMP 0x1000:c4f0 (1000_43F9 / 0x143F9)
    // Jump converted to entry function call
    return rect_at_si_to_regs_ida_1000_C4F0_1C4F0(0);
    label_1000_43FC_143FC:
    // CMP byte ptr [0x6],0x80 (1000_43FC / 0x143FC)
    Alu.Sub8(UInt8[DS, 0x6], 0x80);
    // JNZ 0x1000:440f (1000_4401 / 0x14401)
    if(!ZeroFlag) {
      goto label_1000_440F_1440F;
    }
    // CALL 0x1000:388d (1000_4403 / 0x14403)
    NearCall(cs1, 0x4406, unknown_1000_388D_1388D);
    // CALL 0x1000:c43e (1000_4406 / 0x14406)
    NearCall(cs1, 0x4409, unknown_1000_C43E_1C43E);
    // CALL 0x1000:c4dd (1000_4409 / 0x14409)
    NearCall(cs1, 0x440C, unknown_1000_C4DD_1C4DD);
    // JMP 0x1000:c0f4 (1000_440C / 0x1440C)
    // Jump converted to entry function call
    return unknown_1000_C0F4_1C0F4(0);
    label_1000_440F_1440F:
    // CALL 0x1000:4abe (1000_440F / 0x1440F)
    NearCall(cs1, 0x4412, unknown_1000_4ABE_14ABE);
    // JMP 0x1000:c0f4 (1000_4412 / 0x14412)
    // Jump converted to entry function call
    return unknown_1000_C0F4_1C0F4(0);
  }
  
  public Action unknown_1000_4415_14415(int gotoTarget) {
    label_1000_4415_14415:
    // XOR AL,AL (1000_4415 / 0x14415)
    AL = 0;
    // XCHG byte ptr [0x46eb],AL (1000_4417 / 0x14417)
    byte tmp_1000_4417 = UInt8[DS, 0x46EB];
    UInt8[DS, 0x46EB] = AL;
    AL = tmp_1000_4417;
    // OR AL,AL (1000_441B / 0x1441B)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:4420 (1000_441D / 0x1441D)
    if(!ZeroFlag) {
      goto label_1000_4420_14420;
    }
    // RET  (1000_441F / 0x1441F)
    return NearRet();
    label_1000_4420_14420:
    // MOV word ptr [0xa5c0],0x0 (1000_4420 / 0x14420)
    UInt16[DS, 0xA5C0] = 0x0;
    // CALL 0x1000:daa3 (1000_4426 / 0x14426)
    NearCall(cs1, 0x4429, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3);
    // MOV SI,0x44ab (1000_4429 / 0x14429)
    SI = 0x44AB;
    // CALL 0x1000:da5f (1000_442C / 0x1442C)
    NearCall(cs1, 0x442F, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:469b (1000_442F / 0x1442F)
    NearCall(cs1, 0x4432, unknown_1000_469B_1469B);
    // CALL 0x1000:5ba0 (1000_4432 / 0x14432)
    NearCall(cs1, 0x4435, MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0);
    // CALL 0x1000:43e3 (1000_4435 / 0x14435)
    NearCall(cs1, 0x4438, unknown_1000_43E3_143E3);
    // CALL 0x1000:c0f4 (1000_4438 / 0x14438)
    NearCall(cs1, 0x443B, unknown_1000_C0F4_1C0F4);
    // CMP word ptr [0x11c5],0x0 (1000_443B / 0x1443B)
    Alu.Sub16(UInt16[DS, 0x11C5], 0x0);
    // JNZ 0x1000:4447 (1000_4440 / 0x14440)
    if(!ZeroFlag) {
      goto label_1000_4447_14447;
    }
    // MOV byte ptr [0x11c9],0x0 (1000_4442 / 0x14442)
    UInt8[DS, 0x11C9] = 0x0;
    label_1000_4447_14447:
    // CALL 0x1000:d95b (1000_4447 / 0x14447)
    NearCall(cs1, 0x444A, SetMapClickHandlerAddressToInGame_1000_D95B_1D95B);
    // CALL 0x1000:d717 (1000_444A / 0x1444A)
    NearCall(cs1, 0x444D, unknown_1000_D717_1D717);
    // CALL 0x1000:2ffb (1000_444D / 0x1444D)
    NearCall(cs1, 0x4450, unknown_1000_2FFB_12FFB);
    // CMP byte ptr [0x4728],0x0 (1000_4450 / 0x14450)
    Alu.Sub8(UInt8[DS, 0x4728], 0x0);
    // JLE 0x1000:445a (1000_4455 / 0x14455)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is JMP, inlining.
      // JMP 0x1000:4ac4 (1000_445A / 0x1445A)
      // Jump converted to entry function call
      return SetUnknown11CATo0_1000_4AC4_14AC4(0);
    }
    // CALL 0x1000:49d4 (1000_4457 / 0x14457)
    throw FailAsUntested("Could not find a valid function at address 1000_49D4 / 0x149D4");
    label_1000_445A_1445A:
    // JMP 0x1000:4ac4 (1000_445A / 0x1445A)
    // Jump converted to entry function call
    return SetUnknown11CATo0_1000_4AC4_14AC4(0);
  }
  
  public Action unknown_1000_445D_1445D(int gotoTarget) {
    label_1000_445D_1445D:
    // MOV SI,0x44ab (1000_445D / 0x1445D)
    SI = 0x44AB;
    // CALL 0x1000:da5f (1000_4460 / 0x14460)
    NearCall(cs1, 0x4463, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:407e (1000_4463 / 0x14463)
    NearCall(cs1, 0x4466, unknown_1000_407E_1407E);
    // CALL 0x1000:62d6 (1000_4466 / 0x14466)
    NearCall(cs1, 0x4469, unknown_1000_62D6_162D6);
    // JNC 0x1000:4472 (1000_4469 / 0x14469)
    if(!CarryFlag) {
      goto label_1000_4472_14472;
    }
    // MOV word ptr [0x4749],0x0 (1000_446B / 0x1446B)
    UInt16[DS, 0x4749] = 0x0;
    // RET  (1000_4471 / 0x14471)
    return NearRet();
    label_1000_4472_14472:
    // CALL 0x1000:c137 (1000_4472 / 0x14472)
    NearCall(cs1, 0x4475, load_icons_sprites_ida_1000_C137_1C137);
    // MOV AX,0x4c (1000_4475 / 0x14475)
    AX = 0x4C;
    // CALL 0x1000:c1f4 (1000_4478 / 0x14478)
    NearCall(cs1, 0x447B, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // LODSW ES:SI (1000_447B / 0x1447B)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AH,0xf (1000_447D / 0x1447D)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // MOV BP,AX (1000_4480 / 0x14480)
    BP = AX;
    // LODSW ES:SI (1000_4482 / 0x14482)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_4484 / 0x14484)
    AH = 0;
    // SUB BX,AX (1000_4486 / 0x14486)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // SUB DX,0xd (1000_4488 / 0x14488)
    // DX -= 0xD;
    DX = Alu.Sub16(DX, 0xD);
    // ADD BP,DX (1000_448B / 0x1448B)
    // BP += DX;
    BP = Alu.Add16(BP, DX);
    // ADD AX,BX (1000_448D / 0x1448D)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // MOV DI,0x4749 (1000_448F / 0x1448F)
    DI = 0x4749;
    // MOV word ptr [DI],DX (1000_4492 / 0x14492)
    UInt16[DS, DI] = DX;
    // MOV word ptr [DI + 0x2],BX (1000_4494 / 0x14494)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // MOV word ptr [DI + 0x4],BP (1000_4497 / 0x14497)
    UInt16[DS, (ushort)(DI + 0x4)] = BP;
    // MOV word ptr [DI + 0x6],AX (1000_449A / 0x1449A)
    UInt16[DS, (ushort)(DI + 0x6)] = AX;
    // MOV SI,0x44ab (1000_449D / 0x1449D)
    SI = 0x44AB;
    // MOV BP,0x12c (1000_44A0 / 0x144A0)
    BP = 0x12C;
    // CALL 0x1000:da25 (1000_44A3 / 0x144A3)
    NearCall(cs1, 0x44A6, unknown_1000_DA25_1DA25);
    // MOV byte ptr [0x4751],0x0 (1000_44A6 / 0x144A6)
    UInt8[DS, 0x4751] = 0x0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_44AB_144AB(0);
  }
  
  public Action unknown_1000_44AB_144AB(int gotoTarget) {
    label_1000_44AB_144AB:
    // INC byte ptr [0x4751] (1000_44AB / 0x144AB)
    UInt8[DS, 0x4751] = Alu.Inc8(UInt8[DS, 0x4751]);
    // PUSH word ptr [0xdbda] (1000_44AF / 0x144AF)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_44B3 / 0x144B3)
    NearCall(cs1, 0x44B6, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:5b93 (1000_44B6 / 0x144B6)
    NearCall(cs1, 0x44B9, unknown_1000_5B93_15B93);
    // CALL 0x1000:c137 (1000_44B9 / 0x144B9)
    NearCall(cs1, 0x44BC, load_icons_sprites_ida_1000_C137_1C137);
    // MOV SI,0x4749 (1000_44BC / 0x144BC)
    SI = 0x4749;
    // CALL 0x1000:db74 (1000_44BF / 0x144BF)
    NearCall(cs1, 0x44C2, unknown_1000_DB74_1DB74);
    // MOV DX,word ptr [SI] (1000_44C2 / 0x144C2)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_44C4 / 0x144C4)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_44C7 / 0x144C7)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_44CA / 0x144CA)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV SI,0xd834 (1000_44CD / 0x144CD)
    SI = 0xD834;
    // CMP BP,word ptr [SI + 0x4] (1000_44D0 / 0x144D0)
    Alu.Sub16(BP, UInt16[DS, (ushort)(SI + 0x4)]);
    // JC 0x1000:44d8 (1000_44D3 / 0x144D3)
    if(CarryFlag) {
      goto label_1000_44D8_144D8;
    }
    // MOV BP,word ptr [SI + 0x4] (1000_44D5 / 0x144D5)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    label_1000_44D8_144D8:
    // CMP AX,word ptr [SI + 0x6] (1000_44D8 / 0x144D8)
    Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x6)]);
    // JC 0x1000:44e0 (1000_44DB / 0x144DB)
    if(CarryFlag) {
      goto label_1000_44E0_144E0;
    }
    // MOV AX,word ptr [SI + 0x6] (1000_44DD / 0x144DD)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    label_1000_44E0_144E0:
    // CMP DX,word ptr [SI] (1000_44E0 / 0x144E0)
    Alu.Sub16(DX, UInt16[DS, SI]);
    // JNC 0x1000:44e6 (1000_44E2 / 0x144E2)
    if(!CarryFlag) {
      goto label_1000_44E6_144E6;
    }
    // MOV DX,word ptr [SI] (1000_44E4 / 0x144E4)
    DX = UInt16[DS, SI];
    label_1000_44E6_144E6:
    // CMP BX,word ptr [SI + 0x2] (1000_44E6 / 0x144E6)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JNC 0x1000:44ee (1000_44E9 / 0x144E9)
    if(!CarryFlag) {
      goto label_1000_44EE_144EE;
    }
    // MOV BX,word ptr [SI + 0x2] (1000_44EB / 0x144EB)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    label_1000_44EE_144EE:
    // CALL 0x1000:c4fb (1000_44EE / 0x144EE)
    NearCall(cs1, 0x44F1, unknown_1000_C4FB_1C4FB);
    // MOV BL,byte ptr [0x4751] (1000_44F1 / 0x144F1)
    BL = UInt8[DS, 0x4751];
    // SHR BL,1 (1000_44F5 / 0x144F5)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // JNC 0x1000:4507 (1000_44F7 / 0x144F7)
    if(!CarryFlag) {
      goto label_1000_4507_14507;
    }
    // MOV AX,0x4c (1000_44F9 / 0x144F9)
    AX = 0x4C;
    // MOV DX,word ptr [0x4749] (1000_44FC / 0x144FC)
    DX = UInt16[DS, 0x4749];
    // MOV BX,word ptr [0x474b] (1000_4500 / 0x14500)
    BX = UInt16[DS, 0x474B];
    // CALL 0x1000:c30d (1000_4504 / 0x14504)
    NearCall(cs1, 0x4507, unknown_1000_C30D_1C30D);
    label_1000_4507_14507:
    // POP word ptr [0xdbda] (1000_4507 / 0x14507)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // JMP 0x1000:db67 (1000_450B / 0x1450B)
    // Jump converted to entry function call
    return unknown_1000_DB67_1DB67(0);
  }
  
  public Action unknown_1000_450E_1450E(int gotoTarget) {
    label_1000_450E_1450E:
    // TEST byte ptr [0x11c9],0xf (1000_450E / 0x1450E)
    Alu.And8(UInt8[DS, 0x11C9], 0xF);
    // JZ 0x1000:4533 (1000_4513 / 0x14513)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4533 / 0x14533)
      return NearRet();
    }
    // PUSH BX (1000_4515 / 0x14515)
    Stack.Push(BX);
    // PUSH DX (1000_4516 / 0x14516)
    Stack.Push(DX);
    // CALL 0x1000:4586 (1000_4517 / 0x14517)
    NearCall(cs1, 0x451A, unknown_1000_4586_14586);
    // POP DX (1000_451A / 0x1451A)
    DX = Stack.Pop();
    // POP BX (1000_451B / 0x1451B)
    BX = Stack.Pop();
    // MOV DI,word ptr [0x46fc] (1000_451C / 0x1451C)
    DI = UInt16[DS, 0x46FC];
    // OR DI,DI (1000_4520 / 0x14520)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:4533 (1000_4522 / 0x14522)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4533 / 0x14533)
      return NearRet();
    }
    // JS 0x1000:4534 (1000_4524 / 0x14524)
    if(SignFlag) {
      goto label_1000_4534_14534;
    }
    // TEST byte ptr [0x11c9],0x3 (1000_4526 / 0x14526)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JNZ 0x1000:4534 (1000_452B / 0x1452B)
    if(!ZeroFlag) {
      goto label_1000_4534_14534;
    }
    // CMP DI,word ptr [0x114e] (1000_452D / 0x1452D)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JNZ 0x1000:4534 (1000_4531 / 0x14531)
    if(!ZeroFlag) {
      goto label_1000_4534_14534;
    }
    label_1000_4533_14533:
    // RET  (1000_4533 / 0x14533)
    return NearRet();
    label_1000_4534_14534:
    // PUSH BX (1000_4534 / 0x14534)
    Stack.Push(BX);
    // PUSH DX (1000_4535 / 0x14535)
    Stack.Push(DX);
    // PUSH DI (1000_4536 / 0x14536)
    Stack.Push(DI);
    // CALL 0x1000:456c (1000_4537 / 0x14537)
    NearCall(cs1, 0x453A, unknown_1000_456C_1456C);
    // CALL 0x1000:ab45 (1000_453A / 0x1453A)
    NearCall(cs1, 0x453D, unknown_1000_AB45_1AB45);
    // POP DI (1000_453D / 0x1453D)
    DI = Stack.Pop();
    // MOV CX,0x9 (1000_453E / 0x1453E)
    CX = 0x9;
    label_1000_4541_14541:
    // PUSH CX (1000_4541 / 0x14541)
    Stack.Push(CX);
    // PUSH DI (1000_4542 / 0x14542)
    Stack.Push(DI);
    // MOV AX,0x14 (1000_4543 / 0x14543)
    AX = 0x14;
    // CALL 0x1000:e3a0 (1000_4546 / 0x14546)
    NearCall(cs1, 0x4549, unknown_1000_E3A0_1E3A0);
    // PUSH DI (1000_4549 / 0x14549)
    Stack.Push(DI);
    // XOR DI,DI (1000_454A / 0x1454A)
    DI = 0;
    // CALL 0x1000:45de (1000_454C / 0x1454C)
    NearCall(cs1, 0x454F, unknown_1000_45DE_145DE);
    // POP DI (1000_454F / 0x1454F)
    DI = Stack.Pop();
    // MOV AX,0xa (1000_4550 / 0x14550)
    AX = 0xA;
    // CALL 0x1000:e3a0 (1000_4553 / 0x14553)
    NearCall(cs1, 0x4556, unknown_1000_E3A0_1E3A0);
    // CALL 0x1000:45de (1000_4556 / 0x14556)
    NearCall(cs1, 0x4559, unknown_1000_45DE_145DE);
    // POP DI (1000_4559 / 0x14559)
    DI = Stack.Pop();
    // POP CX (1000_455A / 0x1455A)
    CX = Stack.Pop();
    // LOOP 0x1000:4541 (1000_455B / 0x1455B)
    if(--CX != 0) {
      goto label_1000_4541_14541;
    }
    // PUSH DI (1000_455D / 0x1455D)
    Stack.Push(DI);
    // CALL 0x1000:aba9 (1000_455E / 0x1455E)
    NearCall(cs1, 0x4561, unknown_1000_ABA9_1ABA9);
    // POP DI (1000_4561 / 0x14561)
    DI = Stack.Pop();
    // POP DX (1000_4562 / 0x14562)
    DX = Stack.Pop();
    // POP BX (1000_4563 / 0x14563)
    BX = Stack.Pop();
    // MOV byte ptr [0x4732],0x80 (1000_4564 / 0x14564)
    UInt8[DS, 0x4732] = 0x80;
    // JMP 0x1000:4703 (1000_4569 / 0x14569)
    goto label_1000_4703_14703;
    label_1000_4703_14703:
    // CALL 0x1000:4944 (1000_4703 / 0x14703)
    NearCall(cs1, 0x4706, unknown_1000_4944_14944);
    // CALL 0x1000:38e1 (1000_4706 / 0x14706)
    NearCall(cs1, 0x4709, unknown_1000_38E1_138E1);
    // MOV AL,[0x11c9] (1000_4709 / 0x14709)
    AL = UInt8[DS, 0x11C9];
    // PUSH AX (1000_470C / 0x1470C)
    Stack.Push(AX);
    // SHR AL,1 (1000_470D / 0x1470D)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_470F / 0x1470F)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // OR byte ptr [0x11c9],AL (1000_4711 / 0x14711)
    // UInt8[DS, 0x11C9] |= AL;
    UInt8[DS, 0x11C9] = Alu.Or8(UInt8[DS, 0x11C9], AL);
    // CALL 0x1000:ad5e (1000_4715 / 0x14715)
    NearCall(cs1, 0x4718, unknown_1000_AD5E_1AD5E);
    // CMP byte ptr [0x2b],0x0 (1000_4718 / 0x14718)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:4727 (1000_471D / 0x1471D)
    if(ZeroFlag) {
      goto label_1000_4727_14727;
    }
    // MOV byte ptr [0x2b],0x0 (1000_471F / 0x1471F)
    UInt8[DS, 0x2B] = 0x0;
    // CALL 0x1000:0b21 (1000_4724 / 0x14724)
    NearCall(cs1, 0x4727, unknown_1000_0B21_10B21);
    label_1000_4727_14727:
    // CALL 0x1000:d2ea (1000_4727 / 0x14727)
    NearCall(cs1, 0x472A, unknown_1000_D2EA_1D2EA);
    // CALL 0x1000:4d00 (1000_472A / 0x1472A)
    NearCall(cs1, 0x472D, unknown_1000_4D00_14D00);
    // POP AX (1000_472D / 0x1472D)
    AX = Stack.Pop();
    // TEST AL,0x3 (1000_472E / 0x1472E)
    Alu.And8(AL, 0x3);
    // JNZ 0x1000:478f (1000_4730 / 0x14730)
    if(!ZeroFlag) {
      goto label_1000_478F_1478F;
    }
    // MOV word ptr [0x472b],0x0 (1000_4732 / 0x14732)
    UInt16[DS, 0x472B] = 0x0;
    // PUSH AX (1000_4738 / 0x14738)
    Stack.Push(AX);
    // CALL 0x1000:41c5 (1000_4739 / 0x14739)
    NearCall(cs1, 0x473C, unknown_1000_41C5_141C5);
    // MOV AL,[0x11c9] (1000_473C / 0x1473C)
    AL = UInt8[DS, 0x11C9];
    // AND AL,0x3 (1000_473F / 0x1473F)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // DEC AL (1000_4741 / 0x14741)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:4748 (1000_4743 / 0x14743)
    if(!ZeroFlag) {
      goto label_1000_4748_14748;
    }
    // CALL 0x1000:181e (1000_4745 / 0x14745)
    NearCall(cs1, 0x4748, unknown_1000_181E_1181E);
    label_1000_4748_14748:
    // CALL 0x1000:c474 (1000_4748 / 0x14748)
    NearCall(cs1, 0x474B, unknown_1000_C474_1C474);
    // CALL 0x1000:40d5 (1000_474B / 0x1474B)
    NearCall(cs1, 0x474E, unknown_1000_40D5_140D5);
    // POP AX (1000_474E / 0x1474E)
    AX = Stack.Pop();
    // MOV BL,byte ptr [0x11c7] (1000_474F / 0x1474F)
    BL = UInt8[DS, 0x11C7];
    // PUSH BX (1000_4753 / 0x14753)
    Stack.Push(BX);
    // CALL 0x1000:4795 (1000_4754 / 0x14754)
    NearCall(cs1, 0x4757, unknown_1000_4795_14795);
    // POP AX (1000_4757 / 0x14757)
    AX = Stack.Pop();
    // MOV [0x11c7],AL (1000_4758 / 0x14758)
    UInt8[DS, 0x11C7] = AL;
    // MOV byte ptr [0x8],0xff (1000_475B / 0x1475B)
    UInt8[DS, 0x8] = 0xFF;
    // CALL 0x1000:4b3b (1000_4760 / 0x14760)
    NearCall(cs1, 0x4763, unknown_1000_4B3B_14B3B);
    // MOV word ptr [0x114e],0x0 (1000_4763 / 0x14763)
    UInt16[DS, 0x114E] = 0x0;
    // MOV word ptr [0x4729],0x0 (1000_4769 / 0x14769)
    UInt16[DS, 0x4729] = 0x0;
    // CMP byte ptr [0x46eb],0x0 (1000_476F / 0x1476F)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JS 0x1000:4779 (1000_4774 / 0x14774)
    if(SignFlag) {
      goto label_1000_4779_14779;
    }
    // CALL 0x1000:2dbf (1000_4776 / 0x14776)
    NearCall(cs1, 0x4779, unknown_1000_2DBF_12DBF);
    label_1000_4779_14779:
    // CALL 0x1000:4ab8 (1000_4779 / 0x14779)
    NearCall(cs1, 0x477C, unknown_1000_4AB8_14AB8);
    // MOV AL,[0x11c9] (1000_477C / 0x1477C)
    AL = UInt8[DS, 0x11C9];
    // AND AL,0x3 (1000_477F / 0x1477F)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // DEC AL (1000_4781 / 0x14781)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:478f (1000_4783 / 0x14783)
    if(!ZeroFlag) {
      goto label_1000_478F_1478F;
    }
    // MOV DI,word ptr [0x1150] (1000_4785 / 0x14785)
    DI = UInt16[DS, 0x1150];
    // DEC byte ptr [DI + 0x15] (1000_4789 / 0x14789)
    UInt8[DS, (ushort)(DI + 0x15)] = Alu.Dec8(UInt8[DS, (ushort)(DI + 0x15)]);
    // JMP 0x1000:ac14 (1000_478C / 0x1478C)
    // Jump converted to entry function call
    return pcm_stop_voc_q_ida_1000_AC14_1AC14(0);
    label_1000_478F_1478F:
    // CALL 0x1000:2eb2 (1000_478F / 0x1478F)
    NearCall(cs1, 0x4792, unknown_1000_2EB2_12EB2);
    // JMP 0x1000:c0f4 (1000_4792 / 0x14792)
    // Jump converted to entry function call
    return unknown_1000_C0F4_1C0F4(0);
  }
  
  public Action unknown_1000_456C_1456C(int gotoTarget) {
    label_1000_456C_1456C:
    // MOV AX,DI (1000_456C / 0x1456C)
    AX = DI;
    // CMP AH,0xff (1000_456E / 0x1456E)
    Alu.Sub8(AH, 0xFF);
    // JZ 0x1000:4582 (1000_4571 / 0x14571)
    if(ZeroFlag) {
      goto label_1000_4582_14582;
    }
    // MOV AX,word ptr [DI] (1000_4573 / 0x14573)
    AX = UInt16[DS, DI];
    // DEC AX (1000_4575 / 0x14575)
    AX = Alu.Dec16(AX);
    // SHL AL,1 (1000_4576 / 0x14576)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_4578 / 0x14578)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_457A / 0x1457A)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_457C / 0x1457C)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // OR AL,AH (1000_457E / 0x1457E)
    // AL |= AH;
    AL = Alu.Or8(AL, AH);
    // XOR AH,AH (1000_4580 / 0x14580)
    AH = 0;
    label_1000_4582_14582:
    // ADD AX,0x2bc (1000_4582 / 0x14582)
    // AX += 0x2BC;
    AX = Alu.Add16(AX, 0x2BC);
    // RET  (1000_4585 / 0x14585)
    return NearRet();
  }
  
  public Action unknown_1000_4586_14586(int gotoTarget) {
    label_1000_4586_14586:
    // CALL 0x1000:5d1d (1000_4586 / 0x14586)
    NearCall(cs1, 0x4589, unknown_1000_5D1D_15D1D);
    // MOV DI,0x0 (1000_4589 / 0x14589)
    DI = 0x0;
    // JNC 0x1000:45d3 (1000_458C / 0x1458C)
    if(!CarryFlag) {
      goto label_1000_45D3_145D3;
    }
    // MOV AL,0xff (1000_458E / 0x1458E)
    AL = 0xFF;
    // CALL 0x1000:5e6d (1000_4590 / 0x14590)
    NearCall(cs1, 0x4593, unknown_1000_5E6D_15E6D);
    // CMP AX,0x9 (1000_4593 / 0x14593)
    Alu.Sub16(AX, 0x9);
    // JC 0x1000:45d3 (1000_4596 / 0x14596)
    if(CarryFlag) {
      goto label_1000_45D3_145D3;
    }
    // MOV DI,0xffff (1000_4598 / 0x14598)
    DI = 0xFFFF;
    // MOV DX,word ptr [0x4749] (1000_459B / 0x1459B)
    DX = UInt16[DS, 0x4749];
    // OR DX,DX (1000_459F / 0x1459F)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:45d3 (1000_45A1 / 0x145A1)
    if(ZeroFlag) {
      goto label_1000_45D3_145D3;
    }
    // ADD DX,0xb (1000_45A3 / 0x145A3)
    // DX += 0xB;
    DX = Alu.Add16(DX, 0xB);
    // SUB DX,word ptr [0xdc36] (1000_45A6 / 0x145A6)
    // DX -= UInt16[DS, 0xDC36];
    DX = Alu.Sub16(DX, UInt16[DS, 0xDC36]);
    // NEG DX (1000_45AA / 0x145AA)
    DX = Alu.Sub16(0, DX);
    // MOV BX,word ptr [0xdc38] (1000_45AC / 0x145AC)
    BX = UInt16[DS, 0xDC38];
    // SUB BX,word ptr [0x474f] (1000_45B0 / 0x145B0)
    // BX -= UInt16[DS, 0x474F];
    BX = Alu.Sub16(BX, UInt16[DS, 0x474F]);
    // CALL 0x1000:514e (1000_45B4 / 0x145B4)
    NearCall(cs1, 0x45B7, unknown_1000_514E_1514E);
    // ADD AL,0x3 (1000_45B7 / 0x145B7)
    // AL += 0x3;
    AL = Alu.Add8(AL, 0x3);
    // MOV AH,AL (1000_45B9 / 0x145B9)
    AH = AL;
    // AND AH,0x1f (1000_45BB / 0x145BB)
    // AH &= 0x1F;
    AH = Alu.And8(AH, 0x1F);
    // CMP AH,0x6 (1000_45BE / 0x145BE)
    Alu.Sub8(AH, 0x6);
    // MOV DI,0xffff (1000_45C1 / 0x145C1)
    DI = 0xFFFF;
    // JNC 0x1000:45d3 (1000_45C4 / 0x145C4)
    if(!CarryFlag) {
      goto label_1000_45D3_145D3;
    }
    // ROL AL,1 (1000_45C6 / 0x145C6)
    AL = Alu.Rol8(AL, 1);
    // ROL AL,1 (1000_45C8 / 0x145C8)
    AL = Alu.Rol8(AL, 1);
    // ROL AL,1 (1000_45CA / 0x145CA)
    AL = Alu.Rol8(AL, 1);
    // AND AL,0x7 (1000_45CC / 0x145CC)
    // AL &= 0x7;
    AL = Alu.And8(AL, 0x7);
    // OR AX,0xfff0 (1000_45CE / 0x145CE)
    // AX |= 0xFFF0;
    AX = Alu.Or16(AX, 0xFFF0);
    // MOV DI,AX (1000_45D1 / 0x145D1)
    DI = AX;
    label_1000_45D3_145D3:
    // MOV AX,DI (1000_45D3 / 0x145D3)
    AX = DI;
    // XCHG word ptr [0x46fc],AX (1000_45D5 / 0x145D5)
    ushort tmp_1000_45D5 = UInt16[DS, 0x46FC];
    UInt16[DS, 0x46FC] = AX;
    AX = tmp_1000_45D5;
    // CMP AX,DI (1000_45D9 / 0x145D9)
    Alu.Sub16(AX, DI);
    // JNZ 0x1000:45de (1000_45DB / 0x145DB)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_45DE_145DE(0);
    }
    // RET  (1000_45DD / 0x145DD)
    return NearRet();
  }
  
  public Action unknown_1000_45DE_145DE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x45DE: goto label_1000_45DE_145DE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_45DE_145DE:
    // PUSH word ptr [0xdbda] (1000_45DE / 0x145DE)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_45E2 / 0x145E2)
    NearCall(cs1, 0x45E5, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:dbb2 (1000_45E5 / 0x145E5)
    NearCall(cs1, 0x45E8, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:d075 (1000_45E8 / 0x145E8)
    NearCall(cs1, 0x45EB, SetFontToMenu_1000_D075_1D075);
    // MOV DX,0x55 (1000_45EB / 0x145EB)
    DX = 0x55;
    // MOV BX,0x22 (1000_45EE / 0x145EE)
    BX = 0x22;
    // MOV CX,0xf5fe (1000_45F1 / 0x145F1)
    CX = 0xF5FE;
    // CMP byte ptr [0x473e],0x0 (1000_45F4 / 0x145F4)
    Alu.Sub8(UInt8[DS, 0x473E], 0x0);
    // JZ 0x1000:4600 (1000_45F9 / 0x145F9)
    if(ZeroFlag) {
      goto label_1000_4600_14600;
    }
    // ADD BX,0x4 (1000_45FB / 0x145FB)
    // BX += 0x4;
    BX = Alu.Add16(BX, 0x4);
    // MOV CH,0x20 (1000_45FE / 0x145FE)
    CH = 0x20;
    label_1000_4600_14600:
    // OR DI,DI (1000_4600 / 0x14600)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:462a (1000_4602 / 0x14602)
    if(ZeroFlag) {
      goto label_1000_462A_1462A;
    }
    // CALL 0x1000:469b (1000_4604 / 0x14604)
    NearCall(cs1, 0x4607, unknown_1000_469B_1469B);
    // CMP DI,-0x10 (1000_4607 / 0x14607)
    Alu.Sub16(DI, 0xFFF0);
    // JC 0x1000:4636 (1000_460A / 0x1460A)
    if(CarryFlag) {
      goto label_1000_4636_14636;
    }
    // MOV AX,0xa4 (1000_460C / 0x1460C)
    AX = 0xA4;
    // CALL 0x1000:d194 (1000_460F / 0x1460F)
    NearCall(cs1, 0x4612, unknown_1000_D194_1D194);
    // SUB DI,-0x10 (1000_4612 / 0x14612)
    // DI -= 0xFFF0;
    DI = Alu.Sub16(DI, 0xFFF0);
    // CMP DI,0x8 (1000_4615 / 0x14615)
    Alu.Sub16(DI, 0x8);
    // JNC 0x1000:4641 (1000_4618 / 0x14618)
    if(!CarryFlag) {
      goto label_1000_4641_14641;
    }
    // MOV AL,0x20 (1000_461A / 0x1461A)
    AL = 0x20;
    // CALL word ptr [0x2518] (1000_461C / 0x1461C)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_461C = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_461C) {
      case 0xD12F : NearCall(cs1, 0x4620, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_461C);
        break;
    }
    // MOV AX,DI (1000_4620 / 0x14620)
    AX = DI;
    // ADD AX,0xda (1000_4622 / 0x14622)
    // AX += 0xDA;
    AX = Alu.Add16(AX, 0xDA);
    // CALL 0x1000:d19b (1000_4625 / 0x14625)
    NearCall(cs1, 0x4628, unknown_1000_D19B_1D19B);
    // JMP 0x1000:4641 (1000_4628 / 0x14628)
    goto label_1000_4641_14641;
    label_1000_462A_1462A:
    // CALL 0x1000:4658 (1000_462A / 0x1462A)
    NearCall(cs1, 0x462D, unknown_1000_4658_14658);
    // MOV word ptr [0xdbe4],CX (1000_462D / 0x1462D)
    UInt16[DS, 0xDBE4] = CX;
    // CALL 0x1000:d04e (1000_4631 / 0x14631)
    NearCall(cs1, 0x4634, unknown_1000_D04E_1D04E);
    // JMP 0x1000:4641 (1000_4634 / 0x14634)
    goto label_1000_4641_14641;
    label_1000_4636_14636:
    // PUSH CX (1000_4636 / 0x14636)
    Stack.Push(CX);
    // CALL 0x1000:629d (1000_4637 / 0x14637)
    NearCall(cs1, 0x463A, unknown_1000_629D_1629D);
    // CALL 0x1000:d05f (1000_463A / 0x1463A)
    NearCall(cs1, 0x463D, GetCharacterCoordsXY_1000_D05F_1D05F);
    // POP CX (1000_463D / 0x1463D)
    CX = Stack.Pop();
    // CALL 0x1000:62a6 (1000_463E / 0x1463E)
    NearCall(cs1, 0x4641, unknown_1000_62A6_162A6);
    label_1000_4641_14641:
    // CMP word ptr [0xd82c],0xed (1000_4641 / 0x14641)
    Alu.Sub16(UInt16[DS, 0xD82C], 0xED);
    // JA 0x1000:4651 (1000_4647 / 0x14647)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_4651_14651;
    }
    // MOV AL,0x20 (1000_4649 / 0x14649)
    AL = 0x20;
    // CALL word ptr [0x2518] (1000_464B / 0x1464B)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_464B = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_464B) {
      case 0xD12F : NearCall(cs1, 0x464F, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_464B);
        break;
    }
    // JMP 0x1000:4641 (1000_464F / 0x1464F)
    goto label_1000_4641_14641;
    label_1000_4651_14651:
    // POP word ptr [0xdbda] (1000_4651 / 0x14651)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // JMP 0x1000:dbec (1000_4655 / 0x14655)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
  }
  
  public Action unknown_1000_4658_14658(int gotoTarget) {
    label_1000_4658_14658:
    // CMP word ptr [0x473f],0x0 (1000_4658 / 0x14658)
    Alu.Sub16(UInt16[DS, 0x473F], 0x0);
    // JNZ 0x1000:469a (1000_465D / 0x1465D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_469A / 0x1469A)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_465F / 0x1465F)
    NearCall(cs1, 0x4662, PushAll_1000_E270_1E270);
    // MOV SI,0x57 (1000_4662 / 0x14662)
    SI = 0x57;
    // CALL 0x1000:cf70 (1000_4665 / 0x14665)
    NearCall(cs1, 0x4668, unknown_1000_CF70_1CF70);
    // MOV word ptr [0x4741],ES (1000_4668 / 0x14668)
    UInt16[DS, 0x4741] = ES;
    // MOV word ptr [0x473f],SI (1000_466C / 0x1466C)
    UInt16[DS, 0x473F] = SI;
    // MOV word ptr [0x4743],0x55 (1000_4670 / 0x14670)
    UInt16[DS, 0x4743] = 0x55;
    // MOV CX,0xf561 (1000_4676 / 0x14676)
    CX = 0xF561;
    // MOV AX,0x22 (1000_4679 / 0x14679)
    AX = 0x22;
    // CMP byte ptr [0x473e],0x0 (1000_467C / 0x1467C)
    Alu.Sub8(UInt8[DS, 0x473E], 0x0);
    // JZ 0x1000:4687 (1000_4681 / 0x14681)
    if(ZeroFlag) {
      goto label_1000_4687_14687;
    }
    // ADD AL,0x4 (1000_4683 / 0x14683)
    // AL += 0x4;
    AL = Alu.Add8(AL, 0x4);
    // MOV CH,0x20 (1000_4685 / 0x14685)
    CH = 0x20;
    label_1000_4687_14687:
    // MOV [0x4745],AX (1000_4687 / 0x14687)
    UInt16[DS, 0x4745] = AX;
    // MOV word ptr [0x4747],CX (1000_468A / 0x1468A)
    UInt16[DS, 0x4747] = CX;
    // MOV SI,0x46b5 (1000_468E / 0x1468E)
    SI = 0x46B5;
    // MOV BP,0x18 (1000_4691 / 0x14691)
    BP = 0x18;
    // CALL 0x1000:da25 (1000_4694 / 0x14694)
    NearCall(cs1, 0x4697, unknown_1000_DA25_1DA25);
    // CALL 0x1000:e283 (1000_4697 / 0x14697)
    NearCall(cs1, 0x469A, PopAll_1000_E283_1E283);
    label_1000_469A_1469A:
    // RET  (1000_469A / 0x1469A)
    return NearRet();
  }
  
  public Action unknown_1000_469B_1469B(int gotoTarget) {
    label_1000_469B_1469B:
    // CMP word ptr [0x473f],0x0 (1000_469B / 0x1469B)
    Alu.Sub16(UInt16[DS, 0x473F], 0x0);
    // JZ 0x1000:46b4 (1000_46A0 / 0x146A0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_46B4 / 0x146B4)
      return NearRet();
    }
    // MOV word ptr [0x473f],0x0 (1000_46A2 / 0x146A2)
    UInt16[DS, 0x473F] = 0x0;
    // CALL 0x1000:e270 (1000_46A8 / 0x146A8)
    NearCall(cs1, 0x46AB, PushAll_1000_E270_1E270);
    // MOV SI,0x46b5 (1000_46AB / 0x146AB)
    SI = 0x46B5;
    // CALL 0x1000:da5f (1000_46AE / 0x146AE)
    NearCall(cs1, 0x46B1, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:e283 (1000_46B1 / 0x146B1)
    NearCall(cs1, 0x46B4, PopAll_1000_E283_1E283);
    label_1000_46B4_146B4:
    // RET  (1000_46B4 / 0x146B4)
    return NearRet();
  }
  
  public Action unknown_1000_46B5_146B5(int gotoTarget) {
    label_1000_46B5_146B5:
    // LES SI,[0x473f] (1000_46B5 / 0x146B5)
    SI = UInt16[DS, 0x473F];
    ES = UInt16[DS, 0x4741];
    // MOV AL,byte ptr ES:[SI] (1000_46B9 / 0x146B9)
    AL = UInt8[ES, SI];
    // OR AL,AL (1000_46BC / 0x146BC)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:4702 (1000_46BE / 0x146BE)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_4702 / 0x14702)
      return NearRet();
    }
    // INC word ptr [0x473f] (1000_46C0 / 0x146C0)
    UInt16[DS, 0x473F] = Alu.Inc16(UInt16[DS, 0x473F]);
    // MOV SI,0x14a4 (1000_46C4 / 0x146C4)
    SI = 0x14A4;
    // CALL 0x1000:db74 (1000_46C7 / 0x146C7)
    NearCall(cs1, 0x46CA, unknown_1000_DB74_1DB74);
    // PUSH word ptr [0xdbda] (1000_46CA / 0x146CA)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_46CE / 0x146CE)
    NearCall(cs1, 0x46D1, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV DX,word ptr [0x4743] (1000_46D1 / 0x146D1)
    DX = UInt16[DS, 0x4743];
    // MOV BX,word ptr [0x4745] (1000_46D5 / 0x146D5)
    BX = UInt16[DS, 0x4745];
    // CALL 0x1000:d04e (1000_46D9 / 0x146D9)
    NearCall(cs1, 0x46DC, unknown_1000_D04E_1D04E);
    // MOV CX,word ptr [0x4747] (1000_46DC / 0x146DC)
    CX = UInt16[DS, 0x4747];
    // MOV word ptr [0xdbe4],CX (1000_46E0 / 0x146E0)
    UInt16[DS, 0xDBE4] = CX;
    // CALL 0x1000:d075 (1000_46E4 / 0x146E4)
    NearCall(cs1, 0x46E7, SetFontToMenu_1000_D075_1D075);
    // PUSH AX (1000_46E7 / 0x146E7)
    Stack.Push(AX);
    // CALL 0x1000:d12f (1000_46E8 / 0x146E8)
    NearCall(cs1, 0x46EB, unknown_1000_D12F_1D12F);
    // CALL 0x1000:d05f (1000_46EB / 0x146EB)
    NearCall(cs1, 0x46EE, GetCharacterCoordsXY_1000_D05F_1D05F);
    // MOV word ptr [0x4743],DX (1000_46EE / 0x146EE)
    UInt16[DS, 0x4743] = DX;
    // MOV word ptr [0x4745],BX (1000_46F2 / 0x146F2)
    UInt16[DS, 0x4745] = BX;
    // POP AX (1000_46F6 / 0x146F6)
    AX = Stack.Pop();
    // POP word ptr [0xdbda] (1000_46F7 / 0x146F7)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // CALL 0x1000:db67 (1000_46FB / 0x146FB)
    NearCall(cs1, 0x46FE, unknown_1000_DB67_1DB67);
    // CMP AL,0x20 (1000_46FE / 0x146FE)
    Alu.Sub8(AL, 0x20);
    // JZ 0x1000:46b5 (1000_4700 / 0x14700)
    if(ZeroFlag) {
      goto label_1000_46B5_146B5;
    }
    label_1000_4702_14702:
    // RET  (1000_4702 / 0x14702)
    return NearRet();
  }
  
  public Action unknown_1000_4795_14795(int gotoTarget) {
    label_1000_4795_14795:
    // CMP byte ptr [0x46eb],0x0 (1000_4795 / 0x14795)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JS 0x1000:47cd (1000_479A / 0x1479A)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_47CD / 0x147CD)
      return NearRet();
    }
    // CMP AL,0x4 (1000_479C / 0x1479C)
    Alu.Sub8(AL, 0x4);
    // JZ 0x1000:47ce (1000_479E / 0x1479E)
    if(ZeroFlag) {
      goto label_1000_47CE_147CE;
    }
    // CALL 0x1000:98af (1000_47A0 / 0x147A0)
    throw FailAsUntested("Could not find a valid function at address 1000_98AF / 0x198AF");
    // MOV byte ptr [0xcee8],0x0 (1000_47A3 / 0x147A3)
    UInt8[DS, 0xCEE8] = 0x0;
    // MOV AL,0x50 (1000_47A8 / 0x147A8)
    AL = 0x50;
    // CALL 0x1000:121f (1000_47AA / 0x147AA)
    NearCall(cs1, 0x47AD, unknown_1000_121F_1121F);
    // MOV byte ptr [0xe8],0x0 (1000_47AD / 0x147AD)
    UInt8[DS, 0xE8] = 0x0;
    // CALL 0x1000:1797 (1000_47B2 / 0x147B2)
    NearCall(cs1, 0x47B5, unknown_1000_1797_11797);
    // MOV AL,0x10 (1000_47B5 / 0x147B5)
    AL = 0x10;
    // MOV BP,0x4913 (1000_47B7 / 0x147B7)
    BP = 0x4913;
    // CALL 0x1000:c108 (1000_47BA / 0x147BA)
    NearCall(cs1, 0x47BD, transition_ida_1000_C108_1C108);
    // MOV byte ptr [0x227d],0x1 (1000_47BD / 0x147BD)
    UInt8[DS, 0x227D] = 0x1;
    // CALL 0x1000:491c (1000_47C2 / 0x147C2)
    throw FailAsUntested("Could not find a valid function at address 1000_491C / 0x1491C");
    // MOV byte ptr [0x227d],0x0 (1000_47C5 / 0x147C5)
    UInt8[DS, 0x227D] = 0x0;
    // JMP 0x1000:ac14 (1000_47CA / 0x147CA)
    // Jump converted to entry function call
    return pcm_stop_voc_q_ida_1000_AC14_1AC14(0);
    label_1000_47CD_147CD:
    // RET  (1000_47CD / 0x147CD)
    return NearRet();
    label_1000_47CE_147CE:
    // CALL 0x1000:ce53 (1000_47CE / 0x147CE)
    NearCall(cs1, 0x47D1, unknown_1000_CE53_1CE53);
    // XOR AL,AL (1000_47D1 / 0x147D1)
    AL = 0;
    // XCHG byte ptr [0x4732],AL (1000_47D3 / 0x147D3)
    byte tmp_1000_47D3 = UInt8[DS, 0x4732];
    UInt8[DS, 0x4732] = AL;
    AL = tmp_1000_47D3;
    // SHL AL,1 (1000_47D7 / 0x147D7)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JNC 0x1000:47cd (1000_47D9 / 0x147D9)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_47CD / 0x147CD)
      return NearRet();
    }
    // CALL 0x1000:181e (1000_47DB / 0x147DB)
    NearCall(cs1, 0x47DE, unknown_1000_181E_1181E);
    // MOV byte ptr [0x4731],0xff (1000_47DE / 0x147DE)
    UInt8[DS, 0x4731] = 0xFF;
    // CALL 0x1000:c07c (1000_47E3 / 0x147E3)
    NearCall(cs1, 0x47E6, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:37b2 (1000_47E6 / 0x147E6)
    NearCall(cs1, 0x47E9, unknown_1000_37B2_137B2);
    // CALL 0x1000:c412 (1000_47E9 / 0x147E9)
    NearCall(cs1, 0x47EC, unknown_1000_C412_1C412);
    // CALL 0x1000:5ba0 (1000_47EC / 0x147EC)
    NearCall(cs1, 0x47EF, MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0);
    // MOV byte ptr [0x4731],0x0 (1000_47EF / 0x147EF)
    UInt8[DS, 0x4731] = 0x0;
    // MOV AL,0x6 (1000_47F4 / 0x147F4)
    AL = 0x6;
    // CALL 0x1000:ab15 (1000_47F6 / 0x147F6)
    NearCall(cs1, 0x47F9, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV CL,0x1 (1000_47F9 / 0x147F9)
    CL = 0x1;
    label_1000_47FB_147FB:
    // MOV BP,0x4821 (1000_47FB / 0x147FB)
    BP = 0x4821;
    // MOV AX,0x14 (1000_47FE / 0x147FE)
    AX = 0x14;
    // CALL 0x1000:e353 (1000_4801 / 0x14801)
    NearCall(cs1, 0x4804, unknown_1000_E353_1E353);
    // ADD byte ptr [0x4731],CL (1000_4804 / 0x14804)
    // UInt8[DS, 0x4731] += CL;
    UInt8[DS, 0x4731] = Alu.Add8(UInt8[DS, 0x4731], CL);
    // MOV AL,[0x4731] (1000_4808 / 0x14808)
    AL = UInt8[DS, 0x4731];
    // CMP AL,0x1a (1000_480B / 0x1480B)
    Alu.Sub8(AL, 0x1A);
    // JNZ 0x1000:4816 (1000_480D / 0x1480D)
    if(!ZeroFlag) {
      goto label_1000_4816_14816;
    }
    // OR CL,CL (1000_480F / 0x1480F)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JS 0x1000:4816 (1000_4811 / 0x14811)
    if(SignFlag) {
      goto label_1000_4816_14816;
    }
    // CALL 0x1000:ac30 (1000_4813 / 0x14813)
    NearCall(cs1, 0x4816, CallPcmFunc05_1000_AC30_1AC30);
    label_1000_4816_14816:
    // CALL 0x1000:ae04 (1000_4816 / 0x14816)
    NearCall(cs1, 0x4819, unknown_1000_AE04_1AE04);
    // CMP byte ptr [0x4731],0x21 (1000_4819 / 0x14819)
    Alu.Sub8(UInt8[DS, 0x4731], 0x21);
    // JC 0x1000:47fb (1000_481E / 0x1481E)
    if(CarryFlag) {
      goto label_1000_47FB_147FB;
    }
    // RET  (1000_4820 / 0x14820)
    return NearRet();
  }
  
  public Action unknown_1000_4821_14821(int gotoTarget) {
    label_1000_4821_14821:
    // PUSH CX (1000_4821 / 0x14821)
    Stack.Push(CX);
    // CALL 0x1000:c43e (1000_4822 / 0x14822)
    NearCall(cs1, 0x4825, unknown_1000_C43E_1C43E);
    // MOV AX,0x2a (1000_4825 / 0x14825)
    AX = 0x2A;
    // CALL 0x1000:c13e (1000_4828 / 0x14828)
    NearCall(cs1, 0x482B, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:c0f4 (1000_482B / 0x1482B)
    NearCall(cs1, 0x482E, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c07c (1000_482E / 0x1482E)
    NearCall(cs1, 0x4831, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:3a95 (1000_4831 / 0x14831)
    NearCall(cs1, 0x4834, unknown_1000_3A95_13A95);
    // MOV AL,[0x4731] (1000_4834 / 0x14834)
    AL = UInt8[DS, 0x4731];
    // CMP AL,0xd (1000_4837 / 0x14837)
    Alu.Sub8(AL, 0xD);
    // JNZ 0x1000:4840 (1000_4839 / 0x14839)
    if(!ZeroFlag) {
      goto label_1000_4840_14840;
    }
    // PUSH AX (1000_483B / 0x1483B)
    Stack.Push(AX);
    // CALL 0x1000:ac30 (1000_483C / 0x1483C)
    NearCall(cs1, 0x483F, CallPcmFunc05_1000_AC30_1AC30);
    // POP AX (1000_483F / 0x1483F)
    AX = Stack.Pop();
    label_1000_4840_14840:
    // SUB AL,0xe (1000_4840 / 0x14840)
    // AL -= 0xE;
    AL = Alu.Sub8(AL, 0xE);
    // JBE 0x1000:485d (1000_4842 / 0x14842)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_485D_1485D;
    }
    // POP CX (1000_4844 / 0x14844)
    CX = Stack.Pop();
    // PUSH CX (1000_4845 / 0x14845)
    Stack.Push(CX);
    // OR CL,CL (1000_4846 / 0x14846)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // MOV CX,0x5 (1000_4848 / 0x14848)
    CX = 0x5;
    // JNS 0x1000:484f (1000_484B / 0x1484B)
    if(!SignFlag) {
      goto label_1000_484F_1484F;
    }
    // NEG CX (1000_484D / 0x1484D)
    CX = Alu.Sub16(0, CX);
    label_1000_484F_1484F:
    // MOV AH,AL (1000_484F / 0x1484F)
    AH = AL;
    label_1000_4851_14851:
    // SUB DX,CX (1000_4851 / 0x14851)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // DEC AH (1000_4853 / 0x14853)
    AH = Alu.Dec8(AH);
    // JNZ 0x1000:4851 (1000_4855 / 0x14855)
    if(!ZeroFlag) {
      goto label_1000_4851_14851;
    }
    // MUL AL (1000_4857 / 0x14857)
    Cpu.Mul8(AL);
    // SAR AX,1 (1000_4859 / 0x14859)
    AX = Alu.Sar16(AX, 1);
    // SUB BX,AX (1000_485B / 0x1485B)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    label_1000_485D_1485D:
    // CALL 0x1000:3aa9 (1000_485D / 0x1485D)
    NearCall(cs1, 0x4860, unknown_1000_3AA9_13AA9);
    // CALL 0x1000:3a95 (1000_4860 / 0x14860)
    NearCall(cs1, 0x4863, unknown_1000_3A95_13A95);
    // MOV CL,byte ptr [0x46ff] (1000_4863 / 0x14863)
    CL = UInt8[DS, 0x46FF];
    // XOR CH,CH (1000_4867 / 0x14867)
    CH = 0;
    // JCXZ 0x1000:487b (1000_4869 / 0x14869)
    if(CX == 0) {
      goto label_1000_487B_1487B;
    }
    // MOV AL,[0x4731] (1000_486B / 0x1486B)
    AL = UInt8[DS, 0x4731];
    // PUSH AX (1000_486E / 0x1486E)
    Stack.Push(AX);
    // MOV byte ptr [0x4731],0x0 (1000_486F / 0x1486F)
    UInt8[DS, 0x4731] = 0x0;
    // CALL 0x1000:3a73 (1000_4874 / 0x14874)
    NearCall(cs1, 0x4877, unknown_1000_3A73_13A73);
    // POP AX (1000_4877 / 0x14877)
    AX = Stack.Pop();
    // MOV [0x4731],AL (1000_4878 / 0x14878)
    UInt8[DS, 0x4731] = AL;
    label_1000_487B_1487B:
    // CALL 0x1000:c4dd (1000_487B / 0x1487B)
    NearCall(cs1, 0x487E, unknown_1000_C4DD_1C4DD);
    // CMP byte ptr [0x46d7],0x0 (1000_487E / 0x1487E)
    Alu.Sub8(UInt8[DS, 0x46D7], 0x0);
    // JZ 0x1000:4888 (1000_4883 / 0x14883)
    if(ZeroFlag) {
      goto label_1000_4888_14888;
    }
    // CALL 0x1000:3916 (1000_4885 / 0x14885)
    NearCall(cs1, 0x4888, unknown_1000_3916_13916);
    label_1000_4888_14888:
    // POP CX (1000_4888 / 0x14888)
    CX = Stack.Pop();
    // RET  (1000_4889 / 0x14889)
    return NearRet();
  }
  
  public Action unknown_1000_488A_1488A(int gotoTarget) {
    label_1000_488A_1488A:
    // MOV AX,0x6 (1000_488A / 0x1488A)
    AX = 0x6;
    // MOV SI,word ptr [0x114e] (1000_488D / 0x1488D)
    SI = UInt16[DS, 0x114E];
    // CALL 0x1000:5e4f (1000_4891 / 0x14891)
    NearCall(cs1, 0x4894, calc_SAL_index_ida_1000_5E4F_15E4F);
    // CMP AL,0x8 (1000_4894 / 0x14894)
    Alu.Sub8(AL, 0x8);
    // JNC 0x1000:48e5 (1000_4896 / 0x14896)
    if(!CarryFlag) {
      goto label_1000_48E5_148E5;
    }
    // MOV BX,AX (1000_4898 / 0x14898)
    BX = AX;
    // CALL 0x1000:dbb2 (1000_489A / 0x1489A)
    NearCall(cs1, 0x489D, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // MOV byte ptr [0x4728],0x80 (1000_489D / 0x1489D)
    UInt8[DS, 0x4728] = 0x80;
    label_1000_48A2_148A2:
    // PUSH BX (1000_48A2 / 0x148A2)
    Stack.Push(BX);
    // CALL 0x1000:ca60 (1000_48A3 / 0x148A3)
    NearCall(cs1, 0x48A6, hnm_do_frame_ida_1000_CA60_1CA60);
    // XOR AX,AX (1000_48A6 / 0x148A6)
    AX = 0;
    // CALL 0x1000:4ec6 (1000_48A8 / 0x148A8)
    NearCall(cs1, 0x48AB, unknown_1000_4EC6_14EC6);
    // POP BX (1000_48AB / 0x148AB)
    BX = Stack.Pop();
    // CMP word ptr [0xdc00],0x2 (1000_48AC / 0x148AC)
    Alu.Sub16(UInt16[DS, 0xDC00], 0x2);
    // JNZ 0x1000:48a2 (1000_48B2 / 0x148B2)
    if(!ZeroFlag) {
      goto label_1000_48A2_148A2;
    }
    // MOV AX,0x3c (1000_48B4 / 0x148B4)
    AX = 0x3C;
    // CMP BX,0x6 (1000_48B7 / 0x148B7)
    Alu.Sub16(BX, 0x6);
    // JZ 0x1000:48c0 (1000_48BB / 0x148BB)
    if(ZeroFlag) {
      goto label_1000_48C0_148C0;
    }
    // MOV AX,0x16 (1000_48BD / 0x148BD)
    AX = 0x16;
    label_1000_48C0_148C0:
    // CMP AX,word ptr [0xdbea] (1000_48C0 / 0x148C0)
    Alu.Sub16(AX, UInt16[DS, 0xDBEA]);
    // JNZ 0x1000:48a2 (1000_48C4 / 0x148C4)
    if(!ZeroFlag) {
      goto label_1000_48A2_148A2;
    }
    // CALL 0x1000:ce4b (1000_48C6 / 0x148C6)
    NearCall(cs1, 0x48C9, unknown_1000_CE4B_1CE4B);
    label_1000_48C9_148C9:
    // CALL 0x1000:ca60 (1000_48C9 / 0x148C9)
    NearCall(cs1, 0x48CC, hnm_do_frame_ida_1000_CA60_1CA60);
    // CALL 0x1000:cc85 (1000_48CC / 0x148CC)
    NearCall(cs1, 0x48CF, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:48c9 (1000_48CF / 0x148CF)
    if(ZeroFlag) {
      goto label_1000_48C9_148C9;
    }
    label_1000_48D1_148D1:
    // DEC byte ptr [0x46e0] (1000_48D1 / 0x148D1)
    UInt8[DS, 0x46E0] = Alu.Dec8(UInt8[DS, 0x46E0]);
    label_1000_48D5_148D5:
    // MOV byte ptr [0x4732],0x0 (1000_48D5 / 0x148D5)
    UInt8[DS, 0x4732] = 0x0;
    // JMP 0x1000:2d74 (1000_48DA / 0x148DA)
    // Jump converted to entry function call
    return open_SAL_resource_ida_1000_2D74_12D74(0);
    label_1000_48DD_148DD:
    // MOV BP,0xc4cd (1000_48DD / 0x148DD)
    BP = 0xC4CD;
    // CALL 0x1000:c8fb (1000_48E0 / 0x148E0)
    throw FailAsUntested("Could not find a valid function at address 1000_C8FB / 0x1C8FB");
    // JMP 0x1000:48d1 (1000_48E3 / 0x148E3)
    goto label_1000_48D1_148D1;
    label_1000_48E5_148E5:
    // CMP AL,0x9 (1000_48E5 / 0x148E5)
    Alu.Sub8(AL, 0x9);
    // JZ 0x1000:48dd (1000_48E7 / 0x148E7)
    if(ZeroFlag) {
      goto label_1000_48DD_148DD;
    }
    // MOV byte ptr [0x4731],0xff (1000_48E9 / 0x148E9)
    UInt8[DS, 0x4731] = 0xFF;
    // CALL 0x1000:c07c (1000_48EE / 0x148EE)
    NearCall(cs1, 0x48F1, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:5ba0 (1000_48F1 / 0x148F1)
    NearCall(cs1, 0x48F4, MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0);
    // CALL 0x1000:37b2 (1000_48F4 / 0x148F4)
    NearCall(cs1, 0x48F7, unknown_1000_37B2_137B2);
    // CALL 0x1000:c0f4 (1000_48F7 / 0x148F7)
    NearCall(cs1, 0x48FA, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c412 (1000_48FA / 0x148FA)
    NearCall(cs1, 0x48FD, unknown_1000_C412_1C412);
    // MOV byte ptr [0x4731],0x1f (1000_48FD / 0x148FD)
    UInt8[DS, 0x4731] = 0x1F;
    // MOV AL,0x7 (1000_4902 / 0x14902)
    AL = 0x7;
    // CALL 0x1000:ab15 (1000_4904 / 0x14904)
    NearCall(cs1, 0x4907, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV CL,0xff (1000_4907 / 0x14907)
    CL = 0xFF;
    // CALL 0x1000:47fb (1000_4909 / 0x14909)
    throw FailAsUntested("Could not find a valid function at address 1000_47FB / 0x147FB");
    // MOV byte ptr [0x4731],0x0 (1000_490C / 0x1490C)
    UInt8[DS, 0x4731] = 0x0;
    // JMP 0x1000:48d5 (1000_4911 / 0x14911)
    goto label_1000_48D5_148D5;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x1491C");
  }
  
  public Action unknown_1000_4944_14944(int gotoTarget) {
    label_1000_4944_14944:
    // CALL 0x1000:50be (1000_4944 / 0x14944)
    NearCall(cs1, 0x4947, unknown_1000_50BE_150BE);
    // CMP DI,-0x10 (1000_4947 / 0x14947)
    Alu.Sub16(DI, 0xFFF0);
    // JC 0x1000:4965 (1000_494A / 0x1494A)
    if(CarryFlag) {
      goto label_1000_4965_14965;
    }
    // DEC byte ptr [0x11cb] (1000_494C / 0x1494C)
    UInt8[DS, 0x11CB] = Alu.Dec8(UInt8[DS, 0x11CB]);
    // CALL 0x1000:b5f9 (1000_4950 / 0x14950)
    NearCall(cs1, 0x4953, unknown_1000_B5F9_1B5F9);
    // MOV CX,BX (1000_4953 / 0x14953)
    CX = BX;
    // MOV DI,DX (1000_4955 / 0x14955)
    DI = DX;
    // CALL 0x1000:407e (1000_4957 / 0x14957)
    NearCall(cs1, 0x495A, unknown_1000_407E_1407E);
    // CALL 0x1000:5133 (1000_495A / 0x1495A)
    NearCall(cs1, 0x495D, unknown_1000_5133_15133);
    // MOV DI,word ptr [0x1150] (1000_495D / 0x1495D)
    DI = UInt16[DS, 0x1150];
    // MOV CL,0x1 (1000_4961 / 0x14961)
    CL = 0x1;
    // JMP 0x1000:496a (1000_4963 / 0x14963)
    goto label_1000_496A_1496A;
    label_1000_4965_14965:
    // CALL 0x1000:5124 (1000_4965 / 0x14965)
    NearCall(cs1, 0x4968, unknown_1000_5124_15124);
    // XOR CX,CX (1000_4968 / 0x14968)
    CX = 0;
    label_1000_496A_1496A:
    // MOV word ptr [0x11c5],DI (1000_496A / 0x1496A)
    UInt16[DS, 0x11C5] = DI;
    // MOV byte ptr [0x11c8],CL (1000_496E / 0x1496E)
    UInt8[DS, 0x11C8] = CL;
    // MOV byte ptr [0x11c7],0x0 (1000_4972 / 0x14972)
    UInt8[DS, 0x11C7] = 0x0;
    // JMP 0x1000:5119 (1000_4977 / 0x14977)
    goto label_1000_5119_15119;
    label_1000_5119_15119:
    // ADD byte ptr [0x11c7],AL (1000_5119 / 0x15119)
    // UInt8[DS, 0x11C7] += AL;
    UInt8[DS, 0x11C7] = Alu.Add8(UInt8[DS, 0x11C7], AL);
    // MOV word ptr [0x11cc],0x80 (1000_511D / 0x1511D)
    UInt16[DS, 0x11CC] = 0x80;
    // RET  (1000_5123 / 0x15123)
    return NearRet();
  }
  
  public Action unknown_1000_4988_14988(int gotoTarget) {
    label_1000_4988_14988:
    // MOV word ptr [0x46fc],0x0 (1000_4988 / 0x14988)
    UInt16[DS, 0x46FC] = 0x0;
    // CALL 0x1000:5b5d (1000_498E / 0x1498E)
    NearCall(cs1, 0x4991, unknown_1000_5B5D_15B5D);
    // MOV SI,0x148a (1000_4991 / 0x14991)
    SI = 0x148A;
    // MOV DI,0x46e3 (1000_4994 / 0x14994)
    DI = 0x46E3;
    // CALL 0x1000:5b99 (1000_4997 / 0x14997)
    NearCall(cs1, 0x499A, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // MOV word ptr [0x46ed],0x49a0 (1000_499A / 0x1499A)
    UInt16[DS, 0x46ED] = 0x49A0;
    label_1000_49A0_149A0:
    // CALL 0x1000:c085 (1000_49A0 / 0x149A0)
    NearCall(cs1, 0x49A3, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085);
    // CALL 0x1000:5b93 (1000_49A3 / 0x149A3)
    NearCall(cs1, 0x49A6, unknown_1000_5B93_15B93);
    // MOV byte ptr [0x46eb],0x1 (1000_49A6 / 0x149A6)
    UInt8[DS, 0x46EB] = 0x1;
    // CALL 0x1000:b6c3 (1000_49AB / 0x149AB)
    NearCall(cs1, 0x49AE, map_func_ida_1000_B6C3_1B6C3);
    // CALL 0x1000:5b69 (1000_49AE / 0x149AE)
    NearCall(cs1, 0x49B1, unknown_1000_5B69_15B69);
    // CALL 0x1000:c137 (1000_49B1 / 0x149B1)
    NearCall(cs1, 0x49B4, load_icons_sprites_ida_1000_C137_1C137);
    // CALL 0x1000:5dce (1000_49B4 / 0x149B4)
    NearCall(cs1, 0x49B7, unknown_1000_5DCE_15DCE);
    // MOV SI,word ptr [0x11c5] (1000_49B7 / 0x149B7)
    SI = UInt16[DS, 0x11C5];
    // OR SI,SI (1000_49BB / 0x149BB)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:49cc (1000_49BD / 0x149BD)
    if(ZeroFlag) {
      goto label_1000_49CC_149CC;
    }
    // CALL 0x1000:62c9 (1000_49BF / 0x149BF)
    NearCall(cs1, 0x49C2, unknown_1000_62C9_162C9);
    // JC 0x1000:49cc (1000_49C2 / 0x149C2)
    if(CarryFlag) {
      goto label_1000_49CC_149CC;
    }
    // DEC BX (1000_49C4 / 0x149C4)
    BX = Alu.Dec16(BX);
    // DEC DX (1000_49C5 / 0x149C5)
    DX = Alu.Dec16(DX);
    // MOV AX,0x2e (1000_49C6 / 0x149C6)
    AX = 0x2E;
    // CALL 0x1000:c22f (1000_49C9 / 0x149C9)
    NearCall(cs1, 0x49CC, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_49CC_149CC:
    // MOV byte ptr [0x46eb],0x0 (1000_49CC / 0x149CC)
    UInt8[DS, 0x46EB] = 0x0;
    // JMP 0x1000:c07c (1000_49D1 / 0x149D1)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_49EA_149EA(int gotoTarget) {
    label_1000_49EA_149EA:
    // MOV byte ptr [0x4728],0x0 (1000_49EA / 0x149EA)
    UInt8[DS, 0x4728] = 0x0;
    // PUSH CS (1000_49EF / 0x149EF)
    Stack.Push(cs1);
    // POP ES (1000_49F0 / 0x149F0)
    ES = Stack.Pop();
    // MOV DI,0xe40c (1000_49F1 / 0x149F1)
    DI = 0xE40C;
    // MOV AX,0x800 (1000_49F4 / 0x149F4)
    AX = 0x800;
    label_1000_49F7_149F7:
    // STOSW ES:DI (1000_49F7 / 0x149F7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_49F8 / 0x149F8)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP DI,0xe85c (1000_49F9 / 0x149F9)
    Alu.Sub16(DI, 0xE85C);
    // JC 0x1000:49f7 (1000_49FD / 0x149FD)
    if(CarryFlag) {
      goto label_1000_49F7_149F7;
    }
    // RET  (1000_49FF / 0x149FF)
    return NearRet();
  }
  
  public Action unknown_1000_4A00_14A00(int gotoTarget) {
    label_1000_4A00_14A00:
    // PUSH CS (1000_4A00 / 0x14A00)
    Stack.Push(cs1);
    // POP ES (1000_4A01 / 0x14A01)
    ES = Stack.Pop();
    // MOV DI,word ptr [0x149a] (1000_4A02 / 0x14A02)
    DI = UInt16[DS, 0x149A];
    // MOV AX,DX (1000_4A06 / 0x14A06)
    AX = DX;
    // STOSW ES:DI (1000_4A08 / 0x14A08)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,BX (1000_4A09 / 0x14A09)
    AX = BX;
    // STOSW ES:DI (1000_4A0B / 0x14A0B)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP DI,0xe85c (1000_4A0C / 0x14A0C)
    Alu.Sub16(DI, 0xE85C);
    // JC 0x1000:4a15 (1000_4A10 / 0x14A10)
    if(CarryFlag) {
      goto label_1000_4A15_14A15;
    }
    // MOV DI,0xe40c (1000_4A12 / 0x14A12)
    DI = 0xE40C;
    label_1000_4A15_14A15:
    // MOV word ptr [0x149a],DI (1000_4A15 / 0x14A15)
    UInt16[DS, 0x149A] = DI;
    // RET  (1000_4A19 / 0x14A19)
    return NearRet();
  }
  
  public Action unknown_1000_4A1A_14A1A(int gotoTarget) {
    label_1000_4A1A_14A1A:
    // CMP byte ptr [0x4728],0x0 (1000_4A1A / 0x14A1A)
    Alu.Sub8(UInt8[DS, 0x4728], 0x0);
    // JS 0x1000:4a59 (1000_4A1F / 0x14A1F)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_4A59 / 0x14A59)
      return NearRet();
    }
    // MOV SI,0x148a (1000_4A21 / 0x14A21)
    SI = 0x148A;
    // CALL 0x1000:db74 (1000_4A24 / 0x14A24)
    NearCall(cs1, 0x4A27, unknown_1000_DB74_1DB74);
    // MOV SI,word ptr [0x149a] (1000_4A27 / 0x14A27)
    SI = UInt16[DS, 0x149A];
    // CMP SI,0xe40c (1000_4A2B / 0x14A2B)
    Alu.Sub16(SI, 0xE40C);
    // JNZ 0x1000:4a34 (1000_4A2F / 0x14A2F)
    if(!ZeroFlag) {
      goto label_1000_4A34_14A34;
    }
    // MOV SI,0xe85c (1000_4A31 / 0x14A31)
    SI = 0xE85C;
    label_1000_4A34_14A34:
    // SUB SI,0x4 (1000_4A34 / 0x14A34)
    // SI -= 0x4;
    SI = Alu.Sub16(SI, 0x4);
    // LODSW CS:SI (1000_4A37 / 0x14A37)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_4A39 / 0x14A39)
    DX = AX;
    // LODSW CS:SI (1000_4A3B / 0x14A3B)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_4A3D / 0x14A3D)
    BX = AX;
    // DEC AH (1000_4A3F / 0x14A3F)
    AH = Alu.Dec8(AH);
    // JNS 0x1000:4a59 (1000_4A41 / 0x14A41)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_4A59 / 0x14A59)
      return NearRet();
    }
    // CALL 0x1000:62d6 (1000_4A43 / 0x14A43)
    NearCall(cs1, 0x4A46, unknown_1000_62D6_162D6);
    // JC 0x1000:4a59 (1000_4A46 / 0x14A46)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_4A59 / 0x14A59)
      return NearRet();
    }
    // DEC BX (1000_4A48 / 0x14A48)
    BX = Alu.Dec16(BX);
    // DEC DX (1000_4A49 / 0x14A49)
    DX = Alu.Dec16(DX);
    // CALL 0x1000:c137 (1000_4A4A / 0x14A4A)
    NearCall(cs1, 0x4A4D, load_icons_sprites_ida_1000_C137_1C137);
    // MOV AX,0x2f (1000_4A4D / 0x14A4D)
    AX = 0x2F;
    // CALL 0x1000:c085 (1000_4A50 / 0x14A50)
    NearCall(cs1, 0x4A53, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085);
    // CALL 0x1000:c22f (1000_4A53 / 0x14A53)
    NearCall(cs1, 0x4A56, draw_sprite_ida_1000_C22F_1C22F);
    // CALL 0x1000:c07c (1000_4A56 / 0x14A56)
    NearCall(cs1, 0x4A59, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    label_1000_4A59_14A59:
    // RET  (1000_4A59 / 0x14A59)
    return NearRet();
  }
  
  public Action unknown_1000_4A5A_14A5A(int gotoTarget) {
    label_1000_4A5A_14A5A:
    // CALL 0x1000:c137 (1000_4A5A / 0x14A5A)
    NearCall(cs1, 0x4A5D, load_icons_sprites_ida_1000_C137_1C137);
    // PUSH word ptr [0xdbda] (1000_4A5D / 0x14A5D)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c085 (1000_4A61 / 0x14A61)
    NearCall(cs1, 0x4A64, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085);
    // MOV SI,word ptr [0x149a] (1000_4A64 / 0x14A64)
    SI = UInt16[DS, 0x149A];
    label_1000_4A68_14A68:
    // LODSW CS:SI (1000_4A68 / 0x14A68)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_4A6A / 0x14A6A)
    DX = AX;
    // LODSW CS:SI (1000_4A6C / 0x14A6C)
    AX = UInt16[cs1, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_4A6E / 0x14A6E)
    BX = AX;
    // DEC AH (1000_4A70 / 0x14A70)
    AH = Alu.Dec8(AH);
    // JNS 0x1000:4a99 (1000_4A72 / 0x14A72)
    if(!SignFlag) {
      goto label_1000_4A99_14A99;
    }
    // PUSH SI (1000_4A74 / 0x14A74)
    Stack.Push(SI);
    // CALL 0x1000:62d6 (1000_4A75 / 0x14A75)
    NearCall(cs1, 0x4A78, unknown_1000_62D6_162D6);
    // JC 0x1000:4a98 (1000_4A78 / 0x14A78)
    if(CarryFlag) {
      goto label_1000_4A98_14A98;
    }
    // DEC BX (1000_4A7A / 0x14A7A)
    BX = Alu.Dec16(BX);
    // DEC DX (1000_4A7B / 0x14A7B)
    DX = Alu.Dec16(DX);
    // CMP DX,0xcc (1000_4A7C / 0x14A7C)
    Alu.Sub16(DX, 0xCC);
    // JL 0x1000:4a98 (1000_4A80 / 0x14A80)
    if(SignFlag != OverflowFlag) {
      goto label_1000_4A98_14A98;
    }
    // CMP BX,0x4 (1000_4A82 / 0x14A82)
    Alu.Sub16(BX, 0x4);
    // JL 0x1000:4a98 (1000_4A85 / 0x14A85)
    if(SignFlag != OverflowFlag) {
      goto label_1000_4A98_14A98;
    }
    // CMP DX,0x13a (1000_4A87 / 0x14A87)
    Alu.Sub16(DX, 0x13A);
    // JGE 0x1000:4a98 (1000_4A8B / 0x14A8B)
    if(SignFlag == OverflowFlag) {
      goto label_1000_4A98_14A98;
    }
    // CMP BX,0x3a (1000_4A8D / 0x14A8D)
    Alu.Sub16(BX, 0x3A);
    // JGE 0x1000:4a98 (1000_4A90 / 0x14A90)
    if(SignFlag == OverflowFlag) {
      goto label_1000_4A98_14A98;
    }
    // MOV AX,0x2f (1000_4A92 / 0x14A92)
    AX = 0x2F;
    // CALL 0x1000:c22f (1000_4A95 / 0x14A95)
    NearCall(cs1, 0x4A98, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_4A98_14A98:
    // POP SI (1000_4A98 / 0x14A98)
    SI = Stack.Pop();
    label_1000_4A99_14A99:
    // CMP SI,0xe85c (1000_4A99 / 0x14A99)
    Alu.Sub16(SI, 0xE85C);
    // JC 0x1000:4aa2 (1000_4A9D / 0x14A9D)
    if(CarryFlag) {
      goto label_1000_4AA2_14AA2;
    }
    // MOV SI,0xe40c (1000_4A9F / 0x14A9F)
    SI = 0xE40C;
    label_1000_4AA2_14AA2:
    // CMP SI,word ptr [0x149a] (1000_4AA2 / 0x14AA2)
    Alu.Sub16(SI, UInt16[DS, 0x149A]);
    // JNZ 0x1000:4a68 (1000_4AA6 / 0x14AA6)
    if(!ZeroFlag) {
      goto label_1000_4A68_14A68;
    }
    // POP word ptr [0xdbda] (1000_4AA8 / 0x14AA8)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_4AAC / 0x14AAC)
    return NearRet();
  }
  
  public Action unknown_1000_4AB8_14AB8(int gotoTarget) {
    label_1000_4AB8_14AB8:
    // MOV byte ptr [0x4727],0xff (1000_4AB8 / 0x14AB8)
    UInt8[DS, 0x4727] = 0xFF;
    // RET  (1000_4ABD / 0x14ABD)
    return NearRet();
  }
  
  public Action unknown_1000_4ABE_14ABE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4ABE: goto label_1000_4ABE_14ABE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_4ABE_14ABE:
    // CALL 0x1000:37f4 (1000_4ABE / 0x14ABE)
    NearCall(cs1, 0x4AC1, unknown_1000_37F4_137F4);
    // CALL 0x1000:c4dd (1000_4AC1 / 0x14AC1)
    NearCall(cs1, 0x4AC4, unknown_1000_C4DD_1C4DD);
    // Function call generated as ASM continues to next function entry point without return
    return SetUnknown11CATo0_1000_4AC4_14AC4(0);
  }
  
  public Action SetUnknown11CATo0_1000_4AC4_14AC4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4AC4: goto label_1000_4AC4_14AC4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_4AC4_14AC4:
    // MOV byte ptr [0x11ca],0x0 (1000_4AC4 / 0x14AC4)
    UInt8[DS, 0x11CA] = 0x0;
    // RET  (1000_4AC9 / 0x14AC9)
    return NearRet();
  }
  
  public Action SetUnknown11CATo1_1000_4ACA_14ACA(int gotoTarget) {
    label_1000_4ACA_14ACA:
    // MOV byte ptr [0x11ca],0x1 (1000_4ACA / 0x14ACA)
    UInt8[DS, 0x11CA] = 0x1;
    // RET  (1000_4ACF / 0x14ACF)
    return NearRet();
  }
  
  public Action unknown_1000_4B2B_14B2B(int gotoTarget) {
    label_1000_4B2B_14B2B:
    // CMP byte ptr [0x4728],0x0 (1000_4B2B / 0x14B2B)
    Alu.Sub8(UInt8[DS, 0x4728], 0x0);
    // JS 0x1000:4b38 (1000_4B30 / 0x14B30)
    if(SignFlag) {
      // JS target is JMP, inlining.
      // JMP 0x1000:dbca (1000_4B38 / 0x14B38)
      goto label_1000_DBCA_1DBCA;
    }
    // MOV SI,0x1492 (1000_4B32 / 0x14B32)
    SI = 0x1492;
    // CALL 0x1000:c46f (1000_4B35 / 0x14B35)
    NearCall(cs1, 0x4B38, unknown_1000_C46F_1C46F);
    label_1000_4B38_14B38:
    // JMP 0x1000:dbca (1000_4B38 / 0x14B38)
    goto label_1000_DBCA_1DBCA;
    label_1000_DBCA_1DBCA:
    // MOV AX,[0xdc44] (1000_DBCA / 0x1DBCA)
    AX = UInt16[DS, 0xDC44];
    // CMP AX,0x98 (1000_DBCD / 0x1DBCD)
    Alu.Sub16(AX, 0x98);
    // JNC 0x1000:dbe2 (1000_DBD0 / 0x1DBD0)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_DBE2 / 0x1DBE2)
      return NearRet();
    }
    // CMP AX,0x88 (1000_DBD2 / 0x1DBD2)
    Alu.Sub16(AX, 0x88);
    // JNC 0x1000:dbb2 (1000_DBD5 / 0x1DBD5)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return call_restore_cursor_ida_1000_DBB2_1DBB2(0);
    }
    // DEC byte ptr [0xdc46] (1000_DBD7 / 0x1DBD7)
    UInt8[DS, 0xDC46] = Alu.Dec8(UInt8[DS, 0xDC46]);
    // JS 0x1000:dbe2 (1000_DBDB / 0x1DBDB)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_DBE2 / 0x1DBE2)
      return NearRet();
    }
    // MOV byte ptr [0xdc46],0x80 (1000_DBDD / 0x1DBDD)
    UInt8[DS, 0xDC46] = 0x80;
    label_1000_DBE2_1DBE2:
    // RET  (1000_DBE2 / 0x1DBE2)
    return NearRet();
  }
  
  public Action unknown_1000_4B3B_14B3B(int gotoTarget) {
    label_1000_4B3B_14B3B:
    // INC word ptr [0x472b] (1000_4B3B / 0x14B3B)
    UInt16[DS, 0x472B] = Alu.Inc16(UInt16[DS, 0x472B]);
    // TEST word ptr [0x472b],0xf (1000_4B3F / 0x14B3F)
    Alu.And16(UInt16[DS, 0x472B], 0xF);
    // JNZ 0x1000:4b4d (1000_4B45 / 0x14B45)
    if(!ZeroFlag) {
      goto label_1000_4B4D_14B4D;
    }
    // MOV CX,0x1 (1000_4B47 / 0x14B47)
    CX = 0x1;
    // CALL 0x1000:0fd9 (1000_4B4A / 0x14B4A)
    NearCall(cs1, 0x4B4D, unknown_1000_0FD9_10FD9);
    label_1000_4B4D_14B4D:
    // CALL 0x1000:407e (1000_4B4D / 0x14B4D)
    NearCall(cs1, 0x4B50, unknown_1000_407E_1407E);
    // CALL 0x1000:5206 (1000_4B50 / 0x14B50)
    NearCall(cs1, 0x4B53, unknown_1000_5206_15206);
    // CALL 0x1000:40c3 (1000_4B53 / 0x14B53)
    NearCall(cs1, 0x4B56, unknown_1000_40C3_140C3);
    // MOV word ptr [0x4],DX (1000_4B56 / 0x14B56)
    UInt16[DS, 0x4] = DX;
    // MOV word ptr [0x6],BX (1000_4B5A / 0x14B5A)
    UInt16[DS, 0x6] = BX;
    // RET  (1000_4B5E / 0x14B5E)
    return NearRet();
  }
  
  public Action unknown_1000_4D00_14D00(int gotoTarget) {
    label_1000_4D00_14D00:
    // MOV SI,0x4bb9 (1000_4D00 / 0x14D00)
    SI = 0x4BB9;
    // JMP 0x1000:da5f (1000_4D03 / 0x14D03)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_4DED_14DED(int gotoTarget) {
    label_1000_4DED_14DED:
    // XOR CX,CX (1000_4DED / 0x14DED)
    CX = 0;
    // MOV BP,0x4e04 (1000_4DEF / 0x14DEF)
    BP = 0x4E04;
    // PUSH SI (1000_4DF2 / 0x14DF2)
    Stack.Push(SI);
    // CALL 0x1000:661d (1000_4DF3 / 0x14DF3)
    NearCall(cs1, 0x4DF6, unknown_1000_661D_1661D);
    // MOV CH,byte ptr [DI + 0x14] (1000_4DF6 / 0x14DF6)
    CH = UInt8[DS, (ushort)(DI + 0x14)];
    // MOV word ptr [0x4733],CX (1000_4DF9 / 0x14DF9)
    UInt16[DS, 0x4733] = CX;
    // PUSH ES (1000_4DFD / 0x14DFD)
    Stack.Push(ES);
    // CALL 0x1000:7f27 (1000_4DFE / 0x14DFE)
    NearCall(cs1, 0x4E01, unknown_1000_7F27_17F27);
    // POP ES (1000_4E01 / 0x14E01)
    ES = Stack.Pop();
    // POP SI (1000_4E02 / 0x14E02)
    SI = Stack.Pop();
    // RET  (1000_4E03 / 0x14E03)
    return NearRet();
  }
  
  public Action unknown_1000_4E12_14E12(int gotoTarget) {
    label_1000_4E12_14E12:
    // MOV word ptr [0x4733],0x0 (1000_4E12 / 0x14E12)
    UInt16[DS, 0x4733] = 0x0;
    // CALL 0x1000:407e (1000_4E18 / 0x14E18)
    NearCall(cs1, 0x4E1B, unknown_1000_407E_1407E);
    // CALL 0x1000:b532 (1000_4E1B / 0x14E1B)
    NearCall(cs1, 0x4E1E, unknown_1000_B532_1B532);
    // PUSH AX (1000_4E1E / 0x14E1E)
    Stack.Push(AX);
    // CALL 0x1000:4ec6 (1000_4E1F / 0x14E1F)
    NearCall(cs1, 0x4E22, unknown_1000_4EC6_14EC6);
    // MOV word ptr [0x196a],0x0 (1000_4E22 / 0x14E22)
    UInt16[DS, 0x196A] = 0x0;
    // POP AX (1000_4E28 / 0x14E28)
    AX = Stack.Pop();
    // TEST AL,0x40 (1000_4E29 / 0x14E29)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:4e78 (1000_4E2B / 0x14E2B)
    if(ZeroFlag) {
      goto label_1000_4E78_14E78;
    }
    // CALL 0x1000:409a (1000_4E2D / 0x14E2D)
    NearCall(cs1, 0x4E30, unknown_1000_409A_1409A);
    // JNZ 0x1000:4e78 (1000_4E30 / 0x14E30)
    if(!ZeroFlag) {
      goto label_1000_4E78_14E78;
    }
    // CMP byte ptr [0x6],0x80 (1000_4E32 / 0x14E32)
    Alu.Sub8(UInt8[DS, 0x6], 0x80);
    // JZ 0x1000:4e78 (1000_4E37 / 0x14E37)
    if(ZeroFlag) {
      goto label_1000_4E78_14E78;
    }
    // MOV AX,word ptr [SI + 0x2] (1000_4E39 / 0x14E39)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // SUB AX,DX (1000_4E3C / 0x14E3C)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // ADD AX,0x4 (1000_4E3E / 0x14E3E)
    // AX += 0x4;
    AX = Alu.Add16(AX, 0x4);
    // CMP AX,0x8 (1000_4E41 / 0x14E41)
    Alu.Sub16(AX, 0x8);
    // JNC 0x1000:4e78 (1000_4E44 / 0x14E44)
    if(!CarryFlag) {
      goto label_1000_4E78_14E78;
    }
    // MOV [0x1968],AX (1000_4E46 / 0x14E46)
    UInt16[DS, 0x1968] = AX;
    // INC AX (1000_4E49 / 0x14E49)
    AX = Alu.Inc16(AX);
    // MOV [0x1964],AX (1000_4E4A / 0x14E4A)
    UInt16[DS, 0x1964] = AX;
    // SUB AX,0x2 (1000_4E4D / 0x14E4D)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // MOV [0x1960],AX (1000_4E50 / 0x14E50)
    UInt16[DS, 0x1960] = AX;
    // XOR AX,AX (1000_4E53 / 0x14E53)
    AX = 0;
    // CALL 0x1000:5e4f (1000_4E55 / 0x14E55)
    NearCall(cs1, 0x4E58, calc_SAL_index_ida_1000_5E4F_15E4F);
    // MOV BX,0x196d (1000_4E58 / 0x14E58)
    BX = 0x196D;
    // XLAT BX (1000_4E5B / 0x14E5B)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CMP AL,0x13 (1000_4E5C / 0x14E5C)
    Alu.Sub8(AL, 0x13);
    // JC 0x1000:4e6e (1000_4E5E / 0x14E5E)
    if(CarryFlag) {
      goto label_1000_4E6E_14E6E;
    }
    // SUB CL,0x28 (1000_4E60 / 0x14E60)
    // CL -= 0x28;
    CL = Alu.Sub8(CL, 0x28);
    // AND CL,0xfb (1000_4E63 / 0x14E63)
    // CL &= 0xFB;
    CL = Alu.And8(CL, 0xFB);
    // ADD AL,CL (1000_4E66 / 0x14E66)
    // AL += CL;
    AL = Alu.Add8(AL, CL);
    // CMP AL,0x17 (1000_4E68 / 0x14E68)
    Alu.Sub8(AL, 0x17);
    // JC 0x1000:4e6e (1000_4E6A / 0x14E6A)
    if(CarryFlag) {
      goto label_1000_4E6E_14E6E;
    }
    // MOV AL,0x17 (1000_4E6C / 0x14E6C)
    AL = 0x17;
    label_1000_4E6E_14E6E:
    // MOV [0x196a],AX (1000_4E6E / 0x14E6E)
    UInt16[DS, 0x196A] = AX;
    // XCHG DI,SI (1000_4E71 / 0x14E71)
    ushort tmp_1000_4E71 = DI;
    DI = SI;
    SI = tmp_1000_4E71;
    // CALL 0x1000:4ded (1000_4E73 / 0x14E73)
    NearCall(cs1, 0x4E76, unknown_1000_4DED_14DED);
    // XCHG DI,SI (1000_4E76 / 0x14E76)
    ushort tmp_1000_4E76 = DI;
    DI = SI;
    SI = tmp_1000_4E76;
    label_1000_4E78_14E78:
    // MOV AX,[0x196a] (1000_4E78 / 0x14E78)
    AX = UInt16[DS, 0x196A];
    // OR AX,AX (1000_4E7B / 0x14E7B)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:4e8c (1000_4E7D / 0x14E7D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4E8C / 0x14E8C)
      return NearRet();
    }
    // MOV CX,word ptr [0x4733] (1000_4E7F / 0x14E7F)
    CX = UInt16[DS, 0x4733];
    // MOV CL,byte ptr [0x46ff] (1000_4E83 / 0x14E83)
    CL = UInt8[DS, 0x46FF];
    // XOR CH,CH (1000_4E87 / 0x14E87)
    CH = 0;
    // JCXZ 0x1000:4e8c (1000_4E89 / 0x14E89)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_4E8C / 0x14E8C)
      return NearRet();
    }
    // NOP  (1000_4E8B / 0x14E8B)
    
    label_1000_4E8C_14E8C:
    // RET  (1000_4E8C / 0x14E8C)
    return NearRet();
  }
  
  public Action unknown_1000_4EC6_14EC6(int gotoTarget) {
    label_1000_4EC6_14EC6:
    // PUSH BX (1000_4EC6 / 0x14EC6)
    Stack.Push(BX);
    // MOV BX,word ptr [0x487e] (1000_4EC7 / 0x14EC7)
    BX = UInt16[DS, 0x487E];
    // CMP BX,0x2 (1000_4ECB / 0x14ECB)
    Alu.Sub16(BX, 0x2);
    // JC 0x1000:4eed (1000_4ECE / 0x14ECE)
    if(CarryFlag) {
      goto label_1000_4EED_14EED;
    }
    // AND AL,0xf (1000_4ED0 / 0x14ED0)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,0x8 (1000_4ED2 / 0x14ED2)
    Alu.Sub8(AL, 0x8);
    // MOV AX,[0xdc00] (1000_4ED4 / 0x14ED4)
    AX = UInt16[DS, 0xDC00];
    // JNC 0x1000:4ef3 (1000_4ED7 / 0x14ED7)
    if(!CarryFlag) {
      goto label_1000_4EF3_14EF3;
    }
    // CMP AX,0x2 (1000_4ED9 / 0x14ED9)
    Alu.Sub16(AX, 0x2);
    // JBE 0x1000:4eed (1000_4EDC / 0x14EDC)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_4EED_14EED;
    }
    // MOV BX,0x5 (1000_4EDE / 0x14EDE)
    BX = 0x5;
    // CMP AX,0x4 (1000_4EE1 / 0x14EE1)
    Alu.Sub16(AX, 0x4);
    // JBE 0x1000:4eed (1000_4EE4 / 0x14EE4)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_4EED_14EED;
    }
    // MOV BX,0x2 (1000_4EE6 / 0x14EE6)
    BX = 0x2;
    // MOV word ptr [0x487e],BX (1000_4EE9 / 0x14EE9)
    UInt16[DS, 0x487E] = BX;
    label_1000_4EED_14EED:
    // MOV word ptr [0xdc02],BX (1000_4EED / 0x14EED)
    UInt16[DS, 0xDC02] = BX;
    // POP BX (1000_4EF1 / 0x14EF1)
    BX = Stack.Pop();
    // RET  (1000_4EF2 / 0x14EF2)
    return NearRet();
    label_1000_4EF3_14EF3:
    // MOV BX,0x3 (1000_4EF3 / 0x14EF3)
    BX = 0x3;
    // CMP AX,0x2 (1000_4EF6 / 0x14EF6)
    Alu.Sub16(AX, 0x2);
    // JBE 0x1000:4f03 (1000_4EF9 / 0x14EF9)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_4F03_14F03;
    }
    // CMP AX,0x5 (1000_4EFB / 0x14EFB)
    Alu.Sub16(AX, 0x5);
    // JZ 0x1000:4f03 (1000_4EFE / 0x14EFE)
    if(ZeroFlag) {
      goto label_1000_4F03_14F03;
    }
    // MOV BX,0x4 (1000_4F00 / 0x14F00)
    BX = 0x4;
    label_1000_4F03_14F03:
    // MOV word ptr [0xdc02],BX (1000_4F03 / 0x14F03)
    UInt16[DS, 0xDC02] = BX;
    // POP BX (1000_4F07 / 0x14F07)
    BX = Stack.Pop();
    // RET  (1000_4F08 / 0x14F08)
    return NearRet();
  }
  
  public Action unknown_1000_4F0C_14F0C(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4E8E: break;
      case 0: goto entry; break; //
    }
    label_1000_4E8E_14E8E:
    // MOV DX,word ptr [0x4] (1000_4E8E / 0x14E8E)
    DX = UInt16[DS, 0x4];
    // MOV BX,word ptr [0x6] (1000_4E92 / 0x14E92)
    BX = UInt16[DS, 0x6];
    // PUSH word ptr [0x11cc] (1000_4E96 / 0x14E96)
    Stack.Push(UInt16[DS, 0x11CC]);
    // CALL 0x1000:5206 (1000_4E9A / 0x14E9A)
    NearCall(cs1, 0x4E9D, unknown_1000_5206_15206);
    // CALL 0x1000:5206 (1000_4E9D / 0x14E9D)
    NearCall(cs1, 0x4EA0, unknown_1000_5206_15206);
    // CALL 0x1000:5206 (1000_4EA0 / 0x14EA0)
    NearCall(cs1, 0x4EA3, unknown_1000_5206_15206);
    // CALL 0x1000:5206 (1000_4EA3 / 0x14EA3)
    NearCall(cs1, 0x4EA6, unknown_1000_5206_15206);
    // CALL 0x1000:5206 (1000_4EA6 / 0x14EA6)
    NearCall(cs1, 0x4EA9, unknown_1000_5206_15206);
    // CALL 0x1000:5206 (1000_4EA9 / 0x14EA9)
    NearCall(cs1, 0x4EAC, unknown_1000_5206_15206);
    // CALL 0x1000:b532 (1000_4EAC / 0x14EAC)
    NearCall(cs1, 0x4EAF, unknown_1000_B532_1B532);
    // PUSH AX (1000_4EAF / 0x14EAF)
    Stack.Push(AX);
    // CALL 0x1000:5206 (1000_4EB0 / 0x14EB0)
    NearCall(cs1, 0x4EB3, unknown_1000_5206_15206);
    // POP AX (1000_4EB3 / 0x14EB3)
    AX = Stack.Pop();
    // POP word ptr [0x11cc] (1000_4EB4 / 0x14EB4)
    UInt16[DS, 0x11CC] = Stack.Pop();
    // PUSH AX (1000_4EB8 / 0x14EB8)
    Stack.Push(AX);
    // CALL 0x1000:b532 (1000_4EB9 / 0x14EB9)
    NearCall(cs1, 0x4EBC, unknown_1000_B532_1B532);
    // PUSH AX (1000_4EBC / 0x14EBC)
    Stack.Push(AX);
    // CALL 0x1000:41e1 (1000_4EBD / 0x14EBD)
    NearCall(cs1, 0x4EC0, unknown_1000_41E1_141E1);
    // POP AX (1000_4EC0 / 0x14EC0)
    AX = Stack.Pop();
    // POP BX (1000_4EC1 / 0x14EC1)
    BX = Stack.Pop();
    // ADD AL,BL (1000_4EC2 / 0x14EC2)
    // AL += BL;
    AL = Alu.Add8(AL, BL);
    // SHR AL,1 (1000_4EC4 / 0x14EC4)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    entry:
    label_1000_4F0C_14F0C:
    // CMP byte ptr [0x4727],0x0 (1000_4F0C / 0x14F0C)
    Alu.Sub8(UInt8[DS, 0x4727], 0x0);
    // JZ 0x1000:4f33 (1000_4F11 / 0x14F11)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4F33 / 0x14F33)
      return NearRet();
    }
    // CMP byte ptr [0x11ca],0x0 (1000_4F13 / 0x14F13)
    Alu.Sub8(UInt8[DS, 0x11CA], 0x0);
    // JNZ 0x1000:4f33 (1000_4F18 / 0x14F18)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4F33 / 0x14F33)
      return NearRet();
    }
    // MOV word ptr [0x1c06],0x80 (1000_4F1A / 0x14F1A)
    UInt16[DS, 0x1C06] = 0x80;
    // MOV AX,0xdbec (1000_4F20 / 0x14F20)
    AX = 0xDBEC;
    // PUSH AX (1000_4F23 / 0x14F23)
    Stack.Push(AX);
    // CALL 0x1000:ca60 (1000_4F24 / 0x14F24)
    NearCall(cs1, 0x4F27, hnm_do_frame_ida_1000_CA60_1CA60);
    // MOV AX,[0xce7a] (1000_4F27 / 0x14F27)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,word ptr [0x4729] (1000_4F2A / 0x14F2A)
    // AX -= UInt16[DS, 0x4729];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4729]);
    // CMP AX,0x300 (1000_4F2E / 0x14F2E)
    Alu.Sub16(AX, 0x300);
    // JNC 0x1000:4f34 (1000_4F31 / 0x14F31)
    if(!CarryFlag) {
      goto label_1000_4F34_14F34;
    }
    label_1000_4F33_14F33:
    // RET  (1000_4F33 / 0x14F33)
    return NearRet();
    label_1000_4F34_14F34:
    // MOV AX,[0xce7a] (1000_4F34 / 0x14F34)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0x4729],AX (1000_4F37 / 0x14F37)
    UInt16[DS, 0x4729] = AX;
    // CALL 0x1000:4b3b (1000_4F3A / 0x14F3A)
    NearCall(cs1, 0x4F3D, unknown_1000_4B3B_14B3B);
    // CALL 0x1000:4a1a (1000_4F3D / 0x14F3D)
    NearCall(cs1, 0x4F40, unknown_1000_4A1A_14A1A);
    // CALL 0x1000:407e (1000_4F40 / 0x14F40)
    NearCall(cs1, 0x4F43, unknown_1000_407E_1407E);
    // CALL 0x1000:4a00 (1000_4F43 / 0x14F43)
    NearCall(cs1, 0x4F46, unknown_1000_4A00_14A00);
    // CALL 0x1000:b58b (1000_4F46 / 0x14F46)
    NearCall(cs1, 0x4F49, map_func_ida_1000_B58B_1B58B);
    // MOV SI,word ptr [0x11c5] (1000_4F49 / 0x14F49)
    SI = UInt16[DS, 0x11C5];
    // CMP DI,word ptr [SI + 0x6] (1000_4F4D / 0x14F4D)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x6)]);
    // JZ 0x1000:4fb0 (1000_4F50 / 0x14F50)
    if(ZeroFlag) {
      goto label_1000_4FB0_14FB0;
    }
    // CALL 0x1000:2e52 (1000_4F52 / 0x14F52)
    NearCall(cs1, 0x4F55, unknown_1000_2E52_12E52);
    // CMP byte ptr [0x47a7],0x0 (1000_4F55 / 0x14F55)
    Alu.Sub8(UInt8[DS, 0x47A7], 0x0);
    // JNZ 0x1000:4f33 (1000_4F5A / 0x14F5A)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_4F33 / 0x14F33)
      return NearRet();
    }
    // CMP byte ptr [0x4728],0x0 (1000_4F5C / 0x14F5C)
    Alu.Sub8(UInt8[DS, 0x4728], 0x0);
    // JS 0x1000:4fad (1000_4F61 / 0x14F61)
    if(SignFlag) {
      // JS target is JMP, inlining.
      // JMP 0x1000:4e8e (1000_4FAD / 0x14FAD)
      goto label_1000_4E8E_14E8E;
    }
    // JZ 0x1000:4f70 (1000_4F63 / 0x14F63)
    if(ZeroFlag) {
      goto label_1000_4F70_14F70;
    }
    // MOV byte ptr [0x4728],0x0 (1000_4F65 / 0x14F65)
    UInt8[DS, 0x4728] = 0x0;
    // CALL 0x1000:5b5d (1000_4F6A / 0x14F6A)
    NearCall(cs1, 0x4F6D, unknown_1000_5B5D_15B5D);
    // CALL 0x1000:49d9 (1000_4F6D / 0x14F6D)
    throw FailAsUntested("Could not find a valid function at address 1000_49D9 / 0x149D9");
    label_1000_4F70_14F70:
    // CALL 0x1000:407e (1000_4F70 / 0x14F70)
    NearCall(cs1, 0x4F73, unknown_1000_407E_1407E);
    // CALL 0x1000:62d6 (1000_4F73 / 0x14F73)
    NearCall(cs1, 0x4F76, unknown_1000_62D6_162D6);
    // JC 0x1000:4fad (1000_4F76 / 0x14F76)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:4e8e (1000_4FAD / 0x14FAD)
      goto label_1000_4E8E_14E8E;
    }
    // CMP DX,0xd6 (1000_4F78 / 0x14F78)
    Alu.Sub16(DX, 0xD6);
    // JL 0x1000:4f8e (1000_4F7C / 0x14F7C)
    if(SignFlag != OverflowFlag) {
      goto label_1000_4F8E_14F8E;
    }
    // CMP BX,0xa (1000_4F7E / 0x14F7E)
    Alu.Sub16(BX, 0xA);
    // JL 0x1000:4f8e (1000_4F81 / 0x14F81)
    if(SignFlag != OverflowFlag) {
      goto label_1000_4F8E_14F8E;
    }
    // CMP DX,0x132 (1000_4F83 / 0x14F83)
    Alu.Sub16(DX, 0x132);
    // JGE 0x1000:4f8e (1000_4F87 / 0x14F87)
    if(SignFlag == OverflowFlag) {
      goto label_1000_4F8E_14F8E;
    }
    // CMP BX,0x36 (1000_4F89 / 0x14F89)
    Alu.Sub16(BX, 0x36);
    // JL 0x1000:4f95 (1000_4F8C / 0x14F8C)
    if(SignFlag != OverflowFlag) {
      goto label_1000_4F95_14F95;
    }
    label_1000_4F8E_14F8E:
    // MOV byte ptr [0x4728],0x1 (1000_4F8E / 0x14F8E)
    UInt8[DS, 0x4728] = 0x1;
    // JMP 0x1000:4fad (1000_4F93 / 0x14F93)
    // JMP target is JMP, inlining.
    // JMP 0x1000:4e8e (1000_4FAD / 0x14FAD)
    goto label_1000_4E8E_14E8E;
    label_1000_4F95_14F95:
    // CMP byte ptr [0x11ca],0x0 (1000_4F95 / 0x14F95)
    Alu.Sub8(UInt8[DS, 0x11CA], 0x0);
    // JNZ 0x1000:4fad (1000_4F9A / 0x14F9A)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:4e8e (1000_4FAD / 0x14FAD)
      goto label_1000_4E8E_14E8E;
    }
    // DEC BX (1000_4F9C / 0x14F9C)
    BX = Alu.Dec16(BX);
    // DEC DX (1000_4F9D / 0x14F9D)
    DX = Alu.Dec16(DX);
    // CALL 0x1000:c137 (1000_4F9E / 0x14F9E)
    NearCall(cs1, 0x4FA1, load_icons_sprites_ida_1000_C137_1C137);
    // MOV AX,0x30 (1000_4FA1 / 0x14FA1)
    AX = 0x30;
    // CALL 0x1000:c085 (1000_4FA4 / 0x14FA4)
    NearCall(cs1, 0x4FA7, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085);
    // CALL 0x1000:c22f (1000_4FA7 / 0x14FA7)
    NearCall(cs1, 0x4FAA, draw_sprite_ida_1000_C22F_1C22F);
    // CALL 0x1000:c07c (1000_4FAA / 0x14FAA)
    NearCall(cs1, 0x4FAD, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    label_1000_4FAD_14FAD:
    // JMP 0x1000:4e8e (1000_4FAD / 0x14FAD)
    goto label_1000_4E8E_14E8E;
    label_1000_4FB0_14FB0:
    // MOV word ptr [0x1c06],0x0 (1000_4FB0 / 0x14FB0)
    UInt16[DS, 0x1C06] = 0x0;
    // MOV AL,[0x11c9] (1000_4FB6 / 0x14FB6)
    AL = UInt8[DS, 0x11C9];
    // AND AL,0x1 (1000_4FB9 / 0x14FB9)
    // AL &= 0x1;
    AL = Alu.And8(AL, 0x1);
    // MOV [0x4732],AL (1000_4FBB / 0x14FBB)
    UInt8[DS, 0x4732] = AL;
    // JNZ 0x1000:4fc3 (1000_4FBE / 0x14FBE)
    if(!ZeroFlag) {
      goto label_1000_4FC3_14FC3;
    }
    // CALL 0x1000:ca01 (1000_4FC0 / 0x14FC0)
    NearCall(cs1, 0x4FC3, hnm_close_resource_ida_1000_CA01_1CA01);
    label_1000_4FC3_14FC3:
    // CALL 0x1000:e3cc (1000_4FC3 / 0x14FC3)
    NearCall(cs1, 0x4FC6, unknown_1000_E3CC_1E3CC);
    // MOV [0xc5],AL (1000_4FC6 / 0x14FC6)
    UInt8[DS, 0xC5] = AL;
    // XOR AL,AL (1000_4FC9 / 0x14FC9)
    AL = 0;
    // MOV [0x4727],AL (1000_4FCB / 0x14FCB)
    UInt8[DS, 0x4727] = AL;
    // XCHG byte ptr [0x11c9],AL (1000_4FCE / 0x14FCE)
    byte tmp_1000_4FCE = UInt8[DS, 0x11C9];
    UInt8[DS, 0x11C9] = AL;
    AL = tmp_1000_4FCE;
    // AND AL,0x3 (1000_4FD2 / 0x14FD2)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // DEC AL (1000_4FD4 / 0x14FD4)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:4fdf (1000_4FD6 / 0x14FD6)
    if(!ZeroFlag) {
      goto label_1000_4FDF_14FDF;
    }
    // MOV DI,word ptr [0x11c5] (1000_4FD8 / 0x14FD8)
    DI = UInt16[DS, 0x11C5];
    // INC byte ptr [DI + 0x15] (1000_4FDC / 0x14FDC)
    UInt8[DS, (ushort)(DI + 0x15)] = Alu.Inc8(UInt8[DS, (ushort)(DI + 0x15)]);
    label_1000_4FDF_14FDF:
    // CALL 0x1000:4ac4 (1000_4FDF / 0x14FDF)
    NearCall(cs1, 0x4FE2, SetUnknown11CATo0_1000_4AC4_14AC4);
    // CALL 0x1000:dbb2 (1000_4FE2 / 0x14FE2)
    NearCall(cs1, 0x4FE5, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:d717 (1000_4FE5 / 0x14FE5)
    NearCall(cs1, 0x4FE8, unknown_1000_D717_1D717);
    // MOV DI,word ptr [0x11c5] (1000_4FE8 / 0x14FE8)
    DI = UInt16[DS, 0x11C5];
    // MOV BX,word ptr [DI + 0x4] (1000_4FEC / 0x14FEC)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV DX,word ptr [DI + 0x2] (1000_4FEF / 0x14FEF)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV word ptr [0x11c5],0x0 (1000_4FF2 / 0x14FF2)
    UInt16[DS, 0x11C5] = 0x0;
    // JMP 0x1000:4002 (1000_4FF8 / 0x14FF8)
    // Jump converted to non entry function call
    return unknown_1000_3F1F_13F1F(0x14002 - cs1 * 0x10);
  }
  
  public Action unknown_1000_503C_1503C(int gotoTarget) {
    label_1000_503C_1503C:
    // MOV byte ptr [0xfd],0x0 (1000_503C / 0x1503C)
    UInt8[DS, 0xFD] = 0x0;
    // MOV byte ptr [0x2b],0x0 (1000_5041 / 0x15041)
    UInt8[DS, 0x2B] = 0x0;
    // TEST byte ptr [DI + 0xa],0x2 (1000_5046 / 0x15046)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:5058 (1000_504A / 0x1504A)
    if(!ZeroFlag) {
      goto label_1000_5058_15058;
    }
    // CALL 0x1000:5d36 (1000_504C / 0x1504C)
    NearCall(cs1, 0x504F, unknown_1000_5D36_15D36);
    // JC 0x1000:5081 (1000_504F / 0x1504F)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5081 / 0x15081)
      return NearRet();
    }
    // CALL 0x1000:5098 (1000_5051 / 0x15051)
    throw FailAsUntested("Could not find a valid function at address 1000_5098 / 0x15098");
    // OR DX,DX (1000_5054 / 0x15054)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:507a (1000_5056 / 0x15056)
    if(ZeroFlag) {
      goto label_1000_507A_1507A;
    }
    label_1000_5058_15058:
    // INC byte ptr [0x2b] (1000_5058 / 0x15058)
    UInt8[DS, 0x2B] = Alu.Inc8(UInt8[DS, 0x2B]);
    // CALL 0x1000:6144 (1000_505C / 0x1505C)
    throw FailAsUntested("Could not find a valid function at address 1000_6144 / 0x16144");
    // MOV AL,byte ptr [DI + 0x8] (1000_505F / 0x1505F)
    AL = UInt8[DS, (ushort)(DI + 0x8)];
    // MOV AH,0x2f (1000_5062 / 0x15062)
    AH = 0x2F;
    // CMP AL,0x20 (1000_5064 / 0x15064)
    Alu.Sub8(AL, 0x20);
    // JC 0x1000:5075 (1000_5066 / 0x15066)
    if(CarryFlag) {
      goto label_1000_5075_15075;
    }
    // INC AH (1000_5068 / 0x15068)
    AH = Alu.Inc8(AH);
    // CMP AL,0x30 (1000_506A / 0x1506A)
    Alu.Sub8(AL, 0x30);
    // JZ 0x1000:5075 (1000_506C / 0x1506C)
    if(ZeroFlag) {
      goto label_1000_5075_15075;
    }
    // SUB AL,0x28 (1000_506E / 0x1506E)
    // AL -= 0x28;
    AL = Alu.Sub8(AL, 0x28);
    // JC 0x1000:5075 (1000_5070 / 0x15070)
    if(CarryFlag) {
      goto label_1000_5075_15075;
    }
    // ADD AH,0x3 (1000_5072 / 0x15072)
    // AH += 0x3;
    AH = Alu.Add8(AH, 0x3);
    label_1000_5075_15075:
    // MOV byte ptr [0x11dd],AH (1000_5075 / 0x15075)
    UInt8[DS, 0x11DD] = AH;
    // RET  (1000_5079 / 0x15079)
    return NearRet();
    label_1000_507A_1507A:
    // JCXZ 0x1000:5081 (1000_507A / 0x1507A)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_5081 / 0x15081)
      return NearRet();
    }
    // MOV byte ptr [0x46d9],0x4 (1000_507C / 0x1507C)
    UInt8[DS, 0x46D9] = 0x4;
    label_1000_5081_15081:
    // RET  (1000_5081 / 0x15081)
    return NearRet();
  }
  
  public Action unknown_1000_50BE_150BE(int gotoTarget) {
    label_1000_50BE_150BE:
    // MOV byte ptr [0x11cb],0x0 (1000_50BE / 0x150BE)
    UInt8[DS, 0x11CB] = 0x0;
    // RET  (1000_50C3 / 0x150C3)
    return NearRet();
  }
  
  public Action unknown_1000_5124_15124(int gotoTarget) {
    label_1000_5124_15124:
    // PUSH DI (1000_5124 / 0x15124)
    Stack.Push(DI);
    // CALL 0x1000:407e (1000_5125 / 0x15125)
    NearCall(cs1, 0x5128, unknown_1000_407E_1407E);
    // MOV CX,word ptr [DI + 0x4] (1000_5128 / 0x15128)
    CX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV DI,word ptr [DI + 0x2] (1000_512B / 0x1512B)
    DI = UInt16[DS, (ushort)(DI + 0x2)];
    // CALL 0x1000:5133 (1000_512E / 0x1512E)
    NearCall(cs1, 0x5131, unknown_1000_5133_15133);
    // POP DI (1000_5131 / 0x15131)
    DI = Stack.Pop();
    // RET  (1000_5132 / 0x15132)
    return NearRet();
  }
  
  public Action unknown_1000_5133_15133(int gotoTarget) {
    label_1000_5133_15133:
    // SUB BX,CX (1000_5133 / 0x15133)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // NEG BX (1000_5135 / 0x15135)
    BX = Alu.Sub16(0, BX);
    // SUB DX,DI (1000_5137 / 0x15137)
    // DX -= DI;
    DX = Alu.Sub16(DX, DI);
    // NEG DX (1000_5139 / 0x15139)
    DX = Alu.Sub16(0, DX);
    // CMP BX,-0x80 (1000_513B / 0x1513B)
    Alu.Sub16(BX, 0xFF80);
    // JL 0x1000:5146 (1000_513E / 0x1513E)
    if(SignFlag != OverflowFlag) {
      goto label_1000_5146_15146;
    }
    // CMP BX,0x80 (1000_5140 / 0x15140)
    Alu.Sub16(BX, 0x80);
    // JL 0x1000:514a (1000_5144 / 0x15144)
    if(SignFlag != OverflowFlag) {
      goto label_1000_514A_1514A;
    }
    label_1000_5146_15146:
    // SAR BX,1 (1000_5146 / 0x15146)
    BX = Alu.Sar16(BX, 1);
    // SAR DX,1 (1000_5148 / 0x15148)
    DX = Alu.Sar16(DX, 1);
    label_1000_514A_1514A:
    // MOV BH,BL (1000_514A / 0x1514A)
    BH = BL;
    // XOR BL,BL (1000_514C / 0x1514C)
    BL = 0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_514E_1514E(0);
  }
  
  public Action unknown_1000_514E_1514E(int gotoTarget) {
    label_1000_514E_1514E:
    // OR BX,BX (1000_514E / 0x1514E)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // MOV AX,BX (1000_5150 / 0x15150)
    AX = BX;
    // JNS 0x1000:5156 (1000_5152 / 0x15152)
    if(!SignFlag) {
      goto label_1000_5156_15156;
    }
    // NEG AX (1000_5154 / 0x15154)
    AX = Alu.Sub16(0, AX);
    label_1000_5156_15156:
    // OR DX,DX (1000_5156 / 0x15156)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // MOV DI,DX (1000_5158 / 0x15158)
    DI = DX;
    // MOV CX,DX (1000_515A / 0x1515A)
    CX = DX;
    // JNS 0x1000:5160 (1000_515C / 0x1515C)
    if(!SignFlag) {
      goto label_1000_5160_15160;
    }
    // NEG CX (1000_515E / 0x1515E)
    CX = Alu.Sub16(0, CX);
    label_1000_5160_15160:
    // CMP CX,AX (1000_5160 / 0x15160)
    Alu.Sub16(CX, AX);
    // JC 0x1000:5180 (1000_5162 / 0x15162)
    if(CarryFlag) {
      goto label_1000_5180_15180;
    }
    // CMP CX,0x1 (1000_5164 / 0x15164)
    Alu.Sub16(CX, 0x1);
    // JC 0x1000:517f (1000_5167 / 0x15167)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_517F / 0x1517F)
      return NearRet();
    }
    // MOV AX,0x20 (1000_5169 / 0x15169)
    AX = 0x20;
    // MOV CX,DX (1000_516C / 0x1516C)
    CX = DX;
    // IMUL BX (1000_516E / 0x1516E)
    Cpu.IMul16(BX);
    // IDIV CX (1000_5170 / 0x15170)
    Cpu.IDiv16(CX);
    // MOV DX,DI (1000_5172 / 0x15172)
    DX = DI;
    // OR CX,CX (1000_5174 / 0x15174)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JS 0x1000:517c (1000_5176 / 0x15176)
    if(SignFlag) {
      goto label_1000_517C_1517C;
    }
    // ADD AL,0x40 (1000_5178 / 0x15178)
    // AL += 0x40;
    AL = Alu.Add8(AL, 0x40);
    // CLC  (1000_517A / 0x1517A)
    CarryFlag = false;
    // RET  (1000_517B / 0x1517B)
    return NearRet();
    label_1000_517C_1517C:
    // ADD AL,0xc0 (1000_517C / 0x1517C)
    // AL += 0xC0;
    AL = Alu.Add8(AL, 0xC0);
    // CLC  (1000_517E / 0x1517E)
    CarryFlag = false;
    label_1000_517F_1517F:
    // RET  (1000_517F / 0x1517F)
    return NearRet();
    label_1000_5180_15180:
    // CMP AX,0x1 (1000_5180 / 0x15180)
    Alu.Sub16(AX, 0x1);
    // JC 0x1000:517f (1000_5183 / 0x15183)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_517F / 0x1517F)
      return NearRet();
    }
    // MOV AX,0x20 (1000_5185 / 0x15185)
    AX = 0x20;
    // IMUL DX (1000_5188 / 0x15188)
    Cpu.IMul16(DX);
    // IDIV BX (1000_518A / 0x1518A)
    Cpu.IDiv16(BX);
    // MOV DX,DI (1000_518C / 0x1518C)
    DX = DI;
    // OR BX,BX (1000_518E / 0x1518E)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JS 0x1000:5194 (1000_5190 / 0x15190)
    if(SignFlag) {
      goto label_1000_5194_15194;
    }
    // SUB AL,0x80 (1000_5192 / 0x15192)
    // AL -= 0x80;
    AL = Alu.Sub8(AL, 0x80);
    label_1000_5194_15194:
    // NEG AL (1000_5194 / 0x15194)
    AL = Alu.Sub8(0, AL);
    // CLC  (1000_5196 / 0x15196)
    CarryFlag = false;
    // RET  (1000_5197 / 0x15197)
    return NearRet();
  }
  
  public Action unknown_1000_5198_15198(int gotoTarget) {
    label_1000_5198_15198:
    // MOV BX,AX (1000_5198 / 0x15198)
    BX = AX;
    // ADD BL,0x20 (1000_519A / 0x1519A)
    // BL += 0x20;
    BL = Alu.Add8(BL, 0x20);
    // MOV BH,BL (1000_519D / 0x1519D)
    BH = BL;
    // AND BH,0x7f (1000_519F / 0x1519F)
    // BH &= 0x7F;
    BH = Alu.And8(BH, 0x7F);
    // CMP BH,0x40 (1000_51A2 / 0x151A2)
    Alu.Sub8(BH, 0x40);
    // JC 0x1000:51ba (1000_51A5 / 0x151A5)
    if(CarryFlag) {
      goto label_1000_51BA_151BA;
    }
    // MOV DX,0x20 (1000_51A7 / 0x151A7)
    DX = 0x20;
    // SUB AL,0x40 (1000_51AA / 0x151AA)
    // AL -= 0x40;
    AL = Alu.Sub8(AL, 0x40);
    // OR BL,BL (1000_51AC / 0x151AC)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JNS 0x1000:51b6 (1000_51AE / 0x151AE)
    if(!SignFlag) {
      goto label_1000_51B6_151B6;
    }
    // NEG DX (1000_51B0 / 0x151B0)
    DX = Alu.Sub16(0, DX);
    // SUB AL,0x80 (1000_51B2 / 0x151B2)
    // AL -= 0x80;
    AL = Alu.Sub8(AL, 0x80);
    // NEG AL (1000_51B4 / 0x151B4)
    AL = Alu.Sub8(0, AL);
    label_1000_51B6_151B6:
    // CBW  (1000_51B6 / 0x151B6)
    AX = (ushort)((short)((sbyte)AL));
    // MOV BX,AX (1000_51B7 / 0x151B7)
    BX = AX;
    // RET  (1000_51B9 / 0x151B9)
    return NearRet();
    label_1000_51BA_151BA:
    // OR BL,BL (1000_51BA / 0x151BA)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // MOV BX,0xffe0 (1000_51BC / 0x151BC)
    BX = 0xFFE0;
    // JNS 0x1000:51c7 (1000_51BF / 0x151BF)
    if(!SignFlag) {
      goto label_1000_51C7_151C7;
    }
    // SUB AL,0x80 (1000_51C1 / 0x151C1)
    // AL -= 0x80;
    AL = Alu.Sub8(AL, 0x80);
    // NEG AL (1000_51C3 / 0x151C3)
    AL = Alu.Sub8(0, AL);
    // NEG BX (1000_51C5 / 0x151C5)
    BX = Alu.Sub16(0, BX);
    label_1000_51C7_151C7:
    // CBW  (1000_51C7 / 0x151C7)
    AX = (ushort)((short)((sbyte)AL));
    // MOV DX,AX (1000_51C8 / 0x151C8)
    DX = AX;
    // RET  (1000_51CA / 0x151CA)
    return NearRet();
  }
  
  public Action unknown_1000_51CB_151CB(int gotoTarget) {
    label_1000_51CB_151CB:
    // CMP byte ptr [0x11cb],0x0 (1000_51CB / 0x151CB)
    Alu.Sub8(UInt8[DS, 0x11CB], 0x0);
    // JNZ 0x1000:51d9 (1000_51D0 / 0x151D0)
    if(!ZeroFlag) {
      goto label_1000_51D9_151D9;
    }
    // CMP byte ptr [0x11c8],0x0 (1000_51D2 / 0x151D2)
    Alu.Sub8(UInt8[DS, 0x11C8], 0x0);
    // JZ 0x1000:51f5 (1000_51D7 / 0x151D7)
    if(ZeroFlag) {
      goto label_1000_51F5_151F5;
    }
    label_1000_51D9_151D9:
    // CMP BX,-0x4d (1000_51D9 / 0x151D9)
    Alu.Sub16(BX, 0xFFB3);
    // JL 0x1000:51e3 (1000_51DC / 0x151DC)
    if(SignFlag != OverflowFlag) {
      goto label_1000_51E3_151E3;
    }
    // CMP BX,0x4d (1000_51DE / 0x151DE)
    Alu.Sub16(BX, 0x4D);
    // JLE 0x1000:5205 (1000_51E1 / 0x151E1)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_5205 / 0x15205)
      return NearRet();
    }
    label_1000_51E3_151E3:
    // MOV AL,[0x11c7] (1000_51E3 / 0x151E3)
    AL = UInt8[DS, 0x11C7];
    // MOV AH,AL (1000_51E6 / 0x151E6)
    AH = AL;
    // SUB AH,0x40 (1000_51E8 / 0x151E8)
    // AH -= 0x40;
    AH = Alu.Sub8(AH, 0x40);
    // XOR AH,BH (1000_51EB / 0x151EB)
    // AH ^= BH;
    AH = Alu.Xor8(AH, BH);
    // JS 0x1000:5205 (1000_51ED / 0x151ED)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_5205 / 0x15205)
      return NearRet();
    }
    // AND AL,0x80 (1000_51EF / 0x151EF)
    // AL &= 0x80;
    AL = Alu.And8(AL, 0x80);
    // OR AL,0x40 (1000_51F1 / 0x151F1)
    // AL |= 0x40;
    AL = Alu.Or8(AL, 0x40);
    // JMP 0x1000:5202 (1000_51F3 / 0x151F3)
    goto label_1000_5202_15202;
    label_1000_51F5_151F5:
    // MOV DI,word ptr [0x11c5] (1000_51F5 / 0x151F5)
    DI = UInt16[DS, 0x11C5];
    // PUSH BX (1000_51F9 / 0x151F9)
    Stack.Push(BX);
    // PUSH DX (1000_51FA / 0x151FA)
    Stack.Push(DX);
    // CALL 0x1000:5124 (1000_51FB / 0x151FB)
    NearCall(cs1, 0x51FE, unknown_1000_5124_15124);
    // POP DX (1000_51FE / 0x151FE)
    DX = Stack.Pop();
    // POP BX (1000_51FF / 0x151FF)
    BX = Stack.Pop();
    // JC 0x1000:5205 (1000_5200 / 0x15200)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5205 / 0x15205)
      return NearRet();
    }
    label_1000_5202_15202:
    // MOV [0x11c7],AL (1000_5202 / 0x15202)
    UInt8[DS, 0x11C7] = AL;
    label_1000_5205_15205:
    // RET  (1000_5205 / 0x15205)
    return NearRet();
  }
  
  public Action unknown_1000_5206_15206(int gotoTarget) {
    label_1000_5206_15206:
    // CALL 0x1000:51cb (1000_5206 / 0x15206)
    NearCall(cs1, 0x5209, unknown_1000_51CB_151CB);
    // MOV AL,[0x11c7] (1000_5209 / 0x15209)
    AL = UInt8[DS, 0x11C7];
    // PUSH DX (1000_520C / 0x1520C)
    Stack.Push(DX);
    // PUSH BX (1000_520D / 0x1520D)
    Stack.Push(BX);
    // SHL BX,1 (1000_520E / 0x1520E)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // JNS 0x1000:5214 (1000_5210 / 0x15210)
    if(!SignFlag) {
      goto label_1000_5214_15214;
    }
    // NEG BX (1000_5212 / 0x15212)
    BX = Alu.Sub16(0, BX);
    label_1000_5214_15214:
    // MOV BP,word ptr [BX + 0x4880] (1000_5214 / 0x15214)
    BP = UInt16[DS, (ushort)(BX + 0x4880)];
    // CALL 0x1000:5198 (1000_5218 / 0x15218)
    NearCall(cs1, 0x521B, unknown_1000_5198_15198);
    // MOV CX,0x20 (1000_521B / 0x1521B)
    CX = 0x20;
    // MOV AX,BP (1000_521E / 0x1521E)
    AX = BP;
    // IMUL DX (1000_5220 / 0x15220)
    Cpu.IMul16(DX);
    // IDIV CX (1000_5222 / 0x15222)
    Cpu.IDiv16(CX);
    // XCHG AX,BX (1000_5224 / 0x15224)
    ushort tmp_1000_5224 = AX;
    AX = BX;
    BX = tmp_1000_5224;
    // IMUL BP (1000_5225 / 0x15225)
    Cpu.IMul16(BP);
    // IDIV CX (1000_5227 / 0x15227)
    Cpu.IDiv16(CX);
    // MOV DX,BX (1000_5229 / 0x15229)
    DX = BX;
    // MOV BX,AX (1000_522B / 0x1522B)
    BX = AX;
    // OR AX,AX (1000_522D / 0x1522D)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:5233 (1000_522F / 0x1522F)
    if(!SignFlag) {
      goto label_1000_5233_15233;
    }
    // NEG AX (1000_5231 / 0x15231)
    AX = Alu.Sub16(0, AX);
    label_1000_5233_15233:
    // ADD AX,word ptr [0x11cc] (1000_5233 / 0x15233)
    // AX += UInt16[DS, 0x11CC];
    AX = Alu.Add16(AX, UInt16[DS, 0x11CC]);
    // CMP AH,0x1 (1000_5237 / 0x15237)
    Alu.Sub8(AH, 0x1);
    // JBE 0x1000:524e (1000_523A / 0x1523A)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_524E_1524E;
    }
    // MOV CX,AX (1000_523C / 0x1523C)
    CX = AX;
    // MOV AX,DX (1000_523E / 0x1523E)
    AX = DX;
    // CWD  (1000_5240 / 0x15240)
    DX = (ushort)(AX>=0x8000?0xFFFF:0);
    // MOV DL,AH (1000_5241 / 0x15241)
    DL = AH;
    // MOV AH,AL (1000_5243 / 0x15243)
    AH = AL;
    // XOR AL,AL (1000_5245 / 0x15245)
    AL = 0;
    // IDIV CX (1000_5247 / 0x15247)
    Cpu.IDiv16(CX);
    // MOV DX,AX (1000_5249 / 0x15249)
    DX = AX;
    // MOV AX,0x100 (1000_524B / 0x1524B)
    AX = 0x100;
    label_1000_524E_1524E:
    // MOV [0x11cc],AL (1000_524E / 0x1524E)
    UInt8[DS, 0x11CC] = AL;
    // MOV AL,AH (1000_5251 / 0x15251)
    AL = AH;
    // CBW  (1000_5253 / 0x15253)
    AX = (ushort)((short)((sbyte)AL));
    // OR BX,BX (1000_5254 / 0x15254)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNS 0x1000:525a (1000_5256 / 0x15256)
    if(!SignFlag) {
      goto label_1000_525A_1525A;
    }
    // NEG AX (1000_5258 / 0x15258)
    AX = Alu.Sub16(0, AX);
    label_1000_525A_1525A:
    // POP BX (1000_525A / 0x1525A)
    BX = Stack.Pop();
    // ADD BX,AX (1000_525B / 0x1525B)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // POP AX (1000_525D / 0x1525D)
    AX = Stack.Pop();
    // ADD DX,AX (1000_525E / 0x1525E)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV AX,BX (1000_5260 / 0x15260)
    AX = BX;
    // ADD AX,0x60 (1000_5262 / 0x15262)
    // AX += 0x60;
    AX = Alu.Add16(AX, 0x60);
    // CMP AX,0xc0 (1000_5265 / 0x15265)
    Alu.Sub16(AX, 0xC0);
    // JC 0x1000:5273 (1000_5268 / 0x15268)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5273 / 0x15273)
      return NearRet();
    }
    // ADD byte ptr [0x11c7],0x80 (1000_526A / 0x1526A)
    // UInt8[DS, 0x11C7] += 0x80;
    UInt8[DS, 0x11C7] = Alu.Add8(UInt8[DS, 0x11C7], 0x80);
    // ADD DX,0x8000 (1000_526F / 0x1526F)
    // DX += 0x8000;
    DX = Alu.Add16(DX, 0x8000);
    label_1000_5273_15273:
    // RET  (1000_5273 / 0x15273)
    return NearRet();
  }
  
  public Action unknown_1000_5274_15274(int gotoTarget) {
    label_1000_5274_15274:
    // MOV DX,word ptr [DI + 0x2] (1000_5274 / 0x15274)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_5277 / 0x15277)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // PUSH SI (1000_527A / 0x1527A)
    Stack.Push(SI);
    // MOV AX,0xffff (1000_527B / 0x1527B)
    AX = 0xFFFF;
    // MOV [0xca],AX (1000_527E / 0x1527E)
    UInt16[DS, 0xCA] = AX;
    // MOV [0xd0],AX (1000_5281 / 0x15281)
    UInt16[DS, 0xD0] = AX;
    // MOV [0xd6],AX (1000_5284 / 0x15284)
    UInt16[DS, 0xD6] = AX;
    // MOV [0xdc],AX (1000_5287 / 0x15287)
    UInt16[DS, 0xDC] = AX;
    // MOV [0xe2],AX (1000_528A / 0x1528A)
    UInt16[DS, 0xE2] = AX;
    // MOV SI,0x100 (1000_528D / 0x1528D)
    SI = 0x100;
    label_1000_5290_15290:
    // CMP word ptr [SI],-0x1 (1000_5290 / 0x15290)
    Alu.Sub16(UInt16[DS, SI], 0xFFFF);
    // JZ 0x1000:52fb (1000_5293 / 0x15293)
    if(ZeroFlag) {
      goto label_1000_52FB_152FB;
    }
    // CMP SI,DI (1000_5295 / 0x15295)
    Alu.Sub16(SI, DI);
    // JZ 0x1000:52f6 (1000_5297 / 0x15297)
    if(ZeroFlag) {
      goto label_1000_52F6_152F6;
    }
    // MOV CX,word ptr [SI + 0x2] (1000_5299 / 0x15299)
    CX = UInt16[DS, (ushort)(SI + 0x2)];
    // SUB CX,DX (1000_529C / 0x1529C)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // JNS 0x1000:52a2 (1000_529E / 0x1529E)
    if(!SignFlag) {
      goto label_1000_52A2_152A2;
    }
    // NEG CX (1000_52A0 / 0x152A0)
    CX = Alu.Sub16(0, CX);
    label_1000_52A2_152A2:
    // MOV AX,word ptr [SI + 0x4] (1000_52A2 / 0x152A2)
    AX = UInt16[DS, (ushort)(SI + 0x4)];
    // SUB AX,BX (1000_52A5 / 0x152A5)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JNS 0x1000:52ab (1000_52A7 / 0x152A7)
    if(!SignFlag) {
      goto label_1000_52AB_152AB;
    }
    // NEG AX (1000_52A9 / 0x152A9)
    AX = Alu.Sub16(0, AX);
    label_1000_52AB_152AB:
    // MOV CL,CH (1000_52AB / 0x152AB)
    CL = CH;
    // XOR CH,CH (1000_52AD / 0x152AD)
    CH = 0;
    // CMP CL,AL (1000_52AF / 0x152AF)
    Alu.Sub8(CL, AL);
    // JNC 0x1000:52b5 (1000_52B1 / 0x152B1)
    if(!CarryFlag) {
      goto label_1000_52B5_152B5;
    }
    // MOV CX,AX (1000_52B3 / 0x152B3)
    CX = AX;
    label_1000_52B5_152B5:
    // CMP byte ptr [SI + 0x8],0x28 (1000_52B5 / 0x152B5)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x8)], 0x28);
    // JC 0x1000:52c9 (1000_52B9 / 0x152B9)
    if(CarryFlag) {
      goto label_1000_52C9_152C9;
    }
    // MOV BP,0xe2 (1000_52BB / 0x152BB)
    BP = 0xE2;
    // TEST byte ptr [SI + 0xa],0x80 (1000_52BE / 0x152BE)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x80);
    // JNZ 0x1000:52dd (1000_52C2 / 0x152C2)
    if(!ZeroFlag) {
      goto label_1000_52DD_152DD;
    }
    // MOV BP,0xdc (1000_52C4 / 0x152C4)
    BP = 0xDC;
    // JMP 0x1000:52dd (1000_52C7 / 0x152C7)
    goto label_1000_52DD_152DD;
    label_1000_52C9_152C9:
    // MOV BP,0xd0 (1000_52C9 / 0x152C9)
    BP = 0xD0;
    // TEST byte ptr [SI + 0xa],0x80 (1000_52CC / 0x152CC)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x80);
    // JZ 0x1000:52dd (1000_52D0 / 0x152D0)
    if(ZeroFlag) {
      goto label_1000_52DD_152DD;
    }
    // MOV AL,[0x2a] (1000_52D2 / 0x152D2)
    AL = UInt8[DS, 0x2A];
    // CMP AL,byte ptr [SI + 0xb] (1000_52D5 / 0x152D5)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xB)]);
    // JC 0x1000:52f6 (1000_52D8 / 0x152D8)
    if(CarryFlag) {
      goto label_1000_52F6_152F6;
    }
    // MOV BP,0xd6 (1000_52DA / 0x152DA)
    BP = 0xD6;
    label_1000_52DD_152DD:
    // CMP CX,word ptr [BP + 0x0] (1000_52DD / 0x152DD)
    Alu.Sub16(CX, UInt16[SS, BP]);
    // JNC 0x1000:52e8 (1000_52E0 / 0x152E0)
    if(!CarryFlag) {
      goto label_1000_52E8_152E8;
    }
    // MOV word ptr [BP + 0x0],CX (1000_52E2 / 0x152E2)
    UInt16[SS, BP] = CX;
    // MOV word ptr [BP + 0x2],SI (1000_52E5 / 0x152E5)
    UInt16[SS, (ushort)(BP + 0x2)] = SI;
    label_1000_52E8_152E8:
    // CMP CX,word ptr [0xca] (1000_52E8 / 0x152E8)
    Alu.Sub16(CX, UInt16[DS, 0xCA]);
    // JNC 0x1000:52f6 (1000_52EC / 0x152EC)
    if(!CarryFlag) {
      goto label_1000_52F6_152F6;
    }
    // MOV word ptr [0xca],CX (1000_52EE / 0x152EE)
    UInt16[DS, 0xCA] = CX;
    // MOV word ptr [0xcc],SI (1000_52F2 / 0x152F2)
    UInt16[DS, 0xCC] = SI;
    label_1000_52F6_152F6:
    // ADD SI,0x1c (1000_52F6 / 0x152F6)
    // SI += 0x1C;
    SI = Alu.Add16(SI, 0x1C);
    // JMP 0x1000:5290 (1000_52F9 / 0x152F9)
    goto label_1000_5290_15290;
    label_1000_52FB_152FB:
    // PUSH DI (1000_52FB / 0x152FB)
    Stack.Push(DI);
    // MOV BP,0xde (1000_52FC / 0x152FC)
    BP = 0xDE;
    // CALL 0x1000:5323 (1000_52FF / 0x152FF)
    NearCall(cs1, 0x5302, unknown_1000_5323_15323);
    // MOV BP,0xe4 (1000_5302 / 0x15302)
    BP = 0xE4;
    // CALL 0x1000:5323 (1000_5305 / 0x15305)
    NearCall(cs1, 0x5308, unknown_1000_5323_15323);
    // MOV BP,0xd8 (1000_5308 / 0x15308)
    BP = 0xD8;
    // CALL 0x1000:5323 (1000_530B / 0x1530B)
    NearCall(cs1, 0x530E, unknown_1000_5323_15323);
    // ADD AX,0xda (1000_530E / 0x1530E)
    // AX += 0xDA;
    AX = Alu.Add16(AX, 0xDA);
    // MOV [0x11fd],AX (1000_5311 / 0x15311)
    UInt16[DS, 0x11FD] = AX;
    // MOV BP,0xcc (1000_5314 / 0x15314)
    BP = 0xCC;
    // CALL 0x1000:5323 (1000_5317 / 0x15317)
    NearCall(cs1, 0x531A, unknown_1000_5323_15323);
    // MOV BP,0xd2 (1000_531A / 0x1531A)
    BP = 0xD2;
    // CALL 0x1000:5323 (1000_531D / 0x1531D)
    NearCall(cs1, 0x5320, unknown_1000_5323_15323);
    // POP DI (1000_5320 / 0x15320)
    DI = Stack.Pop();
    // POP SI (1000_5321 / 0x15321)
    SI = Stack.Pop();
    // RET  (1000_5322 / 0x15322)
    return NearRet();
  }
  
  public Action unknown_1000_5323_15323(int gotoTarget) {
    label_1000_5323_15323:
    // PUSH BX (1000_5323 / 0x15323)
    Stack.Push(BX);
    // PUSH DX (1000_5324 / 0x15324)
    Stack.Push(DX);
    // MOV DI,word ptr [BP + 0x0] (1000_5325 / 0x15325)
    DI = UInt16[SS, BP];
    // MOV CX,word ptr [DI + 0x4] (1000_5328 / 0x15328)
    CX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV DI,word ptr [DI + 0x2] (1000_532B / 0x1532B)
    DI = UInt16[DS, (ushort)(DI + 0x2)];
    // PUSH BP (1000_532E / 0x1532E)
    Stack.Push(BP);
    // CALL 0x1000:5133 (1000_532F / 0x1532F)
    NearCall(cs1, 0x5332, unknown_1000_5133_15133);
    // POP BP (1000_5332 / 0x15332)
    BP = Stack.Pop();
    // ADD AL,0x10 (1000_5333 / 0x15333)
    // AL += 0x10;
    AL = Alu.Add8(AL, 0x10);
    // ROL AL,1 (1000_5335 / 0x15335)
    AL = Alu.Rol8(AL, 1);
    // ROL AL,1 (1000_5337 / 0x15337)
    AL = Alu.Rol8(AL, 1);
    // ROL AL,1 (1000_5339 / 0x15339)
    AL = Alu.Rol8(AL, 1);
    // AND AX,0x7 (1000_533B / 0x1533B)
    // AX &= 0x7;
    AX = Alu.And16(AX, 0x7);
    // MOV byte ptr [BP + 0x2],AL (1000_533E / 0x1533E)
    UInt8[SS, (ushort)(BP + 0x2)] = AL;
    // POP DX (1000_5341 / 0x15341)
    DX = Stack.Pop();
    // POP BX (1000_5342 / 0x15342)
    BX = Stack.Pop();
    // RET  (1000_5343 / 0x15343)
    return NearRet();
  }
  
  public Action unknown_1000_541F_1541F(int gotoTarget) {
    label_1000_541F_1541F:
    // PUSH word ptr [0x197c] (1000_541F / 0x1541F)
    Stack.Push(UInt16[DS, 0x197C]);
    // PUSH word ptr [0x197e] (1000_5423 / 0x15423)
    Stack.Push(UInt16[DS, 0x197E]);
    // POP word ptr [0x1982] (1000_5427 / 0x15427)
    UInt16[DS, 0x1982] = Stack.Pop();
    // POP word ptr [0x1980] (1000_542B / 0x1542B)
    UInt16[DS, 0x1980] = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_542F_1542F(0);
  }
  
  public Action unknown_1000_542F_1542F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x542F: goto label_1000_542F_1542F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_542F_1542F:
    // MOV word ptr [0x46fc],0x0 (1000_542F / 0x1542F)
    UInt16[DS, 0x46FC] = 0x0;
    // MOV word ptr [0x479e],0x0 (1000_5435 / 0x15435)
    UInt16[DS, 0x479E] = 0x0;
    // CALL 0x1000:557b (1000_543B / 0x1543B)
    NearCall(cs1, 0x543E, unknown_1000_557B_1557B);
    // MOV DI,0x46e3 (1000_543E / 0x1543E)
    DI = 0x46E3;
    // ADD DX,0x5 (1000_5441 / 0x15441)
    // DX += 0x5;
    DX = Alu.Add16(DX, 0x5);
    // ADD BX,0x7 (1000_5444 / 0x15444)
    // BX += 0x7;
    BX = Alu.Add16(BX, 0x7);
    // MOV word ptr [DI],DX (1000_5447 / 0x15447)
    UInt16[DS, DI] = DX;
    // MOV word ptr [DI + 0x2],BX (1000_5449 / 0x15449)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // ADD DX,0xa0 (1000_544C / 0x1544C)
    // DX += 0xA0;
    DX = Alu.Add16(DX, 0xA0);
    // MOV word ptr [DI + 0x4],DX (1000_5450 / 0x15450)
    UInt16[DS, (ushort)(DI + 0x4)] = DX;
    // ADD BX,0x59 (1000_5453 / 0x15453)
    // BX += 0x59;
    BX = Alu.Add16(BX, 0x59);
    // MOV word ptr [DI + 0x6],BX (1000_5456 / 0x15456)
    UInt16[DS, (ushort)(DI + 0x6)] = BX;
    // MOV SI,0x4710 (1000_5459 / 0x15459)
    SI = 0x4710;
    // ADD DX,0x5 (1000_545C / 0x1545C)
    // DX += 0x5;
    DX = Alu.Add16(DX, 0x5);
    // MOV word ptr [SI + 0x4],DX (1000_545F / 0x1545F)
    UInt16[DS, (ushort)(SI + 0x4)] = DX;
    // ADD BX,0xc (1000_5462 / 0x15462)
    // BX += 0xC;
    BX = Alu.Add16(BX, 0xC);
    // MOV word ptr [SI + 0x6],BX (1000_5465 / 0x15465)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // CALL 0x1000:c13b (1000_5468 / 0x15468)
    NearCall(cs1, 0x546B, unknown_1000_C13B_1C13B);
    // CALL 0x1000:557b (1000_546B / 0x1546B)
    NearCall(cs1, 0x546E, unknown_1000_557B_1557B);
    // MOV AX,0x8d (1000_546E / 0x1546E)
    AX = 0x8D;
    // CALL 0x1000:c22f (1000_5471 / 0x15471)
    NearCall(cs1, 0x5474, draw_sprite_ida_1000_C22F_1C22F);
    // CALL 0x1000:c07c (1000_5474 / 0x15474)
    NearCall(cs1, 0x5477, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:5b8d (1000_5477 / 0x15477)
    NearCall(cs1, 0x547A, unknown_1000_5B8D_15B8D);
    // PUSH word ptr [0xdd00] (1000_547A / 0x1547A)
    Stack.Push(UInt16[DS, 0xDD00]);
    // MOV AX,0x3a (1000_547E / 0x1547E)
    AX = 0x3A;
    // CALL 0x1000:c13e (1000_5481 / 0x15481)
    NearCall(cs1, 0x5484, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:5584 (1000_5484 / 0x15484)
    NearCall(cs1, 0x5487, unknown_1000_5584_15584);
    // PUSH word ptr [0xdbb2] (1000_5487 / 0x15487)
    Stack.Push(UInt16[DS, 0xDBB2]);
    // POP word ptr [0xdd00] (1000_548B / 0x1548B)
    UInt16[DS, 0xDD00] = Stack.Pop();
    // MOV byte ptr [0x46eb],0x40 (1000_548F / 0x1548F)
    UInt8[DS, 0x46EB] = 0x40;
    // CALL 0x1000:b69a (1000_5494 / 0x15494)
    NearCall(cs1, 0x5497, unknown_1000_B69A_1B69A);
    // CALL 0x1000:b6c3 (1000_5497 / 0x15497)
    NearCall(cs1, 0x549A, map_func_ida_1000_B6C3_1B6C3);
    // POP word ptr [0xdd00] (1000_549A / 0x1549A)
    UInt16[DS, 0xDD00] = Stack.Pop();
    // CALL 0x1000:58e4 (1000_549E / 0x1549E)
    NearCall(cs1, 0x54A1, unknown_1000_58E4_158E4);
    // CALL 0x1000:c137 (1000_54A1 / 0x154A1)
    NearCall(cs1, 0x54A4, load_icons_sprites_ida_1000_C137_1C137);
    // CALL 0x1000:5dce (1000_54A4 / 0x154A4)
    NearCall(cs1, 0x54A7, unknown_1000_5DCE_15DCE);
    // CALL 0x1000:5605 (1000_54A7 / 0x154A7)
    NearCall(cs1, 0x54AA, unknown_1000_5605_15605);
    // CALL 0x1000:563e (1000_54AA / 0x154AA)
    NearCall(cs1, 0x54AD, unknown_1000_563E_1563E);
    // MOV word ptr [0x2772],0x5555 (1000_54AD / 0x154AD)
    UInt16[DS, 0x2772] = 0x5555;
    // MOV DX,word ptr [0x1980] (1000_54B3 / 0x154B3)
    DX = UInt16[DS, 0x1980];
    // MOV BX,word ptr [0x1982] (1000_54B7 / 0x154B7)
    BX = UInt16[DS, 0x1982];
    // CALL 0x1000:b647 (1000_54BB / 0x154BB)
    NearCall(cs1, 0x54BE, unknown_1000_B647_1B647);
    // MOV CX,BX (1000_54BE / 0x154BE)
    CX = BX;
    // MOV DI,DX (1000_54C0 / 0x154C0)
    DI = DX;
    // SUB BX,0x14 (1000_54C2 / 0x154C2)
    // BX -= 0x14;
    BX = Alu.Sub16(BX, 0x14);
    // ADD CX,0x13 (1000_54C5 / 0x154C5)
    // CX += 0x13;
    CX = Alu.Add16(CX, 0x13);
    // SUB DX,0x28 (1000_54C8 / 0x154C8)
    // DX -= 0x28;
    DX = Alu.Sub16(DX, 0x28);
    // ADD DI,0x27 (1000_54CB / 0x154CB)
    // DI += 0x27;
    DI = Alu.Add16(DI, 0x27);
    // MOV AX,[0x4710] (1000_54CE / 0x154CE)
    AX = UInt16[DS, 0x4710];
    // ADD AX,0x5 (1000_54D1 / 0x154D1)
    // AX += 0x5;
    AX = Alu.Add16(AX, 0x5);
    // CMP DX,AX (1000_54D4 / 0x154D4)
    Alu.Sub16(DX, AX);
    // JGE 0x1000:54da (1000_54D6 / 0x154D6)
    if(SignFlag == OverflowFlag) {
      goto label_1000_54DA_154DA;
    }
    // MOV DX,AX (1000_54D8 / 0x154D8)
    DX = AX;
    label_1000_54DA_154DA:
    // CMP DI,AX (1000_54DA / 0x154DA)
    Alu.Sub16(DI, AX);
    // JGE 0x1000:54e0 (1000_54DC / 0x154DC)
    if(SignFlag == OverflowFlag) {
      goto label_1000_54E0_154E0;
    }
    // MOV DI,AX (1000_54DE / 0x154DE)
    DI = AX;
    label_1000_54E0_154E0:
    // ADD AX,0x9f (1000_54E0 / 0x154E0)
    // AX += 0x9F;
    AX = Alu.Add16(AX, 0x9F);
    // CMP DX,AX (1000_54E3 / 0x154E3)
    Alu.Sub16(DX, AX);
    // JBE 0x1000:54e9 (1000_54E5 / 0x154E5)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_54E9_154E9;
    }
    // MOV DX,AX (1000_54E7 / 0x154E7)
    DX = AX;
    label_1000_54E9_154E9:
    // CMP DI,AX (1000_54E9 / 0x154E9)
    Alu.Sub16(DI, AX);
    // JBE 0x1000:54ef (1000_54EB / 0x154EB)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_54EF_154EF;
    }
    // MOV DI,AX (1000_54ED / 0x154ED)
    DI = AX;
    label_1000_54EF_154EF:
    // MOV AX,[0x4712] (1000_54EF / 0x154EF)
    AX = UInt16[DS, 0x4712];
    // ADD AX,0x7 (1000_54F2 / 0x154F2)
    // AX += 0x7;
    AX = Alu.Add16(AX, 0x7);
    // CMP BX,AX (1000_54F5 / 0x154F5)
    Alu.Sub16(BX, AX);
    // JGE 0x1000:54fb (1000_54F7 / 0x154F7)
    if(SignFlag == OverflowFlag) {
      goto label_1000_54FB_154FB;
    }
    // MOV BX,AX (1000_54F9 / 0x154F9)
    BX = AX;
    label_1000_54FB_154FB:
    // CMP CX,AX (1000_54FB / 0x154FB)
    Alu.Sub16(CX, AX);
    // JGE 0x1000:5501 (1000_54FD / 0x154FD)
    if(SignFlag == OverflowFlag) {
      goto label_1000_5501_15501;
    }
    // MOV CX,AX (1000_54FF / 0x154FF)
    CX = AX;
    label_1000_5501_15501:
    // ADD AX,0x58 (1000_5501 / 0x15501)
    // AX += 0x58;
    AX = Alu.Add16(AX, 0x58);
    // CMP BX,AX (1000_5504 / 0x15504)
    Alu.Sub16(BX, AX);
    // JBE 0x1000:550a (1000_5506 / 0x15506)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_550A_1550A;
    }
    // MOV BX,AX (1000_5508 / 0x15508)
    BX = AX;
    label_1000_550A_1550A:
    // CMP CX,AX (1000_550A / 0x1550A)
    Alu.Sub16(CX, AX);
    // JBE 0x1000:5510 (1000_550C / 0x1550C)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_5510_15510;
    }
    // MOV CX,AX (1000_550E / 0x1550E)
    CX = AX;
    label_1000_5510_15510:
    // CMP BX,CX (1000_5510 / 0x15510)
    Alu.Sub16(BX, CX);
    // JZ 0x1000:551d (1000_5512 / 0x15512)
    if(ZeroFlag) {
      goto label_1000_551D_1551D;
    }
    // CMP DX,DI (1000_5514 / 0x15514)
    Alu.Sub16(DX, DI);
    // JZ 0x1000:551d (1000_5516 / 0x15516)
    if(ZeroFlag) {
      goto label_1000_551D_1551D;
    }
    // MOV AL,0xfb (1000_5518 / 0x15518)
    AL = 0xFB;
    // CALL 0x1000:c560 (1000_551A / 0x1551A)
    NearCall(cs1, 0x551D, unknown_1000_C560_1C560);
    label_1000_551D_1551D:
    // MOV word ptr [0x2772],0xffff (1000_551D / 0x1551D)
    UInt16[DS, 0x2772] = 0xFFFF;
    // MOV SI,0x4710 (1000_5523 / 0x15523)
    SI = 0x4710;
    // MOV DI,0xdbe0 (1000_5526 / 0x15526)
    DI = 0xDBE0;
    // CMP word ptr [DI],0x0 (1000_5529 / 0x15529)
    Alu.Sub16(UInt16[DS, DI], 0x0);
    // JZ 0x1000:5535 (1000_552C / 0x1552C)
    if(ZeroFlag) {
      goto label_1000_5535_15535;
    }
    // CMP word ptr [DI],SI (1000_552E / 0x1552E)
    Alu.Sub16(UInt16[DS, DI], SI);
    // JZ 0x1000:5535 (1000_5530 / 0x15530)
    if(ZeroFlag) {
      goto label_1000_5535_15535;
    }
    // MOV DI,0xdbe2 (1000_5532 / 0x15532)
    DI = 0xDBE2;
    label_1000_5535_15535:
    // MOV word ptr [DI],SI (1000_5535 / 0x15535)
    UInt16[DS, DI] = SI;
    // CMP DI,0xdbe2 (1000_5537 / 0x15537)
    Alu.Sub16(DI, 0xDBE2);
    // PUSHF  (1000_553B / 0x1553B)
    Stack.Push(FlagRegister);
    // XOR DI,DI (1000_553C / 0x1553C)
    DI = 0;
    // XCHG word ptr [0x4720],DI (1000_553E / 0x1553E)
    ushort tmp_1000_553E = UInt16[DS, 0x4720];
    UInt16[DS, 0x4720] = DI;
    DI = tmp_1000_553E;
    // OR DI,DI (1000_5542 / 0x15542)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:554d (1000_5544 / 0x15544)
    if(ZeroFlag) {
      goto label_1000_554D_1554D;
    }
    // XCHG DI,SI (1000_5546 / 0x15546)
    ushort tmp_1000_5546 = DI;
    DI = SI;
    SI = tmp_1000_5546;
    // MOV AL,0x6 (1000_5548 / 0x15548)
    AL = 0x6;
    // CALL 0x1000:c0e8 (1000_554A / 0x1554A)
    NearCall(cs1, 0x554D, unknown_1000_C0E8_1C0E8);
    label_1000_554D_1554D:
    // POPF  (1000_554D / 0x1554D)
    FlagRegister = Stack.Pop();
    // JNZ 0x1000:5558 (1000_554E / 0x1554E)
    if(!ZeroFlag) {
      goto label_1000_5558_15558;
    }
    // CALL 0x1000:62f2 (1000_5550 / 0x15550)
    NearCall(cs1, 0x5553, unknown_1000_62F2_162F2);
    // CALL 0x1000:813e (1000_5553 / 0x15553)
    NearCall(cs1, 0x5556, unknown_1000_813E_1813E);
    // JMP 0x1000:555b (1000_5556 / 0x15556)
    goto label_1000_555B_1555B;
    label_1000_5558_15558:
    // CALL 0x1000:6314 (1000_5558 / 0x15558)
    NearCall(cs1, 0x555B, unknown_1000_6314_16314);
    label_1000_555B_1555B:
    // MOV SI,0x4710 (1000_555B / 0x1555B)
    SI = 0x4710;
    // CALL 0x1000:c4f0 (1000_555E / 0x1555E)
    NearCall(cs1, 0x5561, rect_at_si_to_regs_ida_1000_C4F0_1C4F0);
    // CALL 0x1000:b69a (1000_5561 / 0x15561)
    NearCall(cs1, 0x5564, unknown_1000_B69A_1B69A);
    // MOV byte ptr [0x46eb],0xc0 (1000_5564 / 0x15564)
    UInt8[DS, 0x46EB] = 0xC0;
    // MOV SI,0x1482 (1000_5569 / 0x15569)
    SI = 0x1482;
    // MOV DI,0x46e3 (1000_556C / 0x1556C)
    DI = 0x46E3;
    // CALL 0x1000:5b99 (1000_556F / 0x1556F)
    NearCall(cs1, 0x5572, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // CALL 0x1000:5b8d (1000_5572 / 0x15572)
    NearCall(cs1, 0x5575, unknown_1000_5B8D_15B8D);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_599F_1599F(0x15575 - cs1 * 0x10);
  }
  
  public Action unknown_1000_557B_1557B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x557B: goto label_1000_557B_1557B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_557B_1557B:
    // MOV DX,word ptr [0x4710] (1000_557B / 0x1557B)
    DX = UInt16[DS, 0x4710];
    // MOV BX,word ptr [0x4712] (1000_557F / 0x1557F)
    BX = UInt16[DS, 0x4712];
    // RET  (1000_5583 / 0x15583)
    return NearRet();
  }
  
  public Action unknown_1000_5584_15584(int gotoTarget) {
    label_1000_5584_15584:
    // XOR AX,AX (1000_5584 / 0x15584)
    AX = 0;
    // XCHG word ptr [0x115a],AX (1000_5586 / 0x15586)
    ushort tmp_1000_5586 = UInt16[DS, 0x115A];
    UInt16[DS, 0x115A] = AX;
    AX = tmp_1000_5586;
    // OR AX,AX (1000_558A / 0x1558A)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:55bf (1000_558C / 0x1558C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_55BF / 0x155BF)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_558E / 0x1558E)
    NearCall(cs1, 0x5591, PushAll_1000_E270_1E270);
    // PUSH DS (1000_5591 / 0x15591)
    Stack.Push(DS);
    // PUSH ES (1000_5592 / 0x15592)
    Stack.Push(ES);
    // MOV CL,0xc (1000_5593 / 0x15593)
    CL = 0xC;
    label_1000_5595_15595:
    // SHR AX,1 (1000_5595 / 0x15595)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // JNC 0x1000:55b8 (1000_5597 / 0x15597)
    if(!CarryFlag) {
      goto label_1000_55B8_155B8;
    }
    // PUSH AX (1000_5599 / 0x15599)
    Stack.Push(AX);
    // PUSH CX (1000_559A / 0x1559A)
    Stack.Push(CX);
    // MOV BL,0xd (1000_559B / 0x1559B)
    BL = 0xD;
    // SUB BL,CL (1000_559D / 0x1559D)
    // BL -= CL;
    BL = Alu.Sub8(BL, CL);
    // MOV DI,0x100 (1000_559F / 0x1559F)
    DI = 0x100;
    label_1000_55A2_155A2:
    // CMP byte ptr [DI],BL (1000_55A2 / 0x155A2)
    Alu.Sub8(UInt8[DS, DI], BL);
    // JNZ 0x1000:55ab (1000_55A4 / 0x155A4)
    if(!ZeroFlag) {
      goto label_1000_55AB_155AB;
    }
    // CALL 0x1000:5d36 (1000_55A6 / 0x155A6)
    NearCall(cs1, 0x55A9, unknown_1000_5D36_15D36);
    // JNC 0x1000:55b6 (1000_55A9 / 0x155A9)
    if(!CarryFlag) {
      goto label_1000_55B6_155B6;
    }
    label_1000_55AB_155AB:
    // ADD DI,0x1c (1000_55AB / 0x155AB)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP byte ptr [DI],0xff (1000_55AE / 0x155AE)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JNZ 0x1000:55a2 (1000_55B1 / 0x155B1)
    if(!ZeroFlag) {
      goto label_1000_55A2_155A2;
    }
    // CALL 0x1000:55c0 (1000_55B3 / 0x155B3)
    throw FailAsUntested("Could not find a valid function at address 1000_55C0 / 0x155C0");
    label_1000_55B6_155B6:
    // POP CX (1000_55B6 / 0x155B6)
    CX = Stack.Pop();
    // POP AX (1000_55B7 / 0x155B7)
    AX = Stack.Pop();
    label_1000_55B8_155B8:
    // LOOP 0x1000:5595 (1000_55B8 / 0x155B8)
    if(--CX != 0) {
      goto label_1000_5595_15595;
    }
    // POP ES (1000_55BA / 0x155BA)
    ES = Stack.Pop();
    // POP DS (1000_55BB / 0x155BB)
    DS = Stack.Pop();
    // CALL 0x1000:e283 (1000_55BC / 0x155BC)
    NearCall(cs1, 0x55BF, PopAll_1000_E283_1E283);
    label_1000_55BF_155BF:
    // RET  (1000_55BF / 0x155BF)
    return NearRet();
  }
  
  public Action map_func_ida_1000_55DD_155DD(int gotoTarget) {
    label_1000_55DD_155DD:
    // PUSH DS (1000_55DD / 0x155DD)
    Stack.Push(DS);
    // OR AL,AL (1000_55DE / 0x155DE)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:5603 (1000_55E0 / 0x155E0)
    if(ZeroFlag) {
      goto label_1000_5603_15603;
    }
    // LES DI,[0xdbb0] (1000_55E2 / 0x155E2)
    DI = UInt16[DS, 0xDBB0];
    ES = UInt16[DS, 0xDBB2];
    // MOV DS,word ptr [0xdd00] (1000_55E6 / 0x155E6)
    DS = UInt16[DS, 0xDD00];
    // MOV CX,0xc5f9 (1000_55EA / 0x155EA)
    CX = 0xC5F9;
    label_1000_55ED_155ED:
    while (CX-- != 0) {
      // SCASB ES:DI (1000_55ED / 0x155ED)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // JNZ 0x1000:5603 (1000_55EF / 0x155EF)
    if(!ZeroFlag) {
      goto label_1000_5603_15603;
    }
    // MOV AH,byte ptr [DI + -0x1] (1000_55F1 / 0x155F1)
    AH = UInt8[DS, (ushort)(DI - 0x1)];
    // AND AH,0x30 (1000_55F4 / 0x155F4)
    // AH &= 0x30;
    AH = Alu.And8(AH, 0x30);
    // CMP AH,0x30 (1000_55F7 / 0x155F7)
    Alu.Sub8(AH, 0x30);
    // JNZ 0x1000:5600 (1000_55FA / 0x155FA)
    if(!ZeroFlag) {
      goto label_1000_5600_15600;
    }
    // AND byte ptr [DI + -0x1],0xef (1000_55FC / 0x155FC)
    // UInt8[DS, (ushort)(DI - 0x1)] &= 0xEF;
    UInt8[DS, (ushort)(DI - 0x1)] = Alu.And8(UInt8[DS, (ushort)(DI - 0x1)], 0xEF);
    label_1000_5600_15600:
    // INC CX (1000_5600 / 0x15600)
    CX = Alu.Inc16(CX);
    // LOOP 0x1000:55ed (1000_5601 / 0x15601)
    if(--CX != 0) {
      goto label_1000_55ED_155ED;
    }
    label_1000_5603_15603:
    // POP DS (1000_5603 / 0x15603)
    DS = Stack.Pop();
    // RET  (1000_5604 / 0x15604)
    return NearRet();
  }
  
  public Action unknown_1000_5605_15605(int gotoTarget) {
    label_1000_5605_15605:
    // SUB SP,0x8 (1000_5605 / 0x15605)
    // SP -= 0x8;
    SP = Alu.Sub16(SP, 0x8);
    // MOV SI,0x4710 (1000_5608 / 0x15608)
    SI = 0x4710;
    // MOV DI,SP (1000_560B / 0x1560B)
    DI = SP;
    // PUSH DS (1000_560D / 0x1560D)
    Stack.Push(DS);
    // POP ES (1000_560E / 0x1560E)
    ES = Stack.Pop();
    // LODSW SI (1000_560F / 0x1560F)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD AX,0x6 (1000_5610 / 0x15610)
    // AX += 0x6;
    AX = Alu.Add16(AX, 0x6);
    // STOSW ES:DI (1000_5613 / 0x15613)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_5614 / 0x15614)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD AX,0x62 (1000_5615 / 0x15615)
    // AX += 0x62;
    AX = Alu.Add16(AX, 0x62);
    // STOSW ES:DI (1000_5618 / 0x15618)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_5619 / 0x15619)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB AX,0x6 (1000_561A / 0x1561A)
    // AX -= 0x6;
    AX = Alu.Sub16(AX, 0x6);
    // STOSW ES:DI (1000_561D / 0x1561D)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_561E / 0x1561E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB AX,0x2 (1000_561F / 0x1561F)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // STOSW ES:DI (1000_5622 / 0x15622)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LEA SI,[DI + -0x8] (1000_5623 / 0x15623)
    SI = (ushort)(DI - 0x8);
    // MOV AL,0xf5 (1000_5626 / 0x15626)
    AL = 0xF5;
    // MOV ES,word ptr [0xdbda] (1000_5628 / 0x15628)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38dd] (1000_562C / 0x1562C)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_562C = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_562C) {
      case 0x235CE : FarCall(cs1, 0x5630, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_562C);
        break;
    }
    // MOV byte ptr [0x4724],0xff (1000_5630 / 0x15630)
    UInt8[DS, 0x4724] = 0xFF;
    // CALL 0x1000:d075 (1000_5635 / 0x15635)
    NearCall(cs1, 0x5638, SetFontToMenu_1000_D075_1D075);
    // ADD SP,0x8 (1000_5638 / 0x15638)
    // SP += 0x8;
    SP = Alu.Add16(SP, 0x8);
    // JMP 0x1000:557b (1000_563B / 0x1563B)
    // Jump converted to entry function call
    return unknown_1000_557B_1557B(0);
  }
  
  public Action unknown_1000_563E_1563E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x563E: goto label_1000_563E_1563E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_563E_1563E:
    // ADD BX,0x62 (1000_563E / 0x1563E)
    // BX += 0x62;
    BX = Alu.Add16(BX, 0x62);
    // ADD DX,0x6 (1000_5641 / 0x15641)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // MOV CX,0xf5fe (1000_5644 / 0x15644)
    CX = 0xF5FE;
    // MOV byte ptr [0x4725],CL (1000_5647 / 0x15647)
    UInt8[DS, 0x4725] = CL;
    // CMP byte ptr [0x4722],0x0 (1000_564B / 0x1564B)
    Alu.Sub8(UInt8[DS, 0x4722], 0x0);
    // JNZ 0x1000:568c (1000_5650 / 0x15650)
    if(!ZeroFlag) {
      goto label_1000_568C_1568C;
    }
    // PUSH DX (1000_5652 / 0x15652)
    Stack.Push(DX);
    // MOV AX,0x65 (1000_5653 / 0x15653)
    AX = 0x65;
    // CALL 0x1000:d194 (1000_5656 / 0x15656)
    NearCall(cs1, 0x5659, unknown_1000_D194_1D194);
    // POP AX (1000_5659 / 0x15659)
    AX = Stack.Pop();
    // ADD AX,0x53 (1000_565A / 0x1565A)
    // AX += 0x53;
    AX = Alu.Add16(AX, 0x53);
    // MOV [0xd82c],AX (1000_565D / 0x1565D)
    UInt16[DS, 0xD82C] = AX;
    // MOV AL,0x2d (1000_5660 / 0x15660)
    AL = 0x2D;
    // CALL word ptr [0x2518] (1000_5662 / 0x15662)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_5662 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_5662) {
      case 0xD12F : NearCall(cs1, 0x5666, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5662);
        break;
    }
    // ADD word ptr [0xd82c],0x41 (1000_5666 / 0x15666)
    // UInt16[DS, 0xD82C] += 0x41;
    UInt16[DS, 0xD82C] = Alu.Add16(UInt16[DS, 0xD82C], 0x41);
    // MOV AL,0x2b (1000_566B / 0x1566B)
    AL = 0x2B;
    // CALL word ptr [0x2518] (1000_566D / 0x1566D)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_566D = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_566D) {
      case 0xD12F : NearCall(cs1, 0x5671, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_566D);
        break;
    }
    // CALL 0x1000:c13b (1000_5671 / 0x15671)
    NearCall(cs1, 0x5674, unknown_1000_C13B_1C13B);
    // CALL 0x1000:557b (1000_5674 / 0x15674)
    NearCall(cs1, 0x5677, unknown_1000_557B_1557B);
    // ADD DX,0x5f (1000_5677 / 0x15677)
    // DX += 0x5F;
    DX = Alu.Add16(DX, 0x5F);
    // ADD BX,0x63 (1000_567A / 0x1567A)
    // BX += 0x63;
    BX = Alu.Add16(BX, 0x63);
    // MOV AX,0x80 (1000_567D / 0x1567D)
    AX = 0x80;
    // CALL 0x1000:c2fd (1000_5680 / 0x15680)
    NearCall(cs1, 0x5683, unknown_1000_C2FD_1C2FD);
    // ADD DX,0x3c (1000_5683 / 0x15683)
    // DX += 0x3C;
    DX = Alu.Add16(DX, 0x3C);
    // MOV AX,0x81 (1000_5686 / 0x15686)
    AX = 0x81;
    // JMP 0x1000:c22f (1000_5689 / 0x15689)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
    label_1000_568C_1568C:
    // MOV AX,0x68 (1000_568C / 0x1568C)
    AX = 0x68;
    // JMP 0x1000:d194 (1000_568F / 0x1568F)
    // Jump converted to entry function call
    return unknown_1000_D194_1D194(0);
  }
  
  public Action unknown_1000_5692_15692(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5719: goto label_1000_5719_15719;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5692_15692:
    // PUSH DI (1000_5692 / 0x15692)
    Stack.Push(DI);
    // CALL 0x1000:5605 (1000_5693 / 0x15693)
    NearCall(cs1, 0x5696, unknown_1000_5605_15605);
    // POP DI (1000_5696 / 0x15696)
    DI = Stack.Pop();
    // OR DI,DI (1000_5697 / 0x15697)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:563e (1000_5699 / 0x15699)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_563E_1563E(0);
    }
    // ADD BX,0x62 (1000_569B / 0x1569B)
    // BX += 0x62;
    BX = Alu.Add16(BX, 0x62);
    // ADD DX,0x6 (1000_569E / 0x1569E)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // MOV CX,0xf5fe (1000_56A1 / 0x156A1)
    CX = 0xF5FE;
    // CALL 0x1000:629d (1000_56A4 / 0x156A4)
    NearCall(cs1, 0x56A7, unknown_1000_629D_1629D);
    // CALL 0x1000:d05f (1000_56A7 / 0x156A7)
    NearCall(cs1, 0x56AA, GetCharacterCoordsXY_1000_D05F_1D05F);
    // MOV CX,0xf5fe (1000_56AA / 0x156AA)
    CX = 0xF5FE;
    // CALL 0x1000:62a6 (1000_56AD / 0x156AD)
    NearCall(cs1, 0x56B0, unknown_1000_62A6_162A6);
    // CMP DI,0x138 (1000_56B0 / 0x156B0)
    Alu.Sub16(DI, 0x138);
    // JC 0x1000:5719 (1000_56B4 / 0x156B4)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5719 / 0x15719)
      return NearRet();
    }
    // CMP byte ptr [DI + 0x8],0x21 (1000_56B6 / 0x156B6)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x21);
    // JZ 0x1000:5719 (1000_56BA / 0x156BA)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5719 / 0x15719)
      return NearRet();
    }
    // XOR BX,BX (1000_56BC / 0x156BC)
    BX = 0;
    // XOR CX,CX (1000_56BE / 0x156BE)
    CX = 0;
    // MOV BP,0x5728 (1000_56C0 / 0x156C0)
    BP = 0x5728;
    // CALL 0x1000:6639 (1000_56C3 / 0x156C3)
    NearCall(cs1, 0x56C6, unknown_1000_6639_16639);
    // MOV DX,word ptr [0x4710] (1000_56C6 / 0x156C6)
    DX = UInt16[DS, 0x4710];
    // ADD DX,0x71 (1000_56CA / 0x156CA)
    // DX += 0x71;
    DX = Alu.Add16(DX, 0x71);
    // MOV AX,CX (1000_56CD / 0x156CD)
    AX = CX;
    // OR AX,BX (1000_56CF / 0x156CF)
    // AX |= BX;
    AX = Alu.Or16(AX, BX);
    // JZ 0x1000:571a (1000_56D1 / 0x156D1)
    if(ZeroFlag) {
      goto label_1000_571A_1571A;
    }
    // CALL 0x1000:c13b (1000_56D3 / 0x156D3)
    NearCall(cs1, 0x56D6, unknown_1000_C13B_1C13B);
    // SUB byte ptr [0xdbe4],0x3 (1000_56D6 / 0x156D6)
    // UInt8[DS, 0xDBE4] -= 0x3;
    UInt8[DS, 0xDBE4] = Alu.Sub8(UInt8[DS, 0xDBE4], 0x3);
    // XOR AX,AX (1000_56DB / 0x156DB)
    AX = 0;
    // CALL 0x1000:56ed (1000_56DD / 0x156DD)
    NearCall(cs1, 0x56E0, unknown_1000_56ED_156ED);
    // MOV BL,CH (1000_56E0 / 0x156E0)
    BL = CH;
    // MOV AX,0x1 (1000_56E2 / 0x156E2)
    AX = 0x1;
    // CALL 0x1000:56ed (1000_56E5 / 0x156E5)
    NearCall(cs1, 0x56E8, unknown_1000_56ED_156ED);
    // MOV BL,CL (1000_56E8 / 0x156E8)
    BL = CL;
    // MOV AX,0x2 (1000_56EA / 0x156EA)
    AX = 0x2;
    label_1000_5719_15719:
    // RET  (1000_5719 / 0x15719)
    return NearRet();
    label_1000_571A_1571A:
    // PUSH DX (1000_571A / 0x1571A)
    Stack.Push(DX);
    // CALL 0x1000:d05f (1000_571B / 0x1571B)
    NearCall(cs1, 0x571E, GetCharacterCoordsXY_1000_D05F_1D05F);
    // POP DX (1000_571E / 0x1571E)
    DX = Stack.Pop();
    // MOV CX,0xf5fb (1000_571F / 0x1571F)
    CX = 0xF5FB;
    // MOV AX,0x66 (1000_5722 / 0x15722)
    AX = 0x66;
    // JMP 0x1000:d194 (1000_5725 / 0x15725)
    // Jump converted to entry function call
    return unknown_1000_D194_1D194(0);
  }
  
  public Action unknown_1000_56ED_156ED(int gotoTarget) {
    label_1000_56ED_156ED:
    // OR BL,BL (1000_56ED / 0x156ED)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JZ 0x1000:5719 (1000_56EF / 0x156EF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5719 / 0x15719)
      return NearRet();
    }
    // PUSH CX (1000_56F1 / 0x156F1)
    Stack.Push(CX);
    // PUSH DX (1000_56F2 / 0x156F2)
    Stack.Push(DX);
    // PUSH BX (1000_56F3 / 0x156F3)
    Stack.Push(BX);
    // MOV BX,word ptr [0x4712] (1000_56F4 / 0x156F4)
    BX = UInt16[DS, 0x4712];
    // ADD BX,0x62 (1000_56F8 / 0x156F8)
    // BX += 0x62;
    BX = Alu.Add16(BX, 0x62);
    // ADD AX,0x82 (1000_56FB / 0x156FB)
    // AX += 0x82;
    AX = Alu.Add16(AX, 0x82);
    // CALL 0x1000:c2fd (1000_56FE / 0x156FE)
    NearCall(cs1, 0x5701, unknown_1000_C2FD_1C2FD);
    // ADD DX,0x6 (1000_5701 / 0x15701)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // CALL 0x1000:d04e (1000_5704 / 0x15704)
    NearCall(cs1, 0x5707, unknown_1000_D04E_1D04E);
    // MOV AL,0x3a (1000_5707 / 0x15707)
    AL = 0x3A;
    // CALL word ptr [0x2518] (1000_5709 / 0x15709)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_5709 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_5709) {
      case 0xD12F : NearCall(cs1, 0x570D, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5709);
        break;
    }
    // POP AX (1000_570D / 0x1570D)
    AX = Stack.Pop();
    // ADD AL,0x30 (1000_570E / 0x1570E)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    // CALL word ptr [0x2518] (1000_5710 / 0x15710)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_5710 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_5710) {
      case 0xD12F : NearCall(cs1, 0x5714, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5710);
        break;
    }
    // POP DX (1000_5714 / 0x15714)
    DX = Stack.Pop();
    // POP CX (1000_5715 / 0x15715)
    CX = Stack.Pop();
    // ADD DX,0x12 (1000_5716 / 0x15716)
    // DX += 0x12;
    DX = Alu.Add16(DX, 0x12);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_5692_15692(0x15719 - cs1 * 0x10);
  }
  
  public Action unknown_1000_5728_15728(int gotoTarget) {
    label_1000_5728_15728:
    // JNC 0x1000:5745 (1000_5728 / 0x15728)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_5745 / 0x15745)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_572A / 0x1572A)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_572D / 0x1572D)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,0x2 (1000_572F / 0x1572F)
    Alu.Sub8(AL, 0x2);
    // JZ 0x1000:5745 (1000_5731 / 0x15731)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5745 / 0x15745)
      return NearRet();
    }
    // SHR AL,1 (1000_5733 / 0x15733)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_5735 / 0x15735)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNZ 0x1000:573c (1000_5737 / 0x15737)
    if(!ZeroFlag) {
      goto label_1000_573C_1573C;
    }
    // INC BL (1000_5739 / 0x15739)
    BL = Alu.Inc8(BL);
    // RET  (1000_573B / 0x1573B)
    return NearRet();
    label_1000_573C_1573C:
    // CMP AL,0x1 (1000_573C / 0x1573C)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:5743 (1000_573E / 0x1573E)
    if(!ZeroFlag) {
      goto label_1000_5743_15743;
    }
    // INC CH (1000_5740 / 0x15740)
    CH = Alu.Inc8(CH);
    // RET  (1000_5742 / 0x15742)
    return NearRet();
    label_1000_5743_15743:
    // INC CL (1000_5743 / 0x15743)
    CL = Alu.Inc8(CL);
    label_1000_5745_15745:
    // RET  (1000_5745 / 0x15745)
    return NearRet();
  }
  
  public Action unknown_1000_5746_15746(int gotoTarget) {
    switch(gotoTarget) {
      case 0x578A: goto label_1000_578A_1578A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5746_15746:
    // MOV DI,0x4710 (1000_5746 / 0x15746)
    DI = 0x4710;
    // CALL 0x1000:d6fe (1000_5749 / 0x15749)
    NearCall(cs1, 0x574C, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:57b2 (1000_574C / 0x1574C)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_57B2_157B2(0);
    }
    // MOV AX,[0x4716] (1000_574E / 0x1574E)
    AX = UInt16[DS, 0x4716];
    // SUB AX,0xa (1000_5751 / 0x15751)
    // AX -= 0xA;
    AX = Alu.Sub16(AX, 0xA);
    // CMP BX,AX (1000_5754 / 0x15754)
    Alu.Sub16(BX, AX);
    // JNC 0x1000:57ad (1000_5756 / 0x15756)
    if(!CarryFlag) {
      goto label_1000_57AD_157AD;
    }
    // CALL 0x1000:57b2 (1000_5758 / 0x15758)
    NearCall(cs1, 0x575B, unknown_1000_57B2_157B2);
    // CMP byte ptr [0x4722],0x0 (1000_575B / 0x1575B)
    Alu.Sub8(UInt8[DS, 0x4722], 0x0);
    // JNZ 0x1000:578a (1000_5760 / 0x15760)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_578A / 0x1578A)
      return NearRet();
    }
    // MOV ES,word ptr [0xdbd8] (1000_5762 / 0x15762)
    ES = UInt16[DS, 0xDBD8];
    // CALLF [0x3965] (1000_5766 / 0x15766)
    // Indirect call to [0x3965], generating possible targets from emulator records
    uint targetAddress_1000_5766 = (uint)(UInt16[DS, 0x3967] * 0x10 + UInt16[DS, 0x3965] - cs1 * 0x10);
    switch(targetAddress_1000_5766) {
      case 0x23634 : FarCall(cs1, 0x576A, unknown_334B_0184_33634);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5766);
        break;
    }
    // SUB AL,0x50 (1000_576A / 0x1576A)
    // AL -= 0x50;
    AL = Alu.Sub8(AL, 0x50);
    // CMP AL,0x10 (1000_576C / 0x1576C)
    Alu.Sub8(AL, 0x10);
    // JC 0x1000:5772 (1000_576E / 0x1576E)
    if(CarryFlag) {
      goto label_1000_5772_15772;
    }
    // MOV AL,0xff (1000_5770 / 0x15770)
    AL = 0xFF;
    label_1000_5772_15772:
    // MOV AH,AL (1000_5772 / 0x15772)
    AH = AL;
    // XCHG byte ptr [0x4724],AL (1000_5774 / 0x15774)
    byte tmp_1000_5774 = UInt8[DS, 0x4724];
    UInt8[DS, 0x4724] = AL;
    AL = tmp_1000_5774;
    // CMP AL,AH (1000_5778 / 0x15778)
    Alu.Sub8(AL, AH);
    // JZ 0x1000:578a (1000_577A / 0x1577A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_578A / 0x1578A)
      return NearRet();
    }
    // CALL 0x1000:dbb2 (1000_577C / 0x1577C)
    NearCall(cs1, 0x577F, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:578b (1000_577F / 0x1577F)
    NearCall(cs1, 0x5782, unknown_1000_578B_1578B);
    // MOV AL,AH (1000_5782 / 0x15782)
    AL = AH;
    // CALL 0x1000:578b (1000_5784 / 0x15784)
    NearCall(cs1, 0x5787, unknown_1000_578B_1578B);
    // CALL 0x1000:dbec (1000_5787 / 0x15787)
    NearCall(cs1, 0x578A, draw_mouse_ida_1000_DBEC_1DBEC);
    label_1000_578A_1578A:
    // RET  (1000_578A / 0x1578A)
    return NearRet();
    label_1000_57AD_157AD:
    // MOV CX,0xfef5 (1000_57AD / 0x157AD)
    CX = 0xFEF5;
    // JMP 0x1000:57b5 (1000_57B0 / 0x157B0)
    goto label_1000_57B5_157B5;
    label_1000_57B5_157B5:
    // MOV AL,CL (1000_57B5 / 0x157B5)
    AL = CL;
    // XCHG byte ptr [0x4725],AL (1000_57B7 / 0x157B7)
    byte tmp_1000_57B7 = UInt8[DS, 0x4725];
    UInt8[DS, 0x4725] = AL;
    AL = tmp_1000_57B7;
    // CMP AL,CL (1000_57BB / 0x157BB)
    Alu.Sub8(AL, CL);
    // JZ 0x1000:578a (1000_57BD / 0x157BD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_578A / 0x1578A)
      return NearRet();
    }
    // PUSH BX (1000_57BF / 0x157BF)
    Stack.Push(BX);
    // PUSH DX (1000_57C0 / 0x157C0)
    Stack.Push(DX);
    // CALL 0x1000:c08e (1000_57C1 / 0x157C1)
    NearCall(cs1, 0x57C4, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:557b (1000_57C4 / 0x157C4)
    NearCall(cs1, 0x57C7, unknown_1000_557B_1557B);
    // ADD BX,0x62 (1000_57C7 / 0x157C7)
    // BX += 0x62;
    BX = Alu.Add16(BX, 0x62);
    // ADD DX,0x6 (1000_57CA / 0x157CA)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // MOV AX,0x65 (1000_57CD / 0x157CD)
    AX = 0x65;
    // CMP byte ptr [0x4722],0x0 (1000_57D0 / 0x157D0)
    Alu.Sub8(UInt8[DS, 0x4722], 0x0);
    // JZ 0x1000:57da (1000_57D5 / 0x157D5)
    if(ZeroFlag) {
      goto label_1000_57DA_157DA;
    }
    // MOV AX,0x68 (1000_57D7 / 0x157D7)
    AX = 0x68;
    label_1000_57DA_157DA:
    // CALL 0x1000:dbb2 (1000_57DA / 0x157DA)
    NearCall(cs1, 0x57DD, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:d194 (1000_57DD / 0x157DD)
    NearCall(cs1, 0x57E0, unknown_1000_D194_1D194);
    // POP DX (1000_57E0 / 0x157E0)
    DX = Stack.Pop();
    // POP BX (1000_57E1 / 0x157E1)
    BX = Stack.Pop();
    // JMP 0x1000:c07c (1000_57E2 / 0x157E2)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_578B_1578B(int gotoTarget) {
    label_1000_578B_1578B:
    // OR AL,AL (1000_578B / 0x1578B)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:578a (1000_578D / 0x1578D)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_578A / 0x1578A)
      return NearRet();
    }
    // PUSH AX (1000_578F / 0x1578F)
    Stack.Push(AX);
    // CALL 0x1000:557b (1000_5790 / 0x15790)
    NearCall(cs1, 0x5793, unknown_1000_557B_1557B);
    // ADD DX,0x5e (1000_5793 / 0x15793)
    // DX += 0x5E;
    DX = Alu.Add16(DX, 0x5E);
    // ADD BX,0x62 (1000_5796 / 0x15796)
    // BX += 0x62;
    BX = Alu.Add16(BX, 0x62);
    // XOR AH,AH (1000_5799 / 0x15799)
    AH = 0;
    // SHL AX,1 (1000_579B / 0x1579B)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_579D / 0x1579D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD DX,AX (1000_579F / 0x1579F)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV SI,0x5 (1000_57A1 / 0x157A1)
    SI = 0x5;
    // MOV CX,0x7 (1000_57A4 / 0x157A4)
    CX = 0x7;
    // CALLF [0x3961] (1000_57A7 / 0x157A7)
    // Indirect call to [0x3961], generating possible targets from emulator records
    uint targetAddress_1000_57A7 = (uint)(UInt16[DS, 0x3963] * 0x10 + UInt16[DS, 0x3961] - cs1 * 0x10);
    switch(targetAddress_1000_57A7) {
      case 0x23631 : FarCall(cs1, 0x57AB, unknown_334B_0181_33631);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_57A7);
        break;
    }
    // POP AX (1000_57AB / 0x157AB)
    AX = Stack.Pop();
    // RET  (1000_57AC / 0x157AC)
    return NearRet();
  }
  
  public Action unknown_1000_57B2_157B2(int gotoTarget) {
    switch(gotoTarget) {
      case 0x57B2: goto label_1000_57B2_157B2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_57B2_157B2:
    // MOV CX,0xf5fe (1000_57B2 / 0x157B2)
    CX = 0xF5FE;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_5746_15746(0x157B5 - cs1 * 0x10);
  }
  
  public Action unknown_1000_57E5_157E5(int gotoTarget) {
    label_1000_57E5_157E5:
    // CALL 0x1000:e270 (1000_57E5 / 0x157E5)
    NearCall(cs1, 0x57E8, PushAll_1000_E270_1E270);
    // PUSH ES (1000_57E8 / 0x157E8)
    Stack.Push(ES);
    // MOV AX,0x3a (1000_57E9 / 0x157E9)
    AX = 0x3A;
    // CALL 0x1000:c13e (1000_57EC / 0x157EC)
    NearCall(cs1, 0x57EF, open_sprite_sheet_ida_1000_C13E_1C13E);
    // PUSH DS (1000_57EF / 0x157EF)
    Stack.Push(DS);
    // POP ES (1000_57F0 / 0x157F0)
    ES = Stack.Pop();
    // MOV DI,BP (1000_57F1 / 0x157F1)
    DI = BP;
    // MOV AL,0x70 (1000_57F3 / 0x157F3)
    AL = 0x70;
    // MOV CX,0x100 (1000_57F5 / 0x157F5)
    CX = 0x100;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_57F8 / 0x157F8)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // CMP byte ptr [0x4722],0x0 (1000_57FA / 0x157FA)
    Alu.Sub8(UInt8[DS, 0x4722], 0x0);
    // JNZ 0x1000:583f (1000_57FF / 0x157FF)
    if(!ZeroFlag) {
      goto label_1000_583F_1583F;
    }
    // MOV SI,0x100 (1000_5801 / 0x15801)
    SI = 0x100;
    // MOV DI,BP (1000_5804 / 0x15804)
    DI = BP;
    // XOR BX,BX (1000_5806 / 0x15806)
    BX = 0;
    label_1000_5808_15808:
    // MOV AL,byte ptr [SI + 0xa] (1000_5808 / 0x15808)
    AL = UInt8[DS, (ushort)(SI + 0xA)];
    // TEST AL,0x80 (1000_580B / 0x1580B)
    Alu.And8(AL, 0x80);
    // JNZ 0x1000:5832 (1000_580D / 0x1580D)
    if(!ZeroFlag) {
      goto label_1000_5832_15832;
    }
    // MOV BL,byte ptr [SI + 0x10] (1000_580F / 0x1580F)
    BL = UInt8[DS, (ushort)(SI + 0x10)];
    // TEST AL,0x40 (1000_5812 / 0x15812)
    Alu.And8(AL, 0x40);
    // PUSHF  (1000_5814 / 0x15814)
    Stack.Push(FlagRegister);
    // MOV AL,0x75 (1000_5815 / 0x15815)
    AL = 0x75;
    // TEST byte ptr [0x2942],0x2 (1000_5817 / 0x15817)
    Alu.And8(UInt8[DS, 0x2942], 0x2);
    // JZ 0x1000:5820 (1000_581C / 0x1581C)
    if(ZeroFlag) {
      goto label_1000_5820_15820;
    }
    // MOV AL,0x78 (1000_581E / 0x1581E)
    AL = 0x78;
    label_1000_5820_15820:
    // POPF  (1000_5820 / 0x15820)
    FlagRegister = Stack.Pop();
    // JZ 0x1000:5830 (1000_5821 / 0x15821)
    if(ZeroFlag) {
      goto label_1000_5830_15830;
    }
    // MOV AL,byte ptr [SI + 0x12] (1000_5823 / 0x15823)
    AL = UInt8[DS, (ushort)(SI + 0x12)];
    // SHR AL,1 (1000_5826 / 0x15826)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_5828 / 0x15828)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_582A / 0x1582A)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_582C / 0x1582C)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // ADD AL,0x50 (1000_582E / 0x1582E)
    // AL += 0x50;
    AL = Alu.Add8(AL, 0x50);
    label_1000_5830_15830:
    // MOV byte ptr [BX + DI],AL (1000_5830 / 0x15830)
    UInt8[DS, (ushort)(BX + DI)] = AL;
    label_1000_5832_15832:
    // ADD SI,0x1c (1000_5832 / 0x15832)
    // SI += 0x1C;
    SI = Alu.Add16(SI, 0x1C);
    // CMP byte ptr [SI],0xff (1000_5835 / 0x15835)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JNZ 0x1000:5808 (1000_5838 / 0x15838)
    if(!ZeroFlag) {
      goto label_1000_5808_15808;
    }
    // POP ES (1000_583A / 0x1583A)
    ES = Stack.Pop();
    // CALL 0x1000:e283 (1000_583B / 0x1583B)
    NearCall(cs1, 0x583E, PopAll_1000_E283_1E283);
    // RET  (1000_583E / 0x1583E)
    return NearRet();
    label_1000_583F_1583F:
    // MOV DI,0x100 (1000_583F / 0x1583F)
    DI = 0x100;
    label_1000_5842_15842:
    // MOV AL,byte ptr [DI + 0xa] (1000_5842 / 0x15842)
    AL = UInt8[DS, (ushort)(DI + 0xA)];
    // TEST AL,0x80 (1000_5845 / 0x15845)
    Alu.And8(AL, 0x80);
    // JNZ 0x1000:5861 (1000_5847 / 0x15847)
    if(!ZeroFlag) {
      goto label_1000_5861_15861;
    }
    // PUSH BP (1000_5849 / 0x15849)
    Stack.Push(BP);
    // XOR BX,BX (1000_584A / 0x1584A)
    BX = 0;
    // XOR CX,CX (1000_584C / 0x1584C)
    CX = 0;
    // MOV BP,0x5728 (1000_584E / 0x1584E)
    BP = 0x5728;
    // CALL 0x1000:6639 (1000_5851 / 0x15851)
    NearCall(cs1, 0x5854, unknown_1000_6639_16639);
    // POP BP (1000_5854 / 0x15854)
    BP = Stack.Pop();
    // CALL 0x1000:586e (1000_5855 / 0x15855)
    NearCall(cs1, 0x5858, unknown_1000_586E_1586E);
    // MOV AL,byte ptr [DI + 0x10] (1000_5858 / 0x15858)
    AL = UInt8[DS, (ushort)(DI + 0x10)];
    // XOR AH,AH (1000_585B / 0x1585B)
    AH = 0;
    // MOV SI,AX (1000_585D / 0x1585D)
    SI = AX;
    // MOV byte ptr [BP + SI],BH (1000_585F / 0x1585F)
    UInt8[SS, (ushort)(BP + SI)] = BH;
    label_1000_5861_15861:
    // ADD DI,0x1c (1000_5861 / 0x15861)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP byte ptr [DI],0xff (1000_5864 / 0x15864)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JNZ 0x1000:5842 (1000_5867 / 0x15867)
    if(!ZeroFlag) {
      goto label_1000_5842_15842;
    }
    // POP ES (1000_5869 / 0x15869)
    ES = Stack.Pop();
    // CALL 0x1000:e283 (1000_586A / 0x1586A)
    NearCall(cs1, 0x586D, PopAll_1000_E283_1E283);
    // RET  (1000_586D / 0x1586D)
    return NearRet();
  }
  
  public Action unknown_1000_586E_1586E(int gotoTarget) {
    label_1000_586E_1586E:
    // XOR AX,AX (1000_586E / 0x1586E)
    AX = 0;
    // OR BL,BL (1000_5870 / 0x15870)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JZ 0x1000:5876 (1000_5872 / 0x15872)
    if(ZeroFlag) {
      goto label_1000_5876_15876;
    }
    // MOV AL,0x1 (1000_5874 / 0x15874)
    AL = 0x1;
    label_1000_5876_15876:
    // OR CH,CH (1000_5876 / 0x15876)
    // CH |= CH;
    CH = Alu.Or8(CH, CH);
    // JZ 0x1000:587c (1000_5878 / 0x15878)
    if(ZeroFlag) {
      goto label_1000_587C_1587C;
    }
    // ADD AL,0x2 (1000_587A / 0x1587A)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    label_1000_587C_1587C:
    // OR CL,CL (1000_587C / 0x1587C)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JZ 0x1000:5882 (1000_587E / 0x1587E)
    if(ZeroFlag) {
      goto label_1000_5882_15882;
    }
    // ADD AL,0x4 (1000_5880 / 0x15880)
    // AL += 0x4;
    AL = Alu.Add8(AL, 0x4);
    label_1000_5882_15882:
    // SHL AX,1 (1000_5882 / 0x15882)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,AX (1000_5884 / 0x15884)
    SI = AX;
    // JMP word ptr CS:[SI + 0x588b] (1000_5886 / 0x15886)
    // Indirect jump to word ptr CS:[SI + 0x588b], generating possible targets from emulator records
    uint targetAddress_1000_5886 = (uint)(UInt16[cs1, (ushort)(SI + 0x588B)]);
    switch(targetAddress_1000_5886) {
      case 0x589B : throw FailAsUntested("Would have been a goto but label label_1000_589B_1589B does not exist because no instruction was found there that belongs to a function.");
      case 0x589E : throw FailAsUntested("Would have been a goto but label label_1000_589E_1589E does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_5886);
        break;
    }
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x1589B");
  }
  
  public Action unknown_1000_58E4_158E4(int gotoTarget) {
    label_1000_58E4_158E4:
    // SUB SP,0x100 (1000_58E4 / 0x158E4)
    // SP -= 0x100;
    SP = Alu.Sub16(SP, 0x100);
    // MOV BP,SP (1000_58E8 / 0x158E8)
    BP = SP;
    // CALL 0x1000:57e5 (1000_58EA / 0x158EA)
    NearCall(cs1, 0x58ED, unknown_1000_57E5_157E5);
    // MOV BH,byte ptr [0x4722] (1000_58ED / 0x158ED)
    BH = UInt8[DS, 0x4722];
    // CALLF [0x395d] (1000_58F1 / 0x158F1)
    // Indirect call to [0x395d], generating possible targets from emulator records
    uint targetAddress_1000_58F1 = (uint)(UInt16[DS, 0x395F] * 0x10 + UInt16[DS, 0x395D] - cs1 * 0x10);
    switch(targetAddress_1000_58F1) {
      case 0x2362E : FarCall(cs1, 0x58F5, unknown_334B_017E_3362E);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_58F1);
        break;
    }
    // ADD SP,0x100 (1000_58F5 / 0x158F5)
    // SP += 0x100;
    SP = Alu.Add16(SP, 0x100);
    // RET  (1000_58F9 / 0x158F9)
    return NearRet();
  }
  
  public Action unknown_1000_58FA_158FA(int gotoTarget) {
    label_1000_58FA_158FA:
    // TEST byte ptr [0x46eb],0x40 (1000_58FA / 0x158FA)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:5922 (1000_58FF / 0x158FF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5922 / 0x15922)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_5901 / 0x15901)
    NearCall(cs1, 0x5904, PushAll_1000_E270_1E270);
    // AND byte ptr [0x46eb],0xbf (1000_5904 / 0x15904)
    // UInt8[DS, 0x46EB] &= 0xBF;
    UInt8[DS, 0x46EB] = Alu.And8(UInt8[DS, 0x46EB], 0xBF);
    // MOV DI,0xdbe0 (1000_5909 / 0x15909)
    DI = 0xDBE0;
    // CMP word ptr [DI],0x4710 (1000_590C / 0x1590C)
    Alu.Sub16(UInt16[DS, DI], 0x4710);
    // JZ 0x1000:5915 (1000_5910 / 0x15910)
    if(ZeroFlag) {
      goto label_1000_5915_15915;
    }
    // MOV DI,0xdbe2 (1000_5912 / 0x15912)
    DI = 0xDBE2;
    label_1000_5915_15915:
    // XOR SI,SI (1000_5915 / 0x15915)
    SI = 0;
    // XCHG word ptr [DI],SI (1000_5917 / 0x15917)
    ushort tmp_1000_5917 = UInt16[DS, DI];
    UInt16[DS, DI] = SI;
    SI = tmp_1000_5917;
    // CALL 0x1000:c6ad (1000_5919 / 0x15919)
    NearCall(cs1, 0x591C, unknown_1000_C6AD_1C6AD);
    // CALL 0x1000:5ad9 (1000_591C / 0x1591C)
    NearCall(cs1, 0x591F, unknown_1000_5AD9_15AD9);
    // CALL 0x1000:e283 (1000_591F / 0x1591F)
    NearCall(cs1, 0x5922, PopAll_1000_E283_1E283);
    label_1000_5922_15922:
    // RET  (1000_5922 / 0x15922)
    return NearRet();
  }
  
  public Action unknown_1000_5944_15944(int gotoTarget) {
    label_1000_5944_15944:
    // MOV AX,BX (1000_5944 / 0x15944)
    AX = BX;
    // SUB AX,word ptr [0x4712] (1000_5946 / 0x15946)
    // AX -= UInt16[DS, 0x4712];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4712]);
    // SUB AX,0x7 (1000_594A / 0x1594A)
    // AX -= 0x7;
    AX = Alu.Sub16(AX, 0x7);
    // JC 0x1000:5955 (1000_594D / 0x1594D)
    if(CarryFlag) {
      goto label_1000_5955_15955;
    }
    // SUB AX,0x59 (1000_594F / 0x1594F)
    // AX -= 0x59;
    AX = Alu.Sub16(AX, 0x59);
    // JNC 0x1000:596d (1000_5952 / 0x15952)
    if(!CarryFlag) {
      goto label_1000_596D_1596D;
    }
    // RET  (1000_5954 / 0x15954)
    return NearRet();
    label_1000_5955_15955:
    // ADD SP,0x2 (1000_5955 / 0x15955)
    // SP += 0x2;
    SP = Alu.Add16(SP, 0x2);
    // MOV AX,DX (1000_5958 / 0x15958)
    AX = DX;
    // SUB AX,word ptr [0x4710] (1000_595A / 0x1595A)
    // AX -= UInt16[DS, 0x4710];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4710]);
    // SUB AX,0xa (1000_595E / 0x1595E)
    // AX -= 0xA;
    AX = Alu.Sub16(AX, 0xA);
    // JNC 0x1000:5978 (1000_5961 / 0x15961)
    if(!CarryFlag) {
      goto label_1000_5978_15978;
    }
    // CALL 0x1000:82a0 (1000_5963 / 0x15963)
    throw FailAsUntested("Could not find a valid function at address 1000_82A0 / 0x182A0");
    // JZ 0x1000:596a (1000_5966 / 0x15966)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:d2e2 (1000_596A / 0x1596A)
      // Jump converted to entry function call
      return unknown_1000_D2E2_1D2E2(0);
    }
    // JMP 0x1000:58fa (1000_5968 / 0x15968)
    // Jump converted to entry function call
    return unknown_1000_58FA_158FA(0);
    label_1000_596A_1596A:
    // JMP 0x1000:d2e2 (1000_596A / 0x1596A)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_596D_1596D:
    // ADD SP,0x2 (1000_596D / 0x1596D)
    // SP += 0x2;
    SP = Alu.Add16(SP, 0x2);
    // XOR byte ptr [0x4722],0xff (1000_5970 / 0x15970)
    // UInt8[DS, 0x4722] ^= 0xFF;
    UInt8[DS, 0x4722] = Alu.Xor8(UInt8[DS, 0x4722], 0xFF);
    // JMP 0x1000:542f (1000_5975 / 0x15975)
    // Jump converted to entry function call
    return unknown_1000_542F_1542F(0);
    label_1000_5978_15978:
    // CALL 0x1000:82a0 (1000_5978 / 0x15978)
    throw FailAsUntested("Could not find a valid function at address 1000_82A0 / 0x182A0");
    // JZ 0x1000:599e (1000_597B / 0x1597B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_599E / 0x1599E)
      return NearRet();
    }
    // MOV byte ptr [0x4723],0x1 (1000_597D / 0x1597D)
    UInt8[DS, 0x4723] = 0x1;
    label_1000_5982_15982:
    // CALL 0x1000:e270 (1000_5982 / 0x15982)
    NearCall(cs1, 0x5985, PushAll_1000_E270_1E270);
    // MOV DX,word ptr [0x11c1] (1000_5985 / 0x15985)
    DX = UInt16[DS, 0x11C1];
    // MOV BX,word ptr [0x11c3] (1000_5989 / 0x15989)
    BX = UInt16[DS, 0x11C3];
    // MOV SI,0xaa (1000_598D / 0x1598D)
    SI = 0xAA;
    // MOV CX,0x6c (1000_5990 / 0x15990)
    CX = 0x6C;
    // MOV ES,word ptr [0xdbd8] (1000_5993 / 0x15993)
    ES = UInt16[DS, 0xDBD8];
    // CALLF [0x3961] (1000_5997 / 0x15997)
    // Indirect call to [0x3961], generating possible targets from emulator records
    uint targetAddress_1000_5997 = (uint)(UInt16[DS, 0x3963] * 0x10 + UInt16[DS, 0x3961] - cs1 * 0x10);
    switch(targetAddress_1000_5997) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5997);
        break;
    }
    // CALL 0x1000:e283 (1000_599B / 0x1599B)
    NearCall(cs1, 0x599E, PopAll_1000_E283_1E283);
    label_1000_599E_1599E:
    // RET  (1000_599E / 0x1599E)
    return NearRet();
  }
  
  public Action unknown_1000_599F_1599F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5A02: goto label_1000_5A02_15A02;break;
      case 0x5575: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5575_15575:
    // MOV SI,0x4710 (1000_5575 / 0x15575)
    SI = 0x4710;
    // JMP 0x1000:daaa (1000_5578 / 0x15578)
    // Jump converted to entry function call
    return SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA(0);
    entry:
    label_1000_599F_1599F:
    // XOR AL,AL (1000_599F / 0x1599F)
    AL = 0;
    // XCHG byte ptr [0x4723],AL (1000_59A1 / 0x159A1)
    byte tmp_1000_59A1 = UInt8[DS, 0x4723];
    UInt8[DS, 0x4723] = AL;
    AL = tmp_1000_59A1;
    // OR AL,AL (1000_59A5 / 0x159A5)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:5a02 (1000_59A7 / 0x159A7)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5A02 / 0x15A02)
      return NearRet();
    }
    // CALL 0x1000:557b (1000_59A9 / 0x159A9)
    NearCall(cs1, 0x59AC, unknown_1000_557B_1557B);
    // CMP DX,word ptr [0x11c1] (1000_59AC / 0x159AC)
    Alu.Sub16(DX, UInt16[DS, 0x11C1]);
    // JNZ 0x1000:59b8 (1000_59B0 / 0x159B0)
    if(!ZeroFlag) {
      goto label_1000_59B8_159B8;
    }
    // CMP BX,word ptr [0x11c3] (1000_59B2 / 0x159B2)
    Alu.Sub16(BX, UInt16[DS, 0x11C3]);
    // JZ 0x1000:5982 (1000_59B6 / 0x159B6)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_5944_15944(0x15982 - cs1 * 0x10);
    }
    label_1000_59B8_159B8:
    // MOV word ptr [0xdbe0],0x0 (1000_59B8 / 0x159B8)
    UInt16[DS, 0xDBE0] = 0x0;
    // JMP 0x1000:5b10 (1000_59BE / 0x159BE)
    goto label_1000_5B10_15B10;
    label_1000_5A02_15A02:
    // RET  (1000_5A02 / 0x15A02)
    return NearRet();
    label_1000_5B10_15B10:
    // CALL 0x1000:8850 (1000_5B10 / 0x15B10)
    throw FailAsUntested("Could not find a valid function at address 1000_8850 / 0x18850");
    // TEST byte ptr [0x46eb],0x40 (1000_5B13 / 0x15B13)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:5b1d (1000_5B18 / 0x15B18)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5B1D / 0x15B1D)
      return NearRet();
    }
    // JMP 0x1000:5575 (1000_5B1A / 0x15B1A)
    goto label_1000_5575_15575;
    label_1000_5B1D_15B1D:
    // RET  (1000_5B1D / 0x15B1D)
    return NearRet();
  }
  
  public Action unknown_1000_59C1_159C1(int gotoTarget) {
    label_1000_59C1_159C1:
    // CMP byte ptr [0x4723],0x0 (1000_59C1 / 0x159C1)
    Alu.Sub8(UInt8[DS, 0x4723], 0x0);
    // JZ 0x1000:5a02 (1000_59C6 / 0x159C6)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5A02 / 0x15A02)
      return NearRet();
    }
    // CMP BX,0x98 (1000_59C8 / 0x159C8)
    Alu.Sub16(BX, 0x98);
    // JNC 0x1000:599f (1000_59CC / 0x159CC)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_599F_1599F(0);
    }
    // CALL 0x1000:5982 (1000_59CE / 0x159CE)
    throw FailAsUntested("Could not find a valid function at address 1000_5982 / 0x15982");
    // MOV SI,0x11c1 (1000_59D1 / 0x159D1)
    SI = 0x11C1;
    // MOV AX,word ptr [SI] (1000_59D4 / 0x159D4)
    AX = UInt16[DS, SI];
    // ADD AX,DI (1000_59D6 / 0x159D6)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // SUB AX,0x5 (1000_59D8 / 0x159D8)
    // AX -= 0x5;
    AX = Alu.Sub16(AX, 0x5);
    // CMP AX,0x8c (1000_59DB / 0x159DB)
    Alu.Sub16(AX, 0x8C);
    // JC 0x1000:59e7 (1000_59DE / 0x159DE)
    if(CarryFlag) {
      goto label_1000_59E7_159E7;
    }
    // JL 0x1000:59e5 (1000_59E0 / 0x159E0)
    if(SignFlag != OverflowFlag) {
      goto label_1000_59E5_159E5;
    }
    // SUB AX,0x8c (1000_59E2 / 0x159E2)
    // AX -= 0x8C;
    AX = Alu.Sub16(AX, 0x8C);
    label_1000_59E5_159E5:
    // SUB DI,AX (1000_59E5 / 0x159E5)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    label_1000_59E7_159E7:
    // ADD word ptr [SI],DI (1000_59E7 / 0x159E7)
    // UInt16[DS, SI] += DI;
    UInt16[DS, SI] = Alu.Add16(UInt16[DS, SI], DI);
    // MOV AX,word ptr [SI + 0x2] (1000_59E9 / 0x159E9)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // ADD AX,CX (1000_59EC / 0x159EC)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // SUB AX,0x5 (1000_59EE / 0x159EE)
    // AX -= 0x5;
    AX = Alu.Sub16(AX, 0x5);
    // CMP AX,0x18 (1000_59F1 / 0x159F1)
    Alu.Sub16(AX, 0x18);
    // JC 0x1000:59fd (1000_59F4 / 0x159F4)
    if(CarryFlag) {
      goto label_1000_59FD_159FD;
    }
    // JL 0x1000:59fb (1000_59F6 / 0x159F6)
    if(SignFlag != OverflowFlag) {
      goto label_1000_59FB_159FB;
    }
    // SUB AX,0x18 (1000_59F8 / 0x159F8)
    // AX -= 0x18;
    AX = Alu.Sub16(AX, 0x18);
    label_1000_59FB_159FB:
    // SUB CX,AX (1000_59FB / 0x159FB)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    label_1000_59FD_159FD:
    // ADD word ptr [SI + 0x2],CX (1000_59FD / 0x159FD)
    // UInt16[DS, (ushort)(SI + 0x2)] += CX;
    UInt16[DS, (ushort)(SI + 0x2)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x2)], CX);
    // JMP 0x1000:5982 (1000_5A00 / 0x15A00)
    // Jump converted to non entry function call
    return unknown_1000_5944_15944(0x15982 - cs1 * 0x10);
  }
  
  public Action unknown_1000_5A1A_15A1A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5A1A: goto label_1000_5A1A_15A1A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5A1A_15A1A:
    // MOV byte ptr [0x28e7],0x1 (1000_5A1A / 0x15A1A)
    UInt8[DS, 0x28E7] = 0x1;
    // CALL 0x1000:18ba (1000_5A1F / 0x15A1F)
    NearCall(cs1, 0x5A22, unknown_1000_18BA_118BA);
    // CALL 0x1000:5b5d (1000_5A22 / 0x15A22)
    NearCall(cs1, 0x5A25, unknown_1000_5B5D_15B5D);
    // MOV BP,0x5a56 (1000_5A25 / 0x15A25)
    BP = 0x5A56;
    // MOV AL,0x34 (1000_5A28 / 0x15A28)
    AL = 0x34;
    // MOV DX,0xffff (1000_5A2A / 0x15A2A)
    DX = 0xFFFF;
    // CALL 0x1000:c108 (1000_5A2D / 0x15A2D)
    NearCall(cs1, 0x5A30, transition_ida_1000_C108_1C108);
    // CMP byte ptr [0x46f3],0x0 (1000_5A30 / 0x15A30)
    Alu.Sub8(UInt8[DS, 0x46F3], 0x0);
    // JNZ 0x1000:5a3a (1000_5A35 / 0x15A35)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:17e6 (1000_5A3A / 0x15A3A)
      // Jump converted to entry function call
      return unknown_1000_17E6_117E6(0);
    }
    // CALL 0x1000:5bb0 (1000_5A37 / 0x15A37)
    NearCall(cs1, 0x5A3A, unknown_1000_5BB0_15BB0);
    label_1000_5A3A_15A3A:
    // JMP 0x1000:17e6 (1000_5A3A / 0x15A3A)
    // Jump converted to entry function call
    return unknown_1000_17E6_117E6(0);
  }
  
  public Action unknown_1000_5A56_15A56(int gotoTarget) {
    label_1000_5A56_15A56:
    // CMP byte ptr [0x46eb],0x0 (1000_5A56 / 0x15A56)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JS 0x1000:5a9a (1000_5A5B / 0x15A5B)
    if(SignFlag) {
      // Jump converted to entry function call
      return unknown_1000_5A9A_15A9A(0);
    }
    // CALL 0x1000:d2bd (1000_5A5D / 0x15A5D)
    NearCall(cs1, 0x5A60, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:4aca (1000_5A60 / 0x15A60)
    NearCall(cs1, 0x5A63, SetUnknown11CATo1_1000_4ACA_14ACA);
    // CALL 0x1000:b930 (1000_5A63 / 0x15A63)
    NearCall(cs1, 0x5A66, unknown_1000_B930_1B930);
    // MOV SI,0x6b34 (1000_5A66 / 0x15A66)
    SI = 0x6B34;
    // MOV BP,0xf (1000_5A69 / 0x15A69)
    BP = 0xF;
    // CALL 0x1000:da25 (1000_5A6C / 0x15A6C)
    NearCall(cs1, 0x5A6F, unknown_1000_DA25_1DA25);
    // MOV SI,0x1482 (1000_5A6F / 0x15A6F)
    SI = 0x1482;
    // MOV DI,0x46e3 (1000_5A72 / 0x15A72)
    DI = 0x46E3;
    // CALL 0x1000:5b99 (1000_5A75 / 0x15A75)
    NearCall(cs1, 0x5A78, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // CALL 0x1000:5b69 (1000_5A78 / 0x15A78)
    NearCall(cs1, 0x5A7B, unknown_1000_5B69_15B69);
    // CALL 0x1000:1797 (1000_5A7B / 0x15A7B)
    NearCall(cs1, 0x5A7E, unknown_1000_1797_11797);
    // MOV byte ptr [0x46eb],0x80 (1000_5A7E / 0x15A7E)
    UInt8[DS, 0x46EB] = 0x80;
    // CALL 0x1000:ad5e (1000_5A83 / 0x15A83)
    NearCall(cs1, 0x5A86, unknown_1000_AD5E_1AD5E);
    // MOV word ptr [0x2786],0xc835 (1000_5A86 / 0x15A86)
    UInt16[DS, 0x2786] = 0xC835;
    // MOV AX,0x5a9a (1000_5A8C / 0x15A8C)
    AX = 0x5A9A;
    // MOV [0x46ed],AX (1000_5A8F / 0x15A8F)
    UInt16[DS, 0x46ED] = AX;
    // CALL AX (1000_5A92 / 0x15A92)
    // Indirect call to AX, generating possible targets from emulator records
    uint targetAddress_1000_5A92 = (uint)(AX);
    switch(targetAddress_1000_5A92) {
      case 0x5A9A : NearCall(cs1, 0x5A94, unknown_1000_5A9A_15A9A);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_5A92);
        break;
    }
    // CALL 0x1000:d792 (1000_5A94 / 0x15A94)
    NearCall(cs1, 0x5A97, unknown_1000_D792_1D792);
    // JMP 0x1000:d712 (1000_5A97 / 0x15A97)
    goto label_1000_D712_1D712;
    label_1000_D712_1D712:
    // MOV SI,0x1cca (1000_D712 / 0x1D712)
    SI = 0x1CCA;
    // JMP 0x1000:d72b (1000_D715 / 0x1D715)
    // Jump converted to entry function call
    return unknown_1000_D72B_1D72B(0);
  }
  
  public Action unknown_1000_5A9A_15A9A(int gotoTarget) {
    label_1000_5A9A_15A9A:
    // CALL 0x1000:c07c (1000_5A9A / 0x15A9A)
    NearCall(cs1, 0x5A9D, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:5b8d (1000_5A9D / 0x15A9D)
    NearCall(cs1, 0x5AA0, unknown_1000_5B8D_15B8D);
    // MOV AL,0x80 (1000_5AA0 / 0x15AA0)
    AL = 0x80;
    // XCHG byte ptr [0x46eb],AL (1000_5AA2 / 0x15AA2)
    byte tmp_1000_5AA2 = UInt8[DS, 0x46EB];
    UInt8[DS, 0x46EB] = AL;
    AL = tmp_1000_5AA2;
    // PUSH AX (1000_5AA6 / 0x15AA6)
    Stack.Push(AX);
    // CALL 0x1000:b6c3 (1000_5AA7 / 0x15AA7)
    NearCall(cs1, 0x5AAA, map_func_ida_1000_B6C3_1B6C3);
    // CALL 0x1000:c13b (1000_5AAA / 0x15AAA)
    NearCall(cs1, 0x5AAD, unknown_1000_C13B_1C13B);
    // CALL 0x1000:5dce (1000_5AAD / 0x15AAD)
    NearCall(cs1, 0x5AB0, unknown_1000_5DCE_15DCE);
    // CALL 0x1000:6314 (1000_5AB0 / 0x15AB0)
    NearCall(cs1, 0x5AB3, unknown_1000_6314_16314);
    // CALL 0x1000:c412 (1000_5AB3 / 0x15AB3)
    NearCall(cs1, 0x5AB6, unknown_1000_C412_1C412);
    // MOV word ptr [0x3cbe],0x0 (1000_5AB6 / 0x15AB6)
    UInt16[DS, 0x3CBE] = 0x0;
    // CALL 0x1000:6715 (1000_5ABC / 0x15ABC)
    NearCall(cs1, 0x5ABF, unknown_1000_6715_16715);
    // MOV SI,0x46e3 (1000_5ABF / 0x15ABF)
    SI = 0x46E3;
    // CALL 0x1000:c6ad (1000_5AC2 / 0x15AC2)
    NearCall(cs1, 0x5AC5, unknown_1000_C6AD_1C6AD);
    // CALL 0x1000:878c (1000_5AC5 / 0x15AC5)
    NearCall(cs1, 0x5AC8, unknown_1000_878C_1878C);
    // POP AX (1000_5AC8 / 0x15AC8)
    AX = Stack.Pop();
    // MOV [0x46eb],AL (1000_5AC9 / 0x15AC9)
    UInt8[DS, 0x46EB] = AL;
    // AND AL,0x40 (1000_5ACC / 0x15ACC)
    // AL &= 0x40;
    AL = Alu.And8(AL, 0x40);
    // JZ 0x1000:5ad3 (1000_5ACE / 0x15ACE)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_5AD3_15AD3(0);
    }
    // CALL 0x1000:5406 (1000_5AD0 / 0x15AD0)
    throw FailAsUntested("Could not find a valid function at address 1000_5406 / 0x15406");
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_5AD3_15AD3(0);
  }
  
  public Action unknown_1000_5AD3_15AD3(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5AD3: goto label_1000_5AD3_15AD3;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5AD3_15AD3:
    // MOV AX,0x1a9e (1000_5AD3 / 0x15AD3)
    AX = 0x1A9E;
    // CALL 0x1000:d95e (1000_5AD6 / 0x15AD6)
    NearCall(cs1, 0x5AD9, SetMapClickHandlerAddressFromAx_1000_D95E_1D95E);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_5AD9_15AD9(0);
  }
  
  public Action unknown_1000_5AD9_15AD9(int gotoTarget) {
    label_1000_5AD9_15AD9:
    // MOV SI,0x46e3 (1000_5AD9 / 0x15AD9)
    SI = 0x46E3;
    // JMP 0x1000:daaa (1000_5ADC / 0x15ADC)
    // Jump converted to entry function call
    return SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA(0);
  }
  
  public Action unknown_1000_5ADF_15ADF(int gotoTarget) {
    label_1000_5ADF_15ADF:
    // CALL 0x1000:7b36 (1000_5ADF / 0x15ADF)
    NearCall(cs1, 0x5AE2, unknown_1000_7B36_17B36);
    // XOR AX,AX (1000_5AE2 / 0x15AE2)
    AX = 0;
    // MOV [0x46eb],AL (1000_5AE4 / 0x15AE4)
    UInt8[DS, 0x46EB] = AL;
    // MOV [0x46f3],AL (1000_5AE7 / 0x15AE7)
    UInt8[DS, 0x46F3] = AL;
    // MOV [0x3cbe],AX (1000_5AEA / 0x15AEA)
    UInt16[DS, 0x3CBE] = AX;
    // MOV [0xa5c0],AX (1000_5AED / 0x15AED)
    UInt16[DS, 0xA5C0] = AX;
    // MOV [0xdbe0],AX (1000_5AF0 / 0x15AF0)
    UInt16[DS, 0xDBE0] = AX;
    // MOV [0xdbe2],AX (1000_5AF3 / 0x15AF3)
    UInt16[DS, 0xDBE2] = AX;
    // MOV [0x1954],AX (1000_5AF6 / 0x15AF6)
    UInt16[DS, 0x1954] = AX;
    // MOV word ptr [0x2786],0xc827 (1000_5AF9 / 0x15AF9)
    UInt16[DS, 0x2786] = 0xC827;
    // MOV SI,0x6b34 (1000_5AFF / 0x15AFF)
    SI = 0x6B34;
    // JMP 0x1000:da5f (1000_5B02 / 0x15B02)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_5B55_15B55(int gotoTarget) {
    label_1000_5B55_15B55:
    // MOV DX,word ptr [DI + 0x2] (1000_5B55 / 0x15B55)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_5B58 / 0x15B58)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // JMP 0x1000:5b60 (1000_5B5B / 0x15B5B)
    // Jump converted to non entry function call
    return unknown_1000_5B5D_15B5D(0x15B60 - cs1 * 0x10);
  }
  
  public Action unknown_1000_5B5D_15B5D(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5B60: goto label_1000_5B60_15B60;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5B5D_15B5D:
    // CALL 0x1000:407e (1000_5B5D / 0x15B5D)
    NearCall(cs1, 0x5B60, unknown_1000_407E_1407E);
    label_1000_5B60_15B60:
    // MOV word ptr [0x197e],BX (1000_5B60 / 0x15B60)
    UInt16[DS, 0x197E] = BX;
    // MOV word ptr [0x197c],DX (1000_5B64 / 0x15B64)
    UInt16[DS, 0x197C] = DX;
    // RET  (1000_5B68 / 0x15B68)
    return NearRet();
  }
  
  public Action unknown_1000_5B69_15B69(int gotoTarget) {
    label_1000_5B69_15B69:
    // MOV SI,0x46e3 (1000_5B69 / 0x15B69)
    SI = 0x46E3;
    // MOV AL,0xfc (1000_5B6C / 0x15B6C)
    AL = 0xFC;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_5B6E_15B6E(0);
  }
  
  public Action unknown_1000_5B6E_15B6E(int gotoTarget) {
    label_1000_5B6E_15B6E:
    // MOV DX,word ptr [SI] (1000_5B6E / 0x15B6E)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_5B70 / 0x15B70)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV DI,word ptr [SI + 0x4] (1000_5B73 / 0x15B73)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV CX,word ptr [SI + 0x6] (1000_5B76 / 0x15B76)
    CX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV BP,0x4 (1000_5B79 / 0x15B79)
    BP = 0x4;
    label_1000_5B7C_15B7C:
    // PUSH AX (1000_5B7C / 0x15B7C)
    Stack.Push(AX);
    // PUSH BP (1000_5B7D / 0x15B7D)
    Stack.Push(BP);
    // DEC DX (1000_5B7E / 0x15B7E)
    DX = Alu.Dec16(DX);
    // DEC BX (1000_5B7F / 0x15B7F)
    BX = Alu.Dec16(BX);
    // CALL 0x1000:c560 (1000_5B80 / 0x15B80)
    NearCall(cs1, 0x5B83, unknown_1000_C560_1C560);
    // POP BP (1000_5B83 / 0x15B83)
    BP = Stack.Pop();
    // POP AX (1000_5B84 / 0x15B84)
    AX = Stack.Pop();
    // INC DI (1000_5B85 / 0x15B85)
    DI = Alu.Inc16(DI);
    // INC CX (1000_5B86 / 0x15B86)
    CX = Alu.Inc16(CX);
    // SUB AL,0x2 (1000_5B87 / 0x15B87)
    // AL -= 0x2;
    AL = Alu.Sub8(AL, 0x2);
    // DEC BP (1000_5B89 / 0x15B89)
    BP = Alu.Dec16(BP);
    // JNZ 0x1000:5b7c (1000_5B8A / 0x15B8A)
    if(!ZeroFlag) {
      goto label_1000_5B7C_15B7C;
    }
    // RET  (1000_5B8C / 0x15B8C)
    return NearRet();
  }
  
  public Action unknown_1000_5B8D_15B8D(int gotoTarget) {
    label_1000_5B8D_15B8D:
    // MOV DI,0xd83c (1000_5B8D / 0x15B8D)
    DI = 0xD83C;
    // CALL 0x1000:5b96 (1000_5B90 / 0x15B90)
    NearCall(cs1, 0x5B93, UnknownMemcopy_1000_5B96_15B96);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_5B93_15B93(0);
  }
  
  public Action unknown_1000_5B93_15B93(int gotoTarget) {
    label_1000_5B93_15B93:
    // MOV DI,0xd834 (1000_5B93 / 0x15B93)
    DI = 0xD834;
    // Function call generated as ASM continues to next function entry point without return
    return UnknownMemcopy_1000_5B96_15B96(0);
  }
  
  public Action UnknownMemcopy_1000_5B96_15B96(int gotoTarget) {
    label_1000_5B96_15B96:
    // MOV SI,0x46e3 (1000_5B96 / 0x15B96)
    SI = 0x46E3;
    // Function call generated as ASM continues to next function entry point without return
    return MemCopy8BytesDsSIToDsDi_1000_5B99_15B99(0);
  }
  
  public Action MemCopy8BytesDsSIToDsDi_1000_5B99_15B99(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5B99: goto label_1000_5B99_15B99;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5B99_15B99:
    // PUSH DS (1000_5B99 / 0x15B99)
    Stack.Push(DS);
    // POP ES (1000_5B9A / 0x15B9A)
    ES = Stack.Pop();
    // MOVSW ES:DI,SI (1000_5B9B / 0x15B9B)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_5B9C / 0x15B9C)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_5B9D / 0x15B9D)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_5B9E / 0x15B9E)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_5B9F / 0x15B9F)
    return NearRet();
  }
  
  public Action MemCopy8BytesFrom1470ToD83C_1000_5BA0_15BA0(int gotoTarget) {
    label_1000_5BA0_15BA0:
    // MOV SI,0x1470 (1000_5BA0 / 0x15BA0)
    SI = 0x1470;
    // MOV DI,0xd83c (1000_5BA3 / 0x15BA3)
    DI = 0xD83C;
    // JMP 0x1000:5b99 (1000_5BA6 / 0x15BA6)
    // Jump converted to entry function call
    return MemCopy8BytesDsSIToDsDi_1000_5B99_15B99(0);
  }
  
  public Action MemCopy8Bytes_1000_5BA8_15BA8(int gotoTarget) {
    label_1000_5BA8_15BA8:
    // MOV SI,0x1470 (1000_5BA8 / 0x15BA8)
    SI = 0x1470;
    // MOV DI,0xd834 (1000_5BAB / 0x15BAB)
    DI = 0xD834;
    // JMP 0x1000:5b99 (1000_5BAE / 0x15BAE)
    // Jump converted to entry function call
    return MemCopy8BytesDsSIToDsDi_1000_5B99_15B99(0);
  }
  
  public Action unknown_1000_5BB0_15BB0(int gotoTarget) {
    label_1000_5BB0_15BB0:
    // CALL 0x1000:c08e (1000_5BB0 / 0x15BB0)
    NearCall(cs1, 0x5BB3, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV SI,0x194a (1000_5BB3 / 0x15BB3)
    SI = 0x194A;
    // MOV word ptr [0xdbe0],SI (1000_5BB6 / 0x15BB6)
    UInt16[DS, 0xDBE0] = SI;
    // CALL 0x1000:7b1b (1000_5BBA / 0x15BBA)
    NearCall(cs1, 0x5BBD, unknown_1000_7B1B_17B1B);
    // CALL 0x1000:d068 (1000_5BBD / 0x15BBD)
    NearCall(cs1, 0x5BC0, SetFontToIntro_1000_D068_1D068);
    // MOV SI,0xe2 (1000_5BC0 / 0x15BC0)
    SI = 0xE2;
    // CALL 0x1000:cf70 (1000_5BC3 / 0x15BC3)
    NearCall(cs1, 0x5BC6, unknown_1000_CF70_1CF70);
    // CALL 0x1000:d03c (1000_5BC6 / 0x15BC6)
    NearCall(cs1, 0x5BC9, unknown_1000_D03C_1D03C);
    // MOV AL,[0x28] (1000_5BC9 / 0x15BC9)
    AL = UInt8[DS, 0x28];
    // XOR AH,AH (1000_5BCC / 0x15BCC)
    AH = 0;
    // CALL 0x1000:e2e3 (1000_5BCE / 0x15BCE)
    NearCall(cs1, 0x5BD1, unknown_1000_E2E3_1E2E3);
    // MOV DX,word ptr [0x194a] (1000_5BD1 / 0x15BD1)
    DX = UInt16[DS, 0x194A];
    // MOV BX,word ptr [0x194c] (1000_5BD5 / 0x15BD5)
    BX = UInt16[DS, 0x194C];
    // ADD DX,0xa (1000_5BD9 / 0x15BD9)
    // DX += 0xA;
    DX = Alu.Add16(DX, 0xA);
    // ADD BX,0x8 (1000_5BDC / 0x15BDC)
    // BX += 0x8;
    BX = Alu.Add16(BX, 0x8);
    // MOV CX,0xf0 (1000_5BDF / 0x15BDF)
    CX = 0xF0;
    // MOV AX,0xe2 (1000_5BE2 / 0x15BE2)
    AX = 0xE2;
    // CALL 0x1000:d194 (1000_5BE5 / 0x15BE5)
    NearCall(cs1, 0x5BE8, unknown_1000_D194_1D194);
    // JMP 0x1000:c07c (1000_5BE8 / 0x15BE8)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_5BEB_15BEB(int gotoTarget) {
    label_1000_5BEB_15BEB:
    // CMP word ptr [0xdbe0],0x194a (1000_5BEB / 0x15BEB)
    Alu.Sub16(UInt16[DS, 0xDBE0], 0x194A);
    // JNZ 0x1000:5c02 (1000_5BF1 / 0x15BF1)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_5C02 / 0x15C02)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_5BF3 / 0x15BF3)
    NearCall(cs1, 0x5BF6, PushAll_1000_E270_1E270);
    // XOR SI,SI (1000_5BF6 / 0x15BF6)
    SI = 0;
    // XCHG word ptr [0xdbe0],SI (1000_5BF8 / 0x15BF8)
    ushort tmp_1000_5BF8 = UInt16[DS, 0xDBE0];
    UInt16[DS, 0xDBE0] = SI;
    SI = tmp_1000_5BF8;
    // CALL 0x1000:c6ad (1000_5BFC / 0x15BFC)
    NearCall(cs1, 0x5BFF, unknown_1000_C6AD_1C6AD);
    // CALL 0x1000:e283 (1000_5BFF / 0x15BFF)
    NearCall(cs1, 0x5C02, PopAll_1000_E283_1E283);
    label_1000_5C02_15C02:
    // RET  (1000_5C02 / 0x15C02)
    return NearRet();
  }
  
  public Action unknown_1000_5C03_15C03(int gotoTarget) {
    label_1000_5C03_15C03:
    // MOV DI,word ptr [0xdbe0] (1000_5C03 / 0x15C03)
    DI = UInt16[DS, 0xDBE0];
    // CMP DI,0x194a (1000_5C07 / 0x15C07)
    Alu.Sub16(DI, 0x194A);
    // JNZ 0x1000:5c22 (1000_5C0B / 0x15C0B)
    if(!ZeroFlag) {
      goto label_1000_5C22_15C22;
    }
    // MOV AX,[0xce7a] (1000_5C0D / 0x15C0D)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,word ptr [0xdc5a] (1000_5C10 / 0x15C10)
    // AX -= UInt16[DS, 0xDC5A];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDC5A]);
    // CMP AX,0x3e8 (1000_5C14 / 0x15C14)
    Alu.Sub16(AX, 0x3E8);
    // JC 0x1000:5c22 (1000_5C17 / 0x15C17)
    if(CarryFlag) {
      goto label_1000_5C22_15C22;
    }
    // CALL 0x1000:dbb2 (1000_5C19 / 0x15C19)
    NearCall(cs1, 0x5C1C, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:5beb (1000_5C1C / 0x15C1C)
    NearCall(cs1, 0x5C1F, unknown_1000_5BEB_15BEB);
    // JMP 0x1000:dbec (1000_5C1F / 0x15C1F)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
    label_1000_5C22_15C22:
    // CMP DI,0x4710 (1000_5C22 / 0x15C22)
    Alu.Sub16(DI, 0x4710);
    // JZ 0x1000:5c32 (1000_5C26 / 0x15C26)
    if(ZeroFlag) {
      goto label_1000_5C32_15C32;
    }
    // MOV DI,word ptr [0xdbe2] (1000_5C28 / 0x15C28)
    DI = UInt16[DS, 0xDBE2];
    // CMP DI,0x4710 (1000_5C2C / 0x15C2C)
    Alu.Sub16(DI, 0x4710);
    // JNZ 0x1000:5c75 (1000_5C30 / 0x15C30)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_5C75 / 0x15C75)
      return NearRet();
    }
    label_1000_5C32_15C32:
    // CALL 0x1000:d6fe (1000_5C32 / 0x15C32)
    NearCall(cs1, 0x5C35, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:5c4b (1000_5C35 / 0x15C35)
    if(!CarryFlag) {
      goto label_1000_5C4B_15C4B;
    }
    // MOV byte ptr [0x46eb],0x40 (1000_5C37 / 0x15C37)
    UInt8[DS, 0x46EB] = 0x40;
    // MOV AL,0xff (1000_5C3C / 0x15C3C)
    AL = 0xFF;
    // CALL 0x1000:5e6d (1000_5C3E / 0x15C3E)
    NearCall(cs1, 0x5C41, unknown_1000_5E6D_15E6D);
    // MOV byte ptr [0x46eb],0xc0 (1000_5C41 / 0x15C41)
    UInt8[DS, 0x46EB] = 0xC0;
    // CMP AX,0x9 (1000_5C46 / 0x15C46)
    Alu.Sub16(AX, 0x9);
    // JC 0x1000:5c4d (1000_5C49 / 0x15C49)
    if(CarryFlag) {
      goto label_1000_5C4D_15C4D;
    }
    label_1000_5C4B_15C4B:
    // XOR DI,DI (1000_5C4B / 0x15C4B)
    DI = 0;
    label_1000_5C4D_15C4D:
    // MOV AX,DI (1000_5C4D / 0x15C4D)
    AX = DI;
    // XCHG word ptr [0x46fc],AX (1000_5C4F / 0x15C4F)
    ushort tmp_1000_5C4F = UInt16[DS, 0x46FC];
    UInt16[DS, 0x46FC] = AX;
    AX = tmp_1000_5C4F;
    // CMP AX,DI (1000_5C53 / 0x15C53)
    Alu.Sub16(AX, DI);
    // JZ 0x1000:5c6e (1000_5C55 / 0x15C55)
    if(ZeroFlag) {
      goto label_1000_5C6E_15C6E;
    }
    // PUSH BX (1000_5C57 / 0x15C57)
    Stack.Push(BX);
    // PUSH DX (1000_5C58 / 0x15C58)
    Stack.Push(DX);
    // PUSH DI (1000_5C59 / 0x15C59)
    Stack.Push(DI);
    // PUSH word ptr [0xdbda] (1000_5C5A / 0x15C5A)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:dbb2 (1000_5C5E / 0x15C5E)
    NearCall(cs1, 0x5C61, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:c08e (1000_5C61 / 0x15C61)
    NearCall(cs1, 0x5C64, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:5692 (1000_5C64 / 0x15C64)
    NearCall(cs1, 0x5C67, unknown_1000_5692_15692);
    // POP word ptr [0xdbda] (1000_5C67 / 0x15C67)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // POP DI (1000_5C6B / 0x15C6B)
    DI = Stack.Pop();
    // POP DX (1000_5C6C / 0x15C6C)
    DX = Stack.Pop();
    // POP BX (1000_5C6D / 0x15C6D)
    BX = Stack.Pop();
    label_1000_5C6E_15C6E:
    // OR DI,DI (1000_5C6E / 0x15C6E)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNZ 0x1000:5c75 (1000_5C70 / 0x15C70)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_5C75 / 0x15C75)
      return NearRet();
    }
    // CALL 0x1000:5746 (1000_5C72 / 0x15C72)
    NearCall(cs1, 0x5C75, unknown_1000_5746_15746);
    label_1000_5C75_15C75:
    // RET  (1000_5C75 / 0x15C75)
    return NearRet();
  }
  
  public Action unknown_1000_5C76_15C76(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5923: break;
      case 0: goto entry; break; //
    }
    label_1000_5923_15923:
    // CALL 0x1000:5944 (1000_5923 / 0x15923)
    NearCall(cs1, 0x5926, unknown_1000_5944_15944);
    // PUSH BX (1000_5926 / 0x15926)
    Stack.Push(BX);
    // CALL 0x1000:5c03 (1000_5927 / 0x15927)
    NearCall(cs1, 0x592A, unknown_1000_5C03_15C03);
    // POP BX (1000_592A / 0x1592A)
    BX = Stack.Pop();
    // MOV DI,word ptr [0x46fc] (1000_592B / 0x1592B)
    DI = UInt16[DS, 0x46FC];
    // OR DI,DI (1000_592F / 0x1592F)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:5922 (1000_5931 / 0x15931)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5922 / 0x15922)
      return NearRet();
    }
    // AND byte ptr [0x46eb],0xbf (1000_5933 / 0x15933)
    // UInt8[DS, 0x46EB] &= 0xBF;
    UInt8[DS, 0x46EB] = Alu.And8(UInt8[DS, 0x46EB], 0xBF);
    // MOV word ptr [0xdbe0],0x0 (1000_5938 / 0x15938)
    UInt16[DS, 0xDBE0] = 0x0;
    // CALL 0x1000:5b55 (1000_593E / 0x1593E)
    NearCall(cs1, 0x5941, unknown_1000_5B55_15B55);
    // JMP 0x1000:8850 (1000_5941 / 0x15941)
    // Jump converted to non entry function call
    return unknown_1000_881F_1881F(0x18850 - cs1 * 0x10);
    entry:
    label_1000_5C76_15C76:
    // CALL 0x1000:5beb (1000_5C76 / 0x15C76)
    NearCall(cs1, 0x5C79, unknown_1000_5BEB_15BEB);
    // CALL 0x1000:c13b (1000_5C79 / 0x15C79)
    NearCall(cs1, 0x5C7C, unknown_1000_C13B_1C13B);
    // MOV DI,word ptr [0xdbe0] (1000_5C7C / 0x15C7C)
    DI = UInt16[DS, 0xDBE0];
    // OR DI,DI (1000_5C80 / 0x15C80)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:5c95 (1000_5C82 / 0x15C82)
    if(ZeroFlag) {
      goto label_1000_5C95_15C95;
    }
    // CALL 0x1000:d6fe (1000_5C84 / 0x15C84)
    NearCall(cs1, 0x5C87, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:5c95 (1000_5C87 / 0x15C87)
    if(!CarryFlag) {
      goto label_1000_5C95_15C95;
    }
    // CMP DI,0x4710 (1000_5C89 / 0x15C89)
    Alu.Sub16(DI, 0x4710);
    // JNZ 0x1000:5c92 (1000_5C8D / 0x15C8D)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:7e97 (1000_5C92 / 0x15C92)
      // Jump converted to non entry function call
      return unknown_1000_7BED_17BED(0x17E97 - cs1 * 0x10);
    }
    // JMP 0x1000:5923 (1000_5C8F / 0x15C8F)
    goto label_1000_5923_15923;
    label_1000_5C92_15C92:
    // JMP 0x1000:7e97 (1000_5C92 / 0x15C92)
    // Jump converted to non entry function call
    return unknown_1000_7BED_17BED(0x17E97 - cs1 * 0x10);
    label_1000_5C95_15C95:
    // MOV DI,word ptr [0xdbe2] (1000_5C95 / 0x15C95)
    DI = UInt16[DS, 0xDBE2];
    // OR DI,DI (1000_5C99 / 0x15C99)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:5ca5 (1000_5C9B / 0x15C9B)
    if(ZeroFlag) {
      goto label_1000_5CA5_15CA5;
    }
    // CALL 0x1000:d6fe (1000_5C9D / 0x15C9D)
    NearCall(cs1, 0x5CA0, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:5ca5 (1000_5CA0 / 0x15CA0)
    if(!CarryFlag) {
      goto label_1000_5CA5_15CA5;
    }
    // JMP 0x1000:7eb8 (1000_5CA2 / 0x15CA2)
    goto label_1000_7EB8_17EB8;
    label_1000_5CA5_15CA5:
    // CMP byte ptr [0x46f5],0x0 (1000_5CA5 / 0x15CA5)
    Alu.Sub8(UInt8[DS, 0x46F5], 0x0);
    // JZ 0x1000:5caf (1000_5CAA / 0x15CAA)
    if(ZeroFlag) {
      goto label_1000_5CAF_15CAF;
    }
    // JMP 0x1000:d2e2 (1000_5CAC / 0x15CAC)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_5CAF_15CAF:
    // CALL 0x1000:6946 (1000_5CAF / 0x15CAF)
    NearCall(cs1, 0x5CB2, unknown_1000_6946_16946);
    // JNC 0x1000:5cb7 (1000_5CB2 / 0x15CB2)
    if(!CarryFlag) {
      goto label_1000_5CB7_15CB7;
    }
    // JMP 0x1000:872c (1000_5CB4 / 0x15CB4)
    goto label_1000_872C_1872C;
    label_1000_5CB7_15CB7:
    // MOV AL,0x31 (1000_5CB7 / 0x15CB7)
    AL = 0x31;
    // CALL 0x1000:5e6d (1000_5CB9 / 0x15CB9)
    NearCall(cs1, 0x5CBC, unknown_1000_5E6D_15E6D);
    // CMP AX,0x14 (1000_5CBC / 0x15CBC)
    Alu.Sub16(AX, 0x14);
    // JNC 0x1000:5cca (1000_5CBF / 0x15CBF)
    if(!CarryFlag) {
      goto label_1000_5CCA_15CCA;
    }
    // CMP DI,word ptr [0x46f8] (1000_5CC1 / 0x15CC1)
    Alu.Sub16(DI, UInt16[DS, 0x46F8]);
    // JZ 0x1000:5cca (1000_5CC5 / 0x15CC5)
    if(ZeroFlag) {
      goto label_1000_5CCA_15CCA;
    }
    // JMP 0x1000:5fb0 (1000_5CC7 / 0x15CC7)
    goto label_1000_5FB0_15FB0;
    label_1000_5CCA_15CCA:
    // CALL 0x1000:5f79 (1000_5CCA / 0x15CCA)
    NearCall(cs1, 0x5CCD, unknown_1000_5F79_15F79);
    // CALL 0x1000:79de (1000_5CCD / 0x15CCD)
    NearCall(cs1, 0x5CD0, unknown_1000_79DE_179DE);
    // CALL 0x1000:58fa (1000_5CD0 / 0x15CD0)
    NearCall(cs1, 0x5CD3, unknown_1000_58FA_158FA);
    // CMP byte ptr [0x1954],0x0 (1000_5CD3 / 0x15CD3)
    Alu.Sub8(UInt8[DS, 0x1954], 0x0);
    // JZ 0x1000:5ce3 (1000_5CD8 / 0x15CD8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5CE3 / 0x15CE3)
      return NearRet();
    }
    // CALL 0x1000:d316 (1000_5CDA / 0x15CDA)
    NearCall(cs1, 0x5CDD, MenuAnimationRelated_1000_D316_1D316);
    // CALL 0x1000:8763 (1000_5CDD / 0x15CDD)
    NearCall(cs1, 0x5CE0, unknown_1000_8763_18763);
    // CALL 0x1000:d280 (1000_5CE0 / 0x15CE0)
    NearCall(cs1, 0x5CE3, unknown_1000_D280_1D280);
    label_1000_5CE3_15CE3:
    // RET  (1000_5CE3 / 0x15CE3)
    return NearRet();
    label_1000_5FB0_15FB0:
    // CALL 0x1000:58fa (1000_5FB0 / 0x15FB0)
    NearCall(cs1, 0x5FB3, unknown_1000_58FA_158FA);
    // CALL 0x1000:7b36 (1000_5FB3 / 0x15FB3)
    NearCall(cs1, 0x5FB6, unknown_1000_7B36_17B36);
    // CMP DI,word ptr [0x114e] (1000_5FB6 / 0x15FB6)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JZ 0x1000:600e (1000_5FBA / 0x15FBA)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_600E_1600E(0);
    }
    // CMP byte ptr [0x8],0xff (1000_5FBC / 0x15FBC)
    Alu.Sub8(UInt8[DS, 0x8], 0xFF);
    // JZ 0x1000:5ff9 (1000_5FC1 / 0x15FC1)
    if(ZeroFlag) {
      goto label_1000_5FF9_15FF9;
    }
    // CMP byte ptr [0xb],0x2 (1000_5FC3 / 0x15FC3)
    Alu.Sub8(UInt8[DS, 0xB], 0x2);
    // JBE 0x1000:5fd8 (1000_5FC8 / 0x15FC8)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_5FD8_15FD8;
    }
    // CMP byte ptr [0x8],0x20 (1000_5FCA / 0x15FCA)
    Alu.Sub8(UInt8[DS, 0x8], 0x20);
    // JNC 0x1000:600e (1000_5FCF / 0x15FCF)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_600E_1600E(0);
    }
    // CMP byte ptr [0x8],0x28 (1000_5FD1 / 0x15FD1)
    Alu.Sub8(UInt8[DS, 0x8], 0x28);
    // JNC 0x1000:600e (1000_5FD6 / 0x15FD6)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_600E_1600E(0);
    }
    label_1000_5FD8_15FD8:
    // PUSH DI (1000_5FD8 / 0x15FD8)
    Stack.Push(DI);
    // MOV DI,word ptr [0x114e] (1000_5FD9 / 0x15FD9)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:7f27 (1000_5FDD / 0x15FDD)
    NearCall(cs1, 0x5FE0, unknown_1000_7F27_17F27);
    // POP DI (1000_5FE0 / 0x15FE0)
    DI = Stack.Pop();
    // MOV BP,0x20da (1000_5FE1 / 0x15FE1)
    BP = 0x20DA;
    // MOV AX,word ptr [BP + 0x2] (1000_5FE4 / 0x15FE4)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // AND AH,0x1f (1000_5FE7 / 0x15FE7)
    // AH &= 0x1F;
    AH = Alu.And8(AH, 0x1F);
    // CMP byte ptr [0x46ff],0x0 (1000_5FEA / 0x15FEA)
    Alu.Sub8(UInt8[DS, 0x46FF], 0x0);
    // JNZ 0x1000:5ff4 (1000_5FEF / 0x15FEF)
    if(!ZeroFlag) {
      goto label_1000_5FF4_15FF4;
    }
    // OR AH,0x40 (1000_5FF1 / 0x15FF1)
    // AH |= 0x40;
    AH = Alu.Or8(AH, 0x40);
    label_1000_5FF4_15FF4:
    // MOV word ptr [BP + 0x2],AX (1000_5FF4 / 0x15FF4)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // JMP 0x1000:6003 (1000_5FF7 / 0x15FF7)
    goto label_1000_6003_16003;
    label_1000_5FF9_15FF9:
    // TEST byte ptr [0xa],0x40 (1000_5FF9 / 0x15FF9)
    Alu.And8(UInt8[DS, 0xA], 0x40);
    // JZ 0x1000:600e (1000_5FFE / 0x15FFE)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_600E_1600E(0);
    }
    // MOV BP,0x20e6 (1000_6000 / 0x16000)
    BP = 0x20E6;
    label_1000_6003_16003:
    // PUSH BP (1000_6003 / 0x16003)
    Stack.Push(BP);
    // CALL 0x1000:600e (1000_6004 / 0x16004)
    NearCall(cs1, 0x6007, unknown_1000_600E_1600E);
    // POP BP (1000_6007 / 0x16007)
    BP = Stack.Pop();
    // MOV BX,0x5f91 (1000_6008 / 0x16008)
    BX = 0x5F91;
    // JMP 0x1000:d323 (1000_600B / 0x1600B)
    // Jump converted to entry function call
    return unknown_1000_D323_1D323(0);
    label_1000_7EB8_17EB8:
    // CMP byte ptr [0x46f5],0x0 (1000_7EB8 / 0x17EB8)
    Alu.Sub8(UInt8[DS, 0x46F5], 0x0);
    // JZ 0x1000:7ee1 (1000_7EBD / 0x17EBD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // MOV DI,0x1940 (1000_7EBF / 0x17EBF)
    DI = 0x1940;
    // CALL 0x1000:d6fe (1000_7EC2 / 0x17EC2)
    NearCall(cs1, 0x7EC5, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:7ee1 (1000_7EC5 / 0x17EC5)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // MOV SI,0x4c60 (1000_7EC7 / 0x17EC7)
    SI = 0x4C60;
    // CALL 0x1000:7ee2 (1000_7ECA / 0x17ECA)
    NearCall(cs1, 0x7ECD, unknown_1000_7EE2_17EE2);
    // JNC 0x1000:7ee1 (1000_7ECD / 0x17ECD)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // CMP byte ptr [DI + 0x4705],0x0 (1000_7ECF / 0x17ECF)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x4705)], 0x0);
    // JNZ 0x1000:7ee1 (1000_7ED4 / 0x17ED4)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // INC byte ptr [DI + 0x4705] (1000_7ED6 / 0x17ED6)
    UInt8[DS, (ushort)(DI + 0x4705)] = Alu.Inc8(UInt8[DS, (ushort)(DI + 0x4705)]);
    // DEC byte ptr [DI + 0x46fe] (1000_7EDA / 0x17EDA)
    UInt8[DS, (ushort)(DI + 0x46FE)] = Alu.Dec8(UInt8[DS, (ushort)(DI + 0x46FE)]);
    label_1000_8685_18685:
    // MOV byte ptr [0x46d8],0x1 (1000_8685 / 0x18685)
    UInt8[DS, 0x46D8] = 0x1;
    // CALL 0x1000:69a3 (1000_868A / 0x1868A)
    NearCall(cs1, 0x868D, unknown_1000_69A3_169A3);
    // CALL 0x1000:7b58 (1000_868D / 0x1868D)
    NearCall(cs1, 0x8690, unknown_1000_7B58_17B58);
    // CALL 0x1000:5f79 (1000_8690 / 0x18690)
    NearCall(cs1, 0x8693, unknown_1000_5F79_15F79);
    // CALL 0x1000:79de (1000_8693 / 0x18693)
    NearCall(cs1, 0x8696, unknown_1000_79DE_179DE);
    // CALL 0x1000:58fa (1000_8696 / 0x18696)
    NearCall(cs1, 0x8699, unknown_1000_58FA_158FA);
    // MOV AL,[0x1954] (1000_8699 / 0x18699)
    AL = UInt8[DS, 0x1954];
    // CMP AL,0x43 (1000_869C / 0x1869C)
    Alu.Sub8(AL, 0x43);
    // JA 0x1000:86b8 (1000_869E / 0x1869E)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_86B8 / 0x186B8)
      return NearRet();
    }
    // CALL 0x1000:6906 (1000_86A0 / 0x186A0)
    NearCall(cs1, 0x86A3, unknown_1000_6906_16906);
    // JNC 0x1000:86b8 (1000_86A3 / 0x186A3)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_86B8 / 0x186B8)
      return NearRet();
    }
    // MOV [0x1955],AL (1000_86A5 / 0x186A5)
    UInt8[DS, 0x1955] = AL;
    // PUSH SI (1000_86A8 / 0x186A8)
    Stack.Push(SI);
    // CALL 0x1000:697c (1000_86A9 / 0x186A9)
    NearCall(cs1, 0x86AC, unknown_1000_697C_1697C);
    // POP SI (1000_86AC / 0x186AC)
    SI = Stack.Pop();
    // PUSH SI (1000_86AD / 0x186AD)
    Stack.Push(SI);
    // CALL 0x1000:780a (1000_86AE / 0x186AE)
    NearCall(cs1, 0x86B1, unknown_1000_780A_1780A);
    // POP SI (1000_86B1 / 0x186B1)
    SI = Stack.Pop();
    // MOV DI,word ptr [SI + 0x4] (1000_86B2 / 0x186B2)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:7c02 (1000_86B5 / 0x186B5)
    NearCall(cs1, 0x86B8, unknown_1000_7C02_17C02);
    label_1000_86B8_186B8:
    // RET  (1000_86B8 / 0x186B8)
    return NearRet();
    label_1000_872C_1872C:
    // MOV SI,word ptr [SI + 0xa] (1000_872C / 0x1872C)
    SI = UInt16[DS, (ushort)(SI + 0xA)];
    // MOV AL,byte ptr [SI] (1000_872F / 0x1872F)
    AL = UInt8[DS, SI];
    // CMP word ptr [0x1176],0x2 (1000_8731 / 0x18731)
    Alu.Sub16(UInt16[DS, 0x1176], 0x2);
    // JNC 0x1000:8741 (1000_8736 / 0x18736)
    if(!CarryFlag) {
      goto label_1000_8741_18741;
    }
    // MOV DI,word ptr [SI + 0x4] (1000_8738 / 0x18738)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP DI,word ptr [0x114e] (1000_873B / 0x1873B)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JNZ 0x1000:8750 (1000_873F / 0x1873F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8750 / 0x18750)
      return NearRet();
    }
    label_1000_8741_18741:
    // CMP AL,byte ptr [0x1954] (1000_8741 / 0x18741)
    Alu.Sub8(AL, UInt8[DS, 0x1954]);
    // JZ 0x1000:874d (1000_8745 / 0x18745)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:7c02 (1000_874D / 0x1874D)
      // Jump converted to entry function call
      return unknown_1000_7C02_17C02(0);
    }
    // MOV [0x1954],AL (1000_8747 / 0x18747)
    UInt8[DS, 0x1954] = AL;
    // JMP 0x1000:8685 (1000_874A / 0x1874A)
    goto label_1000_8685_18685;
    label_1000_874D_1874D:
    // JMP 0x1000:7c02 (1000_874D / 0x1874D)
    // Jump converted to entry function call
    return unknown_1000_7C02_17C02(0);
    label_1000_8750_18750:
    // RET  (1000_8750 / 0x18750)
    return NearRet();
  }
  
  public Action unknown_1000_5D1D_15D1D(int gotoTarget) {
    label_1000_5D1D_15D1D:
    // CMP DX,word ptr [0x46e3] (1000_5D1D / 0x15D1D)
    Alu.Sub16(DX, UInt16[DS, 0x46E3]);
    // CMC  (1000_5D21 / 0x15D21)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:5d35 (1000_5D22 / 0x15D22)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_5D35 / 0x15D35)
      return NearRet();
    }
    // CMP DX,word ptr [0x46e7] (1000_5D24 / 0x15D24)
    Alu.Sub16(DX, UInt16[DS, 0x46E7]);
    // JNC 0x1000:5d35 (1000_5D28 / 0x15D28)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_5D35 / 0x15D35)
      return NearRet();
    }
    // CMP BX,word ptr [0x46e5] (1000_5D2A / 0x15D2A)
    Alu.Sub16(BX, UInt16[DS, 0x46E5]);
    // CMC  (1000_5D2E / 0x15D2E)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:5d35 (1000_5D2F / 0x15D2F)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_5D35 / 0x15D35)
      return NearRet();
    }
    // CMP BX,word ptr [0x46e9] (1000_5D31 / 0x15D31)
    Alu.Sub16(BX, UInt16[DS, 0x46E9]);
    label_1000_5D35_15D35:
    // RET  (1000_5D35 / 0x15D35)
    return NearRet();
  }
  
  public Action unknown_1000_5D36_15D36(int gotoTarget) {
    label_1000_5D36_15D36:
    // CMP byte ptr [DI + 0x8],0x28 (1000_5D36 / 0x15D36)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JC 0x1000:5d43 (1000_5D3A / 0x15D3A)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5D43 / 0x15D43)
      return NearRet();
    }
    // TEST byte ptr [DI + 0xa],0x8 (1000_5D3C / 0x15D3C)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x8);
    // JZ 0x1000:5d43 (1000_5D40 / 0x15D40)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5D43 / 0x15D43)
      return NearRet();
    }
    // STC  (1000_5D42 / 0x15D42)
    CarryFlag = true;
    label_1000_5D43_15D43:
    // RET  (1000_5D43 / 0x15D43)
    return NearRet();
  }
  
  public Action unknown_1000_5D6D_15D6D(int gotoTarget) {
    label_1000_5D6D_15D6D:
    // MOV byte ptr [0x46ec],0x0 (1000_5D6D / 0x15D6D)
    UInt8[DS, 0x46EC] = 0x0;
    // CMP byte ptr [0x46eb],0x0 (1000_5D72 / 0x15D72)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JS 0x1000:5d82 (1000_5D77 / 0x15D77)
    if(SignFlag) {
      goto label_1000_5D82_15D82;
    }
    // JZ 0x1000:5dcd (1000_5D79 / 0x15D79)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5DCD / 0x15DCD)
      return NearRet();
    }
    // CALL 0x1000:dbb2 (1000_5D7B / 0x15D7B)
    NearCall(cs1, 0x5D7E, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // JMP word ptr [0x46ed] (1000_5D7E / 0x15D7E)
    // Indirect jump to word ptr [0x46ed], generating possible targets from emulator records
    uint targetAddress_1000_5D7E = (uint)(UInt16[DS, 0x46ED]);
    switch(targetAddress_1000_5D7E) {
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_5D7E);
        break;
    }
    label_1000_5D82_15D82:
    // CALL 0x1000:c07c (1000_5D82 / 0x15D82)
    NearCall(cs1, 0x5D85, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:dbb2 (1000_5D85 / 0x15D85)
    NearCall(cs1, 0x5D88, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:5b8d (1000_5D88 / 0x15D88)
    NearCall(cs1, 0x5D8B, unknown_1000_5B8D_15B8D);
    // MOV AL,0x80 (1000_5D8B / 0x15D8B)
    AL = 0x80;
    // XCHG byte ptr [0x46eb],AL (1000_5D8D / 0x15D8D)
    byte tmp_1000_5D8D = UInt8[DS, 0x46EB];
    UInt8[DS, 0x46EB] = AL;
    AL = tmp_1000_5D8D;
    // PUSH AX (1000_5D91 / 0x15D91)
    Stack.Push(AX);
    // PUSH word ptr [0x46ef] (1000_5D92 / 0x15D92)
    Stack.Push(UInt16[DS, 0x46EF]);
    // CALL 0x1000:b6c3 (1000_5D96 / 0x15D96)
    NearCall(cs1, 0x5D99, map_func_ida_1000_B6C3_1B6C3);
    // CALL 0x1000:c13b (1000_5D99 / 0x15D99)
    NearCall(cs1, 0x5D9C, unknown_1000_C13B_1C13B);
    // CALL 0x1000:5dce (1000_5D9C / 0x15D9C)
    NearCall(cs1, 0x5D9F, unknown_1000_5DCE_15DCE);
    // CALL 0x1000:6314 (1000_5D9F / 0x15D9F)
    NearCall(cs1, 0x5DA2, unknown_1000_6314_16314);
    // CALL 0x1000:c412 (1000_5DA2 / 0x15DA2)
    NearCall(cs1, 0x5DA5, unknown_1000_C412_1C412);
    // MOV word ptr [0x3cbe],0x0 (1000_5DA5 / 0x15DA5)
    UInt16[DS, 0x3CBE] = 0x0;
    // CALL 0x1000:6715 (1000_5DAB / 0x15DAB)
    NearCall(cs1, 0x5DAE, unknown_1000_6715_16715);
    // MOV SI,0x46e3 (1000_5DAE / 0x15DAE)
    SI = 0x46E3;
    // CALL 0x1000:c6ad (1000_5DB1 / 0x15DB1)
    NearCall(cs1, 0x5DB4, unknown_1000_C6AD_1C6AD);
    // POP SI (1000_5DB4 / 0x15DB4)
    SI = Stack.Pop();
    // OR SI,SI (1000_5DB5 / 0x15DB5)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:5dbc (1000_5DB7 / 0x15DB7)
    if(ZeroFlag) {
      goto label_1000_5DBC_15DBC;
    }
    // CALL 0x1000:697c (1000_5DB9 / 0x15DB9)
    NearCall(cs1, 0x5DBC, unknown_1000_697C_1697C);
    label_1000_5DBC_15DBC:
    // CALL 0x1000:1c18 (1000_5DBC / 0x15DBC)
    NearCall(cs1, 0x5DBF, unknown_1000_1C18_11C18);
    // POP AX (1000_5DBF / 0x15DBF)
    AX = Stack.Pop();
    // MOV [0x46eb],AL (1000_5DC0 / 0x15DC0)
    UInt8[DS, 0x46EB] = AL;
    // AND AL,0x40 (1000_5DC3 / 0x15DC3)
    // AL &= 0x40;
    AL = Alu.And8(AL, 0x40);
    // JZ 0x1000:5dca (1000_5DC5 / 0x15DC5)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:c13b (1000_5DCA / 0x15DCA)
      // Jump converted to entry function call
      return unknown_1000_C13B_1C13B(0);
    }
    // CALL 0x1000:542f (1000_5DC7 / 0x15DC7)
    NearCall(cs1, 0x5DCA, unknown_1000_542F_1542F);
    label_1000_5DCA_15DCA:
    // JMP 0x1000:c13b (1000_5DCA / 0x15DCA)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
    label_1000_5DCD_15DCD:
    // RET  (1000_5DCD / 0x15DCD)
    return NearRet();
  }
  
  public Action unknown_1000_5DCE_15DCE(int gotoTarget) {
    label_1000_5DCE_15DCE:
    // MOV AL,[0x46eb] (1000_5DCE / 0x15DCE)
    AL = UInt8[DS, 0x46EB];
    // OR AL,AL (1000_5DD1 / 0x15DD1)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:5dda (1000_5DD3 / 0x15DD3)
    if(!SignFlag) {
      goto label_1000_5DDA_15DDA;
    }
    // PUSH AX (1000_5DD5 / 0x15DD5)
    Stack.Push(AX);
    // CALL 0x1000:633b (1000_5DD6 / 0x15DD6)
    NearCall(cs1, 0x5DD9, unknown_1000_633B_1633B);
    // POP AX (1000_5DD9 / 0x15DD9)
    AX = Stack.Pop();
    label_1000_5DDA_15DDA:
    // MOV DI,0xa5c0 (1000_5DDA / 0x15DDA)
    DI = 0xA5C0;
    // AND AL,0x40 (1000_5DDD / 0x15DDD)
    // AL &= 0x40;
    AL = Alu.And8(AL, 0x40);
    // JZ 0x1000:5df1 (1000_5DDF / 0x15DDF)
    if(ZeroFlag) {
      goto label_1000_5DF1_15DF1;
    }
    // SUB DI,0x6 (1000_5DE1 / 0x15DE1)
    // DI -= 0x6;
    DI = Alu.Sub16(DI, 0x6);
    label_1000_5DE4_15DE4:
    // ADD DI,0x6 (1000_5DE4 / 0x15DE4)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    // CMP word ptr [DI],0x0 (1000_5DE7 / 0x15DE7)
    Alu.Sub16(UInt16[DS, DI], 0x0);
    // JZ 0x1000:5df1 (1000_5DEA / 0x15DEA)
    if(ZeroFlag) {
      goto label_1000_5DF1_15DF1;
    }
    // TEST byte ptr [DI + 0x5],AL (1000_5DEC / 0x15DEC)
    Alu.And8(UInt8[DS, (ushort)(DI + 0x5)], AL);
    // JZ 0x1000:5de4 (1000_5DEF / 0x15DEF)
    if(ZeroFlag) {
      goto label_1000_5DE4_15DE4;
    }
    label_1000_5DF1_15DF1:
    // MOV SI,0x100 (1000_5DF1 / 0x15DF1)
    SI = 0x100;
    label_1000_5DF4_15DF4:
    // CMP word ptr [SI],-0x1 (1000_5DF4 / 0x15DF4)
    Alu.Sub16(UInt16[DS, SI], 0xFFFF);
    // JZ 0x1000:5e3d (1000_5DF7 / 0x15DF7)
    if(ZeroFlag) {
      goto label_1000_5E3D_15E3D;
    }
    // TEST byte ptr [SI + 0xa],0x80 (1000_5DF9 / 0x15DF9)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xA)], 0x80);
    // JNZ 0x1000:5e38 (1000_5DFD / 0x15DFD)
    if(!ZeroFlag) {
      goto label_1000_5E38_15E38;
    }
    // CALL 0x1000:62c9 (1000_5DFF / 0x15DFF)
    NearCall(cs1, 0x5E02, unknown_1000_62C9_162C9);
    // JC 0x1000:5e38 (1000_5E02 / 0x15E02)
    if(CarryFlag) {
      goto label_1000_5E38_15E38;
    }
    // MOV word ptr [DI],SI (1000_5E04 / 0x15E04)
    UInt16[DS, DI] = SI;
    // MOV word ptr [DI + 0x2],DX (1000_5E06 / 0x15E06)
    UInt16[DS, (ushort)(DI + 0x2)] = DX;
    // MOV BH,byte ptr [0x46eb] (1000_5E09 / 0x15E09)
    BH = UInt8[DS, 0x46EB];
    // MOV word ptr [DI + 0x4],BX (1000_5E0D / 0x15E0D)
    UInt16[DS, (ushort)(DI + 0x4)] = BX;
    // XOR BH,BH (1000_5E10 / 0x15E10)
    BH = 0;
    // CALL 0x1000:5e42 (1000_5E12 / 0x15E12)
    NearCall(cs1, 0x5E15, unknown_1000_5E42_15E42);
    // CMP CL,0x20 (1000_5E15 / 0x15E15)
    Alu.Sub8(CL, 0x20);
    // JNC 0x1000:5e2e (1000_5E18 / 0x15E18)
    if(!CarryFlag) {
      goto label_1000_5E2E_15E2E;
    }
    // PUSH AX (1000_5E1A / 0x15E1A)
    Stack.Push(AX);
    // PUSH BX (1000_5E1B / 0x15E1B)
    Stack.Push(BX);
    // PUSH DX (1000_5E1C / 0x15E1C)
    Stack.Push(DX);
    // PUSH SI (1000_5E1D / 0x15E1D)
    Stack.Push(SI);
    // CALL 0x1000:7c8f (1000_5E1E / 0x15E1E)
    NearCall(cs1, 0x5E21, unknown_1000_7C8F_17C8F);
    // CMP AX,word ptr [0x1176] (1000_5E21 / 0x15E21)
    Alu.Sub16(AX, UInt16[DS, 0x1176]);
    // POP SI (1000_5E25 / 0x15E25)
    SI = Stack.Pop();
    // POP DX (1000_5E26 / 0x15E26)
    DX = Stack.Pop();
    // POP BX (1000_5E27 / 0x15E27)
    BX = Stack.Pop();
    // POP AX (1000_5E28 / 0x15E28)
    AX = Stack.Pop();
    // JBE 0x1000:5e2e (1000_5E29 / 0x15E29)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_5E2E_15E2E;
    }
    // ADD AX,0x5 (1000_5E2B / 0x15E2B)
    // AX += 0x5;
    AX = Alu.Add16(AX, 0x5);
    label_1000_5E2E_15E2E:
    // PUSH SI (1000_5E2E / 0x15E2E)
    Stack.Push(SI);
    // PUSH DI (1000_5E2F / 0x15E2F)
    Stack.Push(DI);
    // CALL 0x1000:c343 (1000_5E30 / 0x15E30)
    NearCall(cs1, 0x5E33, unknown_1000_C343_1C343);
    // POP DI (1000_5E33 / 0x15E33)
    DI = Stack.Pop();
    // POP SI (1000_5E34 / 0x15E34)
    SI = Stack.Pop();
    // ADD DI,0x6 (1000_5E35 / 0x15E35)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    label_1000_5E38_15E38:
    // ADD SI,0x1c (1000_5E38 / 0x15E38)
    // SI += 0x1C;
    SI = Alu.Add16(SI, 0x1C);
    // JMP 0x1000:5df4 (1000_5E3B / 0x15E3B)
    goto label_1000_5DF4_15DF4;
    label_1000_5E3D_15E3D:
    // MOV word ptr [DI],0x0 (1000_5E3D / 0x15E3D)
    UInt16[DS, DI] = 0x0;
    // RET  (1000_5E41 / 0x15E41)
    return NearRet();
  }
  
  public Action unknown_1000_5E42_15E42(int gotoTarget) {
    label_1000_5E42_15E42:
    // MOV AX,0x3a (1000_5E42 / 0x15E42)
    AX = 0x3A;
    // TEST byte ptr [0x46eb],0x80 (1000_5E45 / 0x15E45)
    Alu.And8(UInt8[DS, 0x46EB], 0x80);
    // JZ 0x1000:5e4f (1000_5E4A / 0x15E4A)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return calc_SAL_index_ida_1000_5E4F_15E4F(0);
    }
    // MOV AX,0x7a (1000_5E4C / 0x15E4C)
    AX = 0x7A;
    // Function call generated as ASM continues to next function entry point without return
    return calc_SAL_index_ida_1000_5E4F_15E4F(0);
  }
  
  public Action calc_SAL_index_ida_1000_5E4F_15E4F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5E4F: goto label_1000_5E4F_15E4F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5E4F_15E4F:
    // MOV CL,byte ptr [SI + 0x8] (1000_5E4F / 0x15E4F)
    CL = UInt8[DS, (ushort)(SI + 0x8)];
    // CMP CL,0x20 (1000_5E52 / 0x15E52)
    Alu.Sub8(CL, 0x20);
    // JC 0x1000:5e6a (1000_5E55 / 0x15E55)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5E6A / 0x15E6A)
      return NearRet();
    }
    // INC AX (1000_5E57 / 0x15E57)
    AX = Alu.Inc16(AX);
    // CMP CL,0x21 (1000_5E58 / 0x15E58)
    Alu.Sub8(CL, 0x21);
    // JC 0x1000:5e6a (1000_5E5B / 0x15E5B)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5E6A / 0x15E6A)
      return NearRet();
    }
    // INC AX (1000_5E5D / 0x15E5D)
    AX = Alu.Inc16(AX);
    // CMP CL,0x28 (1000_5E5E / 0x15E5E)
    Alu.Sub8(CL, 0x28);
    // JC 0x1000:5e6a (1000_5E61 / 0x15E61)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5E6A / 0x15E6A)
      return NearRet();
    }
    // INC AX (1000_5E63 / 0x15E63)
    AX = Alu.Inc16(AX);
    // CMP CL,0x30 (1000_5E64 / 0x15E64)
    Alu.Sub8(CL, 0x30);
    // JC 0x1000:5e6a (1000_5E67 / 0x15E67)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_5E6A / 0x15E6A)
      return NearRet();
    }
    // INC AX (1000_5E69 / 0x15E69)
    AX = Alu.Inc16(AX);
    label_1000_5E6A_15E6A:
    // RET  (1000_5E6A / 0x15E6A)
    return NearRet();
  }
  
  public Action unknown_1000_5E6D_15E6D(int gotoTarget) {
    label_1000_5E6D_15E6D:
    // PUSH SI (1000_5E6D / 0x15E6D)
    Stack.Push(SI);
    // MOV BP,SP (1000_5E6E / 0x15E6E)
    BP = SP;
    // SUB SP,0x8 (1000_5E70 / 0x15E70)
    // SP -= 0x8;
    SP = Alu.Sub16(SP, 0x8);
    // MOV word ptr [BP + -0x8],0xffff (1000_5E73 / 0x15E73)
    UInt16[SS, (ushort)(BP - 0x8)] = 0xFFFF;
    // MOV word ptr [BP + -0x6],DX (1000_5E78 / 0x15E78)
    UInt16[SS, (ushort)(BP - 0x6)] = DX;
    // MOV word ptr [BP + -0x4],BX (1000_5E7B / 0x15E7B)
    UInt16[SS, (ushort)(BP - 0x4)] = BX;
    // MOV word ptr [BP + -0x2],0x0 (1000_5E7E / 0x15E7E)
    UInt16[SS, (ushort)(BP - 0x2)] = 0x0;
    // MOV SI,0xa5ba (1000_5E83 / 0x15E83)
    SI = 0xA5BA;
    label_1000_5E86_15E86:
    // ADD SI,0x6 (1000_5E86 / 0x15E86)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // MOV DI,word ptr [SI] (1000_5E89 / 0x15E89)
    DI = UInt16[DS, SI];
    // OR DI,DI (1000_5E8B / 0x15E8B)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:5ebf (1000_5E8D / 0x15E8D)
    if(ZeroFlag) {
      goto label_1000_5EBF_15EBF;
    }
    // CMP byte ptr [DI + 0x8],AL (1000_5E8F / 0x15E8F)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], AL);
    // JNC 0x1000:5e86 (1000_5E92 / 0x15E92)
    if(!CarryFlag) {
      goto label_1000_5E86_15E86;
    }
    // MOV BX,word ptr [SI + 0x4] (1000_5E94 / 0x15E94)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP BH,byte ptr [0x46eb] (1000_5E97 / 0x15E97)
    Alu.Sub8(BH, UInt8[DS, 0x46EB]);
    // JNZ 0x1000:5e86 (1000_5E9B / 0x15E9B)
    if(!ZeroFlag) {
      goto label_1000_5E86_15E86;
    }
    // XOR BH,BH (1000_5E9D / 0x15E9D)
    BH = 0;
    // MOV DX,word ptr [SI + 0x2] (1000_5E9F / 0x15E9F)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // SUB DX,word ptr [BP + -0x6] (1000_5EA2 / 0x15EA2)
    // DX -= UInt16[SS, (ushort)(BP - 0x6)];
    DX = Alu.Sub16(DX, UInt16[SS, (ushort)(BP - 0x6)]);
    // JNS 0x1000:5ea9 (1000_5EA5 / 0x15EA5)
    if(!SignFlag) {
      goto label_1000_5EA9_15EA9;
    }
    // NEG DX (1000_5EA7 / 0x15EA7)
    DX = Alu.Sub16(0, DX);
    label_1000_5EA9_15EA9:
    // SUB BX,word ptr [BP + -0x4] (1000_5EA9 / 0x15EA9)
    // BX -= UInt16[SS, (ushort)(BP - 0x4)];
    BX = Alu.Sub16(BX, UInt16[SS, (ushort)(BP - 0x4)]);
    // JNS 0x1000:5eb0 (1000_5EAC / 0x15EAC)
    if(!SignFlag) {
      goto label_1000_5EB0_15EB0;
    }
    // NEG BX (1000_5EAE / 0x15EAE)
    BX = Alu.Sub16(0, BX);
    label_1000_5EB0_15EB0:
    // ADD DX,BX (1000_5EB0 / 0x15EB0)
    // DX += BX;
    DX = Alu.Add16(DX, BX);
    // CMP DX,word ptr [BP + -0x8] (1000_5EB2 / 0x15EB2)
    Alu.Sub16(DX, UInt16[SS, (ushort)(BP - 0x8)]);
    // JNC 0x1000:5e86 (1000_5EB5 / 0x15EB5)
    if(!CarryFlag) {
      goto label_1000_5E86_15E86;
    }
    // MOV word ptr [BP + -0x8],DX (1000_5EB7 / 0x15EB7)
    UInt16[SS, (ushort)(BP - 0x8)] = DX;
    // MOV word ptr [BP + -0x2],DI (1000_5EBA / 0x15EBA)
    UInt16[SS, (ushort)(BP - 0x2)] = DI;
    // JMP 0x1000:5e86 (1000_5EBD / 0x15EBD)
    goto label_1000_5E86_15E86;
    label_1000_5EBF_15EBF:
    // MOV DI,word ptr [BP + -0x2] (1000_5EBF / 0x15EBF)
    DI = UInt16[SS, (ushort)(BP - 0x2)];
    // MOV AX,word ptr [BP + -0x8] (1000_5EC2 / 0x15EC2)
    AX = UInt16[SS, (ushort)(BP - 0x8)];
    // MOV DX,word ptr [BP + -0x6] (1000_5EC5 / 0x15EC5)
    DX = UInt16[SS, (ushort)(BP - 0x6)];
    // MOV BX,word ptr [BP + -0x4] (1000_5EC8 / 0x15EC8)
    BX = UInt16[SS, (ushort)(BP - 0x4)];
    // ADD SP,0x8 (1000_5ECB / 0x15ECB)
    // SP += 0x8;
    SP = Alu.Add16(SP, 0x8);
    // POP SI (1000_5ECE / 0x15ECE)
    SI = Stack.Pop();
    // RET  (1000_5ECF / 0x15ECF)
    return NearRet();
  }
  
  public Action unknown_1000_5ED0_15ED0(int gotoTarget) {
    label_1000_5ED0_15ED0:
    // MOV BP,0xa5ba (1000_5ED0 / 0x15ED0)
    BP = 0xA5BA;
    label_1000_5ED3_15ED3:
    // ADD BP,0x6 (1000_5ED3 / 0x15ED3)
    // BP += 0x6;
    BP = Alu.Add16(BP, 0x6);
    // MOV AX,word ptr [BP + 0x0] (1000_5ED6 / 0x15ED6)
    AX = UInt16[SS, BP];
    // CMP AX,DI (1000_5ED9 / 0x15ED9)
    Alu.Sub16(AX, DI);
    // JZ 0x1000:5ee3 (1000_5EDB / 0x15EDB)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5EE3 / 0x15EE3)
      return NearRet();
    }
    // OR AX,AX (1000_5EDD / 0x15EDD)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNZ 0x1000:5ed3 (1000_5EDF / 0x15EDF)
    if(!ZeroFlag) {
      goto label_1000_5ED3_15ED3;
    }
    // OR BP,BP (1000_5EE1 / 0x15EE1)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    label_1000_5EE3_15EE3:
    // RET  (1000_5EE3 / 0x15EE3)
    return NearRet();
  }
  
  public Action unknown_1000_5EE4_15EE4(int gotoTarget) {
    label_1000_5EE4_15EE4:
    // CALL 0x1000:5ed0 (1000_5EE4 / 0x15EE4)
    NearCall(cs1, 0x5EE7, unknown_1000_5ED0_15ED0);
    // JNZ 0x1000:5ee3 (1000_5EE7 / 0x15EE7)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_5EE3 / 0x15EE3)
      return NearRet();
    }
    // MOV SI,0x1668 (1000_5EE9 / 0x15EE9)
    SI = 0x1668;
    // CALL 0x1000:6252 (1000_5EEC / 0x15EEC)
    NearCall(cs1, 0x5EEF, unknown_1000_6252_16252);
    // MOV BX,AX (1000_5EEF / 0x15EEF)
    BX = AX;
    // INC AX (1000_5EF1 / 0x15EF1)
    AX = Alu.Inc16(AX);
    // CMP DI,word ptr [0x46f8] (1000_5EF2 / 0x15EF2)
    Alu.Sub16(DI, UInt16[DS, 0x46F8]);
    // JNZ 0x1000:5f12 (1000_5EF6 / 0x15EF6)
    if(!ZeroFlag) {
      goto label_1000_5F12_15F12;
    }
    // CMP AL,byte ptr [0x46f7] (1000_5EF8 / 0x15EF8)
    Alu.Sub8(AL, UInt8[DS, 0x46F7]);
    // JNZ 0x1000:5f01 (1000_5EFC / 0x15EFC)
    if(!ZeroFlag) {
      goto label_1000_5F01_15F01;
    }
    // JMP 0x1000:7b1b (1000_5EFE / 0x15EFE)
    // Jump converted to entry function call
    return unknown_1000_7B1B_17B1B(0);
    label_1000_5F01_15F01:
    // CALL 0x1000:e270 (1000_5F01 / 0x15F01)
    NearCall(cs1, 0x5F04, PushAll_1000_E270_1E270);
    // MOV byte ptr [0x46d8],0x1 (1000_5F04 / 0x15F04)
    UInt8[DS, 0x46D8] = 0x1;
    // CALL 0x1000:5f91 (1000_5F09 / 0x15F09)
    NearCall(cs1, 0x5F0C, unknown_1000_5F91_15F91);
    // CALL 0x1000:c08e (1000_5F0C / 0x15F0C)
    NearCall(cs1, 0x5F0F, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:e283 (1000_5F0F / 0x15F0F)
    NearCall(cs1, 0x5F12, PopAll_1000_E283_1E283);
    label_1000_5F12_15F12:
    // MOV [0x46f7],AL (1000_5F12 / 0x15F12)
    UInt8[DS, 0x46F7] = AL;
    // MOV CL,byte ptr [BX + 0x11d0] (1000_5F15 / 0x15F15)
    CL = UInt8[DS, (ushort)(BX + 0x11D0)];
    // XOR CH,CH (1000_5F19 / 0x15F19)
    CH = 0;
    // MOV DX,word ptr [BP + 0x2] (1000_5F1B / 0x15F1B)
    DX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV BX,word ptr [BP + 0x4] (1000_5F1E / 0x15F1E)
    BX = UInt16[SS, (ushort)(BP + 0x4)];
    // OR BH,BH (1000_5F21 / 0x15F21)
    // BH |= BH;
    BH = Alu.Or8(BH, BH);
    // JNS 0x1000:5ee3 (1000_5F23 / 0x15F23)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_5EE3 / 0x15EE3)
      return NearRet();
    }
    // XOR BH,BH (1000_5F25 / 0x15F25)
    BH = 0;
    // PUSH BX (1000_5F27 / 0x15F27)
    Stack.Push(BX);
    // PUSH DX (1000_5F28 / 0x15F28)
    Stack.Push(DX);
    // MOV AX,CX (1000_5F29 / 0x15F29)
    AX = CX;
    // SHR AX,1 (1000_5F2B / 0x15F2B)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB BX,AX (1000_5F2D / 0x15F2D)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // CMP BX,0x4 (1000_5F2F / 0x15F2F)
    Alu.Sub16(BX, 0x4);
    // JGE 0x1000:5f37 (1000_5F32 / 0x15F32)
    if(SignFlag == OverflowFlag) {
      goto label_1000_5F37_15F37;
    }
    // MOV BX,0x4 (1000_5F34 / 0x15F34)
    BX = 0x4;
    label_1000_5F37_15F37:
    // MOV AX,0x94 (1000_5F37 / 0x15F37)
    AX = 0x94;
    // SUB AX,CX (1000_5F3A / 0x15F3A)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // CMP BX,AX (1000_5F3C / 0x15F3C)
    Alu.Sub16(BX, AX);
    // JL 0x1000:5f42 (1000_5F3E / 0x15F3E)
    if(SignFlag != OverflowFlag) {
      goto label_1000_5F42_15F42;
    }
    // MOV BX,AX (1000_5F40 / 0x15F40)
    BX = AX;
    label_1000_5F42_15F42:
    // ADD DX,0xf (1000_5F42 / 0x15F42)
    // DX += 0xF;
    DX = Alu.Add16(DX, 0xF);
    // CMP DX,0xd2 (1000_5F45 / 0x15F45)
    Alu.Sub16(DX, 0xD2);
    // JL 0x1000:5f4f (1000_5F49 / 0x15F49)
    if(SignFlag != OverflowFlag) {
      goto label_1000_5F4F_15F4F;
    }
    // SUB DX,0x82 (1000_5F4B / 0x15F4B)
    // DX -= 0x82;
    DX = Alu.Sub16(DX, 0x82);
    label_1000_5F4F_15F4F:
    // MOV word ptr [SI],DX (1000_5F4F / 0x15F4F)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],BX (1000_5F51 / 0x15F51)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // ADD DX,0x6a (1000_5F54 / 0x15F54)
    // DX += 0x6A;
    DX = Alu.Add16(DX, 0x6A);
    // MOV word ptr [SI + 0x4],DX (1000_5F57 / 0x15F57)
    UInt16[DS, (ushort)(SI + 0x4)] = DX;
    // ADD BX,CX (1000_5F5A / 0x15F5A)
    // BX += CX;
    BX = Alu.Add16(BX, CX);
    // MOV word ptr [SI + 0x6],BX (1000_5F5C / 0x15F5C)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // MOV word ptr [0xdbe0],SI (1000_5F5F / 0x15F5F)
    UInt16[DS, 0xDBE0] = SI;
    // POP DX (1000_5F63 / 0x15F63)
    DX = Stack.Pop();
    // POP BX (1000_5F64 / 0x15F64)
    BX = Stack.Pop();
    // MOV AX,0xa (1000_5F65 / 0x15F65)
    AX = 0xA;
    // SUB DX,AX (1000_5F68 / 0x15F68)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // SUB BX,AX (1000_5F6A / 0x15F6A)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // MOV DI,0xd816 (1000_5F6C / 0x15F6C)
    DI = 0xD816;
    // MOV word ptr [DI],DX (1000_5F6F / 0x15F6F)
    UInt16[DS, DI] = DX;
    // MOV word ptr [DI + 0x2],BX (1000_5F71 / 0x15F71)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // MOV AL,0x6 (1000_5F74 / 0x15F74)
    AL = 0x6;
    // JMP 0x1000:7b0f (1000_5F76 / 0x15F76)
    // Jump converted to entry function call
    return unknown_1000_7B0F_17B0F(0);
  }
  
  public Action unknown_1000_5F79_15F79(int gotoTarget) {
    label_1000_5F79_15F79:
    // XOR AX,AX (1000_5F79 / 0x15F79)
    AX = 0;
    // XCHG word ptr [0x46f8],AX (1000_5F7B / 0x15F7B)
    ushort tmp_1000_5F7B = UInt16[DS, 0x46F8];
    UInt16[DS, 0x46F8] = AX;
    AX = tmp_1000_5F7B;
    // OR AX,AX (1000_5F7F / 0x15F7F)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:5f90 (1000_5F81 / 0x15F81)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_5F90 / 0x15F90)
      return NearRet();
    }
    // CALL 0x1000:d41b (1000_5F83 / 0x15F83)
    NearCall(cs1, 0x5F86, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // MOV AL,byte ptr [BP + 0x0] (1000_5F86 / 0x15F86)
    AL = UInt8[SS, BP];
    // INC AL (1000_5F89 / 0x15F89)
    AL = Alu.Inc8(AL);
    // JZ 0x1000:5f91 (1000_5F8B / 0x15F8B)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_5F91_15F91(0);
    }
    // JMP 0x1000:d2e2 (1000_5F8D / 0x15F8D)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_5F90_15F90:
    // RET  (1000_5F90 / 0x15F90)
    return NearRet();
  }
  
  public Action unknown_1000_5F91_15F91(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5F91: goto label_1000_5F91_15F91;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5F91_15F91:
    // MOV word ptr [0x46f8],0x0 (1000_5F91 / 0x15F91)
    UInt16[DS, 0x46F8] = 0x0;
    // MOV byte ptr [0x46f7],0x0 (1000_5F97 / 0x15F97)
    UInt8[DS, 0x46F7] = 0x0;
    // MOV SI,0x1668 (1000_5F9C / 0x15F9C)
    SI = 0x1668;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_79DE_179DE(0x15F9F - cs1 * 0x10);
  }
  
  public Action unknown_1000_600E_1600E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x600E: goto label_1000_600E_1600E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_600E_1600E:
    // CALL 0x1000:c08e (1000_600E / 0x1600E)
    NearCall(cs1, 0x6011, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // PUSH DI (1000_6011 / 0x16011)
    Stack.Push(DI);
    // CALL 0x1000:5ee4 (1000_6012 / 0x16012)
    NearCall(cs1, 0x6015, unknown_1000_5EE4_15EE4);
    // POP DI (1000_6015 / 0x16015)
    DI = Stack.Pop();
    // MOV word ptr [0x46f8],DI (1000_6016 / 0x16016)
    UInt16[DS, 0x46F8] = DI;
    // CALL 0x1000:d068 (1000_601A / 0x1601A)
    NearCall(cs1, 0x601D, SetFontToIntro_1000_D068_1D068);
    // MOV CL,0x9a (1000_601D / 0x1601D)
    CL = 0x9A;
    // MOV CH,byte ptr [0x1671] (1000_601F / 0x1601F)
    CH = UInt8[DS, 0x1671];
    // MOV DX,word ptr [0x1668] (1000_6023 / 0x16023)
    DX = UInt16[DS, 0x1668];
    // MOV BX,word ptr [0x166a] (1000_6027 / 0x16027)
    BX = UInt16[DS, 0x166A];
    // ADD DX,0xc (1000_602B / 0x1602B)
    // DX += 0xC;
    DX = Alu.Add16(DX, 0xC);
    // ADD BX,0x4 (1000_602E / 0x1602E)
    // BX += 0x4;
    BX = Alu.Add16(BX, 0x4);
    // CALL 0x1000:629d (1000_6031 / 0x16031)
    NearCall(cs1, 0x6034, unknown_1000_629D_1629D);
    // MOV CL,0x96 (1000_6034 / 0x16034)
    CL = 0x96;
    // SUB DX,0x8 (1000_6036 / 0x16036)
    // DX -= 0x8;
    DX = Alu.Sub16(DX, 0x8);
    // ADD BX,0x9 (1000_6039 / 0x16039)
    // BX += 0x9;
    BX = Alu.Add16(BX, 0x9);
    // CALL 0x1000:62a6 (1000_603C / 0x1603C)
    NearCall(cs1, 0x603F, unknown_1000_62A6_162A6);
    // CALL 0x1000:6252 (1000_603F / 0x1603F)
    NearCall(cs1, 0x6042, unknown_1000_6252_16252);
    // CMP AL,0x2 (1000_6042 / 0x16042)
    Alu.Sub8(AL, 0x2);
    // JZ 0x1000:6059 (1000_6044 / 0x16044)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:c07c (1000_6059 / 0x16059)
      // Jump converted to entry function call
      return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
    }
    // TEST byte ptr [0xa],0x20 (1000_6046 / 0x16046)
    Alu.And8(UInt8[DS, 0xA], 0x20);
    // JZ 0x1000:6056 (1000_604B / 0x1604B)
    if(ZeroFlag) {
      goto label_1000_6056_16056;
    }
    // OR AL,AL (1000_604D / 0x1604D)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:6056 (1000_604F / 0x1604F)
    if(!ZeroFlag) {
      goto label_1000_6056_16056;
    }
    // PUSH AX (1000_6051 / 0x16051)
    Stack.Push(AX);
    // CALL 0x1000:605c (1000_6052 / 0x16052)
    throw FailAsUntested("Could not find a valid function at address 1000_605C / 0x1605C");
    // POP AX (1000_6055 / 0x16055)
    AX = Stack.Pop();
    label_1000_6056_16056:
    // CALL 0x1000:60ac (1000_6056 / 0x16056)
    NearCall(cs1, 0x6059, unknown_1000_60AC_160AC);
    label_1000_6059_16059:
    // JMP 0x1000:c07c (1000_6059 / 0x16059)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_60AC_160AC(int gotoTarget) {
    label_1000_60AC_160AC:
    // CALL 0x1000:c13b (1000_60AC / 0x160AC)
    NearCall(cs1, 0x60AF, unknown_1000_C13B_1C13B);
    // CALL 0x1000:d068 (1000_60AF / 0x160AF)
    NearCall(cs1, 0x60B2, SetFontToIntro_1000_D068_1D068);
    // MOV CL,0x9a (1000_60B2 / 0x160B2)
    CL = 0x9A;
    // MOV DX,word ptr [0x1668] (1000_60B4 / 0x160B4)
    DX = UInt16[DS, 0x1668];
    // ADD BX,0xc (1000_60B8 / 0x160B8)
    // BX += 0xC;
    BX = Alu.Add16(BX, 0xC);
    // ADD DX,0x4 (1000_60BB / 0x160BB)
    // DX += 0x4;
    DX = Alu.Add16(DX, 0x4);
    // CALL 0x1000:627e (1000_60BE / 0x160BE)
    NearCall(cs1, 0x60C1, unknown_1000_627E_1627E);
    // JC 0x1000:60d6 (1000_60C1 / 0x160C1)
    if(CarryFlag) {
      goto label_1000_60D6_160D6;
    }
    // MOV AX,0x6e (1000_60C3 / 0x160C3)
    AX = 0x6E;
    // CALL 0x1000:d194 (1000_60C6 / 0x160C6)
    NearCall(cs1, 0x60C9, unknown_1000_D194_1D194);
    // ADD BX,0xa (1000_60C9 / 0x160C9)
    // BX += 0xA;
    BX = Alu.Add16(BX, 0xA);
    // LEA SI,[DI + 0x14] (1000_60CC / 0x160CC)
    SI = (ushort)(DI + 0x14);
    // MOV BP,word ptr [0x166e] (1000_60CF / 0x160CF)
    BP = UInt16[DS, 0x166E];
    // JMP 0x1000:7e3d (1000_60D3 / 0x160D3)
    // Jump converted to entry function call
    return unknown_1000_7E3D_17E3D(0);
    label_1000_60D6_160D6:
    // MOV AX,0x4c (1000_60D6 / 0x160D6)
    AX = 0x4C;
    // CALL 0x1000:d194 (1000_60D9 / 0x160D9)
    NearCall(cs1, 0x60DC, unknown_1000_D194_1D194);
    // ADD BX,0x6 (1000_60DC / 0x160DC)
    // BX += 0x6;
    BX = Alu.Add16(BX, 0x6);
    // ADD DX,0x2f (1000_60DF / 0x160DF)
    // DX += 0x2F;
    DX = Alu.Add16(DX, 0x2F);
    // PUSH BX (1000_60E2 / 0x160E2)
    Stack.Push(BX);
    // PUSH DX (1000_60E3 / 0x160E3)
    Stack.Push(DX);
    // CALL 0x1000:60f8 (1000_60E4 / 0x160E4)
    throw FailAsUntested("Could not find a valid function at address 1000_60F8 / 0x160F8");
    // XOR AH,AH (1000_60E7 / 0x160E7)
    AH = 0;
    // ADD AX,0xf (1000_60E9 / 0x160E9)
    // AX += 0xF;
    AX = Alu.Add16(AX, 0xF);
    // MOV CL,0x5 (1000_60EC / 0x160EC)
    CL = 0x5;
    // SHR AX,CL (1000_60EE / 0x160EE)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // ADD AX,0x8e (1000_60F0 / 0x160F0)
    // AX += 0x8E;
    AX = Alu.Add16(AX, 0x8E);
    // POP DX (1000_60F3 / 0x160F3)
    DX = Stack.Pop();
    // POP BX (1000_60F4 / 0x160F4)
    BX = Stack.Pop();
    // JMP 0x1000:c22f (1000_60F5 / 0x160F5)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
  }
  
  public Action unknown_1000_61D3_161D3(int gotoTarget) {
    switch(gotoTarget) {
      case 0x61D2: break;
      case 0: goto entry; break; //
    }
    label_1000_61D2_161D2:
    // RET  (1000_61D2 / 0x161D2)
    return NearRet();
    entry:
    label_1000_61D3_161D3:
    // AND CX,0xff (1000_61D3 / 0x161D3)
    // CX &= 0xFF;
    CX = Alu.And16(CX, 0xFF);
    // JZ 0x1000:61d2 (1000_61D7 / 0x161D7)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_61D2 / 0x161D2)
      return NearRet();
    }
    // PUSH BX (1000_61D9 / 0x161D9)
    Stack.Push(BX);
    // PUSH DI (1000_61DA / 0x161DA)
    Stack.Push(DI);
    // PUSH AX (1000_61DB / 0x161DB)
    Stack.Push(AX);
    // PUSH DX (1000_61DC / 0x161DC)
    Stack.Push(DX);
    // CALL 0x1000:c1f4 (1000_61DD / 0x161DD)
    NearCall(cs1, 0x61E0, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // MOV DI,BP (1000_61E0 / 0x161E0)
    DI = BP;
    // SUB DI,BX (1000_61E2 / 0x161E2)
    // DI -= BX;
    DI = Alu.Sub16(DI, BX);
    // MOV BP,word ptr ES:[SI + 0x2] (1000_61E4 / 0x161E4)
    BP = UInt16[ES, (ushort)(SI + 0x2)];
    // AND BP,0xff (1000_61E8 / 0x161E8)
    // BP &= 0xFF;
    BP = Alu.And16(BP, 0xFF);
    // ADD BP,0x2 (1000_61EC / 0x161EC)
    // BP += 0x2;
    BP = Alu.Add16(BP, 0x2);
    // MOV AX,DI (1000_61EF / 0x161EF)
    AX = DI;
    // XOR DX,DX (1000_61F1 / 0x161F1)
    DX = 0;
    // DIV CX (1000_61F3 / 0x161F3)
    Cpu.Div16(CX);
    // CMP AX,BP (1000_61F5 / 0x161F5)
    Alu.Sub16(AX, BP);
    // JNC 0x1000:620f (1000_61F7 / 0x161F7)
    if(!CarryFlag) {
      goto label_1000_620F_1620F;
    }
    // SUB DI,BP (1000_61F9 / 0x161F9)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // MOV AX,DI (1000_61FB / 0x161FB)
    AX = DI;
    // XOR DX,DX (1000_61FD / 0x161FD)
    DX = 0;
    // DIV CX (1000_61FF / 0x161FF)
    Cpu.Div16(CX);
    // MOV BP,AX (1000_6201 / 0x16201)
    BP = AX;
    // CMP BP,0x2 (1000_6203 / 0x16203)
    Alu.Sub16(BP, 0x2);
    // JNC 0x1000:620f (1000_6206 / 0x16206)
    if(!CarryFlag) {
      goto label_1000_620F_1620F;
    }
    // MOV BP,0x2 (1000_6208 / 0x16208)
    BP = 0x2;
    // MOV CX,DI (1000_620B / 0x1620B)
    CX = DI;
    // SHR CX,1 (1000_620D / 0x1620D)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    label_1000_620F_1620F:
    // POP DX (1000_620F / 0x1620F)
    DX = Stack.Pop();
    // POP AX (1000_6210 / 0x16210)
    AX = Stack.Pop();
    label_1000_6211_16211:
    // PUSH AX (1000_6211 / 0x16211)
    Stack.Push(AX);
    // PUSH BX (1000_6212 / 0x16212)
    Stack.Push(BX);
    // PUSH CX (1000_6213 / 0x16213)
    Stack.Push(CX);
    // PUSH DX (1000_6214 / 0x16214)
    Stack.Push(DX);
    // PUSH BP (1000_6215 / 0x16215)
    Stack.Push(BP);
    // CALL 0x1000:c22f (1000_6216 / 0x16216)
    NearCall(cs1, 0x6219, draw_sprite_ida_1000_C22F_1C22F);
    // POP BP (1000_6219 / 0x16219)
    BP = Stack.Pop();
    // POP DX (1000_621A / 0x1621A)
    DX = Stack.Pop();
    // POP CX (1000_621B / 0x1621B)
    CX = Stack.Pop();
    // POP BX (1000_621C / 0x1621C)
    BX = Stack.Pop();
    // POP AX (1000_621D / 0x1621D)
    AX = Stack.Pop();
    // ADD BX,BP (1000_621E / 0x1621E)
    // BX += BP;
    BX = Alu.Add16(BX, BP);
    // LOOP 0x1000:6211 (1000_6220 / 0x16220)
    if(--CX != 0) {
      goto label_1000_6211_16211;
    }
    // POP DI (1000_6222 / 0x16222)
    DI = Stack.Pop();
    // POP BX (1000_6223 / 0x16223)
    BX = Stack.Pop();
    // CALL 0x1000:c1f4 (1000_6224 / 0x16224)
    NearCall(cs1, 0x6227, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // MOV AX,word ptr ES:[SI] (1000_6227 / 0x16227)
    AX = UInt16[ES, SI];
    // AND AH,0xf (1000_622A / 0x1622A)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // ADD DX,AX (1000_622D / 0x1622D)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // INC DX (1000_622F / 0x1622F)
    DX = Alu.Inc16(DX);
    // RET  (1000_6230 / 0x16230)
    return NearRet();
  }
  
  public Action unknown_1000_6231_16231(int gotoTarget) {
    label_1000_6231_16231:
    // PUSH BX (1000_6231 / 0x16231)
    Stack.Push(BX);
    // MOV BL,byte ptr [DI + 0x8] (1000_6232 / 0x16232)
    BL = UInt8[DS, (ushort)(DI + 0x8)];
    // XOR AX,AX (1000_6235 / 0x16235)
    AX = 0;
    // CMP BL,0x20 (1000_6237 / 0x16237)
    Alu.Sub8(BL, 0x20);
    // JC 0x1000:6250 (1000_623A / 0x1623A)
    if(CarryFlag) {
      goto label_1000_6250_16250;
    }
    // INC AX (1000_623C / 0x1623C)
    AX = Alu.Inc16(AX);
    // CMP BL,0x21 (1000_623D / 0x1623D)
    Alu.Sub8(BL, 0x21);
    // JC 0x1000:6250 (1000_6240 / 0x16240)
    if(CarryFlag) {
      goto label_1000_6250_16250;
    }
    // INC AX (1000_6242 / 0x16242)
    AX = Alu.Inc16(AX);
    // CMP BL,0x28 (1000_6243 / 0x16243)
    Alu.Sub8(BL, 0x28);
    // JC 0x1000:6250 (1000_6246 / 0x16246)
    if(CarryFlag) {
      goto label_1000_6250_16250;
    }
    // INC AX (1000_6248 / 0x16248)
    AX = Alu.Inc16(AX);
    // CMP BL,0x30 (1000_6249 / 0x16249)
    Alu.Sub8(BL, 0x30);
    // JC 0x1000:6250 (1000_624C / 0x1624C)
    if(CarryFlag) {
      goto label_1000_6250_16250;
    }
    // SUB AL,0x2 (1000_624E / 0x1624E)
    // AL -= 0x2;
    AL = Alu.Sub8(AL, 0x2);
    label_1000_6250_16250:
    // POP BX (1000_6250 / 0x16250)
    BX = Stack.Pop();
    // RET  (1000_6251 / 0x16251)
    return NearRet();
  }
  
  public Action unknown_1000_6252_16252(int gotoTarget) {
    label_1000_6252_16252:
    // CALL 0x1000:627e (1000_6252 / 0x16252)
    NearCall(cs1, 0x6255, unknown_1000_627E_1627E);
    // JC 0x1000:627a (1000_6255 / 0x16255)
    if(CarryFlag) {
      goto label_1000_627A_1627A;
    }
    // CALL 0x1000:5d36 (1000_6257 / 0x16257)
    NearCall(cs1, 0x625A, unknown_1000_5D36_15D36);
    // MOV AX,0x2 (1000_625A / 0x1625A)
    AX = 0x2;
    // JC 0x1000:6260 (1000_625D / 0x1625D)
    if(CarryFlag) {
      goto label_1000_6260_16260;
    }
    // RET  (1000_625F / 0x1625F)
    return NearRet();
    label_1000_6260_16260:
    // TEST byte ptr [DI + 0xa],0x10 (1000_6260 / 0x16260)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x10);
    // JZ 0x1000:627d (1000_6264 / 0x16264)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_627D / 0x1627D)
      return NearRet();
    }
    // CALL 0x1000:6231 (1000_6266 / 0x16266)
    NearCall(cs1, 0x6269, unknown_1000_6231_16231);
    // OR AX,AX (1000_6269 / 0x16269)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:627d (1000_626B / 0x1626B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_627D / 0x1627D)
      return NearRet();
    }
    // CMP AL,0x3 (1000_626D / 0x1626D)
    Alu.Sub8(AL, 0x3);
    // JNZ 0x1000:6274 (1000_626F / 0x1626F)
    if(!ZeroFlag) {
      goto label_1000_6274_16274;
    }
    // XOR AX,AX (1000_6271 / 0x16271)
    AX = 0;
    // RET  (1000_6273 / 0x16273)
    return NearRet();
    label_1000_6274_16274:
    // CMP AL,0x2 (1000_6274 / 0x16274)
    Alu.Sub8(AL, 0x2);
    // MOV AL,0x2 (1000_6276 / 0x16276)
    AL = 0x2;
    // JNZ 0x1000:627d (1000_6278 / 0x16278)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_627D / 0x1627D)
      return NearRet();
    }
    label_1000_627A_1627A:
    // MOV AX,0x1 (1000_627A / 0x1627A)
    AX = 0x1;
    label_1000_627D_1627D:
    // RET  (1000_627D / 0x1627D)
    return NearRet();
  }
  
  public Action unknown_1000_627E_1627E(int gotoTarget) {
    label_1000_627E_1627E:
    // CALL 0x1000:e270 (1000_627E / 0x1627E)
    NearCall(cs1, 0x6281, PushAll_1000_E270_1E270);
    // TEST byte ptr [DI + 0xa],0x2 (1000_6281 / 0x16281)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:6293 (1000_6285 / 0x16285)
    if(!ZeroFlag) {
      goto label_1000_6293_16293;
    }
    // CALL 0x1000:5d36 (1000_6287 / 0x16287)
    NearCall(cs1, 0x628A, unknown_1000_5D36_15D36);
    // JC 0x1000:6298 (1000_628A / 0x1628A)
    if(CarryFlag) {
      goto label_1000_6298_16298;
    }
    // CALL 0x1000:5098 (1000_628C / 0x1628C)
    throw FailAsUntested("Could not find a valid function at address 1000_5098 / 0x15098");
    // OR DX,DX (1000_628F / 0x1628F)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:6298 (1000_6291 / 0x16291)
    if(ZeroFlag) {
      goto label_1000_6298_16298;
    }
    label_1000_6293_16293:
    // CALL 0x1000:e283 (1000_6293 / 0x16293)
    NearCall(cs1, 0x6296, PopAll_1000_E283_1E283);
    // STC  (1000_6296 / 0x16296)
    CarryFlag = true;
    // RET  (1000_6297 / 0x16297)
    return NearRet();
    label_1000_6298_16298:
    // CALL 0x1000:e283 (1000_6298 / 0x16298)
    NearCall(cs1, 0x629B, PopAll_1000_E283_1E283);
    // CLC  (1000_629B / 0x1629B)
    CarryFlag = false;
    // RET  (1000_629C / 0x1629C)
    return NearRet();
  }
  
  public Action unknown_1000_629D_1629D(int gotoTarget) {
    label_1000_629D_1629D:
    // CALL 0x1000:6231 (1000_629D / 0x1629D)
    NearCall(cs1, 0x62A0, unknown_1000_6231_16231);
    // ADD AX,0x44 (1000_62A0 / 0x162A0)
    // AX += 0x44;
    AX = Alu.Add16(AX, 0x44);
    // JMP 0x1000:d194 (1000_62A3 / 0x162A3)
    // Jump converted to entry function call
    return unknown_1000_D194_1D194(0);
  }
  
  public Action unknown_1000_62A6_162A6(int gotoTarget) {
    label_1000_62A6_162A6:
    // MOV AL,byte ptr [DI] (1000_62A6 / 0x162A6)
    AL = UInt8[DS, DI];
    // XOR AH,AH (1000_62A8 / 0x162A8)
    AH = 0;
    // ADD AX,0x0 (1000_62AA / 0x162AA)
    // AX += 0x0;
    AX = Alu.Add16(AX, 0x0);
    // CALL 0x1000:d194 (1000_62AD / 0x162AD)
    NearCall(cs1, 0x62B0, unknown_1000_D194_1D194);
    // CMP byte ptr [DI + 0x1],0x3 (1000_62B0 / 0x162B0)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x1)], 0x3);
    // MOV AL,0x20 (1000_62B4 / 0x162B4)
    AL = 0x20;
    // JC 0x1000:62ba (1000_62B6 / 0x162B6)
    if(CarryFlag) {
      goto label_1000_62BA_162BA;
    }
    // MOV AL,0x2d (1000_62B8 / 0x162B8)
    AL = 0x2D;
    label_1000_62BA_162BA:
    // CALL word ptr [0x2518] (1000_62BA / 0x162BA)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_62BA = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_62BA) {
      case 0xD096 : NearCall(cs1, 0x62BE, unknown_1000_D096_1D096);
        break;
      case 0xD12F : NearCall(cs1, 0x62BE, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_62BA);
        break;
    }
    // MOV AL,byte ptr [DI + 0x1] (1000_62BE / 0x162BE)
    AL = UInt8[DS, (ushort)(DI + 0x1)];
    // XOR AH,AH (1000_62C1 / 0x162C1)
    AH = 0;
    // ADD AX,0xc (1000_62C3 / 0x162C3)
    // AX += 0xC;
    AX = Alu.Add16(AX, 0xC);
    // JMP 0x1000:d19b (1000_62C6 / 0x162C6)
    // Jump converted to entry function call
    return unknown_1000_D19B_1D19B(0);
  }
  
  public Action unknown_1000_62C9_162C9(int gotoTarget) {
    label_1000_62C9_162C9:
    // CMP byte ptr [0x46eb],0x1 (1000_62C9 / 0x162C9)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x1);
    // JC 0x1000:62f1 (1000_62CE / 0x162CE)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_62F1 / 0x162F1)
      return NearRet();
    }
    // MOV DX,word ptr [SI + 0x2] (1000_62D0 / 0x162D0)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BX,word ptr [SI + 0x4] (1000_62D3 / 0x162D3)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_62D6_162D6(0);
  }
  
  public Action unknown_1000_62D6_162D6(int gotoTarget) {
    switch(gotoTarget) {
      case 0x62F1: goto label_1000_62F1_162F1;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_62D6_162D6:
    // CALL 0x1000:b647 (1000_62D6 / 0x162D6)
    NearCall(cs1, 0x62D9, unknown_1000_B647_1B647);
    // CMP DX,word ptr [0x46e3] (1000_62D9 / 0x162D9)
    Alu.Sub16(DX, UInt16[DS, 0x46E3]);
    // JC 0x1000:62f1 (1000_62DD / 0x162DD)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_62F1 / 0x162F1)
      return NearRet();
    }
    // CMP DX,word ptr [0x46e7] (1000_62DF / 0x162DF)
    Alu.Sub16(DX, UInt16[DS, 0x46E7]);
    // CMC  (1000_62E3 / 0x162E3)
    CarryFlag = !CarryFlag;
    // JC 0x1000:62f1 (1000_62E4 / 0x162E4)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_62F1 / 0x162F1)
      return NearRet();
    }
    // CMP BX,word ptr [0x46e5] (1000_62E6 / 0x162E6)
    Alu.Sub16(BX, UInt16[DS, 0x46E5]);
    // JC 0x1000:62f1 (1000_62EA / 0x162EA)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_62F1 / 0x162F1)
      return NearRet();
    }
    // CMP BX,word ptr [0x46e9] (1000_62EC / 0x162EC)
    Alu.Sub16(BX, UInt16[DS, 0x46E9]);
    // CMC  (1000_62F0 / 0x162F0)
    CarryFlag = !CarryFlag;
    label_1000_62F1_162F1:
    // RET  (1000_62F1 / 0x162F1)
    return NearRet();
  }
  
  public Action unknown_1000_62F2_162F2(int gotoTarget) {
    label_1000_62F2_162F2:
    // CALL 0x1000:68eb (1000_62F2 / 0x162F2)
    NearCall(cs1, 0x62F5, unknown_1000_68EB_168EB);
    // TEST byte ptr [SI + 0x3],0x40 (1000_62F5 / 0x162F5)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:6306 (1000_62F9 / 0x162F9)
    if(!ZeroFlag) {
      goto label_1000_6306_16306;
    }
    // MOV SI,word ptr [SI + 0x4] (1000_62FB / 0x162FB)
    SI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:62c9 (1000_62FE / 0x162FE)
    NearCall(cs1, 0x6301, unknown_1000_62C9_162C9);
    // MOV AX,0x36 (1000_6301 / 0x16301)
    AX = 0x36;
    // JMP 0x1000:6322 (1000_6304 / 0x16304)
    goto label_1000_6322_16322;
    label_1000_6306_16306:
    // MOV DX,word ptr [SI + 0x6] (1000_6306 / 0x16306)
    DX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV BX,word ptr [SI + 0x8] (1000_6309 / 0x16309)
    BX = UInt16[DS, (ushort)(SI + 0x8)];
    // CALL 0x1000:62d6 (1000_630C / 0x1630C)
    NearCall(cs1, 0x630F, unknown_1000_62D6_162D6);
    // MOV AX,0x36 (1000_630F / 0x1630F)
    AX = 0x36;
    // JMP 0x1000:6322 (1000_6312 / 0x16312)
    goto label_1000_6322_16322;
    label_1000_6322_16322:
    // JC 0x1000:62f1 (1000_6322 / 0x16322)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_62F1 / 0x162F1)
      return NearRet();
    }
    // PUSH word ptr [0x2784] (1000_6324 / 0x16324)
    Stack.Push(UInt16[DS, 0x2784]);
    // PUSH AX (1000_6328 / 0x16328)
    Stack.Push(AX);
    // CALL 0x1000:c137 (1000_6329 / 0x16329)
    NearCall(cs1, 0x632C, load_icons_sprites_ida_1000_C137_1C137);
    // POP AX (1000_632C / 0x1632C)
    AX = Stack.Pop();
    // CALL 0x1000:c1f4 (1000_632D / 0x1632D)
    NearCall(cs1, 0x6330, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // SUB BL,byte ptr ES:[SI + 0x2] (1000_6330 / 0x16330)
    // BL -= UInt8[ES, (ushort)(SI + 0x2)];
    BL = Alu.Sub8(BL, UInt8[ES, (ushort)(SI + 0x2)]);
    // CALL 0x1000:c30d (1000_6334 / 0x16334)
    NearCall(cs1, 0x6337, unknown_1000_C30D_1C30D);
    // POP AX (1000_6337 / 0x16337)
    AX = Stack.Pop();
    // JMP 0x1000:c13e (1000_6338 / 0x16338)
    // Jump converted to entry function call
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action unknown_1000_6314_16314(int gotoTarget) {
    label_1000_6314_16314:
    // CALL 0x1000:407e (1000_6314 / 0x16314)
    NearCall(cs1, 0x6317, unknown_1000_407E_1407E);
    // CALL 0x1000:62d6 (1000_6317 / 0x16317)
    NearCall(cs1, 0x631A, unknown_1000_62D6_162D6);
    // MOV AX,0x4c (1000_631A / 0x1631A)
    AX = 0x4C;
    // PUSHF  (1000_631D / 0x1631D)
    Stack.Push(FlagRegister);
    // SUB DX,0xd (1000_631E / 0x1631E)
    // DX -= 0xD;
    DX = Alu.Sub16(DX, 0xD);
    // POPF  (1000_6321 / 0x16321)
    FlagRegister = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_62F2_162F2(0x16322 - cs1 * 0x10);
  }
  
  public Action unknown_1000_633B_1633B(int gotoTarget) {
    label_1000_633B_1633B:
    // MOV DX,word ptr [0x197c] (1000_633B / 0x1633B)
    DX = UInt16[DS, 0x197C];
    // MOV BX,word ptr [0x197e] (1000_633F / 0x1633F)
    BX = UInt16[DS, 0x197E];
    // SUB BX,0x12 (1000_6343 / 0x16343)
    // BX -= 0x12;
    BX = Alu.Sub16(BX, 0x12);
    label_1000_6346_16346:
    // CALL 0x1000:634d (1000_6346 / 0x16346)
    NearCall(cs1, 0x6349, unknown_1000_634D_1634D);
    // INC BX (1000_6349 / 0x16349)
    BX = Alu.Inc16(BX);
    // JNC 0x1000:6346 (1000_634A / 0x1634A)
    if(!CarryFlag) {
      goto label_1000_6346_16346;
    }
    // RET  (1000_634C / 0x1634C)
    return NearRet();
  }
  
  public Action unknown_1000_634D_1634D(int gotoTarget) {
    label_1000_634D_1634D:
    // PUSH BX (1000_634D / 0x1634D)
    Stack.Push(BX);
    // PUSH DX (1000_634E / 0x1634E)
    Stack.Push(DX);
    // CALL 0x1000:62d6 (1000_634F / 0x1634F)
    NearCall(cs1, 0x6352, unknown_1000_62D6_162D6);
    // POP SI (1000_6352 / 0x16352)
    SI = Stack.Pop();
    // POP CX (1000_6353 / 0x16353)
    CX = Stack.Pop();
    // JC 0x1000:6369 (1000_6354 / 0x16354)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_6369 / 0x16369)
      return NearRet();
    }
    // PUSH BX (1000_6356 / 0x16356)
    Stack.Push(BX);
    // PUSH CX (1000_6357 / 0x16357)
    Stack.Push(CX);
    // PUSH DX (1000_6358 / 0x16358)
    Stack.Push(DX);
    // PUSH SI (1000_6359 / 0x16359)
    Stack.Push(SI);
    // CALL 0x1000:636a (1000_635A / 0x1635A)
    NearCall(cs1, 0x635D, unknown_1000_636A_1636A);
    // POP SI (1000_635D / 0x1635D)
    SI = Stack.Pop();
    // POP DX (1000_635E / 0x1635E)
    DX = Stack.Pop();
    // POP CX (1000_635F / 0x1635F)
    CX = Stack.Pop();
    // POP BX (1000_6360 / 0x16360)
    BX = Stack.Pop();
    // PUSH CX (1000_6361 / 0x16361)
    Stack.Push(CX);
    // PUSH SI (1000_6362 / 0x16362)
    Stack.Push(SI);
    // CALL 0x1000:639a (1000_6363 / 0x16363)
    NearCall(cs1, 0x6366, unknown_1000_639A_1639A);
    // POP DX (1000_6366 / 0x16366)
    DX = Stack.Pop();
    // POP BX (1000_6367 / 0x16367)
    BX = Stack.Pop();
    // CLC  (1000_6368 / 0x16368)
    CarryFlag = false;
    label_1000_6369_16369:
    // RET  (1000_6369 / 0x16369)
    return NearRet();
  }
  
  public Action unknown_1000_636A_1636A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6394: goto label_1000_6394_16394;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_636A_1636A:
    // XCHG SI,DX (1000_636A / 0x1636A)
    ushort tmp_1000_636A = SI;
    SI = DX;
    DX = tmp_1000_636A;
    // XCHG CX,BX (1000_636C / 0x1636C)
    ushort tmp_1000_636C = CX;
    CX = BX;
    BX = tmp_1000_636C;
    // CALL 0x1000:b58b (1000_636E / 0x1636E)
    NearCall(cs1, 0x6371, map_func_ida_1000_B58B_1B58B);
    // XCHG SI,DX (1000_6371 / 0x16371)
    ushort tmp_1000_6371 = SI;
    SI = DX;
    DX = tmp_1000_6371;
    // MOV BX,CX (1000_6373 / 0x16373)
    BX = CX;
    label_1000_6375_16375:
    // MOV AX,word ptr ES:[DI] (1000_6375 / 0x16375)
    AX = UInt16[ES, DI];
    // AND AX,0x3030 (1000_6378 / 0x16378)
    // AX &= 0x3030;
    AX = Alu.And16(AX, 0x3030);
    // CMP AL,0x10 (1000_637B / 0x1637B)
    Alu.Sub8(AL, 0x10);
    // JZ 0x1000:6395 (1000_637D / 0x1637D)
    if(ZeroFlag) {
      goto label_1000_6395_16395;
    }
    label_1000_637F_1637F:
    // ADD DX,0x4 (1000_637F / 0x1637F)
    // DX += 0x4;
    DX = Alu.Add16(DX, 0x4);
    // CMP DX,word ptr [0x46e7] (1000_6382 / 0x16382)
    Alu.Sub16(DX, UInt16[DS, 0x46E7]);
    // JNC 0x1000:6394 (1000_6386 / 0x16386)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6394 / 0x16394)
      return NearRet();
    }
    // INC DI (1000_6388 / 0x16388)
    DI = Alu.Inc16(DI);
    // INC SI (1000_6389 / 0x16389)
    SI = Alu.Inc16(SI);
    // CMP SI,BP (1000_638A / 0x1638A)
    Alu.Sub16(SI, BP);
    // JC 0x1000:6375 (1000_638C / 0x1638C)
    if(CarryFlag) {
      goto label_1000_6375_16375;
    }
    // SUB SI,BP (1000_638E / 0x1638E)
    // SI -= BP;
    SI = Alu.Sub16(SI, BP);
    // SUB DI,BP (1000_6390 / 0x16390)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // JMP 0x1000:6375 (1000_6392 / 0x16392)
    goto label_1000_6375_16375;
    label_1000_6394_16394:
    // RET  (1000_6394 / 0x16394)
    return NearRet();
    label_1000_6395_16395:
    // CALL 0x1000:63c7 (1000_6395 / 0x16395)
    throw FailAsUntested("Could not find a valid function at address 1000_63C7 / 0x163C7");
    // JMP 0x1000:637f (1000_6398 / 0x16398)
    goto label_1000_637F_1637F;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_639A_1639A(0);
  }
  
  public Action unknown_1000_639A_1639A(int gotoTarget) {
    label_1000_639A_1639A:
    // XCHG SI,DX (1000_639A / 0x1639A)
    ushort tmp_1000_639A = SI;
    SI = DX;
    DX = tmp_1000_639A;
    // XCHG CX,BX (1000_639C / 0x1639C)
    ushort tmp_1000_639C = CX;
    CX = BX;
    BX = tmp_1000_639C;
    // CALL 0x1000:b58b (1000_639E / 0x1639E)
    NearCall(cs1, 0x63A1, map_func_ida_1000_B58B_1B58B);
    // XCHG SI,DX (1000_63A1 / 0x163A1)
    ushort tmp_1000_63A1 = SI;
    SI = DX;
    DX = tmp_1000_63A1;
    // MOV BX,CX (1000_63A3 / 0x163A3)
    BX = CX;
    label_1000_63A5_163A5:
    // MOV AX,word ptr ES:[DI] (1000_63A5 / 0x163A5)
    AX = UInt16[ES, DI];
    // AND AX,0x3030 (1000_63A8 / 0x163A8)
    // AX &= 0x3030;
    AX = Alu.And16(AX, 0x3030);
    // CMP AL,0x10 (1000_63AB / 0x163AB)
    Alu.Sub8(AL, 0x10);
    // JZ 0x1000:63c2 (1000_63AD / 0x163AD)
    if(ZeroFlag) {
      goto label_1000_63C2_163C2;
    }
    label_1000_63AF_163AF:
    // SUB DX,0x4 (1000_63AF / 0x163AF)
    // DX -= 0x4;
    DX = Alu.Sub16(DX, 0x4);
    // CMP DX,word ptr [0x46e3] (1000_63B2 / 0x163B2)
    Alu.Sub16(DX, UInt16[DS, 0x46E3]);
    // JC 0x1000:6394 (1000_63B6 / 0x163B6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_6394 / 0x16394)
      return NearRet();
    }
    // DEC DI (1000_63B8 / 0x163B8)
    DI = Alu.Dec16(DI);
    // DEC SI (1000_63B9 / 0x163B9)
    SI = Alu.Dec16(SI);
    // JNS 0x1000:63a5 (1000_63BA / 0x163BA)
    if(!SignFlag) {
      goto label_1000_63A5_163A5;
    }
    // ADD SI,BP (1000_63BC / 0x163BC)
    // SI += BP;
    SI = Alu.Add16(SI, BP);
    // ADD DI,BP (1000_63BE / 0x163BE)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // JMP 0x1000:63a5 (1000_63C0 / 0x163C0)
    goto label_1000_63A5_163A5;
    label_1000_63C2_163C2:
    // CALL 0x1000:63c7 (1000_63C2 / 0x163C2)
    throw FailAsUntested("Could not find a valid function at address 1000_63C7 / 0x163C7");
    // JMP 0x1000:63af (1000_63C5 / 0x163C5)
    goto label_1000_63AF_163AF;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x163C7");
  }
  
  public Action map_func_qq_ida_1000_63F0_163F0(int gotoTarget) {
    label_1000_63F0_163F0:
    // CMP byte ptr [0x46de],0x0 (1000_63F0 / 0x163F0)
    Alu.Sub8(UInt8[DS, 0x46DE], 0x0);
    // JZ 0x1000:642d (1000_63F5 / 0x163F5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_642D / 0x1642D)
      return NearRet();
    }
    // MOV ES,word ptr [0xdd00] (1000_63F7 / 0x163F7)
    ES = UInt16[DS, 0xDD00];
    // MOV DI,0x100 (1000_63FB / 0x163FB)
    DI = 0x100;
    label_1000_63FE_163FE:
    // MOV AL,byte ptr [DI + 0xa] (1000_63FE / 0x163FE)
    AL = UInt8[DS, (ushort)(DI + 0xA)];
    // TEST AL,0x20 (1000_6401 / 0x16401)
    Alu.And8(AL, 0x20);
    // JZ 0x1000:6422 (1000_6403 / 0x16403)
    if(ZeroFlag) {
      goto label_1000_6422_16422;
    }
    // MOV BL,byte ptr [DI + 0x1b] (1000_6405 / 0x16405)
    BL = UInt8[DS, (ushort)(DI + 0x1B)];
    // MOV BH,0xfa (1000_6408 / 0x16408)
    BH = 0xFA;
    // CMP BL,BH (1000_640A / 0x1640A)
    Alu.Sub8(BL, BH);
    // JNC 0x1000:6422 (1000_640C / 0x1640C)
    if(!CarryFlag) {
      goto label_1000_6422_16422;
    }
    // MOV SI,word ptr [DI + 0x6] (1000_640E / 0x1640E)
    SI = UInt16[DS, (ushort)(DI + 0x6)];
    // CALL 0x1000:642e (1000_6411 / 0x16411)
    NearCall(cs1, 0x6414, unknown_1000_642E_1642E);
    // SHR DX,1 (1000_6414 / 0x16414)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // INC DX (1000_6416 / 0x16416)
    DX = Alu.Inc16(DX);
    // ADD BL,DL (1000_6417 / 0x16417)
    // BL += DL;
    BL = Alu.Add8(BL, DL);
    // CMP BL,BH (1000_6419 / 0x16419)
    Alu.Sub8(BL, BH);
    // JC 0x1000:641f (1000_641B / 0x1641B)
    if(CarryFlag) {
      goto label_1000_641F_1641F;
    }
    // MOV BL,BH (1000_641D / 0x1641D)
    BL = BH;
    label_1000_641F_1641F:
    // MOV byte ptr [DI + 0x1b],BL (1000_641F / 0x1641F)
    UInt8[DS, (ushort)(DI + 0x1B)] = BL;
    label_1000_6422_16422:
    // ADD DI,0x1c (1000_6422 / 0x16422)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // CMP word ptr [DI],-0x1 (1000_6425 / 0x16425)
    Alu.Sub16(UInt16[DS, DI], 0xFFFF);
    // JNZ 0x1000:63fe (1000_6428 / 0x16428)
    if(!ZeroFlag) {
      goto label_1000_63FE_163FE;
    }
    // JMP 0x1000:65b6 (1000_642A / 0x1642A)
    goto label_1000_65B6_165B6;
    label_1000_642D_1642D:
    // RET  (1000_642D / 0x1642D)
    return NearRet();
    label_1000_65B6_165B6:
    // MOV ES,word ptr [0xdd00] (1000_65B6 / 0x165B6)
    ES = UInt16[DS, 0xDD00];
    // MOV SI,word ptr CS:[0x65b4] (1000_65BA / 0x165BA)
    SI = UInt16[cs1, 0x65B4];
    // XOR BP,BP (1000_65BF / 0x165BF)
    BP = 0;
    // MOV CX,0x46 (1000_65C1 / 0x165C1)
    CX = 0x46;
    label_1000_65C4_165C4:
    // SHR SI,1 (1000_65C4 / 0x165C4)
    // SI >>= 1;
    SI = Alu.Shr16(SI, 1);
    // JNC 0x1000:65cc (1000_65C6 / 0x165C6)
    if(!CarryFlag) {
      goto label_1000_65CC_165CC;
    }
    // XOR SI,0x402 (1000_65C8 / 0x165C8)
    // SI ^= 0x402;
    SI = Alu.Xor16(SI, 0x402);
    label_1000_65CC_165CC:
    // MOV DI,SI (1000_65CC / 0x165CC)
    DI = SI;
    label_1000_65CE_165CE:
    // MOV AL,byte ptr ES:[DI] (1000_65CE / 0x165CE)
    AL = UInt8[ES, DI];
    // MOV AH,AL (1000_65D1 / 0x165D1)
    AH = AL;
    // AND AH,0x30 (1000_65D3 / 0x165D3)
    // AH &= 0x30;
    AH = Alu.And8(AH, 0x30);
    // CMP AH,0x10 (1000_65D6 / 0x165D6)
    Alu.Sub8(AH, 0x10);
    // JNZ 0x1000:65e2 (1000_65D9 / 0x165D9)
    if(!ZeroFlag) {
      goto label_1000_65E2_165E2;
    }
    // AND AL,0xcf (1000_65DB / 0x165DB)
    // AL &= 0xCF;
    AL = Alu.And8(AL, 0xCF);
    // OR AL,0x20 (1000_65DD / 0x165DD)
    // AL |= 0x20;
    AL = Alu.Or8(AL, 0x20);
    // STOSB ES:DI (1000_65DF / 0x165DF)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // DEC DI (1000_65E0 / 0x165E0)
    DI = Alu.Dec16(DI);
    // INC BP (1000_65E1 / 0x165E1)
    BP = Alu.Inc16(BP);
    label_1000_65E2_165E2:
    // ADD DI,0x7ff (1000_65E2 / 0x165E2)
    // DI += 0x7FF;
    DI = Alu.Add16(DI, 0x7FF);
    // CMP DI,0xc5f9 (1000_65E6 / 0x165E6)
    Alu.Sub16(DI, 0xC5F9);
    // JC 0x1000:65ce (1000_65EA / 0x165EA)
    if(CarryFlag) {
      goto label_1000_65CE_165CE;
    }
    // LOOP 0x1000:65c4 (1000_65EC / 0x165EC)
    if(--CX != 0) {
      goto label_1000_65C4_165C4;
    }
    // MOV word ptr CS:[0x65b4],SI (1000_65EE / 0x165EE)
    UInt16[cs1, 0x65B4] = SI;
    // OR BP,BP (1000_65F3 / 0x165F3)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JZ 0x1000:6602 (1000_65F5 / 0x165F5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6602 / 0x16602)
      return NearRet();
    }
    // CMP byte ptr [0x46eb],0x0 (1000_65F7 / 0x165F7)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNS 0x1000:6602 (1000_65FC / 0x165FC)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_6602 / 0x16602)
      return NearRet();
    }
    // INC byte ptr [0x46ec] (1000_65FE / 0x165FE)
    UInt8[DS, 0x46EC] = Alu.Inc8(UInt8[DS, 0x46EC]);
    label_1000_6602_16602:
    // RET  (1000_6602 / 0x16602)
    return NearRet();
  }
  
  public Action unknown_1000_642E_1642E(int gotoTarget) {
    label_1000_642E_1642E:
    // MOV CX,0x3 (1000_642E / 0x1642E)
    CX = 0x3;
    // DEC SI (1000_6431 / 0x16431)
    SI = Alu.Dec16(SI);
    // XOR DX,DX (1000_6432 / 0x16432)
    DX = 0;
    label_1000_6434_16434:
    // LODSW ES:SI (1000_6434 / 0x16434)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AX,0x3030 (1000_6436 / 0x16436)
    // AX &= 0x3030;
    AX = Alu.And16(AX, 0x3030);
    // CMP AH,0x10 (1000_6439 / 0x16439)
    Alu.Sub8(AH, 0x10);
    // JNZ 0x1000:643f (1000_643C / 0x1643C)
    if(!ZeroFlag) {
      goto label_1000_643F_1643F;
    }
    // INC DX (1000_643E / 0x1643E)
    DX = Alu.Inc16(DX);
    label_1000_643F_1643F:
    // CMP AL,0x10 (1000_643F / 0x1643F)
    Alu.Sub8(AL, 0x10);
    // JNZ 0x1000:6444 (1000_6441 / 0x16441)
    if(!ZeroFlag) {
      goto label_1000_6444_16444;
    }
    // INC DX (1000_6443 / 0x16443)
    DX = Alu.Inc16(DX);
    label_1000_6444_16444:
    // LOOP 0x1000:6434 (1000_6444 / 0x16444)
    if(--CX != 0) {
      goto label_1000_6434_16434;
    }
    // RET  (1000_6446 / 0x16446)
    return NearRet();
  }
  
  public Action unknown_1000_644E_1644E(int gotoTarget) {
    label_1000_644E_1644E:
    // MOV byte ptr [0x4739],0x20 (1000_644E / 0x1644E)
    UInt8[DS, 0x4739] = 0x20;
    // XOR CX,CX (1000_6453 / 0x16453)
    CX = 0;
    // MOV CL,byte ptr [DI + 0xb] (1000_6455 / 0x16455)
    CL = UInt8[DS, (ushort)(DI + 0xB)];
    label_1000_6458_16458:
    // MOV word ptr CS:[0x64ed],0x646f (1000_6458 / 0x16458)
    UInt16[cs1, 0x64ED] = 0x646F;
    // MOV DX,word ptr [DI + 0x2] (1000_645F / 0x1645F)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_6462 / 0x16462)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV word ptr [0xd81c],DX (1000_6465 / 0x16465)
    UInt16[DS, 0xD81C] = DX;
    // MOV word ptr [0xd818],BX (1000_6469 / 0x16469)
    UInt16[DS, 0xD818] = BX;
    // JMP 0x1000:64b2 (1000_646D / 0x1646D)
    goto label_1000_64B2_164B2;
    label_1000_64B2_164B2:
    // XOR BX,BX (1000_64B2 / 0x164B2)
    BX = 0;
    // MOV DX,BX (1000_64B4 / 0x164B4)
    DX = BX;
    // MOV DI,DX (1000_64B6 / 0x164B6)
    DI = DX;
    // SUB BX,CX (1000_64B8 / 0x164B8)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // MOV SI,CX (1000_64BA / 0x164BA)
    SI = CX;
    // DEC SI (1000_64BC / 0x164BC)
    SI = Alu.Dec16(SI);
    // MOV AX,CX (1000_64BD / 0x164BD)
    AX = CX;
    // XOR BP,BP (1000_64BF / 0x164BF)
    BP = 0;
    // JMP 0x1000:64c6 (1000_64C1 / 0x164C1)
    goto label_1000_64C6_164C6;
    label_1000_64C3_164C3:
    // INC BP (1000_64C3 / 0x164C3)
    BP = Alu.Inc16(BP);
    // INC DX (1000_64C4 / 0x164C4)
    DX = Alu.Inc16(DX);
    // DEC DI (1000_64C5 / 0x164C5)
    DI = Alu.Dec16(DI);
    label_1000_64C6_164C6:
    // SUB AX,BP (1000_64C6 / 0x164C6)
    // AX -= BP;
    AX = Alu.Sub16(AX, BP);
    // JNS 0x1000:64c3 (1000_64C8 / 0x164C8)
    if(!SignFlag) {
      goto label_1000_64C3_164C3;
    }
    // CALL 0x1000:64ef (1000_64CA / 0x164CA)
    NearCall(cs1, 0x64CD, unknown_1000_64EF_164EF);
    // INC BX (1000_64CD / 0x164CD)
    BX = Alu.Inc16(BX);
    // DEC SI (1000_64CE / 0x164CE)
    SI = Alu.Dec16(SI);
    // ADD AX,CX (1000_64CF / 0x164CF)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // JS 0x1000:64d5 (1000_64D1 / 0x164D1)
    if(SignFlag) {
      goto label_1000_64D5_164D5;
    }
    // LOOP 0x1000:64c3 (1000_64D3 / 0x164D3)
    if(--CX != 0) {
      goto label_1000_64C3_164C3;
    }
    label_1000_64D5_164D5:
    // INC BP (1000_64D5 / 0x164D5)
    BP = Alu.Inc16(BP);
    // DEC CX (1000_64D6 / 0x164D6)
    CX = Alu.Dec16(CX);
    // JMP 0x1000:64de (1000_64D7 / 0x164D7)
    goto label_1000_64DE_164DE;
    label_1000_64D9_164D9:
    // INC DX (1000_64D9 / 0x164D9)
    DX = Alu.Inc16(DX);
    // DEC DI (1000_64DA / 0x164DA)
    DI = Alu.Dec16(DI);
    // SUB AX,BP (1000_64DB / 0x164DB)
    // AX -= BP;
    AX = Alu.Sub16(AX, BP);
    // INC BP (1000_64DD / 0x164DD)
    BP = Alu.Inc16(BP);
    label_1000_64DE_164DE:
    // CALL 0x1000:64ef (1000_64DE / 0x164DE)
    NearCall(cs1, 0x64E1, unknown_1000_64EF_164EF);
    // INC BX (1000_64E1 / 0x164E1)
    BX = Alu.Inc16(BX);
    // DEC SI (1000_64E2 / 0x164E2)
    SI = Alu.Dec16(SI);
    // ADD AX,CX (1000_64E3 / 0x164E3)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // JC 0x1000:64e9 (1000_64E5 / 0x164E5)
    if(CarryFlag) {
      goto label_1000_64E9_164E9;
    }
    // LOOP 0x1000:64de (1000_64E7 / 0x164E7)
    if(--CX != 0) {
      goto label_1000_64DE_164DE;
    }
    label_1000_64E9_164E9:
    // DEC CX (1000_64E9 / 0x164E9)
    CX = Alu.Dec16(CX);
    // JNS 0x1000:64d9 (1000_64EA / 0x164EA)
    if(!SignFlag) {
      goto label_1000_64D9_164D9;
    }
    // RET  (1000_64EC / 0x164EC)
    return NearRet();
  }
  
  public Action unknown_1000_646F_1646F(int gotoTarget) {
    label_1000_646F_1646F:
    // ADD BX,word ptr [0xd818] (1000_646F / 0x1646F)
    // BX += UInt16[DS, 0xD818];
    BX = Alu.Add16(BX, UInt16[DS, 0xD818]);
    // CMP BX,0x5d (1000_6473 / 0x16473)
    Alu.Sub16(BX, 0x5D);
    // JG 0x1000:64b1 (1000_6476 / 0x16476)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (1000_64B1 / 0x164B1)
      return NearRet();
    }
    // CMP BX,-0x5d (1000_6478 / 0x16478)
    Alu.Sub16(BX, 0xFFA3);
    // JL 0x1000:64b1 (1000_647B / 0x1647B)
    if(SignFlag != OverflowFlag) {
      // JL target is RET, inlining.
      // RET  (1000_64B1 / 0x164B1)
      return NearRet();
    }
    // PUSH DX (1000_647D / 0x1647D)
    Stack.Push(DX);
    // MOV DX,word ptr [0xd81c] (1000_647E / 0x1647E)
    DX = UInt16[DS, 0xD81C];
    // CALL 0x1000:b58b (1000_6482 / 0x16482)
    NearCall(cs1, 0x6485, map_func_ida_1000_B58B_1B58B);
    // POP AX (1000_6485 / 0x16485)
    AX = Stack.Pop();
    // ADD DI,AX (1000_6486 / 0x16486)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // ADD DX,AX (1000_6488 / 0x16488)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // JNS 0x1000:6492 (1000_648A / 0x1648A)
    if(!SignFlag) {
      goto label_1000_6492_16492;
    }
    label_1000_648C_1648C:
    // ADD DI,BP (1000_648C / 0x1648C)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // ADD DX,BP (1000_648E / 0x1648E)
    // DX += BP;
    DX = Alu.Add16(DX, BP);
    // JS 0x1000:648c (1000_6490 / 0x16490)
    if(SignFlag) {
      goto label_1000_648C_1648C;
    }
    label_1000_6492_16492:
    // MOV AL,byte ptr ES:[DI] (1000_6492 / 0x16492)
    AL = UInt8[ES, DI];
    // MOV AH,AL (1000_6495 / 0x16495)
    AH = AL;
    // AND AH,0x30 (1000_6497 / 0x16497)
    // AH &= 0x30;
    AH = Alu.And8(AH, 0x30);
    // CMP AH,0x10 (1000_649A / 0x1649A)
    Alu.Sub8(AH, 0x10);
    // JZ 0x1000:64a5 (1000_649D / 0x1649D)
    if(ZeroFlag) {
      goto label_1000_64A5_164A5;
    }
    // XOR AL,AH (1000_649F / 0x1649F)
    // AL ^= AH;
    AL = Alu.Xor8(AL, AH);
    // OR AL,byte ptr [0x4739] (1000_64A1 / 0x164A1)
    // AL |= UInt8[DS, 0x4739];
    AL = Alu.Or8(AL, UInt8[DS, 0x4739]);
    label_1000_64A5_164A5:
    // STOSB ES:DI (1000_64A5 / 0x164A5)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DX (1000_64A6 / 0x164A6)
    DX = Alu.Inc16(DX);
    // CMP DX,BP (1000_64A7 / 0x164A7)
    Alu.Sub16(DX, BP);
    // JC 0x1000:64af (1000_64A9 / 0x164A9)
    if(CarryFlag) {
      goto label_1000_64AF_164AF;
    }
    // SUB DX,BP (1000_64AB / 0x164AB)
    // DX -= BP;
    DX = Alu.Sub16(DX, BP);
    // SUB DI,BP (1000_64AD / 0x164AD)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    label_1000_64AF_164AF:
    // LOOP 0x1000:6492 (1000_64AF / 0x164AF)
    if(--CX != 0) {
      goto label_1000_6492_16492;
    }
    label_1000_64B1_164B1:
    // RET  (1000_64B1 / 0x164B1)
    return NearRet();
  }
  
  public Action unknown_1000_64EF_164EF(int gotoTarget) {
    label_1000_64EF_164EF:
    // PUSH AX (1000_64EF / 0x164EF)
    Stack.Push(AX);
    // PUSH BX (1000_64F0 / 0x164F0)
    Stack.Push(BX);
    // PUSH CX (1000_64F1 / 0x164F1)
    Stack.Push(CX);
    // PUSH DX (1000_64F2 / 0x164F2)
    Stack.Push(DX);
    // PUSH SI (1000_64F3 / 0x164F3)
    Stack.Push(SI);
    // PUSH DI (1000_64F4 / 0x164F4)
    Stack.Push(DI);
    // PUSH BP (1000_64F5 / 0x164F5)
    Stack.Push(BP);
    // MOV CX,DX (1000_64F6 / 0x164F6)
    CX = DX;
    // SUB CX,DI (1000_64F8 / 0x164F8)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // INC CX (1000_64FA / 0x164FA)
    CX = Alu.Inc16(CX);
    // MOV DX,DI (1000_64FB / 0x164FB)
    DX = DI;
    // PUSH SI (1000_64FD / 0x164FD)
    Stack.Push(SI);
    // PUSH CX (1000_64FE / 0x164FE)
    Stack.Push(CX);
    // PUSH DX (1000_64FF / 0x164FF)
    Stack.Push(DX);
    // CALL word ptr CS:[0x64ed] (1000_6500 / 0x16500)
    // Indirect call to word ptr CS:[0x64ed], generating possible targets from emulator records
    uint targetAddress_1000_6500 = (uint)(UInt16[cs1, 0x64ED]);
    switch(targetAddress_1000_6500) {
      case 0x646F : NearCall(cs1, 0x6505, unknown_1000_646F_1646F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_6500);
        break;
    }
    // POP DX (1000_6505 / 0x16505)
    DX = Stack.Pop();
    // POP CX (1000_6506 / 0x16506)
    CX = Stack.Pop();
    // POP BX (1000_6507 / 0x16507)
    BX = Stack.Pop();
    // CALL word ptr CS:[0x64ed] (1000_6508 / 0x16508)
    // Indirect call to word ptr CS:[0x64ed], generating possible targets from emulator records
    uint targetAddress_1000_6508 = (uint)(UInt16[cs1, 0x64ED]);
    switch(targetAddress_1000_6508) {
      case 0x646F : NearCall(cs1, 0x650D, unknown_1000_646F_1646F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_6508);
        break;
    }
    // POP BP (1000_650D / 0x1650D)
    BP = Stack.Pop();
    // POP DI (1000_650E / 0x1650E)
    DI = Stack.Pop();
    // POP SI (1000_650F / 0x1650F)
    SI = Stack.Pop();
    // POP DX (1000_6510 / 0x16510)
    DX = Stack.Pop();
    // POP CX (1000_6511 / 0x16511)
    CX = Stack.Pop();
    // POP BX (1000_6512 / 0x16512)
    BX = Stack.Pop();
    // POP AX (1000_6513 / 0x16513)
    AX = Stack.Pop();
    // RET  (1000_6514 / 0x16514)
    return NearRet();
  }
  
  public Action unknown_1000_6603_16603(int gotoTarget) {
    label_1000_6603_16603:
    // PUSH SI (1000_6603 / 0x16603)
    Stack.Push(SI);
    // MOV AL,byte ptr [DI + 0x9] (1000_6604 / 0x16604)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    label_1000_6607_16607:
    // OR AL,AL (1000_6607 / 0x16607)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:661b (1000_6609 / 0x16609)
    if(ZeroFlag) {
      goto label_1000_661B_1661B;
    }
    // CALL 0x1000:6906 (1000_660B / 0x1660B)
    NearCall(cs1, 0x660E, unknown_1000_6906_16906);
    // PUSH SI (1000_660E / 0x1660E)
    Stack.Push(SI);
    // PUSH DI (1000_660F / 0x1660F)
    Stack.Push(DI);
    // PUSH BP (1000_6610 / 0x16610)
    Stack.Push(BP);
    // CALL BP (1000_6611 / 0x16611)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_6611 = (uint)(BP);
    switch(targetAddress_1000_6611) {
      case 0x1E0 : NearCall(cs1, 0x6613, unknown_1000_01E0_101E0);
        break;
      case 0x3406 : NearCall(cs1, 0x6613, unknown_1000_3406_13406);
        break;
      case 0x34D0 : NearCall(cs1, 0x6613, unknown_1000_34D0_134D0);
        break;
      case 0x316E : NearCall(cs1, 0x6613, unknown_1000_316E_1316E);
        break;
      case 0x5728 : NearCall(cs1, 0x6613, unknown_1000_5728_15728);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_6611);
        break;
    }
    // POP BP (1000_6613 / 0x16613)
    BP = Stack.Pop();
    // POP DI (1000_6614 / 0x16614)
    DI = Stack.Pop();
    // POP SI (1000_6615 / 0x16615)
    SI = Stack.Pop();
    // MOV AL,byte ptr [SI + 0x1] (1000_6616 / 0x16616)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // JMP 0x1000:6607 (1000_6619 / 0x16619)
    goto label_1000_6607_16607;
    label_1000_661B_1661B:
    // POP SI (1000_661B / 0x1661B)
    SI = Stack.Pop();
    // RET  (1000_661C / 0x1661C)
    return NearRet();
  }
  
  public Action unknown_1000_661D_1661D(int gotoTarget) {
    label_1000_661D_1661D:
    // PUSH SI (1000_661D / 0x1661D)
    Stack.Push(SI);
    // MOV AL,byte ptr [DI + 0x9] (1000_661E / 0x1661E)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    label_1000_6621_16621:
    // OR AL,AL (1000_6621 / 0x16621)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:6637 (1000_6623 / 0x16623)
    if(ZeroFlag) {
      goto label_1000_6637_16637;
    }
    // CALL 0x1000:6906 (1000_6625 / 0x16625)
    NearCall(cs1, 0x6628, unknown_1000_6906_16906);
    // JNC 0x1000:6632 (1000_6628 / 0x16628)
    if(!CarryFlag) {
      goto label_1000_6632_16632;
    }
    // PUSH SI (1000_662A / 0x1662A)
    Stack.Push(SI);
    // PUSH DI (1000_662B / 0x1662B)
    Stack.Push(DI);
    // PUSH BP (1000_662C / 0x1662C)
    Stack.Push(BP);
    // CALL BP (1000_662D / 0x1662D)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_662D = (uint)(BP);
    switch(targetAddress_1000_662D) {
      case 0x6E82 : NearCall(cs1, 0x662F, unknown_1000_6E82_16E82);
        break;
      case 0x6ECB : NearCall(cs1, 0x662F, unknown_1000_6ECB_16ECB);
        break;
      case 0x6EA8 : NearCall(cs1, 0x662F, unknown_1000_6EA8_16EA8);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_662D);
        break;
    }
    // POP BP (1000_662F / 0x1662F)
    BP = Stack.Pop();
    // POP DI (1000_6630 / 0x16630)
    DI = Stack.Pop();
    // POP SI (1000_6631 / 0x16631)
    SI = Stack.Pop();
    label_1000_6632_16632:
    // MOV AL,byte ptr [SI + 0x1] (1000_6632 / 0x16632)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // JMP 0x1000:6621 (1000_6635 / 0x16635)
    goto label_1000_6621_16621;
    label_1000_6637_16637:
    // POP SI (1000_6637 / 0x16637)
    SI = Stack.Pop();
    // RET  (1000_6638 / 0x16638)
    return NearRet();
  }
  
  public Action unknown_1000_6639_16639(int gotoTarget) {
    label_1000_6639_16639:
    // CALL 0x1000:6603 (1000_6639 / 0x16639)
    NearCall(cs1, 0x663C, unknown_1000_6603_16603);
    // PUSH SI (1000_663C / 0x1663C)
    Stack.Push(SI);
    // MOV SI,0x8aa (1000_663D / 0x1663D)
    SI = 0x8AA;
    label_1000_6640_16640:
    // MOV AL,byte ptr [SI + 0x3] (1000_6640 / 0x16640)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // TEST AL,0x40 (1000_6643 / 0x16643)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:6665 (1000_6645 / 0x16645)
    if(ZeroFlag) {
      goto label_1000_6665_16665;
    }
    // PUSH BX (1000_6647 / 0x16647)
    Stack.Push(BX);
    // MOV BX,word ptr [SI + 0x4] (1000_6648 / 0x16648)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // AND AL,0x3 (1000_664B / 0x1664B)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // CMP AL,0x3 (1000_664D / 0x1664D)
    Alu.Sub8(AL, 0x3);
    // JNZ 0x1000:6654 (1000_664F / 0x1664F)
    if(!ZeroFlag) {
      goto label_1000_6654_16654;
    }
    // MOV BX,word ptr [SI + 0xc] (1000_6651 / 0x16651)
    BX = UInt16[DS, (ushort)(SI + 0xC)];
    label_1000_6654_16654:
    // CMP BX,DI (1000_6654 / 0x16654)
    Alu.Sub16(BX, DI);
    // POP BX (1000_6656 / 0x16656)
    BX = Stack.Pop();
    // JNZ 0x1000:6665 (1000_6657 / 0x16657)
    if(!ZeroFlag) {
      goto label_1000_6665_16665;
    }
    // PUSH SI (1000_6659 / 0x16659)
    Stack.Push(SI);
    // PUSH DI (1000_665A / 0x1665A)
    Stack.Push(DI);
    // PUSH BP (1000_665B / 0x1665B)
    Stack.Push(BP);
    // CMP byte ptr [SI + 0x3],0x80 (1000_665C / 0x1665C)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x3)], 0x80);
    // CALL BP (1000_6660 / 0x16660)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_6660 = (uint)(BP);
    switch(targetAddress_1000_6660) {
      case 0x34D0 : NearCall(cs1, 0x6662, unknown_1000_34D0_134D0);
        break;
      case 0x5728 : NearCall(cs1, 0x6662, unknown_1000_5728_15728);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_6660);
        break;
    }
    // POP BP (1000_6662 / 0x16662)
    BP = Stack.Pop();
    // POP DI (1000_6663 / 0x16663)
    DI = Stack.Pop();
    // POP SI (1000_6664 / 0x16664)
    SI = Stack.Pop();
    label_1000_6665_16665:
    // ADD SI,0x1b (1000_6665 / 0x16665)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfbb (1000_6668 / 0x16668)
    Alu.Sub16(SI, 0xFBB);
    // JC 0x1000:6640 (1000_666C / 0x1666C)
    if(CarryFlag) {
      goto label_1000_6640_16640;
    }
    // POP SI (1000_666E / 0x1666E)
    SI = Stack.Pop();
    // RET  (1000_666F / 0x1666F)
    return NearRet();
  }
  
  public Action unknown_1000_66CE_166CE(int gotoTarget) {
    label_1000_66CE_166CE:
    // TEST byte ptr [SI + 0x3],0x80 (1000_66CE / 0x166CE)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x80);
    // JZ 0x1000:6714 (1000_66D2 / 0x166D2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6714 / 0x16714)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x10],0x80 (1000_66D4 / 0x166D4)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:6714 (1000_66D8 / 0x166D8)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6714 / 0x16714)
      return NearRet();
    }
    // INC byte ptr [0x28] (1000_66DA / 0x166DA)
    UInt8[DS, 0x28] = Alu.Inc8(UInt8[DS, 0x28]);
    // MOV AL,[0x28] (1000_66DE / 0x166DE)
    AL = UInt8[DS, 0x28];
    // CMP AL,byte ptr [0x1178] (1000_66E1 / 0x166E1)
    Alu.Sub8(AL, UInt8[DS, 0x1178]);
    // JC 0x1000:66ee (1000_66E5 / 0x166E5)
    if(CarryFlag) {
      goto label_1000_66EE_166EE;
    }
    // PUSH SI (1000_66E7 / 0x166E7)
    Stack.Push(SI);
    // MOV AL,0x4c (1000_66E8 / 0x166E8)
    AL = 0x4C;
    // CALL 0x1000:121f (1000_66EA / 0x166EA)
    NearCall(cs1, 0x66ED, unknown_1000_121F_1121F);
    // POP SI (1000_66ED / 0x166ED)
    SI = Stack.Pop();
    label_1000_66EE_166EE:
    // MOV AL,0x1 (1000_66EE / 0x166EE)
    AL = 0x1;
    // CALL 0x1000:6f78 (1000_66F0 / 0x166F0)
    NearCall(cs1, 0x66F3, unknown_1000_6F78_16F78);
    // AND byte ptr [SI + 0x3],0x20 (1000_66F3 / 0x166F3)
    // UInt8[DS, (ushort)(SI + 0x3)] &= 0x20;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // OR byte ptr [SI + 0x3],0x2 (1000_66F7 / 0x166F7)
    // UInt8[DS, (ushort)(SI + 0x3)] |= 0x2;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x3)], 0x2);
    // CALL 0x1000:6b25 (1000_66FB / 0x166FB)
    NearCall(cs1, 0x66FE, unknown_1000_6B25_16B25);
    // CALL 0x1000:1ac5 (1000_66FE / 0x166FE)
    NearCall(cs1, 0x6701, unknown_1000_1AC5_11AC5);
    // MOV byte ptr [SI + 0x14],AL (1000_6701 / 0x16701)
    UInt8[DS, (ushort)(SI + 0x14)] = AL;
    // MOV DI,word ptr [SI + 0x4] (1000_6704 / 0x16704)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP byte ptr [DI + 0xb],0x0 (1000_6707 / 0x16707)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0xB)], 0x0);
    // JNZ 0x1000:6714 (1000_670B / 0x1670B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6714 / 0x16714)
      return NearRet();
    }
    // MOV byte ptr [DI + 0xb],0x2 (1000_670D / 0x1670D)
    UInt8[DS, (ushort)(DI + 0xB)] = 0x2;
    // CALL 0x1000:644e (1000_6711 / 0x16711)
    NearCall(cs1, 0x6714, unknown_1000_644E_1644E);
    label_1000_6714_16714:
    // RET  (1000_6714 / 0x16714)
    return NearRet();
  }
  
  public Action unknown_1000_6715_16715(int gotoTarget) {
    label_1000_6715_16715:
    // MOV BP,0xa5c0 (1000_6715 / 0x16715)
    BP = 0xA5C0;
    label_1000_6718_16718:
    // MOV DI,word ptr [BP + 0x0] (1000_6718 / 0x16718)
    DI = UInt16[SS, BP];
    // OR DI,DI (1000_671B / 0x1671B)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:6737 (1000_671D / 0x1671D)
    if(ZeroFlag) {
      goto label_1000_6737_16737;
    }
    // MOV AL,byte ptr [DI + 0x9] (1000_671F / 0x1671F)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // OR AL,AL (1000_6722 / 0x16722)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:6732 (1000_6724 / 0x16724)
    if(ZeroFlag) {
      goto label_1000_6732_16732;
    }
    label_1000_6726_16726:
    // PUSH BP (1000_6726 / 0x16726)
    Stack.Push(BP);
    // CALL 0x1000:6757 (1000_6727 / 0x16727)
    NearCall(cs1, 0x672A, unknown_1000_6757_16757);
    // POP BP (1000_672A / 0x1672A)
    BP = Stack.Pop();
    // MOV AL,byte ptr [SI + 0x1] (1000_672B / 0x1672B)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // OR AL,AL (1000_672E / 0x1672E)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:6726 (1000_6730 / 0x16730)
    if(!ZeroFlag) {
      goto label_1000_6726_16726;
    }
    label_1000_6732_16732:
    // ADD BP,0x6 (1000_6732 / 0x16732)
    // BP += 0x6;
    BP = Alu.Add16(BP, 0x6);
    // JMP 0x1000:6718 (1000_6735 / 0x16735)
    goto label_1000_6718_16718;
    label_1000_6737_16737:
    // MOV SI,0x88f (1000_6737 / 0x16737)
    SI = 0x88F;
    label_1000_673A_1673A:
    // ADD SI,0x1b (1000_673A / 0x1673A)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfbb (1000_673D / 0x1673D)
    Alu.Sub16(SI, 0xFBB);
    // JNC 0x1000:6756 (1000_6741 / 0x16741)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6756 / 0x16756)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x10],0x10 (1000_6743 / 0x16743)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x10);
    // JNZ 0x1000:673a (1000_6747 / 0x16747)
    if(!ZeroFlag) {
      goto label_1000_673A_1673A;
    }
    // TEST byte ptr [SI + 0x3],0x40 (1000_6749 / 0x16749)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JZ 0x1000:673a (1000_674D / 0x1674D)
    if(ZeroFlag) {
      goto label_1000_673A_1673A;
    }
    // MOV AL,byte ptr [SI] (1000_674F / 0x1674F)
    AL = UInt8[DS, SI];
    // CALL 0x1000:6757 (1000_6751 / 0x16751)
    NearCall(cs1, 0x6754, unknown_1000_6757_16757);
    // JMP 0x1000:673a (1000_6754 / 0x16754)
    goto label_1000_673A_1673A;
    label_1000_6756_16756:
    // RET  (1000_6756 / 0x16756)
    return NearRet();
  }
  
  public Action unknown_1000_6757_16757(int gotoTarget) {
    label_1000_6757_16757:
    // CALL 0x1000:6906 (1000_6757 / 0x16757)
    NearCall(cs1, 0x675A, unknown_1000_6906_16906);
    // CALL 0x1000:686e (1000_675A / 0x1675A)
    NearCall(cs1, 0x675D, unknown_1000_686E_1686E);
    // JC 0x1000:676d (1000_675D / 0x1675D)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_676D / 0x1676D)
      return NearRet();
    }
    // CALL 0x1000:6770 (1000_675F / 0x1675F)
    NearCall(cs1, 0x6762, unknown_1000_6770_16770);
    // CMP BP,0x1 (1000_6762 / 0x16762)
    Alu.Sub16(BP, 0x1);
    // JC 0x1000:676d (1000_6765 / 0x16765)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_676D / 0x1676D)
      return NearRet();
    }
    // PUSH SI (1000_6767 / 0x16767)
    Stack.Push(SI);
    // CALL 0x1000:c5cf (1000_6768 / 0x16768)
    NearCall(cs1, 0x676B, unknown_1000_C5CF_1C5CF);
    // POP SI (1000_676B / 0x1676B)
    SI = Stack.Pop();
    // CLC  (1000_676C / 0x1676C)
    CarryFlag = false;
    label_1000_676D_1676D:
    // RET  (1000_676D / 0x1676D)
    return NearRet();
  }
  
  public Action unknown_1000_6770_16770(int gotoTarget) {
    label_1000_6770_16770:
    // TEST byte ptr [SI + 0x10],0x10 (1000_6770 / 0x16770)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x10);
    // JNZ 0x1000:678f (1000_6774 / 0x16774)
    if(!ZeroFlag) {
      goto label_1000_678F_1678F;
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_6776 / 0x16776)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // TEST byte ptr [SI + 0x10],0x80 (1000_6779 / 0x16779)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:6792 (1000_677D / 0x1677D)
    if(!ZeroFlag) {
      goto label_1000_6792_16792;
    }
    // OR AL,AL (1000_677F / 0x1677F)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:6792 (1000_6781 / 0x16781)
    if(!SignFlag) {
      goto label_1000_6792_16792;
    }
    // MOV BP,word ptr [SI + 0x4] (1000_6783 / 0x16783)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [BP + 0xa],0x10 (1000_6786 / 0x16786)
    Alu.And8(UInt8[SS, (ushort)(BP + 0xA)], 0x10);
    // MOV BP,0x181f (1000_678A / 0x1678A)
    BP = 0x181F;
    // JNZ 0x1000:6791 (1000_678D / 0x1678D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6791 / 0x16791)
      return NearRet();
    }
    label_1000_678F_1678F:
    // XOR BP,BP (1000_678F / 0x1678F)
    BP = 0;
    label_1000_6791_16791:
    // RET  (1000_6791 / 0x16791)
    return NearRet();
    label_1000_6792_16792:
    // TEST AL,0x40 (1000_6792 / 0x16792)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:6799 (1000_6794 / 0x16794)
    if(ZeroFlag) {
      goto label_1000_6799_16799;
    }
    // JMP 0x1000:6827 (1000_6796 / 0x16796)
    goto label_1000_6827_16827;
    label_1000_6799_16799:
    // TEST AL,0x30 (1000_6799 / 0x16799)
    Alu.And8(AL, 0x30);
    // JZ 0x1000:67c5 (1000_679B / 0x1679B)
    if(ZeroFlag) {
      goto label_1000_67C5_167C5;
    }
    // AND AX,0xf (1000_679D / 0x1679D)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // MOV BP,AX (1000_67A0 / 0x167A0)
    BP = AX;
    // SHL BP,1 (1000_67A2 / 0x167A2)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // MOV BP,word ptr [BP + 0x16b6] (1000_67A4 / 0x167A4)
    BP = UInt16[SS, (ushort)(BP + 0x16B6)];
    // OR AX,AX (1000_67A8 / 0x167A8)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNZ 0x1000:67c4 (1000_67AA / 0x167AA)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_67C4 / 0x167C4)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x19] (1000_67AC / 0x167AC)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // AND AL,0xc0 (1000_67AF / 0x167AF)
    // AL &= 0xC0;
    AL = Alu.And8(AL, 0xC0);
    // JZ 0x1000:67c4 (1000_67B1 / 0x167B1)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_67C4 / 0x167C4)
      return NearRet();
    }
    // MOV BP,0x1813 (1000_67B3 / 0x167B3)
    BP = 0x1813;
    // CMP AL,0x80 (1000_67B6 / 0x167B6)
    Alu.Sub8(AL, 0x80);
    // JZ 0x1000:67c4 (1000_67B8 / 0x167B8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_67C4 / 0x167C4)
      return NearRet();
    }
    // MOV BP,0x1817 (1000_67BA / 0x167BA)
    BP = 0x1817;
    // CMP AL,0x40 (1000_67BD / 0x167BD)
    Alu.Sub8(AL, 0x40);
    // JZ 0x1000:67c4 (1000_67BF / 0x167BF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_67C4 / 0x167C4)
      return NearRet();
    }
    // MOV BP,0x181b (1000_67C1 / 0x167C1)
    BP = 0x181B;
    label_1000_67C4_167C4:
    // RET  (1000_67C4 / 0x167C4)
    return NearRet();
    label_1000_67C5_167C5:
    // AND AX,0xf (1000_67C5 / 0x167C5)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // JZ 0x1000:680a (1000_67C8 / 0x167C8)
    if(ZeroFlag) {
      goto label_1000_680A_1680A;
    }
    label_1000_67CA_167CA:
    // MOV BP,AX (1000_67CA / 0x167CA)
    BP = AX;
    // SHL BP,1 (1000_67CC / 0x167CC)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // MOV BP,word ptr [BP + 0x179c] (1000_67CE / 0x167CE)
    BP = UInt16[SS, (ushort)(BP + 0x179C)];
    // CMP BP,0x1774 (1000_67D2 / 0x167D2)
    Alu.Sub16(BP, 0x1774);
    // JZ 0x1000:67ed (1000_67D6 / 0x167D6)
    if(ZeroFlag) {
      goto label_1000_67ED_167ED;
    }
    // CMP BP,0x1732 (1000_67D8 / 0x167D8)
    Alu.Sub16(BP, 0x1732);
    // JNZ 0x1000:6791 (1000_67DC / 0x167DC)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6791 / 0x16791)
      return NearRet();
    }
    // MOV BP,word ptr [SI + 0x4] (1000_67DE / 0x167DE)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [BP + 0xa],0x2 (1000_67E1 / 0x167E1)
    Alu.And8(UInt8[SS, (ushort)(BP + 0xA)], 0x2);
    // MOV BP,0x16aa (1000_67E5 / 0x167E5)
    BP = 0x16AA;
    // JNZ 0x1000:6791 (1000_67E8 / 0x167E8)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6791 / 0x16791)
      return NearRet();
    }
    // MOV BP,0x1732 (1000_67EA / 0x167EA)
    BP = 0x1732;
    label_1000_67ED_167ED:
    // MOV AL,byte ptr [SI + 0x2] (1000_67ED / 0x167ED)
    AL = UInt8[DS, (ushort)(SI + 0x2)];
    // DEC AL (1000_67F0 / 0x167F0)
    AL = Alu.Dec8(AL);
    // AND AL,0x7 (1000_67F2 / 0x167F2)
    // AL &= 0x7;
    AL = Alu.And8(AL, 0x7);
    // CMP AL,0x3 (1000_67F4 / 0x167F4)
    Alu.Sub8(AL, 0x3);
    // JC 0x1000:6809 (1000_67F6 / 0x167F6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_6809 / 0x16809)
      return NearRet();
    }
    // ADD BP,0xa (1000_67F8 / 0x167F8)
    // BP += 0xA;
    BP = Alu.Add16(BP, 0xA);
    // CMP AL,0x3 (1000_67FB / 0x167FB)
    Alu.Sub8(AL, 0x3);
    // JZ 0x1000:6809 (1000_67FD / 0x167FD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6809 / 0x16809)
      return NearRet();
    }
    // ADD BP,0xa (1000_67FF / 0x167FF)
    // BP += 0xA;
    BP = Alu.Add16(BP, 0xA);
    // CMP AL,0x4 (1000_6802 / 0x16802)
    Alu.Sub8(AL, 0x4);
    // JZ 0x1000:6809 (1000_6804 / 0x16804)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6809 / 0x16809)
      return NearRet();
    }
    // ADD BP,0xa (1000_6806 / 0x16806)
    // BP += 0xA;
    BP = Alu.Add16(BP, 0xA);
    label_1000_6809_16809:
    // RET  (1000_6809 / 0x16809)
    return NearRet();
    label_1000_680A_1680A:
    // TEST byte ptr [SI + 0x19],0xc0 (1000_680A / 0x1680A)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0xC0);
    // JZ 0x1000:67ca (1000_680E / 0x1680E)
    if(ZeroFlag) {
      goto label_1000_67CA_167CA;
    }
    // MOV AL,byte ptr [SI + 0x19] (1000_6810 / 0x16810)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // AND AL,0xc0 (1000_6813 / 0x16813)
    // AL &= 0xC0;
    AL = Alu.And8(AL, 0xC0);
    // MOV BP,0x17bc (1000_6815 / 0x16815)
    BP = 0x17BC;
    // CMP AL,0x80 (1000_6818 / 0x16818)
    Alu.Sub8(AL, 0x80);
    // JZ 0x1000:6826 (1000_681A / 0x1681A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6826 / 0x16826)
      return NearRet();
    }
    // MOV BP,0x17c9 (1000_681C / 0x1681C)
    BP = 0x17C9;
    // CMP AL,0x40 (1000_681F / 0x1681F)
    Alu.Sub8(AL, 0x40);
    // JZ 0x1000:6826 (1000_6821 / 0x16821)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6826 / 0x16826)
      return NearRet();
    }
    // MOV BP,0x1806 (1000_6823 / 0x16823)
    BP = 0x1806;
    label_1000_6826_16826:
    // RET  (1000_6826 / 0x16826)
    return NearRet();
    label_1000_6827_16827:
    // PUSH BX (1000_6827 / 0x16827)
    Stack.Push(BX);
    // PUSH DX (1000_6828 / 0x16828)
    Stack.Push(DX);
    // PUSH DI (1000_6829 / 0x16829)
    Stack.Push(DI);
    // MOV DI,word ptr [SI + 0x4] (1000_682A / 0x1682A)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [DI + 0x2] (1000_682D / 0x1682D)
    AX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_6830 / 0x16830)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // SUB AX,word ptr [SI + 0x6] (1000_6833 / 0x16833)
    // AX -= UInt16[DS, (ushort)(SI + 0x6)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x6)]);
    // MOV AL,AH (1000_6836 / 0x16836)
    AL = AH;
    // CBW  (1000_6838 / 0x16838)
    AX = (ushort)((short)((sbyte)AL));
    // MOV DX,AX (1000_6839 / 0x16839)
    DX = AX;
    // MOV DI,DX (1000_683B / 0x1683B)
    DI = DX;
    // JNS 0x1000:6841 (1000_683D / 0x1683D)
    if(!SignFlag) {
      goto label_1000_6841_16841;
    }
    // NEG DI (1000_683F / 0x1683F)
    DI = Alu.Sub16(0, DI);
    label_1000_6841_16841:
    // SUB BX,word ptr [SI + 0x8] (1000_6841 / 0x16841)
    // BX -= UInt16[DS, (ushort)(SI + 0x8)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x8)]);
    // MOV CX,BX (1000_6844 / 0x16844)
    CX = BX;
    // JNS 0x1000:684a (1000_6846 / 0x16846)
    if(!SignFlag) {
      goto label_1000_684A_1684A;
    }
    // NEG CX (1000_6848 / 0x16848)
    CX = Alu.Sub16(0, CX);
    label_1000_684A_1684A:
    // MOV BP,0x2 (1000_684A / 0x1684A)
    BP = 0x2;
    // CMP DI,CX (1000_684D / 0x1684D)
    Alu.Sub16(DI, CX);
    // JC 0x1000:6854 (1000_684F / 0x1684F)
    if(CarryFlag) {
      goto label_1000_6854_16854;
    }
    // DEC BP (1000_6851 / 0x16851)
    BP = Alu.Dec16(BP);
    // XCHG BX,DX (1000_6852 / 0x16852)
    ushort tmp_1000_6852 = BX;
    BX = DX;
    DX = tmp_1000_6852;
    label_1000_6854_16854:
    // OR BX,BX (1000_6854 / 0x16854)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNS 0x1000:685b (1000_6856 / 0x16856)
    if(!SignFlag) {
      goto label_1000_685B_1685B;
    }
    // XOR BP,0x2 (1000_6858 / 0x16858)
    // BP ^= 0x2;
    BP = Alu.Xor16(BP, 0x2);
    label_1000_685B_1685B:
    // CALL 0x1000:693b (1000_685B / 0x1685B)
    NearCall(cs1, 0x685E, unknown_1000_693B_1693B);
    // SHL AX,1 (1000_685E / 0x1685E)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_6860 / 0x16860)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD BP,AX (1000_6862 / 0x16862)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // SHL BP,1 (1000_6864 / 0x16864)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // MOV BP,word ptr [BP + 0x18bf] (1000_6866 / 0x16866)
    BP = UInt16[SS, (ushort)(BP + 0x18BF)];
    // POP DI (1000_686A / 0x1686A)
    DI = Stack.Pop();
    // POP DX (1000_686B / 0x1686B)
    DX = Stack.Pop();
    // POP BX (1000_686C / 0x1686C)
    BX = Stack.Pop();
    // RET  (1000_686D / 0x1686D)
    return NearRet();
  }
  
  public Action unknown_1000_686E_1686E(int gotoTarget) {
    label_1000_686E_1686E:
    // CMP byte ptr [0x46eb],0x80 (1000_686E / 0x1686E)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x80);
    // JC 0x1000:68ae (1000_6873 / 0x16873)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_68AE / 0x168AE)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x3],0x40 (1000_6875 / 0x16875)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:68af (1000_6879 / 0x16879)
    if(!ZeroFlag) {
      goto label_1000_68AF_168AF;
    }
    // MOV BL,byte ptr [SI + 0x2] (1000_687B / 0x1687B)
    BL = UInt8[DS, (ushort)(SI + 0x2)];
    // DEC BX (1000_687E / 0x1687E)
    BX = Alu.Dec16(BX);
    // PUSH DI (1000_687F / 0x1687F)
    Stack.Push(DI);
    // MOV DI,word ptr [SI + 0x4] (1000_6880 / 0x16880)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [DI + 0xa],0x2 (1000_6883 / 0x16883)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JZ 0x1000:688c (1000_6887 / 0x16887)
    if(ZeroFlag) {
      goto label_1000_688C_1688C;
    }
    // XOR BL,0x8 (1000_6889 / 0x16889)
    // BL ^= 0x8;
    BL = Alu.Xor8(BL, 0x8);
    label_1000_688C_1688C:
    // POP DI (1000_688C / 0x1688C)
    DI = Stack.Pop();
    // AND BX,0xf (1000_688D / 0x1688D)
    // BX &= 0xF;
    BX = Alu.And16(BX, 0xF);
    // ADD BX,BX (1000_6890 / 0x16890)
    // BX += BX;
    BX = Alu.Add16(BX, BX);
    // MOV AL,byte ptr [BX + 0x1672] (1000_6892 / 0x16892)
    AL = UInt8[DS, (ushort)(BX + 0x1672)];
    // CBW  (1000_6896 / 0x16896)
    AX = (ushort)((short)((sbyte)AL));
    // MOV DX,AX (1000_6897 / 0x16897)
    DX = AX;
    // MOV AL,byte ptr [BX + 0x1673] (1000_6899 / 0x16899)
    AL = UInt8[DS, (ushort)(BX + 0x1673)];
    // CBW  (1000_689D / 0x1689D)
    AX = (ushort)((short)((sbyte)AL));
    // ADD DX,word ptr [BP + 0x2] (1000_689E / 0x1689E)
    // DX += UInt16[SS, (ushort)(BP + 0x2)];
    DX = Alu.Add16(DX, UInt16[SS, (ushort)(BP + 0x2)]);
    // MOV BX,word ptr [BP + 0x4] (1000_68A1 / 0x168A1)
    BX = UInt16[SS, (ushort)(BP + 0x4)];
    // CMP BH,0x80 (1000_68A4 / 0x168A4)
    Alu.Sub8(BH, 0x80);
    // JC 0x1000:68ae (1000_68A7 / 0x168A7)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_68AE / 0x168AE)
      return NearRet();
    }
    // XOR BH,BH (1000_68A9 / 0x168A9)
    BH = 0;
    // ADD BX,AX (1000_68AB / 0x168AB)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // CLC  (1000_68AD / 0x168AD)
    CarryFlag = false;
    label_1000_68AE_168AE:
    // RET  (1000_68AE / 0x168AE)
    return NearRet();
    label_1000_68AF_168AF:
    // MOV DX,word ptr [SI + 0x6] (1000_68AF / 0x168AF)
    DX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV BX,word ptr [SI + 0x8] (1000_68B2 / 0x168B2)
    BX = UInt16[DS, (ushort)(SI + 0x8)];
    // CALL 0x1000:b647 (1000_68B5 / 0x168B5)
    NearCall(cs1, 0x68B8, unknown_1000_B647_1B647);
    // CMP DX,-0x10 (1000_68B8 / 0x168B8)
    Alu.Sub16(DX, 0xFFF0);
    // JLE 0x1000:68d0 (1000_68BB / 0x168BB)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_68D0_168D0;
    }
    // CMP BX,-0x10 (1000_68BD / 0x168BD)
    Alu.Sub16(BX, 0xFFF0);
    // JLE 0x1000:68d0 (1000_68C0 / 0x168C0)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_68D0_168D0;
    }
    // CMP DX,0x148 (1000_68C2 / 0x168C2)
    Alu.Sub16(DX, 0x148);
    // JGE 0x1000:68d0 (1000_68C6 / 0x168C6)
    if(SignFlag == OverflowFlag) {
      goto label_1000_68D0_168D0;
    }
    // CMP BX,0xa0 (1000_68C8 / 0x168C8)
    Alu.Sub16(BX, 0xA0);
    // JGE 0x1000:68d0 (1000_68CC / 0x168CC)
    if(SignFlag == OverflowFlag) {
      goto label_1000_68D0_168D0;
    }
    // CLC  (1000_68CE / 0x168CE)
    CarryFlag = false;
    // RET  (1000_68CF / 0x168CF)
    return NearRet();
    label_1000_68D0_168D0:
    // STC  (1000_68D0 / 0x168D0)
    CarryFlag = true;
    // RET  (1000_68D1 / 0x168D1)
    return NearRet();
  }
  
  public Action unknown_1000_68EB_168EB(int gotoTarget) {
    label_1000_68EB_168EB:
    // MOV AL,[0x1954] (1000_68EB / 0x168EB)
    AL = UInt8[DS, 0x1954];
    // CMP byte ptr [0x46eb],0x80 (1000_68EE / 0x168EE)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x80);
    // JNC 0x1000:6906 (1000_68F3 / 0x168F3)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_6906_16906(0);
    }
    // MOV AL,[0x476c] (1000_68F5 / 0x168F5)
    AL = UInt8[DS, 0x476C];
    // XOR AH,AH (1000_68F8 / 0x168F8)
    AH = 0;
    // ADD AX,AX (1000_68FA / 0x168FA)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // MOV SI,AX (1000_68FC / 0x168FC)
    SI = AX;
    // MOV SI,word ptr [SI + 0x4758] (1000_68FE / 0x168FE)
    SI = UInt16[DS, (ushort)(SI + 0x4758)];
    // MOV AL,byte ptr [SI] (1000_6902 / 0x16902)
    AL = UInt8[DS, SI];
    // JMP 0x1000:6912 (1000_6904 / 0x16904)
    goto label_1000_6912_16912;
    label_1000_6912_16912:
    // CMP byte ptr [SI + 0x3],0x80 (1000_6912 / 0x16912)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x3)], 0x80);
    // RET  (1000_6916 / 0x16916)
    return NearRet();
  }
  
  public Action unknown_1000_6906_16906(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6906: goto label_1000_6906_16906;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_6906_16906:
    // MOV SI,AX (1000_6906 / 0x16906)
    SI = AX;
    // DEC AL (1000_6908 / 0x16908)
    AL = Alu.Dec8(AL);
    // MOV AH,0x1b (1000_690A / 0x1690A)
    AH = 0x1B;
    // MUL AH (1000_690C / 0x1690C)
    Cpu.Mul8(AH);
    // ADD AX,0x8aa (1000_690E / 0x1690E)
    // AX += 0x8AA;
    AX = Alu.Add16(AX, 0x8AA);
    // XCHG AX,SI (1000_6911 / 0x16911)
    ushort tmp_1000_6911 = AX;
    AX = SI;
    SI = tmp_1000_6911;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_68EB_168EB(0x16912 - cs1 * 0x10);
  }
  
  public Action unknown_1000_6917_16917(int gotoTarget) {
    label_1000_6917_16917:
    // CMP byte ptr [0x46eb],0x0 (1000_6917 / 0x16917)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // MOV DI,0x3caf (1000_691C / 0x1691C)
    DI = 0x3CAF;
    // JNS 0x1000:6938 (1000_691F / 0x1691F)
    if(!SignFlag) {
      goto label_1000_6938_16938;
    }
    // MOV CX,word ptr [0x3cbe] (1000_6921 / 0x16921)
    CX = UInt16[DS, 0x3CBE];
    label_1000_6925_16925:
    // JCXZ 0x1000:6938 (1000_6925 / 0x16925)
    if(CX == 0) {
      goto label_1000_6938_16938;
    }
    label_1000_6927_16927:
    // ADD DI,0x11 (1000_6927 / 0x16927)
    // DI += 0x11;
    DI = Alu.Add16(DI, 0x11);
    // CMP word ptr [DI + 0xa],SI (1000_692A / 0x1692A)
    Alu.Sub16(UInt16[DS, (ushort)(DI + 0xA)], SI);
    // LOOPNZ 0x1000:6927 (1000_692D / 0x1692D)
    if(--CX != 0 && !ZeroFlag) {
      goto label_1000_6927_16927;
    }
    // JNZ 0x1000:6937 (1000_692F / 0x1692F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6937 / 0x16937)
      return NearRet();
    }
    // TEST byte ptr [DI + 0xc],0x40 (1000_6931 / 0x16931)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xC)], 0x40);
    // JNZ 0x1000:6925 (1000_6935 / 0x16935)
    if(!ZeroFlag) {
      goto label_1000_6925_16925;
    }
    label_1000_6937_16937:
    // RET  (1000_6937 / 0x16937)
    return NearRet();
    label_1000_6938_16938:
    // OR DI,DI (1000_6938 / 0x16938)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // RET  (1000_693A / 0x1693A)
    return NearRet();
  }
  
  public Action unknown_1000_693B_1693B(int gotoTarget) {
    label_1000_693B_1693B:
    // MOV AL,byte ptr [SI + 0x3] (1000_693B / 0x1693B)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AX,0xf (1000_693E / 0x1693E)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // SHR AX,1 (1000_6941 / 0x16941)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_6943 / 0x16943)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // RET  (1000_6945 / 0x16945)
    return NearRet();
  }
  
  public Action unknown_1000_6946_16946(int gotoTarget) {
    label_1000_6946_16946:
    // MOV SI,0x3cbe (1000_6946 / 0x16946)
    SI = 0x3CBE;
    // LODSW SI (1000_6949 / 0x16949)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_694A / 0x1694A)
    CX = AX;
    // JCXZ 0x1000:6972 (1000_694C / 0x1694C)
    if(CX == 0) {
      goto label_1000_6972_16972;
    }
    // MOV AL,0x11 (1000_694E / 0x1694E)
    AL = 0x11;
    // MUL CL (1000_6950 / 0x16950)
    Cpu.Mul8(CL);
    // ADD SI,AX (1000_6952 / 0x16952)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    label_1000_6954_16954:
    // SUB SI,0x11 (1000_6954 / 0x16954)
    // SI -= 0x11;
    SI = Alu.Sub16(SI, 0x11);
    // CMP word ptr [SI],DX (1000_6957 / 0x16957)
    Alu.Sub16(UInt16[DS, SI], DX);
    // JGE 0x1000:6970 (1000_6959 / 0x16959)
    if(SignFlag == OverflowFlag) {
      goto label_1000_6970_16970;
    }
    // CMP word ptr [SI + 0x2],BX (1000_695B / 0x1695B)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x2)], BX);
    // JGE 0x1000:6970 (1000_695E / 0x1695E)
    if(SignFlag == OverflowFlag) {
      goto label_1000_6970_16970;
    }
    // CMP DX,word ptr [SI + 0x4] (1000_6960 / 0x16960)
    Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JGE 0x1000:6970 (1000_6963 / 0x16963)
    if(SignFlag == OverflowFlag) {
      goto label_1000_6970_16970;
    }
    // TEST byte ptr [SI + 0xc],0x40 (1000_6965 / 0x16965)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xC)], 0x40);
    // JNZ 0x1000:6970 (1000_6969 / 0x16969)
    if(!ZeroFlag) {
      goto label_1000_6970_16970;
    }
    // CMP BX,word ptr [SI + 0x6] (1000_696B / 0x1696B)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x6)]);
    // JL 0x1000:6974 (1000_696E / 0x1696E)
    if(SignFlag != OverflowFlag) {
      goto label_1000_6974_16974;
    }
    label_1000_6970_16970:
    // LOOP 0x1000:6954 (1000_6970 / 0x16970)
    if(--CX != 0) {
      goto label_1000_6954_16954;
    }
    label_1000_6972_16972:
    // CLC  (1000_6972 / 0x16972)
    CarryFlag = false;
    // RET  (1000_6973 / 0x16973)
    return NearRet();
    label_1000_6974_16974:
    // MOV DI,word ptr [SI + 0xa] (1000_6974 / 0x16974)
    DI = UInt16[DS, (ushort)(SI + 0xA)];
    // CMP byte ptr [DI + 0x3],0x80 (1000_6977 / 0x16977)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x3)], 0x80);
    // RET  (1000_697B / 0x1697B)
    return NearRet();
  }
  
  public Action unknown_1000_697C_1697C(int gotoTarget) {
    label_1000_697C_1697C:
    // CALL 0x1000:6917 (1000_697C / 0x1697C)
    NearCall(cs1, 0x697F, unknown_1000_6917_16917);
    // JNZ 0x1000:69a2 (1000_697F / 0x1697F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_69A2 / 0x169A2)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x3],0x40 (1000_6981 / 0x16981)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:698f (1000_6985 / 0x16985)
    if(!ZeroFlag) {
      goto label_1000_698F_1698F;
    }
    // MOV DI,word ptr [SI + 0x4] (1000_6987 / 0x16987)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:5ed0 (1000_698A / 0x1698A)
    NearCall(cs1, 0x698D, unknown_1000_5ED0_15ED0);
    // JNZ 0x1000:69a2 (1000_698D / 0x1698D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_69A2 / 0x169A2)
      return NearRet();
    }
    label_1000_698F_1698F:
    // CALL 0x1000:686e (1000_698F / 0x1698F)
    NearCall(cs1, 0x6992, unknown_1000_686E_1686E);
    // JC 0x1000:69a2 (1000_6992 / 0x16992)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_69A2 / 0x169A2)
      return NearRet();
    }
    // MOV BP,0x18fd (1000_6994 / 0x16994)
    BP = 0x18FD;
    // CALL 0x1000:c5cf (1000_6997 / 0x16997)
    NearCall(cs1, 0x699A, unknown_1000_C5CF_1C5CF);
    // OR byte ptr [DI + 0xc],0x40 (1000_699A / 0x1699A)
    // UInt8[DS, (ushort)(DI + 0xC)] |= 0x40;
    UInt8[DS, (ushort)(DI + 0xC)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xC)], 0x40);
    // MOV word ptr [0x4752],DI (1000_699E / 0x1699E)
    UInt16[DS, 0x4752] = DI;
    label_1000_69A2_169A2:
    // RET  (1000_69A2 / 0x169A2)
    return NearRet();
  }
  
  public Action unknown_1000_69A3_169A3(int gotoTarget) {
    label_1000_69A3_169A3:
    // PUSH DI (1000_69A3 / 0x169A3)
    Stack.Push(DI);
    // XOR DI,DI (1000_69A4 / 0x169A4)
    DI = 0;
    // XCHG word ptr [0x4752],DI (1000_69A6 / 0x169A6)
    ushort tmp_1000_69A6 = UInt16[DS, 0x4752];
    UInt16[DS, 0x4752] = DI;
    DI = tmp_1000_69A6;
    // OR DI,DI (1000_69AA / 0x169AA)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:69b1 (1000_69AC / 0x169AC)
    if(ZeroFlag) {
      goto label_1000_69B1_169B1;
    }
    // CALL 0x1000:c58a (1000_69AE / 0x169AE)
    NearCall(cs1, 0x69B1, unknown_1000_C58A_1C58A);
    label_1000_69B1_169B1:
    // POP DI (1000_69B1 / 0x169B1)
    DI = Stack.Pop();
    // RET  (1000_69B2 / 0x169B2)
    return NearRet();
  }
  
  public Action unknown_1000_6A33_16A33(int gotoTarget) {
    label_1000_6A33_16A33:
    // MOV AL,0x3 (1000_6A33 / 0x16A33)
    AL = 0x3;
    // PUSH AX (1000_6A35 / 0x16A35)
    Stack.Push(AX);
    // CALL 0x1000:68eb (1000_6A36 / 0x16A36)
    NearCall(cs1, 0x6A39, unknown_1000_68EB_168EB);
    // POP AX (1000_6A39 / 0x16A39)
    AX = Stack.Pop();
    // MOV CL,byte ptr [SI + 0x3] (1000_6A3A / 0x16A3A)
    CL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND CL,0xc (1000_6A3D / 0x16A3D)
    // CL &= 0xC;
    CL = Alu.And8(CL, 0xC);
    // OR CL,AL (1000_6A40 / 0x16A40)
    // CL |= AL;
    CL = Alu.Or8(CL, AL);
    // JMP 0x1000:6a89 (1000_6A42 / 0x16A42)
    // Jump converted to entry function call
    return unknown_1000_6A89_16A89(0);
  }
  
  public Action unknown_1000_6A89_16A89(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6A89: goto label_1000_6A89_16A89;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_6A89_16A89:
    // CALL 0x1000:68eb (1000_6A89 / 0x16A89)
    NearCall(cs1, 0x6A8C, unknown_1000_68EB_168EB);
    // MOV AL,byte ptr [SI + 0x3] (1000_6A8C / 0x16A8C)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_6A8F / 0x16A8F)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,CL (1000_6A91 / 0x16A91)
    Alu.Sub8(AL, CL);
    // JZ 0x1000:6ab5 (1000_6A93 / 0x16A93)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:d2e2 (1000_6AB5 / 0x16AB5)
      // Jump converted to entry function call
      return unknown_1000_D2E2_1D2E2(0);
    }
    // PUSH word ptr [SI + 0x3] (1000_6A95 / 0x16A95)
    Stack.Push(UInt16[DS, (ushort)(SI + 0x3)]);
    // PUSH SI (1000_6A98 / 0x16A98)
    Stack.Push(SI);
    // PUSH word ptr [SI + 0x12] (1000_6A99 / 0x16A99)
    Stack.Push(UInt16[DS, (ushort)(SI + 0x12)]);
    // CALL 0x1000:6acb (1000_6A9C / 0x16A9C)
    NearCall(cs1, 0x6A9F, unknown_1000_6ACB_16ACB);
    // CALL 0x1000:a1c4 (1000_6A9F / 0x16A9F)
    NearCall(cs1, 0x6AA2, unknown_1000_A1C4_1A1C4);
    // MOV AL,0xa (1000_6AA2 / 0x16AA2)
    AL = 0xA;
    // CALL 0x1000:7bb9 (1000_6AA4 / 0x16AA4)
    NearCall(cs1, 0x6AA7, unknown_1000_7BB9_17BB9);
    // CALL 0x1000:a1e2 (1000_6AA7 / 0x16AA7)
    NearCall(cs1, 0x6AAA, unknown_1000_A1E2_1A1E2);
    // POP AX (1000_6AAA / 0x16AAA)
    AX = Stack.Pop();
    // POP SI (1000_6AAB / 0x16AAB)
    SI = Stack.Pop();
    // POP CX (1000_6AAC / 0x16AAC)
    CX = Stack.Pop();
    // JZ 0x1000:6ab8 (1000_6AAD / 0x16AAD)
    if(ZeroFlag) {
      goto label_1000_6AB8_16AB8;
    }
    // MOV word ptr [SI + 0x12],AX (1000_6AAF / 0x16AAF)
    UInt16[DS, (ushort)(SI + 0x12)] = AX;
    // CALL 0x1000:6acb (1000_6AB2 / 0x16AB2)
    NearCall(cs1, 0x6AB5, unknown_1000_6ACB_16ACB);
    label_1000_6AB5_16AB5:
    // JMP 0x1000:d2e2 (1000_6AB5 / 0x16AB5)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_6AB8_16AB8:
    // CALL 0x1000:693b (1000_6AB8 / 0x16AB8)
    NearCall(cs1, 0x6ABB, unknown_1000_693B_1693B);
    // OR AL,AL (1000_6ABB / 0x16ABB)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:6ab5 (1000_6ABD / 0x16ABD)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:d2e2 (1000_6AB5 / 0x16AB5)
      // Jump converted to entry function call
      return unknown_1000_D2E2_1D2E2(0);
    }
    // AND byte ptr [SI + 0x19],0x7f (1000_6ABF / 0x16ABF)
    // UInt8[DS, (ushort)(SI + 0x19)] &= 0x7F;
    UInt8[DS, (ushort)(SI + 0x19)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x7F);
    // JMP 0x1000:6ab5 (1000_6AC3 / 0x16AC3)
    // JMP target is JMP, inlining.
    // JMP 0x1000:d2e2 (1000_6AB5 / 0x16AB5)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
  }
  
  public Action unknown_1000_6ACB_16ACB(int gotoTarget) {
    label_1000_6ACB_16ACB:
    // MOV AL,byte ptr [SI + 0x3] (1000_6ACB / 0x16ACB)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_6ACE / 0x16ACE)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,CL (1000_6AD0 / 0x16AD0)
    Alu.Sub8(AL, CL);
    // JZ 0x1000:6b24 (1000_6AD2 / 0x16AD2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6B24 / 0x16B24)
      return NearRet();
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_6AD4_16AD4(0);
  }
  
  public Action unknown_1000_6AD4_16AD4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6AD4: goto label_1000_6AD4_16AD4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_6AD4_16AD4:
    // MOV DI,word ptr [SI + 0x4] (1000_6AD4 / 0x16AD4)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP CL,0x8 (1000_6AD7 / 0x16AD7)
    Alu.Sub8(CL, 0x8);
    // JNZ 0x1000:6aea (1000_6ADA / 0x16ADA)
    if(!ZeroFlag) {
      goto label_1000_6AEA_16AEA;
    }
    // CMP DI,0x7c8 (1000_6ADC / 0x16ADC)
    Alu.Sub16(DI, 0x7C8);
    // JNZ 0x1000:6aea (1000_6AE0 / 0x16AE0)
    if(!ZeroFlag) {
      goto label_1000_6AEA_16AEA;
    }
    // CMP byte ptr [DI + 0x1a],0x0 (1000_6AE2 / 0x16AE2)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x1A)], 0x0);
    // JNZ 0x1000:6aea (1000_6AE6 / 0x16AE6)
    if(!ZeroFlag) {
      goto label_1000_6AEA_16AEA;
    }
    // MOV CL,0xa (1000_6AE8 / 0x16AE8)
    CL = 0xA;
    label_1000_6AEA_16AEA:
    // MOV byte ptr [SI + 0x3],CL (1000_6AEA / 0x16AEA)
    UInt8[DS, (ushort)(SI + 0x3)] = CL;
    // AND byte ptr [SI + 0x12],0xcf (1000_6AED / 0x16AED)
    // UInt8[DS, (ushort)(SI + 0x12)] &= 0xCF;
    UInt8[DS, (ushort)(SI + 0x12)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x12)], 0xCF);
    // AND word ptr [SI + 0x10],0xfeff (1000_6AF1 / 0x16AF1)
    // UInt16[DS, (ushort)(SI + 0x10)] &= 0xFEFF;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0xFEFF);
    // CALL 0x1000:6c15 (1000_6AF6 / 0x16AF6)
    NearCall(cs1, 0x6AF9, unknown_1000_6C15_16C15);
    // JC 0x1000:6b00 (1000_6AF9 / 0x16AF9)
    if(CarryFlag) {
      goto label_1000_6B00_16B00;
    }
    // OR word ptr [SI + 0x10],0x100 (1000_6AFB / 0x16AFB)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x100;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x100);
    label_1000_6B00_16B00:
    // CALL 0x1000:8461 (1000_6B00 / 0x16B00)
    NearCall(cs1, 0x6B03, unknown_1000_8461_18461);
    // CALL 0x1000:6b25 (1000_6B03 / 0x16B03)
    NearCall(cs1, 0x6B06, unknown_1000_6B25_16B25);
    // CMP byte ptr [SI + 0x3],0x2 (1000_6B06 / 0x16B06)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x3)], 0x2);
    // JZ 0x1000:6b19 (1000_6B0A / 0x16B0A)
    if(ZeroFlag) {
      goto label_1000_6B19_16B19;
    }
    // CALL 0x1000:693b (1000_6B0C / 0x16B0C)
    NearCall(cs1, 0x6B0F, unknown_1000_693B_1693B);
    // MOV CL,AL (1000_6B0F / 0x16B0F)
    CL = AL;
    // MOV AX,0x2000 (1000_6B11 / 0x16B11)
    AX = 0x2000;
    // SHL AX,CL (1000_6B14 / 0x16B14)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // OR word ptr [SI + 0x12],AX (1000_6B16 / 0x16B16)
    // UInt16[DS, (ushort)(SI + 0x12)] |= AX;
    UInt16[DS, (ushort)(SI + 0x12)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x12)], AX);
    label_1000_6B19_16B19:
    // MOV AL,byte ptr [SI] (1000_6B19 / 0x16B19)
    AL = UInt8[DS, SI];
    // CMP AL,byte ptr [0x1954] (1000_6B1B / 0x16B1B)
    Alu.Sub8(AL, UInt8[DS, 0x1954]);
    // JNZ 0x1000:6b24 (1000_6B1F / 0x16B1F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6B24 / 0x16B24)
      return NearRet();
    }
    // CALL 0x1000:7847 (1000_6B21 / 0x16B21)
    NearCall(cs1, 0x6B24, unknown_1000_7847_17847);
    label_1000_6B24_16B24:
    // RET  (1000_6B24 / 0x16B24)
    return NearRet();
  }
  
  public Action unknown_1000_6B25_16B25(int gotoTarget) {
    label_1000_6B25_16B25:
    // MOV AX,[0x2] (1000_6B25 / 0x16B25)
    AX = UInt16[DS, 0x2];
    // MOV word ptr [SI + 0xa],AX (1000_6B28 / 0x16B28)
    UInt16[DS, (ushort)(SI + 0xA)] = AX;
    // XOR AX,AX (1000_6B2B / 0x16B2B)
    AX = 0;
    // MOV word ptr [SI + 0xc],AX (1000_6B2D / 0x16B2D)
    UInt16[DS, (ushort)(SI + 0xC)] = AX;
    // MOV word ptr [SI + 0xe],AX (1000_6B30 / 0x16B30)
    UInt16[DS, (ushort)(SI + 0xE)] = AX;
    // RET  (1000_6B33 / 0x16B33)
    return NearRet();
  }
  
  public Action unknown_1000_6B34_16B34(int gotoTarget) {
    label_1000_6B34_16B34:
    // INC byte ptr [0x46f6] (1000_6B34 / 0x16B34)
    UInt8[DS, 0x46F6] = Alu.Inc8(UInt8[DS, 0x46F6]);
    // MOV AL,[0x46f6] (1000_6B38 / 0x16B38)
    AL = UInt8[DS, 0x46F6];
    // AND AL,0x3 (1000_6B3B / 0x16B3B)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // JZ 0x1000:6b4b (1000_6B3D / 0x16B3D)
    if(ZeroFlag) {
      goto label_1000_6B4B_16B4B;
    }
    // MOV CX,0x1 (1000_6B3F / 0x16B3F)
    CX = 0x1;
    // MOV DI,word ptr [0x4752] (1000_6B42 / 0x16B42)
    DI = UInt16[DS, 0x4752];
    // OR DI,DI (1000_6B46 / 0x16B46)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNZ 0x1000:6b55 (1000_6B48 / 0x16B48)
    if(!ZeroFlag) {
      goto label_1000_6B55_16B55;
    }
    // RET  (1000_6B4A / 0x16B4A)
    return NearRet();
    label_1000_6B4B_16B4B:
    // MOV SI,0x3cbe (1000_6B4B / 0x16B4B)
    SI = 0x3CBE;
    // LODSW SI (1000_6B4E / 0x16B4E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_6B4F / 0x16B4F)
    CX = AX;
    // JCXZ 0x1000:6b89 (1000_6B51 / 0x16B51)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_6B89 / 0x16B89)
      return NearRet();
    }
    // MOV DI,SI (1000_6B53 / 0x16B53)
    DI = SI;
    label_1000_6B55_16B55:
    // TEST byte ptr [DI + 0xc],0x1 (1000_6B55 / 0x16B55)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xC)], 0x1);
    // JZ 0x1000:6b84 (1000_6B59 / 0x16B59)
    if(ZeroFlag) {
      goto label_1000_6B84_16B84;
    }
    // MOV SI,word ptr [DI + 0xd] (1000_6B5B / 0x16B5B)
    SI = UInt16[DS, (ushort)(DI + 0xD)];
    // LODSB SI (1000_6B5E / 0x16B5E)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_6B5F / 0x16B5F)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:6b6d (1000_6B61 / 0x16B61)
    if(!ZeroFlag) {
      goto label_1000_6B6D_16B6D;
    }
    // MOV SI,word ptr [DI + 0xf] (1000_6B63 / 0x16B63)
    SI = UInt16[DS, (ushort)(DI + 0xF)];
    // LODSB SI (1000_6B66 / 0x16B66)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // TEST byte ptr [DI + 0xc],0x2 (1000_6B67 / 0x16B67)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xC)], 0x2);
    // JNZ 0x1000:6b84 (1000_6B6B / 0x16B6B)
    if(!ZeroFlag) {
      goto label_1000_6B84_16B84;
    }
    label_1000_6B6D_16B6D:
    // XOR AH,AH (1000_6B6D / 0x16B6D)
    AH = 0;
    // MOV word ptr [DI + 0x8],AX (1000_6B6F / 0x16B6F)
    UInt16[DS, (ushort)(DI + 0x8)] = AX;
    // LODSB SI (1000_6B72 / 0x16B72)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CBW  (1000_6B73 / 0x16B73)
    AX = (ushort)((short)((sbyte)AL));
    // MOV DX,AX (1000_6B74 / 0x16B74)
    DX = AX;
    // LODSB SI (1000_6B76 / 0x16B76)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CBW  (1000_6B77 / 0x16B77)
    AX = (ushort)((short)((sbyte)AL));
    // MOV BX,AX (1000_6B78 / 0x16B78)
    BX = AX;
    // MOV word ptr [DI + 0xd],SI (1000_6B7A / 0x16B7A)
    UInt16[DS, (ushort)(DI + 0xD)] = SI;
    // PUSH CX (1000_6B7D / 0x16B7D)
    Stack.Push(CX);
    // PUSH DI (1000_6B7E / 0x16B7E)
    Stack.Push(DI);
    // CALL 0x1000:c661 (1000_6B7F / 0x16B7F)
    NearCall(cs1, 0x6B82, unknown_1000_C661_1C661);
    // POP DI (1000_6B82 / 0x16B82)
    DI = Stack.Pop();
    // POP CX (1000_6B83 / 0x16B83)
    CX = Stack.Pop();
    label_1000_6B84_16B84:
    // ADD DI,0x11 (1000_6B84 / 0x16B84)
    // DI += 0x11;
    DI = Alu.Add16(DI, 0x11);
    // LOOP 0x1000:6b55 (1000_6B87 / 0x16B87)
    if(--CX != 0) {
      goto label_1000_6B55_16B55;
    }
    label_1000_6B89_16B89:
    // RET  (1000_6B89 / 0x16B89)
    return NearRet();
  }
  
  public Action unknown_1000_6B8A_16B8A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6B8A: goto label_1000_6B8A_16B8A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_6B8A_16B8A:
    // MOV AH,byte ptr [DI + 0xa] (1000_6B8A / 0x16B8A)
    AH = UInt8[DS, (ushort)(DI + 0xA)];
    // AND AH,0x41 (1000_6B8D / 0x16B8D)
    // AH &= 0x41;
    AH = Alu.And8(AH, 0x41);
    // CMP AH,0x1 (1000_6B90 / 0x16B90)
    Alu.Sub8(AH, 0x1);
    // CMC  (1000_6B93 / 0x16B93)
    CarryFlag = !CarryFlag;
    // JMP 0x1000:6bb6 (1000_6B94 / 0x16B94)
    // Jump converted to non entry function call
    return unknown_1000_6B96_16B96(0x16BB6 - cs1 * 0x10);
  }
  
  public Action unknown_1000_6B96_16B96(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6B96: goto label_1000_6B96_16B96;break;
      case 0x6BB6: goto label_1000_6BB6_16BB6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_6B96_16B96:
    // TEST word ptr [SI + 0x10],0x200 (1000_6B96 / 0x16B96)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x200);
    // STC  (1000_6B9B / 0x16B9B)
    CarryFlag = true;
    // JNZ 0x1000:6bb6 (1000_6B9C / 0x16B9C)
    if(!ZeroFlag) {
      goto label_1000_6BB6_16BB6;
    }
    // TEST word ptr [SI + 0x12],0x30 (1000_6B9E / 0x16B9E)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x30);
    // STC  (1000_6BA3 / 0x16BA3)
    CarryFlag = true;
    // JNZ 0x1000:6bb6 (1000_6BA4 / 0x16BA4)
    if(!ZeroFlag) {
      goto label_1000_6BB6_16BB6;
    }
    // CMP byte ptr [DI + 0x12],0x1 (1000_6BA6 / 0x16BA6)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x12)], 0x1);
    // JC 0x1000:6bb6 (1000_6BAA / 0x16BAA)
    if(CarryFlag) {
      goto label_1000_6BB6_16BB6;
    }
    // MOV AL,byte ptr [DI + 0xa] (1000_6BAC / 0x16BAC)
    AL = UInt8[DS, (ushort)(DI + 0xA)];
    // XOR AL,0x40 (1000_6BAF / 0x16BAF)
    // AL ^= 0x40;
    AL = Alu.Xor8(AL, 0x40);
    // AND AL,0x41 (1000_6BB1 / 0x16BB1)
    // AL &= 0x41;
    AL = Alu.And8(AL, 0x41);
    // JZ 0x1000:6bb6 (1000_6BB3 / 0x16BB3)
    if(ZeroFlag) {
      goto label_1000_6BB6_16BB6;
    }
    // STC  (1000_6BB5 / 0x16BB5)
    CarryFlag = true;
    label_1000_6BB6_16BB6:
    // PUSHF  (1000_6BB6 / 0x16BB6)
    Stack.Push(FlagRegister);
    // SBB AH,AH (1000_6BB7 / 0x16BB7)
    AH = Alu.Sbb8(AH, AH);
    // MOV AL,byte ptr [SI + 0x3] (1000_6BB9 / 0x16BB9)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AX,0x1010 (1000_6BBC / 0x16BBC)
    // AX &= 0x1010;
    AX = Alu.And16(AX, 0x1010);
    // CMP AL,AH (1000_6BBF / 0x16BBF)
    Alu.Sub8(AL, AH);
    // JZ 0x1000:6bd5 (1000_6BC1 / 0x16BC1)
    if(ZeroFlag) {
      goto label_1000_6BD5_16BD5;
    }
    // XOR byte ptr [SI + 0x3],0x10 (1000_6BC3 / 0x16BC3)
    // UInt8[DS, (ushort)(SI + 0x3)] ^= 0x10;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.Xor8(UInt8[DS, (ushort)(SI + 0x3)], 0x10);
    // PUSH AX (1000_6BC7 / 0x16BC7)
    Stack.Push(AX);
    // PUSH DI (1000_6BC8 / 0x16BC8)
    Stack.Push(DI);
    // CALL 0x1000:8461 (1000_6BC9 / 0x16BC9)
    NearCall(cs1, 0x6BCC, unknown_1000_8461_18461);
    // POP DI (1000_6BCC / 0x16BCC)
    DI = Stack.Pop();
    // POP AX (1000_6BCD / 0x16BCD)
    AX = Stack.Pop();
    // TEST AL,0x10 (1000_6BCE / 0x16BCE)
    Alu.And8(AL, 0x10);
    // JZ 0x1000:6bd5 (1000_6BD0 / 0x16BD0)
    if(ZeroFlag) {
      goto label_1000_6BD5_16BD5;
    }
    // CALL 0x1000:6b25 (1000_6BD2 / 0x16BD2)
    NearCall(cs1, 0x6BD5, unknown_1000_6B25_16B25);
    label_1000_6BD5_16BD5:
    // POPF  (1000_6BD5 / 0x16BD5)
    FlagRegister = Stack.Pop();
    // RET  (1000_6BD6 / 0x16BD6)
    return NearRet();
  }
  
  public Action unknown_1000_6C15_16C15(int gotoTarget) {
    label_1000_6C15_16C15:
    // MOV DI,word ptr [SI + 0x4] (1000_6C15 / 0x16C15)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV BL,byte ptr [SI + 0x3] (1000_6C18 / 0x16C18)
    BL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND BX,0xf (1000_6C1B / 0x16C1B)
    // BX &= 0xF;
    BX = Alu.And16(BX, 0xF);
    // SHL BX,1 (1000_6C1E / 0x16C1E)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // CLC  (1000_6C20 / 0x16C20)
    CarryFlag = false;
    // JMP word ptr CS:[BX + 0x6bf5] (1000_6C21 / 0x16C21)
    // Indirect jump to word ptr CS:[BX + 0x6bf5], generating possible targets from emulator records
    uint targetAddress_1000_6C21 = (uint)(UInt16[cs1, (ushort)(BX + 0x6BF5)]);
    switch(targetAddress_1000_6C21) {
      case 0x6B96 : // Jump converted to entry function call
    return unknown_1000_6B96_16B96(0);
      case 0xF66 : // JMP target is RET, inlining.
    // RET  (1000_0F66 / 0x10F66)
    return NearRet();
      case 0x6B8A : // Jump converted to entry function call
    return unknown_1000_6B8A_16B8A(0);
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_6C21);
        break;
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_6C46_16C46(0);
  }
  
  public Action unknown_1000_6C46_16C46(int gotoTarget) {
    label_1000_6C46_16C46:
    // MOV AL,[0x2a] (1000_6C46 / 0x16C46)
    AL = UInt8[DS, 0x2A];
    // SUB AL,0x2d (1000_6C49 / 0x16C49)
    // AL -= 0x2D;
    AL = Alu.Sub8(AL, 0x2D);
    // CMP AL,0x3 (1000_6C4B / 0x16C4B)
    Alu.Sub8(AL, 0x3);
    // JNC 0x1000:6c6e (1000_6C4D / 0x16C4D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6C6E / 0x16C6E)
      return NearRet();
    }
    // TEST word ptr [0x10],0x10 (1000_6C4F / 0x16C4F)
    Alu.And16(UInt16[DS, 0x10], 0x10);
    // JNZ 0x1000:6c6e (1000_6C55 / 0x16C55)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6C6E / 0x16C6E)
      return NearRet();
    }
    // MOV DI,word ptr [0x473c] (1000_6C57 / 0x16C57)
    DI = UInt16[DS, 0x473C];
    // OR DI,DI (1000_6C5B / 0x16C5B)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:6c6e (1000_6C5D / 0x16C5D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6C6E / 0x16C6E)
      return NearRet();
    }
    // CALL 0x1000:331e (1000_6C5F / 0x16C5F)
    NearCall(cs1, 0x6C62, unknown_1000_331E_1331E);
    // CMP byte ptr [0x66],0x0 (1000_6C62 / 0x16C62)
    Alu.Sub8(UInt8[DS, 0x66], 0x0);
    // JZ 0x1000:6c6e (1000_6C67 / 0x16C67)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6C6E / 0x16C6E)
      return NearRet();
    }
    // MOV AL,0x30 (1000_6C69 / 0x16C69)
    AL = 0x30;
    // JMP 0x1000:121f (1000_6C6B / 0x16C6B)
    // Jump converted to entry function call
    return unknown_1000_121F_1121F(0);
    label_1000_6C6E_16C6E:
    // RET  (1000_6C6E / 0x16C6E)
    return NearRet();
  }
  
  public Action unknown_1000_6C6F_16C6F(int gotoTarget) {
    label_1000_6C6F_16C6F:
    // XOR SI,SI (1000_6C6F / 0x16C6F)
    SI = 0;
    // MOV AX,[0x101a] (1000_6C71 / 0x16C71)
    AX = UInt16[DS, 0x101A];
    // CMP AL,0x80 (1000_6C74 / 0x16C74)
    Alu.Sub8(AL, 0x80);
    // JNZ 0x1000:6c83 (1000_6C76 / 0x16C76)
    if(!ZeroFlag) {
      goto label_1000_6C83_16C83;
    }
    // MOV AL,0x1c (1000_6C78 / 0x16C78)
    AL = 0x1C;
    // DEC AH (1000_6C7A / 0x16C7A)
    AH = Alu.Dec8(AH);
    // MUL AH (1000_6C7C / 0x16C7C)
    Cpu.Mul8(AH);
    // ADD AX,0x100 (1000_6C7E / 0x16C7E)
    // AX += 0x100;
    AX = Alu.Add16(AX, 0x100);
    // MOV SI,AX (1000_6C81 / 0x16C81)
    SI = AX;
    label_1000_6C83_16C83:
    // MOV word ptr [0x473c],SI (1000_6C83 / 0x16C83)
    UInt16[DS, 0x473C] = SI;
    // CALL 0x1000:6c46 (1000_6C87 / 0x16C87)
    NearCall(cs1, 0x6C8A, unknown_1000_6C46_16C46);
    // MOV byte ptr [0x4737],0x0 (1000_6C8A / 0x16C8A)
    UInt8[DS, 0x4737] = 0x0;
    // MOV SI,0x8aa (1000_6C8F / 0x16C8F)
    SI = 0x8AA;
    label_1000_6C92_16C92:
    // TEST word ptr [SI + 0x12],0x430 (1000_6C92 / 0x16C92)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x430);
    // JNZ 0x1000:6cd3 (1000_6C97 / 0x16C97)
    if(!ZeroFlag) {
      goto label_1000_6CD3_16CD3;
    }
    // CMP byte ptr [SI + 0x1a],0x14 (1000_6C99 / 0x16C99)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x1A)], 0x14);
    // JNC 0x1000:6ca4 (1000_6C9D / 0x16C9D)
    if(!CarryFlag) {
      goto label_1000_6CA4_16CA4;
    }
    // CALL 0x1000:6d19 (1000_6C9F / 0x16C9F)
    NearCall(cs1, 0x6CA2, unknown_1000_6D19_16D19);
    // JC 0x1000:6cc3 (1000_6CA2 / 0x16CA2)
    if(CarryFlag) {
      goto label_1000_6CC3_16CC3;
    }
    label_1000_6CA4_16CA4:
    // MOV AL,byte ptr [SI + 0x3] (1000_6CA4 / 0x16CA4)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // TEST AL,0xa0 (1000_6CA7 / 0x16CA7)
    Alu.And8(AL, 0xA0);
    // JNZ 0x1000:6cc3 (1000_6CA9 / 0x16CA9)
    if(!ZeroFlag) {
      goto label_1000_6CC3_16CC3;
    }
    // TEST AL,0x40 (1000_6CAB / 0x16CAB)
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:6ced (1000_6CAD / 0x16CAD)
    if(!ZeroFlag) {
      goto label_1000_6CED_16CED;
    }
    // AND AX,0xf (1000_6CAF / 0x16CAF)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // MOV BX,AX (1000_6CB2 / 0x16CB2)
    BX = AX;
    // SHL BX,1 (1000_6CB4 / 0x16CB4)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // PUSH SI (1000_6CB6 / 0x16CB6)
    Stack.Push(SI);
    // MOV DI,word ptr [SI + 0x4] (1000_6CB7 / 0x16CB7)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL word ptr CS:[BX + 0x6c26] (1000_6CBA / 0x16CBA)
    // Indirect call to word ptr CS:[BX + 0x6c26], generating possible targets from emulator records
    uint targetAddress_1000_6CBA = (uint)(UInt16[cs1, (ushort)(BX + 0x6C26)]);
    switch(targetAddress_1000_6CBA) {
      case 0xF66 : NearCall(cs1, 0x6CBF, NoOp_1000_0F66_10F66);
        break;
      case 0x6FE5 : NearCall(cs1, 0x6CBF, unknown_1000_6FE5_16FE5);
        break;
      case 0x70CC : NearCall(cs1, 0x6CBF, unknown_1000_70CC_170CC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_6CBA);
        break;
    }
    // POP SI (1000_6CBF / 0x16CBF)
    SI = Stack.Pop();
    // CALL 0x1000:6d7b (1000_6CC0 / 0x16CC0)
    NearCall(cs1, 0x6CC3, unknown_1000_6D7B_16D7B);
    label_1000_6CC3_16CC3:
    // ADD SI,0x1b (1000_6CC3 / 0x16CC3)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfbb (1000_6CC6 / 0x16CC6)
    Alu.Sub16(SI, 0xFBB);
    // JC 0x1000:6c92 (1000_6CCA / 0x16CCA)
    if(CarryFlag) {
      goto label_1000_6C92_16C92;
    }
    // MOV AL,[0x4737] (1000_6CCC / 0x16CCC)
    AL = UInt8[DS, 0x4737];
    // MOV [0xfa],AL (1000_6CCF / 0x16CCF)
    UInt8[DS, 0xFA] = AL;
    // RET  (1000_6CD2 / 0x16CD2)
    return NearRet();
    label_1000_6CD3_16CD3:
    // TEST byte ptr [SI + 0x3],0x40 (1000_6CD3 / 0x16CD3)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:6ced (1000_6CD7 / 0x16CD7)
    if(!ZeroFlag) {
      goto label_1000_6CED_16CED;
    }
    // CMP byte ptr [0xfa],0x0 (1000_6CD9 / 0x16CD9)
    Alu.Sub8(UInt8[DS, 0xFA], 0x0);
    // JZ 0x1000:6cc3 (1000_6CDE / 0x16CDE)
    if(ZeroFlag) {
      goto label_1000_6CC3_16CC3;
    }
    // AND byte ptr [SI + 0x12],0xcf (1000_6CE0 / 0x16CE0)
    // UInt8[DS, (ushort)(SI + 0x12)] &= 0xCF;
    UInt8[DS, (ushort)(SI + 0x12)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x12)], 0xCF);
    // TEST word ptr [SI + 0x12],0x400 (1000_6CE4 / 0x16CE4)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x400);
    // JNZ 0x1000:6cc3 (1000_6CE9 / 0x16CE9)
    if(!ZeroFlag) {
      goto label_1000_6CC3_16CC3;
    }
    // JMP 0x1000:6c92 (1000_6CEB / 0x16CEB)
    goto label_1000_6C92_16C92;
    label_1000_6CED_16CED:
    // MOV AL,byte ptr [SI] (1000_6CED / 0x16CED)
    AL = UInt8[DS, SI];
    // CMP AL,byte ptr [0x1954] (1000_6CEF / 0x16CEF)
    Alu.Sub8(AL, UInt8[DS, 0x1954]);
    // JZ 0x1000:6cc3 (1000_6CF3 / 0x16CF3)
    if(ZeroFlag) {
      goto label_1000_6CC3_16CC3;
    }
    // PUSH SI (1000_6CF5 / 0x16CF5)
    Stack.Push(SI);
    // CALL 0x1000:8308 (1000_6CF6 / 0x16CF6)
    NearCall(cs1, 0x6CF9, unknown_1000_8308_18308);
    // POP SI (1000_6CF9 / 0x16CF9)
    SI = Stack.Pop();
    // JMP 0x1000:6cc3 (1000_6CFA / 0x16CFA)
    goto label_1000_6CC3_16CC3;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_6CFC_16CFC(0);
  }
  
  public Action unknown_1000_6CFC_16CFC(int gotoTarget) {
    label_1000_6CFC_16CFC:
    // CMP byte ptr [DI + 0x8],0x20 (1000_6CFC / 0x16CFC)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x20);
    // JNC 0x1000:6d18 (1000_6D00 / 0x16D00)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6D18 / 0x16D18)
      return NearRet();
    }
    // CMP byte ptr [DI + 0xb],0xc (1000_6D02 / 0x16D02)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0xB)], 0xC);
    // JNC 0x1000:6d18 (1000_6D06 / 0x16D06)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6D18 / 0x16D18)
      return NearRet();
    }
    // TEST byte ptr [DI + 0xa],0x1 (1000_6D08 / 0x16D08)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x1);
    // JNZ 0x1000:6d18 (1000_6D0C / 0x16D0C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6D18 / 0x16D18)
      return NearRet();
    }
    // INC byte ptr [DI + 0xb] (1000_6D0E / 0x16D0E)
    UInt8[DS, (ushort)(DI + 0xB)] = Alu.Inc8(UInt8[DS, (ushort)(DI + 0xB)]);
    // PUSH SI (1000_6D11 / 0x16D11)
    Stack.Push(SI);
    // PUSH DI (1000_6D12 / 0x16D12)
    Stack.Push(DI);
    // CALL 0x1000:644e (1000_6D13 / 0x16D13)
    NearCall(cs1, 0x6D16, unknown_1000_644E_1644E);
    // POP DI (1000_6D16 / 0x16D16)
    DI = Stack.Pop();
    // POP SI (1000_6D17 / 0x16D17)
    SI = Stack.Pop();
    label_1000_6D18_16D18:
    // RET  (1000_6D18 / 0x16D18)
    return NearRet();
  }
  
  public Action unknown_1000_6D19_16D19(int gotoTarget) {
    label_1000_6D19_16D19:
    // TEST byte ptr [SI + 0x3],0xe3 (1000_6D19 / 0x16D19)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0xE3);
    // JNZ 0x1000:6d5e (1000_6D1D / 0x16D1D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6D5E / 0x16D5E)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x10],0x80 (1000_6D1F / 0x16D1F)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:6d5e (1000_6D23 / 0x16D23)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6D5E / 0x16D5E)
      return NearRet();
    }
    // CMP SI,0x8e0 (1000_6D25 / 0x16D25)
    Alu.Sub16(SI, 0x8E0);
    // JZ 0x1000:6d5e (1000_6D29 / 0x16D29)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6D5E / 0x16D5E)
      return NearRet();
    }
    // MOV DI,word ptr [SI + 0x4] (1000_6D2B / 0x16D2B)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // XOR BX,BX (1000_6D2E / 0x16D2E)
    BX = 0;
    // MOV CL,byte ptr [SI + 0x1a] (1000_6D30 / 0x16D30)
    CL = UInt8[DS, (ushort)(SI + 0x1A)];
    // NOT CL (1000_6D33 / 0x16D33)
    CL = (byte)~CL;
    // MOV DX,SI (1000_6D35 / 0x16D35)
    DX = SI;
    // MOV BP,0x6d5f (1000_6D37 / 0x16D37)
    BP = 0x6D5F;
    // CALL 0x1000:661d (1000_6D3A / 0x16D3A)
    NearCall(cs1, 0x6D3D, unknown_1000_661D_1661D);
    // OR BX,BX (1000_6D3D / 0x16D3D)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:6d5e (1000_6D3F / 0x16D3F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6D5E / 0x16D5E)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x1a] (1000_6D41 / 0x16D41)
    AL = UInt8[DS, (ushort)(SI + 0x1A)];
    // ADD byte ptr [BX + 0x1a],AL (1000_6D44 / 0x16D44)
    // UInt8[DS, (ushort)(BX + 0x1A)] += AL;
    UInt8[DS, (ushort)(BX + 0x1A)] = Alu.Add8(UInt8[DS, (ushort)(BX + 0x1A)], AL);
    // MOV AL,byte ptr [SI + 0x19] (1000_6D47 / 0x16D47)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // MOV AH,AL (1000_6D4A / 0x16D4A)
    AH = AL;
    // AND AL,byte ptr [BX + 0x19] (1000_6D4C / 0x16D4C)
    // AL &= UInt8[DS, (ushort)(BX + 0x19)];
    AL = Alu.And8(AL, UInt8[DS, (ushort)(BX + 0x19)]);
    // MOV byte ptr [SI + 0x19],AL (1000_6D4F / 0x16D4F)
    UInt8[DS, (ushort)(SI + 0x19)] = AL;
    // OR byte ptr [BX + 0x19],AH (1000_6D52 / 0x16D52)
    // UInt8[DS, (ushort)(BX + 0x19)] |= AH;
    UInt8[DS, (ushort)(BX + 0x19)] = Alu.Or8(UInt8[DS, (ushort)(BX + 0x19)], AH);
    // OR word ptr [BX + 0x12],0x200 (1000_6D55 / 0x16D55)
    // UInt16[DS, (ushort)(BX + 0x12)] |= 0x200;
    UInt16[DS, (ushort)(BX + 0x12)] = Alu.Or16(UInt16[DS, (ushort)(BX + 0x12)], 0x200);
    // CALL 0x1000:66b1 (1000_6D5A / 0x16D5A)
    throw FailAsUntested("Could not find a valid function at address 1000_66B1 / 0x166B1");
    // STC  (1000_6D5D / 0x16D5D)
    CarryFlag = true;
    label_1000_6D5E_16D5E:
    // RET  (1000_6D5E / 0x16D5E)
    return NearRet();
  }
  
  public Action unknown_1000_6D7B_16D7B(int gotoTarget) {
    label_1000_6D7B_16D7B:
    // TEST word ptr [0x2],0x3f (1000_6D7B / 0x16D7B)
    Alu.And16(UInt16[DS, 0x2], 0x3F);
    // JZ 0x1000:6d84 (1000_6D81 / 0x16D81)
    if(ZeroFlag) {
      goto label_1000_6D84_16D84;
    }
    // RET  (1000_6D83 / 0x16D83)
    return NearRet();
    label_1000_6D84_16D84:
    // CALL 0x1000:693b (1000_6D84 / 0x16D84)
    NearCall(cs1, 0x6D87, unknown_1000_693B_1693B);
    // MOV CL,AL (1000_6D87 / 0x16D87)
    CL = AL;
    // MOV AX,0xc000 (1000_6D89 / 0x16D89)
    AX = 0xC000;
    // ROL AX,CL (1000_6D8C / 0x16D8C)
    AX = Alu.Rol16(AX, CL);
    // AND AX,word ptr [SI + 0x12] (1000_6D8E / 0x16D8E)
    // AX &= UInt16[DS, (ushort)(SI + 0x12)];
    AX = Alu.And16(AX, UInt16[DS, (ushort)(SI + 0x12)]);
    // JZ 0x1000:6dba (1000_6D91 / 0x16D91)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6DBA / 0x16DBA)
      return NearRet();
    }
    // SHL AX,1 (1000_6D93 / 0x16D93)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNC 0x1000:6da0 (1000_6D95 / 0x16D95)
    if(!CarryFlag) {
      goto label_1000_6DA0_16DA0;
    }
    // CMP byte ptr [SI + 0x18],0x0 (1000_6D97 / 0x16D97)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x18)], 0x0);
    // JZ 0x1000:6da0 (1000_6D9B / 0x16D9B)
    if(ZeroFlag) {
      goto label_1000_6DA0_16DA0;
    }
    // DEC byte ptr [SI + 0x18] (1000_6D9D / 0x16D9D)
    UInt8[DS, (ushort)(SI + 0x18)] = Alu.Dec8(UInt8[DS, (ushort)(SI + 0x18)]);
    label_1000_6DA0_16DA0:
    // SHL AX,1 (1000_6DA0 / 0x16DA0)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNC 0x1000:6dad (1000_6DA2 / 0x16DA2)
    if(!CarryFlag) {
      goto label_1000_6DAD_16DAD;
    }
    // CMP byte ptr [SI + 0x17],0x0 (1000_6DA4 / 0x16DA4)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x17)], 0x0);
    // JZ 0x1000:6dad (1000_6DA8 / 0x16DA8)
    if(ZeroFlag) {
      goto label_1000_6DAD_16DAD;
    }
    // DEC byte ptr [SI + 0x17] (1000_6DAA / 0x16DAA)
    UInt8[DS, (ushort)(SI + 0x17)] = Alu.Dec8(UInt8[DS, (ushort)(SI + 0x17)]);
    label_1000_6DAD_16DAD:
    // SHL AX,1 (1000_6DAD / 0x16DAD)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNC 0x1000:6dba (1000_6DAF / 0x16DAF)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6DBA / 0x16DBA)
      return NearRet();
    }
    // CMP byte ptr [SI + 0x16],0x0 (1000_6DB1 / 0x16DB1)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x16)], 0x0);
    // JZ 0x1000:6dba (1000_6DB5 / 0x16DB5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6DBA / 0x16DBA)
      return NearRet();
    }
    // DEC byte ptr [SI + 0x16] (1000_6DB7 / 0x16DB7)
    UInt8[DS, (ushort)(SI + 0x16)] = Alu.Dec8(UInt8[DS, (ushort)(SI + 0x16)]);
    label_1000_6DBA_16DBA:
    // RET  (1000_6DBA / 0x16DBA)
    return NearRet();
  }
  
  public Action unknown_1000_6E20_16E20(int gotoTarget) {
    label_1000_6E20_16E20:
    // CMP byte ptr [0x46de],0x0 (1000_6E20 / 0x16E20)
    Alu.Sub8(UInt8[DS, 0x46DE], 0x0);
    // JNZ 0x1000:6e28 (1000_6E25 / 0x16E25)
    if(!ZeroFlag) {
      goto label_1000_6E28_16E28;
    }
    // RET  (1000_6E27 / 0x16E27)
    return NearRet();
    label_1000_6E28_16E28:
    // TEST byte ptr [DI + 0xa],0x8 (1000_6E28 / 0x16E28)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x8);
    // JZ 0x1000:6e4b (1000_6E2C / 0x16E2C)
    if(ZeroFlag) {
      goto label_1000_6E4B_16E4B;
    }
    // CALL 0x1000:1ac5 (1000_6E2E / 0x16E2E)
    NearCall(cs1, 0x6E31, unknown_1000_1AC5_11AC5);
    // SUB AL,byte ptr [DI + 0xb] (1000_6E31 / 0x16E31)
    // AL -= UInt8[DS, (ushort)(DI + 0xB)];
    AL = Alu.Sub8(AL, UInt8[DS, (ushort)(DI + 0xB)]);
    // CMP AL,0xfe (1000_6E34 / 0x16E34)
    Alu.Sub8(AL, 0xFE);
    // JNC 0x1000:6e81 (1000_6E36 / 0x16E36)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6E81 / 0x16E81)
      return NearRet();
    }
    // AND byte ptr [DI + 0xa],0xf7 (1000_6E38 / 0x16E38)
    // UInt8[DS, (ushort)(DI + 0xA)] &= 0xF7;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0xF7);
    // AND byte ptr [DI + 0x8],0x7 (1000_6E3C / 0x16E3C)
    // UInt8[DS, (ushort)(DI + 0x8)] &= 0x7;
    UInt8[DS, (ushort)(DI + 0x8)] = Alu.And8(UInt8[DS, (ushort)(DI + 0x8)], 0x7);
    // INC byte ptr [0x27] (1000_6E40 / 0x16E40)
    UInt8[DS, 0x27] = Alu.Inc8(UInt8[DS, 0x27]);
    // CALL 0x1000:6dbb (1000_6E44 / 0x16E44)
    throw FailAsUntested("Could not find a valid function at address 1000_6DBB / 0x16DBB");
    // MOV byte ptr [DI + 0xb],0x5 (1000_6E47 / 0x16E47)
    UInt8[DS, (ushort)(DI + 0xB)] = 0x5;
    label_1000_6E4B_16E4B:
    // CALL 0x1000:6cfc (1000_6E4B / 0x16E4B)
    NearCall(cs1, 0x6E4E, unknown_1000_6CFC_16CFC);
    // CALL 0x1000:1ac5 (1000_6E4E / 0x16E4E)
    NearCall(cs1, 0x6E51, unknown_1000_1AC5_11AC5);
    // SUB AL,byte ptr [SI + 0x14] (1000_6E51 / 0x16E51)
    // AL -= UInt8[DS, (ushort)(SI + 0x14)];
    AL = Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0x14)]);
    // CMP AL,0x8 (1000_6E54 / 0x16E54)
    Alu.Sub8(AL, 0x8);
    // JBE 0x1000:6e5d (1000_6E56 / 0x16E56)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_6E5D_16E5D;
    }
    // MOV AL,0x1 (1000_6E58 / 0x16E58)
    AL = 0x1;
    // CALL 0x1000:6f93 (1000_6E5A / 0x16E5A)
    NearCall(cs1, 0x6E5D, unknown_1000_6F93_16F93);
    label_1000_6E5D_16E5D:
    // MOV AL,byte ptr [SI] (1000_6E5D / 0x16E5D)
    AL = UInt8[DS, SI];
    // CMP AL,byte ptr [DI + 0x9] (1000_6E5F / 0x16E5F)
    Alu.Sub8(AL, UInt8[DS, (ushort)(DI + 0x9)]);
    // JNZ 0x1000:6e81 (1000_6E62 / 0x16E62)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6E81 / 0x16E81)
      return NearRet();
    }
    // XOR DX,DX (1000_6E64 / 0x16E64)
    DX = 0;
    // MOV BP,0x6e82 (1000_6E66 / 0x16E66)
    BP = 0x6E82;
    // CALL 0x1000:661d (1000_6E69 / 0x16E69)
    NearCall(cs1, 0x6E6C, unknown_1000_661D_1661D);
    // CMP DL,0x3 (1000_6E6C / 0x16E6C)
    Alu.Sub8(DL, 0x3);
    // JNZ 0x1000:6e81 (1000_6E6F / 0x16E6F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6E81 / 0x16E81)
      return NearRet();
    }
    // MOV BP,0x6ea8 (1000_6E71 / 0x16E71)
    BP = 0x6EA8;
    // CALL 0x1000:661d (1000_6E74 / 0x16E74)
    NearCall(cs1, 0x6E77, unknown_1000_661D_1661D);
    // MOV AX,0x302 (1000_6E77 / 0x16E77)
    AX = 0x302;
    // PUSH SI (1000_6E7A / 0x16E7A)
    Stack.Push(SI);
    // PUSH DI (1000_6E7B / 0x16E7B)
    Stack.Push(DI);
    // CALL 0x1000:29f0 (1000_6E7C / 0x16E7C)
    NearCall(cs1, 0x6E7F, unknown_1000_29F0_129F0);
    // POP DI (1000_6E7F / 0x16E7F)
    DI = Stack.Pop();
    // POP SI (1000_6E80 / 0x16E80)
    SI = Stack.Pop();
    label_1000_6E81_16E81:
    // RET  (1000_6E81 / 0x16E81)
    return NearRet();
  }
  
  public Action unknown_1000_6E82_16E82(int gotoTarget) {
    label_1000_6E82_16E82:
    // CMP DI,word ptr [0x114e] (1000_6E82 / 0x16E82)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JZ 0x1000:6ea7 (1000_6E86 / 0x16E86)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6EA7 / 0x16EA7)
      return NearRet();
    }
    // CMP byte ptr [DI + 0x8],0x21 (1000_6E88 / 0x16E88)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x21);
    // JNC 0x1000:6ea7 (1000_6E8C / 0x16E8C)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6EA7 / 0x16EA7)
      return NearRet();
    }
    // CMP byte ptr [SI + 0x15],0x28 (1000_6E8E / 0x16E8E)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x15)], 0x28);
    // JNC 0x1000:6ea7 (1000_6E92 / 0x16E92)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6EA7 / 0x16EA7)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_6E94 / 0x16E94)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0x2f (1000_6E97 / 0x16E97)
    // AL &= 0x2F;
    AL = Alu.And8(AL, 0x2F);
    // JNZ 0x1000:6ea7 (1000_6E99 / 0x16E99)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6EA7 / 0x16EA7)
      return NearRet();
    }
    // MOV DH,0x1 (1000_6E9B / 0x16E9B)
    DH = 0x1;
    // TEST byte ptr [SI + 0x12],0x80 (1000_6E9D / 0x16E9D)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x12)], 0x80);
    // JZ 0x1000:6ea5 (1000_6EA1 / 0x16EA1)
    if(ZeroFlag) {
      goto label_1000_6EA5_16EA5;
    }
    // SHL DH,1 (1000_6EA3 / 0x16EA3)
    // DH <<= 1;
    DH = Alu.Shl8(DH, 1);
    label_1000_6EA5_16EA5:
    // OR DL,DH (1000_6EA5 / 0x16EA5)
    // DL |= DH;
    DL = Alu.Or8(DL, DH);
    label_1000_6EA7_16EA7:
    // RET  (1000_6EA7 / 0x16EA7)
    return NearRet();
  }
  
  public Action unknown_1000_6EA8_16EA8(int gotoTarget) {
    label_1000_6EA8_16EA8:
    // CMP byte ptr [SI + 0x15],0x28 (1000_6EA8 / 0x16EA8)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x15)], 0x28);
    // JNC 0x1000:6ebe (1000_6EAC / 0x16EAC)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6EBE / 0x16EBE)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_6EAE / 0x16EAE)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0x2f (1000_6EB1 / 0x16EB1)
    // AL &= 0x2F;
    AL = Alu.And8(AL, 0x2F);
    // AND AL,0xfb (1000_6EB3 / 0x16EB3)
    // AL &= 0xFB;
    AL = Alu.And8(AL, 0xFB);
    // JNZ 0x1000:6ebe (1000_6EB5 / 0x16EB5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_6EBE / 0x16EBE)
      return NearRet();
    }
    // CALL 0x1000:7085 (1000_6EB7 / 0x16EB7)
    NearCall(cs1, 0x6EBA, unknown_1000_7085_17085);
    // OR byte ptr [SI + 0x12],0x10 (1000_6EBA / 0x16EBA)
    // UInt8[DS, (ushort)(SI + 0x12)] |= 0x10;
    UInt8[DS, (ushort)(SI + 0x12)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x12)], 0x10);
    label_1000_6EBE_16EBE:
    // RET  (1000_6EBE / 0x16EBE)
    return NearRet();
  }
  
  public Action unknown_1000_6EBF_16EBF(int gotoTarget) {
    label_1000_6EBF_16EBF:
    // PUSH DI (1000_6EBF / 0x16EBF)
    Stack.Push(DI);
    // MOV DI,word ptr [SI + 0x4] (1000_6EC0 / 0x16EC0)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV BP,0x6ecb (1000_6EC3 / 0x16EC3)
    BP = 0x6ECB;
    // CALL 0x1000:661d (1000_6EC6 / 0x16EC6)
    NearCall(cs1, 0x6EC9, unknown_1000_661D_1661D);
    // POP DI (1000_6EC9 / 0x16EC9)
    DI = Stack.Pop();
    // RET  (1000_6ECA / 0x16ECA)
    return NearRet();
  }
  
  public Action unknown_1000_6ECB_16ECB(int gotoTarget) {
    label_1000_6ECB_16ECB:
    // TEST byte ptr [SI + 0x12],0x10 (1000_6ECB / 0x16ECB)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x12)], 0x10);
    // JZ 0x1000:6eda (1000_6ECF / 0x16ECF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6EDA / 0x16EDA)
      return NearRet();
    }
    // MOV CL,byte ptr [SI + 0x3] (1000_6ED1 / 0x16ED1)
    CL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND CL,0xf (1000_6ED4 / 0x16ED4)
    // CL &= 0xF;
    CL = Alu.And8(CL, 0xF);
    // JMP 0x1000:6ad4 (1000_6ED7 / 0x16ED7)
    // Jump converted to entry function call
    return unknown_1000_6AD4_16AD4(0);
    label_1000_6EDA_16EDA:
    // RET  (1000_6EDA / 0x16EDA)
    return NearRet();
  }
  
  public Action unknown_1000_6EDD_16EDD(int gotoTarget) {
    label_1000_6EDD_16EDD:
    // MOV DL,byte ptr [BX + SI + 0x16] (1000_6EDD / 0x16EDD)
    DL = UInt8[DS, (ushort)(BX + SI + 0x16)];
    // ADD AL,DL (1000_6EE0 / 0x16EE0)
    // AL += DL;
    AL = Alu.Add8(AL, DL);
    // CMP AL,0x5f (1000_6EE2 / 0x16EE2)
    Alu.Sub8(AL, 0x5F);
    // JBE 0x1000:6ee8 (1000_6EE4 / 0x16EE4)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_6EE8_16EE8;
    }
    // MOV AL,0x5f (1000_6EE6 / 0x16EE6)
    AL = 0x5F;
    label_1000_6EE8_16EE8:
    // MOV byte ptr [BX + SI + 0x16],AL (1000_6EE8 / 0x16EE8)
    UInt8[DS, (ushort)(BX + SI + 0x16)] = AL;
    // XOR AL,DL (1000_6EEB / 0x16EEB)
    // AL ^= DL;
    AL = Alu.Xor8(AL, DL);
    // AND AL,0xf0 (1000_6EED / 0x16EED)
    // AL &= 0xF0;
    AL = Alu.And8(AL, 0xF0);
    // JZ 0x1000:6efc (1000_6EEF / 0x16EEF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_6EFC / 0x16EFC)
      return NearRet();
    }
    // MOV AX,word ptr [SI + 0x10] (1000_6EF1 / 0x16EF1)
    AX = UInt16[DS, (ushort)(SI + 0x10)];
    // AND AL,0xfc (1000_6EF4 / 0x16EF4)
    // AL &= 0xFC;
    AL = Alu.And8(AL, 0xFC);
    // INC BX (1000_6EF6 / 0x16EF6)
    BX = Alu.Inc16(BX);
    // OR AL,BL (1000_6EF7 / 0x16EF7)
    // AL |= BL;
    AL = Alu.Or8(AL, BL);
    // MOV word ptr [SI + 0x10],AX (1000_6EF9 / 0x16EF9)
    UInt16[DS, (ushort)(SI + 0x10)] = AX;
    label_1000_6EFC_16EFC:
    // RET  (1000_6EFC / 0x16EFC)
    return NearRet();
  }
  
  public Action unknown_1000_6EFD_16EFD(int gotoTarget) {
    label_1000_6EFD_16EFD:
    // MOV AH,byte ptr [SI + 0x3] (1000_6EFD / 0x16EFD)
    AH = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AH,0xf (1000_6F00 / 0x16F00)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // MOV AL,byte ptr [SI + 0x15] (1000_6F03 / 0x16F03)
    AL = UInt8[DS, (ushort)(SI + 0x15)];
    // CMP byte ptr [0xfa],0x0 (1000_6F06 / 0x16F06)
    Alu.Sub8(UInt8[DS, 0xFA], 0x0);
    // JZ 0x1000:6f0f (1000_6F0B / 0x16F0B)
    if(ZeroFlag) {
      goto label_1000_6F0F_16F0F;
    }
    // ADD AL,0x14 (1000_6F0D / 0x16F0D)
    // AL += 0x14;
    AL = Alu.Add8(AL, 0x14);
    label_1000_6F0F_16F0F:
    // CMP AH,0x6 (1000_6F0F / 0x16F0F)
    Alu.Sub8(AH, 0x6);
    // JNZ 0x1000:6f23 (1000_6F12 / 0x16F12)
    if(!ZeroFlag) {
      goto label_1000_6F23_16F23;
    }
    // PUSH DI (1000_6F14 / 0x16F14)
    Stack.Push(DI);
    // MOV DI,word ptr [SI + 0x4] (1000_6F15 / 0x16F15)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP DI,word ptr [0x114e] (1000_6F18 / 0x16F18)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // POP DI (1000_6F1C / 0x16F1C)
    DI = Stack.Pop();
    // JNZ 0x1000:6f31 (1000_6F1D / 0x16F1D)
    if(!ZeroFlag) {
      goto label_1000_6F31_16F31;
    }
    // ADD AL,0x1e (1000_6F1F / 0x16F1F)
    // AL += 0x1E;
    AL = Alu.Add8(AL, 0x1E);
    // JMP 0x1000:6f2b (1000_6F21 / 0x16F21)
    goto label_1000_6F2B_16F2B;
    label_1000_6F23_16F23:
    // AND AH,0xfe (1000_6F23 / 0x16F23)
    // AH &= 0xFE;
    AH = Alu.And8(AH, 0xFE);
    // CMP AH,0x8 (1000_6F26 / 0x16F26)
    Alu.Sub8(AH, 0x8);
    // JZ 0x1000:6f2f (1000_6F29 / 0x16F29)
    if(ZeroFlag) {
      goto label_1000_6F2F_16F2F;
    }
    label_1000_6F2B_16F2B:
    // CMP AL,0x64 (1000_6F2B / 0x16F2B)
    Alu.Sub8(AL, 0x64);
    // JC 0x1000:6f31 (1000_6F2D / 0x16F2D)
    if(CarryFlag) {
      goto label_1000_6F31_16F31;
    }
    label_1000_6F2F_16F2F:
    // MOV AL,0x64 (1000_6F2F / 0x16F2F)
    AL = 0x64;
    label_1000_6F31_16F31:
    // CMP byte ptr [0x2a],0x64 (1000_6F31 / 0x16F31)
    Alu.Sub8(UInt8[DS, 0x2A], 0x64);
    // JC 0x1000:6f47 (1000_6F36 / 0x16F36)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_6F47 / 0x16F47)
      return NearRet();
    }
    // CMP byte ptr [0x2a],0x68 (1000_6F38 / 0x16F38)
    Alu.Sub8(UInt8[DS, 0x2A], 0x68);
    // JNC 0x1000:6f47 (1000_6F3D / 0x16F3D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6F47 / 0x16F47)
      return NearRet();
    }
    // SUB AL,0x28 (1000_6F3F / 0x16F3F)
    // AL -= 0x28;
    AL = Alu.Sub8(AL, 0x28);
    // CMP AL,0xa (1000_6F41 / 0x16F41)
    Alu.Sub8(AL, 0xA);
    // JGE 0x1000:6f47 (1000_6F43 / 0x16F43)
    if(SignFlag == OverflowFlag) {
      // JGE target is RET, inlining.
      // RET  (1000_6F47 / 0x16F47)
      return NearRet();
    }
    // MOV AL,0xa (1000_6F45 / 0x16F45)
    AL = 0xA;
    label_1000_6F47_16F47:
    // RET  (1000_6F47 / 0x16F47)
    return NearRet();
  }
  
  public Action unknown_1000_6F78_16F78(int gotoTarget) {
    switch(gotoTarget) {
      case 0x6F56: break;
      case 0: goto entry; break; //
    }
    label_1000_6F56_16F56:
    // PUSH SI (1000_6F56 / 0x16F56)
    Stack.Push(SI);
    // MOV SI,0x8aa (1000_6F57 / 0x16F57)
    SI = 0x8AA;
    label_1000_6F5A_16F5A:
    // TEST byte ptr [SI + 0x3],0xa0 (1000_6F5A / 0x16F5A)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0xA0);
    // JNZ 0x1000:6f6d (1000_6F5E / 0x16F5E)
    if(!ZeroFlag) {
      goto label_1000_6F6D_16F6D;
    }
    // ADD byte ptr [SI + 0x15],AL (1000_6F60 / 0x16F60)
    // UInt8[DS, (ushort)(SI + 0x15)] += AL;
    UInt8[DS, (ushort)(SI + 0x15)] = Alu.Add8(UInt8[DS, (ushort)(SI + 0x15)], AL);
    // CMP byte ptr [SI + 0x15],0x64 (1000_6F63 / 0x16F63)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x15)], 0x64);
    // JBE 0x1000:6f6d (1000_6F67 / 0x16F67)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_6F6D_16F6D;
    }
    // MOV byte ptr [SI + 0x15],0x64 (1000_6F69 / 0x16F69)
    UInt8[DS, (ushort)(SI + 0x15)] = 0x64;
    label_1000_6F6D_16F6D:
    // ADD SI,0x1b (1000_6F6D / 0x16F6D)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfbb (1000_6F70 / 0x16F70)
    Alu.Sub16(SI, 0xFBB);
    // JC 0x1000:6f5a (1000_6F74 / 0x16F74)
    if(CarryFlag) {
      goto label_1000_6F5A_16F5A;
    }
    // POP SI (1000_6F76 / 0x16F76)
    SI = Stack.Pop();
    // RET  (1000_6F77 / 0x16F77)
    return NearRet();
    entry:
    label_1000_6F78_16F78:
    // MOV AH,byte ptr [0x29] (1000_6F78 / 0x16F78)
    AH = UInt8[DS, 0x29];
    // ADD AL,AH (1000_6F7C / 0x16F7C)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // CMP AL,0xc8 (1000_6F7E / 0x16F7E)
    Alu.Sub8(AL, 0xC8);
    // JBE 0x1000:6f84 (1000_6F80 / 0x16F80)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_6F84_16F84;
    }
    // MOV AL,0xc8 (1000_6F82 / 0x16F82)
    AL = 0xC8;
    label_1000_6F84_16F84:
    // MOV [0x29],AL (1000_6F84 / 0x16F84)
    UInt8[DS, 0x29] = AL;
    // AND AX,0xfcfc (1000_6F87 / 0x16F87)
    // AX &= 0xFCFC;
    AX = Alu.And16(AX, 0xFCFC);
    // SUB AL,AH (1000_6F8A / 0x16F8A)
    // AL -= AH;
    AL = Alu.Sub8(AL, AH);
    // SHR AL,1 (1000_6F8C / 0x16F8C)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_6F8E / 0x16F8E)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNZ 0x1000:6f56 (1000_6F90 / 0x16F90)
    if(!ZeroFlag) {
      goto label_1000_6F56_16F56;
    }
    // RET  (1000_6F92 / 0x16F92)
    return NearRet();
  }
  
  public Action unknown_1000_6F93_16F93(int gotoTarget) {
    label_1000_6F93_16F93:
    // SUB byte ptr [SI + 0x15],AL (1000_6F93 / 0x16F93)
    // UInt8[DS, (ushort)(SI + 0x15)] -= AL;
    UInt8[DS, (ushort)(SI + 0x15)] = Alu.Sub8(UInt8[DS, (ushort)(SI + 0x15)], AL);
    // JNC 0x1000:6f9c (1000_6F96 / 0x16F96)
    if(!CarryFlag) {
      goto label_1000_6F9C_16F9C;
    }
    // MOV byte ptr [SI + 0x15],0x0 (1000_6F98 / 0x16F98)
    UInt8[DS, (ushort)(SI + 0x15)] = 0x0;
    label_1000_6F9C_16F9C:
    // CMP byte ptr [SI + 0x15],0x5 (1000_6F9C / 0x16F9C)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x15)], 0x5);
    // JNC 0x1000:6faf (1000_6FA0 / 0x16FA0)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_6FAF / 0x16FAF)
      return NearRet();
    }
    // MOV byte ptr [SI + 0x15],0x4 (1000_6FA2 / 0x16FA2)
    UInt8[DS, (ushort)(SI + 0x15)] = 0x4;
    // PUSH AX (1000_6FA6 / 0x16FA6)
    Stack.Push(AX);
    // CALL 0x1000:7085 (1000_6FA7 / 0x16FA7)
    NearCall(cs1, 0x6FAA, unknown_1000_7085_17085);
    // OR word ptr [SI + 0x12],0x20 (1000_6FAA / 0x16FAA)
    // UInt16[DS, (ushort)(SI + 0x12)] |= 0x20;
    UInt16[DS, (ushort)(SI + 0x12)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x12)], 0x20);
    // POP AX (1000_6FAE / 0x16FAE)
    AX = Stack.Pop();
    label_1000_6FAF_16FAF:
    // RET  (1000_6FAF / 0x16FAF)
    return NearRet();
  }
  
  public Action unknown_1000_6FE5_16FE5(int gotoTarget) {
    label_1000_6FE5_16FE5:
    // CALL 0x1000:6e20 (1000_6FE5 / 0x16FE5)
    NearCall(cs1, 0x6FE8, unknown_1000_6E20_16E20);
    // TEST word ptr [SI + 0x10],0x200 (1000_6FE8 / 0x16FE8)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x200);
    // JNZ 0x1000:705c (1000_6FED / 0x16FED)
    if(!ZeroFlag) {
      goto label_1000_705C_1705C;
    }
    // CALL 0x1000:6b96 (1000_6FEF / 0x16FEF)
    NearCall(cs1, 0x6FF2, unknown_1000_6B96_16B96);
    // JNC 0x1000:6ff7 (1000_6FF2 / 0x16FF2)
    if(!CarryFlag) {
      goto label_1000_6FF7_16FF7;
    }
    // JMP 0x1000:707b (1000_6FF4 / 0x16FF4)
    goto label_1000_707B_1707B;
    label_1000_6FF7_16FF7:
    // CALL 0x1000:714c (1000_6FF7 / 0x16FF7)
    NearCall(cs1, 0x6FFA, unknown_1000_714C_1714C);
    label_1000_6FFA_16FFA:
    // OR word ptr [SI + 0x10],0x100 (1000_6FFA / 0x16FFA)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x100;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x100);
    // CALL 0x1000:708a (1000_6FFF / 0x16FFF)
    NearCall(cs1, 0x7002, unknown_1000_708A_1708A);
    // PUSH AX (1000_7002 / 0x17002)
    Stack.Push(AX);
    // MOV DX,word ptr [SI + 0xe] (1000_7003 / 0x17003)
    DX = UInt16[DS, (ushort)(SI + 0xE)];
    // ADD AX,DX (1000_7006 / 0x17006)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // MOV word ptr [SI + 0xe],AX (1000_7008 / 0x17008)
    UInt16[DS, (ushort)(SI + 0xE)] = AX;
    // XOR AX,DX (1000_700B / 0x1700B)
    // AX ^= DX;
    AX = Alu.Xor16(AX, DX);
    // AND AX,0xff80 (1000_700D / 0x1700D)
    // AX &= 0xFF80;
    AX = Alu.And16(AX, 0xFF80);
    // JZ 0x1000:7019 (1000_7010 / 0x17010)
    if(ZeroFlag) {
      goto label_1000_7019_17019;
    }
    // MOV AL,0x1 (1000_7012 / 0x17012)
    AL = 0x1;
    // XOR BX,BX (1000_7014 / 0x17014)
    BX = 0;
    // CALL 0x1000:6edd (1000_7016 / 0x17016)
    NearCall(cs1, 0x7019, unknown_1000_6EDD_16EDD);
    label_1000_7019_17019:
    // POP AX (1000_7019 / 0x17019)
    AX = Stack.Pop();
    // PUSH AX (1000_701A / 0x1701A)
    Stack.Push(AX);
    // ADD AX,word ptr [0x46e1] (1000_701B / 0x1701B)
    // AX += UInt16[DS, 0x46E1];
    AX = Alu.Add16(AX, UInt16[DS, 0x46E1]);
    // XOR DX,DX (1000_701F / 0x1701F)
    DX = 0;
    // MOV CX,0xa (1000_7021 / 0x17021)
    CX = 0xA;
    // DIV CX (1000_7024 / 0x17024)
    Cpu.Div16(CX);
    // MOV word ptr [0x46e1],DX (1000_7026 / 0x17026)
    UInt16[DS, 0x46E1] = DX;
    // ADD word ptr [0xa0],AX (1000_702A / 0x1702A)
    // UInt16[DS, 0xA0] += AX;
    UInt16[DS, 0xA0] = Alu.Add16(UInt16[DS, 0xA0], AX);
    // POP AX (1000_702E / 0x1702E)
    AX = Stack.Pop();
    // ADD AL,byte ptr [DI + 0x13] (1000_702F / 0x1702F)
    // AL += UInt8[DS, (ushort)(DI + 0x13)];
    AL = Alu.Add8(AL, UInt8[DS, (ushort)(DI + 0x13)]);
    // ADC AH,0x0 (1000_7032 / 0x17032)
    AH = Alu.Adc8(AH, 0x0);
    // MOV CL,byte ptr [DI + 0x11] (1000_7035 / 0x17035)
    CL = UInt8[DS, (ushort)(DI + 0x11)];
    // DIV CL (1000_7038 / 0x17038)
    Cpu.Div8(CL);
    // MOV byte ptr [DI + 0x13],AH (1000_703A / 0x1703A)
    UInt8[DS, (ushort)(DI + 0x13)] = AH;
    // MOV AH,byte ptr [DI + 0x12] (1000_703D / 0x1703D)
    AH = UInt8[DS, (ushort)(DI + 0x12)];
    // AND AH,0xf (1000_7040 / 0x17040)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // CMP AL,AH (1000_7043 / 0x17043)
    Alu.Sub8(AL, AH);
    // JBE 0x1000:7052 (1000_7045 / 0x17045)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_7052_17052;
    }
    // TEST byte ptr [0x46eb],0x40 (1000_7047 / 0x17047)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:7052 (1000_704C / 0x1704C)
    if(ZeroFlag) {
      goto label_1000_7052_17052;
    }
    // INC byte ptr [0x46ec] (1000_704E / 0x1704E)
    UInt8[DS, 0x46EC] = Alu.Inc8(UInt8[DS, 0x46EC]);
    label_1000_7052_17052:
    // SUB byte ptr [DI + 0x12],AL (1000_7052 / 0x17052)
    // UInt8[DS, (ushort)(DI + 0x12)] -= AL;
    UInt8[DS, (ushort)(DI + 0x12)] = Alu.Sub8(UInt8[DS, (ushort)(DI + 0x12)], AL);
    // JNC 0x1000:705b (1000_7055 / 0x17055)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_705B / 0x1705B)
      return NearRet();
    }
    // MOV byte ptr [DI + 0x12],0x0 (1000_7057 / 0x17057)
    UInt8[DS, (ushort)(DI + 0x12)] = 0x0;
    label_1000_705B_1705B:
    // RET  (1000_705B / 0x1705B)
    return NearRet();
    label_1000_705C_1705C:
    // MOV AX,[0x2] (1000_705C / 0x1705C)
    AX = UInt16[DS, 0x2];
    // MOV AH,byte ptr [SI] (1000_705F / 0x1705F)
    AH = UInt8[DS, SI];
    // AND AX,0xf0f (1000_7061 / 0x17061)
    // AX &= 0xF0F;
    AX = Alu.And16(AX, 0xF0F);
    // CMP AL,AH (1000_7064 / 0x17064)
    Alu.Sub8(AL, AH);
    // JNZ 0x1000:7074 (1000_7066 / 0x17066)
    if(!ZeroFlag) {
      goto label_1000_7074_17074;
    }
    // AND word ptr [SI + 0x10],0xfdff (1000_7068 / 0x17068)
    // UInt16[DS, (ushort)(SI + 0x10)] &= 0xFDFF;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0xFDFF);
    // CALL 0x1000:6b96 (1000_706D / 0x1706D)
    NearCall(cs1, 0x7070, unknown_1000_6B96_16B96);
    // JC 0x1000:705b (1000_7070 / 0x17070)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_705B / 0x1705B)
      return NearRet();
    }
    // JMP 0x1000:6ffa (1000_7072 / 0x17072)
    goto label_1000_6FFA_16FFA;
    label_1000_7074_17074:
    // MOV word ptr [SI + 0xc],0x0 (1000_7074 / 0x17074)
    UInt16[DS, (ushort)(SI + 0xC)] = 0x0;
    // JMP 0x1000:7085 (1000_7079 / 0x17079)
    // Jump converted to entry function call
    return unknown_1000_7085_17085(0);
    label_1000_707B_1707B:
    // MOV word ptr [SI + 0xc],0x0 (1000_707B / 0x1707B)
    UInt16[DS, (ushort)(SI + 0xC)] = 0x0;
    // MOV word ptr [SI + 0xe],0x0 (1000_7080 / 0x17080)
    UInt16[DS, (ushort)(SI + 0xE)] = 0x0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7085_17085(0);
  }
  
  public Action unknown_1000_7085_17085(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7085: goto label_1000_7085_17085;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7085_17085:
    // OR byte ptr [SI + 0x3],0x10 (1000_7085 / 0x17085)
    // UInt8[DS, (ushort)(SI + 0x3)] |= 0x10;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x3)], 0x10);
    // RET  (1000_7089 / 0x17089)
    return NearRet();
  }
  
  public Action unknown_1000_708A_1708A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x708A: goto label_1000_708A_1708A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_708A_1708A:
    // CALL 0x1000:6efd (1000_708A / 0x1708A)
    NearCall(cs1, 0x708D, unknown_1000_6EFD_16EFD);
    // MOV AH,byte ptr [SI + 0x16] (1000_708D / 0x1708D)
    AH = UInt8[DS, (ushort)(SI + 0x16)];
    // AND AH,0xf0 (1000_7090 / 0x17090)
    // AH &= 0xF0;
    AH = Alu.And8(AH, 0xF0);
    // ADD AL,AH (1000_7093 / 0x17093)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // MUL byte ptr [SI + 0x1a] (1000_7095 / 0x17095)
    Cpu.Mul8(UInt8[DS, (ushort)(SI + 0x1A)]);
    // TEST byte ptr [SI + 0x19],0x80 (1000_7098 / 0x17098)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x80);
    // JNZ 0x1000:70a2 (1000_709C / 0x1709C)
    if(!ZeroFlag) {
      goto label_1000_70A2_170A2;
    }
    // SHR AX,1 (1000_709E / 0x1709E)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_70A0 / 0x170A0)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    label_1000_70A2_170A2:
    // MOV AL,byte ptr [DI + 0x12] (1000_70A2 / 0x170A2)
    AL = UInt8[DS, (ushort)(DI + 0x12)];
    // AND AL,0xf0 (1000_70A5 / 0x170A5)
    // AL &= 0xF0;
    AL = Alu.And8(AL, 0xF0);
    // INC AX (1000_70A7 / 0x170A7)
    AX = Alu.Inc16(AX);
    // MUL AH (1000_70A8 / 0x170A8)
    Cpu.Mul8(AH);
    // XCHG AH,AL (1000_70AA / 0x170AA)
    byte tmp_1000_70AA = AH;
    AH = AL;
    AL = tmp_1000_70AA;
    // ROL AX,1 (1000_70AC / 0x170AC)
    AX = Alu.Rol16(AX, 1);
    // AND AH,0x1 (1000_70AE / 0x170AE)
    // AH &= 0x1;
    AH = Alu.And8(AH, 0x1);
    // MOV DX,AX (1000_70B1 / 0x170B1)
    DX = AX;
    // XCHG word ptr [SI + 0xc],DX (1000_70B3 / 0x170B3)
    ushort tmp_1000_70B3 = UInt16[DS, (ushort)(SI + 0xC)];
    UInt16[DS, (ushort)(SI + 0xC)] = DX;
    DX = tmp_1000_70B3;
    // SUB DX,AX (1000_70B6 / 0x170B6)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // JZ 0x1000:70cb (1000_70B8 / 0x170B8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_70CB / 0x170CB)
      return NearRet();
    }
    // MOV BL,0x8 (1000_70BA / 0x170BA)
    BL = 0x8;
    // JC 0x1000:70c0 (1000_70BC / 0x170BC)
    if(CarryFlag) {
      goto label_1000_70C0_170C0;
    }
    // MOV BL,0x4 (1000_70BE / 0x170BE)
    BL = 0x4;
    label_1000_70C0_170C0:
    // MOV CX,word ptr [SI + 0x10] (1000_70C0 / 0x170C0)
    CX = UInt16[DS, (ushort)(SI + 0x10)];
    // AND CL,0xf3 (1000_70C3 / 0x170C3)
    // CL &= 0xF3;
    CL = Alu.And8(CL, 0xF3);
    // OR CL,BL (1000_70C6 / 0x170C6)
    // CL |= BL;
    CL = Alu.Or8(CL, BL);
    // MOV word ptr [SI + 0x10],CX (1000_70C8 / 0x170C8)
    UInt16[DS, (ushort)(SI + 0x10)] = CX;
    label_1000_70CB_170CB:
    // RET  (1000_70CB / 0x170CB)
    return NearRet();
  }
  
  public Action unknown_1000_70CC_170CC(int gotoTarget) {
    switch(gotoTarget) {
      case 0x71BB: goto label_1000_71BB_171BB;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_70CC_170CC:
    // MOV AL,byte ptr [DI + 0xa] (1000_70CC / 0x170CC)
    AL = UInt8[DS, (ushort)(DI + 0xA)];
    // TEST AL,0x2 (1000_70CF / 0x170CF)
    Alu.And8(AL, 0x2);
    // JNZ 0x1000:710f (1000_70D1 / 0x170D1)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_710F / 0x1710F)
      return NearRet();
    }
    // TEST AL,0x40 (1000_70D3 / 0x170D3)
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:7126 (1000_70D5 / 0x170D5)
    if(!ZeroFlag) {
      goto label_1000_7126_17126;
    }
    // CALL 0x1000:6b8a (1000_70D7 / 0x170D7)
    NearCall(cs1, 0x70DA, unknown_1000_6B8A_16B8A);
    // JC 0x1000:710f (1000_70DA / 0x170DA)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_710F / 0x1710F)
      return NearRet();
    }
    // MOV AX,word ptr [SI + 0xc] (1000_70DC / 0x170DC)
    AX = UInt16[DS, (ushort)(SI + 0xC)];
    // OR AX,AX (1000_70DF / 0x170DF)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNZ 0x1000:70f7 (1000_70E1 / 0x170E1)
    if(!ZeroFlag) {
      goto label_1000_70F7_170F7;
    }
    // MOV AL,byte ptr [DI + 0x11] (1000_70E3 / 0x170E3)
    AL = UInt8[DS, (ushort)(DI + 0x11)];
    // MOV CL,0x4 (1000_70E6 / 0x170E6)
    CL = 0x4;
    // SHL AX,CL (1000_70E8 / 0x170E8)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // MOV CL,byte ptr [SI + 0x15] (1000_70EA / 0x170EA)
    CL = UInt8[DS, (ushort)(SI + 0x15)];
    // ADD CL,byte ptr [SI + 0x16] (1000_70ED / 0x170ED)
    // CL += UInt8[DS, (ushort)(SI + 0x16)];
    CL = Alu.Add8(CL, UInt8[DS, (ushort)(SI + 0x16)]);
    // DIV CL (1000_70F0 / 0x170F0)
    Cpu.Div8(CL);
    // XOR AH,AH (1000_70F2 / 0x170F2)
    AH = 0;
    // MOV word ptr [SI + 0xc],AX (1000_70F4 / 0x170F4)
    UInt16[DS, (ushort)(SI + 0xC)] = AX;
    label_1000_70F7_170F7:
    // MOV CX,word ptr [0x2] (1000_70F7 / 0x170F7)
    CX = UInt16[DS, 0x2];
    // SUB CX,word ptr [SI + 0xa] (1000_70FB / 0x170FB)
    // CX -= UInt16[DS, (ushort)(SI + 0xA)];
    CX = Alu.Sub16(CX, UInt16[DS, (ushort)(SI + 0xA)]);
    // CMP AX,CX (1000_70FE / 0x170FE)
    Alu.Sub16(AX, CX);
    // JBE 0x1000:7110 (1000_7100 / 0x17100)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_7110_17110;
    }
    // JCXZ 0x1000:710f (1000_7102 / 0x17102)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_710F / 0x1710F)
      return NearRet();
    }
    // MOV DX,0x64 (1000_7104 / 0x17104)
    DX = 0x64;
    // XCHG AX,CX (1000_7107 / 0x17107)
    ushort tmp_1000_7107 = AX;
    AX = CX;
    CX = tmp_1000_7107;
    // MUL DX (1000_7108 / 0x17108)
    Cpu.Mul16(DX);
    // DIV CX (1000_710A / 0x1710A)
    Cpu.Div16(CX);
    // MOV word ptr [SI + 0xe],AX (1000_710C / 0x1710C)
    UInt16[DS, (ushort)(SI + 0xE)] = AX;
    label_1000_710F_1710F:
    // RET  (1000_710F / 0x1710F)
    return NearRet();
    label_1000_7110_17110:
    // XOR BX,BX (1000_7110 / 0x17110)
    BX = 0;
    // MOV AL,0x2 (1000_7112 / 0x17112)
    AL = 0x2;
    // CALL 0x1000:6edd (1000_7114 / 0x17114)
    NearCall(cs1, 0x7117, unknown_1000_6EDD_16EDD);
    // OR byte ptr [DI + 0xa],0x40 (1000_7117 / 0x17117)
    // UInt8[DS, (ushort)(DI + 0xA)] |= 0x40;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xA)], 0x40);
    // TEST byte ptr [0x46eb],0x40 (1000_711B / 0x1711B)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:7126 (1000_7120 / 0x17120)
    if(ZeroFlag) {
      goto label_1000_7126_17126;
    }
    // INC byte ptr [0x46ec] (1000_7122 / 0x17122)
    UInt8[DS, 0x46EC] = Alu.Inc8(UInt8[DS, 0x46EC]);
    label_1000_7126_17126:
    // MOV AL,byte ptr [SI + 0x3] (1000_7126 / 0x17126)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // PUSH AX (1000_7129 / 0x17129)
    Stack.Push(AX);
    // CALL 0x1000:6b8a (1000_712A / 0x1712A)
    NearCall(cs1, 0x712D, unknown_1000_6B8A_16B8A);
    // MOV word ptr [SI + 0xe],0x64 (1000_712D / 0x1712D)
    UInt16[DS, (ushort)(SI + 0xE)] = 0x64;
    // POP AX (1000_7132 / 0x17132)
    AX = Stack.Pop();
    // CMP SI,word ptr [0x46ef] (1000_7133 / 0x17133)
    Alu.Sub16(SI, UInt16[DS, 0x46EF]);
    // JZ 0x1000:710f (1000_7137 / 0x17137)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_710F / 0x1710F)
      return NearRet();
    }
    // CMP word ptr [0x11d3],0x0 (1000_7139 / 0x17139)
    Alu.Sub16(UInt16[DS, 0x11D3], 0x0);
    // JNZ 0x1000:7149 (1000_713E / 0x1713E)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:84a6 (1000_7149 / 0x17149)
      // Jump converted to entry function call
      return unknown_1000_84A6_184A6(0);
    }
    // TEST AL,0x10 (1000_7140 / 0x17140)
    Alu.And8(AL, 0x10);
    // JNZ 0x1000:710f (1000_7142 / 0x17142)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_710F / 0x1710F)
      return NearRet();
    }
    // MOV AL,0xe (1000_7144 / 0x17144)
    AL = 0xE;
    // JMP 0x1000:71b2 (1000_7146 / 0x17146)
    goto label_1000_71B2_171B2;
    label_1000_7149_17149:
    // JMP 0x1000:84a6 (1000_7149 / 0x17149)
    // Jump converted to entry function call
    return unknown_1000_84A6_184A6(0);
    label_1000_71B2_171B2:
    // MOV AH,0xf (1000_71B2 / 0x171B2)
    AH = 0xF;
    // PUSH SI (1000_71B4 / 0x171B4)
    Stack.Push(SI);
    // PUSH DI (1000_71B5 / 0x171B5)
    Stack.Push(DI);
    // CALL 0x1000:29f0 (1000_71B6 / 0x171B6)
    NearCall(cs1, 0x71B9, unknown_1000_29F0_129F0);
    // POP DI (1000_71B9 / 0x171B9)
    DI = Stack.Pop();
    // POP SI (1000_71BA / 0x171BA)
    SI = Stack.Pop();
    label_1000_71BB_171BB:
    // RET  (1000_71BB / 0x171BB)
    return NearRet();
  }
  
  public Action unknown_1000_714C_1714C(int gotoTarget) {
    label_1000_714C_1714C:
    // TEST byte ptr [0xa],0x1 (1000_714C / 0x1714C)
    Alu.And8(UInt8[DS, 0xA], 0x1);
    // JZ 0x1000:71bb (1000_7151 / 0x17151)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x19],0x80 (1000_7153 / 0x17153)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x80);
    // JZ 0x1000:71bb (1000_7157 / 0x17157)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // MOV AX,[0x2] (1000_7159 / 0x17159)
    AX = UInt16[DS, 0x2];
    // MOV AH,byte ptr [SI] (1000_715C / 0x1715C)
    AH = UInt8[DS, SI];
    // AND AX,0xf0f (1000_715E / 0x1715E)
    // AX &= 0xF0F;
    AX = Alu.And16(AX, 0xF0F);
    // CMP AL,AH (1000_7161 / 0x17161)
    Alu.Sub8(AL, AH);
    // JNZ 0x1000:71bb (1000_7163 / 0x17163)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // CALL 0x1000:71bc (1000_7165 / 0x17165)
    NearCall(cs1, 0x7168, unknown_1000_71BC_171BC);
    // CALL 0x1000:e3cc (1000_7168 / 0x17168)
    NearCall(cs1, 0x716B, unknown_1000_E3CC_1E3CC);
    // MOV AL,byte ptr [DI] (1000_716B / 0x1716B)
    AL = UInt8[DS, DI];
    // MOV BX,0x1141 (1000_716D / 0x1716D)
    BX = 0x1141;
    // XLAT BX (1000_7170 / 0x17170)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CMP AL,AH (1000_7171 / 0x17171)
    Alu.Sub8(AL, AH);
    // JC 0x1000:71bb (1000_7173 / 0x17173)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // OR word ptr [SI + 0x10],0x4000 (1000_7175 / 0x17175)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x4000;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x4000);
    // TEST byte ptr [SI + 0x19],0x40 (1000_717A / 0x1717A)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x40);
    // JNZ 0x1000:71bb (1000_717E / 0x1717E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // AND AH,0x3 (1000_7180 / 0x17180)
    // AH &= 0x3;
    AH = Alu.And8(AH, 0x3);
    // JZ 0x1000:71bb (1000_7183 / 0x17183)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // CMP AH,0x2 (1000_7185 / 0x17185)
    Alu.Sub8(AH, 0x2);
    // JA 0x1000:71a4 (1000_7188 / 0x17188)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_71A4_171A4;
    }
    // JZ 0x1000:719c (1000_718A / 0x1718A)
    if(ZeroFlag) {
      goto label_1000_719C_1719C;
    }
    // OR word ptr [SI + 0x10],0x2000 (1000_718C / 0x1718C)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x2000;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x2000);
    // SUB byte ptr [SI + 0x1a],0x2 (1000_7191 / 0x17191)
    // UInt8[DS, (ushort)(SI + 0x1A)] -= 0x2;
    UInt8[DS, (ushort)(SI + 0x1A)] = Alu.Sub8(UInt8[DS, (ushort)(SI + 0x1A)], 0x2);
    // JA 0x1000:71bb (1000_7195 / 0x17195)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_71BB / 0x171BB)
      return NearRet();
    }
    // ADD byte ptr [SI + 0x1a],0x2 (1000_7197 / 0x17197)
    // UInt8[DS, (ushort)(SI + 0x1A)] += 0x2;
    UInt8[DS, (ushort)(SI + 0x1A)] = Alu.Add8(UInt8[DS, (ushort)(SI + 0x1A)], 0x2);
    // RET  (1000_719B / 0x1719B)
    return NearRet();
    label_1000_719C_1719C:
    // OR word ptr [SI + 0x10],0x200 (1000_719C / 0x1719C)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x200;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x200);
    // JMP 0x1000:7085 (1000_71A1 / 0x171A1)
    // Jump converted to entry function call
    return unknown_1000_7085_17085(0);
    label_1000_71A4_171A4:
    // OR word ptr [SI + 0x10],0x1000 (1000_71A4 / 0x171A4)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x1000;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x1000);
    // AND byte ptr [SI + 0x19],0x7f (1000_71A9 / 0x171A9)
    // UInt8[DS, (ushort)(SI + 0x19)] &= 0x7F;
    UInt8[DS, (ushort)(SI + 0x19)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x7F);
    // DEC byte ptr [DI + 0x14] (1000_71AD / 0x171AD)
    UInt8[DS, (ushort)(DI + 0x14)] = Alu.Dec8(UInt8[DS, (ushort)(DI + 0x14)]);
    // MOV AL,0x6 (1000_71B0 / 0x171B0)
    AL = 0x6;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_70CC_170CC(0x171B2 - cs1 * 0x10);
  }
  
  public Action unknown_1000_71BC_171BC(int gotoTarget) {
    label_1000_71BC_171BC:
    // CMP byte ptr [0x2a],0x35 (1000_71BC / 0x171BC)
    Alu.Sub8(UInt8[DS, 0x2A], 0x35);
    // JC 0x1000:71ee (1000_71C1 / 0x171C1)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_71EE / 0x171EE)
      return NearRet();
    }
    // TEST word ptr [SI + 0x12],0x40 (1000_71C3 / 0x171C3)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x40);
    // JZ 0x1000:71ee (1000_71C8 / 0x171C8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_71EE / 0x171EE)
      return NearRet();
    }
    // ROL word ptr [0x0],1 (1000_71CA / 0x171CA)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // ROL word ptr [0x0],1 (1000_71CE / 0x171CE)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // ROL word ptr [0x0],1 (1000_71D2 / 0x171D2)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // TEST word ptr [0x0],0x7 (1000_71D6 / 0x171D6)
    Alu.And16(UInt16[DS, 0x0], 0x7);
    // JNZ 0x1000:71ee (1000_71DC / 0x171DC)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_71EE / 0x171EE)
      return NearRet();
    }
    // CALL 0x1000:719c (1000_71DE / 0x171DE)
    throw FailAsUntested("Could not find a valid function at address 1000_719C / 0x1719C");
    // OR word ptr [SI + 0x10],0x8000 (1000_71E1 / 0x171E1)
    // UInt16[DS, (ushort)(SI + 0x10)] |= 0x8000;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.Or16(UInt16[DS, (ushort)(SI + 0x10)], 0x8000);
    // OR byte ptr [DI + 0xa],0x4 (1000_71E6 / 0x171E6)
    // UInt8[DS, (ushort)(DI + 0xA)] |= 0x4;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xA)], 0x4);
    // MOV AL,0x3 (1000_71EA / 0x171EA)
    AL = 0x3;
    // JMP 0x1000:71b2 (1000_71EC / 0x171EC)
    // Jump converted to non entry function call
    return unknown_1000_70CC_170CC(0x171B2 - cs1 * 0x10);
    label_1000_71EE_171EE:
    // RET  (1000_71EE / 0x171EE)
    return NearRet();
  }
  
  public Action map_func_ida_1000_739E_1739E(int gotoTarget) {
    label_1000_739E_1739E:
    // OR byte ptr [0x11bc],0x1 (1000_739E / 0x1739E)
    // UInt8[DS, 0x11BC] |= 0x1;
    UInt8[DS, 0x11BC] = Alu.Or8(UInt8[DS, 0x11BC], 0x1);
    // CMP DI,0x11c (1000_73A3 / 0x173A3)
    Alu.Sub16(DI, 0x11C);
    // JNZ 0x1000:73d9 (1000_73A7 / 0x173A7)
    if(!ZeroFlag) {
      goto label_1000_73D9_173D9;
    }
    // INC byte ptr [0xc2] (1000_73A9 / 0x173A9)
    UInt8[DS, 0xC2] = Alu.Inc8(UInt8[DS, 0xC2]);
    // MOV BP,0x7399 (1000_73AD / 0x173AD)
    BP = 0x7399;
    // CALL 0x1000:661d (1000_73B0 / 0x173B0)
    NearCall(cs1, 0x73B3, unknown_1000_661D_1661D);
    // CALL 0x1000:6e02 (1000_73B3 / 0x173B3)
    throw FailAsUntested("Could not find a valid function at address 1000_6E02 / 0x16E02");
    // LES DI,[0xdcfe] (1000_73B6 / 0x173B6)
    DI = UInt16[DS, 0xDCFE];
    ES = UInt16[DS, 0xDD00];
    // XOR DI,DI (1000_73BA / 0x173BA)
    DI = 0;
    // MOV CX,0xc5f9 (1000_73BC / 0x173BC)
    CX = 0xC5F9;
    label_1000_73BF_173BF:
    // MOV AL,byte ptr ES:[DI] (1000_73BF / 0x173BF)
    AL = UInt8[ES, DI];
    // MOV AH,AL (1000_73C2 / 0x173C2)
    AH = AL;
    // AND AH,0x30 (1000_73C4 / 0x173C4)
    // AH &= 0x30;
    AH = Alu.And8(AH, 0x30);
    // CMP AH,0x30 (1000_73C7 / 0x173C7)
    Alu.Sub8(AH, 0x30);
    // JNZ 0x1000:73ce (1000_73CA / 0x173CA)
    if(!ZeroFlag) {
      goto label_1000_73CE_173CE;
    }
    // AND AL,0xef (1000_73CC / 0x173CC)
    // AL &= 0xEF;
    AL = Alu.And8(AL, 0xEF);
    label_1000_73CE_173CE:
    // STOSB ES:DI (1000_73CE / 0x173CE)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x1000:73bf (1000_73CF / 0x173CF)
    if(--CX != 0) {
      goto label_1000_73BF_173BF;
    }
    // MOV AL,0xa (1000_73D1 / 0x173D1)
    AL = 0xA;
    // MOV DI,0x11c (1000_73D3 / 0x173D3)
    DI = 0x11C;
    // JMP 0x1000:71b2 (1000_73D6 / 0x173D6)
    // Jump converted to non entry function call
    return unknown_1000_70CC_170CC(0x171B2 - cs1 * 0x10);
    label_1000_73D9_173D9:
    // CALL 0x1000:33be (1000_73D9 / 0x173D9)
    NearCall(cs1, 0x73DC, unknown_1000_33BE_133BE);
    // CMP word ptr [0x94],0x0 (1000_73DC / 0x173DC)
    Alu.Sub16(UInt16[DS, 0x94], 0x0);
    // JZ 0x1000:7429 (1000_73E1 / 0x173E1)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8308_18308(0x17429 - cs1 * 0x10);
    }
    // CALL 0x1000:e3cc (1000_73E3 / 0x173E3)
    NearCall(cs1, 0x73E6, unknown_1000_E3CC_1E3CC);
    // CMP AL,byte ptr [0x9c] (1000_73E6 / 0x173E6)
    Alu.Sub8(AL, UInt8[DS, 0x9C]);
    // JC 0x1000:73ef (1000_73EA / 0x173EA)
    if(CarryFlag) {
      goto label_1000_73EF_173EF;
    }
    // JMP 0x1000:751d (1000_73EC / 0x173EC)
    goto label_1000_751D_1751D;
    label_1000_73EF_173EF:
    // CALL 0x1000:5098 (1000_73EF / 0x173EF)
    throw FailAsUntested("Could not find a valid function at address 1000_5098 / 0x15098");
    // PUSH CX (1000_73F2 / 0x173F2)
    Stack.Push(CX);
    // CALL 0x1000:342d (1000_73F3 / 0x173F3)
    NearCall(cs1, 0x73F6, unknown_1000_342D_1342D);
    // POP CX (1000_73F6 / 0x173F6)
    CX = Stack.Pop();
    // JCXZ 0x1000:73fd (1000_73F7 / 0x173F7)
    if(CX == 0) {
      goto label_1000_73FD_173FD;
    }
    // XOR DX,DX (1000_73F9 / 0x173F9)
    DX = 0;
    // DIV CX (1000_73FB / 0x173FB)
    Cpu.Div16(CX);
    label_1000_73FD_173FD:
    // MOV DL,AL (1000_73FD / 0x173FD)
    DL = AL;
    // INC DL (1000_73FF / 0x173FF)
    DL = Alu.Inc8(DL);
    // JNZ 0x1000:7405 (1000_7401 / 0x17401)
    if(!ZeroFlag) {
      goto label_1000_7405_17405;
    }
    // DEC DL (1000_7403 / 0x17403)
    DL = Alu.Dec8(DL);
    label_1000_7405_17405:
    // XOR DH,DH (1000_7405 / 0x17405)
    DH = 0;
    // XOR CX,CX (1000_7407 / 0x17407)
    CX = 0;
    // XOR BX,BX (1000_7409 / 0x17409)
    BX = 0;
    // MOV BP,0x7552 (1000_740B / 0x1740B)
    BP = 0x7552;
    // CALL 0x1000:6603 (1000_740E / 0x1740E)
    NearCall(cs1, 0x7411, unknown_1000_6603_16603);
    // ADD word ptr [SI + 0xc],CX (1000_7411 / 0x17411)
    // UInt16[DS, (ushort)(SI + 0xC)] += CX;
    UInt16[DS, (ushort)(SI + 0xC)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0xC)], CX);
    // OR BX,BX (1000_7414 / 0x17414)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:7429 (1000_7416 / 0x17416)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8308_18308(0x17429 - cs1 * 0x10);
    }
    // RET  (1000_7418 / 0x17418)
    return NearRet();
    label_1000_751D_1751D:
    // MOV AX,[0x94] (1000_751D / 0x1751D)
    AX = UInt16[DS, 0x94];
    // XOR DX,DX (1000_7520 / 0x17520)
    DX = 0;
    // XOR CX,CX (1000_7522 / 0x17522)
    CX = 0;
    // MOV CL,byte ptr [0x60] (1000_7524 / 0x17524)
    CL = UInt8[DS, 0x60];
    // JCXZ 0x1000:752c (1000_7528 / 0x17528)
    if(CX == 0) {
      goto label_1000_752C_1752C;
    }
    // DIV CX (1000_752A / 0x1752A)
    Cpu.Div16(CX);
    label_1000_752C_1752C:
    // MOV DX,AX (1000_752C / 0x1752C)
    DX = AX;
    // CALL 0x1000:758d (1000_752E / 0x1752E)
    throw FailAsUntested("Could not find a valid function at address 1000_758D / 0x1758D");
    // ADD word ptr [SI + 0xe],AX (1000_7531 / 0x17531)
    // UInt16[DS, (ushort)(SI + 0xE)] += AX;
    UInt16[DS, (ushort)(SI + 0xE)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0xE)], AX);
    // SUB byte ptr [SI + 0x1a],AL (1000_7534 / 0x17534)
    // UInt8[DS, (ushort)(SI + 0x1A)] -= AL;
    UInt8[DS, (ushort)(SI + 0x1A)] = Alu.Sub8(UInt8[DS, (ushort)(SI + 0x1A)], AL);
    // JA 0x1000:7551 (1000_7537 / 0x17537)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_7551 / 0x17551)
      return NearRet();
    }
    // MOV BX,0x7f (1000_7539 / 0x17539)
    BX = 0x7F;
    // CALL 0x1000:e3b7 (1000_753C / 0x1753C)
    NearCall(cs1, 0x753F, unknown_1000_E3B7_1E3B7);
    // ADD AL,0x1e (1000_753F / 0x1753F)
    // AL += 0x1E;
    AL = Alu.Add8(AL, 0x1E);
    // MOV byte ptr [SI + 0x1a],AL (1000_7541 / 0x17541)
    UInt8[DS, (ushort)(SI + 0x1A)] = AL;
    // CALL 0x1000:668f (1000_7544 / 0x17544)
    throw FailAsUntested("Could not find a valid function at address 1000_668F / 0x1668F");
    // CALL 0x1000:5098 (1000_7547 / 0x17547)
    throw FailAsUntested("Could not find a valid function at address 1000_5098 / 0x15098");
    // OR DX,DX (1000_754A / 0x1754A)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNZ 0x1000:7551 (1000_754C / 0x1754C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_7551 / 0x17551)
      return NearRet();
    }
    // CALL 0x1000:74b6 (1000_754E / 0x1754E)
    throw FailAsUntested("Could not find a valid function at address 1000_74B6 / 0x174B6");
    label_1000_7551_17551:
    // RET  (1000_7551 / 0x17551)
    return NearRet();
  }
  
  public Action unknown_1000_77D7_177D7(int gotoTarget) {
    label_1000_77D7_177D7:
    // CALL 0x1000:68eb (1000_77D7 / 0x177D7)
    NearCall(cs1, 0x77DA, unknown_1000_68EB_168EB);
    // MOV DI,word ptr [SI + 0x4] (1000_77DA / 0x177DA)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // PUSH BX (1000_77DD / 0x177DD)
    Stack.Push(BX);
    // PUSH SI (1000_77DE / 0x177DE)
    Stack.Push(SI);
    // CALL 0x1000:7f27 (1000_77DF / 0x177DF)
    NearCall(cs1, 0x77E2, unknown_1000_7F27_17F27);
    // POP SI (1000_77E2 / 0x177E2)
    SI = Stack.Pop();
    // POP BX (1000_77E3 / 0x177E3)
    BX = Stack.Pop();
    // MOV AL,0x1 (1000_77E4 / 0x177E4)
    AL = 0x1;
    // CMP BX,0x1 (1000_77E6 / 0x177E6)
    Alu.Sub16(BX, 0x1);
    // JNZ 0x1000:77f3 (1000_77E9 / 0x177E9)
    if(!ZeroFlag) {
      goto label_1000_77F3_177F3;
    }
    // CMP DI,word ptr [0x1150] (1000_77EB / 0x177EB)
    Alu.Sub16(DI, UInt16[DS, 0x1150]);
    // JNZ 0x1000:77f3 (1000_77EF / 0x177EF)
    if(!ZeroFlag) {
      goto label_1000_77F3_177F3;
    }
    // INC AL (1000_77F1 / 0x177F1)
    AL = Alu.Inc8(AL);
    label_1000_77F3_177F3:
    // CMP byte ptr [BX + 0x46fe],AL (1000_77F3 / 0x177F3)
    Alu.Sub8(UInt8[DS, (ushort)(BX + 0x46FE)], AL);
    // JC 0x1000:7809 (1000_77F7 / 0x177F7)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_7809 / 0x17809)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x19] (1000_77F9 / 0x177F9)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // MOV [0x3d],AL (1000_77FC / 0x177FC)
    UInt8[DS, 0x3D] = AL;
    // MOV AL,0x80 (1000_77FF / 0x177FF)
    AL = 0x80;
    // MOV CL,BL (1000_7801 / 0x17801)
    CL = BL;
    // SHR AL,CL (1000_7803 / 0x17803)
    // AL >>= CL;
    AL = Alu.Shr8(AL, CL);
    // OR byte ptr [SI + 0x19],AL (1000_7805 / 0x17805)
    // UInt8[DS, (ushort)(SI + 0x19)] |= AL;
    UInt8[DS, (ushort)(SI + 0x19)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x19)], AL);
    // CLC  (1000_7808 / 0x17808)
    CarryFlag = false;
    label_1000_7809_17809:
    // RET  (1000_7809 / 0x17809)
    return NearRet();
  }
  
  public Action unknown_1000_780A_1780A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x780A: goto label_1000_780A_1780A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_780A_1780A:
    // CALL 0x1000:7c63 (1000_780A / 0x1780A)
    NearCall(cs1, 0x780D, unknown_1000_7C63_17C63);
    // MOV BP,0x2122 (1000_780D / 0x1780D)
    BP = 0x2122;
    // CMP AX,word ptr [0x1176] (1000_7810 / 0x17810)
    Alu.Sub16(AX, UInt16[DS, 0x1176]);
    // JA 0x1000:783e (1000_7814 / 0x17814)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_783E_1783E;
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_7816 / 0x17816)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // TEST AL,0x20 (1000_7819 / 0x17819)
    Alu.And8(AL, 0x20);
    // JZ 0x1000:7821 (1000_781B / 0x1781B)
    if(ZeroFlag) {
      goto label_1000_7821_17821;
    }
    // CMP AL,0x22 (1000_781D / 0x1781D)
    Alu.Sub8(AL, 0x22);
    // JNZ 0x1000:783e (1000_781F / 0x1781F)
    if(!ZeroFlag) {
      goto label_1000_783E_1783E;
    }
    label_1000_7821_17821:
    // MOV BP,0x214a (1000_7821 / 0x17821)
    BP = 0x214A;
    // TEST byte ptr [SI + 0x3],0x40 (1000_7824 / 0x17824)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:783e (1000_7828 / 0x17828)
    if(!ZeroFlag) {
      goto label_1000_783E_1783E;
    }
    // MOV BP,0x210a (1000_782A / 0x1782A)
    BP = 0x210A;
    // MOV AX,0x52 (1000_782D / 0x1782D)
    AX = 0x52;
    // CMP byte ptr [0x46f3],0x1 (1000_7830 / 0x17830)
    Alu.Sub8(UInt8[DS, 0x46F3], 0x1);
    // ADC AX,0x0 (1000_7835 / 0x17835)
    AX = Alu.Adc16(AX, 0x0);
    // MOV word ptr [BP + 0x12],AX (1000_7838 / 0x17838)
    UInt16[SS, (ushort)(BP + 0x12)] = AX;
    // CALL 0x1000:7847 (1000_783B / 0x1783B)
    NearCall(cs1, 0x783E, unknown_1000_7847_17847);
    label_1000_783E_1783E:
    // MOV BX,0x8751 (1000_783E / 0x1783E)
    BX = 0x8751;
    // CALL 0x1000:d323 (1000_7841 / 0x17841)
    NearCall(cs1, 0x7844, unknown_1000_D323_1D323);
    // JMP 0x1000:c13b (1000_7844 / 0x17844)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
  }
  
  public Action unknown_1000_7847_17847(int gotoTarget) {
    label_1000_7847_17847:
    // MOV word ptr [0x2110],0x404f (1000_7847 / 0x17847)
    UInt16[DS, 0x2110] = 0x404F;
    // OR byte ptr [0x2115],0x40 (1000_784D / 0x1784D)
    // UInt8[DS, 0x2115] |= 0x40;
    UInt8[DS, 0x2115] = Alu.Or8(UInt8[DS, 0x2115], 0x40);
    // OR byte ptr [0x2119],0x40 (1000_7852 / 0x17852)
    // UInt8[DS, 0x2119] |= 0x40;
    UInt8[DS, 0x2119] = Alu.Or8(UInt8[DS, 0x2119], 0x40);
    // TEST word ptr [SI + 0x12],0x400 (1000_7857 / 0x17857)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0x400);
    // JNZ 0x1000:78bb (1000_785C / 0x1785C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_78BB / 0x178BB)
      return NearRet();
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_785E / 0x1785E)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_7861 / 0x17861)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,0x1 (1000_7863 / 0x17863)
    Alu.Sub8(AL, 0x1);
    // JZ 0x1000:786c (1000_7865 / 0x17865)
    if(ZeroFlag) {
      goto label_1000_786C_1786C;
    }
    // AND byte ptr [0x2111],0xbf (1000_7867 / 0x17867)
    // UInt8[DS, 0x2111] &= 0xBF;
    UInt8[DS, 0x2111] = Alu.And8(UInt8[DS, 0x2111], 0xBF);
    label_1000_786C_1786C:
    // CMP AL,0x2 (1000_786C / 0x1786C)
    Alu.Sub8(AL, 0x2);
    // JNZ 0x1000:7876 (1000_786E / 0x1786E)
    if(!ZeroFlag) {
      goto label_1000_7876_17876;
    }
    // MOV byte ptr [0x2110],0x56 (1000_7870 / 0x17870)
    UInt8[DS, 0x2110] = 0x56;
    // RET  (1000_7875 / 0x17875)
    return NearRet();
    label_1000_7876_17876:
    // CMP byte ptr [0x2a],0x5 (1000_7876 / 0x17876)
    Alu.Sub8(UInt8[DS, 0x2A], 0x5);
    // JC 0x1000:7882 (1000_787B / 0x1787B)
    if(CarryFlag) {
      goto label_1000_7882_17882;
    }
    // AND byte ptr [0x2119],0xbf (1000_787D / 0x1787D)
    // UInt8[DS, 0x2119] &= 0xBF;
    UInt8[DS, 0x2119] = Alu.And8(UInt8[DS, 0x2119], 0xBF);
    label_1000_7882_17882:
    // CMP byte ptr [0x2a],0x4 (1000_7882 / 0x17882)
    Alu.Sub8(UInt8[DS, 0x2A], 0x4);
    // JC 0x1000:78bb (1000_7887 / 0x17887)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_78BB / 0x178BB)
      return NearRet();
    }
    // TEST word ptr [SI + 0x10],0x200 (1000_7889 / 0x17889)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x200);
    // JNZ 0x1000:78bb (1000_788E / 0x1788E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_78BB / 0x178BB)
      return NearRet();
    }
    // MOV DI,word ptr [SI + 0x4] (1000_7890 / 0x17890)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [DI + 0xa],0x8 (1000_7893 / 0x17893)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x8);
    // JNZ 0x1000:789f (1000_7897 / 0x17897)
    if(!ZeroFlag) {
      goto label_1000_789F_1789F;
    }
    // CMP byte ptr [DI + 0x8],0x28 (1000_7899 / 0x17899)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JNC 0x1000:78bb (1000_789D / 0x1789D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_78BB / 0x178BB)
      return NearRet();
    }
    label_1000_789F_1789F:
    // PUSH SI (1000_789F / 0x1789F)
    Stack.Push(SI);
    // CALL 0x1000:7f27 (1000_78A0 / 0x178A0)
    NearCall(cs1, 0x78A3, unknown_1000_7F27_17F27);
    // MOV SI,0x46fe (1000_78A3 / 0x178A3)
    SI = 0x46FE;
    // MOV CX,0x7 (1000_78A6 / 0x178A6)
    CX = 0x7;
    // XOR AL,AL (1000_78A9 / 0x178A9)
    AL = 0;
    label_1000_78AB_178AB:
    // OR AL,byte ptr [SI] (1000_78AB / 0x178AB)
    // AL |= UInt8[DS, SI];
    AL = Alu.Or8(AL, UInt8[DS, SI]);
    // INC SI (1000_78AD / 0x178AD)
    SI = Alu.Inc16(SI);
    // LOOP 0x1000:78ab (1000_78AE / 0x178AE)
    if(--CX != 0) {
      goto label_1000_78AB_178AB;
    }
    // POP SI (1000_78B0 / 0x178B0)
    SI = Stack.Pop();
    // OR AL,byte ptr [SI + 0x19] (1000_78B1 / 0x178B1)
    // AL |= UInt8[DS, (ushort)(SI + 0x19)];
    AL = Alu.Or8(AL, UInt8[DS, (ushort)(SI + 0x19)]);
    // JZ 0x1000:78bb (1000_78B4 / 0x178B4)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_78BB / 0x178BB)
      return NearRet();
    }
    // AND byte ptr [0x2115],0xbf (1000_78B6 / 0x178B6)
    // UInt8[DS, 0x2115] &= 0xBF;
    UInt8[DS, 0x2115] = Alu.And8(UInt8[DS, 0x2115], 0xBF);
    label_1000_78BB_178BB:
    // RET  (1000_78BB / 0x178BB)
    return NearRet();
  }
  
  public Action unknown_1000_79DE_179DE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x5F9F: break;
      case 0: goto entry; break; //
    }
    label_1000_5F9F_15F9F:
    // CALL 0x1000:c07c (1000_5F9F / 0x15F9F)
    NearCall(cs1, 0x5FA2, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV word ptr [0xdbe0],0x0 (1000_5FA2 / 0x15FA2)
    UInt16[DS, 0xDBE0] = 0x0;
    // CALL 0x1000:c6ad (1000_5FA8 / 0x15FA8)
    NearCall(cs1, 0x5FAB, unknown_1000_C6AD_1C6AD);
    // MOV AL,0x8 (1000_5FAB / 0x15FAB)
    AL = 0x8;
    // JMP 0x1000:7b2b (1000_5FAD / 0x15FAD)
    // Jump converted to entry function call
    return unknown_1000_7B2B_17B2B(0);
    label_1000_79DB_179DB:
    // JMP 0x1000:c07c (1000_79DB / 0x179DB)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
    entry:
    label_1000_79DE_179DE:
    // XOR AX,AX (1000_79DE / 0x179DE)
    AX = 0;
    // XCHG word ptr [0x46fa],AX (1000_79E0 / 0x179E0)
    ushort tmp_1000_79E0 = UInt16[DS, 0x46FA];
    UInt16[DS, 0x46FA] = AX;
    AX = tmp_1000_79E0;
    // OR AX,AX (1000_79E4 / 0x179E4)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:79db (1000_79E6 / 0x179E6)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:c07c (1000_79DB / 0x179DB)
      // Jump converted to entry function call
      return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
    }
    // MOV SI,0x18df (1000_79E8 / 0x179E8)
    SI = 0x18DF;
    // JMP 0x1000:5f9f (1000_79EB / 0x179EB)
    goto label_1000_5F9F_15F9F;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_79EE_179EE(0);
  }
  
  public Action unknown_1000_79EE_179EE(int gotoTarget) {
    label_1000_79EE_179EE:
    // MOV word ptr [0x46ef],SI (1000_79EE / 0x179EE)
    UInt16[DS, 0x46EF] = SI;
    // CALL 0x1000:6917 (1000_79F2 / 0x179F2)
    NearCall(cs1, 0x79F5, unknown_1000_6917_16917);
    // MOV SI,0x18e9 (1000_79F5 / 0x179F5)
    SI = 0x18E9;
    // JNZ 0x1000:7a1e (1000_79F8 / 0x179F8)
    if(!ZeroFlag) {
      goto label_1000_7A1E_17A1E;
    }
    // MOV AX,0x1e (1000_79FA / 0x179FA)
    AX = 0x1E;
    // MOV BX,0x5 (1000_79FD / 0x179FD)
    BX = 0x5;
    // CMP word ptr [DI + 0x2],0x4c (1000_7A00 / 0x17A00)
    Alu.Sub16(UInt16[DS, (ushort)(DI + 0x2)], 0x4C);
    // JGE 0x1000:7a0c (1000_7A04 / 0x17A04)
    if(SignFlag == OverflowFlag) {
      goto label_1000_7A0C_17A0C;
    }
    // MOV AX,0xe (1000_7A06 / 0x17A06)
    AX = 0xE;
    // MOV BX,0x50 (1000_7A09 / 0x17A09)
    BX = 0x50;
    label_1000_7A0C_17A0C:
    // MOV word ptr [SI + 0x2],BX (1000_7A0C / 0x17A0C)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // ADD BX,0x43 (1000_7A0F / 0x17A0F)
    // BX += 0x43;
    BX = Alu.Add16(BX, 0x43);
    // MOV word ptr [SI + 0x6],BX (1000_7A12 / 0x17A12)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // MOV word ptr [0x4710],0x5c (1000_7A15 / 0x17A15)
    UInt16[DS, 0x4710] = 0x5C;
    // MOV [0x4712],AX (1000_7A1B / 0x17A1B)
    UInt16[DS, 0x4712] = AX;
    label_1000_7A1E_17A1E:
    // MOV word ptr [0xdbe0],SI (1000_7A1E / 0x17A1E)
    UInt16[DS, 0xDBE0] = SI;
    // MOV AL,0x2 (1000_7A22 / 0x17A22)
    AL = 0x2;
    // CALL 0x1000:7b0f (1000_7A24 / 0x17A24)
    NearCall(cs1, 0x7A27, unknown_1000_7B0F_17B0F);
    // MOV DI,0x18e9 (1000_7A27 / 0x17A27)
    DI = 0x18E9;
    // MOV SI,0x18f3 (1000_7A2A / 0x17A2A)
    SI = 0x18F3;
    // MOV DX,word ptr [DI] (1000_7A2D / 0x17A2D)
    DX = UInt16[DS, DI];
    // MOV BX,word ptr [DI + 0x2] (1000_7A2F / 0x17A2F)
    BX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV AX,DX (1000_7A32 / 0x17A32)
    AX = DX;
    // ADD AX,0x49 (1000_7A34 / 0x17A34)
    // AX += 0x49;
    AX = Alu.Add16(AX, 0x49);
    // MOV [0x2244],AX (1000_7A37 / 0x17A37)
    UInt16[DS, 0x2244] = AX;
    // ADD BX,0x3 (1000_7A3A / 0x17A3A)
    // BX += 0x3;
    BX = Alu.Add16(BX, 0x3);
    // MOV word ptr [0x2246],BX (1000_7A3D / 0x17A3D)
    UInt16[DS, 0x2246] = BX;
    // XOR AX,AX (1000_7A41 / 0x17A41)
    AX = 0;
    // MOV [0x4784],AX (1000_7A43 / 0x17A43)
    UInt16[DS, 0x4784] = AX;
    // MOV word ptr [0x4786],0x5 (1000_7A46 / 0x17A46)
    UInt16[DS, 0x4786] = 0x5;
    // MOV [0x4788],AX (1000_7A4C / 0x17A4C)
    UInt16[DS, 0x4788] = AX;
    // INC AX (1000_7A4F / 0x17A4F)
    AX = Alu.Inc16(AX);
    // MOV [0x478a],AX (1000_7A50 / 0x17A50)
    UInt16[DS, 0x478A] = AX;
    // ADD DX,0x4 (1000_7A53 / 0x17A53)
    // DX += 0x4;
    DX = Alu.Add16(DX, 0x4);
    // MOV word ptr [SI],DX (1000_7A56 / 0x17A56)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],BX (1000_7A58 / 0x17A58)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // ADD DX,0x3d (1000_7A5B / 0x17A5B)
    // DX += 0x3D;
    DX = Alu.Add16(DX, 0x3D);
    // ADD BX,0x3d (1000_7A5E / 0x17A5E)
    // BX += 0x3D;
    BX = Alu.Add16(BX, 0x3D);
    // MOV word ptr [SI + 0x4],DX (1000_7A61 / 0x17A61)
    UInt16[DS, (ushort)(SI + 0x4)] = DX;
    // MOV word ptr [SI + 0x6],BX (1000_7A64 / 0x17A64)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // CALL 0x1000:7b1b (1000_7A67 / 0x17A67)
    NearCall(cs1, 0x7A6A, unknown_1000_7B1B_17B1B);
    // MOV SI,word ptr [0x46ef] (1000_7A6A / 0x17A6A)
    SI = UInt16[DS, 0x46EF];
    // TEST byte ptr [SI + 0x3],0x20 (1000_7A6E / 0x17A6E)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // JZ 0x1000:7a96 (1000_7A72 / 0x17A72)
    if(ZeroFlag) {
      goto label_1000_7A96_17A96;
    }
    // MOV DI,word ptr [SI + 0x4] (1000_7A74 / 0x17A74)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [DI + 0xa],0x2 (1000_7A77 / 0x17A77)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:7a82 (1000_7A7B / 0x17A7B)
    if(!ZeroFlag) {
      goto label_1000_7A82_17A82;
    }
    // CALL 0x1000:5d36 (1000_7A7D / 0x17A7D)
    NearCall(cs1, 0x7A80, unknown_1000_5D36_15D36);
    // JC 0x1000:7a96 (1000_7A80 / 0x17A80)
    if(CarryFlag) {
      goto label_1000_7A96_17A96;
    }
    label_1000_7A82_17A82:
    // MOV AX,0xc (1000_7A82 / 0x17A82)
    AX = 0xC;
    // MOV [0x47c4],AX (1000_7A85 / 0x17A85)
    UInt16[DS, 0x47C4] = AX;
    // CALL 0x1000:91a0 (1000_7A88 / 0x17A88)
    NearCall(cs1, 0x7A8B, unknown_1000_91A0_191A0);
    // CALL 0x1000:c0f4 (1000_7A8B / 0x17A8B)
    NearCall(cs1, 0x7A8E, unknown_1000_C0F4_1C0F4);
    // MOV AX,0xc (1000_7A8E / 0x17A8E)
    AX = 0xC;
    // MOV BP,0x0 (1000_7A91 / 0x17A91)
    BP = 0x0;
    // JMP 0x1000:7ac1 (1000_7A94 / 0x17A94)
    goto label_1000_7AC1_17AC1;
    label_1000_7A96_17A96:
    // MOV AX,0xf (1000_7A96 / 0x17A96)
    AX = 0xF;
    // MOV [0x47c4],AX (1000_7A99 / 0x17A99)
    UInt16[DS, 0x47C4] = AX;
    // MOV word ptr [0x4758],SI (1000_7A9C / 0x17A9C)
    UInt16[DS, 0x4758] = SI;
    // MOV byte ptr [0x476c],0x0 (1000_7AA0 / 0x17AA0)
    UInt8[DS, 0x476C] = 0x0;
    // CALL 0x1000:91a0 (1000_7AA5 / 0x17AA5)
    NearCall(cs1, 0x7AA8, unknown_1000_91A0_191A0);
    // CALL 0x1000:c0f4 (1000_7AA8 / 0x17AA8)
    NearCall(cs1, 0x7AAB, unknown_1000_C0F4_1C0F4);
    // MOV AX,[0x22a6] (1000_7AAB / 0x17AAB)
    AX = UInt16[DS, 0x22A6];
    // SUB AX,0xe (1000_7AAE / 0x17AAE)
    // AX -= 0xE;
    AX = Alu.Sub16(AX, 0xE);
    // SHL AX,1 (1000_7AB1 / 0x17AB1)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_7AB3 / 0x17AB3)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BL,byte ptr [0x47d0] (1000_7AB5 / 0x17AB5)
    BL = UInt8[DS, 0x47D0];
    // DEC BL (1000_7AB9 / 0x17AB9)
    BL = Alu.Dec8(BL);
    // XOR BH,BH (1000_7ABB / 0x17ABB)
    BH = 0;
    // SHL BX,1 (1000_7ABD / 0x17ABD)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV BP,BX (1000_7ABF / 0x17ABF)
    BP = BX;
    label_1000_7AC1_17AC1:
    // MOV SI,0x22b9 (1000_7AC1 / 0x17AC1)
    SI = 0x22B9;
    // ADD SI,AX (1000_7AC4 / 0x17AC4)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // LODSW SI (1000_7AC6 / 0x17AC6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV [0x46d2],AX (1000_7AC7 / 0x17AC7)
    UInt16[DS, 0x46D2] = AX;
    // LODSW SI (1000_7ACA / 0x17ACA)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV [0x46d4],AX (1000_7ACB / 0x17ACB)
    UInt16[DS, 0x46D4] = AX;
    // PUSH DS (1000_7ACE / 0x17ACE)
    Stack.Push(DS);
    // MOV SI,word ptr SS:[0x47ca] (1000_7ACF / 0x17ACF)
    SI = UInt16[SS, 0x47CA];
    // MOV DS,word ptr SS:[0xdbb2] (1000_7AD4 / 0x17AD4)
    DS = UInt16[SS, 0xDBB2];
    // ADD SI,word ptr DS:[BP + SI] (1000_7AD9 / 0x17AD9)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // MOV DX,word ptr SS:[0x18f3] (1000_7ADC / 0x17ADC)
    DX = UInt16[SS, 0x18F3];
    // MOV BX,word ptr SS:[0x18f5] (1000_7AE1 / 0x17AE1)
    BX = UInt16[SS, 0x18F5];
    // INC BX (1000_7AE6 / 0x17AE6)
    BX = Alu.Inc16(BX);
    // INC DX (1000_7AE7 / 0x17AE7)
    DX = Alu.Inc16(DX);
    // MOV word ptr SS:[0x47d4],DX (1000_7AE8 / 0x17AE8)
    UInt16[SS, 0x47D4] = DX;
    // MOV word ptr SS:[0x47d6],BX (1000_7AED / 0x17AED)
    UInt16[SS, 0x47D6] = BX;
    // ADD DX,0x3b (1000_7AF2 / 0x17AF2)
    // DX += 0x3B;
    DX = Alu.Add16(DX, 0x3B);
    // ADD BX,0x3b (1000_7AF5 / 0x17AF5)
    // BX += 0x3B;
    BX = Alu.Add16(BX, 0x3B);
    // MOV word ptr SS:[0x47d8],DX (1000_7AF8 / 0x17AF8)
    UInt16[SS, 0x47D8] = DX;
    // MOV word ptr SS:[0x47da],BX (1000_7AFD / 0x17AFD)
    UInt16[SS, 0x47DA] = BX;
    // CALL 0x1000:9d6a (1000_7B02 / 0x17B02)
    NearCall(cs1, 0x7B05, unknown_1000_9D6A_19D6A);
    // POP DS (1000_7B05 / 0x17B05)
    DS = Stack.Pop();
    // MOV SI,0x47d4 (1000_7B06 / 0x17B06)
    SI = 0x47D4;
    // CALL 0x1000:c4aa (1000_7B09 / 0x17B09)
    NearCall(cs1, 0x7B0C, gfx_copy_rect_to_screen_ida_1000_C4AA_1C4AA);
    // JMP 0x1000:c13b (1000_7B0C / 0x17B0C)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
  }
  
  public Action unknown_1000_7B0F_17B0F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7B0F: goto label_1000_7B0F_17B0F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7B0F_17B0F:
    // MOV byte ptr [0x46d8],0x0 (1000_7B0F / 0x17B0F)
    UInt8[DS, 0x46D8] = 0x0;
    // PUSH SI (1000_7B14 / 0x17B14)
    Stack.Push(SI);
    // XCHG DI,SI (1000_7B15 / 0x17B15)
    ushort tmp_1000_7B15 = DI;
    DI = SI;
    SI = tmp_1000_7B15;
    // CALL 0x1000:c0e8 (1000_7B17 / 0x17B17)
    NearCall(cs1, 0x7B1A, unknown_1000_C0E8_1C0E8);
    // POP SI (1000_7B1A / 0x17B1A)
    SI = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7B1B_17B1B(0);
  }
  
  public Action unknown_1000_7B1B_17B1B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7B1B: goto label_1000_7B1B_17B1B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7B1B_17B1B:
    // MOV ES,word ptr [0xdbda] (1000_7B1B / 0x17B1B)
    ES = UInt16[DS, 0xDBDA];
    // MOV AL,byte ptr [SI + 0x9] (1000_7B1F / 0x17B1F)
    AL = UInt8[DS, (ushort)(SI + 0x9)];
    // PUSH SI (1000_7B22 / 0x17B22)
    Stack.Push(SI);
    // CALLF [0x38dd] (1000_7B23 / 0x17B23)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_7B23 = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_7B23) {
      case 0x235CE : FarCall(cs1, 0x7B27, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_7B23);
        break;
    }
    // POP SI (1000_7B27 / 0x17B27)
    SI = Stack.Pop();
    // JMP 0x1000:c551 (1000_7B28 / 0x17B28)
    // Jump converted to entry function call
    return unknown_1000_C551_1C551(0);
  }
  
  public Action unknown_1000_7B2B_17B2B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7B2B: goto label_1000_7B2B_17B2B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7B2B_17B2B:
    // CMP byte ptr [0x46d8],0x0 (1000_7B2B / 0x17B2B)
    Alu.Sub8(UInt8[DS, 0x46D8], 0x0);
    // JNZ 0x1000:7b35 (1000_7B30 / 0x17B30)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_7B35 / 0x17B35)
      return NearRet();
    }
    // JMP 0x1000:c0e8 (1000_7B32 / 0x17B32)
    // Jump converted to entry function call
    return unknown_1000_C0E8_1C0E8(0);
    label_1000_7B35_17B35:
    // RET  (1000_7B35 / 0x17B35)
    return NearRet();
  }
  
  public Action unknown_1000_7B36_17B36(int gotoTarget) {
    label_1000_7B36_17B36:
    // PUSH SI (1000_7B36 / 0x17B36)
    Stack.Push(SI);
    // PUSH DI (1000_7B37 / 0x17B37)
    Stack.Push(DI);
    // MOV byte ptr [0x46d8],0x1 (1000_7B38 / 0x17B38)
    UInt8[DS, 0x46D8] = 0x1;
    // MOV byte ptr [0xdce6],0x80 (1000_7B3D / 0x17B3D)
    UInt8[DS, 0xDCE6] = 0x80;
    // CALL 0x1000:8770 (1000_7B42 / 0x17B42)
    NearCall(cs1, 0x7B45, unknown_1000_8770_18770);
    // CALL 0x1000:5f79 (1000_7B45 / 0x17B45)
    NearCall(cs1, 0x7B48, unknown_1000_5F79_15F79);
    // CALL 0x1000:79de (1000_7B48 / 0x17B48)
    NearCall(cs1, 0x7B4B, unknown_1000_79DE_179DE);
    // MOV byte ptr [0xdce6],0x0 (1000_7B4B / 0x17B4B)
    UInt8[DS, 0xDCE6] = 0x0;
    // MOV byte ptr [0x46f4],0x0 (1000_7B50 / 0x17B50)
    UInt8[DS, 0x46F4] = 0x0;
    // POP DI (1000_7B55 / 0x17B55)
    DI = Stack.Pop();
    // POP SI (1000_7B56 / 0x17B56)
    SI = Stack.Pop();
    // RET  (1000_7B57 / 0x17B57)
    return NearRet();
  }
  
  public Action unknown_1000_7B58_17B58(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7B58: goto label_1000_7B58_17B58;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7B58_17B58:
    // MOV word ptr [0x1bea],0x0 (1000_7B58 / 0x17B58)
    UInt16[DS, 0x1BEA] = 0x0;
    // MOV byte ptr [0x46f4],0x0 (1000_7B5E / 0x17B5E)
    UInt8[DS, 0x46F4] = 0x0;
    // XOR SI,SI (1000_7B63 / 0x17B63)
    SI = 0;
    // MOV byte ptr [0x4c],0x0 (1000_7B65 / 0x17B65)
    UInt8[DS, 0x4C] = 0x0;
    // XCHG word ptr [0x46ef],SI (1000_7B6A / 0x17B6A)
    ushort tmp_1000_7B6A = UInt16[DS, 0x46EF];
    UInt16[DS, 0x46EF] = SI;
    SI = tmp_1000_7B6A;
    // OR SI,SI (1000_7B6E / 0x17B6E)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:7ba2 (1000_7B70 / 0x17B70)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_7BA2 / 0x17BA2)
      return NearRet();
    }
    // CMP byte ptr [0x4c],0x0 (1000_7B72 / 0x17B72)
    Alu.Sub8(UInt8[DS, 0x4C], 0x0);
    // JNZ 0x1000:7b8c (1000_7B77 / 0x17B77)
    if(!ZeroFlag) {
      goto label_1000_7B8C_17B8C;
    }
    // CALL 0x1000:1ebe (1000_7B79 / 0x17B79)
    NearCall(cs1, 0x7B7C, unknown_1000_1EBE_11EBE);
    // AND word ptr [SI + 0x10],0x3f0 (1000_7B7C / 0x17B7C)
    // UInt16[DS, (ushort)(SI + 0x10)] &= 0x3F0;
    UInt16[DS, (ushort)(SI + 0x10)] = Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x3F0);
    // AND word ptr [SI + 0x12],0xe5ff (1000_7B81 / 0x17B81)
    // UInt16[DS, (ushort)(SI + 0x12)] &= 0xE5FF;
    UInt16[DS, (ushort)(SI + 0x12)] = Alu.And16(UInt16[DS, (ushort)(SI + 0x12)], 0xE5FF);
    // CALL 0x1000:1ac5 (1000_7B86 / 0x17B86)
    NearCall(cs1, 0x7B89, unknown_1000_1AC5_11AC5);
    // MOV byte ptr [SI + 0x14],AL (1000_7B89 / 0x17B89)
    UInt8[DS, (ushort)(SI + 0x14)] = AL;
    label_1000_7B8C_17B8C:
    // CALL 0x1000:a7a5 (1000_7B8C / 0x17B8C)
    NearCall(cs1, 0x7B8F, unknown_1000_A7A5_1A7A5);
    // MOV SI,0x18e9 (1000_7B8F / 0x17B8F)
    SI = 0x18E9;
    // XOR AX,AX (1000_7B92 / 0x17B92)
    AX = 0;
    // MOV [0xdbe0],AX (1000_7B94 / 0x17B94)
    UInt16[DS, 0xDBE0] = AX;
    // MOV [0x47ba],AX (1000_7B97 / 0x17B97)
    UInt16[DS, 0x47BA] = AX;
    // CALL 0x1000:c6ad (1000_7B9A / 0x17B9A)
    NearCall(cs1, 0x7B9D, unknown_1000_C6AD_1C6AD);
    // MOV AL,0x4 (1000_7B9D / 0x17B9D)
    AL = 0x4;
    // CALL 0x1000:7b2b (1000_7B9F / 0x17B9F)
    NearCall(cs1, 0x7BA2, unknown_1000_7B2B_17B2B);
    label_1000_7BA2_17BA2:
    // RET  (1000_7BA2 / 0x17BA2)
    return NearRet();
  }
  
  public Action unknown_1000_7BA3_17BA3(int gotoTarget) {
    label_1000_7BA3_17BA3:
    // CALL 0x1000:c08e (1000_7BA3 / 0x17BA3)
    NearCall(cs1, 0x7BA6, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CMP SI,word ptr [0x46ef] (1000_7BA6 / 0x17BA6)
    Alu.Sub16(SI, UInt16[DS, 0x46EF]);
    // JZ 0x1000:7bb8 (1000_7BAA / 0x17BAA)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_7BB8 / 0x17BB8)
      return NearRet();
    }
    // PUSH SI (1000_7BAC / 0x17BAC)
    Stack.Push(SI);
    // MOV word ptr [0x46f1],SI (1000_7BAD / 0x17BAD)
    UInt16[DS, 0x46F1] = SI;
    // CALL 0x1000:79ee (1000_7BB1 / 0x17BB1)
    NearCall(cs1, 0x7BB4, unknown_1000_79EE_179EE);
    // CALL 0x1000:9f40 (1000_7BB4 / 0x17BB4)
    NearCall(cs1, 0x7BB7, unknown_1000_9F40_19F40);
    // POP SI (1000_7BB7 / 0x17BB7)
    SI = Stack.Pop();
    label_1000_7BB8_17BB8:
    // RET  (1000_7BB8 / 0x17BB8)
    return NearRet();
  }
  
  public Action unknown_1000_7BB9_17BB9(int gotoTarget) {
    label_1000_7BB9_17BB9:
    // PUSH AX (1000_7BB9 / 0x17BB9)
    Stack.Push(AX);
    // CALL 0x1000:31f6 (1000_7BBA / 0x17BBA)
    NearCall(cs1, 0x7BBD, unknown_1000_31F6_131F6);
    // POP AX (1000_7BBD / 0x17BBD)
    AX = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7BBE_17BBE(0);
  }
  
  public Action unknown_1000_7BBE_17BBE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7C56: goto label_1000_7C56_17C56;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7BBE_17BBE:
    // MOV word ptr [0x46f1],SI (1000_7BBE / 0x17BBE)
    UInt16[DS, 0x46F1] = SI;
    // MOV [0x23],AL (1000_7BC2 / 0x17BC2)
    UInt8[DS, 0x23] = AL;
    // MOV word ptr [0x47ba],0x0 (1000_7BC5 / 0x17BC5)
    UInt16[DS, 0x47BA] = 0x0;
    // CALL 0x1000:c08e (1000_7BCB / 0x17BCB)
    NearCall(cs1, 0x7BCE, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV AX,0xf (1000_7BCE / 0x17BCE)
    AX = 0xF;
    // CALL 0x1000:96f1 (1000_7BD1 / 0x17BD1)
    NearCall(cs1, 0x7BD4, unknown_1000_96F1_196F1);
    // JC 0x1000:7bd9 (1000_7BD4 / 0x17BD4)
    if(CarryFlag) {
      goto label_1000_7BD9_17BD9;
    }
    // CALL 0x1000:9efd (1000_7BD6 / 0x17BD6)
    NearCall(cs1, 0x7BD9, unknown_1000_9EFD_19EFD);
    label_1000_7BD9_17BD9:
    // MOV SI,word ptr [0x46f1] (1000_7BD9 / 0x17BD9)
    SI = UInt16[DS, 0x46F1];
    // JMP 0x1000:7c56 (1000_7BDD / 0x17BDD)
    goto label_1000_7C56_17C56;
    label_1000_7C56_17C56:
    // CMP byte ptr [0x46eb],0x0 (1000_7C56 / 0x17C56)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNS 0x1000:7c60 (1000_7C5B / 0x17C5B)
    if(!SignFlag) {
      // JNS target is JMP, inlining.
      // JMP 0x1000:c07c (1000_7C60 / 0x17C60)
      // Jump converted to entry function call
      return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
    }
    // CALL 0x1000:9901 (1000_7C5D / 0x17C5D)
    NearCall(cs1, 0x7C60, Set479ETo0_1000_9901_19901);
    label_1000_7C60_17C60:
    // JMP 0x1000:c07c (1000_7C60 / 0x17C60)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_7BE0_17BE0(int gotoTarget) {
    label_1000_7BE0_17BE0:
    // CMP SI,word ptr [0x46ef] (1000_7BE0 / 0x17BE0)
    Alu.Sub16(SI, UInt16[DS, 0x46EF]);
    // JZ 0x1000:7be7 (1000_7BE4 / 0x17BE4)
    if(ZeroFlag) {
      goto label_1000_7BE7_17BE7;
    }
    // RET  (1000_7BE6 / 0x17BE6)
    return NearRet();
    label_1000_7BE7_17BE7:
    // MOV word ptr [0x47ba],0x0 (1000_7BE7 / 0x17BE7)
    UInt16[DS, 0x47BA] = 0x0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7BED_17BED(0);
  }
  
  public Action unknown_1000_7BED_17BED(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7EE1: goto label_1000_7EE1_17EE1;break;
      case 0x7E97: goto label_1000_7E97_17E97;break;
      case 0x7BED: goto label_1000_7BED_17BED;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7BED_17BED:
    // CMP byte ptr [0x46f4],0x0 (1000_7BED / 0x17BED)
    Alu.Sub8(UInt8[DS, 0x46F4], 0x0);
    // JZ 0x1000:7bfe (1000_7BF2 / 0x17BF2)
    if(ZeroFlag) {
      goto label_1000_7BFE_17BFE;
    }
    // CMP byte ptr [0x46f5],0x0 (1000_7BF4 / 0x17BF4)
    Alu.Sub8(UInt8[DS, 0x46F5], 0x0);
    // JZ 0x1000:7bfe (1000_7BF9 / 0x17BF9)
    if(ZeroFlag) {
      goto label_1000_7BFE_17BFE;
    }
    // JMP 0x1000:7e97 (1000_7BFB / 0x17BFB)
    goto label_1000_7E97_17E97;
    label_1000_7BFE_17BFE:
    // MOV SI,word ptr [0x46ef] (1000_7BFE / 0x17BFE)
    SI = UInt16[DS, 0x46EF];
    label_1000_7E97_17E97:
    // CMP byte ptr [0x46f5],0x0 (1000_7E97 / 0x17E97)
    Alu.Sub8(UInt8[DS, 0x46F5], 0x0);
    // JZ 0x1000:7ee1 (1000_7E9C / 0x17E9C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // MOV DI,0x1936 (1000_7E9E / 0x17E9E)
    DI = 0x1936;
    // CALL 0x1000:d6fe (1000_7EA1 / 0x17EA1)
    NearCall(cs1, 0x7EA4, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:7ee1 (1000_7EA4 / 0x17EA4)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // MOV SI,0x4c7c (1000_7EA6 / 0x17EA6)
    SI = 0x4C7C;
    // CALL 0x1000:7ee2 (1000_7EA9 / 0x17EA9)
    NearCall(cs1, 0x7EAC, unknown_1000_7EE2_17EE2);
    // JNC 0x1000:7ee1 (1000_7EAC / 0x17EAC)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    // DEC byte ptr [DI + 0x4705] (1000_7EAE / 0x17EAE)
    UInt8[DS, (ushort)(DI + 0x4705)] = Alu.Dec8(UInt8[DS, (ushort)(DI + 0x4705)]);
    // INC byte ptr [DI + 0x46fe] (1000_7EB2 / 0x17EB2)
    UInt8[DS, (ushort)(DI + 0x46FE)] = Alu.Inc8(UInt8[DS, (ushort)(DI + 0x46FE)]);
    // JMP 0x1000:7ede (1000_7EB6 / 0x17EB6)
    goto label_1000_7EDE_17EDE;
    label_1000_7EDE_17EDE:
    // CALL 0x1000:7d0c (1000_7EDE / 0x17EDE)
    NearCall(cs1, 0x7EE1, unknown_1000_7D0C_17D0C);
    label_1000_7EE1_17EE1:
    // RET  (1000_7EE1 / 0x17EE1)
    return NearRet();
  }
  
  public Action unknown_1000_7C02_17C02(int gotoTarget) {
    label_1000_7C02_17C02:
    // CALL 0x1000:7ba3 (1000_7C02 / 0x17C02)
    NearCall(cs1, 0x7C05, unknown_1000_7BA3_17BA3);
    // CALL 0x1000:31f6 (1000_7C05 / 0x17C05)
    NearCall(cs1, 0x7C08, unknown_1000_31F6_131F6);
    // MOV DI,word ptr [SI + 0x4] (1000_7C08 / 0x17C08)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:2e98 (1000_7C0B / 0x17C0B)
    NearCall(cs1, 0x7C0E, unknown_1000_2E98_12E98);
    // CALL 0x1000:7c63 (1000_7C0E / 0x17C0E)
    NearCall(cs1, 0x7C11, unknown_1000_7C63_17C63);
    // CMP AX,word ptr [0x1176] (1000_7C11 / 0x17C11)
    Alu.Sub16(AX, UInt16[DS, 0x1176]);
    // JBE 0x1000:7c2d (1000_7C15 / 0x17C15)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_7C2D_17C2D;
    }
    // MOV byte ptr [0x4c],0xff (1000_7C17 / 0x17C17)
    UInt8[DS, 0x4C] = 0xFF;
    // MOV DI,word ptr [0x4752] (1000_7C1C / 0x17C1C)
    DI = UInt16[DS, 0x4752];
    // OR DI,DI (1000_7C20 / 0x17C20)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:7c2d (1000_7C22 / 0x17C22)
    if(ZeroFlag) {
      goto label_1000_7C2D_17C2D;
    }
    // MOV AX,0x1916 (1000_7C24 / 0x17C24)
    AX = 0x1916;
    // MOV word ptr [DI + 0xd],AX (1000_7C27 / 0x17C27)
    UInt16[DS, (ushort)(DI + 0xD)] = AX;
    // MOV word ptr [DI + 0xf],AX (1000_7C2A / 0x17C2A)
    UInt16[DS, (ushort)(DI + 0xF)] = AX;
    label_1000_7C2D_17C2D:
    // CALL 0x1000:9719 (1000_7C2D / 0x17C2D)
    NearCall(cs1, 0x7C30, unknown_1000_9719_19719);
    // MOV SI,word ptr [0x46ef] (1000_7C30 / 0x17C30)
    SI = UInt16[DS, 0x46EF];
    // JC 0x1000:7c2d (1000_7C34 / 0x17C34)
    if(CarryFlag) {
      goto label_1000_7C2D_17C2D;
    }
    // PUSH SI (1000_7C36 / 0x17C36)
    Stack.Push(SI);
    // CALL 0x1000:9efd (1000_7C37 / 0x17C37)
    NearCall(cs1, 0x7C3A, unknown_1000_9EFD_19EFD);
    // POP SI (1000_7C3A / 0x17C3A)
    SI = Stack.Pop();
    // MOV byte ptr [0x46f4],0x0 (1000_7C3B / 0x17C3B)
    UInt8[DS, 0x46F4] = 0x0;
    // CMP byte ptr [0x47a5],0x80 (1000_7C40 / 0x17C40)
    Alu.Sub8(UInt8[DS, 0x47A5], 0x80);
    // JNZ 0x1000:7c56 (1000_7C45 / 0x17C45)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_7BBE_17BBE(0x17C56 - cs1 * 0x10);
    }
    // INC byte ptr [0x46f4] (1000_7C47 / 0x17C47)
    UInt8[DS, 0x46F4] = Alu.Inc8(UInt8[DS, 0x46F4]);
    // CALL 0x1000:7efb (1000_7C4B / 0x17C4B)
    NearCall(cs1, 0x7C4E, unknown_1000_7EFB_17EFB);
    // PUSH SI (1000_7C4E / 0x17C4E)
    Stack.Push(SI);
    // CALL 0x1000:7e1e (1000_7C4F / 0x17C4F)
    NearCall(cs1, 0x7C52, unknown_1000_7E1E_17E1E);
    // POP SI (1000_7C52 / 0x17C52)
    SI = Stack.Pop();
    // JMP 0x1000:7c56 (1000_7C53 / 0x17C53)
    // Jump converted to non entry function call
    return unknown_1000_7BBE_17BBE(0x17C56 - cs1 * 0x10);
  }
  
  public Action unknown_1000_7C63_17C63(int gotoTarget) {
    label_1000_7C63_17C63:
    // PUSH SI (1000_7C63 / 0x17C63)
    Stack.Push(SI);
    // CALL 0x1000:407e (1000_7C64 / 0x17C64)
    NearCall(cs1, 0x7C67, unknown_1000_407E_1407E);
    // POP SI (1000_7C67 / 0x17C67)
    SI = Stack.Pop();
    // MOV BP,BX (1000_7C68 / 0x17C68)
    BP = BX;
    // SHL BP,1 (1000_7C6A / 0x17C6A)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // JNS 0x1000:7c70 (1000_7C6C / 0x17C6C)
    if(!SignFlag) {
      goto label_1000_7C70_17C70;
    }
    // NEG BP (1000_7C6E / 0x17C6E)
    BP = Alu.Sub16(0, BP);
    label_1000_7C70_17C70:
    // MOV BP,word ptr [BP + 0x4880] (1000_7C70 / 0x17C70)
    BP = UInt16[SS, (ushort)(BP + 0x4880)];
    // MOV AX,word ptr [SI + 0x6] (1000_7C74 / 0x17C74)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // SUB AX,DX (1000_7C77 / 0x17C77)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JNS 0x1000:7c7d (1000_7C79 / 0x17C79)
    if(!SignFlag) {
      goto label_1000_7C7D_17C7D;
    }
    // NEG AX (1000_7C7B / 0x17C7B)
    AX = Alu.Sub16(0, AX);
    label_1000_7C7D_17C7D:
    // XOR DX,DX (1000_7C7D / 0x17C7D)
    DX = 0;
    // DIV BP (1000_7C7F / 0x17C7F)
    Cpu.Div16(BP);
    // SUB BX,word ptr [SI + 0x8] (1000_7C81 / 0x17C81)
    // BX -= UInt16[DS, (ushort)(SI + 0x8)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x8)]);
    // JNS 0x1000:7c88 (1000_7C84 / 0x17C84)
    if(!SignFlag) {
      goto label_1000_7C88_17C88;
    }
    // NEG BX (1000_7C86 / 0x17C86)
    BX = Alu.Sub16(0, BX);
    label_1000_7C88_17C88:
    // CMP AX,BX (1000_7C88 / 0x17C88)
    Alu.Sub16(AX, BX);
    // JNC 0x1000:7c8e (1000_7C8A / 0x17C8A)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7C8E / 0x17C8E)
      return NearRet();
    }
    // MOV AX,BX (1000_7C8C / 0x17C8C)
    AX = BX;
    label_1000_7C8E_17C8E:
    // RET  (1000_7C8E / 0x17C8E)
    return NearRet();
  }
  
  public Action unknown_1000_7C8F_17C8F(int gotoTarget) {
    label_1000_7C8F_17C8F:
    // PUSH SI (1000_7C8F / 0x17C8F)
    Stack.Push(SI);
    // CALL 0x1000:407e (1000_7C90 / 0x17C90)
    NearCall(cs1, 0x7C93, unknown_1000_407E_1407E);
    // POP SI (1000_7C93 / 0x17C93)
    SI = Stack.Pop();
    // MOV BP,BX (1000_7C94 / 0x17C94)
    BP = BX;
    // SHL BP,1 (1000_7C96 / 0x17C96)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // JNS 0x1000:7c9c (1000_7C98 / 0x17C98)
    if(!SignFlag) {
      goto label_1000_7C9C_17C9C;
    }
    // NEG BP (1000_7C9A / 0x17C9A)
    BP = Alu.Sub16(0, BP);
    label_1000_7C9C_17C9C:
    // MOV BP,word ptr [BP + 0x4880] (1000_7C9C / 0x17C9C)
    BP = UInt16[SS, (ushort)(BP + 0x4880)];
    // MOV AX,word ptr [SI + 0x2] (1000_7CA0 / 0x17CA0)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // SUB AX,DX (1000_7CA3 / 0x17CA3)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JNS 0x1000:7ca9 (1000_7CA5 / 0x17CA5)
    if(!SignFlag) {
      goto label_1000_7CA9_17CA9;
    }
    // NEG AX (1000_7CA7 / 0x17CA7)
    AX = Alu.Sub16(0, AX);
    label_1000_7CA9_17CA9:
    // XOR DX,DX (1000_7CA9 / 0x17CA9)
    DX = 0;
    // DIV BP (1000_7CAB / 0x17CAB)
    Cpu.Div16(BP);
    // SUB BX,word ptr [SI + 0x4] (1000_7CAD / 0x17CAD)
    // BX -= UInt16[DS, (ushort)(SI + 0x4)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JNS 0x1000:7cb4 (1000_7CB0 / 0x17CB0)
    if(!SignFlag) {
      goto label_1000_7CB4_17CB4;
    }
    // NEG BX (1000_7CB2 / 0x17CB2)
    BX = Alu.Sub16(0, BX);
    label_1000_7CB4_17CB4:
    // CMP AX,BX (1000_7CB4 / 0x17CB4)
    Alu.Sub16(AX, BX);
    // JNC 0x1000:7cba (1000_7CB6 / 0x17CB6)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_7CBA / 0x17CBA)
      return NearRet();
    }
    // MOV AX,BX (1000_7CB8 / 0x17CB8)
    AX = BX;
    label_1000_7CBA_17CBA:
    // RET  (1000_7CBA / 0x17CBA)
    return NearRet();
  }
  
  public Action unknown_1000_7D0C_17D0C(int gotoTarget) {
    label_1000_7D0C_17D0C:
    // CALL 0x1000:c08e (1000_7D0C / 0x17D0C)
    NearCall(cs1, 0x7D0F, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV SI,0x1936 (1000_7D0F / 0x17D0F)
    SI = 0x1936;
    // CALL 0x1000:7b1b (1000_7D12 / 0x17D12)
    NearCall(cs1, 0x7D15, unknown_1000_7B1B_17B1B);
    // MOV SI,0x1940 (1000_7D15 / 0x17D15)
    SI = 0x1940;
    // CALL 0x1000:7b1b (1000_7D18 / 0x17D18)
    NearCall(cs1, 0x7D1B, unknown_1000_7B1B_17B1B);
    // CALL 0x1000:7e1e (1000_7D1B / 0x17D1B)
    NearCall(cs1, 0x7D1E, unknown_1000_7E1E_17E1E);
    // PUSH DS (1000_7D1E / 0x17D1E)
    Stack.Push(DS);
    // POP ES (1000_7D1F / 0x17D1F)
    ES = Stack.Pop();
    // MOV SI,0x4c60 (1000_7D20 / 0x17D20)
    SI = 0x4C60;
    // MOV DI,0x4c7c (1000_7D23 / 0x17D23)
    DI = 0x4C7C;
    // MOV CX,0xe (1000_7D26 / 0x17D26)
    CX = 0xE;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_7D29 / 0x17D29)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOV BX,word ptr [0x1942] (1000_7D2B / 0x17D2B)
    BX = UInt16[DS, 0x1942];
    // ADD BX,0x4 (1000_7D2F / 0x17D2F)
    // BX += 0x4;
    BX = Alu.Add16(BX, 0x4);
    // MOV DX,word ptr [0x1940] (1000_7D32 / 0x17D32)
    DX = UInt16[DS, 0x1940];
    // ADD DX,0x50 (1000_7D36 / 0x17D36)
    // DX += 0x50;
    DX = Alu.Add16(DX, 0x50);
    // MOV SI,0x46fe (1000_7D39 / 0x17D39)
    SI = 0x46FE;
    // MOV BP,word ptr [0x1946] (1000_7D3C / 0x17D3C)
    BP = UInt16[DS, 0x1946];
    // MOV CX,word ptr [0x1948] (1000_7D40 / 0x17D40)
    CX = UInt16[DS, 0x1948];
    // MOV word ptr [0xdbe4],CX (1000_7D44 / 0x17D44)
    UInt16[DS, 0xDBE4] = CX;
    // CALL 0x1000:7e3d (1000_7D48 / 0x17D48)
    NearCall(cs1, 0x7D4B, unknown_1000_7E3D_17E3D);
    // MOV CX,word ptr [0x1948] (1000_7D4B / 0x17D4B)
    CX = UInt16[DS, 0x1948];
    // MOV DX,word ptr [0x1940] (1000_7D4F / 0x17D4F)
    DX = UInt16[DS, 0x1940];
    // ADD DX,0x8 (1000_7D53 / 0x17D53)
    // DX += 0x8;
    DX = Alu.Add16(DX, 0x8);
    // MOV AX,0x6f (1000_7D56 / 0x17D56)
    AX = 0x6F;
    // CALL 0x1000:d194 (1000_7D59 / 0x17D59)
    NearCall(cs1, 0x7D5C, unknown_1000_D194_1D194);
    // CALL 0x1000:e270 (1000_7D5C / 0x17D5C)
    NearCall(cs1, 0x7D5F, PushAll_1000_E270_1E270);
    // CALL 0x1000:d280 (1000_7D5F / 0x17D5F)
    NearCall(cs1, 0x7D62, unknown_1000_D280_1D280);
    // CALL 0x1000:e283 (1000_7D62 / 0x17D62)
    NearCall(cs1, 0x7D65, PopAll_1000_E283_1E283);
    // JMP 0x1000:c07c (1000_7D65 / 0x17D65)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_7D68_17D68(int gotoTarget) {
    label_1000_7D68_17D68:
    // MOV byte ptr [0x46f5],0x0 (1000_7D68 / 0x17D68)
    UInt8[DS, 0x46F5] = 0x0;
    // XOR SI,SI (1000_7D6D / 0x17D6D)
    SI = 0;
    // MOV word ptr [0xdbe2],0x0 (1000_7D6F / 0x17D6F)
    UInt16[DS, 0xDBE2] = 0x0;
    // MOV SI,0x1940 (1000_7D75 / 0x17D75)
    SI = 0x1940;
    // CALL 0x1000:c6ad (1000_7D78 / 0x17D78)
    NearCall(cs1, 0x7D7B, unknown_1000_C6AD_1C6AD);
    // CALL 0x1000:68eb (1000_7D7B / 0x17D7B)
    NearCall(cs1, 0x7D7E, unknown_1000_68EB_168EB);
    // CALL 0x1000:7f11 (1000_7D7E / 0x17D7E)
    NearCall(cs1, 0x7D81, unknown_1000_7F11_17F11);
    label_1000_7D81_17D81:
    // CALL 0x1000:8461 (1000_7D81 / 0x17D81)
    NearCall(cs1, 0x7D84, unknown_1000_8461_18461);
    // MOV AH,byte ptr [SI + 0x19] (1000_7D84 / 0x17D84)
    AH = UInt8[DS, (ushort)(SI + 0x19)];
    // MOV AL,[0x3d] (1000_7D87 / 0x17D87)
    AL = UInt8[DS, 0x3D];
    // MOV BL,AL (1000_7D8A / 0x17D8A)
    BL = AL;
    // XOR BL,AH (1000_7D8C / 0x17D8C)
    // BL ^= AH;
    BL = Alu.Xor8(BL, AH);
    // AND AH,BL (1000_7D8E / 0x17D8E)
    // AH &= BL;
    AH = Alu.And8(AH, BL);
    // MOV byte ptr [0x3d],AH (1000_7D90 / 0x17D90)
    UInt8[DS, 0x3D] = AH;
    // AND AL,BL (1000_7D94 / 0x17D94)
    // AL &= BL;
    AL = Alu.And8(AL, BL);
    // MOV [0x3e],AL (1000_7D96 / 0x17D96)
    UInt8[DS, 0x3E] = AL;
    // MOV byte ptr [0x3f],0x0 (1000_7D99 / 0x17D99)
    UInt8[DS, 0x3F] = 0x0;
    // TEST AH,0x40 (1000_7D9E / 0x17D9E)
    Alu.And8(AH, 0x40);
    // JZ 0x1000:7db1 (1000_7DA1 / 0x17DA1)
    if(ZeroFlag) {
      goto label_1000_7DB1_17DB1;
    }
    // MOV DI,word ptr [SI + 0x4] (1000_7DA3 / 0x17DA3)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP DI,word ptr [0x1150] (1000_7DA6 / 0x17DA6)
    Alu.Sub16(DI, UInt16[DS, 0x1150]);
    // JNZ 0x1000:7db1 (1000_7DAA / 0x17DAA)
    if(!ZeroFlag) {
      goto label_1000_7DB1_17DB1;
    }
    // MOV byte ptr [0x3f],0x40 (1000_7DAC / 0x17DAC)
    UInt8[DS, 0x3F] = 0x40;
    label_1000_7DB1_17DB1:
    // MOV AL,byte ptr [SI + 0x3] (1000_7DB1 / 0x17DB1)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_7DB4 / 0x17DB4)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,0x8 (1000_7DB6 / 0x17DB6)
    Alu.Sub8(AL, 0x8);
    // JNZ 0x1000:7dbd (1000_7DB8 / 0x17DB8)
    if(!ZeroFlag) {
      goto label_1000_7DBD_17DBD;
    }
    // CALL 0x1000:6c15 (1000_7DBA / 0x17DBA)
    NearCall(cs1, 0x7DBD, unknown_1000_6C15_16C15);
    label_1000_7DBD_17DBD:
    // MOV AL,0xc (1000_7DBD / 0x17DBD)
    AL = 0xC;
    // CALL 0x1000:7bb9 (1000_7DBF / 0x17DBF)
    NearCall(cs1, 0x7DC2, unknown_1000_7BB9_17BB9);
    // MOV byte ptr [0x46f4],0x0 (1000_7DC2 / 0x17DC2)
    UInt8[DS, 0x46F4] = 0x0;
    // CMP word ptr [0x1bea],0x0 (1000_7DC7 / 0x17DC7)
    Alu.Sub16(UInt16[DS, 0x1BEA], 0x0);
    // JNZ 0x1000:7dd8 (1000_7DCC / 0x17DCC)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_7DD8 / 0x17DD8)
      return NearRet();
    }
    // MOV SI,word ptr [0x46ef] (1000_7DCE / 0x17DCE)
    SI = UInt16[DS, 0x46EF];
    // CALL 0x1000:7be0 (1000_7DD2 / 0x17DD2)
    NearCall(cs1, 0x7DD5, unknown_1000_7BE0_17BE0);
    // CALL 0x1000:7c02 (1000_7DD5 / 0x17DD5)
    NearCall(cs1, 0x7DD8, unknown_1000_7C02_17C02);
    label_1000_7DD8_17DD8:
    // RET  (1000_7DD8 / 0x17DD8)
    return NearRet();
  }
  
  public Action unknown_1000_7DD9_17DD9(int gotoTarget) {
    label_1000_7DD9_17DD9:
    // MOV SI,0x18e9 (1000_7DD9 / 0x17DD9)
    SI = 0x18E9;
    // MOV DI,0x1936 (1000_7DDC / 0x17DDC)
    DI = 0x1936;
    // MOV BP,0x1940 (1000_7DDF / 0x17DDF)
    BP = 0x1940;
    // MOV word ptr [0xdbe2],BP (1000_7DE2 / 0x17DE2)
    UInt16[DS, 0xDBE2] = BP;
    // MOV AX,word ptr [SI] (1000_7DE6 / 0x17DE6)
    AX = UInt16[DS, SI];
    // ADD AX,0x30 (1000_7DE8 / 0x17DE8)
    // AX += 0x30;
    AX = Alu.Add16(AX, 0x30);
    // MOV word ptr [BP + 0x0],AX (1000_7DEB / 0x17DEB)
    UInt16[SS, BP] = AX;
    // ADD AX,0x4d (1000_7DEE / 0x17DEE)
    // AX += 0x4D;
    AX = Alu.Add16(AX, 0x4D);
    // MOV word ptr [DI],AX (1000_7DF1 / 0x17DF1)
    UInt16[DS, DI] = AX;
    // MOV AX,word ptr [SI + 0x4] (1000_7DF3 / 0x17DF3)
    AX = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV word ptr [DI + 0x4],AX (1000_7DF6 / 0x17DF6)
    UInt16[DS, (ushort)(DI + 0x4)] = AX;
    // MOV word ptr [BP + 0x4],AX (1000_7DF9 / 0x17DF9)
    UInt16[SS, (ushort)(BP + 0x4)] = AX;
    // MOV AX,word ptr [SI + 0x2] (1000_7DFC / 0x17DFC)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // ADD AX,0x2b (1000_7DFF / 0x17DFF)
    // AX += 0x2B;
    AX = Alu.Add16(AX, 0x2B);
    // MOV word ptr [DI + 0x2],AX (1000_7E02 / 0x17E02)
    UInt16[DS, (ushort)(DI + 0x2)] = AX;
    // MOV AX,word ptr [SI + 0x6] (1000_7E05 / 0x17E05)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV word ptr [DI + 0x6],AX (1000_7E08 / 0x17E08)
    UInt16[DS, (ushort)(DI + 0x6)] = AX;
    // INC AX (1000_7E0B / 0x17E0B)
    AX = Alu.Inc16(AX);
    // CMP AX,0x70 (1000_7E0C / 0x17E0C)
    Alu.Sub16(AX, 0x70);
    // JC 0x1000:7e14 (1000_7E0F / 0x17E0F)
    if(CarryFlag) {
      goto label_1000_7E14_17E14;
    }
    // SUB AX,0x6d (1000_7E11 / 0x17E11)
    // AX -= 0x6D;
    AX = Alu.Sub16(AX, 0x6D);
    label_1000_7E14_17E14:
    // MOV word ptr [BP + 0x2],AX (1000_7E14 / 0x17E14)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // ADD AX,0x28 (1000_7E17 / 0x17E17)
    // AX += 0x28;
    AX = Alu.Add16(AX, 0x28);
    // MOV word ptr [BP + 0x6],AX (1000_7E1A / 0x17E1A)
    UInt16[SS, (ushort)(BP + 0x6)] = AX;
    // RET  (1000_7E1D / 0x17E1D)
    return NearRet();
  }
  
  public Action unknown_1000_7E1E_17E1E(int gotoTarget) {
    label_1000_7E1E_17E1E:
    // CALL 0x1000:d068 (1000_7E1E / 0x17E1E)
    NearCall(cs1, 0x7E21, SetFontToIntro_1000_D068_1D068);
    // MOV SI,0x4705 (1000_7E21 / 0x17E21)
    SI = 0x4705;
    // MOV DX,word ptr [0x18e9] (1000_7E24 / 0x17E24)
    DX = UInt16[DS, 0x18E9];
    // MOV BX,word ptr [0x18eb] (1000_7E28 / 0x17E28)
    BX = UInt16[DS, 0x18EB];
    // ADD DX,0x80 (1000_7E2C / 0x17E2C)
    // DX += 0x80;
    DX = Alu.Add16(DX, 0x80);
    // ADD BX,0x2d (1000_7E30 / 0x17E30)
    // BX += 0x2D;
    BX = Alu.Add16(BX, 0x2D);
    // MOV BP,word ptr [0x18ef] (1000_7E33 / 0x17E33)
    BP = UInt16[DS, 0x18EF];
    // MOV word ptr [0xdbe4],0xf0 (1000_7E37 / 0x17E37)
    UInt16[DS, 0xDBE4] = 0xF0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7E3D_17E3D(0);
  }
  
  public Action unknown_1000_7E3D_17E3D(int gotoTarget) {
    switch(gotoTarget) {
      case 0x7E3D: goto label_1000_7E3D_17E3D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_7E3D_17E3D:
    // CALL 0x1000:c13b (1000_7E3D / 0x17E3D)
    NearCall(cs1, 0x7E40, unknown_1000_C13B_1C13B);
    // PUSH DI (1000_7E40 / 0x17E40)
    Stack.Push(DI);
    // PUSH DS (1000_7E41 / 0x17E41)
    Stack.Push(DS);
    // POP ES (1000_7E42 / 0x17E42)
    ES = Stack.Pop();
    // MOV DI,0x4c60 (1000_7E43 / 0x17E43)
    DI = 0x4C60;
    // MOV CX,0xe (1000_7E46 / 0x17E46)
    CX = 0xE;
    // XOR AX,AX (1000_7E49 / 0x17E49)
    AX = 0;
    while (CX-- != 0) {
      // STOSW ES:DI (1000_7E4B / 0x17E4B)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOV DI,SI (1000_7E4D / 0x17E4D)
    DI = SI;
    // MOV CX,0x7 (1000_7E4F / 0x17E4F)
    CX = 0x7;
    // XOR AL,AL (1000_7E52 / 0x17E52)
    AL = 0;
    while (CX-- != 0) {
      // SCASB ES:DI (1000_7E54 / 0x17E54)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == true) {
        break;
      }
    }
    // JNZ 0x1000:7e69 (1000_7E56 / 0x17E56)
    if(!ZeroFlag) {
      goto label_1000_7E69_17E69;
    }
    // ADD BX,0x5 (1000_7E58 / 0x17E58)
    // BX += 0x5;
    BX = Alu.Add16(BX, 0x5);
    // ADD DX,0xc (1000_7E5B / 0x17E5B)
    // DX += 0xC;
    DX = Alu.Add16(DX, 0xC);
    // CALL 0x1000:d04e (1000_7E5E / 0x17E5E)
    NearCall(cs1, 0x7E61, unknown_1000_D04E_1D04E);
    // MOV AX,0x69 (1000_7E61 / 0x17E61)
    AX = 0x69;
    // CALL 0x1000:d19b (1000_7E64 / 0x17E64)
    NearCall(cs1, 0x7E67, unknown_1000_D19B_1D19B);
    // POP DI (1000_7E67 / 0x17E67)
    DI = Stack.Pop();
    // RET  (1000_7E68 / 0x17E68)
    return NearRet();
    label_1000_7E69_17E69:
    // XOR DI,DI (1000_7E69 / 0x17E69)
    DI = 0;
    label_1000_7E6B_17E6B:
    // MOV AL,byte ptr [SI] (1000_7E6B / 0x17E6B)
    AL = UInt8[DS, SI];
    // OR AL,AL (1000_7E6D / 0x17E6D)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:7e8e (1000_7E6F / 0x17E6F)
    if(ZeroFlag) {
      goto label_1000_7E8E_17E8E;
    }
    // MOV CL,AL (1000_7E71 / 0x17E71)
    CL = AL;
    // PUSH SI (1000_7E73 / 0x17E73)
    Stack.Push(SI);
    // PUSH DI (1000_7E74 / 0x17E74)
    Stack.Push(DI);
    // PUSH BP (1000_7E75 / 0x17E75)
    Stack.Push(BP);
    // MOV AL,byte ptr [DI + 0x192f] (1000_7E76 / 0x17E76)
    AL = UInt8[DS, (ushort)(DI + 0x192F)];
    // XOR AH,AH (1000_7E7A / 0x17E7A)
    AH = 0;
    // SHL DI,1 (1000_7E7C / 0x17E7C)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // SHL DI,1 (1000_7E7E / 0x17E7E)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV word ptr [DI + 0x4c60],DX (1000_7E80 / 0x17E80)
    UInt16[DS, (ushort)(DI + 0x4C60)] = DX;
    // CALL 0x1000:61d3 (1000_7E84 / 0x17E84)
    NearCall(cs1, 0x7E87, unknown_1000_61D3_161D3);
    // MOV word ptr [DI + 0x4c62],DX (1000_7E87 / 0x17E87)
    UInt16[DS, (ushort)(DI + 0x4C62)] = DX;
    // POP BP (1000_7E8B / 0x17E8B)
    BP = Stack.Pop();
    // POP DI (1000_7E8C / 0x17E8C)
    DI = Stack.Pop();
    // POP SI (1000_7E8D / 0x17E8D)
    SI = Stack.Pop();
    label_1000_7E8E_17E8E:
    // INC SI (1000_7E8E / 0x17E8E)
    SI = Alu.Inc16(SI);
    // INC DI (1000_7E8F / 0x17E8F)
    DI = Alu.Inc16(DI);
    // CMP DI,0x7 (1000_7E90 / 0x17E90)
    Alu.Sub16(DI, 0x7);
    // JC 0x1000:7e6b (1000_7E93 / 0x17E93)
    if(CarryFlag) {
      goto label_1000_7E6B_17E6B;
    }
    // POP DI (1000_7E95 / 0x17E95)
    DI = Stack.Pop();
    // RET  (1000_7E96 / 0x17E96)
    return NearRet();
  }
  
  public Action unknown_1000_7EE2_17EE2(int gotoTarget) {
    label_1000_7EE2_17EE2:
    // XOR DI,DI (1000_7EE2 / 0x17EE2)
    DI = 0;
    label_1000_7EE4_17EE4:
    // LODSW SI (1000_7EE4 / 0x17EE4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_7EE5 / 0x17EE5)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:7ef1 (1000_7EE7 / 0x17EE7)
    if(ZeroFlag) {
      goto label_1000_7EF1_17EF1;
    }
    // CMP DX,AX (1000_7EE9 / 0x17EE9)
    Alu.Sub16(DX, AX);
    // JC 0x1000:7ef1 (1000_7EEB / 0x17EEB)
    if(CarryFlag) {
      goto label_1000_7EF1_17EF1;
    }
    // CMP DX,word ptr [SI] (1000_7EED / 0x17EED)
    Alu.Sub16(DX, UInt16[DS, SI]);
    // JC 0x1000:7ee1 (1000_7EEF / 0x17EEF)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_7EE1 / 0x17EE1)
      return NearRet();
    }
    label_1000_7EF1_17EF1:
    // ADD SI,0x2 (1000_7EF1 / 0x17EF1)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // INC DI (1000_7EF4 / 0x17EF4)
    DI = Alu.Inc16(DI);
    // CMP DI,0x7 (1000_7EF5 / 0x17EF5)
    Alu.Sub16(DI, 0x7);
    // JC 0x1000:7ee4 (1000_7EF8 / 0x17EF8)
    if(CarryFlag) {
      goto label_1000_7EE4_17EE4;
    }
    // RET  (1000_7EFA / 0x17EFA)
    return NearRet();
  }
  
  public Action unknown_1000_7EFB_17EFB(int gotoTarget) {
    label_1000_7EFB_17EFB:
    // PUSH DI (1000_7EFB / 0x17EFB)
    Stack.Push(DI);
    // PUSH DS (1000_7EFC / 0x17EFC)
    Stack.Push(DS);
    // POP ES (1000_7EFD / 0x17EFD)
    ES = Stack.Pop();
    // MOV DI,0x4705 (1000_7EFE / 0x17EFE)
    DI = 0x4705;
    // MOV AH,byte ptr [SI + 0x19] (1000_7F01 / 0x17F01)
    AH = UInt8[DS, (ushort)(SI + 0x19)];
    label_1000_7F04_17F04:
    // XOR AL,AL (1000_7F04 / 0x17F04)
    AL = 0;
    // ROL AX,1 (1000_7F06 / 0x17F06)
    AX = Alu.Rol16(AX, 1);
    // STOSB ES:DI (1000_7F08 / 0x17F08)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP DI,0x470c (1000_7F09 / 0x17F09)
    Alu.Sub16(DI, 0x470C);
    // JC 0x1000:7f04 (1000_7F0D / 0x17F0D)
    if(CarryFlag) {
      goto label_1000_7F04_17F04;
    }
    // POP DI (1000_7F0F / 0x17F0F)
    DI = Stack.Pop();
    // RET  (1000_7F10 / 0x17F10)
    return NearRet();
  }
  
  public Action unknown_1000_7F11_17F11(int gotoTarget) {
    label_1000_7F11_17F11:
    // PUSH SI (1000_7F11 / 0x17F11)
    Stack.Push(SI);
    // MOV SI,0x470b (1000_7F12 / 0x17F12)
    SI = 0x470B;
    // STD  (1000_7F15 / 0x17F15)
    DirectionFlag = true;
    // XOR AX,AX (1000_7F16 / 0x17F16)
    AX = 0;
    label_1000_7F18_17F18:
    // LODSB SI (1000_7F18 / 0x17F18)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ROR AX,1 (1000_7F19 / 0x17F19)
    AX = Alu.Ror16(AX, 1);
    // CMP SI,0x4705 (1000_7F1B / 0x17F1B)
    Alu.Sub16(SI, 0x4705);
    // JNC 0x1000:7f18 (1000_7F1F / 0x17F1F)
    if(!CarryFlag) {
      goto label_1000_7F18_17F18;
    }
    // POP SI (1000_7F21 / 0x17F21)
    SI = Stack.Pop();
    // CLD  (1000_7F22 / 0x17F22)
    DirectionFlag = false;
    // MOV byte ptr [SI + 0x19],AH (1000_7F23 / 0x17F23)
    UInt8[DS, (ushort)(SI + 0x19)] = AH;
    // RET  (1000_7F26 / 0x17F26)
    return NearRet();
  }
  
  public Action unknown_1000_7F27_17F27(int gotoTarget) {
    label_1000_7F27_17F27:
    // MOV BX,0x46fe (1000_7F27 / 0x17F27)
    BX = 0x46FE;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_7F2A_17F2A(0);
  }
  
  public Action unknown_1000_7F2A_17F2A(int gotoTarget) {
    label_1000_7F2A_17F2A:
    // PUSH DI (1000_7F2A / 0x17F2A)
    Stack.Push(DI);
    // PUSH DS (1000_7F2B / 0x17F2B)
    Stack.Push(DS);
    // POP ES (1000_7F2C / 0x17F2C)
    ES = Stack.Pop();
    // MOV AL,byte ptr [DI + 0x9] (1000_7F2D / 0x17F2D)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // LEA SI,[DI + 0x14] (1000_7F30 / 0x17F30)
    SI = (ushort)(DI + 0x14);
    // MOV DI,BX (1000_7F33 / 0x17F33)
    DI = BX;
    // MOV CX,0x7 (1000_7F35 / 0x17F35)
    CX = 0x7;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_7F38 / 0x17F38)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    label_1000_7F3A_17F3A:
    // OR AL,AL (1000_7F3A / 0x17F3A)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:7f5d (1000_7F3C / 0x17F3C)
    if(ZeroFlag) {
      goto label_1000_7F5D_17F5D;
    }
    // CALL 0x1000:6906 (1000_7F3E / 0x17F3E)
    NearCall(cs1, 0x7F41, unknown_1000_6906_16906);
    // MOV AL,byte ptr [SI + 0x19] (1000_7F41 / 0x17F41)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // MOV DI,BX (1000_7F44 / 0x17F44)
    DI = BX;
    // SHL AL,1 (1000_7F46 / 0x17F46)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JNC 0x1000:7f51 (1000_7F48 / 0x17F48)
    if(!CarryFlag) {
      goto label_1000_7F51_17F51;
    }
    label_1000_7F4A_17F4A:
    // SUB byte ptr [DI],0x1 (1000_7F4A / 0x17F4A)
    // UInt8[DS, DI] -= 0x1;
    UInt8[DS, DI] = Alu.Sub8(UInt8[DS, DI], 0x1);
    // JNC 0x1000:7f51 (1000_7F4D / 0x17F4D)
    if(!CarryFlag) {
      goto label_1000_7F51_17F51;
    }
    // INC byte ptr [DI] (1000_7F4F / 0x17F4F)
    UInt8[DS, DI] = Alu.Inc8(UInt8[DS, DI]);
    label_1000_7F51_17F51:
    // INC DI (1000_7F51 / 0x17F51)
    DI = Alu.Inc16(DI);
    // SHL AL,1 (1000_7F52 / 0x17F52)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JC 0x1000:7f4a (1000_7F54 / 0x17F54)
    if(CarryFlag) {
      goto label_1000_7F4A_17F4A;
    }
    // JNZ 0x1000:7f51 (1000_7F56 / 0x17F56)
    if(!ZeroFlag) {
      goto label_1000_7F51_17F51;
    }
    // MOV AL,byte ptr [SI + 0x1] (1000_7F58 / 0x17F58)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // JMP 0x1000:7f3a (1000_7F5B / 0x17F5B)
    goto label_1000_7F3A_17F3A;
    label_1000_7F5D_17F5D:
    // POP DI (1000_7F5D / 0x17F5D)
    DI = Stack.Pop();
    // RET  (1000_7F5E / 0x17F5E)
    return NearRet();
  }
  
  public Action unknown_1000_7F5F_17F5F(int gotoTarget) {
    label_1000_7F5F_17F5F:
    // MOV AL,byte ptr [SI + 0x19] (1000_7F5F / 0x17F5F)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // PUSH DI (1000_7F62 / 0x17F62)
    Stack.Push(DI);
    // ADD DI,0x14 (1000_7F63 / 0x17F63)
    // DI += 0x14;
    DI = Alu.Add16(DI, 0x14);
    // SHL AL,1 (1000_7F66 / 0x17F66)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JNC 0x1000:7f6c (1000_7F68 / 0x17F68)
    if(!CarryFlag) {
      goto label_1000_7F6C_17F6C;
    }
    label_1000_7F6A_17F6A:
    // INC byte ptr [DI] (1000_7F6A / 0x17F6A)
    UInt8[DS, DI] = Alu.Inc8(UInt8[DS, DI]);
    label_1000_7F6C_17F6C:
    // INC DI (1000_7F6C / 0x17F6C)
    DI = Alu.Inc16(DI);
    // SHL AL,1 (1000_7F6D / 0x17F6D)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JC 0x1000:7f6a (1000_7F6F / 0x17F6F)
    if(CarryFlag) {
      goto label_1000_7F6A_17F6A;
    }
    // JNZ 0x1000:7f6c (1000_7F71 / 0x17F71)
    if(!ZeroFlag) {
      goto label_1000_7F6C_17F6C;
    }
    // POP DI (1000_7F73 / 0x17F73)
    DI = Stack.Pop();
    // RET  (1000_7F74 / 0x17F74)
    return NearRet();
  }
  
  public Action unknown_1000_7F75_17F75(int gotoTarget) {
    label_1000_7F75_17F75:
    // MOV AL,byte ptr [SI + 0x19] (1000_7F75 / 0x17F75)
    AL = UInt8[DS, (ushort)(SI + 0x19)];
    // PUSH DI (1000_7F78 / 0x17F78)
    Stack.Push(DI);
    // ADD DI,0x14 (1000_7F79 / 0x17F79)
    // DI += 0x14;
    DI = Alu.Add16(DI, 0x14);
    // SHL AL,1 (1000_7F7C / 0x17F7C)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JNC 0x1000:7f87 (1000_7F7E / 0x17F7E)
    if(!CarryFlag) {
      goto label_1000_7F87_17F87;
    }
    label_1000_7F80_17F80:
    // SUB byte ptr [DI],0x1 (1000_7F80 / 0x17F80)
    // UInt8[DS, DI] -= 0x1;
    UInt8[DS, DI] = Alu.Sub8(UInt8[DS, DI], 0x1);
    // JNC 0x1000:7f87 (1000_7F83 / 0x17F83)
    if(!CarryFlag) {
      goto label_1000_7F87_17F87;
    }
    // INC byte ptr [DI] (1000_7F85 / 0x17F85)
    UInt8[DS, DI] = Alu.Inc8(UInt8[DS, DI]);
    label_1000_7F87_17F87:
    // INC DI (1000_7F87 / 0x17F87)
    DI = Alu.Inc16(DI);
    // SHL AL,1 (1000_7F88 / 0x17F88)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JC 0x1000:7f80 (1000_7F8A / 0x17F8A)
    if(CarryFlag) {
      goto label_1000_7F80_17F80;
    }
    // JNZ 0x1000:7f87 (1000_7F8C / 0x17F8C)
    if(!ZeroFlag) {
      goto label_1000_7F87_17F87;
    }
    // POP DI (1000_7F8E / 0x17F8E)
    DI = Stack.Pop();
    // RET  (1000_7F8F / 0x17F8F)
    return NearRet();
  }
  
  public Action unknown_1000_7F90_17F90(int gotoTarget) {
    label_1000_7F90_17F90:
    // MOV DI,word ptr [SI + 0x4] (1000_7F90 / 0x17F90)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // PUSH DI (1000_7F93 / 0x17F93)
    Stack.Push(DI);
    // PUSH word ptr [DI + 0x4] (1000_7F94 / 0x17F94)
    Stack.Push(UInt16[DS, (ushort)(DI + 0x4)]);
    // PUSH word ptr [DI + 0x2] (1000_7F97 / 0x17F97)
    Stack.Push(UInt16[DS, (ushort)(DI + 0x2)]);
    // MOV BP,SP (1000_7F9A / 0x17F9A)
    BP = SP;
    // MOV word ptr [0x470c],0xffff (1000_7F9C / 0x17F9C)
    UInt16[DS, 0x470C] = 0xFFFF;
    // MOV DI,0x138 (1000_7FA2 / 0x17FA2)
    DI = 0x138;
    label_1000_7FA5_17FA5:
    // CMP word ptr [DI],-0x1 (1000_7FA5 / 0x17FA5)
    Alu.Sub16(UInt16[DS, DI], 0xFFFF);
    // JZ 0x1000:8014 (1000_7FA8 / 0x17FA8)
    if(ZeroFlag) {
      goto label_1000_8014_18014;
    }
    // TEST byte ptr [DI + 0xa],0x80 (1000_7FAA / 0x17FAA)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x80);
    // JNZ 0x1000:800f (1000_7FAE / 0x17FAE)
    if(!ZeroFlag) {
      goto label_1000_800F_1800F;
    }
    // CMP byte ptr [DI + 0x8],0x28 (1000_7FB0 / 0x17FB0)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JNC 0x1000:800f (1000_7FB4 / 0x17FB4)
    if(!CarryFlag) {
      goto label_1000_800F_1800F;
    }
    // CMP DI,word ptr [BP + 0x4] (1000_7FB6 / 0x17FB6)
    Alu.Sub16(DI, UInt16[SS, (ushort)(BP + 0x4)]);
    // JZ 0x1000:800f (1000_7FB9 / 0x17FB9)
    if(ZeroFlag) {
      goto label_1000_800F_1800F;
    }
    // MOV DX,word ptr [DI + 0x2] (1000_7FBB / 0x17FBB)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // SUB DX,word ptr [BP + 0x0] (1000_7FBE / 0x17FBE)
    // DX -= UInt16[SS, BP];
    DX = Alu.Sub16(DX, UInt16[SS, BP]);
    // JNS 0x1000:7fc5 (1000_7FC1 / 0x17FC1)
    if(!SignFlag) {
      goto label_1000_7FC5_17FC5;
    }
    // NEG DX (1000_7FC3 / 0x17FC3)
    DX = Alu.Sub16(0, DX);
    label_1000_7FC5_17FC5:
    // MOV AX,word ptr [DI + 0x4] (1000_7FC5 / 0x17FC5)
    AX = UInt16[DS, (ushort)(DI + 0x4)];
    // SUB AX,word ptr [BP + 0x2] (1000_7FC8 / 0x17FC8)
    // AX -= UInt16[SS, (ushort)(BP + 0x2)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x2)]);
    // JNS 0x1000:7fcf (1000_7FCB / 0x17FCB)
    if(!SignFlag) {
      goto label_1000_7FCF_17FCF;
    }
    // NEG AX (1000_7FCD / 0x17FCD)
    AX = Alu.Sub16(0, AX);
    label_1000_7FCF_17FCF:
    // MOV DL,DH (1000_7FCF / 0x17FCF)
    DL = DH;
    // XOR DH,DH (1000_7FD1 / 0x17FD1)
    DH = 0;
    // CMP DL,AL (1000_7FD3 / 0x17FD3)
    Alu.Sub8(DL, AL);
    // JNC 0x1000:7fd9 (1000_7FD5 / 0x17FD5)
    if(!CarryFlag) {
      goto label_1000_7FD9_17FD9;
    }
    // MOV DX,AX (1000_7FD7 / 0x17FD7)
    DX = AX;
    label_1000_7FD9_17FD9:
    // CMP DL,0x32 (1000_7FD9 / 0x17FD9)
    Alu.Sub8(DL, 0x32);
    // JNC 0x1000:800f (1000_7FDC / 0x17FDC)
    if(!CarryFlag) {
      goto label_1000_800F_1800F;
    }
    // CMP byte ptr [DI + 0x8],0x21 (1000_7FDE / 0x17FDE)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x21);
    // JC 0x1000:7fe8 (1000_7FE2 / 0x17FE2)
    if(CarryFlag) {
      goto label_1000_7FE8_17FE8;
    }
    // SHR DX,1 (1000_7FE4 / 0x17FE4)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (1000_7FE6 / 0x17FE6)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    label_1000_7FE8_17FE8:
    // CMP DX,word ptr [0x470c] (1000_7FE8 / 0x17FE8)
    Alu.Sub16(DX, UInt16[DS, 0x470C]);
    // JNC 0x1000:800f (1000_7FEC / 0x17FEC)
    if(!CarryFlag) {
      goto label_1000_800F_1800F;
    }
    // PUSH BX (1000_7FEE / 0x17FEE)
    Stack.Push(BX);
    // MOV BX,0x4c60 (1000_7FEF / 0x17FEF)
    BX = 0x4C60;
    // CALL 0x1000:7f2a (1000_7FF2 / 0x17FF2)
    NearCall(cs1, 0x7FF5, unknown_1000_7F2A_17F2A);
    // POP BX (1000_7FF5 / 0x17FF5)
    BX = Stack.Pop();
    // CMP byte ptr [BX + 0x4c60],0x0 (1000_7FF6 / 0x17FF6)
    Alu.Sub8(UInt8[DS, (ushort)(BX + 0x4C60)], 0x0);
    // JZ 0x1000:800f (1000_7FFB / 0x17FFB)
    if(ZeroFlag) {
      goto label_1000_800F_1800F;
    }
    // CALL 0x1000:8018 (1000_7FFD / 0x17FFD)
    NearCall(cs1, 0x8000, unknown_1000_8018_18018);
    // CMP byte ptr [BX + 0x4c60],0x0 (1000_8000 / 0x18000)
    Alu.Sub8(UInt8[DS, (ushort)(BX + 0x4C60)], 0x0);
    // JZ 0x1000:800f (1000_8005 / 0x18005)
    if(ZeroFlag) {
      goto label_1000_800F_1800F;
    }
    // MOV word ptr [0x470c],DX (1000_8007 / 0x18007)
    UInt16[DS, 0x470C] = DX;
    // MOV word ptr [0x470e],DI (1000_800B / 0x1800B)
    UInt16[DS, 0x470E] = DI;
    label_1000_800F_1800F:
    // ADD DI,0x1c (1000_800F / 0x1800F)
    // DI += 0x1C;
    DI = Alu.Add16(DI, 0x1C);
    // JMP 0x1000:7fa5 (1000_8012 / 0x18012)
    goto label_1000_7FA5_17FA5;
    label_1000_8014_18014:
    // ADD SP,0x6 (1000_8014 / 0x18014)
    // SP += 0x6;
    SP = Alu.Add16(SP, 0x6);
    // RET  (1000_8017 / 0x18017)
    return NearRet();
  }
  
  public Action unknown_1000_8018_18018(int gotoTarget) {
    label_1000_8018_18018:
    // MOV SI,0x88f (1000_8018 / 0x18018)
    SI = 0x88F;
    label_1000_801B_1801B:
    // ADD SI,0x1b (1000_801B / 0x1801B)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP SI,0xfbb (1000_801E / 0x1801E)
    Alu.Sub16(SI, 0xFBB);
    // JNC 0x1000:804c (1000_8022 / 0x18022)
    if(!CarryFlag) {
      goto label_1000_804C_1804C;
    }
    // MOV AL,byte ptr [SI + 0x3] (1000_8024 / 0x18024)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // TEST AL,0x40 (1000_8027 / 0x18027)
    Alu.And8(AL, 0x40);
    // JZ 0x1000:801b (1000_8029 / 0x18029)
    if(ZeroFlag) {
      goto label_1000_801B_1801B;
    }
    // AND AL,0x3 (1000_802B / 0x1802B)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // CMP AL,0x3 (1000_802D / 0x1802D)
    Alu.Sub8(AL, 0x3);
    // JNZ 0x1000:801b (1000_802F / 0x1802F)
    if(!ZeroFlag) {
      goto label_1000_801B_1801B;
    }
    // CMP DI,word ptr [SI + 0x4] (1000_8031 / 0x18031)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0x4)]);
    // JNZ 0x1000:801b (1000_8034 / 0x18034)
    if(!ZeroFlag) {
      goto label_1000_801B_1801B;
    }
    // CMP DI,word ptr [SI + 0xc] (1000_8036 / 0x18036)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0xC)]);
    // JZ 0x1000:801b (1000_8039 / 0x18039)
    if(ZeroFlag) {
      goto label_1000_801B_1801B;
    }
    // CMP BL,byte ptr [SI + 0xe] (1000_803B / 0x1803B)
    Alu.Sub8(BL, UInt8[DS, (ushort)(SI + 0xE)]);
    // JNZ 0x1000:801b (1000_803E / 0x1803E)
    if(!ZeroFlag) {
      goto label_1000_801B_1801B;
    }
    // DEC byte ptr [BX + 0x4c60] (1000_8040 / 0x18040)
    UInt8[DS, (ushort)(BX + 0x4C60)] = Alu.Dec8(UInt8[DS, (ushort)(BX + 0x4C60)]);
    // JNS 0x1000:801b (1000_8044 / 0x18044)
    if(!SignFlag) {
      goto label_1000_801B_1801B;
    }
    // INC byte ptr [BX + 0x4c60] (1000_8046 / 0x18046)
    UInt8[DS, (ushort)(BX + 0x4C60)] = Alu.Inc8(UInt8[DS, (ushort)(BX + 0x4C60)]);
    // JMP 0x1000:801b (1000_804A / 0x1804A)
    goto label_1000_801B_1801B;
    label_1000_804C_1804C:
    // CMP DI,word ptr [0x1150] (1000_804C / 0x1804C)
    Alu.Sub16(DI, UInt16[DS, 0x1150]);
    // JNZ 0x1000:8063 (1000_8050 / 0x18050)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8063 / 0x18063)
      return NearRet();
    }
    // CMP byte ptr [0x2a],0x50 (1000_8052 / 0x18052)
    Alu.Sub8(UInt8[DS, 0x2A], 0x50);
    // JNC 0x1000:8063 (1000_8057 / 0x18057)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_8063 / 0x18063)
      return NearRet();
    }
    // DEC byte ptr [0x4c61] (1000_8059 / 0x18059)
    UInt8[DS, 0x4C61] = Alu.Dec8(UInt8[DS, 0x4C61]);
    // JNS 0x1000:8063 (1000_805D / 0x1805D)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_8063 / 0x18063)
      return NearRet();
    }
    // INC byte ptr [0x4c61] (1000_805F / 0x1805F)
    UInt8[DS, 0x4C61] = Alu.Inc8(UInt8[DS, 0x4C61]);
    label_1000_8063_18063:
    // RET  (1000_8063 / 0x18063)
    return NearRet();
  }
  
  public Action unknown_1000_80AC_180AC(int gotoTarget) {
    label_1000_80AC_180AC:
    // MOV BP,0x2136 (1000_80AC / 0x180AC)
    BP = 0x2136;
    // AND byte ptr [BP + 0x3],0xbf (1000_80AF / 0x180AF)
    // UInt8[SS, (ushort)(BP + 0x3)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0x3)] = Alu.And8(UInt8[SS, (ushort)(BP + 0x3)], 0xBF);
    // XOR CX,CX (1000_80B3 / 0x180B3)
    CX = 0;
    // MOV AL,[0x4738] (1000_80B5 / 0x180B5)
    AL = UInt8[DS, 0x4738];
    // DEC AL (1000_80B8 / 0x180B8)
    AL = Alu.Dec8(AL);
    // CMP AL,0x2 (1000_80BA / 0x180BA)
    Alu.Sub8(AL, 0x2);
    // JC 0x1000:80c3 (1000_80BC / 0x180BC)
    if(CarryFlag) {
      goto label_1000_80C3_180C3;
    }
    // OR byte ptr [BP + 0x3],0x40 (1000_80BE / 0x180BE)
    // UInt8[SS, (ushort)(BP + 0x3)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0x3)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0x3)], 0x40);
    // INC CX (1000_80C2 / 0x180C2)
    CX = Alu.Inc16(CX);
    label_1000_80C3_180C3:
    // MOV BX,0x824d (1000_80C3 / 0x180C3)
    BX = 0x824D;
    // RET  (1000_80C6 / 0x180C6)
    return NearRet();
  }
  
  public Action unknown_1000_80DF_180DF(int gotoTarget) {
    switch(gotoTarget) {
      case 0x80DF: goto label_1000_80DF_180DF;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_80DF_180DF:
    // PUSH AX (1000_80DF / 0x180DF)
    Stack.Push(AX);
    // CALL 0x1000:c08e (1000_80E0 / 0x180E0)
    NearCall(cs1, 0x80E3, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:8fd1 (1000_80E3 / 0x180E3)
    NearCall(cs1, 0x80E6, unknown_1000_8FD1_18FD1);
    // POP BX (1000_80E6 / 0x180E6)
    BX = Stack.Pop();
    // MOV SI,0x2244 (1000_80E7 / 0x180E7)
    SI = 0x2244;
    // MOV AX,word ptr [SI + 0x2] (1000_80EA / 0x180EA)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // PUSH AX (1000_80ED / 0x180ED)
    Stack.Push(AX);
    // PUSH word ptr [SI + 0x6] (1000_80EE / 0x180EE)
    Stack.Push(UInt16[DS, (ushort)(SI + 0x6)]);
    // PUSH BX (1000_80F1 / 0x180F1)
    Stack.Push(BX);
    // CMP AX,0x32 (1000_80F2 / 0x180F2)
    Alu.Sub16(AX, 0x32);
    // JC 0x1000:80fa (1000_80F5 / 0x180F5)
    if(CarryFlag) {
      goto label_1000_80FA_180FA;
    }
    // ADD AX,0x26 (1000_80F7 / 0x180F7)
    // AX += 0x26;
    AX = Alu.Add16(AX, 0x26);
    label_1000_80FA_180FA:
    // MOV word ptr [SI + 0x2],AX (1000_80FA / 0x180FA)
    UInt16[DS, (ushort)(SI + 0x2)] = AX;
    // MOV word ptr [SI + 0x6],0x19 (1000_80FD / 0x180FD)
    UInt16[DS, (ushort)(SI + 0x6)] = 0x19;
    // CALL 0x1000:9f82 (1000_8102 / 0x18102)
    NearCall(cs1, 0x8105, unknown_1000_9F82_19F82);
    // POP AX (1000_8105 / 0x18105)
    AX = Stack.Pop();
    // CALL 0x1000:88af (1000_8106 / 0x18106)
    NearCall(cs1, 0x8109, unknown_1000_88AF_188AF);
    // CMP byte ptr [0x4774],0x0 (1000_8109 / 0x18109)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JNZ 0x1000:811e (1000_810E / 0x1810E)
    if(!ZeroFlag) {
      goto label_1000_811E_1811E;
    }
    // MOV AX,0x10a (1000_8110 / 0x18110)
    AX = 0x10A;
    // ADD AX,word ptr [0xd810] (1000_8113 / 0x18113)
    // AX += UInt16[DS, 0xD810];
    AX = Alu.Add16(AX, UInt16[DS, 0xD810]);
    // ADD word ptr [0x4780],AX (1000_8117 / 0x18117)
    // UInt16[DS, 0x4780] += AX;
    UInt16[DS, 0x4780] = Alu.Add16(UInt16[DS, 0x4780], AX);
    // CALL 0x1000:9efd (1000_811B / 0x1811B)
    NearCall(cs1, 0x811E, unknown_1000_9EFD_19EFD);
    label_1000_811E_1811E:
    // POP word ptr [0x224a] (1000_811E / 0x1811E)
    UInt16[DS, 0x224A] = Stack.Pop();
    // POP word ptr [0x2246] (1000_8122 / 0x18122)
    UInt16[DS, 0x2246] = Stack.Pop();
    // CALL 0x1000:c07c (1000_8126 / 0x18126)
    NearCall(cs1, 0x8129, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV word ptr [0x4720],0x18f3 (1000_8129 / 0x18129)
    UInt16[DS, 0x4720] = 0x18F3;
    // MOV byte ptr [0x4722],0x0 (1000_812F / 0x1812F)
    UInt8[DS, 0x4722] = 0x0;
    // CALL 0x1000:541f (1000_8134 / 0x18134)
    NearCall(cs1, 0x8137, unknown_1000_541F_1541F);
    // MOV word ptr [0x1bea],0x0 (1000_8137 / 0x18137)
    UInt16[DS, 0x1BEA] = 0x0;
    // RET  (1000_813D / 0x1813D)
    return NearRet();
  }
  
  public Action unknown_1000_813E_1813E(int gotoTarget) {
    label_1000_813E_1813E:
    // SUB SP,0x30 (1000_813E / 0x1813E)
    // SP -= 0x30;
    SP = Alu.Sub16(SP, 0x30);
    // MOV DI,SP (1000_8141 / 0x18141)
    DI = SP;
    // CALL 0x1000:68eb (1000_8143 / 0x18143)
    NearCall(cs1, 0x8146, unknown_1000_68EB_168EB);
    // MOV DX,word ptr [SI + 0x6] (1000_8146 / 0x18146)
    DX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV BX,word ptr [SI + 0x8] (1000_8149 / 0x18149)
    BX = UInt16[DS, (ushort)(SI + 0x8)];
    // CALL 0x1000:81d7 (1000_814C / 0x1814C)
    NearCall(cs1, 0x814F, unknown_1000_81D7_181D7);
    // CMP SI,0x8e0 (1000_814F / 0x1814F)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:816a (1000_8153 / 0x18153)
    if(!ZeroFlag) {
      goto label_1000_816A_1816A;
    }
    // MOV SI,0x4718 (1000_8155 / 0x18155)
    SI = 0x4718;
    label_1000_8158_18158:
    // LODSW SI (1000_8158 / 0x18158)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_8159 / 0x18159)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:8176 (1000_815B / 0x1815B)
    if(ZeroFlag) {
      goto label_1000_8176_18176;
    }
    // MOV BX,AX (1000_815D / 0x1815D)
    BX = AX;
    // MOV DX,word ptr [BX + 0x2] (1000_815F / 0x1815F)
    DX = UInt16[DS, (ushort)(BX + 0x2)];
    // MOV BX,word ptr [BX + 0x4] (1000_8162 / 0x18162)
    BX = UInt16[DS, (ushort)(BX + 0x4)];
    // CALL 0x1000:81d7 (1000_8165 / 0x18165)
    NearCall(cs1, 0x8168, unknown_1000_81D7_181D7);
    // JMP 0x1000:8158 (1000_8168 / 0x18168)
    goto label_1000_8158_18158;
    label_1000_816A_1816A:
    // MOV BX,word ptr [SI + 0x4] (1000_816A / 0x1816A)
    BX = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV DX,word ptr [BX + 0x2] (1000_816D / 0x1816D)
    DX = UInt16[DS, (ushort)(BX + 0x2)];
    // MOV BX,word ptr [BX + 0x4] (1000_8170 / 0x18170)
    BX = UInt16[DS, (ushort)(BX + 0x4)];
    // CALL 0x1000:81d7 (1000_8173 / 0x18173)
    NearCall(cs1, 0x8176, unknown_1000_81D7_181D7);
    label_1000_8176_18176:
    // MOV SI,SP (1000_8176 / 0x18176)
    SI = SP;
    label_1000_8178_18178:
    // LODSW SI (1000_8178 / 0x18178)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_8179 / 0x18179)
    DX = AX;
    // LODSW SI (1000_817B / 0x1817B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_817C / 0x1817C)
    BX = AX;
    // LODSW SI (1000_817E / 0x1817E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,word ptr [SI] (1000_817F / 0x1817F)
    DI = UInt16[DS, SI];
    // CMP DI,0x8000 (1000_8181 / 0x18181)
    Alu.Sub16(DI, 0x8000);
    // JZ 0x1000:81d3 (1000_8185 / 0x18185)
    if(ZeroFlag) {
      goto label_1000_81D3_181D3;
    }
    // PUSH SI (1000_8187 / 0x18187)
    Stack.Push(SI);
    // MOV CX,word ptr [SI + 0x2] (1000_8188 / 0x18188)
    CX = UInt16[DS, (ushort)(SI + 0x2)];
    // SUB AX,word ptr [SI + 0x4] (1000_818B / 0x1818B)
    // AX -= UInt16[DS, (ushort)(SI + 0x4)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x4)]);
    // MOV SI,DX (1000_818E / 0x1818E)
    SI = DX;
    // SUB SI,DI (1000_8190 / 0x18190)
    // SI -= DI;
    SI = Alu.Sub16(SI, DI);
    // XOR AX,SI (1000_8192 / 0x18192)
    // AX ^= SI;
    AX = Alu.Xor16(AX, SI);
    // JNS 0x1000:81c0 (1000_8194 / 0x18194)
    if(!SignFlag) {
      goto label_1000_81C0_181C0;
    }
    // MOV AX,SI (1000_8196 / 0x18196)
    AX = SI;
    // OR AX,AX (1000_8198 / 0x18198)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:819e (1000_819A / 0x1819A)
    if(!SignFlag) {
      goto label_1000_819E_1819E;
    }
    // NEG AX (1000_819C / 0x1819C)
    AX = Alu.Sub16(0, AX);
    label_1000_819E_1819E:
    // CMP AX,0x50 (1000_819E / 0x1819E)
    Alu.Sub16(AX, 0x50);
    // JC 0x1000:81c0 (1000_81A1 / 0x181A1)
    if(CarryFlag) {
      goto label_1000_81C0_181C0;
    }
    // CMP DX,word ptr [0x46e3] (1000_81A3 / 0x181A3)
    Alu.Sub16(DX, UInt16[DS, 0x46E3]);
    // JL 0x1000:81b5 (1000_81A7 / 0x181A7)
    if(SignFlag != OverflowFlag) {
      goto label_1000_81B5_181B5;
    }
    // CMP DX,word ptr [0x46e7] (1000_81A9 / 0x181A9)
    Alu.Sub16(DX, UInt16[DS, 0x46E7]);
    // JGE 0x1000:81b5 (1000_81AD / 0x181AD)
    if(SignFlag == OverflowFlag) {
      goto label_1000_81B5_181B5;
    }
    // XCHG DI,DX (1000_81AF / 0x181AF)
    ushort tmp_1000_81AF = DI;
    DI = DX;
    DX = tmp_1000_81AF;
    // XCHG CX,BX (1000_81B1 / 0x181B1)
    ushort tmp_1000_81B1 = CX;
    CX = BX;
    BX = tmp_1000_81B1;
    // NEG SI (1000_81B3 / 0x181B3)
    SI = Alu.Sub16(0, SI);
    label_1000_81B5_181B5:
    // MOV AX,0x190 (1000_81B5 / 0x181B5)
    AX = 0x190;
    // OR SI,SI (1000_81B8 / 0x181B8)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JS 0x1000:81be (1000_81BA / 0x181BA)
    if(SignFlag) {
      goto label_1000_81BE_181BE;
    }
    // NEG AX (1000_81BC / 0x181BC)
    AX = Alu.Sub16(0, AX);
    label_1000_81BE_181BE:
    // ADD DX,AX (1000_81BE / 0x181BE)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    label_1000_81C0_181C0:
    // MOV ES,word ptr [0xdbda] (1000_81C0 / 0x181C0)
    ES = UInt16[DS, 0xDBDA];
    // MOV AL,0xc (1000_81C4 / 0x181C4)
    AL = 0xC;
    // MOV BP,0x5555 (1000_81C6 / 0x181C6)
    BP = 0x5555;
    // MOV SI,0x46e3 (1000_81C9 / 0x181C9)
    SI = 0x46E3;
    // CALLF [0x3901] (1000_81CC / 0x181CC)
    // Indirect call to [0x3901], generating possible targets from emulator records
    uint targetAddress_1000_81CC = (uint)(UInt16[DS, 0x3903] * 0x10 + UInt16[DS, 0x3901] - cs1 * 0x10);
    switch(targetAddress_1000_81CC) {
      case 0x235E9 : FarCall(cs1, 0x81D0, unknown_334B_0139_335E9);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_81CC);
        break;
    }
    // POP SI (1000_81D0 / 0x181D0)
    SI = Stack.Pop();
    // JMP 0x1000:8178 (1000_81D1 / 0x181D1)
    goto label_1000_8178_18178;
    label_1000_81D3_181D3:
    // ADD SP,0x30 (1000_81D3 / 0x181D3)
    // SP += 0x30;
    SP = Alu.Add16(SP, 0x30);
    // RET  (1000_81D6 / 0x181D6)
    return NearRet();
  }
  
  public Action unknown_1000_81D7_181D7(int gotoTarget) {
    label_1000_81D7_181D7:
    // MOV word ptr [DI + 0x4],DX (1000_81D7 / 0x181D7)
    UInt16[DS, (ushort)(DI + 0x4)] = DX;
    // PUSH DI (1000_81DA / 0x181DA)
    Stack.Push(DI);
    // CALL 0x1000:b647 (1000_81DB / 0x181DB)
    NearCall(cs1, 0x81DE, unknown_1000_B647_1B647);
    // POP DI (1000_81DE / 0x181DE)
    DI = Stack.Pop();
    // MOV word ptr [DI],DX (1000_81DF / 0x181DF)
    UInt16[DS, DI] = DX;
    // MOV word ptr [DI + 0x2],BX (1000_81E1 / 0x181E1)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // ADD DI,0x6 (1000_81E4 / 0x181E4)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    // MOV word ptr [DI],0x8000 (1000_81E7 / 0x181E7)
    UInt16[DS, DI] = 0x8000;
    // RET  (1000_81EB / 0x181EB)
    return NearRet();
  }
  
  public Action unknown_1000_81EC_181EC(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8214: goto label_1000_8214_18214;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_81EC_181EC:
    // CALL 0x1000:c13b (1000_81EC / 0x181EC)
    NearCall(cs1, 0x81EF, unknown_1000_C13B_1C13B);
    // MOV DI,word ptr [0xdbe2] (1000_81EF / 0x181EF)
    DI = UInt16[DS, 0xDBE2];
    // CALL 0x1000:d6fe (1000_81F3 / 0x181F3)
    NearCall(cs1, 0x81F6, unknown_1000_D6FE_1D6FE);
    // JNC 0x1000:8246 (1000_81F6 / 0x181F6)
    if(!CarryFlag) {
      goto label_1000_8246_18246;
    }
    // CALL 0x1000:5944 (1000_81F8 / 0x181F8)
    NearCall(cs1, 0x81FB, unknown_1000_5944_15944);
    // MOV byte ptr [0x46eb],0x40 (1000_81FB / 0x181FB)
    UInt8[DS, 0x46EB] = 0x40;
    // MOV AL,0xff (1000_8200 / 0x18200)
    AL = 0xFF;
    // CALL 0x1000:5e6d (1000_8202 / 0x18202)
    NearCall(cs1, 0x8205, unknown_1000_5E6D_15E6D);
    // MOV byte ptr [0x46eb],0xc0 (1000_8205 / 0x18205)
    UInt8[DS, 0x46EB] = 0xC0;
    // CMP AX,0x9 (1000_820A / 0x1820A)
    Alu.Sub16(AX, 0x9);
    // JNC 0x1000:824c (1000_820D / 0x1820D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_824C / 0x1824C)
      return NearRet();
    }
    // CALL 0x1000:8256 (1000_820F / 0x1820F)
    NearCall(cs1, 0x8212, unknown_1000_8256_18256);
    // JC 0x1000:824c (1000_8212 / 0x18212)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_824C / 0x1824C)
      return NearRet();
    }
    label_1000_8214_18214:
    // CALL 0x1000:82b7 (1000_8214 / 0x18214)
    NearCall(cs1, 0x8217, unknown_1000_82B7_182B7);
    // CALL 0x1000:68eb (1000_8217 / 0x18217)
    NearCall(cs1, 0x821A, unknown_1000_68EB_168EB);
    // CMP SI,0x8e0 (1000_821A / 0x1821A)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:8235 (1000_821E / 0x1821E)
    if(!ZeroFlag) {
      goto label_1000_8235_18235;
    }
    // PUSH SI (1000_8220 / 0x18220)
    Stack.Push(SI);
    // MOV SI,0x4718 (1000_8221 / 0x18221)
    SI = 0x4718;
    // MOV DI,0x11d3 (1000_8224 / 0x18224)
    DI = 0x11D3;
    // PUSH DS (1000_8227 / 0x18227)
    Stack.Push(DS);
    // POP ES (1000_8228 / 0x18228)
    ES = Stack.Pop();
    // MOVSW ES:DI,SI (1000_8229 / 0x18229)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_822A / 0x1822A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_822B / 0x1822B)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP SI (1000_822C / 0x1822C)
    SI = Stack.Pop();
    // MOV DI,word ptr [0x11d3] (1000_822D / 0x1822D)
    DI = UInt16[DS, 0x11D3];
    // OR DI,DI (1000_8231 / 0x18231)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:8246 (1000_8233 / 0x18233)
    if(ZeroFlag) {
      goto label_1000_8246_18246;
    }
    label_1000_8235_18235:
    // CALL 0x1000:82da (1000_8235 / 0x18235)
    NearCall(cs1, 0x8238, unknown_1000_82DA_182DA);
    // JNZ 0x1000:8246 (1000_8238 / 0x18238)
    if(!ZeroFlag) {
      goto label_1000_8246_18246;
    }
    // CALL 0x1000:84a6 (1000_823A / 0x1823A)
    NearCall(cs1, 0x823D, unknown_1000_84A6_184A6);
    // CALL 0x1000:d2fd (1000_823D / 0x1823D)
    NearCall(cs1, 0x8240, unknown_1000_D2FD_1D2FD);
    // CALL 0x1000:8250 (1000_8240 / 0x18240)
    NearCall(cs1, 0x8243, unknown_1000_8250_18250);
    // JMP 0x1000:878c (1000_8243 / 0x18243)
    // Jump converted to entry function call
    return unknown_1000_878C_1878C(0);
    label_1000_8246_18246:
    // CALL 0x1000:d2e2 (1000_8246 / 0x18246)
    NearCall(cs1, 0x8249, unknown_1000_D2E2_1D2E2);
    // JMP 0x1000:c13b (1000_8249 / 0x18249)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
    label_1000_824C_1824C:
    // RET  (1000_824C / 0x1824C)
    return NearRet();
  }
  
  public Action unknown_1000_824D_1824D(int gotoTarget) {
    label_1000_824D_1824D:
    // CALL 0x1000:82b7 (1000_824D / 0x1824D)
    NearCall(cs1, 0x8250, unknown_1000_82B7_182B7);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_8250_18250(0);
  }
  
  public Action unknown_1000_8250_18250(int gotoTarget) {
    label_1000_8250_18250:
    // CALL 0x1000:5ad3 (1000_8250 / 0x18250)
    NearCall(cs1, 0x8253, unknown_1000_5AD3_15AD3);
    // JMP 0x1000:c13b (1000_8253 / 0x18253)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
  }
  
  public Action unknown_1000_8256_18256(int gotoTarget) {
    label_1000_8256_18256:
    // CALL 0x1000:68eb (1000_8256 / 0x18256)
    NearCall(cs1, 0x8259, unknown_1000_68EB_168EB);
    // CMP SI,0x8e0 (1000_8259 / 0x18259)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:829e (1000_825D / 0x1825D)
    if(!ZeroFlag) {
      goto label_1000_829E_1829E;
    }
    // MOV AL,byte ptr [DI + 0x8] (1000_825F / 0x1825F)
    AL = UInt8[DS, (ushort)(DI + 0x8)];
    // CMP AL,0x20 (1000_8262 / 0x18262)
    Alu.Sub8(AL, 0x20);
    // JC 0x1000:826c (1000_8264 / 0x18264)
    if(CarryFlag) {
      goto label_1000_826C_1826C;
    }
    // TEST byte ptr [DI + 0xa],0x8 (1000_8266 / 0x18266)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x8);
    // JZ 0x1000:8296 (1000_826A / 0x1826A)
    if(ZeroFlag) {
      goto label_1000_8296_18296;
    }
    label_1000_826C_1826C:
    // CMP byte ptr [0x4738],0x3 (1000_826C / 0x1826C)
    Alu.Sub8(UInt8[DS, 0x4738], 0x3);
    // JC 0x1000:8276 (1000_8271 / 0x18271)
    if(CarryFlag) {
      goto label_1000_8276_18276;
    }
    // CALL 0x1000:80c8 (1000_8273 / 0x18273)
    throw FailAsUntested("Could not find a valid function at address 1000_80C8 / 0x180C8");
    label_1000_8276_18276:
    // XOR BX,BX (1000_8276 / 0x18276)
    BX = 0;
    // MOV BL,byte ptr [0x4738] (1000_8278 / 0x18278)
    BL = UInt8[DS, 0x4738];
    // INC byte ptr [0x4738] (1000_827C / 0x1827C)
    UInt8[DS, 0x4738] = Alu.Inc8(UInt8[DS, 0x4738]);
    // SHL BX,1 (1000_8280 / 0x18280)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV word ptr [BX + 0x4718],DI (1000_8282 / 0x18282)
    UInt16[DS, (ushort)(BX + 0x4718)] = DI;
    // CALL 0x1000:542f (1000_8286 / 0x18286)
    NearCall(cs1, 0x8289, unknown_1000_542F_1542F);
    // CALL 0x1000:80ac (1000_8289 / 0x18289)
    NearCall(cs1, 0x828C, unknown_1000_80AC_180AC);
    // CALL 0x1000:d33a (1000_828C / 0x1828C)
    NearCall(cs1, 0x828F, unknown_1000_D33A_1D33A);
    // CMP byte ptr [0x4738],0x3 (1000_828F / 0x1828F)
    Alu.Sub8(UInt8[DS, 0x4738], 0x3);
    // JNC 0x1000:8298 (1000_8294 / 0x18294)
    if(!CarryFlag) {
      goto label_1000_8298_18298;
    }
    label_1000_8296_18296:
    // STC  (1000_8296 / 0x18296)
    CarryFlag = true;
    // RET  (1000_8297 / 0x18297)
    return NearRet();
    label_1000_8298_18298:
    // MOV AX,0x32 (1000_8298 / 0x18298)
    AX = 0x32;
    // CALL 0x1000:e3a0 (1000_829B / 0x1829B)
    NearCall(cs1, 0x829E, unknown_1000_E3A0_1E3A0);
    label_1000_829E_1829E:
    // CLC  (1000_829E / 0x1829E)
    CarryFlag = false;
    // RET  (1000_829F / 0x1829F)
    return NearRet();
  }
  
  public Action unknown_1000_82B7_182B7(int gotoTarget) {
    label_1000_82B7_182B7:
    // TEST byte ptr [0x46eb],0x40 (1000_82B7 / 0x182B7)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:82d9 (1000_82BC / 0x182BC)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_82D9 / 0x182D9)
      return NearRet();
    }
    // CALL 0x1000:58fa (1000_82BE / 0x182BE)
    NearCall(cs1, 0x82C1, unknown_1000_58FA_158FA);
    // CALL 0x1000:e270 (1000_82C1 / 0x182C1)
    NearCall(cs1, 0x82C4, PushAll_1000_E270_1E270);
    // CALL 0x1000:c08e (1000_82C4 / 0x182C4)
    NearCall(cs1, 0x82C7, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV SI,0x18e9 (1000_82C7 / 0x182C7)
    SI = 0x18E9;
    // CALL 0x1000:c551 (1000_82CA / 0x182CA)
    NearCall(cs1, 0x82CD, unknown_1000_C551_1C551);
    // CALL 0x1000:68eb (1000_82CD / 0x182CD)
    NearCall(cs1, 0x82D0, unknown_1000_68EB_168EB);
    // CALL 0x1000:7be0 (1000_82D0 / 0x182D0)
    NearCall(cs1, 0x82D3, unknown_1000_7BE0_17BE0);
    // CALL 0x1000:c07c (1000_82D3 / 0x182D3)
    NearCall(cs1, 0x82D6, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:e283 (1000_82D6 / 0x182D6)
    NearCall(cs1, 0x82D9, PopAll_1000_E283_1E283);
    label_1000_82D9_182D9:
    // RET  (1000_82D9 / 0x182D9)
    return NearRet();
  }
  
  public Action unknown_1000_82DA_182DA(int gotoTarget) {
    label_1000_82DA_182DA:
    // PUSH DI (1000_82DA / 0x182DA)
    Stack.Push(DI);
    // PUSH SI (1000_82DB / 0x182DB)
    Stack.Push(SI);
    // MOV BP,word ptr [SI + 0x4] (1000_82DC / 0x182DC)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP SI,0x8e0 (1000_82DF / 0x182DF)
    Alu.Sub16(SI, 0x8E0);
    // JZ 0x1000:82eb (1000_82E3 / 0x182E3)
    if(ZeroFlag) {
      goto label_1000_82EB_182EB;
    }
    // MOV AL,0x10 (1000_82E5 / 0x182E5)
    AL = 0x10;
    // CMP DI,BP (1000_82E7 / 0x182E7)
    Alu.Sub16(DI, BP);
    // JZ 0x1000:82fa (1000_82E9 / 0x182E9)
    if(ZeroFlag) {
      goto label_1000_82FA_182FA;
    }
    label_1000_82EB_182EB:
    // PUSH BP (1000_82EB / 0x182EB)
    Stack.Push(BP);
    // MOV word ptr [SI + 0x4],DI (1000_82EC / 0x182EC)
    UInt16[DS, (ushort)(SI + 0x4)] = DI;
    // CALL 0x1000:31f6 (1000_82EF / 0x182EF)
    NearCall(cs1, 0x82F2, unknown_1000_31F6_131F6);
    // CALL 0x1000:2e98 (1000_82F2 / 0x182F2)
    NearCall(cs1, 0x82F5, unknown_1000_2E98_12E98);
    // POP word ptr [SI + 0x4] (1000_82F5 / 0x182F5)
    UInt16[DS, (ushort)(SI + 0x4)] = Stack.Pop();
    // MOV AL,0xb (1000_82F8 / 0x182F8)
    AL = 0xB;
    label_1000_82FA_182FA:
    // CALL 0x1000:9f82 (1000_82FA / 0x182FA)
    NearCall(cs1, 0x82FD, unknown_1000_9F82_19F82);
    // CALL 0x1000:a1c4 (1000_82FD / 0x182FD)
    NearCall(cs1, 0x8300, unknown_1000_A1C4_1A1C4);
    // CALL 0x1000:7bbe (1000_8300 / 0x18300)
    NearCall(cs1, 0x8303, unknown_1000_7BBE_17BBE);
    // POP SI (1000_8303 / 0x18303)
    SI = Stack.Pop();
    // POP DI (1000_8304 / 0x18304)
    DI = Stack.Pop();
    // JMP 0x1000:a1e2 (1000_8305 / 0x18305)
    // Jump converted to entry function call
    return unknown_1000_A1E2_1A1E2(0);
  }
  
  public Action unknown_1000_8308_18308(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8313: goto label_1000_8313_18313;break;
      case 0x5D44: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_5D44_15D44:
    // TEST byte ptr [0x11c9],0x3 (1000_5D44 / 0x15D44)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JZ 0x1000:5d50 (1000_5D49 / 0x15D49)
    if(ZeroFlag) {
      goto label_1000_5D50_15D50;
    }
    // OR byte ptr [0x4728],0x1 (1000_5D4B / 0x15D4B)
    // UInt8[DS, 0x4728] |= 0x1;
    UInt8[DS, 0x4728] = Alu.Or8(UInt8[DS, 0x4728], 0x1);
    label_1000_5D50_15D50:
    // PUSH SI (1000_5D50 / 0x15D50)
    Stack.Push(SI);
    // PUSH DI (1000_5D51 / 0x15D51)
    Stack.Push(DI);
    // TEST byte ptr [DI + 0xa],0x80 (1000_5D52 / 0x15D52)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x80);
    // JNZ 0x1000:5d6a (1000_5D56 / 0x15D56)
    if(!ZeroFlag) {
      goto label_1000_5D6A_15D6A;
    }
    // CMP byte ptr [0x46eb],0x0 (1000_5D58 / 0x15D58)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JZ 0x1000:5d6a (1000_5D5D / 0x15D5D)
    if(ZeroFlag) {
      goto label_1000_5D6A_15D6A;
    }
    // MOV SI,DI (1000_5D5F / 0x15D5F)
    SI = DI;
    // CALL 0x1000:62c9 (1000_5D61 / 0x15D61)
    NearCall(cs1, 0x5D64, unknown_1000_62C9_162C9);
    // JC 0x1000:5d6a (1000_5D64 / 0x15D64)
    if(CarryFlag) {
      goto label_1000_5D6A_15D6A;
    }
    // INC byte ptr [0x46ec] (1000_5D66 / 0x15D66)
    UInt8[DS, 0x46EC] = Alu.Inc8(UInt8[DS, 0x46EC]);
    label_1000_5D6A_15D6A:
    // POP DI (1000_5D6A / 0x15D6A)
    DI = Stack.Pop();
    // POP SI (1000_5D6B / 0x15D6B)
    SI = Stack.Pop();
    // RET  (1000_5D6C / 0x15D6C)
    return NearRet();
    label_1000_7429_17429:
    // CMP DI,word ptr [0x114e] (1000_7429 / 0x17429)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JZ 0x1000:7434 (1000_742D / 0x1742D)
    if(ZeroFlag) {
      goto label_1000_7434_17434;
    }
    // MOV AL,0x7 (1000_742F / 0x1742F)
    AL = 0x7;
    // CALL 0x1000:71b2 (1000_7431 / 0x17431)
    throw FailAsUntested("Could not find a valid function at address 1000_71B2 / 0x171B2");
    label_1000_7434_17434:
    // CMP byte ptr [DI + 0x8],0x28 (1000_7434 / 0x17434)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JNC 0x1000:7443 (1000_7438 / 0x17438)
    if(!CarryFlag) {
      goto label_1000_7443_17443;
    }
    // AND byte ptr [DI + 0xa],0xfd (1000_743A / 0x1743A)
    // UInt8[DS, (ushort)(DI + 0xA)] &= 0xFD;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0xFD);
    // MOV BP,0x75af (1000_743E / 0x1743E)
    BP = 0x75AF;
    // JMP 0x1000:7479 (1000_7441 / 0x17441)
    goto label_1000_7479_17479;
    label_1000_7443_17443:
    // PUSH SI (1000_7443 / 0x17443)
    Stack.Push(SI);
    // PUSH DI (1000_7444 / 0x17444)
    Stack.Push(DI);
    // MOV byte ptr [DI + 0xb],0x5 (1000_7445 / 0x17445)
    UInt8[DS, (ushort)(DI + 0xB)] = 0x5;
    // CALL 0x1000:644e (1000_7449 / 0x17449)
    NearCall(cs1, 0x744C, unknown_1000_644E_1644E);
    // POP DI (1000_744C / 0x1744C)
    DI = Stack.Pop();
    // POP SI (1000_744D / 0x1744D)
    SI = Stack.Pop();
    // CALL 0x1000:1ac5 (1000_744E / 0x1744E)
    NearCall(cs1, 0x7451, unknown_1000_1AC5_11AC5);
    // ADD AL,0x2 (1000_7451 / 0x17451)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    // MOV byte ptr [DI + 0xb],AL (1000_7453 / 0x17453)
    UInt8[DS, (ushort)(DI + 0xB)] = AL;
    // MOV AL,0x4 (1000_7456 / 0x17456)
    AL = 0x4;
    // CALL 0x1000:6f78 (1000_7458 / 0x17458)
    NearCall(cs1, 0x745B, unknown_1000_6F78_16F78);
    // MOV AL,0x1 (1000_745B / 0x1745B)
    AL = 0x1;
    // CALL 0x1000:6f56 (1000_745D / 0x1745D)
    throw FailAsUntested("Could not find a valid function at address 1000_6F56 / 0x16F56");
    // OR byte ptr [DI + 0xa],0x8 (1000_7460 / 0x17460)
    // UInt8[DS, (ushort)(DI + 0xA)] |= 0x8;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xA)], 0x8);
    // PUSH CX (1000_7464 / 0x17464)
    Stack.Push(CX);
    // MOV CL,byte ptr [DI] (1000_7465 / 0x17465)
    CL = UInt8[DS, DI];
    // MOV AX,0x8000 (1000_7467 / 0x17467)
    AX = 0x8000;
    // ROL AX,CL (1000_746A / 0x1746A)
    AX = Alu.Rol16(AX, CL);
    // MOV [0x115a],AX (1000_746C / 0x1746C)
    UInt16[DS, 0x115A] = AX;
    // POP CX (1000_746F / 0x1746F)
    CX = Stack.Pop();
    // MOV BP,0x75af (1000_7470 / 0x17470)
    BP = 0x75AF;
    // CALL 0x1000:6603 (1000_7473 / 0x17473)
    NearCall(cs1, 0x7476, unknown_1000_6603_16603);
    // MOV BP,0x75ea (1000_7476 / 0x17476)
    BP = 0x75EA;
    label_1000_7479_17479:
    // CALL 0x1000:6603 (1000_7479 / 0x17479)
    NearCall(cs1, 0x747C, unknown_1000_6603_16603);
    // XOR DX,DX (1000_747C / 0x1747C)
    DX = 0;
    // TEST word ptr [0x0],0x3 (1000_747E / 0x1747E)
    Alu.And16(UInt16[DS, 0x0], 0x3);
    // JNZ 0x1000:7487 (1000_7484 / 0x17484)
    if(!ZeroFlag) {
      goto label_1000_7487_17487;
    }
    // INC DX (1000_7486 / 0x17486)
    DX = Alu.Inc16(DX);
    label_1000_7487_17487:
    // XOR CX,CX (1000_7487 / 0x17487)
    CX = 0;
    // MOV BP,0x762a (1000_7489 / 0x17489)
    BP = 0x762A;
    // CALL 0x1000:6603 (1000_748C / 0x1748C)
    NearCall(cs1, 0x748F, unknown_1000_6603_16603);
    // CMP CX,DX (1000_748F / 0x1748F)
    Alu.Sub16(CX, DX);
    // JA 0x1000:7487 (1000_7491 / 0x17491)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_7487_17487;
    }
    // PUSH SI (1000_7493 / 0x17493)
    Stack.Push(SI);
    // PUSH DI (1000_7494 / 0x17494)
    Stack.Push(DI);
    // CALL 0x1000:1cda (1000_7495 / 0x17495)
    NearCall(cs1, 0x7498, unknown_1000_1CDA_11CDA);
    // CMP DL,0x1 (1000_7498 / 0x17498)
    Alu.Sub8(DL, 0x1);
    // JA 0x1000:74b1 (1000_749B / 0x1749B)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_74B1_174B1;
    }
    // MOV byte ptr [0xc2],0x1 (1000_749D / 0x1749D)
    UInt8[DS, 0xC2] = 0x1;
    // AND byte ptr [0xff7],0xfd (1000_74A2 / 0x174A2)
    // UInt8[DS, 0xFF7] &= 0xFD;
    UInt8[DS, 0xFF7] = Alu.And8(UInt8[DS, 0xFF7], 0xFD);
    // AND byte ptr [0x1007],0xfd (1000_74A7 / 0x174A7)
    // UInt8[DS, 0x1007] &= 0xFD;
    UInt8[DS, 0x1007] = Alu.And8(UInt8[DS, 0x1007], 0xFD);
    // POP DI (1000_74AC / 0x174AC)
    DI = Stack.Pop();
    // CALL 0x1000:765e (1000_74AD / 0x174AD)
    throw FailAsUntested("Could not find a valid function at address 1000_765E / 0x1765E");
    // PUSH DI (1000_74B0 / 0x174B0)
    Stack.Push(DI);
    label_1000_74B1_174B1:
    // POP DI (1000_74B1 / 0x174B1)
    DI = Stack.Pop();
    // POP SI (1000_74B2 / 0x174B2)
    SI = Stack.Pop();
    // JMP 0x1000:5d50 (1000_74B3 / 0x174B3)
    goto label_1000_5D50_15D50;
    entry:
    label_1000_8308_18308:
    // MOV CX,0x4 (1000_8308 / 0x18308)
    CX = 0x4;
    // TEST byte ptr [SI + 0x19],0x40 (1000_830B / 0x1830B)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x19)], 0x40);
    // JZ 0x1000:8313 (1000_830F / 0x1830F)
    if(ZeroFlag) {
      goto label_1000_8313_18313;
    }
    // MOV CL,0x8 (1000_8311 / 0x18311)
    CL = 0x8;
    label_1000_8313_18313:
    // PUSH CX (1000_8313 / 0x18313)
    Stack.Push(CX);
    // CALL 0x1000:8604 (1000_8314 / 0x18314)
    NearCall(cs1, 0x8317, unknown_1000_8604_18604);
    // POP CX (1000_8317 / 0x18317)
    CX = Stack.Pop();
    // MOV AX,BX (1000_8318 / 0x18318)
    AX = BX;
    // OR AX,DX (1000_831A / 0x1831A)
    // AX |= DX;
    AX = Alu.Or16(AX, DX);
    // JZ 0x1000:8357 (1000_831C / 0x1831C)
    if(ZeroFlag) {
      goto label_1000_8357_18357;
    }
    // ADD word ptr [SI + 0x6],DX (1000_831E / 0x1831E)
    // UInt16[DS, (ushort)(SI + 0x6)] += DX;
    UInt16[DS, (ushort)(SI + 0x6)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x6)], DX);
    // ADD word ptr [SI + 0x8],BX (1000_8321 / 0x18321)
    // UInt16[DS, (ushort)(SI + 0x8)] += BX;
    UInt16[DS, (ushort)(SI + 0x8)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x8)], BX);
    // LOOP 0x1000:8313 (1000_8324 / 0x18324)
    if(--CX != 0) {
      goto label_1000_8313_18313;
    }
    // CALL 0x1000:686e (1000_8326 / 0x18326)
    NearCall(cs1, 0x8329, unknown_1000_686E_1686E);
    // JC 0x1000:8333 (1000_8329 / 0x18329)
    if(CarryFlag) {
      goto label_1000_8333_18333;
    }
    // CALL 0x1000:6917 (1000_832B / 0x1832B)
    NearCall(cs1, 0x832E, unknown_1000_6917_16917);
    // JNZ 0x1000:833c (1000_832E / 0x1832E)
    if(!ZeroFlag) {
      goto label_1000_833C_1833C;
    }
    // JMP 0x1000:c653 (1000_8330 / 0x18330)
    goto label_1000_C653_1C653;
    label_1000_8333_18333:
    // CALL 0x1000:6917 (1000_8333 / 0x18333)
    NearCall(cs1, 0x8336, unknown_1000_6917_16917);
    // JNZ 0x1000:833b (1000_8336 / 0x18336)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_833B / 0x1833B)
      return NearRet();
    }
    // JMP 0x1000:c58a (1000_8338 / 0x18338)
    // Jump converted to entry function call
    return unknown_1000_C58A_1C58A(0);
    label_1000_833B_1833B:
    // RET  (1000_833B / 0x1833B)
    return NearRet();
    label_1000_833C_1833C:
    // CALL 0x1000:6827 (1000_833C / 0x1833C)
    throw FailAsUntested("Could not find a valid function at address 1000_6827 / 0x16827");
    // CALL 0x1000:c5cf (1000_833F / 0x1833F)
    NearCall(cs1, 0x8342, unknown_1000_C5CF_1C5CF);
    // MOV SI,DI (1000_8342 / 0x18342)
    SI = DI;
    // JMP 0x1000:c6ad (1000_8344 / 0x18344)
    // Jump converted to entry function call
    return unknown_1000_C6AD_1C6AD(0);
    label_1000_8357_18357:
    // CMP SI,0x8e0 (1000_8357 / 0x18357)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:8368 (1000_835B / 0x1835B)
    if(!ZeroFlag) {
      goto label_1000_8368_18368;
    }
    // MOV AX,[0x11d3] (1000_835D / 0x1835D)
    AX = UInt16[DS, 0x11D3];
    // CMP AX,word ptr [SI + 0x4] (1000_8360 / 0x18360)
    Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JNZ 0x1000:8368 (1000_8363 / 0x18363)
    if(!ZeroFlag) {
      goto label_1000_8368_18368;
    }
    // CALL 0x1000:8347 (1000_8365 / 0x18365)
    NearCall(cs1, 0x8368, unknown_1000_8347_18347);
    label_1000_8368_18368:
    // MOV AL,byte ptr [SI + 0x3] (1000_8368 / 0x18368)
    AL = UInt8[DS, (ushort)(SI + 0x3)];
    // AND AL,0xf (1000_836B / 0x1836B)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // MOV DI,word ptr [SI + 0x4] (1000_836D / 0x1836D)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV DX,word ptr [DI + 0x2] (1000_8370 / 0x18370)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [DI + 0x4] (1000_8373 / 0x18373)
    BX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV word ptr [SI + 0x6],DX (1000_8376 / 0x18376)
    UInt16[DS, (ushort)(SI + 0x6)] = DX;
    // MOV word ptr [SI + 0x8],BX (1000_8379 / 0x18379)
    UInt16[DS, (ushort)(SI + 0x8)] = BX;
    // TEST byte ptr [DI + 0xa],0x2 (1000_837C / 0x1837C)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:8387 (1000_8380 / 0x18380)
    if(!ZeroFlag) {
      goto label_1000_8387_18387;
    }
    // CALL 0x1000:5d36 (1000_8382 / 0x18382)
    NearCall(cs1, 0x8385, unknown_1000_5D36_15D36);
    // JC 0x1000:83a7 (1000_8385 / 0x18385)
    if(CarryFlag) {
      goto label_1000_83A7_183A7;
    }
    label_1000_8387_18387:
    // PUSH AX (1000_8387 / 0x18387)
    Stack.Push(AX);
    // CALL 0x1000:83bc (1000_8388 / 0x18388)
    throw FailAsUntested("Could not find a valid function at address 1000_83BC / 0x183BC");
    // POP AX (1000_838B / 0x1838B)
    AX = Stack.Pop();
    // CMP AL,0x5 (1000_838C / 0x1838C)
    Alu.Sub8(AL, 0x5);
    // JZ 0x1000:839a (1000_838E / 0x1838E)
    if(ZeroFlag) {
      goto label_1000_839A_1839A;
    }
    // MOV AL,byte ptr [SI] (1000_8390 / 0x18390)
    AL = UInt8[DS, SI];
    // CMP AL,byte ptr [DI + 0x9] (1000_8392 / 0x18392)
    Alu.Sub8(AL, UInt8[DS, (ushort)(DI + 0x9)]);
    // JNZ 0x1000:83fd (1000_8395 / 0x18395)
    if(!ZeroFlag) {
      goto label_1000_83FD_183FD;
    }
    // JMP 0x1000:7429 (1000_8397 / 0x18397)
    goto label_1000_7429_17429;
    label_1000_839A_1839A:
    // TEST byte ptr [DI + 0xa],0x80 (1000_839A / 0x1839A)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x80);
    // JZ 0x1000:83fd (1000_839E / 0x1839E)
    if(ZeroFlag) {
      goto label_1000_83FD_183FD;
    }
    // AND byte ptr [DI + 0xa],0x7f (1000_83A0 / 0x183A0)
    // UInt8[DS, (ushort)(DI + 0xA)] &= 0x7F;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x7F);
    // JMP 0x1000:5d44 (1000_83A4 / 0x183A4)
    goto label_1000_5D44_15D44;
    label_1000_83A7_183A7:
    // CMP AL,0x5 (1000_83A7 / 0x183A7)
    Alu.Sub8(AL, 0x5);
    // JC 0x1000:83b6 (1000_83A9 / 0x183A9)
    if(CarryFlag) {
      goto label_1000_83B6_183B6;
    }
    // CMP AL,0x6 (1000_83AB / 0x183AB)
    Alu.Sub8(AL, 0x6);
    // JA 0x1000:83b6 (1000_83AD / 0x183AD)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_83B6_183B6;
    }
    // PUSH DI (1000_83AF / 0x183AF)
    Stack.Push(DI);
    // CALL 0x1000:6ac5 (1000_83B0 / 0x183B0)
    throw FailAsUntested("Could not find a valid function at address 1000_6AC5 / 0x16AC5");
    // POP DI (1000_83B3 / 0x183B3)
    DI = Stack.Pop();
    // XOR AL,AL (1000_83B4 / 0x183B4)
    AL = 0;
    label_1000_83B6_183B6:
    // AND AL,0x3 (1000_83B6 / 0x183B6)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // CMP AL,0x3 (1000_83B8 / 0x183B8)
    Alu.Sub8(AL, 0x3);
    // JZ 0x1000:841f (1000_83BA / 0x183BA)
    if(ZeroFlag) {
      goto label_1000_841F_1841F;
    }
    label_1000_83BC_183BC:
    // CALL 0x1000:851f (1000_83BC / 0x183BC)
    NearCall(cs1, 0x83BF, unknown_1000_851F_1851F);
    // AND byte ptr [SI + 0x3],0xbf (1000_83BF / 0x183BF)
    // UInt8[DS, (ushort)(SI + 0x3)] &= 0xBF;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0xBF);
    // CALL 0x1000:85cc (1000_83C3 / 0x183C3)
    NearCall(cs1, 0x83C6, unknown_1000_85CC_185CC);
    // CALL 0x1000:7f5f (1000_83C6 / 0x183C6)
    NearCall(cs1, 0x83C9, unknown_1000_7F5F_17F5F);
    // MOV CL,byte ptr [SI + 0x3] (1000_83C9 / 0x183C9)
    CL = UInt8[DS, (ushort)(SI + 0x3)];
    // OR CL,CL (1000_83CC / 0x183CC)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JS 0x1000:83fc (1000_83CE / 0x183CE)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_83FC / 0x183FC)
      return NearRet();
    }
    // AND CL,0xf (1000_83D0 / 0x183D0)
    // CL &= 0xF;
    CL = Alu.And8(CL, 0xF);
    // CALL 0x1000:6ad4 (1000_83D3 / 0x183D3)
    NearCall(cs1, 0x83D6, unknown_1000_6AD4_16AD4);
    // MOV DI,word ptr [SI + 0x4] (1000_83D6 / 0x183D6)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP DI,word ptr [0x114e] (1000_83D9 / 0x183D9)
    Alu.Sub16(DI, UInt16[DS, 0x114E]);
    // JNZ 0x1000:83fc (1000_83DD / 0x183DD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_83FC / 0x183FC)
      return NearRet();
    }
    // CALL 0x1000:d41b (1000_83DF / 0x183DF)
    NearCall(cs1, 0x83E2, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1f0e (1000_83E2 / 0x183E2)
    Alu.Sub16(BP, 0x1F0E);
    // JNZ 0x1000:83fc (1000_83E6 / 0x183E6)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_83FC / 0x183FC)
      return NearRet();
    }
    // MOV AL,0x1 (1000_83E8 / 0x183E8)
    AL = 0x1;
    // CMP byte ptr [0x2b],0x1 (1000_83EA / 0x183EA)
    Alu.Sub8(UInt8[DS, 0x2B], 0x1);
    // ADC AL,0x0 (1000_83EF / 0x183EF)
    AL = Alu.Adc8(AL, 0x0);
    // CMP byte ptr [0xb],AL (1000_83F1 / 0x183F1)
    Alu.Sub8(UInt8[DS, 0xB], AL);
    // JNZ 0x1000:83fc (1000_83F5 / 0x183F5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_83FC / 0x183FC)
      return NearRet();
    }
    // OR byte ptr [0x473b],0x1 (1000_83F7 / 0x183F7)
    // UInt8[DS, 0x473B] |= 0x1;
    UInt8[DS, 0x473B] = Alu.Or8(UInt8[DS, 0x473B], 0x1);
    label_1000_83FC_183FC:
    // RET  (1000_83FC / 0x183FC)
    return NearRet();
    label_1000_83FD_183FD:
    // MOV BP,0x8403 (1000_83FD / 0x183FD)
    BP = 0x8403;
    // JMP 0x1000:661d (1000_8400 / 0x18400)
    // Jump converted to entry function call
    return unknown_1000_661D_1661D(0);
    label_1000_841F_1841F:
    // MOV DI,word ptr [SI + 0x4] (1000_841F / 0x1841F)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CMP DI,word ptr [SI + 0xc] (1000_8422 / 0x18422)
    Alu.Sub16(DI, UInt16[DS, (ushort)(SI + 0xC)]);
    // JZ 0x1000:844d (1000_8425 / 0x18425)
    if(ZeroFlag) {
      goto label_1000_844D_1844D;
    }
    // PUSH SI (1000_8427 / 0x18427)
    Stack.Push(SI);
    // CALL 0x1000:7f27 (1000_8428 / 0x18428)
    NearCall(cs1, 0x842B, unknown_1000_7F27_17F27);
    // POP SI (1000_842B / 0x1842B)
    SI = Stack.Pop();
    // MOV BX,word ptr [SI + 0xe] (1000_842C / 0x1842C)
    BX = UInt16[DS, (ushort)(SI + 0xE)];
    // MOV CX,BX (1000_842F / 0x1842F)
    CX = BX;
    // XOR BH,BH (1000_8431 / 0x18431)
    BH = 0;
    // CMP byte ptr [BX + 0x46fe],0x0 (1000_8433 / 0x18433)
    Alu.Sub8(UInt8[DS, (ushort)(BX + 0x46FE)], 0x0);
    // JZ 0x1000:8442 (1000_8438 / 0x18438)
    if(ZeroFlag) {
      goto label_1000_8442_18442;
    }
    // DEC byte ptr [BX + DI + 0x14] (1000_843A / 0x1843A)
    UInt8[DS, (ushort)(BX + DI + 0x14)] = Alu.Dec8(UInt8[DS, (ushort)(BX + DI + 0x14)]);
    // OR byte ptr [SI + 0x19],CH (1000_843D / 0x1843D)
    // UInt8[DS, (ushort)(SI + 0x19)] |= CH;
    UInt8[DS, (ushort)(SI + 0x19)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x19)], CH);
    // XOR CH,CH (1000_8440 / 0x18440)
    CH = 0;
    label_1000_8442_18442:
    // MOV word ptr [SI + 0xe],CX (1000_8442 / 0x18442)
    UInt16[DS, (ushort)(SI + 0xE)] = CX;
    // MOV DI,word ptr [SI + 0xc] (1000_8445 / 0x18445)
    DI = UInt16[DS, (ushort)(SI + 0xC)];
    // MOV word ptr [SI + 0x4],DI (1000_8448 / 0x18448)
    UInt16[DS, (ushort)(SI + 0x4)] = DI;
    // JMP 0x1000:8461 (1000_844B / 0x1844B)
    // Jump converted to entry function call
    return unknown_1000_8461_18461(0);
    label_1000_844D_1844D:
    // AND byte ptr [SI + 0x3],0xfc (1000_844D / 0x1844D)
    // UInt8[DS, (ushort)(SI + 0x3)] &= 0xFC;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0xFC);
    // JMP 0x1000:83bc (1000_8451 / 0x18451)
    goto label_1000_83BC_183BC;
    label_1000_C653_1C653:
    // CALL 0x1000:c13b (1000_C653 / 0x1C653)
    NearCall(cs1, 0xC656, unknown_1000_C13B_1C13B);
    // MOV AX,word ptr [DI + 0x8] (1000_C656 / 0x1C656)
    AX = UInt16[DS, (ushort)(DI + 0x8)];
    // CALL 0x1000:c202 (1000_C659 / 0x1C659)
    NearCall(cs1, 0xC65C, unknown_1000_C202_1C202);
    // SUB DX,word ptr [DI] (1000_C65C / 0x1C65C)
    // DX -= UInt16[DS, DI];
    DX = Alu.Sub16(DX, UInt16[DS, DI]);
    // SUB BX,word ptr [DI + 0x2] (1000_C65E / 0x1C65E)
    // BX -= UInt16[DS, (ushort)(DI + 0x2)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C661_1C661(0);
  }
  
  public Action unknown_1000_8347_18347(int gotoTarget) {
    label_1000_8347_18347:
    // PUSH SI (1000_8347 / 0x18347)
    Stack.Push(SI);
    // PUSH DI (1000_8348 / 0x18348)
    Stack.Push(DI);
    // MOV DI,0x11d3 (1000_8349 / 0x18349)
    DI = 0x11D3;
    // LEA SI,[DI + 0x2] (1000_834C / 0x1834C)
    SI = (ushort)(DI + 0x2);
    // PUSH DS (1000_834F / 0x1834F)
    Stack.Push(DS);
    // POP ES (1000_8350 / 0x18350)
    ES = Stack.Pop();
    // MOVSW ES:DI,SI (1000_8351 / 0x18351)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_8352 / 0x18352)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_8353 / 0x18353)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP DI (1000_8354 / 0x18354)
    DI = Stack.Pop();
    // POP SI (1000_8355 / 0x18355)
    SI = Stack.Pop();
    // RET  (1000_8356 / 0x18356)
    return NearRet();
  }
  
  public Action unknown_1000_8461_18461(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8461: goto label_1000_8461_18461;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8461_18461:
    // CALL 0x1000:6917 (1000_8461 / 0x18461)
    NearCall(cs1, 0x8464, unknown_1000_6917_16917);
    // JZ 0x1000:8467 (1000_8464 / 0x18464)
    if(ZeroFlag) {
      goto label_1000_8467_18467;
    }
    // RET  (1000_8466 / 0x18466)
    return NearRet();
    label_1000_8467_18467:
    // PUSH SI (1000_8467 / 0x18467)
    Stack.Push(SI);
    // CALL 0x1000:c58a (1000_8468 / 0x18468)
    NearCall(cs1, 0x846B, unknown_1000_C58A_1C58A);
    // POP SI (1000_846B / 0x1846B)
    SI = Stack.Pop();
    // PUSH SI (1000_846C / 0x1846C)
    Stack.Push(SI);
    // TEST byte ptr [SI + 0x3],0x40 (1000_846D / 0x1846D)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:847b (1000_8471 / 0x18471)
    if(!ZeroFlag) {
      goto label_1000_847B_1847B;
    }
    // MOV DI,word ptr [SI + 0x4] (1000_8473 / 0x18473)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // CALL 0x1000:5ed0 (1000_8476 / 0x18476)
    NearCall(cs1, 0x8479, unknown_1000_5ED0_15ED0);
    // JNZ 0x1000:848b (1000_8479 / 0x18479)
    if(!ZeroFlag) {
      goto label_1000_848B_1848B;
    }
    label_1000_847B_1847B:
    // MOV AL,byte ptr [SI] (1000_847B / 0x1847B)
    AL = UInt8[DS, SI];
    // CALL 0x1000:6757 (1000_847D / 0x1847D)
    NearCall(cs1, 0x8480, unknown_1000_6757_16757);
    // JC 0x1000:848b (1000_8480 / 0x18480)
    if(CarryFlag) {
      goto label_1000_848B_1848B;
    }
    // MOV SI,DI (1000_8482 / 0x18482)
    SI = DI;
    // PUSH DI (1000_8484 / 0x18484)
    Stack.Push(DI);
    // CALL 0x1000:c6ad (1000_8485 / 0x18485)
    NearCall(cs1, 0x8488, unknown_1000_C6AD_1C6AD);
    // POP DI (1000_8488 / 0x18488)
    DI = Stack.Pop();
    label_1000_8489_18489:
    // POP SI (1000_8489 / 0x18489)
    SI = Stack.Pop();
    // RET  (1000_848A / 0x1848A)
    return NearRet();
    label_1000_848B_1848B:
    // XOR DI,DI (1000_848B / 0x1848B)
    DI = 0;
    // JMP 0x1000:8489 (1000_848D / 0x1848D)
    goto label_1000_8489_18489;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_848F_1848F(0);
  }
  
  public Action unknown_1000_848F_1848F(int gotoTarget) {
    label_1000_848F_1848F:
    // MOV DI,word ptr [0x11d3] (1000_848F / 0x1848F)
    DI = UInt16[DS, 0x11D3];
    // CMP word ptr [SI + 0x4],DI (1000_8493 / 0x18493)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x4)], DI);
    // JNZ 0x1000:84a3 (1000_8496 / 0x18496)
    if(!ZeroFlag) {
      goto label_1000_84A3_184A3;
    }
    // TEST byte ptr [SI + 0x3],0x40 (1000_8498 / 0x18498)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:84a3 (1000_849C / 0x1849C)
    if(!ZeroFlag) {
      goto label_1000_84A3_184A3;
    }
    // CALL 0x1000:8347 (1000_849E / 0x1849E)
    NearCall(cs1, 0x84A1, unknown_1000_8347_18347);
    // JMP 0x1000:848f (1000_84A1 / 0x184A1)
    goto label_1000_848F_1848F;
    label_1000_84A3_184A3:
    // OR DI,DI (1000_84A3 / 0x184A3)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // RET  (1000_84A5 / 0x184A5)
    return NearRet();
  }
  
  public Action unknown_1000_84A6_184A6(int gotoTarget) {
    switch(gotoTarget) {
      case 0x84A6: goto label_1000_84A6_184A6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_84A6_184A6:
    // CMP SI,0x8e0 (1000_84A6 / 0x184A6)
    Alu.Sub16(SI, 0x8E0);
    // JNZ 0x1000:84b2 (1000_84AA / 0x184AA)
    if(!ZeroFlag) {
      goto label_1000_84B2_184B2;
    }
    // CALL 0x1000:848f (1000_84AC / 0x184AC)
    NearCall(cs1, 0x84AF, unknown_1000_848F_1848F);
    // JNZ 0x1000:84b2 (1000_84AF / 0x184AF)
    if(!ZeroFlag) {
      goto label_1000_84B2_184B2;
    }
    // RET  (1000_84B1 / 0x184B1)
    return NearRet();
    label_1000_84B2_184B2:
    // TEST byte ptr [SI + 0x3],0x40 (1000_84B2 / 0x184B2)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JZ 0x1000:84ca (1000_84B6 / 0x184B6)
    if(ZeroFlag) {
      goto label_1000_84CA_184CA;
    }
    // MOV word ptr [SI + 0x4],DI (1000_84B8 / 0x184B8)
    UInt16[DS, (ushort)(SI + 0x4)] = DI;
    // MOV AL,0x3 (1000_84BB / 0x184BB)
    AL = 0x3;
    // AND AL,byte ptr [SI + 0x3] (1000_84BD / 0x184BD)
    // AL &= UInt8[DS, (ushort)(SI + 0x3)];
    AL = Alu.And8(AL, UInt8[DS, (ushort)(SI + 0x3)]);
    // CMP AL,0x3 (1000_84C0 / 0x184C0)
    Alu.Sub8(AL, 0x3);
    // JNZ 0x1000:84c8 (1000_84C2 / 0x184C2)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:8461 (1000_84C8 / 0x184C8)
      // Jump converted to entry function call
      return unknown_1000_8461_18461(0);
    }
    // AND byte ptr [SI + 0x3],0xfc (1000_84C4 / 0x184C4)
    // UInt8[DS, (ushort)(SI + 0x3)] &= 0xFC;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0xFC);
    label_1000_84C8_184C8:
    // JMP 0x1000:8461 (1000_84C8 / 0x184C8)
    // Jump converted to entry function call
    return unknown_1000_8461_18461(0);
    label_1000_84CA_184CA:
    // CALL 0x1000:6ebf (1000_84CA / 0x184CA)
    NearCall(cs1, 0x84CD, unknown_1000_6EBF_16EBF);
    // PUSH DI (1000_84CD / 0x184CD)
    Stack.Push(DI);
    // CALL 0x1000:858c (1000_84CE / 0x184CE)
    NearCall(cs1, 0x84D1, unknown_1000_858C_1858C);
    // POP DI (1000_84D1 / 0x184D1)
    DI = Stack.Pop();
    // CMP byte ptr [SI + 0x3],0x6 (1000_84D2 / 0x184D2)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x3)], 0x6);
    // JNZ 0x1000:8501 (1000_84D6 / 0x184D6)
    if(!ZeroFlag) {
      goto label_1000_8501_18501;
    }
    // PUSH DI (1000_84D8 / 0x184D8)
    Stack.Push(DI);
    // MOV DI,word ptr [SI + 0x4] (1000_84D9 / 0x184D9)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // TEST byte ptr [DI + 0xa],0x2 (1000_84DC / 0x184DC)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JZ 0x1000:84ef (1000_84E0 / 0x184E0)
    if(ZeroFlag) {
      goto label_1000_84EF_184EF;
    }
    // CALL 0x1000:5098 (1000_84E2 / 0x184E2)
    throw FailAsUntested("Could not find a valid function at address 1000_5098 / 0x15098");
    // JCXZ 0x1000:84ef (1000_84E5 / 0x184E5)
    if(CX == 0) {
      goto label_1000_84EF_184EF;
    }
    // DEC DX (1000_84E7 / 0x184E7)
    DX = Alu.Dec16(DX);
    // JG 0x1000:84ef (1000_84E8 / 0x184E8)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_84EF_184EF;
    }
    // PUSH SI (1000_84EA / 0x184EA)
    Stack.Push(SI);
    // CALL 0x1000:74b6 (1000_84EB / 0x184EB)
    throw FailAsUntested("Could not find a valid function at address 1000_74B6 / 0x174B6");
    // POP SI (1000_84EE / 0x184EE)
    SI = Stack.Pop();
    label_1000_84EF_184EF:
    // POP DI (1000_84EF / 0x184EF)
    DI = Stack.Pop();
    // CMP byte ptr [DI + 0x8],0x28 (1000_84F0 / 0x184F0)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x28);
    // JNC 0x1000:8501 (1000_84F4 / 0x184F4)
    if(!CarryFlag) {
      goto label_1000_8501_18501;
    }
    // TEST byte ptr [DI + 0xa],0x2 (1000_84F6 / 0x184F6)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x2);
    // JNZ 0x1000:851e (1000_84FA / 0x184FA)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_851E / 0x1851E)
      return NearRet();
    }
    // MOV AL,0x3 (1000_84FC / 0x184FC)
    AL = 0x3;
    // CALL 0x1000:6f93 (1000_84FE / 0x184FE)
    NearCall(cs1, 0x8501, unknown_1000_6F93_16F93);
    label_1000_8501_18501:
    // XCHG word ptr [SI + 0x4],DI (1000_8501 / 0x18501)
    ushort tmp_1000_8501 = UInt16[DS, (ushort)(SI + 0x4)];
    UInt16[DS, (ushort)(SI + 0x4)] = DI;
    DI = tmp_1000_8501;
    // OR byte ptr [SI + 0x3],0x40 (1000_8504 / 0x18504)
    // UInt8[DS, (ushort)(SI + 0x3)] |= 0x40;
    UInt8[DS, (ushort)(SI + 0x3)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // MOV byte ptr [SI + 0x2],0x0 (1000_8508 / 0x18508)
    UInt8[DS, (ushort)(SI + 0x2)] = 0x0;
    // CALL 0x1000:7f75 (1000_850C / 0x1850C)
    NearCall(cs1, 0x850F, unknown_1000_7F75_17F75);
    // CALL 0x1000:8461 (1000_850F / 0x1850F)
    NearCall(cs1, 0x8512, unknown_1000_8461_18461);
    // TEST byte ptr [SI + 0x10],0x10 (1000_8512 / 0x18512)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x10);
    // JNZ 0x1000:851e (1000_8516 / 0x18516)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_851E / 0x1851E)
      return NearRet();
    }
    // MOV CX,0x7 (1000_8518 / 0x18518)
    CX = 0x7;
    // JMP 0x1000:8313 (1000_851B / 0x1851B)
    // Jump converted to non entry function call
    return unknown_1000_8308_18308(0x18313 - cs1 * 0x10);
    label_1000_851E_1851E:
    // RET  (1000_851E / 0x1851E)
    return NearRet();
  }
  
  public Action unknown_1000_851F_1851F(int gotoTarget) {
    label_1000_851F_1851F:
    // MOV AH,byte ptr [SI] (1000_851F / 0x1851F)
    AH = UInt8[DS, SI];
    // MOV AL,byte ptr [DI + 0x9] (1000_8521 / 0x18521)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // OR AL,AL (1000_8524 / 0x18524)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:8540 (1000_8526 / 0x18526)
    if(!ZeroFlag) {
      goto label_1000_8540_18540;
    }
    // MOV byte ptr [DI + 0x9],AH (1000_8528 / 0x18528)
    UInt8[DS, (ushort)(DI + 0x9)] = AH;
    // MOV CX,0x1 (1000_852B / 0x1852B)
    CX = 0x1;
    // MOV byte ptr [SI + 0x2],CL (1000_852E / 0x1852E)
    UInt8[DS, (ushort)(SI + 0x2)] = CL;
    // TEST word ptr [SI + 0x10],0x80 (1000_8531 / 0x18531)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x80);
    // JZ 0x1000:853f (1000_8536 / 0x18536)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_853F / 0x1853F)
      return NearRet();
    }
    // ADD byte ptr [SI + 0x2],0x8 (1000_8538 / 0x18538)
    // UInt8[DS, (ushort)(SI + 0x2)] += 0x8;
    UInt8[DS, (ushort)(SI + 0x2)] = Alu.Add8(UInt8[DS, (ushort)(SI + 0x2)], 0x8);
    // ADD CL,0x8 (1000_853C / 0x1853C)
    // CL += 0x8;
    CL = Alu.Add8(CL, 0x8);
    label_1000_853F_1853F:
    // RET  (1000_853F / 0x1853F)
    return NearRet();
    label_1000_8540_18540:
    // PUSH DI (1000_8540 / 0x18540)
    Stack.Push(DI);
    // PUSH DS (1000_8541 / 0x18541)
    Stack.Push(DS);
    // POP ES (1000_8542 / 0x18542)
    ES = Stack.Pop();
    // SUB SP,0x1e (1000_8543 / 0x18543)
    // SP -= 0x1E;
    SP = Alu.Sub16(SP, 0x1E);
    // MOV DI,SP (1000_8546 / 0x18546)
    DI = SP;
    // MOV CX,0x1e (1000_8548 / 0x18548)
    CX = 0x1E;
    // PUSH AX (1000_854B / 0x1854B)
    Stack.Push(AX);
    // XOR AL,AL (1000_854C / 0x1854C)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_854E / 0x1854E)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP AX (1000_8550 / 0x18550)
    AX = Stack.Pop();
    // MOV DI,SP (1000_8551 / 0x18551)
    DI = SP;
    // PUSH SI (1000_8553 / 0x18553)
    Stack.Push(SI);
    // XOR BX,BX (1000_8554 / 0x18554)
    BX = 0;
    label_1000_8556_18556:
    // CALL 0x1000:6906 (1000_8556 / 0x18556)
    NearCall(cs1, 0x8559, unknown_1000_6906_16906);
    // MOV BL,byte ptr [SI + 0x2] (1000_8559 / 0x18559)
    BL = UInt8[DS, (ushort)(SI + 0x2)];
    // MOV byte ptr [BX + DI + -0x1],0xff (1000_855C / 0x1855C)
    UInt8[DS, (ushort)(BX + DI - 0x1)] = 0xFF;
    // MOV AL,byte ptr [SI + 0x1] (1000_8560 / 0x18560)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // OR AL,AL (1000_8563 / 0x18563)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:8556 (1000_8565 / 0x18565)
    if(!ZeroFlag) {
      goto label_1000_8556_18556;
    }
    // MOV byte ptr [SI + 0x1],AH (1000_8567 / 0x18567)
    UInt8[DS, (ushort)(SI + 0x1)] = AH;
    // MOV CX,0x1e (1000_856A / 0x1856A)
    CX = 0x1E;
    // POP SI (1000_856D / 0x1856D)
    SI = Stack.Pop();
    // TEST word ptr [SI + 0x10],0x80 (1000_856E / 0x1856E)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x80);
    // JZ 0x1000:857b (1000_8573 / 0x18573)
    if(ZeroFlag) {
      goto label_1000_857B_1857B;
    }
    // SUB CX,0x8 (1000_8575 / 0x18575)
    // CX -= 0x8;
    CX = Alu.Sub16(CX, 0x8);
    // ADD DI,0x8 (1000_8578 / 0x18578)
    // DI += 0x8;
    DI = Alu.Add16(DI, 0x8);
    label_1000_857B_1857B:
    // XOR AL,AL (1000_857B / 0x1857B)
    AL = 0;
    while (CX-- != 0) {
      // SCASB ES:DI (1000_857D / 0x1857D)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // SUB CX,0x1e (1000_857F / 0x1857F)
    // CX -= 0x1E;
    CX = Alu.Sub16(CX, 0x1E);
    // NEG CX (1000_8582 / 0x18582)
    CX = Alu.Sub16(0, CX);
    // ADD SP,0x1e (1000_8584 / 0x18584)
    // SP += 0x1E;
    SP = Alu.Add16(SP, 0x1E);
    // POP DI (1000_8587 / 0x18587)
    DI = Stack.Pop();
    // MOV byte ptr [SI + 0x2],CL (1000_8588 / 0x18588)
    UInt8[DS, (ushort)(SI + 0x2)] = CL;
    // RET  (1000_858B / 0x1858B)
    return NearRet();
  }
  
  public Action unknown_1000_858C_1858C(int gotoTarget) {
    label_1000_858C_1858C:
    // MOV BP,SI (1000_858C / 0x1858C)
    BP = SI;
    // MOV AL,byte ptr [SI] (1000_858E / 0x1858E)
    AL = UInt8[DS, SI];
    // MOV DI,word ptr [SI + 0x4] (1000_8590 / 0x18590)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // PUSH DI (1000_8593 / 0x18593)
    Stack.Push(DI);
    // TEST byte ptr [SI + 0x3],0x40 (1000_8594 / 0x18594)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x40);
    // JNZ 0x1000:85ba (1000_8598 / 0x18598)
    if(!ZeroFlag) {
      goto label_1000_85BA_185BA;
    }
    // CMP AL,byte ptr [DI + 0x9] (1000_859A / 0x1859A)
    Alu.Sub8(AL, UInt8[DS, (ushort)(DI + 0x9)]);
    // JZ 0x1000:85c2 (1000_859D / 0x1859D)
    if(ZeroFlag) {
      goto label_1000_85C2_185C2;
    }
    // MOV CL,AL (1000_859F / 0x1859F)
    CL = AL;
    // MOV AL,byte ptr [DI + 0x9] (1000_85A1 / 0x185A1)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    label_1000_85A4_185A4:
    // CALL 0x1000:6906 (1000_85A4 / 0x185A4)
    NearCall(cs1, 0x85A7, unknown_1000_6906_16906);
    // MOV AL,byte ptr [SI + 0x1] (1000_85A7 / 0x185A7)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // MOV DI,SI (1000_85AA / 0x185AA)
    DI = SI;
    // OR AL,AL (1000_85AC / 0x185AC)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:85ba (1000_85AE / 0x185AE)
    if(ZeroFlag) {
      goto label_1000_85BA_185BA;
    }
    // CMP AL,CL (1000_85B0 / 0x185B0)
    Alu.Sub8(AL, CL);
    // JNZ 0x1000:85a4 (1000_85B2 / 0x185B2)
    if(!ZeroFlag) {
      goto label_1000_85A4_185A4;
    }
    // MOV AH,byte ptr [BP + 0x1] (1000_85B4 / 0x185B4)
    AH = UInt8[SS, (ushort)(BP + 0x1)];
    // MOV byte ptr [SI + 0x1],AH (1000_85B7 / 0x185B7)
    UInt8[DS, (ushort)(SI + 0x1)] = AH;
    label_1000_85BA_185BA:
    // MOV SI,BP (1000_85BA / 0x185BA)
    SI = BP;
    // MOV byte ptr [SI + 0x1],0x0 (1000_85BC / 0x185BC)
    UInt8[DS, (ushort)(SI + 0x1)] = 0x0;
    // POP DI (1000_85C0 / 0x185C0)
    DI = Stack.Pop();
    // RET  (1000_85C1 / 0x185C1)
    return NearRet();
    label_1000_85C2_185C2:
    // XOR AH,AH (1000_85C2 / 0x185C2)
    AH = 0;
    // XCHG byte ptr [SI + 0x1],AH (1000_85C4 / 0x185C4)
    byte tmp_1000_85C4 = UInt8[DS, (ushort)(SI + 0x1)];
    UInt8[DS, (ushort)(SI + 0x1)] = AH;
    AH = tmp_1000_85C4;
    // POP DI (1000_85C7 / 0x185C7)
    DI = Stack.Pop();
    // MOV byte ptr [DI + 0x9],AH (1000_85C8 / 0x185C8)
    UInt8[DS, (ushort)(DI + 0x9)] = AH;
    // RET  (1000_85CB / 0x185CB)
    return NearRet();
  }
  
  public Action unknown_1000_85CC_185CC(int gotoTarget) {
    label_1000_85CC_185CC:
    // TEST word ptr [SI + 0x10],0x80 (1000_85CC / 0x185CC)
    Alu.And16(UInt16[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:8603 (1000_85D1 / 0x185D1)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8603 / 0x18603)
      return NearRet();
    }
    // CMP byte ptr [SI + 0x2],0x8 (1000_85D3 / 0x185D3)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x2)], 0x8);
    // JBE 0x1000:8603 (1000_85D7 / 0x185D7)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_8603 / 0x18603)
      return NearRet();
    }
    // CALL 0x1000:858c (1000_85D9 / 0x185D9)
    NearCall(cs1, 0x85DC, unknown_1000_858C_1858C);
    // PUSH SI (1000_85DC / 0x185DC)
    Stack.Push(SI);
    // MOV AL,byte ptr [DI + 0x9] (1000_85DD / 0x185DD)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    label_1000_85E0_185E0:
    // OR AL,AL (1000_85E0 / 0x185E0)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:85ff (1000_85E2 / 0x185E2)
    if(ZeroFlag) {
      goto label_1000_85FF_185FF;
    }
    // CALL 0x1000:6906 (1000_85E4 / 0x185E4)
    NearCall(cs1, 0x85E7, unknown_1000_6906_16906);
    // MOV AL,byte ptr [SI + 0x1] (1000_85E7 / 0x185E7)
    AL = UInt8[DS, (ushort)(SI + 0x1)];
    // TEST byte ptr [SI + 0x10],0x80 (1000_85EA / 0x185EA)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JNZ 0x1000:85e0 (1000_85EE / 0x185EE)
    if(!ZeroFlag) {
      goto label_1000_85E0_185E0;
    }
    // TEST byte ptr [SI + 0x3],0x20 (1000_85F0 / 0x185F0)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // JZ 0x1000:85e0 (1000_85F4 / 0x185F4)
    if(ZeroFlag) {
      goto label_1000_85E0_185E0;
    }
    // CALL 0x1000:e270 (1000_85F6 / 0x185F6)
    NearCall(cs1, 0x85F9, PushAll_1000_E270_1E270);
    // CALL 0x1000:66b1 (1000_85F9 / 0x185F9)
    throw FailAsUntested("Could not find a valid function at address 1000_66B1 / 0x166B1");
    // CALL 0x1000:e283 (1000_85FC / 0x185FC)
    NearCall(cs1, 0x85FF, PopAll_1000_E283_1E283);
    label_1000_85FF_185FF:
    // POP SI (1000_85FF / 0x185FF)
    SI = Stack.Pop();
    // CALL 0x1000:851f (1000_8600 / 0x18600)
    NearCall(cs1, 0x8603, unknown_1000_851F_1851F);
    label_1000_8603_18603:
    // RET  (1000_8603 / 0x18603)
    return NearRet();
  }
  
  public Action unknown_1000_8604_18604(int gotoTarget) {
    label_1000_8604_18604:
    // PUSH SI (1000_8604 / 0x18604)
    Stack.Push(SI);
    // MOV DI,word ptr [SI + 0x4] (1000_8605 / 0x18605)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV DX,word ptr [DI + 0x2] (1000_8608 / 0x18608)
    DX = UInt16[DS, (ushort)(DI + 0x2)];
    // MOV BX,word ptr [SI + 0x8] (1000_860B / 0x1860B)
    BX = UInt16[DS, (ushort)(SI + 0x8)];
    // MOV BP,BX (1000_860E / 0x1860E)
    BP = BX;
    // SHL BP,1 (1000_8610 / 0x18610)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // JNS 0x1000:8616 (1000_8612 / 0x18612)
    if(!SignFlag) {
      goto label_1000_8616_18616;
    }
    // NEG BP (1000_8614 / 0x18614)
    BP = Alu.Sub16(0, BP);
    label_1000_8616_18616:
    // MOV BP,word ptr [BP + 0x4880] (1000_8616 / 0x18616)
    BP = UInt16[SS, (ushort)(BP + 0x4880)];
    // SUB BX,word ptr [DI + 0x4] (1000_861A / 0x1861A)
    // BX -= UInt16[DS, (ushort)(DI + 0x4)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x4)]);
    // NEG BX (1000_861D / 0x1861D)
    BX = Alu.Sub16(0, BX);
    // MOV DI,0x1 (1000_861F / 0x1861F)
    DI = 0x1;
    // JNS 0x1000:8628 (1000_8622 / 0x18622)
    if(!SignFlag) {
      goto label_1000_8628_18628;
    }
    // NEG DI (1000_8624 / 0x18624)
    DI = Alu.Sub16(0, DI);
    // NEG BX (1000_8626 / 0x18626)
    BX = Alu.Sub16(0, BX);
    label_1000_8628_18628:
    // SUB DX,word ptr [SI + 0x6] (1000_8628 / 0x18628)
    // DX -= UInt16[DS, (ushort)(SI + 0x6)];
    DX = Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x6)]);
    // MOV AX,DX (1000_862B / 0x1862B)
    AX = DX;
    // JNS 0x1000:8631 (1000_862D / 0x1862D)
    if(!SignFlag) {
      goto label_1000_8631_18631;
    }
    // NEG AX (1000_862F / 0x1862F)
    AX = Alu.Sub16(0, AX);
    label_1000_8631_18631:
    // MOV SI,DX (1000_8631 / 0x18631)
    SI = DX;
    // XOR DX,DX (1000_8633 / 0x18633)
    DX = 0;
    // DIV BP (1000_8635 / 0x18635)
    Cpu.Div16(BP);
    // MOV DX,SI (1000_8637 / 0x18637)
    DX = SI;
    // XCHG DI,BX (1000_8639 / 0x18639)
    ushort tmp_1000_8639 = DI;
    DI = BX;
    BX = tmp_1000_8639;
    // CMP AX,DI (1000_863B / 0x1863B)
    Alu.Sub16(AX, DI);
    // JC 0x1000:8666 (1000_863D / 0x1863D)
    if(CarryFlag) {
      goto label_1000_8666_18666;
    }
    // CMP AX,0x7 (1000_863F / 0x1863F)
    Alu.Sub16(AX, 0x7);
    // JC 0x1000:8660 (1000_8642 / 0x18642)
    if(CarryFlag) {
      goto label_1000_8660_18660;
    }
    // OR DI,DI (1000_8644 / 0x18644)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNZ 0x1000:864a (1000_8646 / 0x18646)
    if(!ZeroFlag) {
      goto label_1000_864A_1864A;
    }
    // XOR BX,BX (1000_8648 / 0x18648)
    BX = 0;
    label_1000_864A_1864A:
    // OR DX,DX (1000_864A / 0x1864A)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNS 0x1000:8650 (1000_864C / 0x1864C)
    if(!SignFlag) {
      goto label_1000_8650_18650;
    }
    // NEG BP (1000_864E / 0x1864E)
    BP = Alu.Sub16(0, BP);
    label_1000_8650_18650:
    // SHR AX,1 (1000_8650 / 0x18650)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // JZ 0x1000:865e (1000_8652 / 0x18652)
    if(ZeroFlag) {
      goto label_1000_865E_1865E;
    }
    // MOV DX,BP (1000_8654 / 0x18654)
    DX = BP;
    // ROL word ptr [0x0],1 (1000_8656 / 0x18656)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // JC 0x1000:865e (1000_865A / 0x1865A)
    if(CarryFlag) {
      goto label_1000_865E_1865E;
    }
    // XOR BX,BX (1000_865C / 0x1865C)
    BX = 0;
    label_1000_865E_1865E:
    // POP SI (1000_865E / 0x1865E)
    SI = Stack.Pop();
    // RET  (1000_865F / 0x1865F)
    return NearRet();
    label_1000_8660_18660:
    // XOR BX,BX (1000_8660 / 0x18660)
    BX = 0;
    // XOR DX,DX (1000_8662 / 0x18662)
    DX = 0;
    // POP SI (1000_8664 / 0x18664)
    SI = Stack.Pop();
    // RET  (1000_8665 / 0x18665)
    return NearRet();
    label_1000_8666_18666:
    // CMP DI,0x7 (1000_8666 / 0x18666)
    Alu.Sub16(DI, 0x7);
    // JC 0x1000:8660 (1000_8669 / 0x18669)
    if(CarryFlag) {
      goto label_1000_8660_18660;
    }
    // OR AX,AX (1000_866B / 0x1866B)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:865e (1000_866D / 0x1866D)
    if(ZeroFlag) {
      goto label_1000_865E_1865E;
    }
    // OR DX,DX (1000_866F / 0x1866F)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNS 0x1000:8675 (1000_8671 / 0x18671)
    if(!SignFlag) {
      goto label_1000_8675_18675;
    }
    // NEG BP (1000_8673 / 0x18673)
    BP = Alu.Sub16(0, BP);
    label_1000_8675_18675:
    // SHR DI,1 (1000_8675 / 0x18675)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // JZ 0x1000:865e (1000_8677 / 0x18677)
    if(ZeroFlag) {
      goto label_1000_865E_1865E;
    }
    // MOV DX,BP (1000_8679 / 0x18679)
    DX = BP;
    // ROL word ptr [0x0],1 (1000_867B / 0x1867B)
    UInt16[DS, 0x0] = Alu.Rol16(UInt16[DS, 0x0], 1);
    // JC 0x1000:865e (1000_867F / 0x1867F)
    if(CarryFlag) {
      goto label_1000_865E_1865E;
    }
    // XOR DX,DX (1000_8681 / 0x18681)
    DX = 0;
    // POP SI (1000_8683 / 0x18683)
    SI = Stack.Pop();
    // RET  (1000_8684 / 0x18684)
    return NearRet();
  }
  
  public Action unknown_1000_8751_18751(int gotoTarget) {
    switch(gotoTarget) {
      case 0x878B: goto label_1000_878B_1878B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8751_18751:
    // CMP byte ptr [0x1954],0x0 (1000_8751 / 0x18751)
    Alu.Sub8(UInt8[DS, 0x1954], 0x0);
    // JZ 0x1000:878b (1000_8756 / 0x18756)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_878B / 0x1878B)
      return NearRet();
    }
    // CALL 0x1000:69a3 (1000_8758 / 0x18758)
    NearCall(cs1, 0x875B, unknown_1000_69A3_169A3);
    // MOV byte ptr [0x1954],0x0 (1000_875B / 0x1875B)
    UInt8[DS, 0x1954] = 0x0;
    // JMP 0x1000:7b58 (1000_8760 / 0x18760)
    // Jump converted to entry function call
    return unknown_1000_7B58_17B58(0);
    label_1000_878B_1878B:
    // RET  (1000_878B / 0x1878B)
    return NearRet();
  }
  
  public Action unknown_1000_8763_18763(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8763: goto label_1000_8763_18763;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8763_18763:
    // CMP byte ptr [0x46f3],0x0 (1000_8763 / 0x18763)
    Alu.Sub8(UInt8[DS, 0x46F3], 0x0);
    // JZ 0x1000:8770 (1000_8768 / 0x18768)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_8770_18770(0);
    }
    // CALL 0x1000:8770 (1000_876A / 0x1876A)
    NearCall(cs1, 0x876D, unknown_1000_8770_18770);
    // JMP 0x1000:186b (1000_876D / 0x1876D)
    // Jump converted to entry function call
    return unknown_1000_186B_1186B(0);
  }
  
  public Action unknown_1000_8770_18770(int gotoTarget) {
    label_1000_8770_18770:
    // CMP byte ptr [0x1954],0x0 (1000_8770 / 0x18770)
    Alu.Sub8(UInt8[DS, 0x1954], 0x0);
    // JZ 0x1000:878b (1000_8775 / 0x18775)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_878B / 0x1878B)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_8777 / 0x18777)
    NearCall(cs1, 0x877A, PushAll_1000_E270_1E270);
    // MOV byte ptr [0x46f3],0x0 (1000_877A / 0x1877A)
    UInt8[DS, 0x46F3] = 0x0;
    // CALL 0x1000:878c (1000_877F / 0x1877F)
    NearCall(cs1, 0x8782, unknown_1000_878C_1878C);
    // MOV word ptr [0x1bea],0x0 (1000_8782 / 0x18782)
    UInt16[DS, 0x1BEA] = 0x0;
    // CALL 0x1000:e283 (1000_8788 / 0x18788)
    NearCall(cs1, 0x878B, PopAll_1000_E283_1E283);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_8751_18751(0x1878B - cs1 * 0x10);
  }
  
  public Action unknown_1000_878C_1878C(int gotoTarget) {
    switch(gotoTarget) {
      case 0x878C: goto label_1000_878C_1878C;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_878C_1878C:
    // MOV word ptr [0x47ba],0x0 (1000_878C / 0x1878C)
    UInt16[DS, 0x47BA] = 0x0;
    // MOV AX,0x40a7 (1000_8792 / 0x18792)
    AX = 0x40A7;
    // CMP byte ptr [0x8],0xff (1000_8795 / 0x18795)
    Alu.Sub8(UInt8[DS, 0x8], 0xFF);
    // JZ 0x1000:87c0 (1000_879A / 0x1879A)
    if(ZeroFlag) {
      goto label_1000_87C0_187C0;
    }
    // CMP byte ptr [0x8],0x20 (1000_879C / 0x1879C)
    Alu.Sub8(UInt8[DS, 0x8], 0x20);
    // JC 0x1000:87aa (1000_87A1 / 0x187A1)
    if(CarryFlag) {
      goto label_1000_87AA_187AA;
    }
    // CMP byte ptr [0xb],0x3 (1000_87A3 / 0x187A3)
    Alu.Sub8(UInt8[DS, 0xB], 0x3);
    // JNC 0x1000:87c0 (1000_87A8 / 0x187A8)
    if(!CarryFlag) {
      goto label_1000_87C0_187C0;
    }
    label_1000_87AA_187AA:
    // PUSH DI (1000_87AA / 0x187AA)
    Stack.Push(DI);
    // MOV DI,word ptr [0x114e] (1000_87AB / 0x187AB)
    DI = UInt16[DS, 0x114E];
    // CALL 0x1000:7f27 (1000_87AF / 0x187AF)
    NearCall(cs1, 0x87B2, unknown_1000_7F27_17F27);
    // POP DI (1000_87B2 / 0x187B2)
    DI = Stack.Pop();
    // MOV AX,0xa7 (1000_87B3 / 0x187B3)
    AX = 0xA7;
    // CMP byte ptr [0x46ff],0x0 (1000_87B6 / 0x187B6)
    Alu.Sub8(UInt8[DS, 0x46FF], 0x0);
    // JNZ 0x1000:87c0 (1000_87BB / 0x187BB)
    if(!ZeroFlag) {
      goto label_1000_87C0_187C0;
    }
    // OR AH,0x40 (1000_87BD / 0x187BD)
    // AH |= 0x40;
    AH = Alu.Or8(AH, 0x40);
    label_1000_87C0_187C0:
    // MOV BP,0x20f2 (1000_87C0 / 0x187C0)
    BP = 0x20F2;
    // MOV word ptr [BP + 0xe],AX (1000_87C3 / 0x187C3)
    UInt16[SS, (ushort)(BP + 0xE)] = AX;
    // OR byte ptr [BP + 0xb],0x40 (1000_87C6 / 0x187C6)
    // UInt8[SS, (ushort)(BP + 0xB)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0xB)], 0x40);
    // MOV word ptr [BP + 0x12],0x0 (1000_87CA / 0x187CA)
    UInt16[SS, (ushort)(BP + 0x12)] = 0x0;
    // CMP byte ptr [0x2a],0x5 (1000_87CF / 0x187CF)
    Alu.Sub8(UInt8[DS, 0x2A], 0x5);
    // JC 0x1000:87df (1000_87D4 / 0x187D4)
    if(CarryFlag) {
      goto label_1000_87DF_187DF;
    }
    // AND byte ptr [BP + 0xb],0xbf (1000_87D6 / 0x187D6)
    // UInt8[SS, (ushort)(BP + 0xB)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.And8(UInt8[SS, (ushort)(BP + 0xB)], 0xBF);
    // MOV word ptr [BP + 0x12],0x67 (1000_87DA / 0x187DA)
    UInt16[SS, (ushort)(BP + 0x12)] = 0x67;
    label_1000_87DF_187DF:
    // CMP word ptr [0x1176],0x2 (1000_87DF / 0x187DF)
    Alu.Sub16(UInt16[DS, 0x1176], 0x2);
    // JNC 0x1000:8806 (1000_87E4 / 0x187E4)
    if(!CarryFlag) {
      goto label_1000_8806_18806;
    }
    // MOV word ptr [BP + 0x6],0x4093 (1000_87E6 / 0x187E6)
    UInt16[SS, (ushort)(BP + 0x6)] = 0x4093;
    // MOV DI,word ptr [0x114e] (1000_87EB / 0x187EB)
    DI = UInt16[DS, 0x114E];
    // OR DI,DI (1000_87EF / 0x187EF)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:8816 (1000_87F1 / 0x187F1)
    if(ZeroFlag) {
      goto label_1000_8816_18816;
    }
    // MOV AL,byte ptr [DI + 0x9] (1000_87F3 / 0x187F3)
    AL = UInt8[DS, (ushort)(DI + 0x9)];
    // OR AL,AL (1000_87F6 / 0x187F6)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:8816 (1000_87F8 / 0x187F8)
    if(ZeroFlag) {
      goto label_1000_8816_18816;
    }
    // CALL 0x1000:6906 (1000_87FA / 0x187FA)
    NearCall(cs1, 0x87FD, unknown_1000_6906_16906);
    // JNC 0x1000:8816 (1000_87FD / 0x187FD)
    if(!CarryFlag) {
      goto label_1000_8816_18816;
    }
    // AND word ptr [BP + 0x6],0xbfff (1000_87FF / 0x187FF)
    // UInt16[SS, (ushort)(BP + 0x6)] &= 0xBFFF;
    UInt16[SS, (ushort)(BP + 0x6)] = Alu.And16(UInt16[SS, (ushort)(BP + 0x6)], 0xBFFF);
    // JMP 0x1000:8816 (1000_8804 / 0x18804)
    goto label_1000_8816_18816;
    label_1000_8806_18806:
    // MOV AX,0x62 (1000_8806 / 0x18806)
    AX = 0x62;
    // CMP word ptr [0x3cbe],0x0 (1000_8809 / 0x18809)
    Alu.Sub16(UInt16[DS, 0x3CBE], 0x0);
    // JNZ 0x1000:8813 (1000_880E / 0x1880E)
    if(!ZeroFlag) {
      goto label_1000_8813_18813;
    }
    // OR AH,0x40 (1000_8810 / 0x18810)
    // AH |= 0x40;
    AH = Alu.Or8(AH, 0x40);
    label_1000_8813_18813:
    // MOV word ptr [BP + 0x6],AX (1000_8813 / 0x18813)
    UInt16[SS, (ushort)(BP + 0x6)] = AX;
    label_1000_8816_18816:
    // MOV BX,0xf66 (1000_8816 / 0x18816)
    BX = 0xF66;
    // CALL 0x1000:d338 (1000_8819 / 0x18819)
    NearCall(cs1, 0x881C, unknown_1000_D338_1D338);
    // JMP 0x1000:c13b (1000_881C / 0x1881C)
    // Jump converted to entry function call
    return unknown_1000_C13B_1C13B(0);
  }
  
  public Action unknown_1000_881F_1881F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8831: goto label_1000_8831_18831;break;
      case 0x8850: goto label_1000_8850_18850;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_881F_1881F:
    // MOV SI,0x146a (1000_881F / 0x1881F)
    SI = 0x146A;
    // JMP 0x1000:8831 (1000_8822 / 0x18822)
    goto label_1000_8831_18831;
    label_1000_8831_18831:
    // TEST AL,0x1 (1000_8831 / 0x18831)
    Alu.And8(AL, 0x1);
    // JZ 0x1000:8857 (1000_8833 / 0x18833)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_8857 / 0x18857)
      return NearRet();
    }
    // CMP byte ptr [0x46eb],0x0 (1000_8835 / 0x18835)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNS 0x1000:8846 (1000_883A / 0x1883A)
    if(!SignFlag) {
      goto label_1000_8846_18846;
    }
    // TEST byte ptr [0x46eb],0x40 (1000_883C / 0x1883C)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JNZ 0x1000:8858 (1000_8841 / 0x18841)
    if(!ZeroFlag) {
      goto label_1000_8858_18858;
    }
    // CALL 0x1000:5beb (1000_8843 / 0x18843)
    NearCall(cs1, 0x8846, unknown_1000_5BEB_15BEB);
    label_1000_8846_18846:
    // LODSW SI (1000_8846 / 0x18846)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD word ptr [0x197c],AX (1000_8847 / 0x18847)
    // UInt16[DS, 0x197C] += AX;
    UInt16[DS, 0x197C] = Alu.Add16(UInt16[DS, 0x197C], AX);
    // LODSW SI (1000_884B / 0x1884B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD word ptr [0x197e],AX (1000_884C / 0x1884C)
    // UInt16[DS, 0x197E] += AX;
    UInt16[DS, 0x197E] = Alu.Add16(UInt16[DS, 0x197E], AX);
    label_1000_8850_18850:
    // CALL 0x1000:7b36 (1000_8850 / 0x18850)
    NearCall(cs1, 0x8853, unknown_1000_7B36_17B36);
    // CALL word ptr [0x46ed] (1000_8853 / 0x18853)
    // Indirect call to word ptr [0x46ed], generating possible targets from emulator records
    uint targetAddress_1000_8853 = (uint)(UInt16[DS, 0x46ED]);
    switch(targetAddress_1000_8853) {
      case 0x5A9A : NearCall(cs1, 0x8857, unknown_1000_5A9A_15A9A);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_8853);
        break;
    }
    label_1000_8857_18857:
    // RET  (1000_8857 / 0x18857)
    return NearRet();
    label_1000_8858_18858:
    // LODSW SI (1000_8858 / 0x18858)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD word ptr [0x1980],AX (1000_8859 / 0x18859)
    // UInt16[DS, 0x1980] += AX;
    UInt16[DS, 0x1980] = Alu.Add16(UInt16[DS, 0x1980], AX);
    // LODSW SI (1000_885D / 0x1885D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD word ptr [0x1982],AX (1000_885E / 0x1885E)
    // UInt16[DS, 0x1982] += AX;
    UInt16[DS, 0x1982] = Alu.Add16(UInt16[DS, 0x1982], AX);
    // JMP 0x1000:542f (1000_8862 / 0x18862)
    // Jump converted to entry function call
    return unknown_1000_542F_1542F(0);
  }
  
  public Action unknown_1000_8824_18824(int gotoTarget) {
    label_1000_8824_18824:
    // MOV SI,0x1462 (1000_8824 / 0x18824)
    SI = 0x1462;
    // JMP 0x1000:8831 (1000_8827 / 0x18827)
    // Jump converted to non entry function call
    return unknown_1000_881F_1881F(0x18831 - cs1 * 0x10);
  }
  
  public Action unknown_1000_8829_18829(int gotoTarget) {
    label_1000_8829_18829:
    // MOV SI,0x145e (1000_8829 / 0x18829)
    SI = 0x145E;
    // JMP 0x1000:8831 (1000_882C / 0x1882C)
    // Jump converted to non entry function call
    return unknown_1000_881F_1881F(0x18831 - cs1 * 0x10);
  }
  
  public Action unknown_1000_882E_1882E(int gotoTarget) {
    label_1000_882E_1882E:
    // MOV SI,0x1466 (1000_882E / 0x1882E)
    SI = 0x1466;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_881F_1881F(0x18831 - cs1 * 0x10);
  }
  
  public Action unknown_1000_8865_18865(int gotoTarget) {
    label_1000_8865_18865:
    // CALL 0x1000:e270 (1000_8865 / 0x18865)
    NearCall(cs1, 0x8868, PushAll_1000_E270_1E270);
    // MOV SI,AX (1000_8868 / 0x18868)
    SI = AX;
    // MOV word ptr [0xdbe4],CX (1000_886A / 0x1886A)
    UInt16[DS, 0xDBE4] = CX;
    // CALL 0x1000:d04e (1000_886E / 0x1886E)
    NearCall(cs1, 0x8871, unknown_1000_D04E_1D04E);
    // CALL 0x1000:cf70 (1000_8871 / 0x18871)
    NearCall(cs1, 0x8874, unknown_1000_CF70_1CF70);
    // CALL 0x1000:88f1 (1000_8874 / 0x18874)
    NearCall(cs1, 0x8877, unknown_1000_88F1_188F1);
    // MOV DI,0xa6b0 (1000_8877 / 0x18877)
    DI = 0xA6B0;
    // PUSH DI (1000_887A / 0x1887A)
    Stack.Push(DI);
    // CALL 0x1000:8944 (1000_887B / 0x1887B)
    NearCall(cs1, 0x887E, unknown_1000_8944_18944);
    // POP SI (1000_887E / 0x1887E)
    SI = Stack.Pop();
    // PUSH DS (1000_887F / 0x1887F)
    Stack.Push(DS);
    // POP ES (1000_8880 / 0x18880)
    ES = Stack.Pop();
    // CALL 0x1000:d1bb (1000_8881 / 0x18881)
    NearCall(cs1, 0x8884, unknown_1000_D1BB_1D1BB);
    // CALL 0x1000:e283 (1000_8884 / 0x18884)
    NearCall(cs1, 0x8887, PopAll_1000_E283_1E283);
    // RET  (1000_8887 / 0x18887)
    return NearRet();
  }
  
  public Action unknown_1000_88AF_188AF(int gotoTarget) {
    switch(gotoTarget) {
      case 0x88AE: break;
      case 0: goto entry; break; //
    }
    label_1000_88AE_188AE:
    // RET  (1000_88AE / 0x188AE)
    return NearRet();
    entry:
    label_1000_88AF_188AF:
    // OR AX,AX (1000_88AF / 0x188AF)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:88ae (1000_88B1 / 0x188B1)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_88AE / 0x188AE)
      return NearRet();
    }
    // MOV [0x4780],AX (1000_88B3 / 0x188B3)
    UInt16[DS, 0x4780] = AX;
    // MOV byte ptr [0x47e0],0x0 (1000_88B6 / 0x188B6)
    UInt8[DS, 0x47E0] = 0x0;
    // TEST byte ptr [0x46eb],0x40 (1000_88BB / 0x188BB)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JZ 0x1000:88ca (1000_88C0 / 0x188C0)
    if(ZeroFlag) {
      goto label_1000_88CA_188CA;
    }
    // AND byte ptr [0x46eb],0xbf (1000_88C2 / 0x188C2)
    // UInt8[DS, 0x46EB] &= 0xBF;
    UInt8[DS, 0x46EB] = Alu.And8(UInt8[DS, 0x46EB], 0xBF);
    // JMP 0x1000:80df (1000_88C7 / 0x188C7)
    // Jump converted to entry function call
    return unknown_1000_80DF_180DF(0);
    label_1000_88CA_188CA:
    // MOV SI,AX (1000_88CA / 0x188CA)
    SI = AX;
    // CALL 0x1000:cf70 (1000_88CC / 0x188CC)
    NearCall(cs1, 0x88CF, unknown_1000_CF70_1CF70);
    // CALL 0x1000:88f1 (1000_88CF / 0x188CF)
    NearCall(cs1, 0x88D2, unknown_1000_88F1_188F1);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_88D2_188D2(0);
  }
  
  public Action unknown_1000_88D2_188D2(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8895: goto label_1000_8895_18895;break;
      case 0x8888: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8888_18888:
    // CMP byte ptr [0x46d9],0x0 (1000_8888 / 0x18888)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JNZ 0x1000:88e1 (1000_888D / 0x1888D)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_88E1_188E1(0);
    }
    // MOV word ptr [0x479e],0x1 (1000_888F / 0x1888F)
    UInt16[DS, 0x479E] = 0x1;
    label_1000_8895_18895:
    // MOV AL,[0xfb] (1000_8895 / 0x18895)
    AL = UInt8[DS, 0xFB];
    // NOT AL (1000_8898 / 0x18898)
    AL = (byte)~AL;
    // AND AL,0x80 (1000_889A / 0x1889A)
    // AL &= 0x80;
    AL = Alu.And8(AL, 0x80);
    // MOV [0x1c06],AL (1000_889C / 0x1889C)
    UInt8[DS, 0x1C06] = AL;
    // PUSH DS (1000_889F / 0x1889F)
    Stack.Push(DS);
    // POP ES (1000_88A0 / 0x188A0)
    ES = Stack.Pop();
    // MOV DI,0x1be2 (1000_88A1 / 0x188A1)
    DI = 0x1BE2;
    // XOR AX,AX (1000_88A4 / 0x188A4)
    AX = 0;
    // STOSW ES:DI (1000_88A6 / 0x188A6)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_88A7 / 0x188A7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_88A8 / 0x188A8)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_88A9 / 0x188A9)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,0x80 (1000_88AA / 0x188AA)
    AL = 0x80;
    // STOSW ES:DI (1000_88AC / 0x188AC)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_88AD / 0x188AD)
    return NearRet();
    entry:
    label_1000_88D2_188D2:
    // MOV DI,0xa6b0 (1000_88D2 / 0x188D2)
    DI = 0xA6B0;
    // PUSH DI (1000_88D5 / 0x188D5)
    Stack.Push(DI);
    // CALL 0x1000:8944 (1000_88D6 / 0x188D6)
    NearCall(cs1, 0x88D9, unknown_1000_8944_18944);
    // POP SI (1000_88D9 / 0x188D9)
    SI = Stack.Pop();
    // CMP byte ptr [0x28e7],0x2 (1000_88DA / 0x188DA)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x2);
    // JNC 0x1000:8888 (1000_88DF / 0x188DF)
    if(!CarryFlag) {
      goto label_1000_8888_18888;
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_88E1_188E1(0);
  }
  
  public Action unknown_1000_88E1_188E1(int gotoTarget) {
    label_1000_88E1_188E1:
    // LODSB SI (1000_88E1 / 0x188E1)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_88E2 / 0x188E2)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:88f0 (1000_88E4 / 0x188E4)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_88F0 / 0x188F0)
      return NearRet();
    }
    // DEC SI (1000_88E6 / 0x188E6)
    SI = Alu.Dec16(SI);
    // CALL 0x1000:8b11 (1000_88E7 / 0x188E7)
    NearCall(cs1, 0x88EA, unknown_1000_8B11_18B11);
    // CMP byte ptr [SI],0xfe (1000_88EA / 0x188EA)
    Alu.Sub8(UInt8[DS, SI], 0xFE);
    // JNC 0x1000:88f0 (1000_88ED / 0x188ED)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_88F0 / 0x188F0)
      return NearRet();
    }
    // NOP  (1000_88EF / 0x188EF)
    
    label_1000_88F0_188F0:
    // RET  (1000_88F0 / 0x188F0)
    return NearRet();
  }
  
  public Action unknown_1000_88F1_188F1(int gotoTarget) {
    label_1000_88F1_188F1:
    // PUSH DS (1000_88F1 / 0x188F1)
    Stack.Push(DS);
    // PUSH ES (1000_88F2 / 0x188F2)
    Stack.Push(ES);
    // POP DS (1000_88F3 / 0x188F3)
    DS = Stack.Pop();
    // POP ES (1000_88F4 / 0x188F4)
    ES = Stack.Pop();
    // MOV DI,0xa840 (1000_88F5 / 0x188F5)
    DI = 0xA840;
    label_1000_88F8_188F8:
    // LODSB SI (1000_88F8 / 0x188F8)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_88F9 / 0x188F9)
    Alu.Sub8(AL, 0xFF);
    // JZ 0x1000:893d (1000_88FB / 0x188FB)
    if(ZeroFlag) {
      goto label_1000_893D_1893D;
    }
    // CMP AL,0xfe (1000_88FD / 0x188FD)
    Alu.Sub8(AL, 0xFE);
    // JZ 0x1000:8905 (1000_88FF / 0x188FF)
    if(ZeroFlag) {
      goto label_1000_8905_18905;
    }
    // CMP AL,0xe0 (1000_8901 / 0x18901)
    Alu.Sub8(AL, 0xE0);
    // JNC 0x1000:8910 (1000_8903 / 0x18903)
    if(!CarryFlag) {
      goto label_1000_8910_18910;
    }
    label_1000_8905_18905:
    // STOSB ES:DI (1000_8905 / 0x18905)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,0xff (1000_8906 / 0x18906)
    AL = 0xFF;
    // CMP DI,0xa9cf (1000_8908 / 0x18908)
    Alu.Sub16(DI, 0xA9CF);
    // JNC 0x1000:893d (1000_890C / 0x1890C)
    if(!CarryFlag) {
      goto label_1000_893D_1893D;
    }
    // JMP 0x1000:88f8 (1000_890E / 0x1890E)
    goto label_1000_88F8_188F8;
    label_1000_8910_18910:
    // AND AL,0xf (1000_8910 / 0x18910)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // MOV CH,AL (1000_8912 / 0x18912)
    CH = AL;
    // LODSW SI (1000_8914 / 0x18914)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CL,AH (1000_8915 / 0x18915)
    CL = AH;
    // AND AX,0x3fff (1000_8917 / 0x18917)
    // AX &= 0x3FFF;
    AX = Alu.And16(AX, 0x3FFF);
    // SHR CL,1 (1000_891A / 0x1891A)
    // CL >>= 1;
    CL = Alu.Shr8(CL, 1);
    // SHR CL,1 (1000_891C / 0x1891C)
    // CL >>= 1;
    CL = Alu.Shr8(CL, 1);
    // AND CL,0x30 (1000_891E / 0x1891E)
    // CL &= 0x30;
    CL = Alu.And8(CL, 0x30);
    // OR CL,CH (1000_8921 / 0x18921)
    // CL |= CH;
    CL = Alu.Or8(CL, CH);
    // XOR CH,CH (1000_8923 / 0x18923)
    CH = 0;
    // PUSH SI (1000_8925 / 0x18925)
    Stack.Push(SI);
    // MOV SI,word ptr SS:[0x47b4] (1000_8926 / 0x18926)
    SI = UInt16[SS, 0x47B4];
    // ADD SI,AX (1000_892B / 0x1892B)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_892D / 0x1892D)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP SI (1000_892F / 0x1892F)
    SI = Stack.Pop();
    // CMP byte ptr [SI],0xff (1000_8930 / 0x18930)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JZ 0x1000:893c (1000_8933 / 0x18933)
    if(ZeroFlag) {
      goto label_1000_893C_1893C;
    }
    // MOV byte ptr ES:[DI],0x20 (1000_8935 / 0x18935)
    UInt8[ES, DI] = 0x20;
    // INC DI (1000_8939 / 0x18939)
    DI = Alu.Inc16(DI);
    // JMP 0x1000:88f8 (1000_893A / 0x1893A)
    goto label_1000_88F8_188F8;
    label_1000_893C_1893C:
    // LODSB SI (1000_893C / 0x1893C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_893D_1893D:
    // STOSB ES:DI (1000_893D / 0x1893D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV SI,0xa840 (1000_893E / 0x1893E)
    SI = 0xA840;
    // PUSH SS (1000_8941 / 0x18941)
    Stack.Push(SS);
    // POP DS (1000_8942 / 0x18942)
    DS = Stack.Pop();
    // RET  (1000_8943 / 0x18943)
    return NearRet();
  }
  
  public Action unknown_1000_8944_18944(int gotoTarget) {
    label_1000_8944_18944:
    // SUB SP,0x32 (1000_8944 / 0x18944)
    // SP -= 0x32;
    SP = Alu.Sub16(SP, 0x32);
    // MOV BP,SP (1000_8947 / 0x18947)
    BP = SP;
    // PUSH DS (1000_8949 / 0x18949)
    Stack.Push(DS);
    // POP ES (1000_894A / 0x1894A)
    ES = Stack.Pop();
    label_1000_894B_1894B:
    // CMP byte ptr [SI],0x20 (1000_894B / 0x1894B)
    Alu.Sub8(UInt8[DS, SI], 0x20);
    // JNZ 0x1000:8953 (1000_894E / 0x1894E)
    if(!ZeroFlag) {
      goto label_1000_8953_18953;
    }
    // INC SI (1000_8950 / 0x18950)
    SI = Alu.Inc16(SI);
    // JMP 0x1000:894b (1000_8951 / 0x18951)
    goto label_1000_894B_1894B;
    label_1000_8953_18953:
    // LODSB SI (1000_8953 / 0x18953)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_8954 / 0x18954)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:895b (1000_8956 / 0x18956)
    if(SignFlag) {
      goto label_1000_895B_1895B;
    }
    // STOSB ES:DI (1000_8958 / 0x18958)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x1000:8953 (1000_8959 / 0x18959)
    goto label_1000_8953_18953;
    label_1000_895B_1895B:
    // MOV [0x477f],AL (1000_895B / 0x1895B)
    UInt8[DS, 0x477F] = AL;
    // CMP AL,0xf0 (1000_895E / 0x1895E)
    Alu.Sub8(AL, 0xF0);
    // JNC 0x1000:89b0 (1000_8960 / 0x18960)
    if(!CarryFlag) {
      goto label_1000_89B0_189B0;
    }
    // CMP AL,0xd0 (1000_8962 / 0x18962)
    Alu.Sub8(AL, 0xD0);
    // JNC 0x1000:899b (1000_8964 / 0x18964)
    if(!CarryFlag) {
      goto label_1000_899B_1899B;
    }
    // CMP AL,0xa0 (1000_8966 / 0x18966)
    Alu.Sub8(AL, 0xA0);
    // JNC 0x1000:89ad (1000_8968 / 0x18968)
    if(!CarryFlag) {
      goto label_1000_89AD_189AD;
    }
    // CMP AL,0x90 (1000_896A / 0x1896A)
    Alu.Sub8(AL, 0x90);
    // JC 0x1000:8970 (1000_896C / 0x1896C)
    if(CarryFlag) {
      goto label_1000_8970_18970;
    }
    // JMP 0x1000:89e4 (1000_896E / 0x1896E)
    goto label_1000_89E4_189E4;
    label_1000_8970_18970:
    // CMP AL,0x80 (1000_8970 / 0x18970)
    Alu.Sub8(AL, 0x80);
    // JNZ 0x1000:8979 (1000_8972 / 0x18972)
    if(!ZeroFlag) {
      goto label_1000_8979_18979;
    }
    // LODSW SI (1000_8974 / 0x18974)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AL,AH (1000_8975 / 0x18975)
    byte tmp_1000_8975 = AL;
    AL = AH;
    AH = tmp_1000_8975;
    // JMP 0x1000:8984 (1000_8977 / 0x18977)
    goto label_1000_8984_18984;
    label_1000_8979_18979:
    // AND AX,0xf (1000_8979 / 0x18979)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // SHL AX,1 (1000_897C / 0x1897C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BX,AX (1000_897E / 0x1897E)
    BX = AX;
    // MOV AX,word ptr [BX + 0x11eb] (1000_8980 / 0x18980)
    AX = UInt16[DS, (ushort)(BX + 0x11EB)];
    label_1000_8984_18984:
    // MOV word ptr [BP + 0x0],SI (1000_8984 / 0x18984)
    UInt16[SS, BP] = SI;
    // MOV word ptr [BP + 0x2],DS (1000_8987 / 0x18987)
    UInt16[SS, (ushort)(BP + 0x2)] = DS;
    // ADD BP,0x4 (1000_898A / 0x1898A)
    // BP += 0x4;
    BP = Alu.Add16(BP, 0x4);
    // MOV SI,AX (1000_898D / 0x1898D)
    SI = AX;
    // CALL 0x1000:8a3b (1000_898F / 0x1898F)
    NearCall(cs1, 0x8992, unknown_1000_8A3B_18A3B);
    // PUSH ES (1000_8992 / 0x18992)
    Stack.Push(ES);
    // CALL 0x1000:cf70 (1000_8993 / 0x18993)
    NearCall(cs1, 0x8996, unknown_1000_CF70_1CF70);
    // PUSH ES (1000_8996 / 0x18996)
    Stack.Push(ES);
    // POP DS (1000_8997 / 0x18997)
    DS = Stack.Pop();
    // POP ES (1000_8998 / 0x18998)
    ES = Stack.Pop();
    // JMP 0x1000:8953 (1000_8999 / 0x18999)
    goto label_1000_8953_18953;
    label_1000_899B_1899B:
    // STOSB ES:DI (1000_899B / 0x1899B)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOVSB ES:DI,SI (1000_899C / 0x1899C)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xd2 (1000_899D / 0x1899D)
    Alu.Sub8(AL, 0xD2);
    // JC 0x1000:89a3 (1000_899F / 0x1899F)
    if(CarryFlag) {
      goto label_1000_89A3_189A3;
    }
    // JMP 0x1000:8953 (1000_89A1 / 0x189A1)
    goto label_1000_8953_18953;
    label_1000_89A3_189A3:
    // MOVSB ES:DI,SI (1000_89A3 / 0x189A3)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xd0 (1000_89A4 / 0x189A4)
    Alu.Sub8(AL, 0xD0);
    // JNZ 0x1000:89aa (1000_89A6 / 0x189A6)
    if(!ZeroFlag) {
      goto label_1000_89AA_189AA;
    }
    // JMP 0x1000:8953 (1000_89A8 / 0x189A8)
    goto label_1000_8953_18953;
    label_1000_89AA_189AA:
    // MOVSW ES:DI,SI (1000_89AA / 0x189AA)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JMP 0x1000:8953 (1000_89AB / 0x189AB)
    goto label_1000_8953_18953;
    label_1000_89AD_189AD:
    // STOSB ES:DI (1000_89AD / 0x189AD)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x1000:8953 (1000_89AE / 0x189AE)
    goto label_1000_8953_18953;
    label_1000_89B0_189B0:
    // MOV BX,SP (1000_89B0 / 0x189B0)
    BX = SP;
    // CMP BP,BX (1000_89B2 / 0x189B2)
    Alu.Sub16(BP, BX);
    // JZ 0x1000:89c1 (1000_89B4 / 0x189B4)
    if(ZeroFlag) {
      goto label_1000_89C1_189C1;
    }
    // SUB BP,0x4 (1000_89B6 / 0x189B6)
    // BP -= 0x4;
    BP = Alu.Sub16(BP, 0x4);
    // MOV SI,word ptr [BP + 0x0] (1000_89B9 / 0x189B9)
    SI = UInt16[SS, BP];
    // MOV DS,word ptr [BP + 0x2] (1000_89BC / 0x189BC)
    DS = UInt16[SS, (ushort)(BP + 0x2)];
    // JMP 0x1000:8953 (1000_89BF / 0x189BF)
    goto label_1000_8953_18953;
    label_1000_89C1_189C1:
    // STOSB ES:DI (1000_89C1 / 0x189C1)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_89C2 / 0x189C2)
    Alu.Sub8(AL, 0xFF);
    // JNZ 0x1000:89c8 (1000_89C4 / 0x189C4)
    if(!ZeroFlag) {
      goto label_1000_89C8_189C8;
    }
    // XOR SI,SI (1000_89C6 / 0x189C6)
    SI = 0;
    label_1000_89C8_189C8:
    // MOV word ptr [0x47b6],SI (1000_89C8 / 0x189C8)
    UInt16[DS, 0x47B6] = SI;
    // MOV word ptr [0x47b8],DS (1000_89CC / 0x189CC)
    UInt16[DS, 0x47B8] = DS;
    // ADD SP,0x32 (1000_89D0 / 0x189D0)
    // SP += 0x32;
    SP = Alu.Add16(SP, 0x32);
    // TEST byte ptr [0x47de],0x10 (1000_89D3 / 0x189D3)
    Alu.And8(UInt8[DS, 0x47DE], 0x10);
    // JZ 0x1000:89e3 (1000_89D8 / 0x189D8)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_89E3 / 0x189E3)
      return NearRet();
    }
    // MOV BX,0x3 (1000_89DA / 0x189DA)
    BX = 0x3;
    // CALL 0x1000:e3b7 (1000_89DD / 0x189DD)
    NearCall(cs1, 0x89E0, unknown_1000_E3B7_1E3B7);
    // CALL 0x1000:8ac3 (1000_89E0 / 0x189E0)
    NearCall(cs1, 0x89E3, unknown_1000_8AC3_18AC3);
    label_1000_89E3_189E3:
    // RET  (1000_89E3 / 0x189E3)
    return NearRet();
    label_1000_89E4_189E4:
    // PUSH BP (1000_89E4 / 0x189E4)
    Stack.Push(BP);
    // MOV BL,AL (1000_89E5 / 0x189E5)
    BL = AL;
    // LODSB SI (1000_89E7 / 0x189E7)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_89E8 / 0x189E8)
    AH = 0;
    // MOV BP,AX (1000_89EA / 0x189EA)
    BP = AX;
    // MOV AX,word ptr [BP + 0x0] (1000_89EC / 0x189EC)
    AX = UInt16[SS, BP];
    // CMP BL,0x92 (1000_89F0 / 0x189F0)
    Alu.Sub8(BL, 0x92);
    // JZ 0x1000:89f7 (1000_89F3 / 0x189F3)
    if(ZeroFlag) {
      goto label_1000_89F7_189F7;
    }
    // XOR AH,AH (1000_89F5 / 0x189F5)
    AH = 0;
    label_1000_89F7_189F7:
    // PUSH AX (1000_89F7 / 0x189F7)
    Stack.Push(AX);
    // CALL 0x1000:8acc (1000_89F8 / 0x189F8)
    NearCall(cs1, 0x89FB, unknown_1000_8ACC_18ACC);
    // POP AX (1000_89FB / 0x189FB)
    AX = Stack.Pop();
    // CALL 0x1000:8a23 (1000_89FC / 0x189FC)
    NearCall(cs1, 0x89FF, unknown_1000_8A23_18A23);
    // XCHG AX,BX (1000_89FF / 0x189FF)
    ushort tmp_1000_89FF = AX;
    AX = BX;
    BX = tmp_1000_89FF;
    // MOV CX,0x5 (1000_8A00 / 0x18A00)
    CX = 0x5;
    // JMP 0x1000:8a0d (1000_8A03 / 0x18A03)
    goto label_1000_8A0D_18A0D;
    label_1000_8A05_18A05:
    // MOV AL,DH (1000_8A05 / 0x18A05)
    AL = DH;
    // MOV DH,DL (1000_8A07 / 0x18A07)
    DH = DL;
    // MOV DL,BH (1000_8A09 / 0x18A09)
    DL = BH;
    // MOV BH,BL (1000_8A0B / 0x18A0B)
    BH = BL;
    label_1000_8A0D_18A0D:
    // OR AL,AL (1000_8A0D / 0x18A0D)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // LOOPZ 0x1000:8a05 (1000_8A0F / 0x18A0F)
    if(--CX != 0 && ZeroFlag) {
      goto label_1000_8A05_18A05;
    }
    // INC CX (1000_8A11 / 0x18A11)
    CX = Alu.Inc16(CX);
    label_1000_8A12_18A12:
    // ADD AL,0x30 (1000_8A12 / 0x18A12)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    // STOSB ES:DI (1000_8A14 / 0x18A14)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,DH (1000_8A15 / 0x18A15)
    AL = DH;
    // MOV DH,DL (1000_8A17 / 0x18A17)
    DH = DL;
    // MOV DL,BH (1000_8A19 / 0x18A19)
    DL = BH;
    // MOV BH,BL (1000_8A1B / 0x18A1B)
    BH = BL;
    // LOOP 0x1000:8a12 (1000_8A1D / 0x18A1D)
    if(--CX != 0) {
      goto label_1000_8A12_18A12;
    }
    // POP BP (1000_8A1F / 0x18A1F)
    BP = Stack.Pop();
    // JMP 0x1000:8953 (1000_8A20 / 0x18A20)
    goto label_1000_8953_18953;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_8A23_18A23(0);
  }
  
  public Action unknown_1000_8A23_18A23(int gotoTarget) {
    label_1000_8A23_18A23:
    // XOR DX,DX (1000_8A23 / 0x18A23)
    DX = 0;
    // MOV CX,0x2710 (1000_8A25 / 0x18A25)
    CX = 0x2710;
    // DIV CX (1000_8A28 / 0x18A28)
    Cpu.Div16(CX);
    // MOV BL,AL (1000_8A2A / 0x18A2A)
    BL = AL;
    // MOV CX,0x64 (1000_8A2C / 0x18A2C)
    CX = 0x64;
    // MOV AX,DX (1000_8A2F / 0x18A2F)
    AX = DX;
    // XOR DX,DX (1000_8A31 / 0x18A31)
    DX = 0;
    // DIV CX (1000_8A33 / 0x18A33)
    Cpu.Div16(CX);
    // AAM 0xa (1000_8A35 / 0x18A35)
    Cpu.Aam(0xA);
    // XCHG AX,DX (1000_8A37 / 0x18A37)
    ushort tmp_1000_8A37 = AX;
    AX = DX;
    DX = tmp_1000_8A37;
    // AAM 0xa (1000_8A38 / 0x18A38)
    Cpu.Aam(0xA);
    // RET  (1000_8A3A / 0x18A3A)
    return NearRet();
  }
  
  public Action unknown_1000_8A3B_18A3B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8AC1: goto label_1000_8AC1_18AC1;break;
      case 0x8AC2: goto label_1000_8AC2_18AC2;break;
      case 0x8ABE: goto label_1000_8ABE_18ABE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8A3B_18A3B:
    // TEST byte ptr [0x47de],0x10 (1000_8A3B / 0x18A3B)
    Alu.And8(UInt8[DS, 0x47DE], 0x10);
    // JNZ 0x1000:8a43 (1000_8A40 / 0x18A40)
    if(!ZeroFlag) {
      goto label_1000_8A43_18A43;
    }
    // RET  (1000_8A42 / 0x18A42)
    return NearRet();
    label_1000_8A43_18A43:
    // PUSH BX (1000_8A43 / 0x18A43)
    Stack.Push(BX);
    // MOV BH,byte ptr [0x477f] (1000_8A44 / 0x18A44)
    BH = UInt8[DS, 0x477F];
    // CMP BH,0x8b (1000_8A48 / 0x18A48)
    Alu.Sub8(BH, 0x8B);
    // JNZ 0x1000:8a52 (1000_8A4B / 0x18A4B)
    if(!ZeroFlag) {
      goto label_1000_8A52_18A52;
    }
    // SUB AX,0x108 (1000_8A4D / 0x18A4D)
    // AX -= 0x108;
    AX = Alu.Sub16(AX, 0x108);
    // JMP 0x1000:8abe (1000_8A50 / 0x18A50)
    goto label_1000_8ABE_18ABE;
    label_1000_8A52_18A52:
    // CMP BH,0x84 (1000_8A52 / 0x18A52)
    Alu.Sub8(BH, 0x84);
    // JNZ 0x1000:8a69 (1000_8A55 / 0x18A55)
    if(!ZeroFlag) {
      goto label_1000_8A69_18A69;
    }
    // SUB AX,0x48 (1000_8A57 / 0x18A57)
    // AX -= 0x48;
    AX = Alu.Sub16(AX, 0x48);
    // JZ 0x1000:8abe (1000_8A5A / 0x18A5A)
    if(ZeroFlag) {
      goto label_1000_8ABE_18ABE;
    }
    // DEC AX (1000_8A5C / 0x18A5C)
    AX = Alu.Dec16(AX);
    // CMP AL,0x3 (1000_8A5D / 0x18A5D)
    Alu.Sub8(AL, 0x3);
    // JC 0x1000:8abe (1000_8A5F / 0x18A5F)
    if(CarryFlag) {
      goto label_1000_8ABE_18ABE;
    }
    // SUB AX,0xffcf (1000_8A61 / 0x18A61)
    // AX -= 0xFFCF;
    AX = Alu.Sub16(AX, 0xFFCF);
    // CMP AX,0xc (1000_8A64 / 0x18A64)
    Alu.Sub16(AX, 0xC);
    // JMP 0x1000:8abc (1000_8A67 / 0x18A67)
    goto label_1000_8ABC_18ABC;
    label_1000_8A69_18A69:
    // CMP BH,0x83 (1000_8A69 / 0x18A69)
    Alu.Sub8(BH, 0x83);
    // JZ 0x1000:8a71 (1000_8A6C / 0x18A6C)
    if(ZeroFlag) {
      goto label_1000_8A71_18A71;
    }
    // CMP BH,0x8c (1000_8A6E / 0x18A6E)
    Alu.Sub8(BH, 0x8C);
    label_1000_8A71_18A71:
    // JNZ 0x1000:8a7a (1000_8A71 / 0x18A71)
    if(!ZeroFlag) {
      goto label_1000_8A7A_18A7A;
    }
    // SUB AX,0xe8 (1000_8A73 / 0x18A73)
    // AX -= 0xE8;
    AX = Alu.Sub16(AX, 0xE8);
    // CMP AL,0x7 (1000_8A76 / 0x18A76)
    Alu.Sub8(AL, 0x7);
    // JMP 0x1000:8abc (1000_8A78 / 0x18A78)
    goto label_1000_8ABC_18ABC;
    label_1000_8A7A_18A7A:
    // MOV BL,BH (1000_8A7A / 0x18A7A)
    BL = BH;
    // SUB BL,0x86 (1000_8A7C / 0x18A7C)
    // BL -= 0x86;
    BL = Alu.Sub8(BL, 0x86);
    // CMP BL,0x3 (1000_8A7F / 0x18A7F)
    Alu.Sub8(BL, 0x3);
    // JNC 0x1000:8a97 (1000_8A82 / 0x18A82)
    if(!CarryFlag) {
      goto label_1000_8A97_18A97;
    }
    // MOV BL,byte ptr [0x47de] (1000_8A84 / 0x18A84)
    BL = UInt8[DS, 0x47DE];
    // AND BL,0xf (1000_8A88 / 0x18A88)
    // BL &= 0xF;
    BL = Alu.And8(BL, 0xF);
    // CMP BL,0x1 (1000_8A8B / 0x18A8B)
    Alu.Sub8(BL, 0x1);
    // JNZ 0x1000:8ac1 (1000_8A8E / 0x18A8E)
    if(!ZeroFlag) {
      goto label_1000_8AC1_18AC1;
    }
    // SUB AX,0xd1 (1000_8A90 / 0x18A90)
    // AX -= 0xD1;
    AX = Alu.Sub16(AX, 0xD1);
    // CMP AL,0x7 (1000_8A93 / 0x18A93)
    Alu.Sub8(AL, 0x7);
    // JMP 0x1000:8abc (1000_8A95 / 0x18A95)
    goto label_1000_8ABC_18ABC;
    label_1000_8A97_18A97:
    // CMP BH,0x85 (1000_8A97 / 0x18A97)
    Alu.Sub8(BH, 0x85);
    // JNZ 0x1000:8ab2 (1000_8A9A / 0x18A9A)
    if(!ZeroFlag) {
      goto label_1000_8AB2_18AB2;
    }
    // MOV BL,byte ptr [0x47de] (1000_8A9C / 0x18A9C)
    BL = UInt8[DS, 0x47DE];
    // AND BL,0xf (1000_8AA0 / 0x18AA0)
    // BL &= 0xF;
    BL = Alu.And8(BL, 0xF);
    // CMP BL,0x1 (1000_8AA3 / 0x18AA3)
    Alu.Sub8(BL, 0x1);
    // JNZ 0x1000:8ac1 (1000_8AA6 / 0x18AA6)
    if(!ZeroFlag) {
      goto label_1000_8AC1_18AC1;
    }
    // CMP AX,0x74 (1000_8AA8 / 0x18AA8)
    Alu.Sub16(AX, 0x74);
    // MOV AL,0x0 (1000_8AAB / 0x18AAB)
    AL = 0x0;
    // JNZ 0x1000:8abe (1000_8AAD / 0x18AAD)
    if(!ZeroFlag) {
      goto label_1000_8ABE_18ABE;
    }
    // INC AX (1000_8AAF / 0x18AAF)
    AX = Alu.Inc16(AX);
    // JMP 0x1000:8abe (1000_8AB0 / 0x18AB0)
    goto label_1000_8ABE_18ABE;
    label_1000_8AB2_18AB2:
    // CMP BH,0x89 (1000_8AB2 / 0x18AB2)
    Alu.Sub8(BH, 0x89);
    // JNZ 0x1000:8ac1 (1000_8AB5 / 0x18AB5)
    if(!ZeroFlag) {
      goto label_1000_8AC1_18AC1;
    }
    // SUB AX,0xda (1000_8AB7 / 0x18AB7)
    // AX -= 0xDA;
    AX = Alu.Sub16(AX, 0xDA);
    // CMP AL,0x8 (1000_8ABA / 0x18ABA)
    Alu.Sub8(AL, 0x8);
    label_1000_8ABC_18ABC:
    // JNC 0x1000:8ac1 (1000_8ABC / 0x18ABC)
    if(!CarryFlag) {
      goto label_1000_8AC1_18AC1;
    }
    label_1000_8ABE_18ABE:
    // CALL 0x1000:8ac3 (1000_8ABE / 0x18ABE)
    NearCall(cs1, 0x8AC1, unknown_1000_8AC3_18AC3);
    label_1000_8AC1_18AC1:
    // POP BX (1000_8AC1 / 0x18AC1)
    BX = Stack.Pop();
    label_1000_8AC2_18AC2:
    // RET  (1000_8AC2 / 0x18AC2)
    return NearRet();
  }
  
  public Action unknown_1000_8AC3_18AC3(int gotoTarget) {
    label_1000_8AC3_18AC3:
    // MOV [0x47e0],AL (1000_8AC3 / 0x18AC3)
    UInt8[DS, 0x47E0] = AL;
    // AND byte ptr [0x47de],0xef (1000_8AC6 / 0x18AC6)
    // UInt8[DS, 0x47DE] &= 0xEF;
    UInt8[DS, 0x47DE] = Alu.And8(UInt8[DS, 0x47DE], 0xEF);
    // RET  (1000_8ACB / 0x18ACB)
    return NearRet();
  }
  
  public Action unknown_1000_8ACC_18ACC(int gotoTarget) {
    label_1000_8ACC_18ACC:
    // TEST byte ptr SS:[0x47de],0x10 (1000_8ACC / 0x18ACC)
    Alu.And8(UInt8[SS, 0x47DE], 0x10);
    // JZ 0x1000:8ac2 (1000_8AD2 / 0x18AD2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_8AC2 / 0x18AC2)
      return NearRet();
    }
    // PUSH BX (1000_8AD4 / 0x18AD4)
    Stack.Push(BX);
    // LEA BP,[BP + 0x0] (1000_8AD5 / 0x18AD5)
    BP = BP;
    // CMP BP,0xcf (1000_8AD9 / 0x18AD9)
    Alu.Sub16(BP, 0xCF);
    // JZ 0x1000:8aff (1000_8ADD / 0x18ADD)
    if(ZeroFlag) {
      goto label_1000_8AFF_18AFF;
    }
    // CMP BP,0x55 (1000_8ADF / 0x18ADF)
    Alu.Sub16(BP, 0x55);
    // JZ 0x1000:8b07 (1000_8AE3 / 0x18AE3)
    if(ZeroFlag) {
      goto label_1000_8B07_18B07;
    }
    // CMP BP,0x61 (1000_8AE5 / 0x18AE5)
    Alu.Sub16(BP, 0x61);
    // JZ 0x1000:8b07 (1000_8AE9 / 0x18AE9)
    if(ZeroFlag) {
      goto label_1000_8B07_18B07;
    }
    // CMP BP,0x44 (1000_8AEB / 0x18AEB)
    Alu.Sub16(BP, 0x44);
    // JNZ 0x1000:8ac1 (1000_8AEF / 0x18AEF)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8A3B_18A3B(0x18AC1 - cs1 * 0x10);
    }
    // MOV BH,byte ptr SS:[0x47de] (1000_8AF1 / 0x18AF1)
    BH = UInt8[SS, 0x47DE];
    // AND BH,0xf (1000_8AF6 / 0x18AF6)
    // BH &= 0xF;
    BH = Alu.And8(BH, 0xF);
    // CMP BH,0x1 (1000_8AF9 / 0x18AF9)
    Alu.Sub8(BH, 0x1);
    // JNZ 0x1000:8ac1 (1000_8AFC / 0x18AFC)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8A3B_18A3B(0x18AC1 - cs1 * 0x10);
    }
    // DEC AX (1000_8AFE / 0x18AFE)
    AX = Alu.Dec16(AX);
    label_1000_8AFF_18AFF:
    // CMP AL,0x8 (1000_8AFF / 0x18AFF)
    Alu.Sub8(AL, 0x8);
    // JBE 0x1000:8abe (1000_8B01 / 0x18B01)
    if(CarryFlag || ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8A3B_18A3B(0x18ABE - cs1 * 0x10);
    }
    // MOV AL,0x8 (1000_8B03 / 0x18B03)
    AL = 0x8;
    // JMP 0x1000:8abe (1000_8B05 / 0x18B05)
    // Jump converted to non entry function call
    return unknown_1000_8A3B_18A3B(0x18ABE - cs1 * 0x10);
    label_1000_8B07_18B07:
    // DEC AX (1000_8B07 / 0x18B07)
    AX = Alu.Dec16(AX);
    // CMP AL,0x4 (1000_8B08 / 0x18B08)
    Alu.Sub8(AL, 0x4);
    // JBE 0x1000:8abe (1000_8B0A / 0x18B0A)
    if(CarryFlag || ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_8A3B_18A3B(0x18ABE - cs1 * 0x10);
    }
    // MOV AL,0x4 (1000_8B0C / 0x18B0C)
    AL = 0x4;
    // JMP 0x1000:8abe (1000_8B0E / 0x18B0E)
    // Jump converted to non entry function call
    return unknown_1000_8A3B_18A3B(0x18ABE - cs1 * 0x10);
  }
  
  public Action unknown_1000_8B11_18B11(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8B10: break;
      case 0: goto entry; break; //
    }
    label_1000_8B10_18B10:
    // RET  (1000_8B10 / 0x18B10)
    return NearRet();
    entry:
    label_1000_8B11_18B11:
    // PUSH SI (1000_8B11 / 0x18B11)
    Stack.Push(SI);
    // CALL 0x1000:8c8a (1000_8B12 / 0x18B12)
    NearCall(cs1, 0x8B15, unknown_1000_8C8A_18C8A);
    // POP SI (1000_8B15 / 0x18B15)
    SI = Stack.Pop();
    // CALL 0x1000:8ccd (1000_8B16 / 0x18B16)
    NearCall(cs1, 0x8B19, unknown_1000_8CCD_18CCD);
    // JC 0x1000:8b10 (1000_8B19 / 0x18B19)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_8B10 / 0x18B10)
      return NearRet();
    }
    // CALL 0x1000:8f28 (1000_8B1B / 0x18B1B)
    NearCall(cs1, 0x8B1E, unknown_1000_8F28_18F28);
    // CALL 0x1000:8df0 (1000_8B1E / 0x18B1E)
    NearCall(cs1, 0x8B21, unknown_1000_8DF0_18DF0);
    // MOV DX,word ptr [0x4791] (1000_8B21 / 0x18B21)
    DX = UInt16[DS, 0x4791];
    // MOV BX,word ptr [0x4793] (1000_8B25 / 0x18B25)
    BX = UInt16[DS, 0x4793];
    // CALL 0x1000:d04e (1000_8B29 / 0x18B29)
    NearCall(cs1, 0x8B2C, unknown_1000_D04E_1D04E);
    // MOV BP,0xa9d0 (1000_8B2C / 0x18B2C)
    BP = 0xA9D0;
    // MOV word ptr [0x479a],0xa (1000_8B2F / 0x18B2F)
    UInt16[DS, 0x479A] = 0xA;
    // MOV AL,[0x4799] (1000_8B35 / 0x18B35)
    AL = UInt8[DS, 0x4799];
    // AND AL,0xc (1000_8B38 / 0x18B38)
    // AL &= 0xC;
    AL = Alu.And8(AL, 0xC);
    // JZ 0x1000:8b8b (1000_8B3A / 0x18B3A)
    if(ZeroFlag) {
      goto label_1000_8B8B_18B8B;
    }
    // CMP AL,0x8 (1000_8B3C / 0x18B3C)
    Alu.Sub8(AL, 0x8);
    // JNC 0x1000:8b66 (1000_8B3E / 0x18B3E)
    if(!CarryFlag) {
      goto label_1000_8B66_18B66;
    }
    // MOV BX,word ptr [BP + 0x0] (1000_8B40 / 0x18B40)
    BX = UInt16[SS, BP];
    // XOR DX,DX (1000_8B43 / 0x18B43)
    DX = 0;
    // MOV AX,[0x478d] (1000_8B45 / 0x18B45)
    AX = UInt16[DS, 0x478D];
    // SUB AX,0x8 (1000_8B48 / 0x18B48)
    // AX -= 0x8;
    AX = Alu.Sub16(AX, 0x8);
    // DEC BX (1000_8B4B / 0x18B4B)
    BX = Alu.Dec16(BX);
    // JZ 0x1000:8b55 (1000_8B4C / 0x18B4C)
    if(ZeroFlag) {
      goto label_1000_8B55_18B55;
    }
    // DIV BX (1000_8B4E / 0x18B4E)
    Cpu.Div16(BX);
    // MOV [0x479a],AX (1000_8B50 / 0x18B50)
    UInt16[DS, 0x479A] = AX;
    // JMP 0x1000:8b8b (1000_8B53 / 0x18B53)
    goto label_1000_8B8B_18B8B;
    label_1000_8B55_18B55:
    // SHR AX,1 (1000_8B55 / 0x18B55)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV BX,AX (1000_8B57 / 0x18B57)
    BX = AX;
    // MOV DX,word ptr [0xd82c] (1000_8B59 / 0x18B59)
    DX = UInt16[DS, 0xD82C];
    // ADD BX,word ptr [0xd82e] (1000_8B5D / 0x18B5D)
    // BX += UInt16[DS, 0xD82E];
    BX = Alu.Add16(BX, UInt16[DS, 0xD82E]);
    // CALL 0x1000:d04e (1000_8B61 / 0x18B61)
    NearCall(cs1, 0x8B64, unknown_1000_D04E_1D04E);
    // JMP 0x1000:8b8b (1000_8B64 / 0x18B64)
    goto label_1000_8B8B_18B8B;
    label_1000_8B66_18B66:
    // PUSHF  (1000_8B66 / 0x18B66)
    Stack.Push(FlagRegister);
    // MOV AX,word ptr [BP + 0x0] (1000_8B67 / 0x18B67)
    AX = UInt16[SS, BP];
    // MOV AH,0xa (1000_8B6A / 0x18B6A)
    AH = 0xA;
    // MUL AH (1000_8B6C / 0x18B6C)
    Cpu.Mul8(AH);
    // MOV BX,word ptr [0x478d] (1000_8B6E / 0x18B6E)
    BX = UInt16[DS, 0x478D];
    // SUB BX,AX (1000_8B72 / 0x18B72)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // JNC 0x1000:8b78 (1000_8B74 / 0x18B74)
    if(!CarryFlag) {
      goto label_1000_8B78_18B78;
    }
    // XOR BX,BX (1000_8B76 / 0x18B76)
    BX = 0;
    label_1000_8B78_18B78:
    // MOV [0x478d],AX (1000_8B78 / 0x18B78)
    UInt16[DS, 0x478D] = AX;
    // POPF  (1000_8B7B / 0x18B7B)
    FlagRegister = Stack.Pop();
    // JNZ 0x1000:8b80 (1000_8B7C / 0x18B7C)
    if(!ZeroFlag) {
      goto label_1000_8B80_18B80;
    }
    // SHR BX,1 (1000_8B7E / 0x18B7E)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    label_1000_8B80_18B80:
    // MOV DX,word ptr [0xd82c] (1000_8B80 / 0x18B80)
    DX = UInt16[DS, 0xD82C];
    // ADD BX,word ptr [0xd82e] (1000_8B84 / 0x18B84)
    // BX += UInt16[DS, 0xD82E];
    BX = Alu.Add16(BX, UInt16[DS, 0xD82E]);
    // CALL 0x1000:d04e (1000_8B88 / 0x18B88)
    NearCall(cs1, 0x8B8B, unknown_1000_D04E_1D04E);
    label_1000_8B8B_18B8B:
    // MOV DX,word ptr [BP + 0x0] (1000_8B8B / 0x18B8B)
    DX = UInt16[SS, BP];
    // ADD BP,0x2 (1000_8B8E / 0x18B8E)
    // BP += 0x2;
    BP = Alu.Add16(BP, 0x2);
    label_1000_8B91_18B91:
    // PUSH DX (1000_8B91 / 0x18B91)
    Stack.Push(DX);
    // MOV CX,word ptr [BP + 0x0] (1000_8B92 / 0x18B92)
    CX = UInt16[SS, BP];
    // ADD BP,0x2 (1000_8B95 / 0x18B95)
    // BP += 0x2;
    BP = Alu.Add16(BP, 0x2);
    // MOV DX,word ptr [BP + 0x0] (1000_8B98 / 0x18B98)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (1000_8B9B / 0x18B9B)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // ADD BP,0x4 (1000_8B9E / 0x18B9E)
    // BP += 0x4;
    BP = Alu.Add16(BP, 0x4);
    // JCXZ 0x1000:8c0c (1000_8BA1 / 0x18BA1)
    if(CX == 0) {
      // JCXZ target is JMP, inlining.
      // JMP 0x1000:8c47 (1000_8C0C / 0x18C0C)
      goto label_1000_8C47_18C47;
    }
    // TEST byte ptr [0x4799],0x2 (1000_8BA3 / 0x18BA3)
    Alu.And8(UInt8[DS, 0x4799], 0x2);
    // JZ 0x1000:8bd1 (1000_8BA8 / 0x18BA8)
    if(ZeroFlag) {
      goto label_1000_8BD1_18BD1;
    }
    // MOV AL,DL (1000_8BAA / 0x18BAA)
    AL = DL;
    // MOV DL,CL (1000_8BAC / 0x18BAC)
    DL = CL;
    // DEC DL (1000_8BAE / 0x18BAE)
    DL = Alu.Dec8(DL);
    // JZ 0x1000:8bb4 (1000_8BB0 / 0x18BB0)
    if(ZeroFlag) {
      goto label_1000_8BB4_18BB4;
    }
    // MUL DL (1000_8BB2 / 0x18BB2)
    Cpu.Mul8(DL);
    label_1000_8BB4_18BB4:
    // ADD AL,BL (1000_8BB4 / 0x18BB4)
    // AL += BL;
    AL = Alu.Add8(AL, BL);
    // MOV DL,AL (1000_8BB6 / 0x18BB6)
    DL = AL;
    // MOV AL,CL (1000_8BB8 / 0x18BB8)
    AL = CL;
    // DEC AL (1000_8BBA / 0x18BBA)
    AL = Alu.Dec8(AL);
    // XOR AH,AH (1000_8BBC / 0x18BBC)
    AH = 0;
    // SHL AX,1 (1000_8BBE / 0x18BBE)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SUB DX,AX (1000_8BC0 / 0x18BC0)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // SHL AX,1 (1000_8BC2 / 0x18BC2)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SUB DX,AX (1000_8BC4 / 0x18BC4)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // SHR DX,1 (1000_8BC6 / 0x18BC6)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // ADD word ptr [0xd82c],DX (1000_8BC8 / 0x18BC8)
    // UInt16[DS, 0xD82C] += DX;
    UInt16[DS, 0xD82C] = Alu.Add16(UInt16[DS, 0xD82C], DX);
    // AND byte ptr [0x4799],0xfe (1000_8BCC / 0x18BCC)
    // UInt8[DS, 0x4799] &= 0xFE;
    UInt8[DS, 0x4799] = Alu.And8(UInt8[DS, 0x4799], 0xFE);
    label_1000_8BD1_18BD1:
    // POP AX (1000_8BD1 / 0x18BD1)
    AX = Stack.Pop();
    // PUSH AX (1000_8BD2 / 0x18BD2)
    Stack.Push(AX);
    // CMP AX,0x1 (1000_8BD3 / 0x18BD3)
    Alu.Sub16(AX, 0x1);
    // JZ 0x1000:8bdf (1000_8BD6 / 0x18BD6)
    if(ZeroFlag) {
      goto label_1000_8BDF_18BDF;
    }
    // TEST byte ptr [0x4799],0x1 (1000_8BD8 / 0x18BD8)
    Alu.And8(UInt8[DS, 0x4799], 0x1);
    // JNZ 0x1000:8be5 (1000_8BDD / 0x18BDD)
    if(!ZeroFlag) {
      goto label_1000_8BE5_18BE5;
    }
    label_1000_8BDF_18BDF:
    // MOV DX,0x6 (1000_8BDF / 0x18BDF)
    DX = 0x6;
    // MOV BX,0x0 (1000_8BE2 / 0x18BE2)
    BX = 0x0;
    label_1000_8BE5_18BE5:
    // MOV word ptr [0x479c],BX (1000_8BE5 / 0x18BE5)
    UInt16[DS, 0x479C] = BX;
    label_1000_8BE9_18BE9:
    // LODSB SI (1000_8BE9 / 0x18BE9)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_8BEA / 0x18BEA)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:8c26 (1000_8BEC / 0x18BEC)
    if(SignFlag) {
      goto label_1000_8C26_18C26;
    }
    // CMP AL,0x20 (1000_8BEE / 0x18BEE)
    Alu.Sub8(AL, 0x20);
    // JZ 0x1000:8c19 (1000_8BF0 / 0x18BF0)
    if(ZeroFlag) {
      goto label_1000_8C19_18C19;
    }
    // CMP AL,0xd (1000_8BF2 / 0x18BF2)
    Alu.Sub8(AL, 0xD);
    // JZ 0x1000:8c19 (1000_8BF4 / 0x18BF4)
    if(ZeroFlag) {
      goto label_1000_8C19_18C19;
    }
    // CMP AL,0x6 (1000_8BF6 / 0x18BF6)
    Alu.Sub8(AL, 0x6);
    // JZ 0x1000:8c0f (1000_8BF8 / 0x18BF8)
    if(ZeroFlag) {
      goto label_1000_8C0F_18C0F;
    }
    // CMP AL,0x8 (1000_8BFA / 0x18BFA)
    Alu.Sub8(AL, 0x8);
    // JZ 0x1000:8c14 (1000_8BFC / 0x18BFC)
    if(ZeroFlag) {
      goto label_1000_8C14_18C14;
    }
    // CMP AL,0x1 (1000_8BFE / 0x18BFE)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:8c41 (1000_8C00 / 0x18C00)
    if(!ZeroFlag) {
      goto label_1000_8C41_18C41;
    }
    // MOV AX,[0xdbe4] (1000_8C02 / 0x18C02)
    AX = UInt16[DS, 0xDBE4];
    // XCHG AL,AH (1000_8C05 / 0x18C05)
    byte tmp_1000_8C05 = AL;
    AL = AH;
    AH = tmp_1000_8C05;
    // MOV [0xdbe4],AX (1000_8C07 / 0x18C07)
    UInt16[DS, 0xDBE4] = AX;
    // JMP 0x1000:8be9 (1000_8C0A / 0x18C0A)
    goto label_1000_8BE9_18BE9;
    label_1000_8C0C_18C0C:
    // JMP 0x1000:8c47 (1000_8C0C / 0x18C0C)
    goto label_1000_8C47_18C47;
    label_1000_8C0F_18C0F:
    // CALL 0x1000:d075 (1000_8C0F / 0x18C0F)
    NearCall(cs1, 0x8C12, SetFontToMenu_1000_D075_1D075);
    // JMP 0x1000:8be9 (1000_8C12 / 0x18C12)
    goto label_1000_8BE9_18BE9;
    label_1000_8C14_18C14:
    // CALL 0x1000:d068 (1000_8C14 / 0x18C14)
    NearCall(cs1, 0x8C17, SetFontToIntro_1000_D068_1D068);
    // JMP 0x1000:8be9 (1000_8C17 / 0x18C17)
    goto label_1000_8BE9_18BE9;
    label_1000_8C19_18C19:
    // CMP byte ptr [SI],0x20 (1000_8C19 / 0x18C19)
    Alu.Sub8(UInt8[DS, SI], 0x20);
    // JZ 0x1000:8c23 (1000_8C1C / 0x18C1C)
    if(ZeroFlag) {
      goto label_1000_8C23_18C23;
    }
    // CMP byte ptr [SI],0xd (1000_8C1E / 0x18C1E)
    Alu.Sub8(UInt8[DS, SI], 0xD);
    // JNZ 0x1000:8c26 (1000_8C21 / 0x18C21)
    if(!ZeroFlag) {
      goto label_1000_8C26_18C26;
    }
    label_1000_8C23_18C23:
    // INC SI (1000_8C23 / 0x18C23)
    SI = Alu.Inc16(SI);
    // JMP 0x1000:8c19 (1000_8C24 / 0x18C24)
    goto label_1000_8C19_18C19;
    label_1000_8C26_18C26:
    // DEC CX (1000_8C26 / 0x18C26)
    CX = Alu.Dec16(CX);
    // JZ 0x1000:8c47 (1000_8C27 / 0x18C27)
    if(ZeroFlag) {
      goto label_1000_8C47_18C47;
    }
    // PUSH DX (1000_8C29 / 0x18C29)
    Stack.Push(DX);
    // ADD DX,word ptr [0xd82c] (1000_8C2A / 0x18C2A)
    // DX += UInt16[DS, 0xD82C];
    DX = Alu.Add16(DX, UInt16[DS, 0xD82C]);
    // CMP word ptr [0x479c],0x0 (1000_8C2E / 0x18C2E)
    Alu.Sub16(UInt16[DS, 0x479C], 0x0);
    // JZ 0x1000:8c3a (1000_8C33 / 0x18C33)
    if(ZeroFlag) {
      goto label_1000_8C3A_18C3A;
    }
    // INC DX (1000_8C35 / 0x18C35)
    DX = Alu.Inc16(DX);
    // DEC word ptr [0x479c] (1000_8C36 / 0x18C36)
    UInt16[DS, 0x479C] = Alu.Dec16(UInt16[DS, 0x479C]);
    label_1000_8C3A_18C3A:
    // MOV word ptr [0xd82c],DX (1000_8C3A / 0x18C3A)
    UInt16[DS, 0xD82C] = DX;
    // POP DX (1000_8C3E / 0x18C3E)
    DX = Stack.Pop();
    // JMP 0x1000:8be9 (1000_8C3F / 0x18C3F)
    goto label_1000_8BE9_18BE9;
    label_1000_8C41_18C41:
    // CALL word ptr [0x2518] (1000_8C41 / 0x18C41)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_8C41 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_8C41) {
      case 0xD096 : NearCall(cs1, 0x8C45, unknown_1000_D096_1D096);
        break;
      case 0xD0FF : NearCall(cs1, 0x8C45, unknown_1000_D0FF_1D0FF);
        break;
      case 0xD12F : NearCall(cs1, 0x8C45, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_8C41);
        break;
    }
    // JMP 0x1000:8be9 (1000_8C45 / 0x18C45)
    goto label_1000_8BE9_18BE9;
    label_1000_8C47_18C47:
    // MOV DX,word ptr [0xd830] (1000_8C47 / 0x18C47)
    DX = UInt16[DS, 0xD830];
    // MOV BX,word ptr [0xd832] (1000_8C4B / 0x18C4B)
    BX = UInt16[DS, 0xD832];
    // MOV AX,[0x479a] (1000_8C4F / 0x18C4F)
    AX = UInt16[DS, 0x479A];
    // ADD BX,AX (1000_8C52 / 0x18C52)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // SUB word ptr [0x478d],AX (1000_8C54 / 0x18C54)
    // UInt16[DS, 0x478D] -= AX;
    UInt16[DS, 0x478D] = Alu.Sub16(UInt16[DS, 0x478D], AX);
    // JNC 0x1000:8c60 (1000_8C58 / 0x18C58)
    if(!CarryFlag) {
      goto label_1000_8C60_18C60;
    }
    // MOV word ptr [0x478d],0x0 (1000_8C5A / 0x18C5A)
    UInt16[DS, 0x478D] = 0x0;
    label_1000_8C60_18C60:
    // CALL 0x1000:d04e (1000_8C60 / 0x18C60)
    NearCall(cs1, 0x8C63, unknown_1000_D04E_1D04E);
    // POP DX (1000_8C63 / 0x18C63)
    DX = Stack.Pop();
    // DEC DX (1000_8C64 / 0x18C64)
    DX = Alu.Dec16(DX);
    // JZ 0x1000:8c6a (1000_8C65 / 0x18C65)
    if(ZeroFlag) {
      goto label_1000_8C6A_18C6A;
    }
    // JMP 0x1000:8b91 (1000_8C67 / 0x18C67)
    goto label_1000_8B91_18B91;
    label_1000_8C6A_18C6A:
    // MOV DX,word ptr [0xd830] (1000_8C6A / 0x18C6A)
    DX = UInt16[DS, 0xD830];
    // MOV BX,word ptr [0xd832] (1000_8C6E / 0x18C6E)
    BX = UInt16[DS, 0xD832];
    // MOV word ptr [0x4791],DX (1000_8C72 / 0x18C72)
    UInt16[DS, 0x4791] = DX;
    // MOV word ptr [0x4793],BX (1000_8C76 / 0x18C76)
    UInt16[DS, 0x4793] = BX;
    // DEC SI (1000_8C7A / 0x18C7A)
    SI = Alu.Dec16(SI);
    // CMP word ptr [0x479e],0x223c (1000_8C7B / 0x18C7B)
    Alu.Sub16(UInt16[DS, 0x479E], 0x223C);
    // JNZ 0x1000:8c89 (1000_8C81 / 0x18C81)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8C89 / 0x18C89)
      return NearRet();
    }
    // CALL 0x1000:9046 (1000_8C83 / 0x18C83)
    NearCall(cs1, 0x8C86, unknown_1000_9046_19046);
    // JMP 0x1000:c07c (1000_8C86 / 0x18C86)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
    label_1000_8C89_18C89:
    // RET  (1000_8C89 / 0x18C89)
    return NearRet();
  }
  
  public Action unknown_1000_8C8A_18C8A(int gotoTarget) {
    label_1000_8C8A_18C8A:
    // XOR AX,AX (1000_8C8A / 0x18C8A)
    AX = 0;
    // XCHG word ptr [0x479e],AX (1000_8C8C / 0x18C8C)
    ushort tmp_1000_8C8C = UInt16[DS, 0x479E];
    UInt16[DS, 0x479E] = AX;
    AX = tmp_1000_8C8C;
    // CMP AX,0x2 (1000_8C90 / 0x18C90)
    Alu.Sub16(AX, 0x2);
    // JC 0x1000:8ccc (1000_8C93 / 0x18C93)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_8CCC / 0x18CCC)
      return NearRet();
    }
    // MOV SI,0x1470 (1000_8C95 / 0x18C95)
    SI = 0x1470;
    // CMP byte ptr [0x28e7],0x0 (1000_8C98 / 0x18C98)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x0);
    // JZ 0x1000:8cb5 (1000_8C9D / 0x18C9D)
    if(ZeroFlag) {
      goto label_1000_8CB5_18CB5;
    }
    // MOV BP,0x1be2 (1000_8C9F / 0x18C9F)
    BP = 0x1BE2;
    // MOV SI,0x4c60 (1000_8CA2 / 0x18CA2)
    SI = 0x4C60;
    // MOV ES,word ptr [0xdbde] (1000_8CA5 / 0x18CA5)
    ES = UInt16[DS, 0xDBDE];
    // CALLF [0x391d] (1000_8CA9 / 0x18CA9)
    // Indirect call to [0x391d], generating possible targets from emulator records
    uint targetAddress_1000_8CA9 = (uint)(UInt16[DS, 0x391F] * 0x10 + UInt16[DS, 0x391D] - cs1 * 0x10);
    switch(targetAddress_1000_8CA9) {
      case 0x235FE : FarCall(cs1, 0x8CAD, unknown_334B_014E_335FE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_8CA9);
        break;
    }
    // MOV SI,0x1be2 (1000_8CAD / 0x18CAD)
    SI = 0x1BE2;
    // MOV word ptr [SI + 0x8],0x0 (1000_8CB0 / 0x18CB0)
    UInt16[DS, (ushort)(SI + 0x8)] = 0x0;
    label_1000_8CB5_18CB5:
    // CALL 0x1000:c446 (1000_8CB5 / 0x18CB5)
    NearCall(cs1, 0x8CB8, unknown_1000_C446_1C446);
    // MOV SI,word ptr [0x47c8] (1000_8CB8 / 0x18CB8)
    SI = UInt16[DS, 0x47C8];
    // OR SI,SI (1000_8CBC / 0x18CBC)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:8cc9 (1000_8CBE / 0x18CBE)
    if(ZeroFlag) {
      goto label_1000_8CC9_18CC9;
    }
    // MOV word ptr [0x4540],0x0 (1000_8CC0 / 0x18CC0)
    UInt16[DS, 0x4540] = 0x0;
    // CALL 0x1000:9bac (1000_8CC6 / 0x18CC6)
    NearCall(cs1, 0x8CC9, unknown_1000_9BAC_19BAC);
    label_1000_8CC9_18CC9:
    // CALL 0x1000:c4dd (1000_8CC9 / 0x18CC9)
    NearCall(cs1, 0x8CCC, unknown_1000_C4DD_1C4DD);
    label_1000_8CCC_18CCC:
    // RET  (1000_8CCC / 0x18CCC)
    return NearRet();
  }
  
  public Action unknown_1000_8CCD_18CCD(int gotoTarget) {
    label_1000_8CCD_18CCD:
    // MOV byte ptr [0x4799],0x9 (1000_8CCD / 0x18CCD)
    UInt8[DS, 0x4799] = 0x9;
    // MOV word ptr [0xdbe4],0xf0 (1000_8CD2 / 0x18CD2)
    UInt16[DS, 0xDBE4] = 0xF0;
    // CMP byte ptr [0x46eb],0x0 (1000_8CD8 / 0x18CD8)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JZ 0x1000:8cfb (1000_8CDD / 0x18CDD)
    if(ZeroFlag) {
      goto label_1000_8CFB_18CFB;
    }
    // CMP word ptr [0x46ef],0x0 (1000_8CDF / 0x18CDF)
    Alu.Sub16(UInt16[DS, 0x46EF], 0x0);
    // JNZ 0x1000:8cf5 (1000_8CE4 / 0x18CE4)
    if(!ZeroFlag) {
      goto label_1000_8CF5_18CF5;
    }
    // CALL 0x1000:e270 (1000_8CE6 / 0x18CE6)
    NearCall(cs1, 0x8CE9, PushAll_1000_E270_1E270);
    // PUSH ES (1000_8CE9 / 0x18CE9)
    Stack.Push(ES);
    // MOV SI,word ptr [0x46f1] (1000_8CEA / 0x18CEA)
    SI = UInt16[DS, 0x46F1];
    // CALL 0x1000:79ee (1000_8CEE / 0x18CEE)
    NearCall(cs1, 0x8CF1, unknown_1000_79EE_179EE);
    // POP ES (1000_8CF1 / 0x18CF1)
    ES = Stack.Pop();
    // CALL 0x1000:e283 (1000_8CF2 / 0x18CF2)
    NearCall(cs1, 0x8CF5, PopAll_1000_E283_1E283);
    label_1000_8CF5_18CF5:
    // MOV BP,0x2244 (1000_8CF5 / 0x18CF5)
    BP = 0x2244;
    // JMP 0x1000:8ddb (1000_8CF8 / 0x18CF8)
    goto label_1000_8DDB_18DDB;
    label_1000_8CFB_18CFB:
    // CMP word ptr [0x47c4],-0x1 (1000_8CFB / 0x18CFB)
    Alu.Sub16(UInt16[DS, 0x47C4], 0xFFFF);
    // JNZ 0x1000:8d1b (1000_8D00 / 0x18D00)
    if(!ZeroFlag) {
      goto label_1000_8D1B_18D1B;
    }
    // MOV AX,0x48 (1000_8D02 / 0x18D02)
    AX = 0x48;
    // MOV [0x4784],AX (1000_8D05 / 0x18D05)
    UInt16[DS, 0x4784] = AX;
    // MOV AL,0x10 (1000_8D08 / 0x18D08)
    AL = 0x10;
    // MOV [0x4786],AX (1000_8D0A / 0x18D0A)
    UInt16[DS, 0x4786] = AX;
    // MOV AL,0x8 (1000_8D0D / 0x18D0D)
    AL = 0x8;
    // MOV [0x4788],AX (1000_8D0F / 0x18D0F)
    UInt16[DS, 0x4788] = AX;
    // MOV [0x478a],AX (1000_8D12 / 0x18D12)
    UInt16[DS, 0x478A] = AX;
    // MOV BP,0x224c (1000_8D15 / 0x18D15)
    BP = 0x224C;
    // JMP 0x1000:8ddb (1000_8D18 / 0x18D18)
    goto label_1000_8DDB_18DDB;
    label_1000_8D1B_18D1B:
    // CMP byte ptr [0xc6],0x0 (1000_8D1B / 0x18D1B)
    Alu.Sub8(UInt8[DS, 0xC6], 0x0);
    // JZ 0x1000:8d43 (1000_8D20 / 0x18D20)
    if(ZeroFlag) {
      goto label_1000_8D43_18D43;
    }
    // MOV BP,0x2265 (1000_8D22 / 0x18D22)
    BP = 0x2265;
    // MOV AX,0x3c (1000_8D25 / 0x18D25)
    AX = 0x3C;
    // MOV [0x4784],AX (1000_8D28 / 0x18D28)
    UInt16[DS, 0x4784] = AX;
    // MOV AL,0x32 (1000_8D2B / 0x18D2B)
    AL = 0x32;
    // MOV [0x4786],AX (1000_8D2D / 0x18D2D)
    UInt16[DS, 0x4786] = AX;
    // MOV AL,0xa (1000_8D30 / 0x18D30)
    AL = 0xA;
    // MOV [0x4788],AX (1000_8D32 / 0x18D32)
    UInt16[DS, 0x4788] = AX;
    // MOV [0x478a],AX (1000_8D35 / 0x18D35)
    UInt16[DS, 0x478A] = AX;
    // MOV byte ptr [0xdbe4],0x64 (1000_8D38 / 0x18D38)
    UInt8[DS, 0xDBE4] = 0x64;
    // CALL 0x1000:d082 (1000_8D3D / 0x18D3D)
    NearCall(cs1, 0x8D40, SetFontToBook_1000_D082_1D082);
    // JMP 0x1000:8ddb (1000_8D40 / 0x18D40)
    goto label_1000_8DDB_18DDB;
    label_1000_8D43_18D43:
    // CMP byte ptr [0x227d],0x0 (1000_8D43 / 0x18D43)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JZ 0x1000:8d62 (1000_8D48 / 0x18D48)
    if(ZeroFlag) {
      goto label_1000_8D62_18D62;
    }
    // MOV byte ptr [0xdbe4],0x6 (1000_8D4A / 0x18D4A)
    UInt8[DS, 0xDBE4] = 0x6;
    // MOV BP,0x2275 (1000_8D4F / 0x18D4F)
    BP = 0x2275;
    // XOR AX,AX (1000_8D52 / 0x18D52)
    AX = 0;
    // MOV [0x4788],AX (1000_8D54 / 0x18D54)
    UInt16[DS, 0x4788] = AX;
    // MOV [0x478a],AX (1000_8D57 / 0x18D57)
    UInt16[DS, 0x478A] = AX;
    // MOV [0x4784],AX (1000_8D5A / 0x18D5A)
    UInt16[DS, 0x4784] = AX;
    // MOV [0x4786],AX (1000_8D5D / 0x18D5D)
    UInt16[DS, 0x4786] = AX;
    // JMP 0x1000:8ddb (1000_8D60 / 0x18D60)
    goto label_1000_8DDB_18DDB;
    label_1000_8D62_18D62:
    // CMP byte ptr [0x28e7],0x0 (1000_8D62 / 0x18D62)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x0);
    // JNZ 0x1000:8d8a (1000_8D67 / 0x18D67)
    if(!ZeroFlag) {
      goto label_1000_8D8A_18D8A;
    }
    // MOV byte ptr [0x4799],0x1 (1000_8D69 / 0x18D69)
    UInt8[DS, 0x4799] = 0x1;
    // MOV byte ptr [0xdbe4],0xf (1000_8D6E / 0x18D6E)
    UInt8[DS, 0xDBE4] = 0xF;
    // MOV BP,0x223c (1000_8D73 / 0x18D73)
    BP = 0x223C;
    // XOR AX,AX (1000_8D76 / 0x18D76)
    AX = 0;
    // MOV [0x478a],AX (1000_8D78 / 0x18D78)
    UInt16[DS, 0x478A] = AX;
    // INC AX (1000_8D7B / 0x18D7B)
    AX = Alu.Inc16(AX);
    // MOV [0x4788],AX (1000_8D7C / 0x18D7C)
    UInt16[DS, 0x4788] = AX;
    // MOV AX,0x10 (1000_8D7F / 0x18D7F)
    AX = 0x10;
    // MOV [0x4784],AX (1000_8D82 / 0x18D82)
    UInt16[DS, 0x4784] = AX;
    // MOV [0x4786],AX (1000_8D85 / 0x18D85)
    UInt16[DS, 0x4786] = AX;
    // JMP 0x1000:8ddb (1000_8D88 / 0x18D88)
    goto label_1000_8DDB_18DDB;
    label_1000_8D8A_18D8A:
    // MOV BP,0x2224 (1000_8D8A / 0x18D8A)
    BP = 0x2224;
    // MOV CX,0x3 (1000_8D8D / 0x18D8D)
    CX = 0x3;
    label_1000_8D90_18D90:
    // MOV AX,word ptr [BP + 0x4] (1000_8D90 / 0x18D90)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // SUB AX,word ptr [0x4784] (1000_8D93 / 0x18D93)
    // AX -= UInt16[DS, 0x4784];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4784]);
    // SUB AX,word ptr [0x4786] (1000_8D97 / 0x18D97)
    // AX -= UInt16[DS, 0x4786];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4786]);
    // MOV [0x478f],AX (1000_8D9B / 0x18D9B)
    UInt16[DS, 0x478F] = AX;
    // PUSH SI (1000_8D9E / 0x18D9E)
    Stack.Push(SI);
    // PUSH CX (1000_8D9F / 0x18D9F)
    Stack.Push(CX);
    // CALL 0x1000:8e16 (1000_8DA0 / 0x18DA0)
    NearCall(cs1, 0x8DA3, unknown_1000_8E16_18E16);
    // POP CX (1000_8DA3 / 0x18DA3)
    CX = Stack.Pop();
    // POP SI (1000_8DA4 / 0x18DA4)
    SI = Stack.Pop();
    // MOV AX,[0xa9d0] (1000_8DA5 / 0x18DA5)
    AX = UInt16[DS, 0xA9D0];
    // MOV AH,0xa (1000_8DA8 / 0x18DA8)
    AH = 0xA;
    // MUL AH (1000_8DAA / 0x18DAA)
    Cpu.Mul8(AH);
    // ADD AX,word ptr [0x4788] (1000_8DAC / 0x18DAC)
    // AX += UInt16[DS, 0x4788];
    AX = Alu.Add16(AX, UInt16[DS, 0x4788]);
    // ADD AX,word ptr [0x478a] (1000_8DB0 / 0x18DB0)
    // AX += UInt16[DS, 0x478A];
    AX = Alu.Add16(AX, UInt16[DS, 0x478A]);
    // CMP AX,word ptr [BP + 0x6] (1000_8DB4 / 0x18DB4)
    Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x6)]);
    // JC 0x1000:8dcd (1000_8DB7 / 0x18DB7)
    if(CarryFlag) {
      goto label_1000_8DCD_18DCD;
    }
    // ADD BP,0x8 (1000_8DB9 / 0x18DB9)
    // BP += 0x8;
    BP = Alu.Add16(BP, 0x8);
    // LOOP 0x1000:8d90 (1000_8DBC / 0x18DBC)
    if(--CX != 0) {
      goto label_1000_8D90_18D90;
    }
    // SUB BP,0x8 (1000_8DBE / 0x18DBE)
    // BP -= 0x8;
    BP = Alu.Sub16(BP, 0x8);
    // XOR AX,AX (1000_8DC1 / 0x18DC1)
    AX = 0;
    // MOV [0x4788],AX (1000_8DC3 / 0x18DC3)
    UInt16[DS, 0x4788] = AX;
    // XCHG word ptr [0x478a],AX (1000_8DC6 / 0x18DC6)
    ushort tmp_1000_8DC6 = UInt16[DS, 0x478A];
    UInt16[DS, 0x478A] = AX;
    AX = tmp_1000_8DC6;
    // OR AX,AX (1000_8DCA / 0x18DCA)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // RET  (1000_8DCC / 0x18DCC)
    return NearRet();
    label_1000_8DCD_18DCD:
    // DEC CX (1000_8DCD / 0x18DCD)
    CX = Alu.Dec16(CX);
    // JZ 0x1000:8dee (1000_8DCE / 0x18DCE)
    if(ZeroFlag) {
      goto label_1000_8DEE_18DEE;
    }
    // MOV BX,0x1 (1000_8DD0 / 0x18DD0)
    BX = 0x1;
    // CALL 0x1000:e3b7 (1000_8DD3 / 0x18DD3)
    NearCall(cs1, 0x8DD6, unknown_1000_E3B7_1E3B7);
    // JZ 0x1000:8dee (1000_8DD6 / 0x18DD6)
    if(ZeroFlag) {
      goto label_1000_8DEE_18DEE;
    }
    // ADD BP,0x8 (1000_8DD8 / 0x18DD8)
    // BP += 0x8;
    BP = Alu.Add16(BP, 0x8);
    label_1000_8DDB_18DDB:
    // MOV AX,word ptr [BP + 0x4] (1000_8DDB / 0x18DDB)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // SUB AX,word ptr [0x4784] (1000_8DDE / 0x18DDE)
    // AX -= UInt16[DS, 0x4784];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4784]);
    // SUB AX,word ptr [0x4786] (1000_8DE2 / 0x18DE2)
    // AX -= UInt16[DS, 0x4786];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4786]);
    // MOV [0x478f],AX (1000_8DE6 / 0x18DE6)
    UInt16[DS, 0x478F] = AX;
    // PUSH SI (1000_8DE9 / 0x18DE9)
    Stack.Push(SI);
    // CALL 0x1000:8e16 (1000_8DEA / 0x18DEA)
    NearCall(cs1, 0x8DED, unknown_1000_8E16_18E16);
    // POP SI (1000_8DED / 0x18DED)
    SI = Stack.Pop();
    label_1000_8DEE_18DEE:
    // CLC  (1000_8DEE / 0x18DEE)
    CarryFlag = false;
    // RET  (1000_8DEF / 0x18DEF)
    return NearRet();
  }
  
  public Action unknown_1000_8DF0_18DF0(int gotoTarget) {
    label_1000_8DF0_18DF0:
    // TEST byte ptr [0x4799],0x1 (1000_8DF0 / 0x18DF0)
    Alu.And8(UInt8[DS, 0x4799], 0x1);
    // JZ 0x1000:8e15 (1000_8DF5 / 0x18DF5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_8E15 / 0x18E15)
      return NearRet();
    }
    // PUSH SI (1000_8DF7 / 0x18DF7)
    Stack.Push(SI);
    // MOV SI,0xa9d0 (1000_8DF8 / 0x18DF8)
    SI = 0xA9D0;
    // LODSW SI (1000_8DFB / 0x18DFB)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_8DFC / 0x18DFC)
    CX = AX;
    label_1000_8DFE_18DFE:
    // LODSW SI (1000_8DFE / 0x18DFE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_8DFF / 0x18DFF)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:8e08 (1000_8E01 / 0x18E01)
    if(ZeroFlag) {
      goto label_1000_8E08_18E08;
    }
    // CMP word ptr [SI],0x1e (1000_8E03 / 0x18E03)
    Alu.Sub16(UInt16[DS, SI], 0x1E);
    // JNC 0x1000:8e0f (1000_8E06 / 0x18E06)
    if(!CarryFlag) {
      goto label_1000_8E0F_18E0F;
    }
    label_1000_8E08_18E08:
    // ADD SI,0x4 (1000_8E08 / 0x18E08)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LOOP 0x1000:8dfe (1000_8E0B / 0x18E0B)
    if(--CX != 0) {
      goto label_1000_8DFE_18DFE;
    }
    // POP SI (1000_8E0D / 0x18E0D)
    SI = Stack.Pop();
    // RET  (1000_8E0E / 0x18E0E)
    return NearRet();
    label_1000_8E0F_18E0F:
    // AND byte ptr [0x4799],0xfe (1000_8E0F / 0x18E0F)
    // UInt8[DS, 0x4799] &= 0xFE;
    UInt8[DS, 0x4799] = Alu.And8(UInt8[DS, 0x4799], 0xFE);
    // POP SI (1000_8E14 / 0x18E14)
    SI = Stack.Pop();
    label_1000_8E15_18E15:
    // RET  (1000_8E15 / 0x18E15)
    return NearRet();
  }
  
  public Action unknown_1000_8E16_18E16(int gotoTarget) {
    label_1000_8E16_18E16:
    // PUSH DS (1000_8E16 / 0x18E16)
    Stack.Push(DS);
    // POP ES (1000_8E17 / 0x18E17)
    ES = Stack.Pop();
    // MOV byte ptr [0x478c],0x0 (1000_8E18 / 0x18E18)
    UInt8[DS, 0x478C] = 0x0;
    // MOV DI,0xa9d2 (1000_8E1D / 0x18E1D)
    DI = 0xA9D2;
    // XOR DH,DH (1000_8E20 / 0x18E20)
    DH = 0;
    // MOV BX,word ptr [0x478f] (1000_8E22 / 0x18E22)
    BX = UInt16[DS, 0x478F];
    // XOR DL,DL (1000_8E26 / 0x18E26)
    DL = 0;
    label_1000_8E28_18E28:
    // MOV AL,byte ptr [SI] (1000_8E28 / 0x18E28)
    AL = UInt8[DS, SI];
    // OR AL,AL (1000_8E2A / 0x18E2A)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:8e74 (1000_8E2C / 0x18E2C)
    if(SignFlag) {
      goto label_1000_8E74_18E74;
    }
    // CMP AL,0xd (1000_8E2E / 0x18E2E)
    Alu.Sub8(AL, 0xD);
    // JZ 0x1000:8e39 (1000_8E30 / 0x18E30)
    if(ZeroFlag) {
      goto label_1000_8E39_18E39;
    }
    // CMP AL,0x20 (1000_8E32 / 0x18E32)
    Alu.Sub8(AL, 0x20);
    // JNZ 0x1000:8e4b (1000_8E34 / 0x18E34)
    if(!ZeroFlag) {
      goto label_1000_8E4B_18E4B;
    }
    // INC SI (1000_8E36 / 0x18E36)
    SI = Alu.Inc16(SI);
    // JMP 0x1000:8e28 (1000_8E37 / 0x18E37)
    goto label_1000_8E28_18E28;
    label_1000_8E39_18E39:
    // CALL 0x1000:8e9e (1000_8E39 / 0x18E39)
    NearCall(cs1, 0x8E3C, unknown_1000_8E9E_18E9E);
    // MOV word ptr [DI + -0x4],0x6 (1000_8E3C / 0x18E3C)
    UInt16[DS, (ushort)(DI - 0x4)] = 0x6;
    // MOV word ptr [DI + -0x2],0x0 (1000_8E41 / 0x18E41)
    UInt16[DS, (ushort)(DI - 0x2)] = 0x0;
    // XOR DL,DL (1000_8E46 / 0x18E46)
    DL = 0;
    // INC SI (1000_8E48 / 0x18E48)
    SI = Alu.Inc16(SI);
    // JMP 0x1000:8e28 (1000_8E49 / 0x18E49)
    goto label_1000_8E28_18E28;
    label_1000_8E4B_18E4B:
    // CALL 0x1000:8ed3 (1000_8E4B / 0x18E4B)
    NearCall(cs1, 0x8E4E, unknown_1000_8ED3_18ED3);
    // OR CX,CX (1000_8E4E / 0x18E4E)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JZ 0x1000:8e28 (1000_8E50 / 0x18E50)
    if(ZeroFlag) {
      goto label_1000_8E28_18E28;
    }
    // ADD CX,0x6 (1000_8E52 / 0x18E52)
    // CX += 0x6;
    CX = Alu.Add16(CX, 0x6);
    label_1000_8E55_18E55:
    // SUB BX,CX (1000_8E55 / 0x18E55)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // JC 0x1000:8e5d (1000_8E57 / 0x18E57)
    if(CarryFlag) {
      goto label_1000_8E5D_18E5D;
    }
    // INC DL (1000_8E59 / 0x18E59)
    DL = Alu.Inc8(DL);
    // JMP 0x1000:8e28 (1000_8E5B / 0x18E5B)
    goto label_1000_8E28_18E28;
    label_1000_8E5D_18E5D:
    // ADD BX,0x6 (1000_8E5D / 0x18E5D)
    // BX += 0x6;
    BX = Alu.Add16(BX, 0x6);
    // JS 0x1000:8e69 (1000_8E60 / 0x18E60)
    if(SignFlag) {
      goto label_1000_8E69_18E69;
    }
    // INC DL (1000_8E62 / 0x18E62)
    DL = Alu.Inc8(DL);
    // CALL 0x1000:8e9e (1000_8E64 / 0x18E64)
    NearCall(cs1, 0x8E67, unknown_1000_8E9E_18E9E);
    // JMP 0x1000:8e28 (1000_8E67 / 0x18E67)
    goto label_1000_8E28_18E28;
    label_1000_8E69_18E69:
    // OR DL,DL (1000_8E69 / 0x18E69)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x1000:8e97 (1000_8E6B / 0x18E6B)
    if(ZeroFlag) {
      goto label_1000_8E97_18E97;
    }
    // ADD BX,CX (1000_8E6D / 0x18E6D)
    // BX += CX;
    BX = Alu.Add16(BX, CX);
    // CALL 0x1000:8e9e (1000_8E6F / 0x18E6F)
    NearCall(cs1, 0x8E72, unknown_1000_8E9E_18E9E);
    // JMP 0x1000:8e55 (1000_8E72 / 0x18E72)
    goto label_1000_8E55_18E55;
    label_1000_8E74_18E74:
    // OR DL,DL (1000_8E74 / 0x18E74)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x1000:8e7b (1000_8E76 / 0x18E76)
    if(ZeroFlag) {
      goto label_1000_8E7B_18E7B;
    }
    // CALL 0x1000:8e9e (1000_8E78 / 0x18E78)
    NearCall(cs1, 0x8E7B, unknown_1000_8E9E_18E9E);
    label_1000_8E7B_18E7B:
    // MOV word ptr [DI + -0x4],0x6 (1000_8E7B / 0x18E7B)
    UInt16[DS, (ushort)(DI - 0x4)] = 0x6;
    // MOV word ptr [DI + -0x2],0x0 (1000_8E80 / 0x18E80)
    UInt16[DS, (ushort)(DI - 0x2)] = 0x0;
    // MOV word ptr [DI],0x0 (1000_8E85 / 0x18E85)
    UInt16[DS, DI] = 0x0;
    // MOV word ptr [DI + 0x2],0x0 (1000_8E89 / 0x18E89)
    UInt16[DS, (ushort)(DI + 0x2)] = 0x0;
    // XOR DL,DL (1000_8E8E / 0x18E8E)
    DL = 0;
    // XCHG DL,DH (1000_8E90 / 0x18E90)
    byte tmp_1000_8E90 = DL;
    DL = DH;
    DH = tmp_1000_8E90;
    // MOV word ptr [0xa9d0],DX (1000_8E92 / 0x18E92)
    UInt16[DS, 0xA9D0] = DX;
    // RET  (1000_8E96 / 0x18E96)
    return NearRet();
    label_1000_8E97_18E97:
    // MOV word ptr [0xa9d0],0xc8 (1000_8E97 / 0x18E97)
    UInt16[DS, 0xA9D0] = 0xC8;
    // RET  (1000_8E9D / 0x18E9D)
    return NearRet();
  }
  
  public Action unknown_1000_8E9E_18E9E(int gotoTarget) {
    label_1000_8E9E_18E9E:
    // MOV AX,DX (1000_8E9E / 0x18E9E)
    AX = DX;
    // XOR AH,AH (1000_8EA0 / 0x18EA0)
    AH = 0;
    // STOSW ES:DI (1000_8EA2 / 0x18EA2)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD byte ptr [0x478c],AL (1000_8EA3 / 0x18EA3)
    // UInt8[DS, 0x478C] += AL;
    UInt8[DS, 0x478C] = Alu.Add8(UInt8[DS, 0x478C], AL);
    // OR AX,AX (1000_8EA7 / 0x18EA7)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:8eca (1000_8EA9 / 0x18EA9)
    if(ZeroFlag) {
      goto label_1000_8ECA_18ECA;
    }
    // PUSH DX (1000_8EAB / 0x18EAB)
    Stack.Push(DX);
    // MOV AX,BX (1000_8EAC / 0x18EAC)
    AX = BX;
    // MOV BX,DX (1000_8EAE / 0x18EAE)
    BX = DX;
    // XOR BH,BH (1000_8EB0 / 0x18EB0)
    BH = 0;
    // XOR DX,DX (1000_8EB2 / 0x18EB2)
    DX = 0;
    // DEC BX (1000_8EB4 / 0x18EB4)
    BX = Alu.Dec16(BX);
    // JZ 0x1000:8eb9 (1000_8EB5 / 0x18EB5)
    if(ZeroFlag) {
      goto label_1000_8EB9_18EB9;
    }
    // DIV BX (1000_8EB7 / 0x18EB7)
    Cpu.Div16(BX);
    label_1000_8EB9_18EB9:
    // ADD AX,0x6 (1000_8EB9 / 0x18EB9)
    // AX += 0x6;
    AX = Alu.Add16(AX, 0x6);
    // STOSW ES:DI (1000_8EBC / 0x18EBC)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,DX (1000_8EBD / 0x18EBD)
    AX = DX;
    // STOSW ES:DI (1000_8EBF / 0x18EBF)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP DX (1000_8EC0 / 0x18EC0)
    DX = Stack.Pop();
    // INC DH (1000_8EC1 / 0x18EC1)
    DH = Alu.Inc8(DH);
    // XOR DL,DL (1000_8EC3 / 0x18EC3)
    DL = 0;
    // MOV BX,word ptr [0x478f] (1000_8EC5 / 0x18EC5)
    BX = UInt16[DS, 0x478F];
    // RET  (1000_8EC9 / 0x18EC9)
    return NearRet();
    label_1000_8ECA_18ECA:
    // STOSW ES:DI (1000_8ECA / 0x18ECA)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (1000_8ECB / 0x18ECB)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC DH (1000_8ECC / 0x18ECC)
    DH = Alu.Inc8(DH);
    // MOV BX,word ptr [0x478f] (1000_8ECE / 0x18ECE)
    BX = UInt16[DS, 0x478F];
    // RET  (1000_8ED2 / 0x18ED2)
    return NearRet();
  }
  
  public Action unknown_1000_8ED3_18ED3(int gotoTarget) {
    label_1000_8ED3_18ED3:
    // XOR CX,CX (1000_8ED3 / 0x18ED3)
    CX = 0;
    // PUSH BX (1000_8ED5 / 0x18ED5)
    Stack.Push(BX);
    // MOV BX,word ptr [0x47a0] (1000_8ED6 / 0x18ED6)
    BX = UInt16[DS, 0x47A0];
    label_1000_8EDA_18EDA:
    // LODSB SI (1000_8EDA / 0x18EDA)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0x20 (1000_8EDB / 0x18EDB)
    Alu.Sub8(AL, 0x20);
    // JZ 0x1000:8f25 (1000_8EDD / 0x18EDD)
    if(ZeroFlag) {
      goto label_1000_8F25_18F25;
    }
    // CMP AL,0xd (1000_8EDF / 0x18EDF)
    Alu.Sub8(AL, 0xD);
    // JZ 0x1000:8f25 (1000_8EE1 / 0x18EE1)
    if(ZeroFlag) {
      goto label_1000_8F25_18F25;
    }
    // OR AL,AL (1000_8EE3 / 0x18EE3)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:8eed (1000_8EE5 / 0x18EE5)
    if(ZeroFlag) {
      goto label_1000_8EED_18EED;
    }
    // CMP AL,0x9 (1000_8EE7 / 0x18EE7)
    Alu.Sub8(AL, 0x9);
    // JC 0x1000:8f09 (1000_8EE9 / 0x18EE9)
    if(CarryFlag) {
      goto label_1000_8F09_18F09;
    }
    // JS 0x1000:8f25 (1000_8EEB / 0x18EEB)
    if(SignFlag) {
      goto label_1000_8F25_18F25;
    }
    label_1000_8EED_18EED:
    // CMP word ptr [0x2518],0xd0ff (1000_8EED / 0x18EED)
    Alu.Sub16(UInt16[DS, 0x2518], 0xD0FF);
    // JNZ 0x1000:8f04 (1000_8EF3 / 0x18EF3)
    if(!ZeroFlag) {
      goto label_1000_8F04_18F04;
    }
    // CMP SI,0xa6b1 (1000_8EF5 / 0x18EF5)
    Alu.Sub16(SI, 0xA6B1);
    // JNZ 0x1000:8f04 (1000_8EF9 / 0x18EF9)
    if(!ZeroFlag) {
      goto label_1000_8F04_18F04;
    }
    // CALL 0x1000:d0e3 (1000_8EFB / 0x18EFB)
    NearCall(cs1, 0x8EFE, unknown_1000_D0E3_1D0E3);
    // JC 0x1000:8f04 (1000_8EFE / 0x18EFE)
    if(CarryFlag) {
      goto label_1000_8F04_18F04;
    }
    // ADD CL,AL (1000_8F00 / 0x18F00)
    // CL += AL;
    CL = Alu.Add8(CL, AL);
    // JMP 0x1000:8eda (1000_8F02 / 0x18F02)
    goto label_1000_8EDA_18EDA;
    label_1000_8F04_18F04:
    // XLAT BX (1000_8F04 / 0x18F04)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // ADD CL,AL (1000_8F05 / 0x18F05)
    // CL += AL;
    CL = Alu.Add8(CL, AL);
    // JMP 0x1000:8eda (1000_8F07 / 0x18F07)
    goto label_1000_8EDA_18EDA;
    label_1000_8F09_18F09:
    // CMP AL,0xd (1000_8F09 / 0x18F09)
    Alu.Sub8(AL, 0xD);
    // JZ 0x1000:8f25 (1000_8F0B / 0x18F0B)
    if(ZeroFlag) {
      goto label_1000_8F25_18F25;
    }
    // CMP AL,0x6 (1000_8F0D / 0x18F0D)
    Alu.Sub8(AL, 0x6);
    // JZ 0x1000:8f1d (1000_8F0F / 0x18F0F)
    if(ZeroFlag) {
      goto label_1000_8F1D_18F1D;
    }
    // CMP AL,0x8 (1000_8F11 / 0x18F11)
    Alu.Sub8(AL, 0x8);
    // JNZ 0x1000:8eda (1000_8F13 / 0x18F13)
    if(!ZeroFlag) {
      goto label_1000_8EDA_18EDA;
    }
    // MOV word ptr [0x47a0],0xceec (1000_8F15 / 0x18F15)
    UInt16[DS, 0x47A0] = 0xCEEC;
    // JMP 0x1000:8eda (1000_8F1B / 0x18F1B)
    goto label_1000_8EDA_18EDA;
    label_1000_8F1D_18F1D:
    // MOV word ptr [0x47a0],0xcf6c (1000_8F1D / 0x18F1D)
    UInt16[DS, 0x47A0] = 0xCF6C;
    // JMP 0x1000:8eda (1000_8F23 / 0x18F23)
    goto label_1000_8EDA_18EDA;
    label_1000_8F25_18F25:
    // DEC SI (1000_8F25 / 0x18F25)
    SI = Alu.Dec16(SI);
    // POP BX (1000_8F26 / 0x18F26)
    BX = Stack.Pop();
    // RET  (1000_8F27 / 0x18F27)
    return NearRet();
  }
  
  public Action unknown_1000_8F28_18F28(int gotoTarget) {
    label_1000_8F28_18F28:
    // MOV word ptr [0x479e],BP (1000_8F28 / 0x18F28)
    UInt16[DS, 0x479E] = BP;
    // MOV DI,0x1be2 (1000_8F2C / 0x18F2C)
    DI = 0x1BE2;
    // PUSH DS (1000_8F2F / 0x18F2F)
    Stack.Push(DS);
    // POP ES (1000_8F30 / 0x18F30)
    ES = Stack.Pop();
    // MOV AX,word ptr [BP + 0x0] (1000_8F31 / 0x18F31)
    AX = UInt16[SS, BP];
    // STOSW ES:DI (1000_8F34 / 0x18F34)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_8F35 / 0x18F35)
    DX = AX;
    // ADD AX,word ptr [0x4784] (1000_8F37 / 0x18F37)
    // AX += UInt16[DS, 0x4784];
    AX = Alu.Add16(AX, UInt16[DS, 0x4784]);
    // MOV [0x4791],AX (1000_8F3B / 0x18F3B)
    UInt16[DS, 0x4791] = AX;
    // MOV [0x4795],AX (1000_8F3E / 0x18F3E)
    UInt16[DS, 0x4795] = AX;
    // MOV AX,word ptr [BP + 0x2] (1000_8F41 / 0x18F41)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // STOSW ES:DI (1000_8F44 / 0x18F44)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_8F45 / 0x18F45)
    BX = AX;
    // ADD AX,word ptr [0x4788] (1000_8F47 / 0x18F47)
    // AX += UInt16[DS, 0x4788];
    AX = Alu.Add16(AX, UInt16[DS, 0x4788]);
    // MOV [0x4793],AX (1000_8F4B / 0x18F4B)
    UInt16[DS, 0x4793] = AX;
    // MOV [0x4797],AX (1000_8F4E / 0x18F4E)
    UInt16[DS, 0x4797] = AX;
    // MOV AX,word ptr [BP + 0x4] (1000_8F51 / 0x18F51)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // ADD DX,AX (1000_8F54 / 0x18F54)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // SUB AX,word ptr [0x4784] (1000_8F56 / 0x18F56)
    // AX -= UInt16[DS, 0x4784];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4784]);
    // SUB AX,word ptr [0x4786] (1000_8F5A / 0x18F5A)
    // AX -= UInt16[DS, 0x4786];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4786]);
    // MOV [0x478f],AX (1000_8F5E / 0x18F5E)
    UInt16[DS, 0x478F] = AX;
    // MOV AX,word ptr [BP + 0x6] (1000_8F61 / 0x18F61)
    AX = UInt16[SS, (ushort)(BP + 0x6)];
    // ADD BX,AX (1000_8F64 / 0x18F64)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // SUB AX,word ptr [0x4788] (1000_8F66 / 0x18F66)
    // AX -= UInt16[DS, 0x4788];
    AX = Alu.Sub16(AX, UInt16[DS, 0x4788]);
    // SUB AX,word ptr [0x478a] (1000_8F6A / 0x18F6A)
    // AX -= UInt16[DS, 0x478A];
    AX = Alu.Sub16(AX, UInt16[DS, 0x478A]);
    // MOV [0x478d],AX (1000_8F6E / 0x18F6E)
    UInt16[DS, 0x478D] = AX;
    // MOV AX,DX (1000_8F71 / 0x18F71)
    AX = DX;
    // CMP AX,0x140 (1000_8F73 / 0x18F73)
    Alu.Sub16(AX, 0x140);
    // JC 0x1000:8f7b (1000_8F76 / 0x18F76)
    if(CarryFlag) {
      goto label_1000_8F7B_18F7B;
    }
    // MOV AX,0x140 (1000_8F78 / 0x18F78)
    AX = 0x140;
    label_1000_8F7B_18F7B:
    // STOSW ES:DI (1000_8F7B / 0x18F7B)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,BX (1000_8F7C / 0x18F7C)
    AX = BX;
    // STOSW ES:DI (1000_8F7E / 0x18F7E)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP byte ptr [0x46eb],0x0 (1000_8F7F / 0x18F7F)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNZ 0x1000:8fd1 (1000_8F84 / 0x18F84)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_8FD1_18FD1(0);
    }
    // CMP byte ptr [0xc6],0x0 (1000_8F86 / 0x18F86)
    Alu.Sub8(UInt8[DS, 0xC6], 0x0);
    // JNZ 0x1000:8ff5 (1000_8F8B / 0x18F8B)
    if(!ZeroFlag) {
      goto label_1000_8FF5_18FF5;
    }
    // CMP byte ptr [0x227d],0x0 (1000_8F8D / 0x18F8D)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:8fd0 (1000_8F92 / 0x18F92)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8FD0 / 0x18FD0)
      return NearRet();
    }
    // CMP byte ptr [0x46d9],0x0 (1000_8F94 / 0x18F94)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JNZ 0x1000:8fd0 (1000_8F99 / 0x18F99)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_8FD0 / 0x18FD0)
      return NearRet();
    }
    // CMP byte ptr [0x28e7],0x0 (1000_8F9B / 0x18F9B)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x0);
    // JZ 0x1000:900b (1000_8FA0 / 0x18FA0)
    if(ZeroFlag) {
      goto label_1000_900B_1900B;
    }
    // PUSH SI (1000_8FA2 / 0x18FA2)
    Stack.Push(SI);
    // MOV SI,0x4c60 (1000_8FA3 / 0x18FA3)
    SI = 0x4C60;
    // MOV BP,0x1be2 (1000_8FA6 / 0x18FA6)
    BP = 0x1BE2;
    // MOV AX,0x80 (1000_8FA9 / 0x18FA9)
    AX = 0x80;
    // MOV word ptr [BP + 0x8],AX (1000_8FAC / 0x18FAC)
    UInt16[SS, (ushort)(BP + 0x8)] = AX;
    // MOV [0x1c06],AX (1000_8FAF / 0x18FAF)
    UInt16[DS, 0x1C06] = AX;
    // MOV word ptr [BP + 0xc],0x9468 (1000_8FB2 / 0x18FB2)
    UInt16[SS, (ushort)(BP + 0xC)] = 0x9468;
    // MOV ES,word ptr [0xdbde] (1000_8FB7 / 0x18FB7)
    ES = UInt16[DS, 0xDBDE];
    // CALLF [0x3919] (1000_8FBB / 0x18FBB)
    // Indirect call to [0x3919], generating possible targets from emulator records
    uint targetAddress_1000_8FBB = (uint)(UInt16[DS, 0x391B] * 0x10 + UInt16[DS, 0x3919] - cs1 * 0x10);
    switch(targetAddress_1000_8FBB) {
      case 0x235FB : FarCall(cs1, 0x8FBF, unknown_334B_014B_335FB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_8FBB);
        break;
    }
    // CALL 0x1000:c137 (1000_8FBF / 0x18FBF)
    NearCall(cs1, 0x8FC2, load_icons_sprites_ida_1000_C137_1C137);
    // MOV SI,0x1be2 (1000_8FC2 / 0x18FC2)
    SI = 0x1BE2;
    // MOV ES,word ptr [0xdbd6] (1000_8FC5 / 0x18FC5)
    ES = UInt16[DS, 0xDBD6];
    // MOV AX,0x1c (1000_8FC9 / 0x18FC9)
    AX = 0x1C;
    // CALL 0x1000:c370 (1000_8FCC / 0x18FCC)
    NearCall(cs1, 0x8FCF, unknown_1000_C370_1C370);
    // POP SI (1000_8FCF / 0x18FCF)
    SI = Stack.Pop();
    label_1000_8FD0_18FD0:
    // RET  (1000_8FD0 / 0x18FD0)
    return NearRet();
    label_1000_8FF5_18FF5:
    // PUSH SI (1000_8FF5 / 0x18FF5)
    Stack.Push(SI);
    // MOV AX,0x32 (1000_8FF6 / 0x18FF6)
    AX = 0x32;
    // CALL 0x1000:c13e (1000_8FF9 / 0x18FF9)
    NearCall(cs1, 0x8FFC, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AX,0x3 (1000_8FFC / 0x18FFC)
    AX = 0x3;
    // MOV SI,0x2265 (1000_8FFF / 0x18FFF)
    SI = 0x2265;
    // MOV ES,word ptr [0xdbd6] (1000_9002 / 0x19002)
    ES = UInt16[DS, 0xDBD6];
    // CALL 0x1000:c370 (1000_9006 / 0x19006)
    NearCall(cs1, 0x9009, unknown_1000_C370_1C370);
    // POP SI (1000_9009 / 0x19009)
    SI = Stack.Pop();
    // RET  (1000_900A / 0x1900A)
    return NearRet();
    label_1000_900B_1900B:
    // MOV DI,0x4c60 (1000_900B / 0x1900B)
    DI = 0x4C60;
    // MOV CX,0x5960 (1000_900E / 0x1900E)
    CX = 0x5960;
    // PUSH DS (1000_9011 / 0x19011)
    Stack.Push(DS);
    // POP ES (1000_9012 / 0x19012)
    ES = Stack.Pop();
    // XOR AL,AL (1000_9013 / 0x19013)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_9015 / 0x19015)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV AX,0x4c6f (1000_9017 / 0x19017)
    AX = 0x4C6F;
    // AND AL,0xf0 (1000_901A / 0x1901A)
    // AL &= 0xF0;
    AL = Alu.And8(AL, 0xF0);
    // MOV [0x22fc],AX (1000_901C / 0x1901C)
    UInt16[DS, 0x22FC] = AX;
    // CALL 0x1000:c085 (1000_901F / 0x1901F)
    NearCall(cs1, 0x9022, SetBackBufferAsActiveFrameBuffer_1000_C085_1C085);
    // JMP 0x1000:8895 (1000_9022 / 0x19022)
    // Jump converted to non entry function call
    return unknown_1000_88D2_188D2(0x18895 - cs1 * 0x10);
  }
  
  public Action unknown_1000_8FD1_18FD1(int gotoTarget) {
    switch(gotoTarget) {
      case 0x8FD1: goto label_1000_8FD1_18FD1;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_8FD1_18FD1:
    // PUSH SI (1000_8FD1 / 0x18FD1)
    Stack.Push(SI);
    // MOV SI,0x1be2 (1000_8FD2 / 0x18FD2)
    SI = 0x1BE2;
    // MOV word ptr [SI + 0x8],0x80 (1000_8FD5 / 0x18FD5)
    UInt16[DS, (ushort)(SI + 0x8)] = 0x80;
    // MOV word ptr [SI + 0xc],0x7bed (1000_8FDA / 0x18FDA)
    UInt16[DS, (ushort)(SI + 0xC)] = 0x7BED;
    // SUB word ptr [SI + 0x2],0x2 (1000_8FDF / 0x18FDF)
    // UInt16[DS, (ushort)(SI + 0x2)] -= 0x2;
    UInt16[DS, (ushort)(SI + 0x2)] = Alu.Sub16(UInt16[DS, (ushort)(SI + 0x2)], 0x2);
    // MOV AL,[0x18f2] (1000_8FE3 / 0x18FE3)
    AL = UInt8[DS, 0x18F2];
    // MOV ES,word ptr [0xdbda] (1000_8FE6 / 0x18FE6)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38dd] (1000_8FEA / 0x18FEA)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_8FEA = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_8FEA) {
      case 0x235CE : FarCall(cs1, 0x8FEE, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_8FEA);
        break;
    }
    // ADD word ptr [0x1be4],0x2 (1000_8FEE / 0x18FEE)
    // UInt16[DS, 0x1BE4] += 0x2;
    UInt16[DS, 0x1BE4] = Alu.Add16(UInt16[DS, 0x1BE4], 0x2);
    // POP SI (1000_8FF3 / 0x18FF3)
    SI = Stack.Pop();
    // RET  (1000_8FF4 / 0x18FF4)
    return NearRet();
  }
  
  public Action unknown_1000_9025_19025(int gotoTarget) {
    label_1000_9025_19025:
    // MOV CX,word ptr [0x4793] (1000_9025 / 0x19025)
    CX = UInt16[DS, 0x4793];
    // MOV BX,0x92 (1000_9029 / 0x19029)
    BX = 0x92;
    // SUB BX,CX (1000_902C / 0x1902C)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // XOR DX,DX (1000_902E / 0x1902E)
    DX = 0;
    // MOV CH,0xff (1000_9030 / 0x19030)
    CH = 0xFF;
    // MOV DI,0x140 (1000_9032 / 0x19032)
    DI = 0x140;
    // MOV SI,word ptr [0x22fc] (1000_9035 / 0x19035)
    SI = UInt16[DS, 0x22FC];
    // MOV ES,word ptr [0xdbda] (1000_9039 / 0x19039)
    ES = UInt16[DS, 0xDBDA];
    // MOV word ptr [0x4782],BX (1000_903D / 0x1903D)
    UInt16[DS, 0x4782] = BX;
    // CALLF [0x38c9] (1000_9041 / 0x19041)
    // Indirect call to [0x38c9], generating possible targets from emulator records
    uint targetAddress_1000_9041 = (uint)(UInt16[DS, 0x38CB] * 0x10 + UInt16[DS, 0x38C9] - cs1 * 0x10);
    switch(targetAddress_1000_9041) {
      case 0x235BF : FarCall(cs1, 0x9045, VgaFunc05Blit_334B_010F_335BF);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_9041);
        break;
    }
    // RET  (1000_9045 / 0x19045)
    return NearRet();
  }
  
  public Action unknown_1000_9046_19046(int gotoTarget) {
    label_1000_9046_19046:
    // PUSH DS (1000_9046 / 0x19046)
    Stack.Push(DS);
    // POP ES (1000_9047 / 0x19047)
    ES = Stack.Pop();
    // MOV AX,[0x4793] (1000_9048 / 0x19048)
    AX = UInt16[DS, 0x4793];
    // MUL word ptr [0x2240] (1000_904B / 0x1904B)
    Cpu.Mul16(UInt16[DS, 0x2240]);
    // MOV CX,AX (1000_904F / 0x1904F)
    CX = AX;
    // MOV DI,word ptr [0x22fc] (1000_9051 / 0x19051)
    DI = UInt16[DS, 0x22FC];
    // MOV AX,0xf00f (1000_9055 / 0x19055)
    AX = 0xF00F;
    // XOR BX,BX (1000_9058 / 0x19058)
    BX = 0;
    // CMP byte ptr [0xea],0x0 (1000_905A / 0x1905A)
    Alu.Sub8(UInt8[DS, 0xEA], 0x0);
    // JLE 0x1000:9063 (1000_905F / 0x1905F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_9063_19063;
    }
    // MOV AH,0x8 (1000_9061 / 0x19061)
    AH = 0x8;
    label_1000_9063_19063:
    while (CX-- != 0) {
      // SCASB ES:DI (1000_9063 / 0x19063)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // JNZ 0x1000:908b (1000_9065 / 0x19065)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_908B / 0x1908B)
      return NearRet();
    }
    // CMP byte ptr [DI + -0x2],BL (1000_9067 / 0x19067)
    Alu.Sub8(UInt8[DS, (ushort)(DI - 0x2)], BL);
    // JNZ 0x1000:906f (1000_906A / 0x1906A)
    if(!ZeroFlag) {
      goto label_1000_906F_1906F;
    }
    // MOV byte ptr [DI + -0x2],AH (1000_906C / 0x1906C)
    UInt8[DS, (ushort)(DI - 0x2)] = AH;
    label_1000_906F_1906F:
    // CMP byte ptr [DI],BL (1000_906F / 0x1906F)
    Alu.Sub8(UInt8[DS, DI], BL);
    // JNZ 0x1000:9075 (1000_9071 / 0x19071)
    if(!ZeroFlag) {
      goto label_1000_9075_19075;
    }
    // MOV byte ptr [DI],AH (1000_9073 / 0x19073)
    UInt8[DS, DI] = AH;
    label_1000_9075_19075:
    // CMP byte ptr [DI + 0xfebf],BL (1000_9075 / 0x19075)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0xFEBF)], BL);
    // JNZ 0x1000:907f (1000_9079 / 0x19079)
    if(!ZeroFlag) {
      goto label_1000_907F_1907F;
    }
    // MOV byte ptr [DI + 0xfebf],AH (1000_907B / 0x1907B)
    UInt8[DS, (ushort)(DI + 0xFEBF)] = AH;
    label_1000_907F_1907F:
    // CMP byte ptr [DI + 0x13f],BL (1000_907F / 0x1907F)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x13F)], BL);
    // JNZ 0x1000:9063 (1000_9083 / 0x19083)
    if(!ZeroFlag) {
      goto label_1000_9063_19063;
    }
    // MOV byte ptr [DI + 0x13f],AH (1000_9085 / 0x19085)
    UInt8[DS, (ushort)(DI + 0x13F)] = AH;
    // JMP 0x1000:9063 (1000_9089 / 0x19089)
    goto label_1000_9063_19063;
    label_1000_908B_1908B:
    // RET  (1000_908B / 0x1908B)
    return NearRet();
  }
  
  public Action unknown_1000_908C_1908C(int gotoTarget) {
    label_1000_908C_1908C:
    // MOV AX,[0xd83a] (1000_908C / 0x1908C)
    AX = UInt16[DS, 0xD83A];
    // CMP AX,word ptr [0x4782] (1000_908F / 0x1908F)
    Alu.Sub16(AX, UInt16[DS, 0x4782]);
    // JBE 0x1000:90bc (1000_9093 / 0x19093)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_90BC / 0x190BC)
      return NearRet();
    }
    // CMP word ptr [0x479e],0x223c (1000_9095 / 0x19095)
    Alu.Sub16(UInt16[DS, 0x479E], 0x223C);
    // JNZ 0x1000:90bc (1000_909B / 0x1909B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_90BC / 0x190BC)
      return NearRet();
    }
    // MOV CX,word ptr [0x4793] (1000_909D / 0x1909D)
    CX = UInt16[DS, 0x4793];
    // MOV BX,0x92 (1000_90A1 / 0x190A1)
    BX = 0x92;
    // SUB BX,CX (1000_90A4 / 0x190A4)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // XOR DX,DX (1000_90A6 / 0x190A6)
    DX = 0;
    // MOV CH,0xff (1000_90A8 / 0x190A8)
    CH = 0xFF;
    // MOV DI,0x140 (1000_90AA / 0x190AA)
    DI = 0x140;
    // MOV SI,word ptr [0x22fc] (1000_90AD / 0x190AD)
    SI = UInt16[DS, 0x22FC];
    // MOV ES,word ptr [0xdbda] (1000_90B1 / 0x190B1)
    ES = UInt16[DS, 0xDBDA];
    // MOV BP,0xd834 (1000_90B5 / 0x190B5)
    BP = 0xD834;
    // CALLF [0x38cd] (1000_90B8 / 0x190B8)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_90B8 = (uint)(UInt16[DS, 0x38CF] * 0x10 + UInt16[DS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_90B8) {
      case 0x235C2 : FarCall(cs1, 0x90BC, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_90B8);
        break;
    }
    label_1000_90BC_190BC:
    // RET  (1000_90BC / 0x190BC)
    return NearRet();
  }
  
  public Action unknown_1000_90BD_190BD(int gotoTarget) {
    label_1000_90BD_190BD:
    // MOV AL,byte ptr [SI + 0xe] (1000_90BD / 0x190BD)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // CMP AL,0xc (1000_90C0 / 0x190C0)
    Alu.Sub8(AL, 0xC);
    // JZ 0x1000:90d9 (1000_90C2 / 0x190C2)
    if(ZeroFlag) {
      goto label_1000_90D9_190D9;
    }
    // TEST word ptr [0x12],0x1000 (1000_90C4 / 0x190C4)
    Alu.And16(UInt16[DS, 0x12], 0x1000);
    // JZ 0x1000:90d9 (1000_90CA / 0x190CA)
    if(ZeroFlag) {
      goto label_1000_90D9_190D9;
    }
    // MOV BX,0x9c (1000_90CC / 0x190CC)
    BX = 0x9C;
    // MOV DX,0x9584 (1000_90CF / 0x190CF)
    DX = 0x9584;
    // TEST byte ptr [0x10a7],0x10 (1000_90D2 / 0x190D2)
    Alu.And8(UInt8[DS, 0x10A7], 0x10);
    // JZ 0x1000:9111 (1000_90D7 / 0x190D7)
    if(ZeroFlag) {
      goto label_1000_9111_19111;
    }
    label_1000_90D9_190D9:
    // CMP AL,0xf (1000_90D9 / 0x190D9)
    Alu.Sub8(AL, 0xF);
    // MOV BX,0x93 (1000_90DB / 0x190DB)
    BX = 0x93;
    // MOV DX,0x5a03 (1000_90DE / 0x190DE)
    DX = 0x5A03;
    // JZ 0x1000:9111 (1000_90E1 / 0x190E1)
    if(ZeroFlag) {
      goto label_1000_9111_19111;
    }
    // CMP AL,0xe (1000_90E3 / 0x190E3)
    Alu.Sub8(AL, 0xE);
    // JNZ 0x1000:90f7 (1000_90E5 / 0x190E5)
    if(!ZeroFlag) {
      goto label_1000_90F7_190F7;
    }
    // MOV BX,0x96 (1000_90E7 / 0x190E7)
    BX = 0x96;
    // MOV DX,0x95c1 (1000_90EA / 0x190EA)
    DX = 0x95C1;
    // TEST byte ptr [0xa],0x10 (1000_90ED / 0x190ED)
    Alu.And8(UInt8[DS, 0xA], 0x10);
    // JZ 0x1000:9111 (1000_90F2 / 0x190F2)
    if(ZeroFlag) {
      goto label_1000_9111_19111;
    }
    // INC BX (1000_90F4 / 0x190F4)
    BX = Alu.Inc16(BX);
    // JMP 0x1000:9111 (1000_90F5 / 0x190F5)
    goto label_1000_9111_19111;
    label_1000_90F7_190F7:
    // MOV CL,byte ptr [SI + 0xf] (1000_90F7 / 0x190F7)
    CL = UInt8[DS, (ushort)(SI + 0xF)];
    // MOV BX,0x4091 (1000_90FA / 0x190FA)
    BX = 0x4091;
    // TEST CL,0x80 (1000_90FD / 0x190FD)
    Alu.And8(CL, 0x80);
    // JNZ 0x1000:9111 (1000_9100 / 0x19100)
    if(!ZeroFlag) {
      goto label_1000_9111_19111;
    }
    // AND BH,0xbf (1000_9102 / 0x19102)
    // BH &= 0xBF;
    BH = Alu.And8(BH, 0xBF);
    // MOV DX,0x95e2 (1000_9105 / 0x19105)
    DX = 0x95E2;
    // TEST CL,0x40 (1000_9108 / 0x19108)
    Alu.And8(CL, 0x40);
    // JZ 0x1000:9111 (1000_910B / 0x1910B)
    if(ZeroFlag) {
      goto label_1000_9111_19111;
    }
    // INC BX (1000_910D / 0x1910D)
    BX = Alu.Inc16(BX);
    // MOV DX,0x9533 (1000_910E / 0x1910E)
    DX = 0x9533;
    label_1000_9111_19111:
    // MOV BP,0x1f7e (1000_9111 / 0x19111)
    BP = 0x1F7E;
    // MOV word ptr [BP + 0x6],BX (1000_9114 / 0x19114)
    UInt16[SS, (ushort)(BP + 0x6)] = BX;
    // MOV word ptr [BP + 0x8],DX (1000_9117 / 0x19117)
    UInt16[SS, (ushort)(BP + 0x8)] = DX;
    // CALL 0x1000:d316 (1000_911A / 0x1911A)
    NearCall(cs1, 0x911D, MenuAnimationRelated_1000_D316_1D316);
    // MOV BX,0x97cf (1000_911D / 0x1911D)
    BX = 0x97CF;
    // JMP 0x1000:d338 (1000_9120 / 0x19120)
    // Jump converted to entry function call
    return unknown_1000_D338_1D338(0);
  }
  
  public Action unknown_1000_9123_19123(int gotoTarget) {
    label_1000_9123_19123:
    // CMP AL,0x11 (1000_9123 / 0x19123)
    Alu.Sub8(AL, 0x11);
    // JNC 0x1000:917a (1000_9125 / 0x19125)
    if(!CarryFlag) {
      goto label_1000_917A_1917A;
    }
    // XOR AH,AH (1000_9127 / 0x19127)
    AH = 0;
    // CMP AL,0xd (1000_9129 / 0x19129)
    Alu.Sub8(AL, 0xD);
    // JC 0x1000:9173 (1000_912B / 0x1912B)
    if(CarryFlag) {
      goto label_1000_9173_19173;
    }
    // JNZ 0x1000:913b (1000_912D / 0x1912D)
    if(!ZeroFlag) {
      goto label_1000_913B_1913B;
    }
    // MOV DI,word ptr [0x114e] (1000_912F / 0x1912F)
    DI = UInt16[DS, 0x114E];
    // MOV AH,byte ptr [DI] (1000_9133 / 0x19133)
    AH = UInt8[DS, DI];
    // SHR AH,1 (1000_9135 / 0x19135)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // INC AH (1000_9137 / 0x19137)
    AH = Alu.Inc8(AH);
    // JMP 0x1000:9173 (1000_9139 / 0x19139)
    goto label_1000_9173_19173;
    label_1000_913B_1913B:
    // MOV SI,word ptr [0x4756] (1000_913B / 0x1913B)
    SI = UInt16[DS, 0x4756];
    // CMP AL,0xe (1000_913F / 0x1913F)
    Alu.Sub8(AL, 0xE);
    // JZ 0x1000:9155 (1000_9141 / 0x19141)
    if(ZeroFlag) {
      goto label_1000_9155_19155;
    }
    // CMP byte ptr [0x2a],0xc8 (1000_9143 / 0x19143)
    Alu.Sub8(UInt8[DS, 0x2A], 0xC8);
    // JZ 0x1000:9173 (1000_9148 / 0x19148)
    if(ZeroFlag) {
      goto label_1000_9173_19173;
    }
    // MOV AL,[0x476c] (1000_914A / 0x1914A)
    AL = UInt8[DS, 0x476C];
    // SHL AX,1 (1000_914D / 0x1914D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,AX (1000_914F / 0x1914F)
    SI = AX;
    // MOV SI,word ptr [SI + 0x4758] (1000_9151 / 0x19151)
    SI = UInt16[DS, (ushort)(SI + 0x4758)];
    label_1000_9155_19155:
    // MOV AL,byte ptr [SI] (1000_9155 / 0x19155)
    AL = UInt8[DS, SI];
    // PUSH DX (1000_9157 / 0x19157)
    Stack.Push(DX);
    // MOV DL,0x3 (1000_9158 / 0x19158)
    DL = 0x3;
    // DIV DL (1000_915A / 0x1915A)
    Cpu.Div8(DL);
    // MOV DL,0xf (1000_915C / 0x1915C)
    DL = 0xF;
    // OR AH,AH (1000_915E / 0x1915E)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:9164 (1000_9160 / 0x19160)
    if(ZeroFlag) {
      goto label_1000_9164_19164;
    }
    // MOV DL,0x11 (1000_9162 / 0x19162)
    DL = 0x11;
    label_1000_9164_19164:
    // CMP AL,DL (1000_9164 / 0x19164)
    Alu.Sub8(AL, DL);
    // JC 0x1000:916c (1000_9166 / 0x19166)
    if(CarryFlag) {
      goto label_1000_916C_1916C;
    }
    // SUB AL,DL (1000_9168 / 0x19168)
    // AL -= DL;
    AL = Alu.Sub8(AL, DL);
    // JMP 0x1000:9164 (1000_916A / 0x1916A)
    goto label_1000_9164_19164;
    label_1000_916C_1916C:
    // POP DX (1000_916C / 0x1916C)
    DX = Stack.Pop();
    // XCHG AH,AL (1000_916D / 0x1916D)
    byte tmp_1000_916D = AH;
    AH = AL;
    AL = tmp_1000_916D;
    // ADD AL,0xe (1000_916F / 0x1916F)
    // AL += 0xE;
    AL = Alu.Add8(AL, 0xE);
    label_1000_9171_19171:
    // INC AH (1000_9171 / 0x19171)
    AH = Alu.Inc8(AH);
    label_1000_9173_19173:
    // MOV byte ptr [0x47d0],AH (1000_9173 / 0x19173)
    UInt8[DS, 0x47D0] = AH;
    // XOR AH,AH (1000_9177 / 0x19177)
    AH = 0;
    // RET  (1000_9179 / 0x19179)
    return NearRet();
    label_1000_917A_1917A:
    // MOV AX,[0x2] (1000_917A / 0x1917A)
    AX = UInt16[DS, 0x2];
    // SHL AX,1 (1000_917D / 0x1917D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_917F / 0x1917F)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // CMP AH,0x8 (1000_9181 / 0x19181)
    Alu.Sub8(AH, 0x8);
    // JC 0x1000:9188 (1000_9184 / 0x19184)
    if(CarryFlag) {
      goto label_1000_9188_19188;
    }
    // MOV AH,0x8 (1000_9186 / 0x19186)
    AH = 0x8;
    label_1000_9188_19188:
    // SHL AH,1 (1000_9188 / 0x19188)
    // AH <<= 1;
    AH = Alu.Shl8(AH, 1);
    // CMP byte ptr [0xf4],0x10 (1000_918A / 0x1918A)
    Alu.Sub8(UInt8[DS, 0xF4], 0x10);
    // CMC  (1000_918F / 0x1918F)
    CarryFlag = !CarryFlag;
    // ADC AH,0x0 (1000_9190 / 0x19190)
    AH = Alu.Adc8(AH, 0x0);
    // MOV AL,0x2d (1000_9193 / 0x19193)
    AL = 0x2D;
    // JMP 0x1000:9171 (1000_9195 / 0x19195)
    goto label_1000_9171_19171;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9197_19197(0);
  }
  
  public Action unknown_1000_9197_19197(int gotoTarget) {
    label_1000_9197_19197:
    // MOV AX,[0x47c4] (1000_9197 / 0x19197)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0xffff (1000_919A / 0x1919A)
    Alu.Sub16(AX, 0xFFFF);
    // JNZ 0x1000:91a0 (1000_919D / 0x1919D)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_91A0_191A0(0);
    }
    // RET  (1000_919F / 0x1919F)
    return NearRet();
  }
  
  public Action unknown_1000_91A0_191A0(int gotoTarget) {
    switch(gotoTarget) {
      case 0x91A0: goto label_1000_91A0_191A0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_91A0_191A0:
    // MOV word ptr [0xf0],0x0 (1000_91A0 / 0x191A0)
    UInt16[DS, 0xF0] = 0x0;
    // CMP AX,0xc (1000_91A6 / 0x191A6)
    Alu.Sub16(AX, 0xC);
    // JNZ 0x1000:91b8 (1000_91A9 / 0x191A9)
    if(!ZeroFlag) {
      goto label_1000_91B8_191B8;
    }
    // TEST byte ptr [0x10a7],0x10 (1000_91AB / 0x191AB)
    Alu.And8(UInt8[DS, 0x10A7], 0x10);
    // JZ 0x1000:91b8 (1000_91B0 / 0x191B0)
    if(ZeroFlag) {
      goto label_1000_91B8_191B8;
    }
    // MOV word ptr [0xf0],0xa (1000_91B2 / 0x191B2)
    UInt16[DS, 0xF0] = 0xA;
    label_1000_91B8_191B8:
    // CALL 0x1000:9123 (1000_91B8 / 0x191B8)
    NearCall(cs1, 0x91BB, unknown_1000_9123_19123);
    // CMP AX,word ptr [0x22a6] (1000_91BB / 0x191BB)
    Alu.Sub16(AX, UInt16[DS, 0x22A6]);
    // JZ 0x1000:920f (1000_91BF / 0x191BF)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_920F_1920F(0);
    }
    // PUSH AX (1000_91C1 / 0x191C1)
    Stack.Push(AX);
    // CALL 0x1000:98b2 (1000_91C2 / 0x191C2)
    NearCall(cs1, 0x91C5, unknown_1000_98B2_198B2);
    // POP AX (1000_91C5 / 0x191C5)
    AX = Stack.Pop();
    // MOV [0x22a6],AX (1000_91C6 / 0x191C6)
    UInt16[DS, 0x22A6] = AX;
    // MOV SI,AX (1000_91C9 / 0x191C9)
    SI = AX;
    // CALL 0x1000:920f (1000_91CB / 0x191CB)
    NearCall(cs1, 0x91CE, unknown_1000_920F_1920F);
    // MOV AL,byte ptr [SI + 0x22a8] (1000_91CE / 0x191CE)
    AL = UInt8[DS, (ushort)(SI + 0x22A8)];
    // XOR AH,AH (1000_91D2 / 0x191D2)
    AH = 0;
    // MOV [0x2224],AX (1000_91D4 / 0x191D4)
    UInt16[DS, 0x2224] = AX;
    // MOV [0x222c],AX (1000_91D7 / 0x191D7)
    UInt16[DS, 0x222C] = AX;
    // MOV [0x2234],AX (1000_91DA / 0x191DA)
    UInt16[DS, 0x2234] = AX;
    // PUSH DS (1000_91DD / 0x191DD)
    Stack.Push(DS);
    // PUSH DS (1000_91DE / 0x191DE)
    Stack.Push(DS);
    // POP ES (1000_91DF / 0x191DF)
    ES = Stack.Pop();
    // LDS SI,[0xdbb0] (1000_91E0 / 0x191E0)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // MOV BX,word ptr [SI] (1000_91E4 / 0x191E4)
    BX = UInt16[DS, SI];
    // ADD SI,word ptr [BX + SI + -0x2] (1000_91E6 / 0x191E6)
    // SI += UInt16[DS, (ushort)(BX + SI - 0x2)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BX + SI - 0x2)]);
    // ADD SI,0x4 (1000_91E9 / 0x191E9)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // MOV DI,0x1bf0 (1000_91EC / 0x191EC)
    DI = 0x1BF0;
    // MOVSW ES:DI,SI (1000_91EF / 0x191EF)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_91F0 / 0x191F0)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_91F1 / 0x191F1)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_91F2 / 0x191F2)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,SI (1000_91F3 / 0x191F3)
    AX = SI;
    // ADD AX,0x2 (1000_91F5 / 0x191F5)
    // AX += 0x2;
    AX = Alu.Add16(AX, 0x2);
    // MOV SS:[0x47cc],AX (1000_91F8 / 0x191F8)
    UInt16[SS, 0x47CC] = AX;
    // ADD SI,word ptr [SI] (1000_91FC / 0x191FC)
    // SI += UInt16[DS, SI];
    SI = Alu.Add16(SI, UInt16[DS, SI]);
    // MOV BX,word ptr [SI] (1000_91FE / 0x191FE)
    BX = UInt16[DS, SI];
    // MOV DI,SI (1000_9200 / 0x19200)
    DI = SI;
    // ADD DI,word ptr [BX + SI + -0x2] (1000_9202 / 0x19202)
    // DI += UInt16[DS, (ushort)(BX + SI - 0x2)];
    DI = Alu.Add16(DI, UInt16[DS, (ushort)(BX + SI - 0x2)]);
    // POP DS (1000_9205 / 0x19205)
    DS = Stack.Pop();
    // MOV word ptr [0x47ca],SI (1000_9206 / 0x19206)
    UInt16[DS, 0x47CA] = SI;
    // MOV word ptr [0x47d2],DI (1000_920A / 0x1920A)
    UInt16[DS, 0x47D2] = DI;
    // RET  (1000_920E / 0x1920E)
    return NearRet();
  }
  
  public Action unknown_1000_920F_1920F(int gotoTarget) {
    switch(gotoTarget) {
      case 0x920F: goto label_1000_920F_1920F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_920F_1920F:
    // ADD AX,0x2 (1000_920F / 0x1920F)
    // AX += 0x2;
    AX = Alu.Add16(AX, 0x2);
    // JMP 0x1000:c13e (1000_9212 / 0x19212)
    // Jump converted to entry function call
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action unknown_1000_9215_19215(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9281: goto label_1000_9281_19281;break;
      case 0x9472: goto label_1000_9472_19472;break;
      case 0x93AA: goto label_1000_93AA_193AA;break;
      case 0x42E9: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_42E9_142E9:
    // CALL 0x1000:98b2 (1000_42E9 / 0x142E9)
    NearCall(cs1, 0x42EC, unknown_1000_98B2_198B2);
    // CALL 0x1000:38e1 (1000_42EC / 0x142EC)
    NearCall(cs1, 0x42EF, unknown_1000_38E1_138E1);
    // MOV AX,0x24 (1000_42EF / 0x142EF)
    AX = 0x24;
    // CALL 0x1000:c13e (1000_42F2 / 0x142F2)
    NearCall(cs1, 0x42F5, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV byte ptr [0x473e],0x1 (1000_42F5 / 0x142F5)
    UInt8[DS, 0x473E] = 0x1;
    // MOV byte ptr [0x11c9],0x4 (1000_42FA / 0x142FA)
    UInt8[DS, 0x11C9] = 0x4;
    // MOV word ptr [0x487e],0x2 (1000_42FF / 0x142FF)
    UInt16[DS, 0x487E] = 0x2;
    // MOV BP,0x212e (1000_4305 / 0x14305)
    BP = 0x212E;
    // CALL 0x1000:49ea (1000_4308 / 0x14308)
    NearCall(cs1, 0x430B, unknown_1000_49EA_149EA);
    // MOV BX,0x4415 (1000_430B / 0x1430B)
    BX = 0x4415;
    // CALL 0x1000:d323 (1000_430E / 0x1430E)
    NearCall(cs1, 0x4311, unknown_1000_D323_1D323);
    // MOV AX,0x1ac8 (1000_4311 / 0x14311)
    AX = 0x1AC8;
    // CALL 0x1000:d95e (1000_4314 / 0x14314)
    NearCall(cs1, 0x4317, SetMapClickHandlerAddressFromAx_1000_D95E_1D95E);
    // CALL 0x1000:4aca (1000_4317 / 0x14317)
    NearCall(cs1, 0x431A, SetUnknown11CATo1_1000_4ACA_14ACA);
    // MOV word ptr [0x46fc],0x0 (1000_431A / 0x1431A)
    UInt16[DS, 0x46FC] = 0x0;
    // CALL 0x1000:5b5d (1000_4320 / 0x14320)
    NearCall(cs1, 0x4323, unknown_1000_5B5D_15B5D);
    // MOV byte ptr [0x46eb],0x1 (1000_4323 / 0x14323)
    UInt8[DS, 0x46EB] = 0x1;
    // MOV SI,0x1cca (1000_4328 / 0x14328)
    SI = 0x1CCA;
    // CALL 0x1000:d72b (1000_432B / 0x1432B)
    NearCall(cs1, 0x432E, unknown_1000_D72B_1D72B);
    // MOV SI,0x149c (1000_432E / 0x1432E)
    SI = 0x149C;
    // MOV DI,0x46e3 (1000_4331 / 0x14331)
    DI = 0x46E3;
    // CALL 0x1000:daaa (1000_4334 / 0x14334)
    NearCall(cs1, 0x4337, SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA);
    // CALL 0x1000:5b99 (1000_4337 / 0x14337)
    NearCall(cs1, 0x433A, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // CALL 0x1000:439f (1000_433A / 0x1433A)
    NearCall(cs1, 0x433D, unknown_1000_439F_1439F);
    // MOV AX,0x2bc (1000_433D / 0x1433D)
    AX = 0x2BC;
    // CALL 0x1000:ab4f (1000_4340 / 0x14340)
    NearCall(cs1, 0x4343, unknown_1000_AB4F_1AB4F);
    // CALL 0x1000:4658 (1000_4343 / 0x14343)
    NearCall(cs1, 0x4346, unknown_1000_4658_14658);
    // MOV word ptr [0x46ed],0x4377 (1000_4346 / 0x14346)
    UInt16[DS, 0x46ED] = 0x4377;
    // CALL 0x1000:5b93 (1000_434C / 0x1434C)
    NearCall(cs1, 0x434F, unknown_1000_5B93_15B93);
    // CALL 0x1000:b6c3 (1000_434F / 0x1434F)
    NearCall(cs1, 0x4352, map_func_ida_1000_B6C3_1B6C3);
    // CALL 0x1000:c137 (1000_4352 / 0x14352)
    NearCall(cs1, 0x4355, load_icons_sprites_ida_1000_C137_1C137);
    // CALL 0x1000:5dce (1000_4355 / 0x14355)
    NearCall(cs1, 0x4358, unknown_1000_5DCE_15DCE);
    // CMP byte ptr [0x473e],0x0 (1000_4358 / 0x14358)
    Alu.Sub8(UInt8[DS, 0x473E], 0x0);
    // JZ 0x1000:436e (1000_435D / 0x1435D)
    if(ZeroFlag) {
      goto label_1000_436E_1436E;
    }
    // MOV AX,0x24 (1000_435F / 0x1435F)
    AX = 0x24;
    // CALL 0x1000:c13e (1000_4362 / 0x14362)
    NearCall(cs1, 0x4365, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x14c0 (1000_4365 / 0x14365)
    SI = 0x14C0;
    // CALL 0x1000:c21b (1000_4368 / 0x14368)
    NearCall(cs1, 0x436B, unknown_1000_C21B_1C21B);
    // CALL 0x1000:c0f4 (1000_436B / 0x1436B)
    NearCall(cs1, 0x436E, unknown_1000_C0F4_1C0F4);
    label_1000_436E_1436E:
    // CALL 0x1000:c4dd (1000_436E / 0x1436E)
    NearCall(cs1, 0x4371, unknown_1000_C4DD_1C4DD);
    // CALL 0x1000:445d (1000_4371 / 0x14371)
    NearCall(cs1, 0x4374, unknown_1000_445D_1445D);
    // JMP 0x1000:d280 (1000_4374 / 0x14374)
    // Jump converted to entry function call
    return unknown_1000_D280_1D280(0);
    entry:
    label_1000_9215_19215:
    // CALL 0x1000:d41b (1000_9215 / 0x19215)
    NearCall(cs1, 0x9218, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1f0e (1000_9218 / 0x19218)
    Alu.Sub16(BP, 0x1F0E);
    // JNZ 0x1000:9248 (1000_921C / 0x1921C)
    if(!ZeroFlag) {
      goto label_1000_9248_19248;
    }
    // CMP byte ptr [0x11c9],0x0 (1000_921E / 0x1921E)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:9281 (1000_9223 / 0x19223)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CALL 0x1000:9285 (1000_9225 / 0x19225)
    NearCall(cs1, 0x9228, unknown_1000_9285_19285);
    // JNC 0x1000:9263 (1000_9228 / 0x19228)
    if(!CarryFlag) {
      goto label_1000_9263_19263;
    }
    // CMP CL,0x2f (1000_922A / 0x1922A)
    Alu.Sub8(CL, 0x2F);
    // JZ 0x1000:9282 (1000_922D / 0x1922D)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:42e9 (1000_9282 / 0x19282)
      goto label_1000_42E9_142E9;
    }
    // CMP CL,0xf (1000_922F / 0x1922F)
    Alu.Sub8(CL, 0xF);
    // JNC 0x1000:9240 (1000_9232 / 0x19232)
    if(!CarryFlag) {
      goto label_1000_9240_19240;
    }
    label_1000_9234_19234:
    // MOV AL,0x10 (1000_9234 / 0x19234)
    AL = 0x10;
    // MUL CL (1000_9236 / 0x19236)
    Cpu.Mul8(CL);
    // ADD AX,0xfd8 (1000_9238 / 0x19238)
    // AX += 0xFD8;
    AX = Alu.Add16(AX, 0xFD8);
    // MOV SI,AX (1000_923B / 0x1923B)
    SI = AX;
    // JMP word ptr [SI + 0x4] (1000_923D / 0x1923D)
    // Indirect jump to word ptr [SI + 0x4], generating possible targets from emulator records
    uint targetAddress_1000_923D = (uint)(UInt16[DS, (ushort)(SI + 0x4)]);
    switch(targetAddress_1000_923D) {
      case 0x92F2 : throw FailAsUntested("Would have been a goto but label label_1000_92F2_192F2 does not exist because no instruction was found there that belongs to a function.");
      case 0x9306 : throw FailAsUntested("Would have been a goto but label label_1000_9306_19306 does not exist because no instruction was found there that belongs to a function.");
      case 0x9301 : throw FailAsUntested("Would have been a goto but label label_1000_9301_19301 does not exist because no instruction was found there that belongs to a function.");
      case 0x92F7 : throw FailAsUntested("Would have been a goto but label label_1000_92F7_192F7 does not exist because no instruction was found there that belongs to a function.");
      case 0x9373 : throw FailAsUntested("Would have been a goto but label label_1000_9373_19373 does not exist because no instruction was found there that belongs to a function.");
      case 0x931A : throw FailAsUntested("Would have been a goto but label label_1000_931A_1931A does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_923D);
        break;
    }
    label_1000_9240_19240:
    // SUB CL,0xf (1000_9240 / 0x19240)
    // CL -= 0xF;
    CL = Alu.Sub8(CL, 0xF);
    // MOV AL,CL (1000_9243 / 0x19243)
    AL = CL;
    // JMP 0x1000:9381 (1000_9245 / 0x19245)
    goto label_1000_9381_19381;
    label_1000_9248_19248:
    // CMP BP,0x1f7e (1000_9248 / 0x19248)
    Alu.Sub16(BP, 0x1F7E);
    // JNZ 0x1000:9281 (1000_924C / 0x1924C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CALL 0x1000:92c9 (1000_924E / 0x1924E)
    NearCall(cs1, 0x9251, unknown_1000_92C9_192C9);
    // JNC 0x1000:9281 (1000_9251 / 0x19251)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CMP CX,word ptr [0x47c4] (1000_9253 / 0x19253)
    Alu.Sub16(CX, UInt16[DS, 0x47C4]);
    // JNZ 0x1000:925c (1000_9257 / 0x19257)
    if(!ZeroFlag) {
      goto label_1000_925C_1925C;
    }
    // JMP 0x1000:945b (1000_9259 / 0x19259)
    // Jump converted to entry function call
    return unknown_1000_945B_1945B(0);
    label_1000_925C_1925C:
    // PUSH CX (1000_925C / 0x1925C)
    Stack.Push(CX);
    // CALL 0x1000:d2bd (1000_925D / 0x1925D)
    NearCall(cs1, 0x9260, unknown_1000_D2BD_1D2BD);
    // POP CX (1000_9260 / 0x19260)
    CX = Stack.Pop();
    // JMP 0x1000:9234 (1000_9261 / 0x19261)
    goto label_1000_9234_19234;
    label_1000_9263_19263:
    // CMP byte ptr [0xb],0x1 (1000_9263 / 0x19263)
    Alu.Sub8(UInt8[DS, 0xB], 0x1);
    // JNZ 0x1000:9281 (1000_9268 / 0x19268)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CMP BX,0x98 (1000_926A / 0x1926A)
    Alu.Sub16(BX, 0x98);
    // JNC 0x1000:9281 (1000_926E / 0x1926E)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CMP byte ptr [0x8],0x21 (1000_9270 / 0x19270)
    Alu.Sub8(UInt8[DS, 0x8], 0x21);
    // JZ 0x1000:9281 (1000_9275 / 0x19275)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // CMP byte ptr [0x2b],0x0 (1000_9277 / 0x19277)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:9281 (1000_927C / 0x1927C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // JMP 0x1000:3f15 (1000_927E / 0x1927E)
    // Jump converted to entry function call
    return unknown_1000_3F15_13F15(0);
    label_1000_9281_19281:
    // RET  (1000_9281 / 0x19281)
    return NearRet();
    label_1000_9282_19282:
    // JMP 0x1000:42e9 (1000_9282 / 0x19282)
    goto label_1000_42E9_142E9;
    label_1000_9381_19381:
    // CMP AL,0x9 (1000_9381 / 0x19381)
    Alu.Sub8(AL, 0x9);
    // JC 0x1000:9387 (1000_9383 / 0x19383)
    if(CarryFlag) {
      goto label_1000_9387_19387;
    }
    // XOR AX,AX (1000_9385 / 0x19385)
    AX = 0;
    label_1000_9387_19387:
    // CMP AL,0x8 (1000_9387 / 0x19387)
    Alu.Sub8(AL, 0x8);
    // JNZ 0x1000:9394 (1000_9389 / 0x19389)
    if(!ZeroFlag) {
      goto label_1000_9394_19394;
    }
    // MOV AL,[0x476b] (1000_938B / 0x1938B)
    AL = UInt8[DS, 0x476B];
    // DEC AL (1000_938E / 0x1938E)
    AL = Alu.Dec8(AL);
    // JNS 0x1000:9394 (1000_9390 / 0x19390)
    if(!SignFlag) {
      goto label_1000_9394_19394;
    }
    // XOR AX,AX (1000_9392 / 0x19392)
    AX = 0;
    label_1000_9394_19394:
    // MOV [0x476c],AL (1000_9394 / 0x19394)
    UInt8[DS, 0x476C] = AL;
    // MOV SI,0x4758 (1000_9397 / 0x19397)
    SI = 0x4758;
    // XOR AH,AH (1000_939A / 0x1939A)
    AH = 0;
    // ADD AX,AX (1000_939C / 0x1939C)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADD SI,AX (1000_939E / 0x1939E)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV SI,word ptr [SI] (1000_93A0 / 0x193A0)
    SI = UInt16[DS, SI];
    // CALL 0x1000:1ebe (1000_93A2 / 0x193A2)
    NearCall(cs1, 0x93A5, unknown_1000_1EBE_11EBE);
    // CALL 0x1000:31f6 (1000_93A5 / 0x193A5)
    NearCall(cs1, 0x93A8, unknown_1000_31F6_131F6);
    // MOV AL,0xf (1000_93A8 / 0x193A8)
    AL = 0xF;
    label_1000_93AA_193AA:
    // XOR AH,AH (1000_93AA / 0x193AA)
    AH = 0;
    // MOV word ptr [0x47e1],0x0 (1000_93AC / 0x193AC)
    UInt16[DS, 0x47E1] = 0x0;
    // PUSH AX (1000_93B2 / 0x193B2)
    Stack.Push(AX);
    // MOV [0x47c4],AX (1000_93B3 / 0x193B3)
    UInt16[DS, 0x47C4] = AX;
    // CALL 0x1000:91a0 (1000_93B6 / 0x193B6)
    NearCall(cs1, 0x93B9, unknown_1000_91A0_191A0);
    // CALL 0x1000:3af9 (1000_93B9 / 0x193B9)
    NearCall(cs1, 0x93BC, unknown_1000_3AF9_13AF9);
    // CALL 0x1000:9197 (1000_93BC / 0x193BC)
    NearCall(cs1, 0x93BF, unknown_1000_9197_19197);
    // CALL 0x1000:9908 (1000_93BF / 0x193BF)
    NearCall(cs1, 0x93C2, unknown_1000_9908_19908);
    // MOV SI,word ptr [0x47c8] (1000_93C2 / 0x193C2)
    SI = UInt16[DS, 0x47C8];
    // MOV word ptr [0x4540],0x0 (1000_93C6 / 0x193C6)
    UInt16[DS, 0x4540] = 0x0;
    // CALL 0x1000:9bac (1000_93CC / 0x193CC)
    NearCall(cs1, 0x93CF, unknown_1000_9BAC_19BAC);
    // CALL 0x1000:1834 (1000_93CF / 0x193CF)
    NearCall(cs1, 0x93D2, unknown_1000_1834_11834);
    // CALL 0x1000:c0f4 (1000_93D2 / 0x193D2)
    NearCall(cs1, 0x93D5, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:c4dd (1000_93D5 / 0x193D5)
    NearCall(cs1, 0x93D8, unknown_1000_C4DD_1C4DD);
    // POP AX (1000_93D8 / 0x193D8)
    AX = Stack.Pop();
    // CALL 0x1000:93df (1000_93D9 / 0x193D9)
    NearCall(cs1, 0x93DC, unknown_1000_93DF_193DF);
    // JMP 0x1000:9472 (1000_93DC / 0x193DC)
    goto label_1000_9472_19472;
    label_1000_9472_19472:
    // CALL 0x1000:9f40 (1000_9472 / 0x19472)
    NearCall(cs1, 0x9475, unknown_1000_9F40_19F40);
    // MOV byte ptr [0x226d],0xa (1000_9475 / 0x19475)
    UInt8[DS, 0x226D] = 0xA;
    // MOV byte ptr [0x1b],0x0 (1000_947A / 0x1947A)
    UInt8[DS, 0x1B] = 0x0;
    // CMP word ptr [0x47b6],0x0 (1000_947F / 0x1947F)
    Alu.Sub16(UInt16[DS, 0x47B6], 0x0);
    // JNZ 0x1000:94dd (1000_9484 / 0x19484)
    if(!ZeroFlag) {
      goto label_1000_94DD_194DD;
    }
    // MOV SI,word ptr [0x47ba] (1000_9486 / 0x19486)
    SI = UInt16[DS, 0x47BA];
    // OR SI,SI (1000_948A / 0x1948A)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JNZ 0x1000:949a (1000_948C / 0x1948C)
    if(!ZeroFlag) {
      goto label_1000_949A_1949A;
    }
    // MOV SI,word ptr [0x47be] (1000_948E / 0x1948E)
    SI = UInt16[DS, 0x47BE];
    label_1000_9492_19492:
    // MOV AX,SI (1000_9492 / 0x19492)
    AX = SI;
    // SHL SI,1 (1000_9494 / 0x19494)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr [SI + 0xaa76] (1000_9496 / 0x19496)
    SI = UInt16[DS, (ushort)(SI + 0xAA76)];
    label_1000_949A_1949A:
    // CMP SI,-0x1 (1000_949A / 0x1949A)
    Alu.Sub16(SI, 0xFFFF);
    // JZ 0x1000:94b9 (1000_949D / 0x1949D)
    if(ZeroFlag) {
      goto label_1000_94B9_194B9;
    }
    // CALL 0x1000:9b49 (1000_949F / 0x1949F)
    NearCall(cs1, 0x94A2, unknown_1000_9B49_19B49);
    // CALL 0x1000:9f9e (1000_94A2 / 0x194A2)
    NearCall(cs1, 0x94A5, unknown_1000_9F9E_19F9E);
    label_1000_94A5_194A5:
    // MOV word ptr [0x47ba],SI (1000_94A5 / 0x194A5)
    UInt16[DS, 0x47BA] = SI;
    // JNC 0x1000:94da (1000_94A9 / 0x194A9)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:d280 (1000_94DA / 0x194DA)
      // Jump converted to entry function call
      return unknown_1000_D280_1D280(0);
    }
    // MOV AX,[0x47be] (1000_94AB / 0x194AB)
    AX = UInt16[DS, 0x47BE];
    // INC AX (1000_94AE / 0x194AE)
    AX = Alu.Inc16(AX);
    // MOV [0x47be],AX (1000_94AF / 0x194AF)
    UInt16[DS, 0x47BE] = AX;
    // MOV SI,AX (1000_94B2 / 0x194B2)
    SI = AX;
    // AND AX,0x3 (1000_94B4 / 0x194B4)
    // AX &= 0x3;
    AX = Alu.And16(AX, 0x3);
    // JNZ 0x1000:9492 (1000_94B7 / 0x194B7)
    if(!ZeroFlag) {
      goto label_1000_9492_19492;
    }
    label_1000_94B9_194B9:
    // CMP word ptr [0x47c4],0xd (1000_94B9 / 0x194B9)
    Alu.Sub16(UInt16[DS, 0x47C4], 0xD);
    // JZ 0x1000:94c3 (1000_94BE / 0x194BE)
    if(ZeroFlag) {
      goto label_1000_94C3_194C3;
    }
    // JMP 0x1000:d2e2 (1000_94C0 / 0x194C0)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_94C3_194C3:
    // CMP SI,-0x1 (1000_94C3 / 0x194C3)
    Alu.Sub16(SI, 0xFFFF);
    // JNZ 0x1000:94cc (1000_94C6 / 0x194C6)
    if(!ZeroFlag) {
      goto label_1000_94CC_194CC;
    }
    // MOV SI,word ptr [0x47be] (1000_94C8 / 0x194C8)
    SI = UInt16[DS, 0x47BE];
    label_1000_94CC_194CC:
    // AND SI,0xfff8 (1000_94CC / 0x194CC)
    // SI &= 0xFFF8;
    SI = Alu.And16(SI, 0xFFF8);
    // MOV word ptr [0x47be],SI (1000_94CF / 0x194CF)
    UInt16[DS, 0x47BE] = SI;
    // MOV byte ptr [0x47c2],0x20 (1000_94D3 / 0x194D3)
    UInt8[DS, 0x47C2] = 0x20;
    // JMP 0x1000:9492 (1000_94D8 / 0x194D8)
    goto label_1000_9492_19492;
    label_1000_94DA_194DA:
    // JMP 0x1000:d280 (1000_94DA / 0x194DA)
    // Jump converted to entry function call
    return unknown_1000_D280_1D280(0);
    label_1000_94DD_194DD:
    // LDS SI,[0x47b6] (1000_94DD / 0x194DD)
    SI = UInt16[DS, 0x47B6];
    DS = UInt16[DS, 0x47B8];
    // CALL 0x1000:88d2 (1000_94E1 / 0x194E1)
    NearCall(cs1, 0x94E4, unknown_1000_88D2_188D2);
    // MOV SI,word ptr [0x47ba] (1000_94E4 / 0x194E4)
    SI = UInt16[DS, 0x47BA];
    // ADD word ptr [0x4780],0x1000 (1000_94E8 / 0x194E8)
    // UInt16[DS, 0x4780] += 0x1000;
    UInt16[DS, 0x4780] = Alu.Add16(UInt16[DS, 0x4780], 0x1000);
    // CALL 0x1000:a03f (1000_94EE / 0x194EE)
    NearCall(cs1, 0x94F1, unknown_1000_A03F_1A03F);
    // JMP 0x1000:94a5 (1000_94F1 / 0x194F1)
    goto label_1000_94A5_194A5;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_94F3_194F3(0);
  }
  
  public Action unknown_1000_9285_19285(int gotoTarget) {
    label_1000_9285_19285:
    // CMP BX,0x98 (1000_9285 / 0x19285)
    Alu.Sub16(BX, 0x98);
    // JNC 0x1000:92c9 (1000_9289 / 0x19289)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_92C9_192C9(0);
    }
    // MOV SI,0x47f8 (1000_928B / 0x1928B)
    SI = 0x47F8;
    // MOV CX,0x17 (1000_928E / 0x1928E)
    CX = 0x17;
    label_1000_9291_19291:
    // LODSW SI (1000_9291 / 0x19291)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_9292 / 0x19292)
    DI = AX;
    // LODSW SI (1000_9294 / 0x19294)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_9295 / 0x19295)
    BP = AX;
    // OR DI,DI (1000_9297 / 0x19297)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JS 0x1000:92a9 (1000_9299 / 0x19299)
    if(SignFlag) {
      goto label_1000_92A9_192A9;
    }
    // SUB DI,DX (1000_929B / 0x1929B)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // CMP DI,-0x20 (1000_929D / 0x1929D)
    Alu.Sub16(DI, 0xFFE0);
    // JC 0x1000:92a9 (1000_92A0 / 0x192A0)
    if(CarryFlag) {
      goto label_1000_92A9_192A9;
    }
    // SUB BP,BX (1000_92A2 / 0x192A2)
    // BP -= BX;
    BP = Alu.Sub16(BP, BX);
    // CMP BP,-0x50 (1000_92A4 / 0x192A4)
    Alu.Sub16(BP, 0xFFB0);
    // JNC 0x1000:92eb (1000_92A7 / 0x192A7)
    if(!CarryFlag) {
      goto label_1000_92EB_192EB;
    }
    label_1000_92A9_192A9:
    // LOOP 0x1000:9291 (1000_92A9 / 0x192A9)
    if(--CX != 0) {
      goto label_1000_9291_19291;
    }
    // MOV AX,[0x472d] (1000_92AB / 0x192AB)
    AX = UInt16[DS, 0x472D];
    // OR AX,AX (1000_92AE / 0x192AE)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:92c8 (1000_92B0 / 0x192B0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_92C8 / 0x192C8)
      return NearRet();
    }
    // SUB AX,DX (1000_92B2 / 0x192B2)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // CMP AX,0xffb2 (1000_92B4 / 0x192B4)
    Alu.Sub16(AX, 0xFFB2);
    // CMC  (1000_92B7 / 0x192B7)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:92c8 (1000_92B8 / 0x192B8)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_92C8 / 0x192C8)
      return NearRet();
    }
    // MOV AX,BX (1000_92BA / 0x192BA)
    AX = BX;
    // SUB AX,word ptr [0x472f] (1000_92BC / 0x192BC)
    // AX -= UInt16[DS, 0x472F];
    AX = Alu.Sub16(AX, UInt16[DS, 0x472F]);
    // CMP AX,0x3c (1000_92C0 / 0x192C0)
    Alu.Sub16(AX, 0x3C);
    // JNC 0x1000:92c8 (1000_92C3 / 0x192C3)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_92C8 / 0x192C8)
      return NearRet();
    }
    // MOV CX,0x2f (1000_92C5 / 0x192C5)
    CX = 0x2F;
    label_1000_92C8_192C8:
    // RET  (1000_92C8 / 0x192C8)
    return NearRet();
    label_1000_92EB_192EB:
    // SUB CX,0x17 (1000_92EB / 0x192EB)
    // CX -= 0x17;
    CX = Alu.Sub16(CX, 0x17);
    // NEG CX (1000_92EE / 0x192EE)
    CX = Alu.Sub16(0, CX);
    // STC  (1000_92F0 / 0x192F0)
    CarryFlag = true;
    // RET  (1000_92F1 / 0x192F1)
    return NearRet();
  }
  
  public Action unknown_1000_92C9_192C9(int gotoTarget) {
    switch(gotoTarget) {
      case 0x92C9: goto label_1000_92C9_192C9;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_92C9_192C9:
    // XOR CX,CX (1000_92C9 / 0x192C9)
    CX = 0;
    // MOV CL,byte ptr [0x1152] (1000_92CB / 0x192CB)
    CL = UInt8[DS, 0x1152];
    // CMP CL,0xff (1000_92CF / 0x192CF)
    Alu.Sub8(CL, 0xFF);
    // JZ 0x1000:9281 (1000_92D2 / 0x192D2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // MOV DI,0x1c0c (1000_92D4 / 0x192D4)
    DI = 0x1C0C;
    // CALL 0x1000:d6fe (1000_92D7 / 0x192D7)
    NearCall(cs1, 0x92DA, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:9281 (1000_92DA / 0x192DA)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // MOV CL,byte ptr [0x1153] (1000_92DC / 0x192DC)
    CL = UInt8[DS, 0x1153];
    // CMP CL,0xff (1000_92E0 / 0x192E0)
    Alu.Sub8(CL, 0xFF);
    // JZ 0x1000:9281 (1000_92E3 / 0x192E3)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9281 / 0x19281)
      return NearRet();
    }
    // MOV DI,0x1c1a (1000_92E5 / 0x192E5)
    DI = 0x1C1A;
    // JMP 0x1000:d6fe (1000_92E8 / 0x192E8)
    // Jump converted to entry function call
    return unknown_1000_D6FE_1D6FE(0);
  }
  
  public Action unknown_1000_93DF_193DF(int gotoTarget) {
    label_1000_93DF_193DF:
    // MOV CL,AL (1000_93DF / 0x193DF)
    CL = AL;
    // SHL AL,1 (1000_93E1 / 0x193E1)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_93E3 / 0x193E3)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_93E5 / 0x193E5)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // MOV [0x47be],AX (1000_93E7 / 0x193E7)
    UInt16[DS, 0x47BE] = AX;
    // MOV AX,0x1 (1000_93EA / 0x193EA)
    AX = 0x1;
    // SHL AX,CL (1000_93ED / 0x193ED)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // OR word ptr [0xe],AX (1000_93EF / 0x193EF)
    // UInt16[DS, 0xE] |= AX;
    UInt16[DS, 0xE] = Alu.Or16(UInt16[DS, 0xE], AX);
    // OR word ptr [0x14],AX (1000_93F3 / 0x193F3)
    // UInt16[DS, 0x14] |= AX;
    UInt16[DS, 0x14] = Alu.Or16(UInt16[DS, 0x14], AX);
    // MOV AL,0x10 (1000_93F7 / 0x193F7)
    AL = 0x10;
    // MUL CL (1000_93F9 / 0x193F9)
    Cpu.Mul8(CL);
    // ADD AX,0xfd8 (1000_93FB / 0x193FB)
    // AX += 0xFD8;
    AX = Alu.Add16(AX, 0xFD8);
    // MOV [0x47a2],AX (1000_93FE / 0x193FE)
    UInt16[DS, 0x47A2] = AX;
    // MOV SI,AX (1000_9401 / 0x19401)
    SI = AX;
    // MOV word ptr [0x47ba],0x0 (1000_9403 / 0x19403)
    UInt16[DS, 0x47BA] = 0x0;
    // CALL 0x1000:90bd (1000_9409 / 0x19409)
    NearCall(cs1, 0x940C, unknown_1000_90BD_190BD);
    // MOV word ptr [0x47b6],0x0 (1000_940C / 0x1940C)
    UInt16[DS, 0x47B6] = 0x0;
    // MOV byte ptr [0x47c2],0x80 (1000_9412 / 0x19412)
    UInt8[DS, 0x47C2] = 0x80;
    // MOV byte ptr [0x19],0x0 (1000_9417 / 0x19417)
    UInt8[DS, 0x19] = 0x0;
    // RET  (1000_941C / 0x1941C)
    return NearRet();
  }
  
  public Action unknown_1000_941D_1941D(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2993: goto label_1000_2993_12993;break;
      case 0xEB9: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_0EB9_10EB9:
    // XOR AX,AX (1000_0EB9 / 0x10EB9)
    AX = 0;
    // MOV [0x47c3],AL (1000_0EBB / 0x10EBB)
    UInt8[DS, 0x47C3] = AL;
    // CALL 0x1000:b2be (1000_0EBE / 0x10EBE)
    NearCall(cs1, 0xEC1, SetUnknown2788To0_1000_B2BE_1B2BE);
    // MOV byte ptr [0x47a6],0xff (1000_0EC1 / 0x10EC1)
    UInt8[DS, 0x47A6] = 0xFF;
    // MOV AL,0x4 (1000_0EC6 / 0x10EC6)
    AL = 0x4;
    // XOR DX,DX (1000_0EC8 / 0x10EC8)
    DX = 0;
    // CALL 0x1000:189a (1000_0ECA / 0x10ECA)
    NearCall(cs1, 0xECD, unknown_1000_189A_1189A);
    // JMP 0x1000:2db1 (1000_0ECD / 0x10ECD)
    // Jump converted to entry function call
    return unknown_1000_2DB1_12DB1(0);
    label_1000_2993_12993:
    // MOV AL,0x6 (1000_2993 / 0x12993)
    AL = 0x6;
    // JMP 0x1000:2999 (1000_2995 / 0x12995)
    // Jump converted to non entry function call
    return unknown_1000_2997_12997(0x12999 - cs1 * 0x10);
    label_1000_4AAD_14AAD:
    // XOR byte ptr [0x4728],0x80 (1000_4AAD / 0x14AAD)
    // UInt8[DS, 0x4728] ^= 0x80;
    UInt8[DS, 0x4728] = Alu.Xor8(UInt8[DS, 0x4728], 0x80);
    // JS 0x1000:4ab7 (1000_4AB2 / 0x14AB2)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_4AB7 / 0x14AB7)
      return NearRet();
    }
    // CALL 0x1000:49d4 (1000_4AB4 / 0x14AB4)
    throw FailAsUntested("Could not find a valid function at address 1000_49D4 / 0x149D4");
    label_1000_4AB7_14AB7:
    // RET  (1000_4AB7 / 0x14AB7)
    return NearRet();
    entry:
    label_1000_941D_1941D:
    // CMP byte ptr [0x47a9],0x0 (1000_941D / 0x1941D)
    Alu.Sub8(UInt8[DS, 0x47A9], 0x0);
    // JZ 0x1000:9427 (1000_9422 / 0x19422)
    if(ZeroFlag) {
      goto label_1000_9427_19427;
    }
    // JMP 0x1000:2993 (1000_9424 / 0x19424)
    goto label_1000_2993_12993;
    label_1000_9427_19427:
    // CALL 0x1000:d41b (1000_9427 / 0x19427)
    NearCall(cs1, 0x942A, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x20c2 (1000_942A / 0x1942A)
    Alu.Sub16(BP, 0x20C2);
    // JNZ 0x1000:9436 (1000_942E / 0x1942E)
    if(!ZeroFlag) {
      goto label_1000_9436_19436;
    }
    // CALL 0x1000:d2ea (1000_9430 / 0x19430)
    NearCall(cs1, 0x9433, unknown_1000_D2EA_1D2EA);
    // JMP 0x1000:0eb9 (1000_9433 / 0x19433)
    goto label_1000_0EB9_10EB9;
    label_1000_9436_19436:
    // TEST byte ptr [0x11c9],0x3 (1000_9436 / 0x19436)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JZ 0x1000:9447 (1000_943B / 0x1943B)
    if(ZeroFlag) {
      goto label_1000_9447_19447;
    }
    // CMP byte ptr [0x11ca],0x0 (1000_943D / 0x1943D)
    Alu.Sub8(UInt8[DS, 0x11CA], 0x0);
    // JNZ 0x1000:9447 (1000_9442 / 0x19442)
    if(!ZeroFlag) {
      goto label_1000_9447_19447;
    }
    // JMP 0x1000:4aad (1000_9444 / 0x19444)
    goto label_1000_4AAD_14AAD;
    label_1000_9447_19447:
    // CMP word ptr [0x479e],0x0 (1000_9447 / 0x19447)
    Alu.Sub16(UInt16[DS, 0x479E], 0x0);
    // JNZ 0x1000:9458 (1000_944C / 0x1944C)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:d2e2 (1000_9458 / 0x19458)
      // Jump converted to entry function call
      return unknown_1000_D2E2_1D2E2(0);
    }
    // PUSH BX (1000_944E / 0x1944E)
    Stack.Push(BX);
    // PUSH DX (1000_944F / 0x1944F)
    Stack.Push(DX);
    // CALL 0x1000:2db1 (1000_9450 / 0x19450)
    NearCall(cs1, 0x9453, unknown_1000_2DB1_12DB1);
    // POP DX (1000_9453 / 0x19453)
    DX = Stack.Pop();
    // POP BX (1000_9454 / 0x19454)
    BX = Stack.Pop();
    // JMP 0x1000:9215 (1000_9455 / 0x19455)
    // Jump converted to entry function call
    return unknown_1000_9215_19215(0);
    label_1000_9458_19458:
    // JMP 0x1000:d2e2 (1000_9458 / 0x19458)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
  }
  
  public Action unknown_1000_945B_1945B(int gotoTarget) {
    label_1000_945B_1945B:
    // CMP word ptr [0x479e],0x0 (1000_945B / 0x1945B)
    Alu.Sub16(UInt16[DS, 0x479E], 0x0);
    // JNZ 0x1000:9468 (1000_9460 / 0x19460)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_9468_19468(0);
    }
    // MOV AX,[0x47c4] (1000_9462 / 0x19462)
    AX = UInt16[DS, 0x47C4];
    // JMP 0x1000:93aa (1000_9465 / 0x19465)
    // Jump converted to non entry function call
    return unknown_1000_9215_19215(0x193AA - cs1 * 0x10);
  }
  
  public Action unknown_1000_9468_19468(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9468: goto label_1000_9468_19468;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9468_19468:
    // CALL 0x1000:d41b (1000_9468 / 0x19468)
    NearCall(cs1, 0x946B, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1ffe (1000_946B / 0x1946B)
    Alu.Sub16(BP, 0x1FFE);
    // JNZ 0x1000:9472 (1000_946F / 0x1946F)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_9215_19215(0x19472 - cs1 * 0x10);
    }
    // RET  (1000_9471 / 0x19471)
    return NearRet();
  }
  
  public Action unknown_1000_94F3_194F3(int gotoTarget) {
    label_1000_94F3_194F3:
    // CMP word ptr [0x47c4],0x10 (1000_94F3 / 0x194F3)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x10);
    // JNC 0x1000:9532 (1000_94F8 / 0x194F8)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9532 / 0x19532)
      return NearRet();
    }
    // PUSH SI (1000_94FA / 0x194FA)
    Stack.Push(SI);
    // MOV SI,word ptr [0x47a2] (1000_94FB / 0x194FB)
    SI = UInt16[DS, 0x47A2];
    // MOV AL,byte ptr [SI + 0xf] (1000_94FF / 0x194FF)
    AL = UInt8[DS, (ushort)(SI + 0xF)];
    // MOV [0x18],AL (1000_9502 / 0x19502)
    UInt8[DS, 0x18] = AL;
    // TEST AL,0x40 (1000_9505 / 0x19505)
    Alu.And8(AL, 0x40);
    // MOV AX,word ptr [SI + 0x8] (1000_9507 / 0x19507)
    AX = UInt16[DS, (ushort)(SI + 0x8)];
    // JNZ 0x1000:950f (1000_950A / 0x1950A)
    if(!ZeroFlag) {
      goto label_1000_950F_1950F;
    }
    // MOV AX,word ptr [SI + 0xa] (1000_950C / 0x1950C)
    AX = UInt16[DS, (ushort)(SI + 0xA)];
    label_1000_950F_1950F:
    // SUB AX,word ptr [0x2] (1000_950F / 0x1950F)
    // AX -= UInt16[DS, 0x2];
    AX = Alu.Sub16(AX, UInt16[DS, 0x2]);
    // NEG AX (1000_9513 / 0x19513)
    AX = Alu.Sub16(0, AX);
    // MOV [0x16],AX (1000_9515 / 0x19515)
    UInt16[DS, 0x16] = AX;
    // POP SI (1000_9518 / 0x19518)
    SI = Stack.Pop();
    // CMP byte ptr [0x2a],0x64 (1000_9519 / 0x19519)
    Alu.Sub8(UInt8[DS, 0x2A], 0x64);
    // JNC 0x1000:9532 (1000_951E / 0x1951E)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9532 / 0x19532)
      return NearRet();
    }
    // CMP word ptr [0x47c4],0x9 (1000_9520 / 0x19520)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x9);
    // JNC 0x1000:9532 (1000_9525 / 0x19525)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9532 / 0x19532)
      return NearRet();
    }
    // MOV DI,word ptr [0x11db] (1000_9527 / 0x19527)
    DI = UInt16[DS, 0x11DB];
    // OR DI,DI (1000_952B / 0x1952B)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:9532 (1000_952D / 0x1952D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9532 / 0x19532)
      return NearRet();
    }
    // CALL 0x1000:2e98 (1000_952F / 0x1952F)
    NearCall(cs1, 0x9532, unknown_1000_2E98_12E98);
    label_1000_9532_19532:
    // RET  (1000_9532 / 0x19532)
    return NearRet();
  }
  
  public Action unknown_1000_9556_19556(int gotoTarget) {
    label_1000_9556_19556:
    // AND byte ptr [SI + 0xf],0xbf (1000_9556 / 0x19556)
    // UInt8[DS, (ushort)(SI + 0xF)] &= 0xBF;
    UInt8[DS, (ushort)(SI + 0xF)] = Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0xBF);
    // MOV BX,0x2 (1000_955A / 0x1955A)
    BX = 0x2;
    // CALL 0x1000:956d (1000_955D / 0x1955D)
    NearCall(cs1, 0x9560, unknown_1000_956D_1956D);
    // MOV CL,byte ptr [SI + 0xe] (1000_9560 / 0x19560)
    CL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV AX,0xfffe (1000_9563 / 0x19563)
    AX = 0xFFFE;
    // ROL AX,CL (1000_9566 / 0x19566)
    AX = Alu.Rol16(AX, CL);
    // AND word ptr [0x10],AX (1000_9568 / 0x19568)
    // UInt16[DS, 0x10] &= AX;
    UInt16[DS, 0x10] = Alu.And16(UInt16[DS, 0x10], AX);
    label_1000_956C_1956C:
    // RET  (1000_956C / 0x1956C)
    return NearRet();
  }
  
  public Action unknown_1000_956D_1956D(int gotoTarget) {
    label_1000_956D_1956D:
    // MOV BP,BX (1000_956D / 0x1956D)
    BP = BX;
    // XOR BP,0x2 (1000_956F / 0x1956F)
    // BP ^= 0x2;
    BP = Alu.Xor16(BP, 0x2);
    // MOV AX,[0x2] (1000_9572 / 0x19572)
    AX = UInt16[DS, 0x2];
    // SUB AX,word ptr [BP + SI + 0x8] (1000_9575 / 0x19575)
    // AX -= UInt16[SS, (ushort)(BP + SI + 0x8)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + SI + 0x8)]);
    // CMP AX,0x2 (1000_9578 / 0x19578)
    Alu.Sub16(AX, 0x2);
    // JC 0x1000:9583 (1000_957B / 0x1957B)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_9583 / 0x19583)
      return NearRet();
    }
    // MOV AX,[0x2] (1000_957D / 0x1957D)
    AX = UInt16[DS, 0x2];
    // MOV word ptr [BX + SI + 0x8],AX (1000_9580 / 0x19580)
    UInt16[DS, (ushort)(BX + SI + 0x8)] = AX;
    label_1000_9583_19583:
    // RET  (1000_9583 / 0x19583)
    return NearRet();
  }
  
  public Action unknown_1000_9655_19655(int gotoTarget) {
    switch(gotoTarget) {
      case 0x961A: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_961A_1961A:
    // RET  (1000_961A / 0x1961A)
    return NearRet();
    entry:
    label_1000_9655_19655:
    // MOV CL,byte ptr [SI + 0xe] (1000_9655 / 0x19655)
    CL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV DI,0x1153 (1000_9658 / 0x19658)
    DI = 0x1153;
    // MOV AL,0xff (1000_965B / 0x1965B)
    AL = 0xFF;
    // CMP byte ptr [DI],CL (1000_965D / 0x1965D)
    Alu.Sub8(UInt8[DS, DI], CL);
    // JZ 0x1000:9669 (1000_965F / 0x1965F)
    if(ZeroFlag) {
      goto label_1000_9669_19669;
    }
    // DEC DI (1000_9661 / 0x19661)
    DI = Alu.Dec16(DI);
    // CMP byte ptr [DI],CL (1000_9662 / 0x19662)
    Alu.Sub8(UInt8[DS, DI], CL);
    // JNZ 0x1000:961a (1000_9664 / 0x19664)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_961A / 0x1961A)
      return NearRet();
    }
    // XCHG byte ptr [DI + 0x1],AL (1000_9666 / 0x19666)
    byte tmp_1000_9666 = UInt8[DS, (ushort)(DI + 0x1)];
    UInt8[DS, (ushort)(DI + 0x1)] = AL;
    AL = tmp_1000_9666;
    label_1000_9669_19669:
    // MOV byte ptr [DI],AL (1000_9669 / 0x19669)
    UInt8[DS, DI] = AL;
    // MOV byte ptr [DI + 0x10d0],0x0 (1000_966B / 0x1966B)
    UInt8[DS, (ushort)(DI + 0x10D0)] = 0x0;
    // JMP 0x1000:d763 (1000_9670 / 0x19670)
    // Jump converted to entry function call
    return unknown_1000_D763_1D763(0);
  }
  
  public Action unknown_1000_9673_19673(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9673: goto label_1000_9673_19673;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9673_19673:
    // MOV CL,byte ptr [SI + 0xe] (1000_9673 / 0x19673)
    CL = UInt8[DS, (ushort)(SI + 0xE)];
    // MOV DI,0x1152 (1000_9676 / 0x19676)
    DI = 0x1152;
    // CMP byte ptr [DI],CL (1000_9679 / 0x19679)
    Alu.Sub8(UInt8[DS, DI], CL);
    // JZ 0x1000:961a (1000_967B / 0x1967B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_961A / 0x1961A)
      return NearRet();
    }
    // CMP byte ptr [DI],0xff (1000_967D / 0x1967D)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JZ 0x1000:96ab (1000_9680 / 0x19680)
    if(ZeroFlag) {
      goto label_1000_96AB_196AB;
    }
    // INC DI (1000_9682 / 0x19682)
    DI = Alu.Inc16(DI);
    // CMP byte ptr [DI],CL (1000_9683 / 0x19683)
    Alu.Sub8(UInt8[DS, DI], CL);
    // JZ 0x1000:961a (1000_9685 / 0x19685)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_961A / 0x1961A)
      return NearRet();
    }
    // CMP byte ptr [DI],0xff (1000_9687 / 0x19687)
    Alu.Sub8(UInt8[DS, DI], 0xFF);
    // JZ 0x1000:96ab (1000_968A / 0x1968A)
    if(ZeroFlag) {
      goto label_1000_96AB_196AB;
    }
    // DEC DI (1000_968C / 0x1968C)
    DI = Alu.Dec16(DI);
    // PUSH CX (1000_968D / 0x1968D)
    Stack.Push(CX);
    // MOV CL,byte ptr [DI] (1000_968E / 0x1968E)
    CL = UInt8[DS, DI];
    // MOV AL,0x10 (1000_9690 / 0x19690)
    AL = 0x10;
    // MUL CL (1000_9692 / 0x19692)
    Cpu.Mul8(CL);
    // ADD AX,0xfd8 (1000_9694 / 0x19694)
    // AX += 0xFD8;
    AX = Alu.Add16(AX, 0xFD8);
    // MOV SI,AX (1000_9697 / 0x19697)
    SI = AX;
    // MOV AL,byte ptr [SI + 0xe] (1000_9699 / 0x19699)
    AL = UInt8[DS, (ushort)(SI + 0xE)];
    // ADD AL,0x64 (1000_969C / 0x1969C)
    // AL += 0x64;
    AL = Alu.Add8(AL, 0x64);
    // MOV [0x23],AL (1000_969E / 0x1969E)
    UInt8[DS, 0x23] = AL;
    // CALL 0x1000:9556 (1000_96A1 / 0x196A1)
    NearCall(cs1, 0x96A4, unknown_1000_9556_19556);
    // POP CX (1000_96A4 / 0x196A4)
    CX = Stack.Pop();
    // INC DI (1000_96A5 / 0x196A5)
    DI = Alu.Inc16(DI);
    // MOV AL,byte ptr [DI] (1000_96A6 / 0x196A6)
    AL = UInt8[DS, DI];
    // MOV byte ptr [DI + -0x1],AL (1000_96A8 / 0x196A8)
    UInt8[DS, (ushort)(DI - 0x1)] = AL;
    label_1000_96AB_196AB:
    // MOV byte ptr [DI],CL (1000_96AB / 0x196AB)
    UInt8[DS, DI] = CL;
    // MOV byte ptr [DI + 0x10d0],0x10 (1000_96AD / 0x196AD)
    UInt8[DS, (ushort)(DI + 0x10D0)] = 0x10;
    // JMP 0x1000:d763 (1000_96B2 / 0x196B2)
    // Jump converted to entry function call
    return unknown_1000_D763_1D763(0);
  }
  
  public Action unknown_1000_96B5_196B5(int gotoTarget) {
    label_1000_96B5_196B5:
    // PUSH word ptr [0x47c4] (1000_96B5 / 0x196B5)
    Stack.Push(UInt16[DS, 0x47C4]);
    // PUSH word ptr [0x47c2] (1000_96B9 / 0x196B9)
    Stack.Push(UInt16[DS, 0x47C2]);
    // MOV word ptr [0x47c4],0x10 (1000_96BD / 0x196BD)
    UInt16[DS, 0x47C4] = 0x10;
    // MOV byte ptr [0x47c2],0x80 (1000_96C3 / 0x196C3)
    UInt8[DS, 0x47C2] = 0x80;
    // MOV SI,word ptr [0xab84] (1000_96C8 / 0x196C8)
    SI = UInt16[DS, 0xAB84];
    // CALL 0x1000:9f9e (1000_96CC / 0x196CC)
    NearCall(cs1, 0x96CF, unknown_1000_9F9E_19F9E);
    // POP word ptr [0x47c2] (1000_96CF / 0x196CF)
    UInt16[DS, 0x47C2] = Stack.Pop();
    // POP word ptr [0x47c4] (1000_96D3 / 0x196D3)
    UInt16[DS, 0x47C4] = Stack.Pop();
    // RET  (1000_96D7 / 0x196D7)
    return NearRet();
  }
  
  public Action unknown_1000_96D8_196D8(int gotoTarget) {
    label_1000_96D8_196D8:
    // MOV [0x47c4],AX (1000_96D8 / 0x196D8)
    UInt16[DS, 0x47C4] = AX;
    // INC byte ptr [0x47dc] (1000_96DB / 0x196DB)
    UInt8[DS, 0x47DC] = Alu.Inc8(UInt8[DS, 0x47DC]);
    // MOV AX,0x10 (1000_96DF / 0x196DF)
    AX = 0x10;
    // CALL 0x1000:9702 (1000_96E2 / 0x196E2)
    NearCall(cs1, 0x96E5, unknown_1000_9702_19702);
    // MOV word ptr [0x1bea],0x0 (1000_96E5 / 0x196E5)
    UInt16[DS, 0x1BEA] = 0x0;
    // MOV byte ptr [0x47dc],0x0 (1000_96EB / 0x196EB)
    UInt8[DS, 0x47DC] = 0x0;
    // RET  (1000_96F0 / 0x196F0)
    return NearRet();
  }
  
  public Action unknown_1000_96F1_196F1(int gotoTarget) {
    label_1000_96F1_196F1:
    // MOV [0x47c4],AX (1000_96F1 / 0x196F1)
    UInt16[DS, 0x47C4] = AX;
    // CMP AL,0xe (1000_96F4 / 0x196F4)
    Alu.Sub8(AL, 0xE);
    // JNZ 0x1000:9702 (1000_96F6 / 0x196F6)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_9702_19702(0);
    }
    // MOV SI,word ptr [0x4756] (1000_96F8 / 0x196F8)
    SI = UInt16[DS, 0x4756];
    // CALL 0x1000:31f6 (1000_96FC / 0x196FC)
    NearCall(cs1, 0x96FF, unknown_1000_31F6_131F6);
    // MOV AX,0xe (1000_96FF / 0x196FF)
    AX = 0xE;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9702_19702(0);
  }
  
  public Action unknown_1000_9702_19702(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9702: goto label_1000_9702_19702;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9702_19702:
    // SHL AX,1 (1000_9702 / 0x19702)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_9704 / 0x19704)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_9706 / 0x19706)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // OR AX,0x4 (1000_9708 / 0x19708)
    // AX |= 0x4;
    AX = Alu.Or16(AX, 0x4);
    // MOV SI,AX (1000_970B / 0x1970B)
    SI = AX;
    // SHL SI,1 (1000_970D / 0x1970D)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr [SI + 0xaa76] (1000_970F / 0x1970F)
    SI = UInt16[DS, (ushort)(SI + 0xAA76)];
    // CALL 0x1000:9f40 (1000_9713 / 0x19713)
    NearCall(cs1, 0x9716, unknown_1000_9F40_19F40);
    // JMP 0x1000:9f8b (1000_9716 / 0x19716)
    // Jump converted to entry function call
    return unknown_1000_9F8B_19F8B(0);
  }
  
  public Action unknown_1000_9719_19719(int gotoTarget) {
    label_1000_9719_19719:
    // CMP byte ptr [0x4c],0x0 (1000_9719 / 0x19719)
    Alu.Sub8(UInt8[DS, 0x4C], 0x0);
    // JS 0x1000:972c (1000_971E / 0x1971E)
    if(SignFlag) {
      goto label_1000_972C_1972C;
    }
    // MOV SI,word ptr [0x46ef] (1000_9720 / 0x19720)
    SI = UInt16[DS, 0x46EF];
    // MOV DI,word ptr [SI + 0x4] (1000_9724 / 0x19724)
    DI = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AL,0xf (1000_9727 / 0x19727)
    AL = 0xF;
    // CALL 0x1000:2a51 (1000_9729 / 0x19729)
    NearCall(cs1, 0x972C, unknown_1000_2A51_12A51);
    label_1000_972C_1972C:
    // CALL 0x1000:9f82 (1000_972C / 0x1972C)
    NearCall(cs1, 0x972F, unknown_1000_9F82_19F82);
    // MOV word ptr [0x47c4],0xf (1000_972F / 0x1972F)
    UInt16[DS, 0x47C4] = 0xF;
    // MOV word ptr [0x47a2],0x10c8 (1000_9735 / 0x19735)
    UInt16[DS, 0x47A2] = 0x10C8;
    // CALL 0x1000:a1c4 (1000_973B / 0x1973B)
    NearCall(cs1, 0x973E, unknown_1000_A1C4_1A1C4);
    // MOV SI,word ptr [0x47ba] (1000_973E / 0x1973E)
    SI = UInt16[DS, 0x47BA];
    // INC SI (1000_9742 / 0x19742)
    SI = Alu.Inc16(SI);
    // JZ 0x1000:9748 (1000_9743 / 0x19743)
    if(ZeroFlag) {
      goto label_1000_9748_19748;
    }
    // DEC SI (1000_9745 / 0x19745)
    SI = Alu.Dec16(SI);
    // JNZ 0x1000:974c (1000_9746 / 0x19746)
    if(!ZeroFlag) {
      goto label_1000_974C_1974C;
    }
    label_1000_9748_19748:
    // MOV SI,word ptr [0xab6a] (1000_9748 / 0x19748)
    SI = UInt16[DS, 0xAB6A];
    label_1000_974C_1974C:
    // MOV byte ptr [0x47c2],0x20 (1000_974C / 0x1974C)
    UInt8[DS, 0x47C2] = 0x20;
    // CALL 0x1000:9f9e (1000_9751 / 0x19751)
    NearCall(cs1, 0x9754, unknown_1000_9F9E_19F9E);
    // MOV word ptr [0x47ba],SI (1000_9754 / 0x19754)
    UInt16[DS, 0x47BA] = SI;
    // JNC 0x1000:9760 (1000_9758 / 0x19758)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9760 / 0x19760)
      return NearRet();
    }
    // MOV word ptr [0x47ba],0x0 (1000_975A / 0x1975A)
    UInt16[DS, 0x47BA] = 0x0;
    label_1000_9760_19760:
    // RET  (1000_9760 / 0x19760)
    return NearRet();
  }
  
  public Action unknown_1000_9761_19761(int gotoTarget) {
    label_1000_9761_19761:
    // MOV [0x47c4],AX (1000_9761 / 0x19761)
    UInt16[DS, 0x47C4] = AX;
    // CMP AL,0xe (1000_9764 / 0x19764)
    Alu.Sub8(AL, 0xE);
    // JNZ 0x1000:9772 (1000_9766 / 0x19766)
    if(!ZeroFlag) {
      goto label_1000_9772_19772;
    }
    // MOV SI,word ptr [0x4756] (1000_9768 / 0x19768)
    SI = UInt16[DS, 0x4756];
    // CALL 0x1000:31f6 (1000_976C / 0x1976C)
    NearCall(cs1, 0x976F, unknown_1000_31F6_131F6);
    // MOV AX,0xe (1000_976F / 0x1976F)
    AX = 0xE;
    label_1000_9772_19772:
    // SHL AX,1 (1000_9772 / 0x19772)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_9774 / 0x19774)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_9776 / 0x19776)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // OR AX,0x7 (1000_9778 / 0x19778)
    // AX |= 0x7;
    AX = Alu.Or16(AX, 0x7);
    // MOV SI,AX (1000_977B / 0x1977B)
    SI = AX;
    // SHL SI,1 (1000_977D / 0x1977D)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr [SI + 0xaa76] (1000_977F / 0x1977F)
    SI = UInt16[DS, (ushort)(SI + 0xAA76)];
    // CALL 0x1000:9f40 (1000_9783 / 0x19783)
    NearCall(cs1, 0x9786, unknown_1000_9F40_19F40);
    // MOV byte ptr [0x47c2],0x80 (1000_9786 / 0x19786)
    UInt8[DS, 0x47C2] = 0x80;
    // JMP 0x1000:9f9e (1000_978B / 0x1978B)
    // Jump converted to entry function call
    return unknown_1000_9F9E_19F9E(0);
  }
  
  public Action unknown_1000_978E_1978E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x978E: goto label_1000_978E_1978E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_978E_1978E:
    // CALL 0x1000:4aca (1000_978E / 0x1978E)
    NearCall(cs1, 0x9791, SetUnknown11CATo1_1000_4ACA_14ACA);
    // MOV AX,[0x47c4] (1000_9791 / 0x19791)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0xffff (1000_9794 / 0x19794)
    Alu.Sub16(AX, 0xFFFF);
    // JZ 0x1000:97ce (1000_9797 / 0x19797)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_97CE / 0x197CE)
      return NearRet();
    }
    // CALL 0x1000:91a0 (1000_9799 / 0x19799)
    NearCall(cs1, 0x979C, unknown_1000_91A0_191A0);
    // CALL 0x1000:9908 (1000_979C / 0x1979C)
    NearCall(cs1, 0x979F, unknown_1000_9908_19908);
    // CMP word ptr [0x479e],0x0 (1000_979F / 0x1979F)
    Alu.Sub16(UInt16[DS, 0x479E], 0x0);
    // JZ 0x1000:97ac (1000_97A4 / 0x197A4)
    if(ZeroFlag) {
      goto label_1000_97AC_197AC;
    }
    // MOV SI,0x1be2 (1000_97A6 / 0x197A6)
    SI = 0x1BE2;
    // CALL 0x1000:c477 (1000_97A9 / 0x197A9)
    NearCall(cs1, 0x97AC, gfx_copy_rect_at_si_ida_1000_C477_1C477);
    label_1000_97AC_197AC:
    // MOV SI,word ptr [0x47c8] (1000_97AC / 0x197AC)
    SI = UInt16[DS, 0x47C8];
    // OR SI,SI (1000_97B0 / 0x197B0)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:97c8 (1000_97B2 / 0x197B2)
    if(ZeroFlag) {
      goto label_1000_97C8_197C8;
    }
    // MOV word ptr [0x4540],0x0 (1000_97B4 / 0x197B4)
    UInt16[DS, 0x4540] = 0x0;
    // CALL 0x1000:9bac (1000_97BA / 0x197BA)
    NearCall(cs1, 0x97BD, unknown_1000_9BAC_19BAC);
    // CMP word ptr [0x479e],0x223c (1000_97BD / 0x197BD)
    Alu.Sub16(UInt16[DS, 0x479E], 0x223C);
    // JNZ 0x1000:97c8 (1000_97C3 / 0x197C3)
    if(!ZeroFlag) {
      goto label_1000_97C8_197C8;
    }
    // CALL 0x1000:9025 (1000_97C5 / 0x197C5)
    NearCall(cs1, 0x97C8, unknown_1000_9025_19025);
    label_1000_97C8_197C8:
    // CALL 0x1000:c0f4 (1000_97C8 / 0x197C8)
    NearCall(cs1, 0x97CB, unknown_1000_C0F4_1C0F4);
    // JMP 0x1000:c4dd (1000_97CB / 0x197CB)
    // Jump converted to entry function call
    return unknown_1000_C4DD_1C4DD(0);
    label_1000_97CE_197CE:
    // RET  (1000_97CE / 0x197CE)
    return NearRet();
  }
  
  public Action unknown_1000_97CF_197CF(int gotoTarget) {
    label_1000_97CF_197CF:
    // CALL 0x1000:a7a5 (1000_97CF / 0x197CF)
    NearCall(cs1, 0x97D2, unknown_1000_A7A5_1A7A5);
    // CMP word ptr [0x47c4],-0x1 (1000_97D2 / 0x197D2)
    Alu.Sub16(UInt16[DS, 0x47C4], 0xFFFF);
    // JZ 0x1000:97ce (1000_97D7 / 0x197D7)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_97CE / 0x197CE)
      return NearRet();
    }
    // MOV SI,word ptr [0x47a2] (1000_97D9 / 0x197D9)
    SI = UInt16[DS, 0x47A2];
    // OR byte ptr [SI + 0xf],0x20 (1000_97DD / 0x197DD)
    // UInt8[DS, (ushort)(SI + 0xF)] |= 0x20;
    UInt8[DS, (ushort)(SI + 0xF)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0xF)], 0x20);
    // AND byte ptr [SI + 0xf],0xfb (1000_97E1 / 0x197E1)
    // UInt8[DS, (ushort)(SI + 0xF)] &= 0xFB;
    UInt8[DS, (ushort)(SI + 0xF)] = Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0xFB);
    // MOV word ptr [0x47e1],0x0 (1000_97E5 / 0x197E5)
    UInt16[DS, 0x47E1] = 0x0;
    // CMP byte ptr [0x11c9],0x0 (1000_97EB / 0x197EB)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JZ 0x1000:980c (1000_97F0 / 0x197F0)
    if(ZeroFlag) {
      goto label_1000_980C_1980C;
    }
    // CALL 0x1000:8c8a (1000_97F2 / 0x197F2)
    NearCall(cs1, 0x97F5, unknown_1000_8C8A_18C8A);
    // MOV BP,0x98b2 (1000_97F5 / 0x197F5)
    BP = 0x98B2;
    // CALL 0x1000:c097 (1000_97F8 / 0x197F8)
    NearCall(cs1, 0x97FB, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // XOR AL,AL (1000_97FB / 0x197FB)
    AL = 0;
    // XCHG byte ptr [0x11ca],AL (1000_97FD / 0x197FD)
    byte tmp_1000_97FD = UInt8[DS, 0x11CA];
    UInt8[DS, 0x11CA] = AL;
    AL = tmp_1000_97FD;
    // PUSH AX (1000_9801 / 0x19801)
    Stack.Push(AX);
    // CALL 0x1000:2ffb (1000_9802 / 0x19802)
    NearCall(cs1, 0x9805, unknown_1000_2FFB_12FFB);
    // POP AX (1000_9805 / 0x19805)
    AX = Stack.Pop();
    // MOV [0x11ca],AL (1000_9806 / 0x19806)
    UInt8[DS, 0x11CA] = AL;
    // JMP 0x1000:4abe (1000_9809 / 0x19809)
    // Jump converted to entry function call
    return unknown_1000_4ABE_14ABE(0);
    label_1000_980C_1980C:
    // CALL 0x1000:8c8a (1000_980C / 0x1980C)
    NearCall(cs1, 0x980F, unknown_1000_8C8A_18C8A);
    // CMP byte ptr [0x47a4],0x0 (1000_980F / 0x1980F)
    Alu.Sub8(UInt8[DS, 0x47A4], 0x0);
    // MOV SI,word ptr [0x47a2] (1000_9814 / 0x19814)
    SI = UInt16[DS, 0x47A2];
    // JS 0x1000:9849 (1000_9818 / 0x19818)
    if(SignFlag) {
      goto label_1000_9849_19849;
    }
    // CMP byte ptr [0x2b],0x0 (1000_981A / 0x1981A)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JZ 0x1000:9825 (1000_981F / 0x1981F)
    if(ZeroFlag) {
      goto label_1000_9825_19825;
    }
    // MOV AX,0x9840 (1000_9821 / 0x19821)
    AX = 0x9840;
    // PUSH AX (1000_9824 / 0x19824)
    Stack.Push(AX);
    label_1000_9825_19825:
    // TEST byte ptr [SI + 0xf],0x40 (1000_9825 / 0x19825)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JZ 0x1000:982e (1000_9829 / 0x19829)
    if(ZeroFlag) {
      goto label_1000_982E_1982E;
    }
    // JMP 0x1000:9673 (1000_982B / 0x1982B)
    // Jump converted to entry function call
    return unknown_1000_9673_19673(0);
    label_1000_982E_1982E:
    // CALL 0x1000:9655 (1000_982E / 0x1982E)
    NearCall(cs1, 0x9831, unknown_1000_9655_19655);
    // CMP byte ptr [0x2b],0x0 (1000_9831 / 0x19831)
    Alu.Sub8(UInt8[DS, 0x2B], 0x0);
    // JNZ 0x1000:983f (1000_9836 / 0x19836)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_983F / 0x1983F)
      return NearRet();
    }
    // TEST byte ptr [0x47a4],0x1 (1000_9838 / 0x19838)
    Alu.And8(UInt8[DS, 0x47A4], 0x1);
    // JZ 0x1000:9879 (1000_983D / 0x1983D)
    if(ZeroFlag) {
      goto label_1000_9879_19879;
    }
    label_1000_983F_1983F:
    // RET  (1000_983F / 0x1983F)
    return NearRet();
    label_1000_9849_19849:
    // MOV word ptr [0x1c06],0x0 (1000_9849 / 0x19849)
    UInt16[DS, 0x1C06] = 0x0;
    // TEST byte ptr [SI + 0xf],0x40 (1000_984F / 0x1984F)
    Alu.And8(UInt8[DS, (ushort)(SI + 0xF)], 0x40);
    // JZ 0x1000:9858 (1000_9853 / 0x19853)
    if(ZeroFlag) {
      goto label_1000_9858_19858;
    }
    // CALL 0x1000:9673 (1000_9855 / 0x19855)
    NearCall(cs1, 0x9858, unknown_1000_9673_19673);
    label_1000_9858_19858:
    // XOR AX,AX (1000_9858 / 0x19858)
    AX = 0;
    // MOV [0x4540],AX (1000_985A / 0x1985A)
    UInt16[DS, 0x4540] = AX;
    // MOV [0x479e],AX (1000_985D / 0x1985D)
    UInt16[DS, 0x479E] = AX;
    // AND byte ptr [0x47d1],0x3f (1000_9860 / 0x19860)
    // UInt8[DS, 0x47D1] &= 0x3F;
    UInt8[DS, 0x47D1] = Alu.And8(UInt8[DS, 0x47D1], 0x3F);
    // MOV [0x47c8],AX (1000_9865 / 0x19865)
    UInt16[DS, 0x47C8] = AX;
    // AND byte ptr [0x47a4],0x7f (1000_9868 / 0x19868)
    // UInt8[DS, 0x47A4] &= 0x7F;
    UInt8[DS, 0x47A4] = Alu.And8(UInt8[DS, 0x47A4], 0x7F);
    // CALL 0x1000:9b8b (1000_986D / 0x1986D)
    NearCall(cs1, 0x9870, unknown_1000_9B8B_19B8B);
    // MOV AL,[0x23] (1000_9870 / 0x19870)
    AL = UInt8[DS, 0x23];
    // SUB AL,0x64 (1000_9873 / 0x19873)
    // AL -= 0x64;
    AL = Alu.Sub8(AL, 0x64);
    // CMP AL,0x10 (1000_9875 / 0x19875)
    Alu.Sub8(AL, 0x10);
    // JC 0x1000:9898 (1000_9877 / 0x19877)
    if(CarryFlag) {
      goto label_1000_9898_19898;
    }
    label_1000_9879_19879:
    // CALL 0x1000:2efb (1000_9879 / 0x19879)
    NearCall(cs1, 0x987C, unknown_1000_2EFB_12EFB);
    // CMP byte ptr [0x11c9],0x0 (1000_987C / 0x1987C)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:9886 (1000_9881 / 0x19881)
    if(!ZeroFlag) {
      goto label_1000_9886_19886;
    }
    // CALL 0x1000:3090 (1000_9883 / 0x19883)
    NearCall(cs1, 0x9886, unknown_1000_3090_13090);
    label_1000_9886_19886:
    // CALL 0x1000:37b2 (1000_9886 / 0x19886)
    NearCall(cs1, 0x9889, unknown_1000_37B2_137B2);
    // CALL 0x1000:c412 (1000_9889 / 0x19889)
    NearCall(cs1, 0x988C, unknown_1000_C412_1C412);
    // CALL 0x1000:c0f4 (1000_988C / 0x1988C)
    NearCall(cs1, 0x988F, unknown_1000_C0F4_1C0F4);
    // CALL 0x1000:1834 (1000_988F / 0x1988F)
    NearCall(cs1, 0x9892, unknown_1000_1834_11834);
    // CALL 0x1000:c4dd (1000_9892 / 0x19892)
    NearCall(cs1, 0x9895, unknown_1000_C4DD_1C4DD);
    // JMP 0x1000:17e6 (1000_9895 / 0x19895)
    // Jump converted to entry function call
    return unknown_1000_17E6_117E6(0);
    label_1000_9898_19898:
    // MOV BP,0x37b2 (1000_9898 / 0x19898)
    BP = 0x37B2;
    // CALL 0x1000:c097 (1000_989B / 0x1989B)
    NearCall(cs1, 0x989E, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // CALL 0x1000:36d3 (1000_989E / 0x1989E)
    NearCall(cs1, 0x98A1, unknown_1000_36D3_136D3);
    // MOV AX,0xc8 (1000_98A1 / 0x198A1)
    AX = 0xC8;
    // CALL 0x1000:e3a0 (1000_98A4 / 0x198A4)
    NearCall(cs1, 0x98A7, unknown_1000_E3A0_1E3A0);
    // MOV word ptr [0x1c06],0x0 (1000_98A7 / 0x198A7)
    UInt16[DS, 0x1C06] = 0x0;
    // JMP 0x1000:9858 (1000_98AD / 0x198AD)
    goto label_1000_9858_19858;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x198AF");
  }
  
  public Action unknown_1000_98B2_198B2(int gotoTarget) {
    label_1000_98B2_198B2:
    // CMP byte ptr [0x47c3],0x0 (1000_98B2 / 0x198B2)
    Alu.Sub8(UInt8[DS, 0x47C3], 0x0);
    // JNZ 0x1000:98e5 (1000_98B7 / 0x198B7)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_98E5 / 0x198E5)
      return NearRet();
    }
    // XOR AX,AX (1000_98B9 / 0x198B9)
    AX = 0;
    // MOV [0x4540],AX (1000_98BB / 0x198BB)
    UInt16[DS, 0x4540] = AX;
    // AND byte ptr [0x47d1],0x3f (1000_98BE / 0x198BE)
    // UInt8[DS, 0x47D1] &= 0x3F;
    UInt8[DS, 0x47D1] = Alu.And8(UInt8[DS, 0x47D1], 0x3F);
    // XCHG word ptr [0x47c8],AX (1000_98C3 / 0x198C3)
    ushort tmp_1000_98C3 = UInt16[DS, 0x47C8];
    UInt16[DS, 0x47C8] = AX;
    AX = tmp_1000_98C3;
    // OR AX,AX (1000_98C7 / 0x198C7)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:98e5 (1000_98C9 / 0x198C9)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_98E5 / 0x198E5)
      return NearRet();
    }
    // MOV SI,0x1bf0 (1000_98CB / 0x198CB)
    SI = 0x1BF0;
    // MOV word ptr [SI + 0x8],0x0 (1000_98CE / 0x198CE)
    UInt16[DS, (ushort)(SI + 0x8)] = 0x0;
    // MOV word ptr [0x1c06],0x0 (1000_98D3 / 0x198D3)
    UInt16[DS, 0x1C06] = 0x0;
    // CALL 0x1000:c446 (1000_98D9 / 0x198D9)
    NearCall(cs1, 0x98DC, unknown_1000_C446_1C446);
    // MOV SI,0x1bf0 (1000_98DC / 0x198DC)
    SI = 0x1BF0;
    // CALL 0x1000:c4f0 (1000_98DF / 0x198DF)
    NearCall(cs1, 0x98E2, rect_at_si_to_regs_ida_1000_C4F0_1C4F0);
    // JMP 0x1000:9b8b (1000_98E2 / 0x198E2)
    // Jump converted to entry function call
    return unknown_1000_9B8B_19B8B(0);
    label_1000_98E5_198E5:
    // RET  (1000_98E5 / 0x198E5)
    return NearRet();
  }
  
  public Action unknown_1000_98E6_198E6(int gotoTarget) {
    label_1000_98E6_198E6:
    // CALL 0x1000:98f5 (1000_98E6 / 0x198E6)
    NearCall(cs1, 0x98E9, ClearUnknownValuesAndAX_1000_98F5_198F5);
    // MOV [0x47c8],AX (1000_98E9 / 0x198E9)
    UInt16[DS, 0x47C8] = AX;
    // MOV [0x47aa],AX (1000_98EC / 0x198EC)
    UInt16[DS, 0x47AA] = AX;
    // MOV [0x479e],AX (1000_98EF / 0x198EF)
    UInt16[DS, 0x479E] = AX;
    // JMP 0x1000:9b8b (1000_98F2 / 0x198F2)
    // Jump converted to entry function call
    return unknown_1000_9B8B_19B8B(0);
  }
  
  public Action ClearUnknownValuesAndAX_1000_98F5_198F5(int gotoTarget) {
    label_1000_98F5_198F5:
    // XOR AX,AX (1000_98F5 / 0x198F5)
    AX = 0;
    // MOV [0x1c06],AX (1000_98F7 / 0x198F7)
    UInt16[DS, 0x1C06] = AX;
    // MOV [0x1bf8],AX (1000_98FA / 0x198FA)
    UInt16[DS, 0x1BF8] = AX;
    // MOV [0x1bea],AX (1000_98FD / 0x198FD)
    UInt16[DS, 0x1BEA] = AX;
    // RET  (1000_9900 / 0x19900)
    return NearRet();
  }
  
  public Action Set479ETo0_1000_9901_19901(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9901: goto label_1000_9901_19901;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9901_19901:
    // MOV word ptr [0x479e],0x0 (1000_9901 / 0x19901)
    UInt16[DS, 0x479E] = 0x0;
    // RET  (1000_9907 / 0x19907)
    return NearRet();
  }
  
  public Action unknown_1000_9908_19908(int gotoTarget) {
    label_1000_9908_19908:
    // MOV SI,word ptr [0x47ca] (1000_9908 / 0x19908)
    SI = UInt16[DS, 0x47CA];
    // MOV ES,word ptr [0xdbb2] (1000_990C / 0x1990C)
    ES = UInt16[DS, 0xDBB2];
    // CALL 0x1000:994f (1000_9910 / 0x19910)
    NearCall(cs1, 0x9913, unknown_1000_994F_1994F);
    // MOV byte ptr [0x47d1],0xc0 (1000_9913 / 0x19913)
    UInt8[DS, 0x47D1] = 0xC0;
    // MOV AL,[0x478c] (1000_9918 / 0x19918)
    AL = UInt8[DS, 0x478C];
    // XOR AH,AH (1000_991B / 0x1991B)
    AH = 0;
    // SHL AX,1 (1000_991D / 0x1991D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_991F / 0x1991F)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV [0x47ce],AX (1000_9921 / 0x19921)
    UInt16[DS, 0x47CE] = AX;
    // ADD SI,word ptr ES:[BP + SI] (1000_9924 / 0x19924)
    // SI += UInt16[ES, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BP + SI)]);
    // CALL 0x1000:996c (1000_9927 / 0x19927)
    NearCall(cs1, 0x992A, unknown_1000_996C_1996C);
    // MOV word ptr [0x47c8],SI (1000_992A / 0x1992A)
    UInt16[DS, 0x47C8] = SI;
    // XCHG word ptr [0x47c6],SI (1000_992E / 0x1992E)
    ushort tmp_1000_992E = UInt16[DS, 0x47C6];
    UInt16[DS, 0x47C6] = SI;
    SI = tmp_1000_992E;
    // OR SI,SI (1000_9932 / 0x19932)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JNZ 0x1000:994e (1000_9934 / 0x19934)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_994E / 0x1994E)
      return NearRet();
    }
    // CMP byte ptr [0xea],0x0 (1000_9936 / 0x19936)
    Alu.Sub8(UInt8[DS, 0xEA], 0x0);
    // JG 0x1000:994e (1000_993B / 0x1993B)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (1000_994E / 0x1994E)
      return NearRet();
    }
    // MOV AX,[0x47c4] (1000_993D / 0x1993D)
    AX = UInt16[DS, 0x47C4];
    // CALL 0x1000:127c (1000_9940 / 0x19940)
    NearCall(cs1, 0x9943, unknown_1000_127C_1127C);
    // JC 0x1000:994e (1000_9943 / 0x19943)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_994E / 0x1994E)
      return NearRet();
    }
    label_1000_994E_1994E:
    // RET  (1000_994E / 0x1994E)
    return NearRet();
  }
  
  public Action unknown_1000_9945_19945(int gotoTarget) {
    label_1000_9945_19945:
    // MOV SI,0x99be (1000_9945 / 0x19945)
    SI = 0x99BE;
    // MOV BP,0x10 (1000_9948 / 0x19948)
    BP = 0x10;
    // CALL 0x1000:da25 (1000_994B / 0x1994B)
    NearCall(cs1, 0x994E, unknown_1000_DA25_1DA25);
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_9908_19908(0x1994E - cs1 * 0x10);
  }
  
  public Action unknown_1000_994F_1994F(int gotoTarget) {
    label_1000_994F_1994F:
    // MOV AL,[0x47d0] (1000_994F / 0x1994F)
    AL = UInt8[DS, 0x47D0];
    // OR AL,AL (1000_9952 / 0x19952)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:9963 (1000_9954 / 0x19954)
    if(!ZeroFlag) {
      goto label_1000_9963_19963;
    }
    // MOV BX,0x6 (1000_9956 / 0x19956)
    BX = 0x6;
    // CALL 0x1000:e3b7 (1000_9959 / 0x19959)
    NearCall(cs1, 0x995C, unknown_1000_E3B7_1E3B7);
    // MOV BP,AX (1000_995C / 0x1995C)
    BP = AX;
    // ADD BP,word ptr [0xf0] (1000_995E / 0x1995E)
    // BP += UInt16[DS, 0xF0];
    BP = Alu.Add16(BP, UInt16[DS, 0xF0]);
    // RET  (1000_9962 / 0x19962)
    return NearRet();
    label_1000_9963_19963:
    // DEC AL (1000_9963 / 0x19963)
    AL = Alu.Dec8(AL);
    // XOR AH,AH (1000_9965 / 0x19965)
    AH = 0;
    // SHL AX,1 (1000_9967 / 0x19967)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BP,AX (1000_9969 / 0x19969)
    BP = AX;
    // RET  (1000_996B / 0x1996B)
    return NearRet();
  }
  
  public Action unknown_1000_996C_1996C(int gotoTarget) {
    label_1000_996C_1996C:
    // CMP byte ptr [0x47d0],0x0 (1000_996C / 0x1996C)
    Alu.Sub8(UInt8[DS, 0x47D0], 0x0);
    // JZ 0x1000:9981 (1000_9971 / 0x19971)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9981 / 0x19981)
      return NearRet();
    }
    // MOV CX,0x20 (1000_9973 / 0x19973)
    CX = 0x20;
    // PUSH ES (1000_9976 / 0x19976)
    Stack.Push(ES);
    // POP DS (1000_9977 / 0x19977)
    DS = Stack.Pop();
    label_1000_9978_19978:
    // LODSB SI (1000_9978 / 0x19978)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_9979 / 0x19979)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:9978 (1000_997B / 0x1997B)
    if(!ZeroFlag) {
      goto label_1000_9978_19978;
    }
    // LOOP 0x1000:9978 (1000_997D / 0x1997D)
    if(--CX != 0) {
      goto label_1000_9978_19978;
    }
    // PUSH SS (1000_997F / 0x1997F)
    Stack.Push(SS);
    // POP DS (1000_9980 / 0x19980)
    DS = Stack.Pop();
    label_1000_9981_19981:
    // RET  (1000_9981 / 0x19981)
    return NearRet();
  }
  
  public Action unknown_1000_9985_19985(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9982: break;
      case 0: goto entry; break; //
    }
    label_1000_9982_19982:
    // CALL 0x1000:99be (1000_9982 / 0x19982)
    NearCall(cs1, 0x9985, unknown_1000_99BE_199BE);
    entry:
    label_1000_9985_19985:
    // TEST word ptr [0x47ce],0x7 (1000_9985 / 0x19985)
    Alu.And16(UInt16[DS, 0x47CE], 0x7);
    // JNZ 0x1000:9982 (1000_998B / 0x1998B)
    if(!ZeroFlag) {
      goto label_1000_9982_19982;
    }
    // RET  (1000_998D / 0x1998D)
    return NearRet();
  }
  
  public Action unknown_1000_99BE_199BE(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9A1C: goto label_1000_9A1C_19A1C;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_99BE_199BE:
    // CMP byte ptr [0x47c3],0x0 (1000_99BE / 0x199BE)
    Alu.Sub8(UInt8[DS, 0x47C3], 0x0);
    // JZ 0x1000:99da (1000_99C3 / 0x199C3)
    if(ZeroFlag) {
      goto label_1000_99DA_199DA;
    }
    // CALL 0x1000:998e (1000_99C5 / 0x199C5)
    throw FailAsUntested("Could not find a valid function at address 1000_998E / 0x1998E");
    // MOV AX,0x7 (1000_99C8 / 0x199C8)
    AX = 0x7;
    // CALL 0x1000:920f (1000_99CB / 0x199CB)
    NearCall(cs1, 0x99CE, unknown_1000_920F_1920F);
    // CALL 0x1000:99da (1000_99CE / 0x199CE)
    throw FailAsUntested("Could not find a valid function at address 1000_99DA / 0x199DA");
    // CALL 0x1000:998e (1000_99D1 / 0x199D1)
    throw FailAsUntested("Could not find a valid function at address 1000_998E / 0x1998E");
    // MOV AX,0x2d (1000_99D4 / 0x199D4)
    AX = 0x2D;
    // CALL 0x1000:920f (1000_99D7 / 0x199D7)
    NearCall(cs1, 0x99DA, unknown_1000_920F_1920F);
    label_1000_99DA_199DA:
    // CALL 0x1000:9197 (1000_99DA / 0x199DA)
    NearCall(cs1, 0x99DD, unknown_1000_9197_19197);
    // MOV AL,[0x47d1] (1000_99DD / 0x199DD)
    AL = UInt8[DS, 0x47D1];
    // OR AL,AL (1000_99E0 / 0x199E0)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:9a1c (1000_99E2 / 0x199E2)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_9A1C / 0x19A1C)
      return NearRet();
    }
    // TEST AL,0x10 (1000_99E4 / 0x199E4)
    Alu.And8(AL, 0x10);
    // JNZ 0x1000:9a40 (1000_99E6 / 0x199E6)
    if(!ZeroFlag) {
      goto label_1000_9A40_19A40;
    }
    // MOV SI,word ptr [0x47c6] (1000_99E8 / 0x199E8)
    SI = UInt16[DS, 0x47C6];
    // MOV ES,word ptr [0xdbb2] (1000_99EC / 0x199EC)
    ES = UInt16[DS, 0xDBB2];
    label_1000_99F0_199F0:
    // CMP byte ptr ES:[SI],0xff (1000_99F0 / 0x199F0)
    Alu.Sub8(UInt8[ES, SI], 0xFF);
    // JZ 0x1000:9a1d (1000_99F4 / 0x199F4)
    if(ZeroFlag) {
      goto label_1000_9A1D_19A1D;
    }
    label_1000_9A1C_19A1C:
    // RET  (1000_9A1C / 0x19A1C)
    return NearRet();
    label_1000_9A1D_19A1D:
    // CMP word ptr [0x47ce],0x0 (1000_9A1D / 0x19A1D)
    Alu.Sub16(UInt16[DS, 0x47CE], 0x0);
    // JS 0x1000:9a3b (1000_9A22 / 0x19A22)
    if(SignFlag) {
      goto label_1000_9A3B_19A3B;
    }
    // MOV SI,word ptr [0x47ca] (1000_9A24 / 0x19A24)
    SI = UInt16[DS, 0x47CA];
    // MOV ES,word ptr [0xdbb2] (1000_9A28 / 0x19A28)
    ES = UInt16[DS, 0xDBB2];
    // CALL 0x1000:994f (1000_9A2C / 0x19A2C)
    NearCall(cs1, 0x9A2F, unknown_1000_994F_1994F);
    // ADD SI,word ptr ES:[BP + SI] (1000_9A2F / 0x19A2F)
    // SI += UInt16[ES, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BP + SI)]);
    // CALL 0x1000:996c (1000_9A32 / 0x19A32)
    NearCall(cs1, 0x9A35, unknown_1000_996C_1996C);
    // MOV word ptr [0x47c6],SI (1000_9A35 / 0x19A35)
    UInt16[DS, 0x47C6] = SI;
    // JMP 0x1000:99f0 (1000_9A39 / 0x19A39)
    goto label_1000_99F0_199F0;
    label_1000_9A3B_19A3B:
    // OR byte ptr [0x47d1],0x10 (1000_9A3B / 0x19A3B)
    // UInt8[DS, 0x47D1] |= 0x10;
    UInt8[DS, 0x47D1] = Alu.Or8(UInt8[DS, 0x47D1], 0x10);
    label_1000_9A40_19A40:
    // MOV SI,word ptr [0x47c6] (1000_9A40 / 0x19A40)
    SI = UInt16[DS, 0x47C6];
    // MOV ES,word ptr [0xdbb2] (1000_9A44 / 0x19A44)
    ES = UInt16[DS, 0xDBB2];
    // CMP word ptr [0x47ce],0x0 (1000_9A48 / 0x19A48)
    Alu.Sub16(UInt16[DS, 0x47CE], 0x0);
    // JG 0x1000:99f6 (1000_9A4D / 0x19A4D)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // Jump converted to entry function call
      return unknown_1000_99F6_199F6(0);
    }
    // CALL 0x1000:9ab4 (1000_9A4F / 0x19A4F)
    NearCall(cs1, 0x9A52, unknown_1000_9AB4_19AB4);
    // JC 0x1000:99f6 (1000_9A52 / 0x19A52)
    if(CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_99F6_199F6(0);
    }
    // CALL 0x1000:9a7b (1000_9A54 / 0x19A54)
    NearCall(cs1, 0x9A57, unknown_1000_9A7B_19A7B);
    // OR AH,AH (1000_9A57 / 0x19A57)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JNZ 0x1000:9a1c (1000_9A59 / 0x19A59)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9A1C / 0x19A1C)
      return NearRet();
    }
    // CALL 0x1000:9a60 (1000_9A5B / 0x19A5B)
    NearCall(cs1, 0x9A5E, unknown_1000_9A60_19A60);
    // JMP 0x1000:99f6 (1000_9A5E / 0x19A5E)
    // Jump converted to entry function call
    return unknown_1000_99F6_199F6(0);
  }
  
  public Action unknown_1000_99F6_199F6(int gotoTarget) {
    switch(gotoTarget) {
      case 0x99F6: goto label_1000_99F6_199F6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_99F6_199F6:
    // DEC word ptr [0x47ce] (1000_99F6 / 0x199F6)
    UInt16[DS, 0x47CE] = Alu.Dec16(UInt16[DS, 0x47CE]);
    // MOV word ptr [0x47c8],SI (1000_99FA / 0x199FA)
    UInt16[DS, 0x47C8] = SI;
    // CALL 0x1000:9bb1 (1000_99FE / 0x199FE)
    NearCall(cs1, 0x9A01, unknown_1000_9BB1_19BB1);
    // MOV word ptr [0x47c6],SI (1000_9A01 / 0x19A01)
    UInt16[DS, 0x47C6] = SI;
    // CMP word ptr [0xd834],0x13f (1000_9A05 / 0x19A05)
    Alu.Sub16(UInt16[DS, 0xD834], 0x13F);
    // JZ 0x1000:9a1c (1000_9A0B / 0x19A0B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9A1C / 0x19A1C)
      return NearRet();
    }
    // CALL 0x1000:908c (1000_9A0D / 0x19A0D)
    NearCall(cs1, 0x9A10, unknown_1000_908C_1908C);
    // MOV SI,0xd834 (1000_9A10 / 0x19A10)
    SI = 0xD834;
    // CALL 0x1000:db74 (1000_9A13 / 0x19A13)
    NearCall(cs1, 0x9A16, unknown_1000_DB74_1DB74);
    // CALL 0x1000:c4f0 (1000_9A16 / 0x19A16)
    NearCall(cs1, 0x9A19, rect_at_si_to_regs_ida_1000_C4F0_1C4F0);
    // JMP 0x1000:db67 (1000_9A19 / 0x19A19)
    // Jump converted to entry function call
    return unknown_1000_DB67_1DB67(0);
  }
  
  public Action unknown_1000_9A60_19A60(int gotoTarget) {
    label_1000_9A60_19A60:
    // OR AL,AL (1000_9A60 / 0x19A60)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:9a74 (1000_9A62 / 0x19A62)
    if(ZeroFlag) {
      goto label_1000_9A74_19A74;
    }
    // MOV BX,AX (1000_9A64 / 0x19A64)
    BX = AX;
    // XOR AL,AL (1000_9A66 / 0x19A66)
    AL = 0;
    // MOV CX,0xffff (1000_9A68 / 0x19A68)
    CX = 0xFFFF;
    // MOV DI,SI (1000_9A6B / 0x19A6B)
    DI = SI;
    label_1000_9A6D_19A6D:
    while (CX-- != 0) {
      // SCASB ES:DI (1000_9A6D / 0x19A6D)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // DEC BX (1000_9A6F / 0x19A6F)
    BX = Alu.Dec16(BX);
    // JNZ 0x1000:9a6d (1000_9A70 / 0x19A70)
    if(!ZeroFlag) {
      goto label_1000_9A6D_19A6D;
    }
    // MOV SI,DI (1000_9A72 / 0x19A72)
    SI = DI;
    label_1000_9A74_19A74:
    // MOV word ptr [0x47ce],0x8 (1000_9A74 / 0x19A74)
    UInt16[DS, 0x47CE] = 0x8;
    // RET  (1000_9A7A / 0x19A7A)
    return NearRet();
  }
  
  public Action unknown_1000_9A7B_19A7B(int gotoTarget) {
    label_1000_9A7B_19A7B:
    // MOV AL,[0x47d0] (1000_9A7B / 0x19A7B)
    AL = UInt8[DS, 0x47D0];
    // MOV BX,0xf18 (1000_9A7E / 0x19A7E)
    BX = 0xF18;
    // OR AL,AL (1000_9A81 / 0x19A81)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:9a9a (1000_9A83 / 0x19A83)
    if(!ZeroFlag) {
      goto label_1000_9A9A_19A9A;
    }
    // MOV AL,0x5 (1000_9A85 / 0x19A85)
    AL = 0x5;
    // MOV BX,0xf38 (1000_9A87 / 0x19A87)
    BX = 0xF38;
    // CMP word ptr [0x47c4],0x7 (1000_9A8A / 0x19A8A)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x7);
    // JNZ 0x1000:9a9a (1000_9A8F / 0x19A8F)
    if(!ZeroFlag) {
      goto label_1000_9A9A_19A9A;
    }
    // CMP byte ptr [0x2a],0xc8 (1000_9A91 / 0x19A91)
    Alu.Sub8(UInt8[DS, 0x2A], 0xC8);
    // JC 0x1000:9a9a (1000_9A96 / 0x19A96)
    if(CarryFlag) {
      goto label_1000_9A9A_19A9A;
    }
    // INC AL (1000_9A98 / 0x19A98)
    AL = Alu.Inc8(AL);
    label_1000_9A9A_19A9A:
    // DEC AL (1000_9A9A / 0x19A9A)
    AL = Alu.Dec8(AL);
    // XOR AH,AH (1000_9A9C / 0x19A9C)
    AH = 0;
    // SHL AX,1 (1000_9A9E / 0x19A9E)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BP,AX (1000_9AA0 / 0x19AA0)
    BP = AX;
    // ADD BP,word ptr [0xf0] (1000_9AA2 / 0x19AA2)
    // BP += UInt16[DS, 0xF0];
    BP = Alu.Add16(BP, UInt16[DS, 0xF0]);
    // MOV SI,word ptr [0x47ca] (1000_9AA6 / 0x19AA6)
    SI = UInt16[DS, 0x47CA];
    // MOV ES,word ptr [0xdbb2] (1000_9AAA / 0x19AAA)
    ES = UInt16[DS, 0xDBB2];
    // ADD SI,word ptr ES:[BP + SI] (1000_9AAE / 0x19AAE)
    // SI += UInt16[ES, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BP + SI)]);
    // JMP 0x1000:e3b7 (1000_9AB1 / 0x19AB1)
    // Jump converted to entry function call
    return unknown_1000_E3B7_1E3B7(0);
  }
  
  public Action unknown_1000_9AB4_19AB4(int gotoTarget) {
    label_1000_9AB4_19AB4:
    // MOV AL,[0x47e1] (1000_9AB4 / 0x19AB4)
    AL = UInt8[DS, 0x47E1];
    // OR AL,AL (1000_9AB7 / 0x19AB7)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:9b08 (1000_9AB9 / 0x19AB9)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9B08 / 0x19B08)
      return NearRet();
    }
    // JS 0x1000:9adb (1000_9ABB / 0x19ABB)
    if(SignFlag) {
      goto label_1000_9ADB_19ADB;
    }
    // OR byte ptr [0x47e1],0x80 (1000_9ABD / 0x19ABD)
    // UInt8[DS, 0x47E1] |= 0x80;
    UInt8[DS, 0x47E1] = Alu.Or8(UInt8[DS, 0x47E1], 0x80);
    // CALL 0x1000:9b09 (1000_9AC2 / 0x19AC2)
    NearCall(cs1, 0x9AC5, unknown_1000_9B09_19B09);
    // MOV AL,[0x47e2] (1000_9AC5 / 0x19AC5)
    AL = UInt8[DS, 0x47E2];
    // XOR AH,AH (1000_9AC8 / 0x19AC8)
    AH = 0;
    // MOV BP,AX (1000_9ACA / 0x19ACA)
    BP = AX;
    // MOV SI,word ptr [0x47ca] (1000_9ACC / 0x19ACC)
    SI = UInt16[DS, 0x47CA];
    // ADD SI,word ptr ES:[BP + SI] (1000_9AD0 / 0x19AD0)
    // SI += UInt16[ES, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BP + SI)]);
    // MOV word ptr [0x47ce],0x14 (1000_9AD3 / 0x19AD3)
    UInt16[DS, 0x47CE] = 0x14;
    // STC  (1000_9AD9 / 0x19AD9)
    CarryFlag = true;
    // RET  (1000_9ADA / 0x19ADA)
    return NearRet();
    label_1000_9ADB_19ADB:
    // SHR AL,1 (1000_9ADB / 0x19ADB)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNC 0x1000:9b08 (1000_9ADD / 0x19ADD)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9B08 / 0x19B08)
      return NearRet();
    }
    // MOV byte ptr [0x47e1],0x80 (1000_9ADF / 0x19ADF)
    UInt8[DS, 0x47E1] = 0x80;
    // CALL 0x1000:d075 (1000_9AE4 / 0x19AE4)
    NearCall(cs1, 0x9AE7, SetFontToMenu_1000_D075_1D075);
    // MOV SI,word ptr [0x47e4] (1000_9AE7 / 0x19AE7)
    SI = UInt16[DS, 0x47E4];
    // CMP word ptr [SI],0x38 (1000_9AEB / 0x19AEB)
    Alu.Sub16(UInt16[DS, SI], 0x38);
    // JNC 0x1000:9b08 (1000_9AEE / 0x19AEE)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9B08 / 0x19B08)
      return NearRet();
    }
    // LODSW SI (1000_9AF0 / 0x19AF0)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_9AF1 / 0x19AF1)
    CX = AX;
    // LODSW SI (1000_9AF3 / 0x19AF3)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_9AF4 / 0x19AF4)
    DX = AX;
    // LODSW SI (1000_9AF6 / 0x19AF6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_9AF7 / 0x19AF7)
    BX = AX;
    // LODSW SI (1000_9AF9 / 0x19AF9)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,CX (1000_9AFA / 0x19AFA)
    ushort tmp_1000_9AFA = AX;
    AX = CX;
    CX = tmp_1000_9AFA;
    // CALL 0x1000:8865 (1000_9AFB / 0x19AFB)
    NearCall(cs1, 0x9AFE, unknown_1000_8865_18865);
    // CALL 0x1000:d068 (1000_9AFE / 0x19AFE)
    NearCall(cs1, 0x9B01, SetFontToIntro_1000_D068_1D068);
    // CALL 0x1000:dbb2 (1000_9B01 / 0x19B01)
    NearCall(cs1, 0x9B04, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:c4dd (1000_9B04 / 0x19B04)
    NearCall(cs1, 0x9B07, unknown_1000_C4DD_1C4DD);
    // CLC  (1000_9B07 / 0x19B07)
    CarryFlag = false;
    label_1000_9B08_19B08:
    // RET  (1000_9B08 / 0x19B08)
    return NearRet();
  }
  
  public Action unknown_1000_9B09_19B09(int gotoTarget) {
    label_1000_9B09_19B09:
    // MOV SI,word ptr [0x47e4] (1000_9B09 / 0x19B09)
    SI = UInt16[DS, 0x47E4];
    // CMP word ptr [SI],0x38 (1000_9B0D / 0x19B0D)
    Alu.Sub16(UInt16[DS, SI], 0x38);
    // JC 0x1000:9b48 (1000_9B10 / 0x19B10)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_9B48 / 0x19B48)
      return NearRet();
    }
    // MOV AX,[0x20] (1000_9B12 / 0x19B12)
    AX = UInt16[DS, 0x20];
    // JZ 0x1000:9b1c (1000_9B15 / 0x19B15)
    if(ZeroFlag) {
      goto label_1000_9B1C_19B1C;
    }
    // MOV AL,[0x9d] (1000_9B17 / 0x19B17)
    AL = UInt8[DS, 0x9D];
    // XOR AH,AH (1000_9B1A / 0x19B1A)
    AH = 0;
    label_1000_9B1C_19B1C:
    // CALL 0x1000:8a23 (1000_9B1C / 0x19B1C)
    NearCall(cs1, 0x9B1F, unknown_1000_8A23_18A23);
    // MOV CX,AX (1000_9B1F / 0x19B1F)
    CX = AX;
    // LES SI,[0xdbb0] (1000_9B21 / 0x19B21)
    SI = UInt16[DS, 0xDBB0];
    ES = UInt16[DS, 0xDBB2];
    // MOV DI,SI (1000_9B25 / 0x19B25)
    DI = SI;
    // MOV BP,0x5 (1000_9B27 / 0x19B27)
    BP = 0x5;
    label_1000_9B2A_19B2A:
    // AND BX,0xf (1000_9B2A / 0x19B2A)
    // BX &= 0xF;
    BX = Alu.And16(BX, 0xF);
    // JZ 0x1000:9b32 (1000_9B2D / 0x19B2D)
    if(ZeroFlag) {
      goto label_1000_9B32_19B32;
    }
    // MOV BP,0x6 (1000_9B2F / 0x19B2F)
    BP = 0x6;
    label_1000_9B32_19B32:
    // ADD BX,BP (1000_9B32 / 0x19B32)
    // BX += BP;
    BX = Alu.Add16(BX, BP);
    // SHL BX,1 (1000_9B34 / 0x19B34)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV AX,word ptr ES:[BX + SI] (1000_9B36 / 0x19B36)
    AX = UInt16[ES, (ushort)(BX + SI)];
    // STOSW ES:DI (1000_9B39 / 0x19B39)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BL,DH (1000_9B3A / 0x19B3A)
    BL = DH;
    // MOV DH,DL (1000_9B3C / 0x19B3C)
    DH = DL;
    // MOV DL,CH (1000_9B3E / 0x19B3E)
    DL = CH;
    // MOV CH,CL (1000_9B40 / 0x19B40)
    CH = CL;
    // MOV CL,0xff (1000_9B42 / 0x19B42)
    CL = 0xFF;
    // CMP BL,CL (1000_9B44 / 0x19B44)
    Alu.Sub8(BL, CL);
    // JNZ 0x1000:9b2a (1000_9B46 / 0x19B46)
    if(!ZeroFlag) {
      goto label_1000_9B2A_19B2A;
    }
    label_1000_9B48_19B48:
    // RET  (1000_9B48 / 0x19B48)
    return NearRet();
  }
  
  public Action unknown_1000_9B49_19B49(int gotoTarget) {
    label_1000_9B49_19B49:
    // MOV AX,[0x47e1] (1000_9B49 / 0x19B49)
    AX = UInt16[DS, 0x47E1];
    // CMP AL,0x80 (1000_9B4C / 0x19B4C)
    Alu.Sub8(AL, 0x80);
    // JNZ 0x1000:9b84 (1000_9B4E / 0x19B4E)
    if(!ZeroFlag) {
      goto label_1000_9B84_19B84;
    }
    // PUSH SI (1000_9B50 / 0x19B50)
    Stack.Push(SI);
    // PUSH AX (1000_9B51 / 0x19B51)
    Stack.Push(AX);
    // CALL 0x1000:9197 (1000_9B52 / 0x19B52)
    NearCall(cs1, 0x9B55, unknown_1000_9197_19197);
    // POP AX (1000_9B55 / 0x19B55)
    AX = Stack.Pop();
    // MOV AL,AH (1000_9B56 / 0x19B56)
    AL = AH;
    // XOR AH,AH (1000_9B58 / 0x19B58)
    AH = 0;
    // INC AX (1000_9B5A / 0x19B5A)
    AX = Alu.Inc16(AX);
    // INC AX (1000_9B5B / 0x19B5B)
    AX = Alu.Inc16(AX);
    // MOV BP,AX (1000_9B5C / 0x19B5C)
    BP = AX;
    // MOV SI,word ptr [0x47ca] (1000_9B5E / 0x19B5E)
    SI = UInt16[DS, 0x47CA];
    // MOV ES,word ptr [0xdbb2] (1000_9B62 / 0x19B62)
    ES = UInt16[DS, 0xDBB2];
    // ADD SI,word ptr ES:[BP + SI] (1000_9B66 / 0x19B66)
    // SI += UInt16[ES, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BP + SI)]);
    // MOV byte ptr [0x47e1],0x81 (1000_9B69 / 0x19B69)
    UInt8[DS, 0x47E1] = 0x81;
    label_1000_9B6E_19B6E:
    // PUSH ES (1000_9B6E / 0x19B6E)
    Stack.Push(ES);
    // MOV BP,0x99f6 (1000_9B6F / 0x19B6F)
    BP = 0x99F6;
    // MOV AX,0xc (1000_9B72 / 0x19B72)
    AX = 0xC;
    // CALL 0x1000:e353 (1000_9B75 / 0x19B75)
    NearCall(cs1, 0x9B78, unknown_1000_E353_1E353);
    // POP ES (1000_9B78 / 0x19B78)
    ES = Stack.Pop();
    // MOV SI,word ptr [0x47c6] (1000_9B79 / 0x19B79)
    SI = UInt16[DS, 0x47C6];
    // CMP byte ptr ES:[SI],0xff (1000_9B7D / 0x19B7D)
    Alu.Sub8(UInt8[ES, SI], 0xFF);
    // JNZ 0x1000:9b6e (1000_9B81 / 0x19B81)
    if(!ZeroFlag) {
      goto label_1000_9B6E_19B6E;
    }
    // POP SI (1000_9B83 / 0x19B83)
    SI = Stack.Pop();
    label_1000_9B84_19B84:
    // MOV word ptr [0x47e1],0x0 (1000_9B84 / 0x19B84)
    UInt16[DS, 0x47E1] = 0x0;
    // RET  (1000_9B8A / 0x19B8A)
    return NearRet();
  }
  
  public Action unknown_1000_9B8B_19B8B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9B8B: goto label_1000_9B8B_19B8B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9B8B_19B8B:
    // CALL 0x1000:a7a5 (1000_9B8B / 0x19B8B)
    NearCall(cs1, 0x9B8E, unknown_1000_A7A5_1A7A5);
    // XOR AX,AX (1000_9B8E / 0x19B8E)
    AX = 0;
    // MOV byte ptr [0x47c3],0x0 (1000_9B90 / 0x19B90)
    UInt8[DS, 0x47C3] = 0x0;
    // MOV [0x47ce],AX (1000_9B95 / 0x19B95)
    UInt16[DS, 0x47CE] = AX;
    // AND byte ptr [0x47d1],0x7f (1000_9B98 / 0x19B98)
    // UInt8[DS, 0x47D1] &= 0x7F;
    UInt8[DS, 0x47D1] = Alu.And8(UInt8[DS, 0x47D1], 0x7F);
    // XCHG word ptr [0x47c6],AX (1000_9B9D / 0x19B9D)
    ushort tmp_1000_9B9D = UInt16[DS, 0x47C6];
    UInt16[DS, 0x47C6] = AX;
    AX = tmp_1000_9B9D;
    // OR AX,AX (1000_9BA1 / 0x19BA1)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:9bab (1000_9BA3 / 0x19BA3)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9BAB / 0x19BAB)
      return NearRet();
    }
    // MOV SI,0x99be (1000_9BA5 / 0x19BA5)
    SI = 0x99BE;
    // JMP 0x1000:da5f (1000_9BA8 / 0x19BA8)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
    label_1000_9BAB_19BAB:
    // RET  (1000_9BAB / 0x19BAB)
    return NearRet();
  }
  
  public Action unknown_1000_9BAC_19BAC(int gotoTarget) {
    label_1000_9BAC_19BAC:
    // PUSH SI (1000_9BAC / 0x19BAC)
    Stack.Push(SI);
    // CALL 0x1000:9197 (1000_9BAD / 0x19BAD)
    NearCall(cs1, 0x9BB0, unknown_1000_9197_19197);
    // POP SI (1000_9BB0 / 0x19BB0)
    SI = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9BB1_19BB1(0);
  }
  
  public Action unknown_1000_9BB1_19BB1(int gotoTarget) {
    label_1000_9BB1_19BB1:
    // CALL 0x1000:9bee (1000_9BB1 / 0x19BB1)
    NearCall(cs1, 0x9BB4, unknown_1000_9BEE_19BEE);
    // PUSH SI (1000_9BB4 / 0x19BB4)
    Stack.Push(SI);
    // CMP word ptr [0x4540],0x0 (1000_9BB5 / 0x19BB5)
    Alu.Sub16(UInt16[DS, 0x4540], 0x0);
    // JNZ 0x1000:9bcc (1000_9BBA / 0x19BBA)
    if(!ZeroFlag) {
      goto label_1000_9BCC_19BCC;
    }
    // MOV SI,0x1bf0 (1000_9BBC / 0x19BBC)
    SI = 0x1BF0;
    // MOV DI,0xd834 (1000_9BBF / 0x19BBF)
    DI = 0xD834;
    // CALL 0x1000:5b99 (1000_9BC2 / 0x19BC2)
    NearCall(cs1, 0x9BC5, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // MOV word ptr [SI],0x80 (1000_9BC5 / 0x19BC5)
    UInt16[DS, SI] = 0x80;
    // JMP 0x1000:9bd7 (1000_9BC9 / 0x19BC9)
    goto label_1000_9BD7_19BD7;
    label_1000_9BCC_19BCC:
    // CALL 0x1000:9c2d (1000_9BCC / 0x19BCC)
    NearCall(cs1, 0x9BCF, unknown_1000_9C2D_19C2D);
    // CMP word ptr [0xd834],0x13f (1000_9BCF / 0x19BCF)
    Alu.Sub16(UInt16[DS, 0xD834], 0x13F);
    // JZ 0x1000:9bec (1000_9BD5 / 0x19BD5)
    if(ZeroFlag) {
      goto label_1000_9BEC_19BEC;
    }
    label_1000_9BD7_19BD7:
    // MOV SI,0xd834 (1000_9BD7 / 0x19BD7)
    SI = 0xD834;
    // CMP word ptr [SI + 0x6],0x98 (1000_9BDA / 0x19BDA)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x6)], 0x98);
    // JC 0x1000:9be6 (1000_9BDF / 0x19BDF)
    if(CarryFlag) {
      goto label_1000_9BE6_19BE6;
    }
    // MOV word ptr [SI + 0x6],0x98 (1000_9BE1 / 0x19BE1)
    UInt16[DS, (ushort)(SI + 0x6)] = 0x98;
    label_1000_9BE6_19BE6:
    // CALL 0x1000:c446 (1000_9BE6 / 0x19BE6)
    NearCall(cs1, 0x9BE9, unknown_1000_C446_1C446);
    // CALL 0x1000:9d16 (1000_9BE9 / 0x19BE9)
    NearCall(cs1, 0x9BEC, unknown_1000_9D16_19D16);
    label_1000_9BEC_19BEC:
    // POP SI (1000_9BEC / 0x19BEC)
    SI = Stack.Pop();
    // RET  (1000_9BED / 0x19BED)
    return NearRet();
  }
  
  public Action unknown_1000_9BEE_19BEE(int gotoTarget) {
    label_1000_9BEE_19BEE:
    // XOR CX,CX (1000_9BEE / 0x19BEE)
    CX = 0;
    // PUSH DS (1000_9BF0 / 0x19BF0)
    Stack.Push(DS);
    // POP ES (1000_9BF1 / 0x19BF1)
    ES = Stack.Pop();
    // MOV DS,word ptr SS:[0xdbb2] (1000_9BF2 / 0x19BF2)
    DS = UInt16[SS, 0xDBB2];
    // MOV DI,0x460a (1000_9BF7 / 0x19BF7)
    DI = 0x460A;
    label_1000_9BFA_19BFA:
    // LODSB SI (1000_9BFA / 0x19BFA)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_9BFB / 0x19BFB)
    AH = 0;
    // OR AL,AL (1000_9BFD / 0x19BFD)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:9c25 (1000_9BFF / 0x19BFF)
    if(ZeroFlag) {
      goto label_1000_9C25_19C25;
    }
    // CMP AL,0x1 (1000_9C01 / 0x19C01)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:9c08 (1000_9C03 / 0x19C03)
    if(!ZeroFlag) {
      goto label_1000_9C08_19C08;
    }
    // MOV AH,AL (1000_9C05 / 0x19C05)
    AH = AL;
    // LODSB SI (1000_9C07 / 0x19C07)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_9C08_19C08:
    // PUSH SI (1000_9C08 / 0x19C08)
    Stack.Push(SI);
    // SUB AX,0x2 (1000_9C09 / 0x19C09)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // SHL AX,1 (1000_9C0C / 0x19C0C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BP,AX (1000_9C0E / 0x19C0E)
    BP = AX;
    // MOV SI,word ptr SS:[0x47cc] (1000_9C10 / 0x19C10)
    SI = UInt16[SS, 0x47CC];
    // ADD SI,word ptr DS:[BP + SI] (1000_9C15 / 0x19C15)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    label_1000_9C18_19C18:
    // LODSB SI (1000_9C18 / 0x19C18)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_9C19 / 0x19C19)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:9c22 (1000_9C1B / 0x19C1B)
    if(ZeroFlag) {
      goto label_1000_9C22_19C22;
    }
    // STOSB ES:DI (1000_9C1D / 0x19C1D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOVSW ES:DI,SI (1000_9C1E / 0x19C1E)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC CX (1000_9C1F / 0x19C1F)
    CX = Alu.Inc16(CX);
    // JMP 0x1000:9c18 (1000_9C20 / 0x19C20)
    goto label_1000_9C18_19C18;
    label_1000_9C22_19C22:
    // POP SI (1000_9C22 / 0x19C22)
    SI = Stack.Pop();
    // JMP 0x1000:9bfa (1000_9C23 / 0x19C23)
    goto label_1000_9BFA_19BFA;
    label_1000_9C25_19C25:
    // MOV word ptr SS:[0x4608],CX (1000_9C25 / 0x19C25)
    UInt16[SS, 0x4608] = CX;
    // PUSH SS (1000_9C2A / 0x19C2A)
    Stack.Push(SS);
    // POP DS (1000_9C2B / 0x19C2B)
    DS = Stack.Pop();
    // RET  (1000_9C2C / 0x19C2C)
    return NearRet();
  }
  
  public Action unknown_1000_9C2D_19C2D(int gotoTarget) {
    label_1000_9C2D_19C2D:
    // MOV word ptr [0xd834],0x13f (1000_9C2D / 0x19C2D)
    UInt16[DS, 0xD834] = 0x13F;
    // MOV word ptr [0xd836],0xc7 (1000_9C33 / 0x19C33)
    UInt16[DS, 0xD836] = 0xC7;
    // XOR AX,AX (1000_9C39 / 0x19C39)
    AX = 0;
    // MOV [0xd838],AX (1000_9C3B / 0x19C3B)
    UInt16[DS, 0xD838] = AX;
    // MOV [0xd83a],AX (1000_9C3E / 0x19C3E)
    UInt16[DS, 0xD83A] = AX;
    // MOV AX,DS (1000_9C41 / 0x19C41)
    AX = DS;
    // MOV ES,AX (1000_9C43 / 0x19C43)
    ES = AX;
    // MOV SI,0x4540 (1000_9C45 / 0x19C45)
    SI = 0x4540;
    // MOV DI,0x4608 (1000_9C48 / 0x19C48)
    DI = 0x4608;
    // CALL 0x1000:9c54 (1000_9C4B / 0x19C4B)
    NearCall(cs1, 0x9C4E, unknown_1000_9C54_19C54);
    // MOV SI,0x4608 (1000_9C4E / 0x19C4E)
    SI = 0x4608;
    // MOV DI,0x4540 (1000_9C51 / 0x19C51)
    DI = 0x4540;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9C54_19C54(0);
  }
  
  public Action unknown_1000_9C54_19C54(int gotoTarget) {
    label_1000_9C54_19C54:
    // LODSW SI (1000_9C54 / 0x19C54)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_9C55 / 0x19C55)
    CX = AX;
    label_1000_9C57_19C57:
    // PUSH CX (1000_9C57 / 0x19C57)
    Stack.Push(CX);
    // PUSH DI (1000_9C58 / 0x19C58)
    Stack.Push(DI);
    // MOV CX,word ptr [DI] (1000_9C59 / 0x19C59)
    CX = UInt16[DS, DI];
    // ADD DI,0x2 (1000_9C5B / 0x19C5B)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    label_1000_9C5E_19C5E:
    // CMPSW ES:DI,SI (1000_9C5E / 0x19C5E)
    Alu.Sub16(UInt16[DS, SI], UInt16[ES, DI]);
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LAHF  (1000_9C5F / 0x19C5F)
    AH = (byte)FlagRegister;
    // CMPSB ES:DI,SI (1000_9C60 / 0x19C60)
    Alu.Sub8(UInt8[DS, SI], UInt8[ES, DI]);
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,AH (1000_9C61 / 0x19C61)
    AL = AH;
    // LAHF  (1000_9C63 / 0x19C63)
    AH = (byte)FlagRegister;
    // AND AL,AH (1000_9C64 / 0x19C64)
    // AL &= AH;
    AL = Alu.And8(AL, AH);
    // TEST AL,0x40 (1000_9C66 / 0x19C66)
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:9c75 (1000_9C68 / 0x19C68)
    if(!ZeroFlag) {
      goto label_1000_9C75_19C75;
    }
    // SUB SI,0x3 (1000_9C6A / 0x19C6A)
    // SI -= 0x3;
    SI = Alu.Sub16(SI, 0x3);
    // LOOP 0x1000:9c5e (1000_9C6D / 0x19C6D)
    if(--CX != 0) {
      goto label_1000_9C5E_19C5E;
    }
    // CALL 0x1000:9cc6 (1000_9C6F / 0x19C6F)
    NearCall(cs1, 0x9C72, unknown_1000_9CC6_19CC6);
    // ADD SI,0x3 (1000_9C72 / 0x19C72)
    // SI += 0x3;
    SI = Alu.Add16(SI, 0x3);
    label_1000_9C75_19C75:
    // POP DI (1000_9C75 / 0x19C75)
    DI = Stack.Pop();
    // POP CX (1000_9C76 / 0x19C76)
    CX = Stack.Pop();
    // LOOP 0x1000:9c57 (1000_9C77 / 0x19C77)
    if(--CX != 0) {
      goto label_1000_9C57_19C57;
    }
    // CMP byte ptr [0x47e1],0x81 (1000_9C79 / 0x19C79)
    Alu.Sub8(UInt8[DS, 0x47E1], 0x81);
    // JZ 0x1000:9ca6 (1000_9C7E / 0x19C7E)
    if(ZeroFlag) {
      goto label_1000_9CA6_19CA6;
    }
    // CALL 0x1000:abcc (1000_9C80 / 0x19C80)
    NearCall(cs1, 0x9C83, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JZ 0x1000:9ca6 (1000_9C83 / 0x19C83)
    if(ZeroFlag) {
      goto label_1000_9CA6_19CA6;
    }
    // MOV AX,[0x47c4] (1000_9C85 / 0x19C85)
    AX = UInt16[DS, 0x47C4];
    // CMP AL,0x9 (1000_9C88 / 0x19C88)
    Alu.Sub8(AL, 0x9);
    // JZ 0x1000:9cc5 (1000_9C8A / 0x19C8A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9CC5 / 0x19CC5)
      return NearRet();
    }
    // CMP AL,0xc (1000_9C8C / 0x19C8C)
    Alu.Sub8(AL, 0xC);
    // JZ 0x1000:9cc5 (1000_9C8E / 0x19C8E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9CC5 / 0x19CC5)
      return NearRet();
    }
    // MOV SI,word ptr [0xdc28] (1000_9C90 / 0x19C90)
    SI = UInt16[DS, 0xDC28];
    // MOV AX,word ptr [SI + 0x2] (1000_9C94 / 0x19C94)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // CMP AX,word ptr [0xd83a] (1000_9C97 / 0x19C97)
    Alu.Sub16(AX, UInt16[DS, 0xD83A]);
    // JNC 0x1000:9ca6 (1000_9C9B / 0x19C9B)
    if(!CarryFlag) {
      goto label_1000_9CA6_19CA6;
    }
    // MOV [0xd83a],AX (1000_9C9D / 0x19C9D)
    UInt16[DS, 0xD83A] = AX;
    // CMP AX,word ptr [0xd836] (1000_9CA0 / 0x19CA0)
    Alu.Sub16(AX, UInt16[DS, 0xD836]);
    // JLE 0x1000:9cbf (1000_9CA4 / 0x19CA4)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_9CBF_19CBF;
    }
    label_1000_9CA6_19CA6:
    // CMP byte ptr [0x47e1],0x80 (1000_9CA6 / 0x19CA6)
    Alu.Sub8(UInt8[DS, 0x47E1], 0x80);
    // JNZ 0x1000:9cc5 (1000_9CAB / 0x19CAB)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_9CC5 / 0x19CC5)
      return NearRet();
    }
    // MOV AX,0x4c (1000_9CAD / 0x19CAD)
    AX = 0x4C;
    // CMP AX,word ptr [0xd83a] (1000_9CB0 / 0x19CB0)
    Alu.Sub16(AX, UInt16[DS, 0xD83A]);
    // JNC 0x1000:9cc5 (1000_9CB4 / 0x19CB4)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9CC5 / 0x19CC5)
      return NearRet();
    }
    // MOV [0xd83a],AX (1000_9CB6 / 0x19CB6)
    UInt16[DS, 0xD83A] = AX;
    // CMP AX,word ptr [0xd836] (1000_9CB9 / 0x19CB9)
    Alu.Sub16(AX, UInt16[DS, 0xD836]);
    // JG 0x1000:9cc5 (1000_9CBD / 0x19CBD)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (1000_9CC5 / 0x19CC5)
      return NearRet();
    }
    label_1000_9CBF_19CBF:
    // MOV word ptr [0xd834],0x13f (1000_9CBF / 0x19CBF)
    UInt16[DS, 0xD834] = 0x13F;
    label_1000_9CC5_19CC5:
    // RET  (1000_9CC5 / 0x19CC5)
    return NearRet();
  }
  
  public Action unknown_1000_9CC6_19CC6(int gotoTarget) {
    label_1000_9CC6_19CC6:
    // PUSH SI (1000_9CC6 / 0x19CC6)
    Stack.Push(SI);
    // PUSH DS (1000_9CC7 / 0x19CC7)
    Stack.Push(DS);
    // XOR AH,AH (1000_9CC8 / 0x19CC8)
    AH = 0;
    // LODSB SI (1000_9CCA / 0x19CCA)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BP,AX (1000_9CCB / 0x19CCB)
    BP = AX;
    // DEC BP (1000_9CCD / 0x19CCD)
    BP = Alu.Dec16(BP);
    // LODSB SI (1000_9CCE / 0x19CCE)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV DX,AX (1000_9CCF / 0x19CCF)
    DX = AX;
    // ADD DX,word ptr [0x1bf0] (1000_9CD1 / 0x19CD1)
    // DX += UInt16[DS, 0x1BF0];
    DX = Alu.Add16(DX, UInt16[DS, 0x1BF0]);
    // LODSB SI (1000_9CD5 / 0x19CD5)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BX,AX (1000_9CD6 / 0x19CD6)
    BX = AX;
    // ADD BX,word ptr [0x1bf2] (1000_9CD8 / 0x19CD8)
    // BX += UInt16[DS, 0x1BF2];
    BX = Alu.Add16(BX, UInt16[DS, 0x1BF2]);
    // LDS SI,[0xdbb0] (1000_9CDC / 0x19CDC)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // SHL BP,1 (1000_9CE0 / 0x19CE0)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_9CE2 / 0x19CE2)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // MOV BP,0xd834 (1000_9CE5 / 0x19CE5)
    BP = 0xD834;
    // CMP word ptr [BP + 0x0],DX (1000_9CE8 / 0x19CE8)
    Alu.Sub16(UInt16[SS, BP], DX);
    // JC 0x1000:9cf0 (1000_9CEB / 0x19CEB)
    if(CarryFlag) {
      goto label_1000_9CF0_19CF0;
    }
    // MOV word ptr [BP + 0x0],DX (1000_9CED / 0x19CED)
    UInt16[SS, BP] = DX;
    label_1000_9CF0_19CF0:
    // CMP word ptr [BP + 0x2],BX (1000_9CF0 / 0x19CF0)
    Alu.Sub16(UInt16[SS, (ushort)(BP + 0x2)], BX);
    // JC 0x1000:9cf8 (1000_9CF3 / 0x19CF3)
    if(CarryFlag) {
      goto label_1000_9CF8_19CF8;
    }
    // MOV word ptr [BP + 0x2],BX (1000_9CF5 / 0x19CF5)
    UInt16[SS, (ushort)(BP + 0x2)] = BX;
    label_1000_9CF8_19CF8:
    // LODSW SI (1000_9CF8 / 0x19CF8)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AX,0x1ff (1000_9CF9 / 0x19CF9)
    // AX &= 0x1FF;
    AX = Alu.And16(AX, 0x1FF);
    // ADD DX,AX (1000_9CFC / 0x19CFC)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // LODSW SI (1000_9CFE / 0x19CFE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_9CFF / 0x19CFF)
    AH = 0;
    // ADD BX,AX (1000_9D01 / 0x19D01)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // CMP word ptr [BP + 0x4],DX (1000_9D03 / 0x19D03)
    Alu.Sub16(UInt16[SS, (ushort)(BP + 0x4)], DX);
    // JNC 0x1000:9d0b (1000_9D06 / 0x19D06)
    if(!CarryFlag) {
      goto label_1000_9D0B_19D0B;
    }
    // MOV word ptr [BP + 0x4],DX (1000_9D08 / 0x19D08)
    UInt16[SS, (ushort)(BP + 0x4)] = DX;
    label_1000_9D0B_19D0B:
    // CMP word ptr [BP + 0x6],BX (1000_9D0B / 0x19D0B)
    Alu.Sub16(UInt16[SS, (ushort)(BP + 0x6)], BX);
    // JNC 0x1000:9d13 (1000_9D0E / 0x19D0E)
    if(!CarryFlag) {
      goto label_1000_9D13_19D13;
    }
    // MOV word ptr [BP + 0x6],BX (1000_9D10 / 0x19D10)
    UInt16[SS, (ushort)(BP + 0x6)] = BX;
    label_1000_9D13_19D13:
    // POP DS (1000_9D13 / 0x19D13)
    DS = Stack.Pop();
    // POP SI (1000_9D14 / 0x19D14)
    SI = Stack.Pop();
    // RET  (1000_9D15 / 0x19D15)
    return NearRet();
  }
  
  public Action unknown_1000_9D16_19D16(int gotoTarget) {
    label_1000_9D16_19D16:
    // PUSH DS (1000_9D16 / 0x19D16)
    Stack.Push(DS);
    // POP ES (1000_9D17 / 0x19D17)
    ES = Stack.Pop();
    // MOV DI,0x4540 (1000_9D18 / 0x19D18)
    DI = 0x4540;
    // MOV SI,0x4608 (1000_9D1B / 0x19D1B)
    SI = 0x4608;
    // MOV CX,word ptr [SI] (1000_9D1E / 0x19D1E)
    CX = UInt16[DS, SI];
    // PUSH SI (1000_9D20 / 0x19D20)
    Stack.Push(SI);
    // MOV AX,CX (1000_9D21 / 0x19D21)
    AX = CX;
    // SHL CX,1 (1000_9D23 / 0x19D23)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // ADD CX,AX (1000_9D25 / 0x19D25)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // ADD CX,0x2 (1000_9D27 / 0x19D27)
    // CX += 0x2;
    CX = Alu.Add16(CX, 0x2);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_9D2A / 0x19D2A)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP SI (1000_9D2C / 0x19D2C)
    SI = Stack.Pop();
    label_1000_9D2D_19D2D:
    // LODSW SI (1000_9D2D / 0x19D2D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_9D2E / 0x19D2E)
    CX = AX;
    label_1000_9D30_19D30:
    // PUSH CX (1000_9D30 / 0x19D30)
    Stack.Push(CX);
    // LODSB SI (1000_9D31 / 0x19D31)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_9D32 / 0x19D32)
    AH = 0;
    // MOV BP,AX (1000_9D34 / 0x19D34)
    BP = AX;
    // LODSB SI (1000_9D36 / 0x19D36)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV DX,AX (1000_9D37 / 0x19D37)
    DX = AX;
    // LODSB SI (1000_9D39 / 0x19D39)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BX,AX (1000_9D3A / 0x19D3A)
    BX = AX;
    // ADD DX,word ptr [0x1bf0] (1000_9D3C / 0x19D3C)
    // DX += UInt16[DS, 0x1BF0];
    DX = Alu.Add16(DX, UInt16[DS, 0x1BF0]);
    // ADD BX,word ptr [0x1bf2] (1000_9D40 / 0x19D40)
    // BX += UInt16[DS, 0x1BF2];
    BX = Alu.Add16(BX, UInt16[DS, 0x1BF2]);
    // PUSH SI (1000_9D44 / 0x19D44)
    Stack.Push(SI);
    // DEC BP (1000_9D45 / 0x19D45)
    BP = Alu.Dec16(BP);
    // MOV ES,word ptr [0xdbda] (1000_9D46 / 0x19D46)
    ES = UInt16[DS, 0xDBDA];
    // LDS SI,[0xdbb0] (1000_9D4A / 0x19D4A)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // SHL BP,1 (1000_9D4E / 0x19D4E)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_9D50 / 0x19D50)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // LODSW SI (1000_9D53 / 0x19D53)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_9D54 / 0x19D54)
    DI = AX;
    // LODSW SI (1000_9D56 / 0x19D56)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_9D57 / 0x19D57)
    AH = 0;
    // MOV CX,AX (1000_9D59 / 0x19D59)
    CX = AX;
    // MOV BP,0xd834 (1000_9D5B / 0x19D5B)
    BP = 0xD834;
    // CALLF [0x38cd] (1000_9D5E / 0x19D5E)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_9D5E = (uint)(UInt16[SS, 0x38CF] * 0x10 + UInt16[SS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_9D5E) {
      case 0x235C2 : FarCall(cs1, 0x9D63, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_9D5E);
        break;
    }
    // PUSH SS (1000_9D63 / 0x19D63)
    Stack.Push(SS);
    // POP DS (1000_9D64 / 0x19D64)
    DS = Stack.Pop();
    // POP SI (1000_9D65 / 0x19D65)
    SI = Stack.Pop();
    // POP CX (1000_9D66 / 0x19D66)
    CX = Stack.Pop();
    // LOOP 0x1000:9d30 (1000_9D67 / 0x19D67)
    if(--CX != 0) {
      goto label_1000_9D30_19D30;
    }
    // RET  (1000_9D69 / 0x19D69)
    return NearRet();
  }
  
  public Action unknown_1000_9D6A_19D6A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9D93: goto label_1000_9D93_19D93;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9D6A_19D6A:
    // MOV ES,word ptr SS:[0xdbd8] (1000_9D6A / 0x19D6A)
    ES = UInt16[SS, 0xDBD8];
    label_1000_9D6F_19D6F:
    // LODSB SI (1000_9D6F / 0x19D6F)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_9D70 / 0x19D70)
    AH = 0;
    // OR AL,AL (1000_9D72 / 0x19D72)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:9d93 (1000_9D74 / 0x19D74)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9D93 / 0x19D93)
      return NearRet();
    }
    // CMP AL,0x1 (1000_9D76 / 0x19D76)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:9d7d (1000_9D78 / 0x19D78)
    if(!ZeroFlag) {
      goto label_1000_9D7D_19D7D;
    }
    // MOV AH,AL (1000_9D7A / 0x19D7A)
    AH = AL;
    // LODSB SI (1000_9D7C / 0x19D7C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_9D7D_19D7D:
    // PUSH SI (1000_9D7D / 0x19D7D)
    Stack.Push(SI);
    // SUB AX,0x2 (1000_9D7E / 0x19D7E)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // SHL AX,1 (1000_9D81 / 0x19D81)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BP,AX (1000_9D83 / 0x19D83)
    BP = AX;
    // MOV SI,word ptr SS:[0x47cc] (1000_9D85 / 0x19D85)
    SI = UInt16[SS, 0x47CC];
    // ADD SI,word ptr DS:[BP + SI] (1000_9D8A / 0x19D8A)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // CALL 0x1000:9d94 (1000_9D8D / 0x19D8D)
    NearCall(cs1, 0x9D90, unknown_1000_9D94_19D94);
    // POP SI (1000_9D90 / 0x19D90)
    SI = Stack.Pop();
    // JMP 0x1000:9d6f (1000_9D91 / 0x19D91)
    goto label_1000_9D6F_19D6F;
    label_1000_9D93_19D93:
    // RET  (1000_9D93 / 0x19D93)
    return NearRet();
  }
  
  public Action unknown_1000_9D94_19D94(int gotoTarget) {
    label_1000_9D94_19D94:
    // LODSB SI (1000_9D94 / 0x19D94)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AX,0xff (1000_9D95 / 0x19D95)
    // AX &= 0xFF;
    AX = Alu.And16(AX, 0xFF);
    // JZ 0x1000:9d93 (1000_9D98 / 0x19D98)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_9D93 / 0x19D93)
      return NearRet();
    }
    // XOR AH,AH (1000_9D9A / 0x19D9A)
    AH = 0;
    // MOV BP,AX (1000_9D9C / 0x19D9C)
    BP = AX;
    // LODSB SI (1000_9D9E / 0x19D9E)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV DX,AX (1000_9D9F / 0x19D9F)
    DX = AX;
    // LODSB SI (1000_9DA1 / 0x19DA1)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV BX,AX (1000_9DA2 / 0x19DA2)
    BX = AX;
    // ADD DX,word ptr SS:[0x1bf0] (1000_9DA4 / 0x19DA4)
    // DX += UInt16[SS, 0x1BF0];
    DX = Alu.Add16(DX, UInt16[SS, 0x1BF0]);
    // ADD BX,word ptr SS:[0x1bf2] (1000_9DA9 / 0x19DA9)
    // BX += UInt16[SS, 0x1BF2];
    BX = Alu.Add16(BX, UInt16[SS, 0x1BF2]);
    // SUB DX,word ptr SS:[0x46d2] (1000_9DAE / 0x19DAE)
    // DX -= UInt16[SS, 0x46D2];
    DX = Alu.Sub16(DX, UInt16[SS, 0x46D2]);
    // SUB BX,word ptr SS:[0x46d4] (1000_9DB3 / 0x19DB3)
    // BX -= UInt16[SS, 0x46D4];
    BX = Alu.Sub16(BX, UInt16[SS, 0x46D4]);
    // ADD DX,word ptr SS:[0x47d4] (1000_9DB8 / 0x19DB8)
    // DX += UInt16[SS, 0x47D4];
    DX = Alu.Add16(DX, UInt16[SS, 0x47D4]);
    // ADD BX,word ptr SS:[0x47d6] (1000_9DBD / 0x19DBD)
    // BX += UInt16[SS, 0x47D6];
    BX = Alu.Add16(BX, UInt16[SS, 0x47D6]);
    // PUSH SI (1000_9DC2 / 0x19DC2)
    Stack.Push(SI);
    // PUSH DS (1000_9DC3 / 0x19DC3)
    Stack.Push(DS);
    // DEC BP (1000_9DC4 / 0x19DC4)
    BP = Alu.Dec16(BP);
    // LDS SI,SS:[0xdbb0] (1000_9DC5 / 0x19DC5)
    SI = UInt16[SS, 0xDBB0];
    DS = UInt16[SS, 0xDBB2];
    // SHL BP,1 (1000_9DCA / 0x19DCA)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_9DCC / 0x19DCC)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // LODSW SI (1000_9DCF / 0x19DCF)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_9DD0 / 0x19DD0)
    DI = AX;
    // LODSW SI (1000_9DD2 / 0x19DD2)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_9DD3 / 0x19DD3)
    AH = 0;
    // MOV CX,AX (1000_9DD5 / 0x19DD5)
    CX = AX;
    // MOV BP,0x47d4 (1000_9DD7 / 0x19DD7)
    BP = 0x47D4;
    // CALLF [0x38cd] (1000_9DDA / 0x19DDA)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_9DDA = (uint)(UInt16[SS, 0x38CF] * 0x10 + UInt16[SS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_9DDA) {
      case 0x235C2 : FarCall(cs1, 0x9DDF, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_9DDA);
        break;
    }
    // POP DS (1000_9DDF / 0x19DDF)
    DS = Stack.Pop();
    // POP SI (1000_9DE0 / 0x19DE0)
    SI = Stack.Pop();
    // JMP 0x1000:9d94 (1000_9DE1 / 0x19DE1)
    goto label_1000_9D94_19D94;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x19DE3");
  }
  
  public Action unknown_1000_9EF1_19EF1(int gotoTarget) {
    label_1000_9EF1_19EF1:
    // MOV [0x47dc],AL (1000_9EF1 / 0x19EF1)
    UInt8[DS, 0x47DC] = AL;
    // CALL 0x1000:9efd (1000_9EF4 / 0x19EF4)
    NearCall(cs1, 0x9EF7, unknown_1000_9EFD_19EFD);
    // MOV byte ptr [0x47dc],0x0 (1000_9EF7 / 0x19EF7)
    UInt8[DS, 0x47DC] = 0x0;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_9EFD_19EFD(0x19EFC - cs1 * 0x10);
  }
  
  public Action unknown_1000_9EFD_19EFD(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA788: goto label_1000_A788_1A788;break;
      case 0x9EFC: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9EFC_19EFC:
    // RET  (1000_9EFC / 0x19EFC)
    return NearRet();
    entry:
    label_1000_9EFD_19EFD:
    // MOV AL,[0x47dc] (1000_9EFD / 0x19EFD)
    AL = UInt8[DS, 0x47DC];
    // MOV [0x47dd],AL (1000_9F00 / 0x19F00)
    UInt8[DS, 0x47DD] = AL;
    // MOV AX,[0x4780] (1000_9F03 / 0x19F03)
    AX = UInt16[DS, 0x4780];
    // MOV BX,word ptr [0x47c4] (1000_9F06 / 0x19F06)
    BX = UInt16[DS, 0x47C4];
    // CALL 0x1000:a6cc (1000_9F0A / 0x19F0A)
    NearCall(cs1, 0x9F0D, unknown_1000_A6CC_1A6CC);
    // JNC 0x1000:9efc (1000_9F0D / 0x19F0D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_9EFC / 0x19EFC)
      return NearRet();
    }
    // CMP word ptr [0x47c4],0x10 (1000_9F0F / 0x19F0F)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x10);
    // JNC 0x1000:9f19 (1000_9F14 / 0x19F14)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:a75c (1000_9F19 / 0x19F19)
      goto label_1000_A75C_1A75C;
    }
    // CALL 0x1000:9f1c (1000_9F16 / 0x19F16)
    throw FailAsUntested("Could not find a valid function at address 1000_9F1C / 0x19F1C");
    label_1000_9F19_19F19:
    // JMP 0x1000:a75c (1000_9F19 / 0x19F19)
    goto label_1000_A75C_1A75C;
    label_1000_A75C_1A75C:
    // CALL 0x1000:9197 (1000_A75C / 0x1A75C)
    NearCall(cs1, 0xA75F, unknown_1000_9197_19197);
    // MOV BP,0x0 (1000_A75F / 0x1A75F)
    BP = 0x0;
    // MOV SI,0xa7c2 (1000_A762 / 0x1A762)
    SI = 0xA7C2;
    // CALL 0x1000:da25 (1000_A765 / 0x1A765)
    NearCall(cs1, 0xA768, unknown_1000_DA25_1DA25);
    // MOV byte ptr [0xdc2b],0x1 (1000_A768 / 0x1A768)
    UInt8[DS, 0xDC2B] = 0x1;
    // MOV SI,0x3811 (1000_A76D / 0x1A76D)
    SI = 0x3811;
    // CALLF [0x3991] (1000_A770 / 0x1A770)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_A770 = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_A770) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A770);
        break;
    }
    // MOV AX,[0xce7a] (1000_A774 / 0x1A774)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc2c],AX (1000_A777 / 0x1A777)
    UInt16[DS, 0xDC2C] = AX;
    // MOV word ptr [0xdc2e],0x8000 (1000_A77A / 0x1A77A)
    UInt16[DS, 0xDC2E] = 0x8000;
    // CALL 0x1000:a814 (1000_A780 / 0x1A780)
    throw FailAsUntested("Could not find a valid function at address 1000_A814 / 0x1A814");
    // JNC 0x1000:a788 (1000_A783 / 0x1A783)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_A788 / 0x1A788)
      return NearRet();
    }
    // CALL 0x1000:a82e (1000_A785 / 0x1A785)
    throw FailAsUntested("Could not find a valid function at address 1000_A82E / 0x1A82E");
    label_1000_A788_1A788:
    // RET  (1000_A788 / 0x1A788)
    return NearRet();
  }
  
  public Action unknown_1000_9F31_19F31(int gotoTarget) {
    label_1000_9F31_19F31:
    // MOV SI,word ptr [0x47be] (1000_9F31 / 0x19F31)
    SI = UInt16[DS, 0x47BE];
    // AND SI,0xfff8 (1000_9F35 / 0x19F35)
    // SI &= 0xFFF8;
    SI = Alu.And16(SI, 0xFFF8);
    // ADD SI,AX (1000_9F38 / 0x19F38)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // SHL SI,1 (1000_9F3A / 0x19F3A)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr [SI + 0xaa76] (1000_9F3C / 0x19F3C)
    SI = UInt16[DS, (ushort)(SI + 0xAA76)];
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9F40_19F40(0);
  }
  
  public Action unknown_1000_9F40_19F40(int gotoTarget) {
    label_1000_9F40_19F40:
    // MOV AX,[0x47c4] (1000_9F40 / 0x19F40)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0x2 (1000_9F43 / 0x19F43)
    Alu.Sub16(AX, 0x2);
    // JNZ 0x1000:9f56 (1000_9F46 / 0x19F46)
    if(!ZeroFlag) {
      goto label_1000_9F56_19F56;
    }
    // CMP byte ptr [0xc2],0x4 (1000_9F48 / 0x19F48)
    Alu.Sub8(UInt8[DS, 0xC2], 0x4);
    // JNZ 0x1000:9f56 (1000_9F4D / 0x19F4D)
    if(!ZeroFlag) {
      goto label_1000_9F56_19F56;
    }
    // PUSH AX (1000_9F4F / 0x19F4F)
    Stack.Push(AX);
    // PUSH SI (1000_9F50 / 0x19F50)
    Stack.Push(SI);
    // CALL 0x1000:1243 (1000_9F51 / 0x19F51)
    throw FailAsUntested("Could not find a valid function at address 1000_1243 / 0x11243");
    // POP SI (1000_9F54 / 0x19F54)
    SI = Stack.Pop();
    // POP AX (1000_9F55 / 0x19F55)
    AX = Stack.Pop();
    label_1000_9F56_19F56:
    // MOV CL,0x10 (1000_9F56 / 0x19F56)
    CL = 0x10;
    // MUL CL (1000_9F58 / 0x19F58)
    Cpu.Mul8(CL);
    // ADD AX,0xfd8 (1000_9F5A / 0x19F5A)
    // AX += 0xFD8;
    AX = Alu.Add16(AX, 0xFD8);
    // MOV [0x47a2],AX (1000_9F5D / 0x19F5D)
    UInt16[DS, 0x47A2] = AX;
    // CMP byte ptr [0x46eb],0x0 (1000_9F60 / 0x19F60)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNZ 0x1000:9f82 (1000_9F65 / 0x19F65)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_9F82_19F82(0);
    }
    // CALL 0x1000:c07c (1000_9F67 / 0x19F67)
    NearCall(cs1, 0x9F6A, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV word ptr [0x4784],0x28 (1000_9F6A / 0x19F6A)
    UInt16[DS, 0x4784] = 0x28;
    // MOV word ptr [0x4786],0x10 (1000_9F70 / 0x19F70)
    UInt16[DS, 0x4786] = 0x10;
    // MOV word ptr [0x4788],0x10 (1000_9F76 / 0x19F76)
    UInt16[DS, 0x4788] = 0x10;
    // MOV word ptr [0x478a],0x10 (1000_9F7C / 0x19F7C)
    UInt16[DS, 0x478A] = 0x10;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_9F82_19F82(0);
  }
  
  public Action unknown_1000_9F82_19F82(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9F82: goto label_1000_9F82_19F82;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9F82_19F82:
    // MOV word ptr [0xdbe4],0xf0 (1000_9F82 / 0x19F82)
    UInt16[DS, 0xDBE4] = 0xF0;
    // JMP 0x1000:d068 (1000_9F88 / 0x19F88)
    // Jump converted to entry function call
    return SetFontToIntro_1000_D068_1D068(0);
  }
  
  public Action unknown_1000_9F8B_19F8B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9F8B: goto label_1000_9F8B_19F8B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9F8B_19F8B:
    // PUSH word ptr [0x47c2] (1000_9F8B / 0x19F8B)
    Stack.Push(UInt16[DS, 0x47C2]);
    // MOV byte ptr [0x47c2],0x20 (1000_9F8F / 0x19F8F)
    UInt8[DS, 0x47C2] = 0x20;
    // CALL 0x1000:9f9e (1000_9F94 / 0x19F94)
    NearCall(cs1, 0x9F97, unknown_1000_9F9E_19F9E);
    // POP word ptr [0x47c2] (1000_9F97 / 0x19F97)
    UInt16[DS, 0x47C2] = Stack.Pop();
    // RET  (1000_9F9B / 0x19F9B)
    return NearRet();
  }
  
  public Action unknown_1000_9F9E_19F9E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x9F9E: goto label_1000_9F9E_19F9E;break;
      case 0x9F9C: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_9F9C_19F9C:
    // STC  (1000_9F9C / 0x19F9C)
    CarryFlag = true;
    // RET  (1000_9F9D / 0x19F9D)
    return NearRet();
    entry:
    label_1000_9F9E_19F9E:
    // MOV word ptr [0x477c],SI (1000_9F9E / 0x19F9E)
    UInt16[DS, 0x477C] = SI;
    // CALL 0x1000:94f3 (1000_9FA2 / 0x19FA2)
    NearCall(cs1, 0x9FA5, unknown_1000_94F3_194F3);
    // MOV word ptr [0x47bc],0xa6b0 (1000_9FA5 / 0x19FA5)
    UInt16[DS, 0x47BC] = 0xA6B0;
    label_1000_9FAB_19FAB:
    // MOV AX,word ptr [SI] (1000_9FAB / 0x19FAB)
    AX = UInt16[DS, SI];
    // CMP AX,0xffff (1000_9FAD / 0x19FAD)
    Alu.Sub16(AX, 0xFFFF);
    // JZ 0x1000:9f9c (1000_9FB0 / 0x19FB0)
    if(ZeroFlag) {
      goto label_1000_9F9C_19F9C;
    }
    // TEST AL,0x80 (1000_9FB2 / 0x19FB2)
    Alu.And8(AL, 0x80);
    // JZ 0x1000:9fc0 (1000_9FB4 / 0x19FB4)
    if(ZeroFlag) {
      goto label_1000_9FC0_19FC0;
    }
    // TEST AL,0x40 (1000_9FB6 / 0x19FB6)
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:9fc0 (1000_9FB8 / 0x19FB8)
    if(!ZeroFlag) {
      goto label_1000_9FC0_19FC0;
    }
    // AND AL,byte ptr [0x47c2] (1000_9FBA / 0x19FBA)
    // AL &= UInt8[DS, 0x47C2];
    AL = Alu.And8(AL, UInt8[DS, 0x47C2]);
    // JNZ 0x1000:9fd3 (1000_9FBE / 0x19FBE)
    if(!ZeroFlag) {
      goto label_1000_9FD3_19FD3;
    }
    label_1000_9FC0_19FC0:
    // PUSH SI (1000_9FC0 / 0x19FC0)
    Stack.Push(SI);
    // MOV AL,AH (1000_9FC1 / 0x19FC1)
    AL = AH;
    // MOV AH,byte ptr [SI + 0x2] (1000_9FC3 / 0x19FC3)
    AH = UInt8[DS, (ushort)(SI + 0x2)];
    // ROL AH,1 (1000_9FC6 / 0x19FC6)
    AH = Alu.Rol8(AH, 1);
    // ROL AH,1 (1000_9FC8 / 0x19FC8)
    AH = Alu.Rol8(AH, 1);
    // AND AH,0x3 (1000_9FCA / 0x19FCA)
    // AH &= 0x3;
    AH = Alu.And8(AH, 0x3);
    // CALL 0x1000:a396 (1000_9FCD / 0x19FCD)
    NearCall(cs1, 0x9FD0, unknown_1000_A396_1A396);
    // POP SI (1000_9FD0 / 0x19FD0)
    SI = Stack.Pop();
    // JNZ 0x1000:9fd8 (1000_9FD1 / 0x19FD1)
    if(!ZeroFlag) {
      goto label_1000_9FD8_19FD8;
    }
    label_1000_9FD3_19FD3:
    // ADD SI,0x4 (1000_9FD3 / 0x19FD3)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // JMP 0x1000:9fab (1000_9FD6 / 0x19FD6)
    goto label_1000_9FAB_19FAB;
    label_1000_9FD8_19FD8:
    // CMP byte ptr [0x46eb],0x0 (1000_9FD8 / 0x19FD8)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNZ 0x1000:9ff7 (1000_9FDD / 0x19FDD)
    if(!ZeroFlag) {
      goto label_1000_9FF7_19FF7;
    }
    // MOV AX,[0x47c4] (1000_9FDF / 0x19FDF)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0x10 (1000_9FE2 / 0x19FE2)
    Alu.Sub16(AX, 0x10);
    // JNC 0x1000:9ff7 (1000_9FE5 / 0x19FE5)
    if(!CarryFlag) {
      goto label_1000_9FF7_19FF7;
    }
    // PUSH SI (1000_9FE7 / 0x19FE7)
    Stack.Push(SI);
    // PUSH AX (1000_9FE8 / 0x19FE8)
    Stack.Push(AX);
    // CALL 0x1000:a0f1 (1000_9FE9 / 0x19FE9)
    NearCall(cs1, 0x9FEC, unknown_1000_A0F1_1A0F1);
    // CALL 0x1000:1803 (1000_9FEC / 0x19FEC)
    NearCall(cs1, 0x9FEF, unknown_1000_1803_11803);
    // CALL 0x1000:3af9 (1000_9FEF / 0x19FEF)
    NearCall(cs1, 0x9FF2, unknown_1000_3AF9_13AF9);
    // POP AX (1000_9FF2 / 0x19FF2)
    AX = Stack.Pop();
    // CALL 0x1000:91a0 (1000_9FF3 / 0x19FF3)
    NearCall(cs1, 0x9FF6, unknown_1000_91A0_191A0);
    // POP SI (1000_9FF6 / 0x19FF6)
    SI = Stack.Pop();
    label_1000_9FF7_19FF7:
    // PUSH SI (1000_9FF7 / 0x19FF7)
    Stack.Push(SI);
    // LODSW SI (1000_9FF8 / 0x19FF8)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV [0x47de],AX (1000_9FF9 / 0x19FF9)
    UInt16[DS, 0x47DE] = AX;
    // LODSW SI (1000_9FFC / 0x19FFC)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AL,AH (1000_9FFD / 0x19FFD)
    byte tmp_1000_9FFD = AL;
    AL = AH;
    AH = tmp_1000_9FFD;
    // AND AX,0x3ff (1000_9FFF / 0x19FFF)
    // AX &= 0x3FF;
    AX = Alu.And16(AX, 0x3FF);
    // OR AX,0x800 (1000_A002 / 0x1A002)
    // AX |= 0x800;
    AX = Alu.Or16(AX, 0x800);
    // MOV DI,word ptr [0x47bc] (1000_A005 / 0x1A005)
    DI = UInt16[DS, 0x47BC];
    // CMP DI,0xa6b0 (1000_A009 / 0x1A009)
    Alu.Sub16(DI, 0xA6B0);
    // JZ 0x1000:a034 (1000_A00D / 0x1A00D)
    if(ZeroFlag) {
      goto label_1000_A034_1A034;
    }
    // MOV SI,AX (1000_A00F / 0x1A00F)
    SI = AX;
    // CALL 0x1000:cf70 (1000_A011 / 0x1A011)
    NearCall(cs1, 0xA014, unknown_1000_CF70_1CF70);
    // CMP byte ptr ES:[SI],0x80 (1000_A014 / 0x1A014)
    Alu.Sub8(UInt8[ES, SI], 0x80);
    // JC 0x1000:a026 (1000_A018 / 0x1A018)
    if(CarryFlag) {
      goto label_1000_A026_1A026;
    }
    // POP AX (1000_A01A / 0x1A01A)
    AX = Stack.Pop();
    // SUB AX,0x4 (1000_A01B / 0x1A01B)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // PUSH AX (1000_A01E / 0x1A01E)
    Stack.Push(AX);
    // MOV byte ptr [DI + -0x1],0xff (1000_A01F / 0x1A01F)
    UInt8[DS, (ushort)(DI - 0x1)] = 0xFF;
    // JMP 0x1000:a02c (1000_A023 / 0x1A023)
    goto label_1000_A02C_1A02C;
    label_1000_A026_1A026:
    // CALL 0x1000:88f1 (1000_A026 / 0x1A026)
    NearCall(cs1, 0xA029, unknown_1000_88F1_188F1);
    // CALL 0x1000:8944 (1000_A029 / 0x1A029)
    NearCall(cs1, 0xA02C, unknown_1000_8944_18944);
    label_1000_A02C_1A02C:
    // MOV SI,0xa6b0 (1000_A02C / 0x1A02C)
    SI = 0xA6B0;
    // CALL 0x1000:8b11 (1000_A02F / 0x1A02F)
    NearCall(cs1, 0xA032, unknown_1000_8B11_18B11);
    // JMP 0x1000:a03e (1000_A032 / 0x1A032)
    goto label_1000_A03E_1A03E;
    label_1000_A034_1A034:
    // CMP byte ptr [0xc6],0x0 (1000_A034 / 0x1A034)
    Alu.Sub8(UInt8[DS, 0xC6], 0x0);
    // JNZ 0x1000:a03e (1000_A039 / 0x1A039)
    if(!ZeroFlag) {
      goto label_1000_A03E_1A03E;
    }
    // CALL 0x1000:88af (1000_A03B / 0x1A03B)
    NearCall(cs1, 0xA03E, unknown_1000_88AF_188AF);
    label_1000_A03E_1A03E:
    // POP SI (1000_A03E / 0x1A03E)
    SI = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_A03F_1A03F(0);
  }
  
  public Action unknown_1000_A03F_1A03F(int gotoTarget) {
    label_1000_A03F_1A03F:
    // CALL 0x1000:c85b (1000_A03F / 0x1A03F)
    NearCall(cs1, 0xA042, InitDialogue_1000_C85B_1C85B);
    // CMP word ptr [0x47b6],0x0 (1000_A042 / 0x1A042)
    Alu.Sub16(UInt16[DS, 0x47B6], 0x0);
    // JNZ 0x1000:a0aa (1000_A047 / 0x1A047)
    if(!ZeroFlag) {
      goto label_1000_A0AA_1A0AA;
    }
    // MOV AL,byte ptr [SI] (1000_A049 / 0x1A049)
    AL = UInt8[DS, SI];
    // AND AL,0xf (1000_A04B / 0x1A04B)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x1000:a05e (1000_A04D / 0x1A04D)
    if(ZeroFlag) {
      goto label_1000_A05E_1A05E;
    }
    // XOR AH,AH (1000_A04F / 0x1A04F)
    AH = 0;
    // PUSH SI (1000_A051 / 0x1A051)
    Stack.Push(SI);
    // DEC AX (1000_A052 / 0x1A052)
    AX = Alu.Dec16(AX);
    // SHL AX,1 (1000_A053 / 0x1A053)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BX,0xa107 (1000_A055 / 0x1A055)
    BX = 0xA107;
    // ADD BX,AX (1000_A058 / 0x1A058)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // CALL word ptr CS:[BX] (1000_A05A / 0x1A05A)
    // Indirect call to word ptr CS:[BX], generating possible targets from emulator records
    uint targetAddress_1000_A05A = (uint)(UInt16[cs1, BX]);
    switch(targetAddress_1000_A05A) {
      case 0xA1E8 : NearCall(cs1, 0xA05D, IncUnknown47A8_1000_A1E8_1A1E8);
        break;
      case 0xA219 : NearCall(cs1, 0xA05D, unknown_1000_A219_1A219);
        break;
      case 0xA1D0 : NearCall(cs1, 0xA05D, unknown_1000_A1D0_1A1D0);
        break;
      case 0xA172 : NearCall(cs1, 0xA05D, unknown_1000_A172_1A172);
        break;
      case 0xA1D6 : NearCall(cs1, 0xA05D, unknown_1000_A1D6_1A1D6);
        break;
      case 0xA25B : NearCall(cs1, 0xA05D, unknown_1000_A25B_1A25B);
        break;
      case 0xA1DC : NearCall(cs1, 0xA05D, unknown_1000_A1DC_1A1DC);
        break;
      case 0xA235 : NearCall(cs1, 0xA05D, unknown_1000_A235_1A235);
        break;
      case 0xA1F7 : NearCall(cs1, 0xA05D, unknown_1000_A1F7_1A1F7);
        break;
      case 0xA125 : NearCall(cs1, 0xA05D, unknown_1000_A125_1A125);
        break;
      case 0xA244 : NearCall(cs1, 0xA05D, unknown_1000_A244_1A244);
        break;
      case 0xA157 : NearCall(cs1, 0xA05D, unknown_1000_A157_1A157);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A05A);
        break;
    }
    // POP SI (1000_A05D / 0x1A05D)
    SI = Stack.Pop();
    label_1000_A05E_1A05E:
    // MOV AL,byte ptr [SI + 0x2] (1000_A05E / 0x1A05E)
    AL = UInt8[DS, (ushort)(SI + 0x2)];
    // AND AL,0xc (1000_A061 / 0x1A061)
    // AL &= 0xC;
    AL = Alu.And8(AL, 0xC);
    // JZ 0x1000:a092 (1000_A063 / 0x1A063)
    if(ZeroFlag) {
      goto label_1000_A092_1A092;
    }
    // TEST byte ptr [SI],0x80 (1000_A065 / 0x1A065)
    Alu.And8(UInt8[DS, SI], 0x80);
    // JNZ 0x1000:a092 (1000_A068 / 0x1A068)
    if(!ZeroFlag) {
      goto label_1000_A092_1A092;
    }
    // MOV AX,SI (1000_A06A / 0x1A06A)
    AX = SI;
    // SUB AX,0xaa78 (1000_A06C / 0x1A06C)
    // AX -= 0xAA78;
    AX = Alu.Sub16(AX, 0xAA78);
    // SHR AX,1 (1000_A06F / 0x1A06F)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_A071 / 0x1A071)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV BL,byte ptr [0x47c4] (1000_A073 / 0x1A073)
    BL = UInt8[DS, 0x47C4];
    // SHL BL,1 (1000_A077 / 0x1A077)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // SHL BL,1 (1000_A079 / 0x1A079)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // SHL BL,1 (1000_A07B / 0x1A07B)
    // BL <<= 1;
    BL = Alu.Shl8(BL, 1);
    // OR AH,BL (1000_A07D / 0x1A07D)
    // AH |= BL;
    AH = Alu.Or8(AH, BL);
    // MOV BP,word ptr [0x11bd] (1000_A07F / 0x1A07F)
    BP = UInt16[DS, 0x11BD];
    // MOV word ptr CS:[BP + 0x0],AX (1000_A083 / 0x1A083)
    UInt16[cs1, BP] = AX;
    // MOV word ptr CS:[BP + 0x2],0x0 (1000_A087 / 0x1A087)
    UInt16[cs1, (ushort)(BP + 0x2)] = 0x0;
    // ADD word ptr [0x11bd],0x2 (1000_A08D / 0x1A08D)
    // UInt16[DS, 0x11BD] += 0x2;
    UInt16[DS, 0x11BD] = Alu.Add16(UInt16[DS, 0x11BD], 0x2);
    label_1000_A092_1A092:
    // MOV byte ptr [0x19],0xff (1000_A092 / 0x1A092)
    UInt8[DS, 0x19] = 0xFF;
    // OR byte ptr [SI],0x80 (1000_A097 / 0x1A097)
    // UInt8[DS, SI] |= 0x80;
    UInt8[DS, SI] = Alu.Or8(UInt8[DS, SI], 0x80);
    // ADD SI,0x4 (1000_A09A / 0x1A09A)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // XOR AL,AL (1000_A09D / 0x1A09D)
    AL = 0;
    // XCHG byte ptr [0x47a8],AL (1000_A09F / 0x1A09F)
    byte tmp_1000_A09F = UInt8[DS, 0x47A8];
    UInt8[DS, 0x47A8] = AL;
    AL = tmp_1000_A09F;
    // OR AL,AL (1000_A0A3 / 0x1A0A3)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:a0aa (1000_A0A5 / 0x1A0A5)
    if(ZeroFlag) {
      goto label_1000_A0AA_1A0AA;
    }
    // MOV SI,0xffff (1000_A0A7 / 0x1A0A7)
    SI = 0xFFFF;
    label_1000_A0AA_1A0AA:
    // CMP byte ptr [0x46eb],0x0 (1000_A0AA / 0x1A0AA)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNZ 0x1000:a0e2 (1000_A0AF / 0x1A0AF)
    if(!ZeroFlag) {
      goto label_1000_A0E2_1A0E2;
    }
    // CMP word ptr [0x47c4],0x10 (1000_A0B1 / 0x1A0B1)
    Alu.Sub16(UInt16[DS, 0x47C4], 0x10);
    // JNC 0x1000:a0e2 (1000_A0B6 / 0x1A0B6)
    if(!CarryFlag) {
      goto label_1000_A0E2_1A0E2;
    }
    // PUSH SI (1000_A0B8 / 0x1A0B8)
    Stack.Push(SI);
    // CALL 0x1000:978e (1000_A0B9 / 0x1A0B9)
    NearCall(cs1, 0xA0BC, unknown_1000_978E_1978E);
    // POP SI (1000_A0BC / 0x1A0BC)
    SI = Stack.Pop();
    // CMP byte ptr [0x4774],0x0 (1000_A0BD / 0x1A0BD)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JZ 0x1000:a0c9 (1000_A0C2 / 0x1A0C2)
    if(ZeroFlag) {
      goto label_1000_A0C9_1A0C9;
    }
    // PUSH SI (1000_A0C4 / 0x1A0C4)
    Stack.Push(SI);
    // CALL 0x1000:2ebf (1000_A0C5 / 0x1A0C5)
    NearCall(cs1, 0xA0C8, unknown_1000_2EBF_12EBF);
    // POP SI (1000_A0C8 / 0x1A0C8)
    SI = Stack.Pop();
    label_1000_A0C9_1A0C9:
    // CMP byte ptr [0xea],0x0 (1000_A0C9 / 0x1A0C9)
    Alu.Sub8(UInt8[DS, 0xEA], 0x0);
    // JG 0x1000:a0e2 (1000_A0CE / 0x1A0CE)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_A0E2_1A0E2;
    }
    // CALL 0x1000:e270 (1000_A0D0 / 0x1A0D0)
    NearCall(cs1, 0xA0D3, PushAll_1000_E270_1E270);
    // CALL 0x1000:9efd (1000_A0D3 / 0x1A0D3)
    NearCall(cs1, 0xA0D6, unknown_1000_9EFD_19EFD);
    // MOV AX,0xf66 (1000_A0D6 / 0x1A0D6)
    AX = 0xF66;
    // XCHG word ptr [0x227e],AX (1000_A0D9 / 0x1A0D9)
    ushort tmp_1000_A0D9 = UInt16[DS, 0x227E];
    UInt16[DS, 0x227E] = AX;
    AX = tmp_1000_A0D9;
    // CALL AX (1000_A0DD / 0x1A0DD)
    // Indirect call to AX, generating possible targets from emulator records
    uint targetAddress_1000_A0DD = (uint)(AX);
    switch(targetAddress_1000_A0DD) {
      case 0xF66 : NearCall(cs1, 0xA0DF, NoOp_1000_0F66_10F66);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A0DD);
        break;
    }
    // CALL 0x1000:e283 (1000_A0DF / 0x1A0DF)
    NearCall(cs1, 0xA0E2, PopAll_1000_E283_1E283);
    label_1000_A0E2_1A0E2:
    // CMP byte ptr [0xfb],0x0 (1000_A0E2 / 0x1A0E2)
    Alu.Sub8(UInt8[DS, 0xFB], 0x0);
    // JS 0x1000:a0ef (1000_A0E7 / 0x1A0E7)
    if(SignFlag) {
      goto label_1000_A0EF_1A0EF;
    }
    // MOV AL,[0x28e8] (1000_A0E9 / 0x1A0E9)
    AL = UInt8[DS, 0x28E8];
    // MOV [0x28e7],AL (1000_A0EC / 0x1A0EC)
    UInt8[DS, 0x28E7] = AL;
    label_1000_A0EF_1A0EF:
    // CLC  (1000_A0EF / 0x1A0EF)
    CarryFlag = false;
    // RET  (1000_A0F0 / 0x1A0F0)
    return NearRet();
  }
  
  public Action unknown_1000_A0F1_1A0F1(int gotoTarget) {
    label_1000_A0F1_1A0F1:
    // CMP byte ptr [0x28e7],0x2 (1000_A0F1 / 0x1A0F1)
    Alu.Sub8(UInt8[DS, 0x28E7], 0x2);
    // JNZ 0x1000:a103 (1000_A0F6 / 0x1A0F6)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A103 / 0x1A103)
      return NearRet();
    }
    // TEST byte ptr [SI + 0x2],0x10 (1000_A0F8 / 0x1A0F8)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x2)], 0x10);
    // JZ 0x1000:a104 (1000_A0FC / 0x1A0FC)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:8c8a (1000_A104 / 0x1A104)
      // Jump converted to entry function call
      return unknown_1000_8C8A_18C8A(0);
    }
    // MOV byte ptr [0x28e7],0x1 (1000_A0FE / 0x1A0FE)
    UInt8[DS, 0x28E7] = 0x1;
    label_1000_A103_1A103:
    // RET  (1000_A103 / 0x1A103)
    return NearRet();
    label_1000_A104_1A104:
    // JMP 0x1000:8c8a (1000_A104 / 0x1A104)
    // Jump converted to entry function call
    return unknown_1000_8C8A_18C8A(0);
  }
  
  public Action unknown_1000_A125_1A125(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2239: break;
      case 0: goto entry; break; //
    }
    label_1000_2239_12239:
    // XOR AX,AX (1000_2239 / 0x12239)
    AX = 0;
    // MOV [0x9f],AL (1000_223B / 0x1223B)
    UInt8[DS, 0x9F] = AL;
    // MOV [0x20],AX (1000_223E / 0x1223E)
    UInt16[DS, 0x20] = AX;
    // MOV [0x1a],AL (1000_2241 / 0x12241)
    UInt8[DS, 0x1A] = AL;
    // MOV AX,[0xa0] (1000_2244 / 0x12244)
    AX = UInt16[DS, 0xA0];
    // OR AX,AX (1000_2247 / 0x12247)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:2250 (1000_2249 / 0x12249)
    if(ZeroFlag) {
      goto label_1000_2250_12250;
    }
    // MOV byte ptr [0x9f],0x3 (1000_224B / 0x1224B)
    UInt8[DS, 0x9F] = 0x3;
    label_1000_2250_12250:
    // CALL 0x1000:22b1 (1000_2250 / 0x12250)
    NearCall(cs1, 0x2253, unknown_1000_22B1_122B1);
    // MOV SI,0x10d8 (1000_2253 / 0x12253)
    SI = 0x10D8;
    // CALL 0x1000:1ac5 (1000_2256 / 0x12256)
    NearCall(cs1, 0x2259, unknown_1000_1AC5_11AC5);
    // XOR DL,DL (1000_2259 / 0x12259)
    DL = 0;
    label_1000_225B_1225B:
    // CMP word ptr [SI + 0xe],0x0 (1000_225B / 0x1225B)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0xE)], 0x0);
    // JZ 0x1000:2274 (1000_225F / 0x1225F)
    if(ZeroFlag) {
      goto label_1000_2274_12274;
    }
    // TEST byte ptr [SI + 0x2],0x60 (1000_2261 / 0x12261)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x2)], 0x60);
    // JNZ 0x1000:2274 (1000_2265 / 0x12265)
    if(!ZeroFlag) {
      goto label_1000_2274_12274;
    }
    // MOV AH,AL (1000_2267 / 0x12267)
    AH = AL;
    // SUB AH,byte ptr [SI + 0x10] (1000_2269 / 0x12269)
    // AH -= UInt8[DS, (ushort)(SI + 0x10)];
    AH = Alu.Sub8(AH, UInt8[DS, (ushort)(SI + 0x10)]);
    // CMP AH,DL (1000_226C / 0x1226C)
    Alu.Sub8(AH, DL);
    // JBE 0x1000:2274 (1000_226E / 0x1226E)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_2274_12274;
    }
    // MOV DL,AH (1000_2270 / 0x12270)
    DL = AH;
    // MOV DI,SI (1000_2272 / 0x12272)
    DI = SI;
    label_1000_2274_12274:
    // ADD SI,0x11 (1000_2274 / 0x12274)
    // SI += 0x11;
    SI = Alu.Add16(SI, 0x11);
    // CMP byte ptr [SI],0xff (1000_2277 / 0x12277)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JNZ 0x1000:225b (1000_227A / 0x1227A)
    if(!ZeroFlag) {
      goto label_1000_225B_1225B;
    }
    // OR DL,DL (1000_227C / 0x1227C)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // MOV SI,DI (1000_227E / 0x1227E)
    SI = DI;
    // JNZ 0x1000:22a3 (1000_2280 / 0x12280)
    if(!ZeroFlag) {
      goto label_1000_22A3_122A3;
    }
    // MOV SI,word ptr [0x113f] (1000_2282 / 0x12282)
    SI = UInt16[DS, 0x113F];
    // JMP 0x1000:228e (1000_2286 / 0x12286)
    goto label_1000_228E_1228E;
    label_1000_2288_12288:
    // CMP SI,word ptr [0x113f] (1000_2288 / 0x12288)
    Alu.Sub16(SI, UInt16[DS, 0x113F]);
    // JZ 0x1000:22b0 (1000_228C / 0x1228C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_22B0 / 0x122B0)
      return NearRet();
    }
    label_1000_228E_1228E:
    // ADD SI,0x11 (1000_228E / 0x1228E)
    // SI += 0x11;
    SI = Alu.Add16(SI, 0x11);
    // CMP byte ptr [SI],0xff (1000_2291 / 0x12291)
    Alu.Sub8(UInt8[DS, SI], 0xFF);
    // JNZ 0x1000:2299 (1000_2294 / 0x12294)
    if(!ZeroFlag) {
      goto label_1000_2299_12299;
    }
    // MOV SI,0x10d8 (1000_2296 / 0x12296)
    SI = 0x10D8;
    label_1000_2299_12299:
    // CMP word ptr [SI + 0xe],0x0 (1000_2299 / 0x12299)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0xE)], 0x0);
    // JZ 0x1000:2288 (1000_229D / 0x1229D)
    if(ZeroFlag) {
      goto label_1000_2288_12288;
    }
    // MOV word ptr [0x113f],SI (1000_229F / 0x1229F)
    UInt16[DS, 0x113F] = SI;
    label_1000_22A3_122A3:
    // CALL 0x1000:235f (1000_22A3 / 0x122A3)
    throw FailAsUntested("Could not find a valid function at address 1000_235F / 0x1235F");
    // MOV AL,byte ptr [SI] (1000_22A6 / 0x122A6)
    AL = UInt8[DS, SI];
    // XOR AH,AH (1000_22A8 / 0x122A8)
    AH = 0;
    // ADD AX,0x0 (1000_22AA / 0x122AA)
    // AX += 0x0;
    AX = Alu.Add16(AX, 0x0);
    // MOV [0x11f7],AX (1000_22AD / 0x122AD)
    UInt16[DS, 0x11F7] = AX;
    label_1000_22B0_122B0:
    // RET  (1000_22B0 / 0x122B0)
    return NearRet();
    label_1000_2388_12388:
    // MOV AL,0x3c (1000_2388 / 0x12388)
    AL = 0x3C;
    // CALL 0x1000:121f (1000_238A / 0x1238A)
    NearCall(cs1, 0x238D, unknown_1000_121F_1121F);
    // MOV BX,0x3 (1000_238D / 0x1238D)
    BX = 0x3;
    // CALL 0x1000:e3b7 (1000_2390 / 0x12390)
    NearCall(cs1, 0x2393, unknown_1000_E3B7_1E3B7);
    // MOV [0x9e],AL (1000_2393 / 0x12393)
    UInt8[DS, 0x9E] = AL;
    // CALL 0x1000:1ac5 (1000_2396 / 0x12396)
    NearCall(cs1, 0x2399, unknown_1000_1AC5_11AC5);
    // MOV DI,word ptr [0x10b4] (1000_2399 / 0x12399)
    DI = UInt16[DS, 0x10B4];
    // MOV byte ptr [DI + 0x3],AL (1000_239D / 0x1239D)
    UInt8[DS, (ushort)(DI + 0x3)] = AL;
    // MOV byte ptr [0x1a],0x0 (1000_23A0 / 0x123A0)
    UInt8[DS, 0x1A] = 0x0;
    // MOV AX,[0x11f1] (1000_23A5 / 0x123A5)
    AX = UInt16[DS, 0x11F1];
    // SUB AX,0xe8 (1000_23A8 / 0x123A8)
    // AX -= 0xE8;
    AX = Alu.Sub16(AX, 0xE8);
    // MOV CX,0x2 (1000_23AB / 0x123AB)
    CX = 0x2;
    label_1000_23AE_123AE:
    // INC AX (1000_23AE / 0x123AE)
    AX = Alu.Inc16(AX);
    label_1000_23AF_123AF:
    // CMP AL,byte ptr [0x1141] (1000_23AF / 0x123AF)
    Alu.Sub8(AL, UInt8[DS, 0x1141]);
    // JC 0x1000:23bc (1000_23B3 / 0x123B3)
    if(CarryFlag) {
      goto label_1000_23BC_123BC;
    }
    // SUB AL,byte ptr [0x1141] (1000_23B5 / 0x123B5)
    // AL -= UInt8[DS, 0x1141];
    AL = Alu.Sub8(AL, UInt8[DS, 0x1141]);
    // LOOP 0x1000:23af (1000_23B9 / 0x123B9)
    if(--CX != 0) {
      goto label_1000_23AF_123AF;
    }
    // RET  (1000_23BB / 0x123BB)
    return NearRet();
    label_1000_23BC_123BC:
    // MOV BX,AX (1000_23BC / 0x123BC)
    BX = AX;
    // CMP byte ptr [BX + DI + 0x4],0x0 (1000_23BE / 0x123BE)
    Alu.Sub8(UInt8[DS, (ushort)(BX + DI + 0x4)], 0x0);
    // JZ 0x1000:23ae (1000_23C2 / 0x123C2)
    if(ZeroFlag) {
      goto label_1000_23AE_123AE;
    }
    // ADD AX,0xe8 (1000_23C4 / 0x123C4)
    // AX += 0xE8;
    AX = Alu.Add16(AX, 0xE8);
    // MOV [0x11f1],AX (1000_23C7 / 0x123C7)
    UInt16[DS, 0x11F1] = AX;
    // MOV AL,byte ptr [BX + DI + 0x9] (1000_23CA / 0x123CA)
    AL = UInt8[DS, (ushort)(BX + DI + 0x9)];
    // AND AL,0x7f (1000_23CD / 0x123CD)
    // AL &= 0x7F;
    AL = Alu.And8(AL, 0x7F);
    // SHL AL,1 (1000_23CF / 0x123CF)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // MOV [0x9d],AL (1000_23D1 / 0x123D1)
    UInt8[DS, 0x9D] = AL;
    // RET  (1000_23D4 / 0x123D4)
    return NearRet();
    entry:
    label_1000_A125_1A125:
    // MOV AX,[0x47c4] (1000_A125 / 0x1A125)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0x1 (1000_A128 / 0x1A128)
    Alu.Sub16(AX, 0x1);
    // JZ 0x1000:a186 (1000_A12B / 0x1A12B)
    if(ZeroFlag) {
      goto label_1000_A186_1A186;
    }
    // CMP AX,0x3 (1000_A12D / 0x1A12D)
    Alu.Sub16(AX, 0x3);
    // JNZ 0x1000:a135 (1000_A130 / 0x1A130)
    if(!ZeroFlag) {
      goto label_1000_A135_1A135;
    }
    // JMP 0x1000:2239 (1000_A132 / 0x1A132)
    goto label_1000_2239_12239;
    label_1000_A135_1A135:
    // CMP AX,0x5 (1000_A135 / 0x1A135)
    Alu.Sub16(AX, 0x5);
    // JNZ 0x1000:a141 (1000_A138 / 0x1A138)
    if(!ZeroFlag) {
      goto label_1000_A141_1A141;
    }
    // MOV word ptr [0x227e],0x2ccf (1000_A13A / 0x1A13A)
    UInt16[DS, 0x227E] = 0x2CCF;
    // RET  (1000_A140 / 0x1A140)
    return NearRet();
    label_1000_A141_1A141:
    // CMP AX,0xc (1000_A141 / 0x1A141)
    Alu.Sub16(AX, 0xC);
    // JNZ 0x1000:a14e (1000_A144 / 0x1A144)
    if(!ZeroFlag) {
      goto label_1000_A14E_1A14E;
    }
    // MOV DI,word ptr [0x11ce] (1000_A146 / 0x1A146)
    DI = UInt16[DS, 0x11CE];
    // AND byte ptr [DI + 0xa],0x7f (1000_A14A / 0x1A14A)
    // UInt8[DS, (ushort)(DI + 0xA)] &= 0x7F;
    UInt8[DS, (ushort)(DI + 0xA)] = Alu.And8(UInt8[DS, (ushort)(DI + 0xA)], 0x7F);
    label_1000_A14E_1A14E:
    // CMP AX,0xd (1000_A14E / 0x1A14E)
    Alu.Sub16(AX, 0xD);
    // JNZ 0x1000:a156 (1000_A151 / 0x1A151)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A156 / 0x1A156)
      return NearRet();
    }
    // JMP 0x1000:2388 (1000_A153 / 0x1A153)
    goto label_1000_2388_12388;
    label_1000_A156_1A156:
    // RET  (1000_A156 / 0x1A156)
    return NearRet();
    label_1000_A186_1A186:
    // TEST byte ptr [0xa],0x2 (1000_A186 / 0x1A186)
    Alu.And8(UInt8[DS, 0xA], 0x2);
    // JZ 0x1000:a197 (1000_A18B / 0x1A18B)
    if(ZeroFlag) {
      goto label_1000_A197_1A197;
    }
    // MOV AL,0x28 (1000_A18D / 0x1A18D)
    AL = 0x28;
    // CALL 0x1000:6f78 (1000_A18F / 0x1A18F)
    NearCall(cs1, 0xA192, unknown_1000_6F78_16F78);
    // MOV AX,0xffce (1000_A192 / 0x1A192)
    AX = 0xFFCE;
    // JMP 0x1000:a1aa (1000_A195 / 0x1A195)
    goto label_1000_A1AA_1A1AA;
    label_1000_A197_1A197:
    // MOV AX,[0x1176] (1000_A197 / 0x1A197)
    AX = UInt16[DS, 0x1176];
    // CMP AX,0x1 (1000_A19A / 0x1A19A)
    Alu.Sub16(AX, 0x1);
    // JNZ 0x1000:a1aa (1000_A19D / 0x1A19D)
    if(!ZeroFlag) {
      goto label_1000_A1AA_1A1AA;
    }
    // ADD AX,0xa (1000_A19F / 0x1A19F)
    // AX += 0xA;
    AX = Alu.Add16(AX, 0xA);
    // MOV AL,0xa (1000_A1A2 / 0x1A1A2)
    AL = 0xA;
    // CALL 0x1000:6f78 (1000_A1A4 / 0x1A1A4)
    NearCall(cs1, 0xA1A7, unknown_1000_6F78_16F78);
    // MOV AX,0xa (1000_A1A7 / 0x1A1A7)
    AX = 0xA;
    label_1000_A1AA_1A1AA:
    // ADD AX,0x14 (1000_A1AA / 0x1A1AA)
    // AX += 0x14;
    AX = Alu.Add16(AX, 0x14);
    // MOV [0x1176],AX (1000_A1AD / 0x1A1AD)
    UInt16[DS, 0x1176] = AX;
    // XOR BL,BL (1000_A1B0 / 0x1A1B0)
    BL = 0;
    // CMP AX,0x64 (1000_A1B2 / 0x1A1B2)
    Alu.Sub16(AX, 0x64);
    // JNC 0x1000:a1bf (1000_A1B5 / 0x1A1B5)
    if(!CarryFlag) {
      goto label_1000_A1BF_1A1BF;
    }
    // MOV BL,0x6 (1000_A1B7 / 0x1A1B7)
    BL = 0x6;
    // DIV BL (1000_A1B9 / 0x1A1B9)
    Cpu.Div8(BL);
    // MOV BL,0x80 (1000_A1BB / 0x1A1BB)
    BL = 0x80;
    // SUB BL,AL (1000_A1BD / 0x1A1BD)
    // BL -= AL;
    BL = Alu.Sub8(BL, AL);
    label_1000_A1BF_1A1BF:
    // MOV byte ptr [0xd5],BL (1000_A1BF / 0x1A1BF)
    UInt8[DS, 0xD5] = BL;
    // RET  (1000_A1C3 / 0x1A1C3)
    return NearRet();
  }
  
  public Action unknown_1000_A157_1A157(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2419: break;
      case 0: goto entry; break; //
    }
    label_1000_2419_12419:
    // RET  (1000_2419 / 0x12419)
    return NearRet();
    label_1000_24EE_124EE:
    // CMP byte ptr [0x9f],0x2 (1000_24EE / 0x124EE)
    Alu.Sub8(UInt8[DS, 0x9F], 0x2);
    // JZ 0x1000:2541 (1000_24F3 / 0x124F3)
    if(ZeroFlag) {
      goto label_1000_2541_12541;
    }
    // JNC 0x1000:252d (1000_24F5 / 0x124F5)
    if(!CarryFlag) {
      goto label_1000_252D_1252D;
    }
    // CMP byte ptr [0x476d],0x0 (1000_24F7 / 0x124F7)
    Alu.Sub8(UInt8[DS, 0x476D], 0x0);
    // JNZ 0x1000:2517 (1000_24FC / 0x124FC)
    if(!ZeroFlag) {
      goto label_1000_2517_12517;
    }
    // MOV AL,[0x1a] (1000_24FE / 0x124FE)
    AL = UInt8[DS, 0x1A];
    // DEC AX (1000_2501 / 0x12501)
    AX = Alu.Dec16(AX);
    // AND AX,0x3 (1000_2502 / 0x12502)
    // AX &= 0x3;
    AX = Alu.And16(AX, 0x3);
    // MOV BX,AX (1000_2505 / 0x12505)
    BX = AX;
    // SHL BX,1 (1000_2507 / 0x12507)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV AX,word ptr [BX + 0xb4] (1000_2509 / 0x12509)
    AX = UInt16[DS, (ushort)(BX + 0xB4)];
    // MOV [0xc0],AX (1000_250D / 0x1250D)
    UInt16[DS, 0xC0] = AX;
    // MOV word ptr [0x1158],0xffff (1000_2510 / 0x12510)
    UInt16[DS, 0x1158] = 0xFFFF;
    // RET  (1000_2516 / 0x12516)
    return NearRet();
    label_1000_2517_12517:
    // MOV DI,word ptr [0x10b4] (1000_2517 / 0x12517)
    DI = UInt16[DS, 0x10B4];
    // XOR AX,AX (1000_251B / 0x1251B)
    AX = 0;
    // XCHG word ptr [DI + 0xe],AX (1000_251D / 0x1251D)
    ushort tmp_1000_251D = UInt16[DS, (ushort)(DI + 0xE)];
    UInt16[DS, (ushort)(DI + 0xE)] = AX;
    AX = tmp_1000_251D;
    // DEC byte ptr [0x22] (1000_2520 / 0x12520)
    UInt8[DS, 0x22] = Alu.Dec8(UInt8[DS, 0x22]);
    label_1000_252D_1252D:
    // CMP byte ptr [0x476d],0x0 (1000_252D / 0x1252D)
    Alu.Sub8(UInt8[DS, 0x476D], 0x0);
    // JZ 0x1000:2540 (1000_2532 / 0x12532)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2540 / 0x12540)
      return NearRet();
    }
    // MOV DI,word ptr [0x10b4] (1000_2534 / 0x12534)
    DI = UInt16[DS, 0x10B4];
    // AND byte ptr [DI + 0x2],0x9f (1000_2538 / 0x12538)
    // UInt8[DS, (ushort)(DI + 0x2)] &= 0x9F;
    UInt8[DS, (ushort)(DI + 0x2)] = Alu.And8(UInt8[DS, (ushort)(DI + 0x2)], 0x9F);
    // OR byte ptr [DI + 0x2],0x20 (1000_253C / 0x1253C)
    // UInt8[DS, (ushort)(DI + 0x2)] |= 0x20;
    UInt8[DS, (ushort)(DI + 0x2)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0x2)], 0x20);
    label_1000_2540_12540:
    // RET  (1000_2540 / 0x12540)
    return NearRet();
    label_1000_2541_12541:
    // CMP byte ptr [0x476d],0x0 (1000_2541 / 0x12541)
    Alu.Sub8(UInt8[DS, 0x476D], 0x0);
    // JZ 0x1000:2554 (1000_2546 / 0x12546)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_2554 / 0x12554)
      return NearRet();
    }
    // MOV DI,word ptr [0x10b4] (1000_2548 / 0x12548)
    DI = UInt16[DS, 0x10B4];
    // AND byte ptr [DI + 0x2],0x9f (1000_254C / 0x1254C)
    // UInt8[DS, (ushort)(DI + 0x2)] &= 0x9F;
    UInt8[DS, (ushort)(DI + 0x2)] = Alu.And8(UInt8[DS, (ushort)(DI + 0x2)], 0x9F);
    // OR byte ptr [DI + 0x2],0x40 (1000_2550 / 0x12550)
    // UInt8[DS, (ushort)(DI + 0x2)] |= 0x40;
    UInt8[DS, (ushort)(DI + 0x2)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0x2)], 0x40);
    label_1000_2554_12554:
    // RET  (1000_2554 / 0x12554)
    return NearRet();
    label_1000_2D2C_12D2C:
    // INC byte ptr [0xc2] (1000_2D2C / 0x12D2C)
    UInt8[DS, 0xC2] = Alu.Inc8(UInt8[DS, 0xC2]);
    // SUB SP,0x32 (1000_2D30 / 0x12D30)
    // SP -= 0x32;
    SP = Alu.Sub16(SP, 0x32);
    // MOV BX,SP (1000_2D33 / 0x12D33)
    BX = SP;
    // MOV BP,0x2d62 (1000_2D35 / 0x12D35)
    BP = 0x2D62;
    // CALL 0x1000:1258 (1000_2D38 / 0x12D38)
    throw FailAsUntested("Could not find a valid function at address 1000_1258 / 0x11258");
    // MOV word ptr [BX],0x0 (1000_2D3B / 0x12D3B)
    UInt16[DS, BX] = 0x0;
    // MOV SI,SP (1000_2D3F / 0x12D3F)
    SI = SP;
    label_1000_2D41_12D41:
    // LODSW SI (1000_2D41 / 0x12D41)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_2D42 / 0x12D42)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:2d5e (1000_2D44 / 0x12D44)
    if(ZeroFlag) {
      goto label_1000_2D5E_12D5E;
    }
    // PUSH SI (1000_2D46 / 0x12D46)
    Stack.Push(SI);
    // MOV SI,AX (1000_2D47 / 0x12D47)
    SI = AX;
    // PUSH SI (1000_2D49 / 0x12D49)
    Stack.Push(SI);
    // MOV DI,0x11c (1000_2D4A / 0x12D4A)
    DI = 0x11C;
    // CALL 0x1000:84a6 (1000_2D4D / 0x12D4D)
    NearCall(cs1, 0x2D50, unknown_1000_84A6_184A6);
    // POP SI (1000_2D50 / 0x12D50)
    SI = Stack.Pop();
    // CALL 0x1000:8308 (1000_2D51 / 0x12D51)
    NearCall(cs1, 0x2D54, unknown_1000_8308_18308);
    // POP SI (1000_2D54 / 0x12D54)
    SI = Stack.Pop();
    // MOV AX,SP (1000_2D55 / 0x12D55)
    AX = SP;
    // ADD AX,0xe (1000_2D57 / 0x12D57)
    // AX += 0xE;
    AX = Alu.Add16(AX, 0xE);
    // CMP SI,AX (1000_2D5A / 0x12D5A)
    Alu.Sub16(SI, AX);
    // JC 0x1000:2d41 (1000_2D5C / 0x12D5C)
    if(CarryFlag) {
      goto label_1000_2D41_12D41;
    }
    label_1000_2D5E_12D5E:
    // ADD SP,0x32 (1000_2D5E / 0x12D5E)
    // SP += 0x32;
    SP = Alu.Add16(SP, 0x32);
    // RET  (1000_2D61 / 0x12D61)
    return NearRet();
    entry:
    label_1000_A157_1A157:
    // MOV AX,[0x47c4] (1000_A157 / 0x1A157)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0x3 (1000_A15A / 0x1A15A)
    Alu.Sub16(AX, 0x3);
    // JNZ 0x1000:a162 (1000_A15D / 0x1A15D)
    if(!ZeroFlag) {
      goto label_1000_A162_1A162;
    }
    // JMP 0x1000:24ee (1000_A15F / 0x1A15F)
    goto label_1000_24EE_124EE;
    label_1000_A162_1A162:
    // CMP AX,0x5 (1000_A162 / 0x1A162)
    Alu.Sub16(AX, 0x5);
    // JNZ 0x1000:a16a (1000_A165 / 0x1A165)
    if(!ZeroFlag) {
      goto label_1000_A16A_1A16A;
    }
    // JMP 0x1000:2d2c (1000_A167 / 0x1A167)
    goto label_1000_2D2C_12D2C;
    label_1000_A16A_1A16A:
    // CMP AX,0xd (1000_A16A / 0x1A16A)
    Alu.Sub16(AX, 0xD);
    // JNZ 0x1000:a156 (1000_A16D / 0x1A16D)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A156 / 0x1A156)
      return NearRet();
    }
    // JMP 0x1000:2419 (1000_A16F / 0x1A16F)
    // JMP target is RET, inlining.
    // RET  (1000_2419 / 0x12419)
    return NearRet();
  }
  
  public Action unknown_1000_A172_1A172(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24A3: break;
      case 0: goto entry; break; //
    }
    label_1000_24A3_124A3:
    // CMP byte ptr [0x2a],0x10 (1000_24A3 / 0x124A3)
    Alu.Sub8(UInt8[DS, 0x2A], 0x10);
    // JNC 0x1000:24b0 (1000_24A8 / 0x124A8)
    if(!CarryFlag) {
      goto label_1000_24B0_124B0;
    }
    // OR byte ptr [0xff7],0x10 (1000_24AA / 0x124AA)
    // UInt8[DS, 0xFF7] |= 0x10;
    UInt8[DS, 0xFF7] = Alu.Or8(UInt8[DS, 0xFF7], 0x10);
    // RET  (1000_24AF / 0x124AF)
    return NearRet();
    label_1000_24B0_124B0:
    // CALL 0x1000:a1e8 (1000_24B0 / 0x124B0)
    NearCall(cs1, 0x24B3, IncUnknown47A8_1000_A1E8_1A1E8);
    // MOV word ptr [0xc0],0x0 (1000_24B3 / 0x124B3)
    UInt16[DS, 0xC0] = 0x0;
    // OR byte ptr [0xbf],0x1 (1000_24B9 / 0x124B9)
    // UInt8[DS, 0xBF] |= 0x1;
    UInt8[DS, 0xBF] = Alu.Or8(UInt8[DS, 0xBF], 0x1);
    // CALL 0x1000:24d2 (1000_24BE / 0x124BE)
    NearCall(cs1, 0x24C1, unknown_1000_24D2_124D2);
    // ADD AH,0x7 (1000_24C1 / 0x124C1)
    // AH += 0x7;
    AH = Alu.Add8(AH, 0x7);
    // MOV AL,0xb (1000_24C4 / 0x124C4)
    AL = 0xB;
    // CMP AH,0xc (1000_24C6 / 0x124C6)
    Alu.Sub8(AH, 0xC);
    // JNZ 0x1000:24cf (1000_24C9 / 0x124C9)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:26da (1000_24CF / 0x124CF)
      // Jump converted to non entry function call
      return unknown_1000_1045_11045(0x126DA - cs1 * 0x10);
    }
    // INC byte ptr [0x11bb] (1000_24CB / 0x124CB)
    UInt8[DS, 0x11BB] = Alu.Inc8(UInt8[DS, 0x11BB]);
    label_1000_24CF_124CF:
    // JMP 0x1000:26da (1000_24CF / 0x124CF)
    // Jump converted to non entry function call
    return unknown_1000_1045_11045(0x126DA - cs1 * 0x10);
    entry:
    label_1000_A172_1A172:
    // MOV AX,[0x47c4] (1000_A172 / 0x1A172)
    AX = UInt16[DS, 0x47C4];
    // CMP AX,0x1 (1000_A175 / 0x1A175)
    Alu.Sub16(AX, 0x1);
    // JNZ 0x1000:a17e (1000_A178 / 0x1A178)
    if(!ZeroFlag) {
      goto label_1000_A17E_1A17E;
    }
    // INC byte ptr [0xf5] (1000_A17A / 0x1A17A)
    UInt8[DS, 0xF5] = Alu.Inc8(UInt8[DS, 0xF5]);
    label_1000_A17E_1A17E:
    // CMP AX,0x3 (1000_A17E / 0x1A17E)
    Alu.Sub16(AX, 0x3);
    // JNZ 0x1000:a156 (1000_A181 / 0x1A181)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A156 / 0x1A156)
      return NearRet();
    }
    // JMP 0x1000:24a3 (1000_A183 / 0x1A183)
    goto label_1000_24A3_124A3;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_A125_1A125(0x1A186 - cs1 * 0x10);
  }
  
  public Action unknown_1000_A1C4_1A1C4(int gotoTarget) {
    label_1000_A1C4_1A1C4:
    // MOV byte ptr [0x47a5],0xff (1000_A1C4 / 0x1A1C4)
    UInt8[DS, 0x47A5] = 0xFF;
    // RET  (1000_A1C9 / 0x1A1C9)
    return NearRet();
  }
  
  public Action unknown_1000_A1D0_1A1D0(int gotoTarget) {
    label_1000_A1D0_1A1D0:
    // MOV byte ptr [0x47a5],0xff (1000_A1D0 / 0x1A1D0)
    UInt8[DS, 0x47A5] = 0xFF;
    // RET  (1000_A1D5 / 0x1A1D5)
    return NearRet();
  }
  
  public Action unknown_1000_A1D6_1A1D6(int gotoTarget) {
    label_1000_A1D6_1A1D6:
    // MOV byte ptr [0x47a5],0x0 (1000_A1D6 / 0x1A1D6)
    UInt8[DS, 0x47A5] = 0x0;
    // RET  (1000_A1DB / 0x1A1DB)
    return NearRet();
  }
  
  public Action unknown_1000_A1DC_1A1DC(int gotoTarget) {
    label_1000_A1DC_1A1DC:
    // MOV byte ptr [0x47a5],0x80 (1000_A1DC / 0x1A1DC)
    UInt8[DS, 0x47A5] = 0x80;
    // RET  (1000_A1E1 / 0x1A1E1)
    return NearRet();
  }
  
  public Action unknown_1000_A1E2_1A1E2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA1E2: goto label_1000_A1E2_1A1E2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_A1E2_1A1E2:
    // CMP byte ptr [0x47a5],0xff (1000_A1E2 / 0x1A1E2)
    Alu.Sub8(UInt8[DS, 0x47A5], 0xFF);
    // RET  (1000_A1E7 / 0x1A1E7)
    return NearRet();
  }
  
  public Action IncUnknown47A8_1000_A1E8_1A1E8(int gotoTarget) {
    label_1000_A1E8_1A1E8:
    // INC byte ptr [0x47a8] (1000_A1E8 / 0x1A1E8)
    UInt8[DS, 0x47A8] = Alu.Inc8(UInt8[DS, 0x47A8]);
    // RET  (1000_A1EC / 0x1A1EC)
    return NearRet();
  }
  
  public Action unknown_1000_A1F7_1A1F7(int gotoTarget) {
    label_1000_A1F7_1A1F7:
    // MOV BL,byte ptr [0x2a] (1000_A1F7 / 0x1A1F7)
    BL = UInt8[DS, 0x2A];
    // MOV AX,0x12f8 (1000_A1FB / 0x1A1FB)
    AX = 0x12F8;
    // CMP BL,0x14 (1000_A1FE / 0x1A1FE)
    Alu.Sub8(BL, 0x14);
    // JC 0x1000:a216 (1000_A201 / 0x1A201)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:1771 (1000_A216 / 0x1A216)
      // Jump converted to non entry function call
      return unknown_1000_102F_1102F(0x11771 - cs1 * 0x10);
    }
    // MOV AX,0x134f (1000_A203 / 0x1A203)
    AX = 0x134F;
    // CMP BL,0x18 (1000_A206 / 0x1A206)
    Alu.Sub8(BL, 0x18);
    // JC 0x1000:a216 (1000_A209 / 0x1A209)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:1771 (1000_A216 / 0x1A216)
      // Jump converted to non entry function call
      return unknown_1000_102F_1102F(0x11771 - cs1 * 0x10);
    }
    // MOV AX,0x1370 (1000_A20B / 0x1A20B)
    AX = 0x1370;
    // CMP BL,0x30 (1000_A20E / 0x1A20E)
    Alu.Sub8(BL, 0x30);
    // JC 0x1000:a216 (1000_A211 / 0x1A211)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:1771 (1000_A216 / 0x1A216)
      // Jump converted to non entry function call
      return unknown_1000_102F_1102F(0x11771 - cs1 * 0x10);
    }
    // MOV AX,0x12db (1000_A213 / 0x1A213)
    AX = 0x12DB;
    label_1000_A216_1A216:
    // JMP 0x1000:1771 (1000_A216 / 0x1A216)
    // Jump converted to non entry function call
    return unknown_1000_102F_1102F(0x11771 - cs1 * 0x10);
  }
  
  public Action unknown_1000_A219_1A219(int gotoTarget) {
    label_1000_A219_1A219:
    // TEST byte ptr [SI],0x80 (1000_A219 / 0x1A219)
    Alu.And8(UInt8[DS, SI], 0x80);
    // JNZ 0x1000:a234 (1000_A21C / 0x1A21C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A234 / 0x1A234)
      return NearRet();
    }
    // INC byte ptr [0x2a] (1000_A21E / 0x1A21E)
    UInt8[DS, 0x2A] = Alu.Inc8(UInt8[DS, 0x2A]);
    // MOV byte ptr [0xff],0x0 (1000_A222 / 0x1A222)
    UInt8[DS, 0xFF] = 0x0;
    // CALL 0x1000:b17a (1000_A227 / 0x1A227)
    NearCall(cs1, 0xA22A, unknown_1000_B17A_1B17A);
    // CMP byte ptr [0x2a],0x1 (1000_A22A / 0x1A22A)
    Alu.Sub8(UInt8[DS, 0x2A], 0x1);
    // JNZ 0x1000:a234 (1000_A22F / 0x1A22F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A234 / 0x1A234)
      return NearRet();
    }
    // CALL 0x1000:100b (1000_A231 / 0x1A231)
    NearCall(cs1, 0xA234, unknown_1000_100B_1100B);
    label_1000_A234_1A234:
    // RET  (1000_A234 / 0x1A234)
    return NearRet();
  }
  
  public Action unknown_1000_A235_1A235(int gotoTarget) {
    label_1000_A235_1A235:
    // TEST byte ptr [SI],0x80 (1000_A235 / 0x1A235)
    Alu.And8(UInt8[DS, SI], 0x80);
    // JNZ 0x1000:a234 (1000_A238 / 0x1A238)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A234 / 0x1A234)
      return NearRet();
    }
    // MOV AL,[0x2a] (1000_A23A / 0x1A23A)
    AL = UInt8[DS, 0x2A];
    // AND AL,0xfc (1000_A23D / 0x1A23D)
    // AL &= 0xFC;
    AL = Alu.And8(AL, 0xFC);
    // ADD AL,0x4 (1000_A23F / 0x1A23F)
    // AL += 0x4;
    AL = Alu.Add8(AL, 0x4);
    // JMP 0x1000:121f (1000_A241 / 0x1A241)
    // Jump converted to entry function call
    return unknown_1000_121F_1121F(0);
  }
  
  public Action unknown_1000_A244_1A244(int gotoTarget) {
    label_1000_A244_1A244:
    // XOR AL,AL (1000_A244 / 0x1A244)
    AL = 0;
    // JMP 0x1000:a24a (1000_A246 / 0x1A246)
    goto label_1000_A24A_1A24A;
    label_1000_A24A_1A24A:
    // MOV [0x476d],AL (1000_A24A / 0x1A24A)
    UInt8[DS, 0x476D] = AL;
    // MOV byte ptr [0x9f],0x0 (1000_A24D / 0x1A24D)
    UInt8[DS, 0x9F] = 0x0;
    // MOV BP,0x1ffe (1000_A252 / 0x1A252)
    BP = 0x1FFE;
    // MOV BX,0xf66 (1000_A255 / 0x1A255)
    BX = 0xF66;
    // CALL 0x1000:d323 (1000_A258 / 0x1A258)
    NearCall(cs1, 0xA25B, unknown_1000_D323_1D323);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_A25B_1A25B(0);
  }
  
  public Action unknown_1000_A25B_1A25B(int gotoTarget) {
    label_1000_A25B_1A25B:
    // PUSH SI (1000_A25B / 0x1A25B)
    Stack.Push(SI);
    // PUSH DS (1000_A25C / 0x1A25C)
    Stack.Push(DS);
    // POP ES (1000_A25D / 0x1A25D)
    ES = Stack.Pop();
    // MOV AX,[0x4780] (1000_A25E / 0x1A25E)
    AX = UInt16[DS, 0x4780];
    // MOV BX,0xa01 (1000_A261 / 0x1A261)
    BX = 0xA01;
    // MOV DI,0x197c (1000_A264 / 0x1A264)
    DI = 0x197C;
    label_1000_A267_1A267:
    // ADD DI,0x8 (1000_A267 / 0x1A267)
    // DI += 0x8;
    DI = Alu.Add16(DI, 0x8);
    // SCASW ES:DI (1000_A26A / 0x1A26A)
    Alu.Sub16(AX, UInt16[ES, DI]);
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JA 0x1000:a267 (1000_A26B / 0x1A26B)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_A267_1A267;
    }
    // JNZ 0x1000:a28c (1000_A26D / 0x1A26D)
    if(!ZeroFlag) {
      goto label_1000_A28C_1A28C;
    }
    // CMP word ptr [DI],0x38 (1000_A26F / 0x1A26F)
    Alu.Sub16(UInt16[DS, DI], 0x38);
    // JNZ 0x1000:a276 (1000_A272 / 0x1A272)
    if(!ZeroFlag) {
      goto label_1000_A276_1A276;
    }
    // MOV BH,0x10 (1000_A274 / 0x1A274)
    BH = 0x10;
    label_1000_A276_1A276:
    // MOV AL,[0x47d0] (1000_A276 / 0x1A276)
    AL = UInt8[DS, 0x47D0];
    // DEC AL (1000_A279 / 0x1A279)
    AL = Alu.Dec8(AL);
    // JS 0x1000:a284 (1000_A27B / 0x1A27B)
    if(SignFlag) {
      goto label_1000_A284_1A284;
    }
    // SHL AL,1 (1000_A27D / 0x1A27D)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // INC AX (1000_A27F / 0x1A27F)
    AX = Alu.Inc16(AX);
    // SHL AL,1 (1000_A280 / 0x1A280)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // ADD BH,AL (1000_A282 / 0x1A282)
    // BH += AL;
    BH = Alu.Add8(BH, AL);
    label_1000_A284_1A284:
    // MOV word ptr [0x47e1],BX (1000_A284 / 0x1A284)
    UInt16[DS, 0x47E1] = BX;
    // MOV word ptr [0x47e4],DI (1000_A288 / 0x1A288)
    UInt16[DS, 0x47E4] = DI;
    label_1000_A28C_1A28C:
    // POP SI (1000_A28C / 0x1A28C)
    SI = Stack.Pop();
    // RET  (1000_A28D / 0x1A28D)
    return NearRet();
  }
  
  public Action unknown_1000_A30B_1A30B(int gotoTarget) {
    label_1000_A30B_1A30B:
    // LODSB ES:SI (1000_A30B / 0x1A30B)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0x80 (1000_A30D / 0x1A30D)
    Alu.Sub8(AL, 0x80);
    // JNC 0x1000:a32a (1000_A30F / 0x1A30F)
    if(!CarryFlag) {
      goto label_1000_A32A_1A32A;
    }
    // PUSH BX (1000_A311 / 0x1A311)
    Stack.Push(BX);
    // MOV BL,byte ptr ES:[SI] (1000_A312 / 0x1A312)
    BL = UInt8[ES, SI];
    // INC SI (1000_A315 / 0x1A315)
    SI = Alu.Inc16(SI);
    // XOR BH,BH (1000_A316 / 0x1A316)
    BH = 0;
    // CMP AL,0x1 (1000_A318 / 0x1A318)
    Alu.Sub8(AL, 0x1);
    // JZ 0x1000:a322 (1000_A31A / 0x1A31A)
    if(ZeroFlag) {
      goto label_1000_A322_1A322;
    }
    // MOV AX,word ptr [BX + 0x0] (1000_A31C / 0x1A31C)
    AX = UInt16[DS, BX];
    // POP BX (1000_A320 / 0x1A320)
    BX = Stack.Pop();
    // RET  (1000_A321 / 0x1A321)
    return NearRet();
    label_1000_A322_1A322:
    // MOV AL,byte ptr [BX + 0x0] (1000_A322 / 0x1A322)
    AL = UInt8[DS, BX];
    // XOR AH,AH (1000_A326 / 0x1A326)
    AH = 0;
    // POP BX (1000_A328 / 0x1A328)
    BX = Stack.Pop();
    // RET  (1000_A329 / 0x1A329)
    return NearRet();
    label_1000_A32A_1A32A:
    // JNZ 0x1000:a331 (1000_A32A / 0x1A32A)
    if(!ZeroFlag) {
      goto label_1000_A331_1A331;
    }
    // LODSB ES:SI (1000_A32C / 0x1A32C)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_A32E / 0x1A32E)
    AH = 0;
    // RET  (1000_A330 / 0x1A330)
    return NearRet();
    label_1000_A331_1A331:
    // LODSW ES:SI (1000_A331 / 0x1A331)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // RET  (1000_A333 / 0x1A333)
    return NearRet();
  }
  
  public Action unknown_1000_A334_1A334(int gotoTarget) {
    label_1000_A334_1A334:
    // AND BX,0x1f (1000_A334 / 0x1A334)
    // BX &= 0x1F;
    BX = Alu.And16(BX, 0x1F);
    // JMP word ptr CS:[BX + 0xa376] (1000_A337 / 0x1A337)
    // Indirect jump to word ptr CS:[BX + 0xa376], generating possible targets from emulator records
    uint targetAddress_1000_A337 = (uint)(UInt16[cs1, (ushort)(BX + 0xA376)]);
    switch(targetAddress_1000_A337) {
      case 0xA348 : throw FailAsUntested("Would have been a goto but label label_1000_A348_1A348 does not exist because no instruction was found there that belongs to a function.");
      case 0xA345 : throw FailAsUntested("Would have been a goto but label label_1000_A345_1A345 does not exist because no instruction was found there that belongs to a function.");
      case 0xA342 : throw FailAsUntested("Would have been a goto but label label_1000_A342_1A342 does not exist because no instruction was found there that belongs to a function.");
      case 0xA356 : throw FailAsUntested("Would have been a goto but label label_1000_A356_1A356 does not exist because no instruction was found there that belongs to a function.");
      case 0xA34F : throw FailAsUntested("Would have been a goto but label label_1000_A34F_1A34F does not exist because no instruction was found there that belongs to a function.");
      case 0xA33F : throw FailAsUntested("Would have been a goto but label label_1000_A33F_1A33F does not exist because no instruction was found there that belongs to a function.");
      case 0xA35D : throw FailAsUntested("Would have been a goto but label label_1000_A35D_1A35D does not exist because no instruction was found there that belongs to a function.");
      case 0xA33C : throw FailAsUntested("Would have been a goto but label label_1000_A33C_1A33C does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_A337);
        break;
    }
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x1A33C");
  }
  
  public Action unknown_1000_A396_1A396(int gotoTarget) {
    label_1000_A396_1A396:
    // SUB SP,0x32 (1000_A396 / 0x1A396)
    // SP -= 0x32;
    SP = Alu.Sub16(SP, 0x32);
    // MOV BP,SP (1000_A399 / 0x1A399)
    BP = SP;
    // SHL AX,1 (1000_A39B / 0x1A39B)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // LES SI,[0xaa72] (1000_A39D / 0x1A39D)
    SI = UInt16[DS, 0xAA72];
    ES = UInt16[DS, 0xAA74];
    // ADD SI,AX (1000_A3A1 / 0x1A3A1)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV SI,word ptr ES:[SI + -0x2] (1000_A3A3 / 0x1A3A3)
    SI = UInt16[ES, (ushort)(SI - 0x2)];
    label_1000_A3A7_1A3A7:
    // CALL 0x1000:a30b (1000_A3A7 / 0x1A3A7)
    NearCall(cs1, 0xA3AA, unknown_1000_A30B_1A30B);
    // MOV DX,AX (1000_A3AA / 0x1A3AA)
    DX = AX;
    label_1000_A3AC_1A3AC:
    // LODSB ES:SI (1000_A3AC / 0x1A3AC)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_A3AE / 0x1A3AE)
    Alu.Sub8(AL, 0xFF);
    // JZ 0x1000:a3cb (1000_A3B0 / 0x1A3B0)
    if(ZeroFlag) {
      goto label_1000_A3CB_1A3CB;
    }
    // TEST AL,0x80 (1000_A3B2 / 0x1A3B2)
    Alu.And8(AL, 0x80);
    // JNZ 0x1000:a3c0 (1000_A3B4 / 0x1A3B4)
    if(!ZeroFlag) {
      goto label_1000_A3C0_1A3C0;
    }
    // MOV BL,AL (1000_A3B6 / 0x1A3B6)
    BL = AL;
    // CALL 0x1000:a30b (1000_A3B8 / 0x1A3B8)
    NearCall(cs1, 0xA3BB, unknown_1000_A30B_1A30B);
    // CALL 0x1000:a334 (1000_A3BB / 0x1A3BB)
    NearCall(cs1, 0xA3BE, unknown_1000_A334_1A334);
    // JMP 0x1000:a3ac (1000_A3BE / 0x1A3BE)
    goto label_1000_A3AC_1A3AC;
    label_1000_A3C0_1A3C0:
    // MOV word ptr [BP + 0x0],DX (1000_A3C0 / 0x1A3C0)
    UInt16[SS, BP] = DX;
    // MOV word ptr [BP + 0x2],AX (1000_A3C3 / 0x1A3C3)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // ADD BP,0x4 (1000_A3C6 / 0x1A3C6)
    // BP += 0x4;
    BP = Alu.Add16(BP, 0x4);
    // JMP 0x1000:a3a7 (1000_A3C9 / 0x1A3C9)
    goto label_1000_A3A7_1A3A7;
    label_1000_A3CB_1A3CB:
    // MOV SI,SP (1000_A3CB / 0x1A3CB)
    SI = SP;
    // CMP SI,BP (1000_A3CD / 0x1A3CD)
    Alu.Sub16(SI, BP);
    // JZ 0x1000:a3e2 (1000_A3CF / 0x1A3CF)
    if(ZeroFlag) {
      goto label_1000_A3E2_1A3E2;
    }
    // MOV word ptr [BP + 0x0],DX (1000_A3D1 / 0x1A3D1)
    UInt16[SS, BP] = DX;
    // LODSW SI (1000_A3D4 / 0x1A3D4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_A3D5 / 0x1A3D5)
    DX = AX;
    label_1000_A3D7_1A3D7:
    // LODSW SI (1000_A3D7 / 0x1A3D7)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_A3D8 / 0x1A3D8)
    BX = AX;
    // LODSW SI (1000_A3DA / 0x1A3DA)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CALL 0x1000:a334 (1000_A3DB / 0x1A3DB)
    NearCall(cs1, 0xA3DE, unknown_1000_A334_1A334);
    // CMP SI,BP (1000_A3DE / 0x1A3DE)
    Alu.Sub16(SI, BP);
    // JC 0x1000:a3d7 (1000_A3E0 / 0x1A3E0)
    if(CarryFlag) {
      goto label_1000_A3D7_1A3D7;
    }
    label_1000_A3E2_1A3E2:
    // ADD SP,0x32 (1000_A3E2 / 0x1A3E2)
    // SP += 0x32;
    SP = Alu.Add16(SP, 0x32);
    // OR DX,DX (1000_A3E5 / 0x1A3E5)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // RET  (1000_A3E7 / 0x1A3E7)
    return NearRet();
  }
  
  public Action unknown_1000_A42C_1A42C(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA435: goto label_1000_A435_1A435;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_A42C_1A42C:
    // MOV AX,0x55 (1000_A42C / 0x1A42C)
    AX = 0x55;
    // CALL 0x1000:c13e (1000_A42F / 0x1A42F)
    NearCall(cs1, 0xA432, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AL,[0xceeb] (1000_A432 / 0x1A432)
    AL = UInt8[DS, 0xCEEB];
    label_1000_A435_1A435:
    // PUSH word ptr [0xdbda] (1000_A435 / 0x1A435)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_A439 / 0x1A439)
    NearCall(cs1, 0xA43C, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CBW  (1000_A43C / 0x1A43C)
    AX = (ushort)((short)((sbyte)AL));
    // CALL 0x1000:a465 (1000_A43D / 0x1A43D)
    NearCall(cs1, 0xA440, unknown_1000_A465_1A465);
    // SHL AX,1 (1000_A440 / 0x1A440)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD AL,0x1c (1000_A442 / 0x1A442)
    // AL += 0x1C;
    AL = Alu.Add8(AL, 0x1C);
    // CALL 0x1000:c22f (1000_A444 / 0x1A444)
    NearCall(cs1, 0xA447, draw_sprite_ida_1000_C22F_1C22F);
    // POP word ptr [0xdbda] (1000_A447 / 0x1A447)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_A44B / 0x1A44B)
    return NearRet();
  }
  
  public Action unknown_1000_A44C_1A44C(int gotoTarget) {
    label_1000_A44C_1A44C:
    // MOV AL,[0x28e7] (1000_A44C / 0x1A44C)
    AL = UInt8[DS, 0x28E7];
    // ADD AL,0x8 (1000_A44F / 0x1A44F)
    // AL += 0x8;
    AL = Alu.Add8(AL, 0x8);
    // JMP 0x1000:a435 (1000_A451 / 0x1A451)
    // Jump converted to non entry function call
    return unknown_1000_A42C_1A42C(0x1A435 - cs1 * 0x10);
  }
  
  public Action unknown_1000_A453_1A453(int gotoTarget) {
    label_1000_A453_1A453:
    // SUB DX,word ptr [0x2886] (1000_A453 / 0x1A453)
    // DX -= UInt16[DS, 0x2886];
    DX = Alu.Sub16(DX, UInt16[DS, 0x2886]);
    // SUB BX,word ptr [0x2888] (1000_A457 / 0x1A457)
    // BX -= UInt16[DS, 0x2888];
    BX = Alu.Sub16(BX, UInt16[DS, 0x2888]);
    // RET  (1000_A45B / 0x1A45B)
    return NearRet();
  }
  
  public Action unknown_1000_A45C_1A45C(int gotoTarget) {
    label_1000_A45C_1A45C:
    // ADD DX,word ptr [0x2886] (1000_A45C / 0x1A45C)
    // DX += UInt16[DS, 0x2886];
    DX = Alu.Add16(DX, UInt16[DS, 0x2886]);
    // ADD BX,word ptr [0x2888] (1000_A460 / 0x1A460)
    // BX += UInt16[DS, 0x2888];
    BX = Alu.Add16(BX, UInt16[DS, 0x2888]);
    // RET  (1000_A464 / 0x1A464)
    return NearRet();
  }
  
  public Action unknown_1000_A465_1A465(int gotoTarget) {
    label_1000_A465_1A465:
    // PUSH AX (1000_A465 / 0x1A465)
    Stack.Push(AX);
    // MOV DX,word ptr [0x28c7] (1000_A466 / 0x1A466)
    DX = UInt16[DS, 0x28C7];
    // MOV BX,0x28dc (1000_A46A / 0x1A46A)
    BX = 0x28DC;
    // XLAT BX (1000_A46D / 0x1A46D)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // MOV BL,0x7 (1000_A46E / 0x1A46E)
    BL = 0x7;
    // MUL BL (1000_A470 / 0x1A470)
    Cpu.Mul8(BL);
    // MOV BX,AX (1000_A472 / 0x1A472)
    BX = AX;
    // ADD BX,word ptr [0x28c9] (1000_A474 / 0x1A474)
    // BX += UInt16[DS, 0x28C9];
    BX = Alu.Add16(BX, UInt16[DS, 0x28C9]);
    // CALL 0x1000:a45c (1000_A478 / 0x1A478)
    NearCall(cs1, 0xA47B, unknown_1000_A45C_1A45C);
    // POP AX (1000_A47B / 0x1A47B)
    AX = Stack.Pop();
    // RET  (1000_A47C / 0x1A47C)
    return NearRet();
  }
  
  public Action unknown_1000_A47D_1A47D(int gotoTarget) {
    label_1000_A47D_1A47D:
    // TEST word ptr [0xdbc8],0x8 (1000_A47D / 0x1A47D)
    Alu.And16(UInt16[DS, 0xDBC8], 0x8);
    // JZ 0x1000:a48b (1000_A483 / 0x1A483)
    if(ZeroFlag) {
      goto label_1000_A48B_1A48B;
    }
    // MOV SI,0x28a6 (1000_A485 / 0x1A485)
    SI = 0x28A6;
    // CALL 0x1000:a49c (1000_A488 / 0x1A488)
    throw FailAsUntested("Could not find a valid function at address 1000_A49C / 0x1A49C");
    label_1000_A48B_1A48B:
    // TEST word ptr [0xdbc8],0x800 (1000_A48B / 0x1A48B)
    Alu.And16(UInt16[DS, 0xDBC8], 0x800);
    // JZ 0x1000:a4c5 (1000_A491 / 0x1A491)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A4C5 / 0x1A4C5)
      return NearRet();
    }
    // MOV SI,0x28ae (1000_A493 / 0x1A493)
    SI = 0x28AE;
    // CALL 0x1000:a49c (1000_A496 / 0x1A496)
    throw FailAsUntested("Could not find a valid function at address 1000_A49C / 0x1A49C");
    // MOV SI,0x28b6 (1000_A499 / 0x1A499)
    SI = 0x28B6;
    label_1000_A49C_1A49C:
    // PUSH word ptr [0xdbda] (1000_A49C / 0x1A49C)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_A4A0 / 0x1A4A0)
    NearCall(cs1, 0xA4A3, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV AX,0x55 (1000_A4A3 / 0x1A4A3)
    AX = 0x55;
    // CALL 0x1000:c13e (1000_A4A6 / 0x1A4A6)
    NearCall(cs1, 0xA4A9, open_sprite_sheet_ida_1000_C13E_1C13E);
    // LODSB SI (1000_A4A9 / 0x1A4A9)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AAM 0xa (1000_A4AA / 0x1A4AA)
    Cpu.Aam(0xA);
    // MOV AL,AH (1000_A4AC / 0x1A4AC)
    AL = AH;
    // XOR AH,AH (1000_A4AE / 0x1A4AE)
    AH = 0;
    // ADD AL,0x3 (1000_A4B0 / 0x1A4B0)
    // AL += 0x3;
    AL = Alu.Add8(AL, 0x3);
    // MOV byte ptr [SI],0x1 (1000_A4B2 / 0x1A4B2)
    UInt8[DS, SI] = 0x1;
    // INC SI (1000_A4B5 / 0x1A4B5)
    SI = Alu.Inc16(SI);
    // MOV DX,word ptr [SI] (1000_A4B6 / 0x1A4B6)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_A4B8 / 0x1A4B8)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // CALL 0x1000:a45c (1000_A4BB / 0x1A4BB)
    NearCall(cs1, 0xA4BE, unknown_1000_A45C_1A45C);
    // CALL 0x1000:c22f (1000_A4BE / 0x1A4BE)
    NearCall(cs1, 0xA4C1, draw_sprite_ida_1000_C22F_1C22F);
    // POP word ptr [0xdbda] (1000_A4C1 / 0x1A4C1)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    label_1000_A4C5_1A4C5:
    // RET  (1000_A4C5 / 0x1A4C5)
    return NearRet();
  }
  
  public Action unknown_1000_A4C6_1A4C6(int gotoTarget) {
    label_1000_A4C6_1A4C6:
    // CALL 0x1000:ae2f (1000_A4C6 / 0x1A4C6)
    NearCall(cs1, 0xA4C9, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:a4de (1000_A4C9 / 0x1A4C9)
    if(ZeroFlag) {
      goto label_1000_A4DE_1A4DE;
    }
    // MOV SI,0x288e (1000_A4CB / 0x1A4CB)
    SI = 0x288E;
    // CALL 0x1000:a502 (1000_A4CE / 0x1A4CE)
    NearCall(cs1, 0xA4D1, unknown_1000_A502_1A502);
    // TEST word ptr [0xdbc8],0x4 (1000_A4D1 / 0x1A4D1)
    Alu.And16(UInt16[DS, 0xDBC8], 0x4);
    // JNZ 0x1000:a4de (1000_A4D7 / 0x1A4D7)
    if(!ZeroFlag) {
      goto label_1000_A4DE_1A4DE;
    }
    // MOV byte ptr [0x288f],0x0 (1000_A4D9 / 0x1A4D9)
    UInt8[DS, 0x288F] = 0x0;
    label_1000_A4DE_1A4DE:
    // CALL 0x1000:ae28 (1000_A4DE / 0x1A4DE)
    NearCall(cs1, 0xA4E1, IsUnknownDBC80x100_1000_AE28_1AE28);
    // JZ 0x1000:a540 (1000_A4E1 / 0x1A4E1)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A540 / 0x1A540)
      return NearRet();
    }
    // MOV SI,0x2896 (1000_A4E3 / 0x1A4E3)
    SI = 0x2896;
    // CALL 0x1000:a502 (1000_A4E6 / 0x1A4E6)
    NearCall(cs1, 0xA4E9, unknown_1000_A502_1A502);
    // MOV SI,0x289e (1000_A4E9 / 0x1A4E9)
    SI = 0x289E;
    // CALL 0x1000:a502 (1000_A4EC / 0x1A4EC)
    NearCall(cs1, 0xA4EF, unknown_1000_A502_1A502);
    // TEST word ptr [0xdbc8],0x400 (1000_A4EF / 0x1A4EF)
    Alu.And16(UInt16[DS, 0xDBC8], 0x400);
    // JNZ 0x1000:a540 (1000_A4F5 / 0x1A4F5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A540 / 0x1A540)
      return NearRet();
    }
    // MOV byte ptr [0x2897],0x0 (1000_A4F7 / 0x1A4F7)
    UInt8[DS, 0x2897] = 0x0;
    // MOV byte ptr [0x289f],0x0 (1000_A4FC / 0x1A4FC)
    UInt8[DS, 0x289F] = 0x0;
    // RET  (1000_A501 / 0x1A501)
    return NearRet();
    label_1000_A540_1A540:
    // RET  (1000_A540 / 0x1A540)
    return NearRet();
  }
  
  public Action unknown_1000_A502_1A502(int gotoTarget) {
    label_1000_A502_1A502:
    // PUSH word ptr [0xdbda] (1000_A502 / 0x1A502)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_A506 / 0x1A506)
    NearCall(cs1, 0xA509, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // PUSH SI (1000_A509 / 0x1A509)
    Stack.Push(SI);
    // MOV AX,0x55 (1000_A50A / 0x1A50A)
    AX = 0x55;
    // CALL 0x1000:c13e (1000_A50D / 0x1A50D)
    NearCall(cs1, 0xA510, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV DX,word ptr [SI + 0x2] (1000_A510 / 0x1A510)
    DX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BX,0x22 (1000_A513 / 0x1A513)
    BX = 0x22;
    // CALL 0x1000:a45c (1000_A516 / 0x1A516)
    NearCall(cs1, 0xA519, unknown_1000_A45C_1A45C);
    // MOV AX,0x1 (1000_A519 / 0x1A519)
    AX = 0x1;
    // CALL 0x1000:c2fd (1000_A51C / 0x1A51C)
    NearCall(cs1, 0xA51F, unknown_1000_C2FD_1C2FD);
    // POP SI (1000_A51F / 0x1A51F)
    SI = Stack.Pop();
    // LODSB SI (1000_A520 / 0x1A520)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV byte ptr [SI],0x1 (1000_A521 / 0x1A521)
    UInt8[DS, SI] = 0x1;
    // NOT AX (1000_A524 / 0x1A524)
    AX = (ushort)~AX;
    // SHR AL,1 (1000_A526 / 0x1A526)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_A528 / 0x1A528)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // CBW  (1000_A52A / 0x1A52A)
    AX = (ushort)((short)((sbyte)AL));
    // ADD AX,BX (1000_A52B / 0x1A52B)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // MOV BX,AX (1000_A52D / 0x1A52D)
    BX = AX;
    // SUB AX,word ptr [0x2888] (1000_A52F / 0x1A52F)
    // AX -= UInt16[DS, 0x2888];
    AX = Alu.Sub16(AX, UInt16[DS, 0x2888]);
    // MOV word ptr [SI + 0x3],AX (1000_A533 / 0x1A533)
    UInt16[DS, (ushort)(SI + 0x3)] = AX;
    // MOV AX,0x2 (1000_A536 / 0x1A536)
    AX = 0x2;
    // CALL 0x1000:c22f (1000_A539 / 0x1A539)
    NearCall(cs1, 0xA53C, draw_sprite_ida_1000_C22F_1C22F);
    // POP word ptr [0xdbda] (1000_A53C / 0x1A53C)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_A4C6_1A4C6(0x1A540 - cs1 * 0x10);
  }
  
  public Action unknown_1000_A541_1A541(int gotoTarget) {
    label_1000_A541_1A541:
    // MOV AL,[0x28e7] (1000_A541 / 0x1A541)
    AL = UInt8[DS, 0x28E7];
    // MOV [0x28e8],AL (1000_A544 / 0x1A544)
    UInt8[DS, 0x28E8] = AL;
    // CALL 0x1000:daa3 (1000_A547 / 0x1A547)
    NearCall(cs1, 0xA54A, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3);
    // CALL 0x1000:d95b (1000_A54A / 0x1A54A)
    NearCall(cs1, 0xA54D, SetMapClickHandlerAddressToInGame_1000_D95B_1D95B);
    // MOV SI,0x2886 (1000_A54D / 0x1A54D)
    SI = 0x2886;
    // JMP 0x1000:c4f0 (1000_A550 / 0x1A550)
    // Jump converted to entry function call
    return rect_at_si_to_regs_ida_1000_C4F0_1C4F0(0);
  }
  
  public Action unknown_1000_A576_1A576(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA3F9: break;
      case 0: goto entry; break; //
    }
    label_1000_A3F9_1A3F9:
    // PUSH word ptr [0xdbda] (1000_A3F9 / 0x1A3F9)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_A3FD / 0x1A3FD)
    NearCall(cs1, 0xA400, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV AX,0x55 (1000_A400 / 0x1A400)
    AX = 0x55;
    // CALL 0x1000:c13e (1000_A403 / 0x1A403)
    NearCall(cs1, 0xA406, open_sprite_sheet_ida_1000_C13E_1C13E);
    // XOR AX,AX (1000_A406 / 0x1A406)
    AX = 0;
    // MOV DX,word ptr [0x2886] (1000_A408 / 0x1A408)
    DX = UInt16[DS, 0x2886];
    // MOV BX,word ptr [0x2888] (1000_A40C / 0x1A40C)
    BX = UInt16[DS, 0x2888];
    // CALL 0x1000:c22f (1000_A410 / 0x1A410)
    NearCall(cs1, 0xA413, draw_sprite_ida_1000_C22F_1C22F);
    // POP word ptr [0xdbda] (1000_A413 / 0x1A413)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // CALL 0x1000:a4c6 (1000_A417 / 0x1A417)
    NearCall(cs1, 0xA41A, unknown_1000_A4C6_1A4C6);
    // CALL 0x1000:a47d (1000_A41A / 0x1A41A)
    NearCall(cs1, 0xA41D, unknown_1000_A47D_1A47D);
    // CALL 0x1000:a42c (1000_A41D / 0x1A41D)
    NearCall(cs1, 0xA420, unknown_1000_A42C_1A42C);
    // CALL 0x1000:a44c (1000_A420 / 0x1A420)
    NearCall(cs1, 0xA423, unknown_1000_A44C_1A44C);
    // CALL 0x1000:ac3a (1000_A423 / 0x1A423)
    NearCall(cs1, 0xA426, unknown_1000_AC3A_1AC3A);
    // MOV BX,0xa541 (1000_A426 / 0x1A426)
    BX = 0xA541;
    // JMP 0x1000:d32f (1000_A429 / 0x1A429)
    goto label_1000_D32F_1D32F;
    label_1000_A553_1A553:
    // CALL 0x1000:ae2f (1000_A553 / 0x1A553)
    NearCall(cs1, 0xA556, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:a540 (1000_A556 / 0x1A556)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A540 / 0x1A540)
      return NearRet();
    }
    // MOV AX,0x4 (1000_A558 / 0x1A558)
    AX = 0x4;
    // MOV BX,0x5 (1000_A55B / 0x1A55B)
    BX = 0x5;
    // CALL 0x1000:a8bc (1000_A55E / 0x1A55E)
    NearCall(cs1, 0xA561, unknown_1000_A8BC_1A8BC);
    // CALL 0x1000:a83f (1000_A561 / 0x1A561)
    NearCall(cs1, 0xA564, unknown_1000_A83F_1A83F);
    // CALL 0x1000:ade0 (1000_A564 / 0x1A564)
    NearCall(cs1, 0xA567, unknown_1000_ADE0_1ADE0);
    // MOV byte ptr [0xdc2b],0x1 (1000_A567 / 0x1A567)
    UInt8[DS, 0xDC2B] = 0x1;
    // MOV SI,0x3811 (1000_A56C / 0x1A56C)
    SI = 0x3811;
    // CALLF [0x3991] (1000_A56F / 0x1A56F)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_A56F = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_A56F) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A56F);
        break;
    }
    // JMP 0x1000:aba9 (1000_A573 / 0x1A573)
    // Jump converted to entry function call
    return unknown_1000_ABA9_1ABA9(0);
    entry:
    label_1000_A576_1A576:
    // MOV DI,0x2886 (1000_A576 / 0x1A576)
    DI = 0x2886;
    // CALL 0x1000:d6fe (1000_A579 / 0x1A579)
    NearCall(cs1, 0xA57C, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:a581 (1000_A57C / 0x1A57C)
    if(CarryFlag) {
      goto label_1000_A581_1A581;
    }
    // JMP 0x1000:d2e2 (1000_A57E / 0x1A57E)
    // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
    label_1000_A581_1A581:
    // CALL 0x1000:a453 (1000_A581 / 0x1A581)
    NearCall(cs1, 0xA584, unknown_1000_A453_1A453);
    // MOV DI,0x28bf (1000_A584 / 0x1A584)
    DI = 0x28BF;
    // CALL 0x1000:d6fe (1000_A587 / 0x1A587)
    NearCall(cs1, 0xA58A, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:a553 (1000_A58A / 0x1A58A)
    if(CarryFlag) {
      goto label_1000_A553_1A553;
    }
    // MOV DI,0x28c7 (1000_A58C / 0x1A58C)
    DI = 0x28C7;
    // CALL 0x1000:d6fe (1000_A58F / 0x1A58F)
    NearCall(cs1, 0xA592, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:a5b0 (1000_A592 / 0x1A592)
    if(CarryFlag) {
      goto label_1000_A5B0_1A5B0;
    }
    // CALL 0x1000:a672 (1000_A594 / 0x1A594)
    throw FailAsUntested("Could not find a valid function at address 1000_A672 / 0x1A672");
    // JNC 0x1000:a59f (1000_A597 / 0x1A597)
    if(!CarryFlag) {
      goto label_1000_A59F_1A59F;
    }
    // MOV byte ptr [0x28be],0x1 (1000_A599 / 0x1A599)
    UInt8[DS, 0x28BE] = 0x1;
    // RET  (1000_A59E / 0x1A59E)
    return NearRet();
    label_1000_A59F_1A59F:
    // CALL 0x1000:a69f (1000_A59F / 0x1A59F)
    throw FailAsUntested("Could not find a valid function at address 1000_A69F / 0x1A69F");
    // JNC 0x1000:a5aa (1000_A5A2 / 0x1A5A2)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_A5AA_1A5AA(0);
    }
    // MOV byte ptr [0x28be],0x2 (1000_A5A4 / 0x1A5A4)
    UInt8[DS, 0x28BE] = 0x2;
    // RET  (1000_A5A9 / 0x1A5A9)
    return NearRet();
    label_1000_A5B0_1A5B0:
    // SUB BX,word ptr [DI + 0x2] (1000_A5B0 / 0x1A5B0)
    // BX -= UInt16[DS, (ushort)(DI + 0x2)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // MOV AX,BX (1000_A5B3 / 0x1A5B3)
    AX = BX;
    // MOV BL,0x7 (1000_A5B5 / 0x1A5B5)
    BL = 0x7;
    // DIV BL (1000_A5B7 / 0x1A5B7)
    Cpu.Div8(BL);
    // MOV BX,0x28cf (1000_A5B9 / 0x1A5B9)
    BX = 0x28CF;
    // XLAT BX (1000_A5BC / 0x1A5BC)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CMP AL,0x7 (1000_A5BD / 0x1A5BD)
    Alu.Sub8(AL, 0x7);
    // JC 0x1000:a5ca (1000_A5BF / 0x1A5BF)
    if(CarryFlag) {
      goto label_1000_A5CA_1A5CA;
    }
    // JZ 0x1000:a5de (1000_A5C1 / 0x1A5C1)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A5DE / 0x1A5DE)
      return NearRet();
    }
    // SUB AL,0x8 (1000_A5C3 / 0x1A5C3)
    // AL -= 0x8;
    AL = Alu.Sub8(AL, 0x8);
    // MOV [0x28e7],AL (1000_A5C5 / 0x1A5C5)
    UInt8[DS, 0x28E7] = AL;
    // JMP 0x1000:a5db (1000_A5C8 / 0x1A5C8)
    // JMP target is JMP, inlining.
    // JMP 0x1000:a3f9 (1000_A5DB / 0x1A5DB)
    goto label_1000_A3F9_1A3F9;
    label_1000_A5CA_1A5CA:
    // CMP AL,byte ptr [0xceeb] (1000_A5CA / 0x1A5CA)
    Alu.Sub8(AL, UInt8[DS, 0xCEEB]);
    // JZ 0x1000:a5de (1000_A5CE / 0x1A5CE)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A5DE / 0x1A5DE)
      return NearRet();
    }
    // AND byte ptr [0x28e7],0xfd (1000_A5D0 / 0x1A5D0)
    // UInt8[DS, 0x28E7] &= 0xFD;
    UInt8[DS, 0x28E7] = Alu.And8(UInt8[DS, 0x28E7], 0xFD);
    // MOV [0xceeb],AL (1000_A5D5 / 0x1A5D5)
    UInt8[DS, 0xCEEB] = AL;
    // CALL 0x1000:cfe4 (1000_A5D8 / 0x1A5D8)
    NearCall(cs1, 0xA5DB, unknown_1000_CFE4_1CFE4);
    label_1000_A5DB_1A5DB:
    // JMP 0x1000:a3f9 (1000_A5DB / 0x1A5DB)
    goto label_1000_A3F9_1A3F9;
    label_1000_A5DE_1A5DE:
    // RET  (1000_A5DE / 0x1A5DE)
    return NearRet();
    label_1000_D32F_1D32F:
    // CALL 0x1000:d316 (1000_D32F / 0x1D32F)
    NearCall(cs1, 0xD332, MenuAnimationRelated_1000_D316_1D316);
    // CALL 0x1000:d33a (1000_D332 / 0x1D332)
    NearCall(cs1, 0xD335, unknown_1000_D33A_1D33A);
    // JMP 0x1000:d280 (1000_D335 / 0x1D335)
    // Jump converted to entry function call
    return unknown_1000_D280_1D280(0);
  }
  
  public Action unknown_1000_A5AA_1A5AA(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA5AA: goto label_1000_A5AA_1A5AA;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_A5AA_1A5AA:
    // MOV byte ptr [0x28be],0x0 (1000_A5AA / 0x1A5AA)
    UInt8[DS, 0x28BE] = 0x0;
    // RET  (1000_A5AF / 0x1A5AF)
    return NearRet();
  }
  
  public Action unknown_1000_A637_1A637(int gotoTarget) {
    label_1000_A637_1A637:
    // TEST word ptr [0xdbc8],0x4 (1000_A637 / 0x1A637)
    Alu.And16(UInt16[DS, 0xDBC8], 0x4);
    // JNZ 0x1000:a644 (1000_A63D / 0x1A63D)
    if(!ZeroFlag) {
      goto label_1000_A644_1A644;
    }
    // MOV byte ptr [0x288e],0xff (1000_A63F / 0x1A63F)
    UInt8[DS, 0x288E] = 0xFF;
    label_1000_A644_1A644:
    // MOV AL,[0x288e] (1000_A644 / 0x1A644)
    AL = UInt8[DS, 0x288E];
    // MOV AH,byte ptr [0x28a6] (1000_A647 / 0x1A647)
    AH = UInt8[DS, 0x28A6];
    // CALLF [0x39a5] (1000_A64B / 0x1A64B)
    // Indirect call to [0x39a5], generating possible targets from emulator records
    uint targetAddress_1000_A64B = (uint)(UInt16[DS, 0x39A7] * 0x10 + UInt16[DS, 0x39A5] - cs1 * 0x10);
    switch(targetAddress_1000_A64B) {
      case 0x46465 : throw FailAsUntested("Could not find a valid function at address 5635_0115 / 0x56465");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A64B);
        break;
    }
    // RET  (1000_A64F / 0x1A64F)
    return NearRet();
  }
  
  public Action unknown_1000_A650_1A650(int gotoTarget) {
    label_1000_A650_1A650:
    // TEST word ptr [0xdbc8],0x400 (1000_A650 / 0x1A650)
    Alu.And16(UInt16[DS, 0xDBC8], 0x400);
    // JNZ 0x1000:a660 (1000_A656 / 0x1A656)
    if(!ZeroFlag) {
      goto label_1000_A660_1A660;
    }
    // MOV AL,0xff (1000_A658 / 0x1A658)
    AL = 0xFF;
    // MOV [0x2896],AL (1000_A65A / 0x1A65A)
    UInt8[DS, 0x2896] = AL;
    // MOV [0x289e],AL (1000_A65D / 0x1A65D)
    UInt8[DS, 0x289E] = AL;
    label_1000_A660_1A660:
    // MOV AH,byte ptr [0x28ae] (1000_A660 / 0x1A660)
    AH = UInt8[DS, 0x28AE];
    // MOV AL,[0x2896] (1000_A664 / 0x1A664)
    AL = UInt8[DS, 0x2896];
    // CMP AL,0x4 (1000_A667 / 0x1A667)
    Alu.Sub8(AL, 0x4);
    // JNC 0x1000:a66d (1000_A669 / 0x1A669)
    if(!CarryFlag) {
      goto label_1000_A66D_1A66D;
    }
    // MOV AL,0x4 (1000_A66B / 0x1A66B)
    AL = 0x4;
    label_1000_A66D_1A66D:
    // CALLF [0x3985] (1000_A66D / 0x1A66D)
    // Indirect call to [0x3985], generating possible targets from emulator records
    uint targetAddress_1000_A66D = (uint)(UInt16[DS, 0x3987] * 0x10 + UInt16[DS, 0x3985] - cs1 * 0x10);
    switch(targetAddress_1000_A66D) {
      case 0x464F2 : FarCall(cs1, 0xA671, ClearAL_563E_0112_564F2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A66D);
        break;
    }
    // RET  (1000_A671 / 0x1A671)
    return NearRet();
  }
  
  public Action unknown_1000_A6CC_1A6CC(int gotoTarget) {
    label_1000_A6CC_1A6CC:
    // CMP BX,-0x1 (1000_A6CC / 0x1A6CC)
    Alu.Sub16(BX, 0xFFFF);
    // JNZ 0x1000:a6e6 (1000_A6CF / 0x1A6CF)
    if(!ZeroFlag) {
      goto label_1000_A6E6_1A6E6;
    }
    // MOV AX,0xfff (1000_A6D1 / 0x1A6D1)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_A6D4_1A6D4
    AX = 0xFFF;
    // XOR byte ptr CS:[0xa6d3],0x10 (1000_A6D4 / 0x1A6D4)
    // UInt8[cs1, 0xA6D3] ^= 0x10;
    UInt8[cs1, 0xA6D3] = Alu.Xor8(UInt8[cs1, 0xA6D3], 0x10);
    // MOV BX,word ptr [0x22a6] (1000_A6DA / 0x1A6DA)
    BX = UInt16[DS, 0x22A6];
    // CALL 0x1000:a8bc (1000_A6DE / 0x1A6DE)
    NearCall(cs1, 0xA6E1, unknown_1000_A8BC_1A8BC);
    // CALL 0x1000:a7a5 (1000_A6E1 / 0x1A6E1)
    NearCall(cs1, 0xA6E4, unknown_1000_A7A5_1A7A5);
    // JMP 0x1000:a740 (1000_A6E4 / 0x1A6E4)
    goto label_1000_A740_1A740;
    label_1000_A6E6_1A6E6:
    // PUSH BX (1000_A6E6 / 0x1A6E6)
    Stack.Push(BX);
    // CMP BL,0xe (1000_A6E7 / 0x1A6E7)
    Alu.Sub8(BL, 0xE);
    // JC 0x1000:a6ee (1000_A6EA / 0x1A6EA)
    if(CarryFlag) {
      goto label_1000_A6EE_1A6EE;
    }
    // MOV BL,0xe (1000_A6EC / 0x1A6EC)
    BL = 0xE;
    label_1000_A6EE_1A6EE:
    // AND AH,0xf3 (1000_A6EE / 0x1A6EE)
    // AH &= 0xF3;
    AH = Alu.And8(AH, 0xF3);
    // CMP byte ptr [0x47dc],0x0 (1000_A6F1 / 0x1A6F1)
    Alu.Sub8(UInt8[DS, 0x47DC], 0x0);
    // JZ 0x1000:a701 (1000_A6F6 / 0x1A6F6)
    if(ZeroFlag) {
      goto label_1000_A701_1A701;
    }
    // SUB AX,word ptr [0xd814] (1000_A6F8 / 0x1A6F8)
    // AX -= UInt16[DS, 0xD814];
    AX = Alu.Sub16(AX, UInt16[DS, 0xD814]);
    // ADD AX,0x3e7 (1000_A6FC / 0x1A6FC)
    // AX += 0x3E7;
    AX = Alu.Add16(AX, 0x3E7);
    // JMP 0x1000:a710 (1000_A6FF / 0x1A6FF)
    goto label_1000_A710_1A710;
    label_1000_A701_1A701:
    // CMP byte ptr [0x227d],0x0 (1000_A701 / 0x1A701)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:a710 (1000_A706 / 0x1A706)
    if(!ZeroFlag) {
      goto label_1000_A710_1A710;
    }
    // SHL BX,1 (1000_A708 / 0x1A708)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SUB AX,word ptr [BX + 0xd7f4] (1000_A70A / 0x1A70A)
    // AX -= UInt16[DS, (ushort)(BX + 0xD7F4)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(BX + 0xD7F4)]);
    // SHR BX,1 (1000_A70E / 0x1A70E)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    label_1000_A710_1A710:
    // CMP BL,0xe (1000_A710 / 0x1A710)
    Alu.Sub8(BL, 0xE);
    // JNZ 0x1000:a727 (1000_A713 / 0x1A713)
    if(!ZeroFlag) {
      goto label_1000_A727_1A727;
    }
    // MOV CX,AX (1000_A715 / 0x1A715)
    CX = AX;
    // AND CL,0xfe (1000_A717 / 0x1A717)
    // CL &= 0xFE;
    CL = Alu.And8(CL, 0xFE);
    // CMP CL,0x2c (1000_A71A / 0x1A71A)
    Alu.Sub8(CL, 0x2C);
    // JNZ 0x1000:a727 (1000_A71D / 0x1A71D)
    if(!ZeroFlag) {
      goto label_1000_A727_1A727;
    }
    // POP CX (1000_A71F / 0x1A71F)
    CX = Stack.Pop();
    // MOV CL,0xc (1000_A720 / 0x1A720)
    CL = 0xC;
    // MOV word ptr [0x47c4],CX (1000_A722 / 0x1A722)
    UInt16[DS, 0x47C4] = CX;
    // PUSH CX (1000_A726 / 0x1A726)
    Stack.Push(CX);
    label_1000_A727_1A727:
    // CALL 0x1000:a8bc (1000_A727 / 0x1A727)
    NearCall(cs1, 0xA72A, unknown_1000_A8BC_1A8BC);
    // CALL 0x1000:a7a5 (1000_A72A / 0x1A72A)
    NearCall(cs1, 0xA72D, unknown_1000_A7A5_1A7A5);
    // POP AX (1000_A72D / 0x1A72D)
    AX = Stack.Pop();
    // CALL 0x1000:9123 (1000_A72E / 0x1A72E)
    NearCall(cs1, 0xA731, unknown_1000_9123_19123);
    // SHL AX,1 (1000_A731 / 0x1A731)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_A733 / 0x1A733)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_A735 / 0x1A735)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD AX,0x27fa (1000_A737 / 0x1A737)
    // AX += 0x27FA;
    AX = Alu.Add16(AX, 0x27FA);
    // MOV SI,AX (1000_A73A / 0x1A73A)
    SI = AX;
    // MOV word ptr [0xdc28],SI (1000_A73C / 0x1A73C)
    UInt16[DS, 0xDC28] = SI;
    label_1000_A740_1A740:
    // MOV byte ptr [0xdc2a],0xff (1000_A740 / 0x1A740)
    UInt8[DS, 0xDC2A] = 0xFF;
    // CALL 0x1000:a83f (1000_A745 / 0x1A745)
    NearCall(cs1, 0xA748, unknown_1000_A83F_1A83F);
    // JC 0x1000:a754 (1000_A748 / 0x1A748)
    if(CarryFlag) {
      goto label_1000_A754_1A754;
    }
    // XOR byte ptr [0x37e2],0x6 (1000_A74A / 0x1A74A)
    // UInt8[DS, 0x37E2] ^= 0x6;
    UInt8[DS, 0x37E2] = Alu.Xor8(UInt8[DS, 0x37E2], 0x6);
    // CALL 0x1000:a83f (1000_A74F / 0x1A74F)
    NearCall(cs1, 0xA752, unknown_1000_A83F_1A83F);
    // JNC 0x1000:a75b (1000_A752 / 0x1A752)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_A75B / 0x1A75B)
      return NearRet();
    }
    label_1000_A754_1A754:
    // CALL 0x1000:ade0 (1000_A754 / 0x1A754)
    NearCall(cs1, 0xA757, unknown_1000_ADE0_1ADE0);
    // CALL 0x1000:d617 (1000_A757 / 0x1A757)
    throw FailAsUntested("Could not find a valid function at address 1000_D617 / 0x1D617");
    // STC  (1000_A75A / 0x1A75A)
    CarryFlag = true;
    label_1000_A75B_1A75B:
    // RET  (1000_A75B / 0x1A75B)
    return NearRet();
  }
  
  public Action unknown_1000_A7A5_1A7A5(int gotoTarget) {
    label_1000_A7A5_1A7A5:
    // MOV SI,0xa7c2 (1000_A7A5 / 0x1A7A5)
    SI = 0xA7C2;
    // CALL 0x1000:da5f (1000_A7A8 / 0x1A7A8)
    NearCall(cs1, 0xA7AB, unknown_1000_DA5F_1DA5F);
    // MOV word ptr [0xdc26],0x0 (1000_A7AB / 0x1A7AB)
    UInt16[DS, 0xDC26] = 0x0;
    // CALL 0x1000:d61d (1000_A7B1 / 0x1A7B1)
    NearCall(cs1, 0xA7B4, unknown_1000_D61D_1D61D);
    // CALL 0x1000:abcc (1000_A7B4 / 0x1A7B4)
    NearCall(cs1, 0xA7B7, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JZ 0x1000:a788 (1000_A7B7 / 0x1A7B7)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A788 / 0x1A788)
      return NearRet();
    }
    // CALL 0x1000:abc6 (1000_A7B9 / 0x1A7B9)
    throw FailAsUntested("Could not find a valid function at address 1000_ABC6 / 0x1ABC6");
    // CALL 0x1000:a9a1 (1000_A7BC / 0x1A7BC)
    NearCall(cs1, 0xA7BF, close_res_file_handle_ida_1000_A9A1_1A9A1);
    // JMP 0x1000:aded (1000_A7BF / 0x1A7BF)
    // Jump converted to entry function call
    return unknown_1000_ADED_1ADED(0);
  }
  
  public Action unknown_1000_A7C2_1A7C2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xA789: break;
      case 0: goto entry; break; //
    }
    label_1000_A789_1A789:
    // XOR AX,AX (1000_A789 / 0x1A789)
    AX = 0;
    // XCHG word ptr [0xdc30],AX (1000_A78B / 0x1A78B)
    ushort tmp_1000_A78B = UInt16[DS, 0xDC30];
    UInt16[DS, 0xDC30] = AX;
    AX = tmp_1000_A78B;
    // OR AX,AX (1000_A78F / 0x1A78F)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:a7a5 (1000_A791 / 0x1A791)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_A7A5_1A7A5(0);
    }
    // PUSH AX (1000_A793 / 0x1A793)
    Stack.Push(AX);
    // CALL 0x1000:a7a5 (1000_A794 / 0x1A794)
    NearCall(cs1, 0xA797, unknown_1000_A7A5_1A7A5);
    // POP AX (1000_A797 / 0x1A797)
    AX = Stack.Pop();
    // ADD AX,word ptr [0xd810] (1000_A798 / 0x1A798)
    // AX += UInt16[DS, 0xD810];
    AX = Alu.Add16(AX, UInt16[DS, 0xD810]);
    // MOV BL,0xe (1000_A79C / 0x1A79C)
    BL = 0xE;
    // CALL 0x1000:a6cc (1000_A79E / 0x1A79E)
    NearCall(cs1, 0xA7A1, unknown_1000_A6CC_1A6CC);
    // JNC 0x1000:a788 (1000_A7A1 / 0x1A7A1)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_A788 / 0x1A788)
      return NearRet();
    }
    // JMP 0x1000:a75c (1000_A7A3 / 0x1A7A3)
    // Jump converted to non entry function call
    return unknown_1000_9EFD_19EFD(0x1A75C - cs1 * 0x10);
    entry:
    label_1000_A7C2_1A7C2:
    // CALL 0x1000:abcc (1000_A7C2 / 0x1A7C2)
    NearCall(cs1, 0xA7C5, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JZ 0x1000:a788 (1000_A7C5 / 0x1A7C5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A788 / 0x1A788)
      return NearRet();
    }
    // CMP word ptr [0xdc26],0x0 (1000_A7C7 / 0x1A7C7)
    Alu.Sub16(UInt16[DS, 0xDC26], 0x0);
    // JNZ 0x1000:a7d5 (1000_A7CC / 0x1A7CC)
    if(!ZeroFlag) {
      goto label_1000_A7D5_1A7D5;
    }
    // CALL 0x1000:a9e7 (1000_A7CE / 0x1A7CE)
    NearCall(cs1, 0xA7D1, pcm_test_audio_done_ida_1000_A9E7_1A9E7);
    // JNZ 0x1000:a789 (1000_A7D1 / 0x1A7D1)
    if(!ZeroFlag) {
      goto label_1000_A789_1A789;
    }
    // JMP 0x1000:a811 (1000_A7D3 / 0x1A7D3)
    // JMP target is JMP, inlining.
    // JMP 0x1000:a9b9 (1000_A811 / 0x1A811)
    goto label_1000_A9B9_1A9B9;
    label_1000_A7D5_1A7D5:
    // MOV DX,word ptr [0xce7a] (1000_A7D5 / 0x1A7D5)
    DX = UInt16[DS, 0xCE7A];
    // XOR DI,DI (1000_A7D9 / 0x1A7D9)
    DI = 0;
    // MOV BX,word ptr [0xdc2c] (1000_A7DB / 0x1A7DB)
    BX = UInt16[DS, 0xDC2C];
    // MOV BP,word ptr [0xdc2e] (1000_A7DF / 0x1A7DF)
    BP = UInt16[DS, 0xDC2E];
    // MOV CX,word ptr [0x2882] (1000_A7E3 / 0x1A7E3)
    CX = UInt16[DS, 0x2882];
    // MOV SI,word ptr [0x2884] (1000_A7E7 / 0x1A7E7)
    SI = UInt16[DS, 0x2884];
    // ADD BP,SI (1000_A7EB / 0x1A7EB)
    // BP += SI;
    BP = Alu.Add16(BP, SI);
    // ADC BX,CX (1000_A7ED / 0x1A7ED)
    BX = Alu.Adc16(BX, CX);
    // SUB DX,BX (1000_A7EF / 0x1A7EF)
    // DX -= BX;
    DX = Alu.Sub16(DX, BX);
    // JS 0x1000:a811 (1000_A7F1 / 0x1A7F1)
    if(SignFlag) {
      // JS target is JMP, inlining.
      // JMP 0x1000:a9b9 (1000_A811 / 0x1A811)
      goto label_1000_A9B9_1A9B9;
    }
    label_1000_A7F3_1A7F3:
    // PUSH DI (1000_A7F3 / 0x1A7F3)
    Stack.Push(DI);
    // CALL 0x1000:a814 (1000_A7F4 / 0x1A7F4)
    throw FailAsUntested("Could not find a valid function at address 1000_A814 / 0x1A814");
    // POP DI (1000_A7F7 / 0x1A7F7)
    DI = Stack.Pop();
    // JNC 0x1000:a789 (1000_A7F8 / 0x1A7F8)
    if(!CarryFlag) {
      goto label_1000_A789_1A789;
    }
    // SUB DI,SI (1000_A7FA / 0x1A7FA)
    // DI -= SI;
    DI = Alu.Sub16(DI, SI);
    // SBB DX,CX (1000_A7FC / 0x1A7FC)
    DX = Alu.Sbb16(DX, CX);
    // JC 0x1000:a806 (1000_A7FE / 0x1A7FE)
    if(CarryFlag) {
      goto label_1000_A806_1A806;
    }
    // ADD BP,SI (1000_A800 / 0x1A800)
    // BP += SI;
    BP = Alu.Add16(BP, SI);
    // ADC BX,CX (1000_A802 / 0x1A802)
    BX = Alu.Adc16(BX, CX);
    // JMP 0x1000:a7f3 (1000_A804 / 0x1A804)
    goto label_1000_A7F3_1A7F3;
    label_1000_A806_1A806:
    // MOV word ptr [0xdc2c],BX (1000_A806 / 0x1A806)
    UInt16[DS, 0xDC2C] = BX;
    // MOV word ptr [0xdc2e],BP (1000_A80A / 0x1A80A)
    UInt16[DS, 0xDC2E] = BP;
    // CALL 0x1000:a82e (1000_A80E / 0x1A80E)
    throw FailAsUntested("Could not find a valid function at address 1000_A82E / 0x1A82E");
    label_1000_A811_1A811:
    // JMP 0x1000:a9b9 (1000_A811 / 0x1A811)
    goto label_1000_A9B9_1A9B9;
    label_1000_A9B9_1A9B9:
    // CALL 0x1000:aba3 (1000_A9B9 / 0x1A9B9)
    NearCall(cs1, 0xA9BC, check_res_file_open_ida_1000_ABA3_1ABA3);
    // JZ 0x1000:a9e6 (1000_A9BC / 0x1A9BC)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A9E6 / 0x1A9E6)
      return NearRet();
    }
    // MOV SI,0x3811 (1000_A9BE / 0x1A9BE)
    SI = 0x3811;
    // CMP byte ptr [0x3817],0x0 (1000_A9C1 / 0x1A9C1)
    Alu.Sub8(UInt8[DS, 0x3817], 0x0);
    // JZ 0x1000:a9d2 (1000_A9C6 / 0x1A9C6)
    if(ZeroFlag) {
      goto label_1000_A9D2_1A9D2;
    }
    // CMP byte ptr [0x381f],0x0 (1000_A9C8 / 0x1A9C8)
    Alu.Sub8(UInt8[DS, 0x381F], 0x0);
    // JNZ 0x1000:a9e6 (1000_A9CD / 0x1A9CD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_A9E6 / 0x1A9E6)
      return NearRet();
    }
    // MOV SI,0x3819 (1000_A9CF / 0x1A9CF)
    SI = 0x3819;
    label_1000_A9D2_1A9D2:
    // MOV BX,word ptr [0x3821] (1000_A9D2 / 0x1A9D2)
    BX = UInt16[DS, 0x3821];
    // LES DX,[SI] (1000_A9D6 / 0x1A9D6)
    DX = UInt16[DS, SI];
    ES = UInt16[DS, (ushort)(SI + 2)];
    // ADD DX,0x6 (1000_A9D8 / 0x1A9D8)
    // DX += 0x6;
    DX = Alu.Add16(DX, 0x6);
    // PUSH SI (1000_A9DB / 0x1A9DB)
    Stack.Push(SI);
    // CALL 0x1000:a93f (1000_A9DC / 0x1A9DC)
    NearCall(cs1, 0xA9DF, read_audio_file_ida_1000_A93F_1A93F);
    // POP SI (1000_A9DF / 0x1A9DF)
    SI = Stack.Pop();
    // JC 0x1000:a9e6 (1000_A9E0 / 0x1A9E0)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_A9E6 / 0x1A9E6)
      return NearRet();
    }
    // CALLF [0x39a1] (1000_A9E2 / 0x1A9E2)
    // Indirect call to [0x39a1], generating possible targets from emulator records
    uint targetAddress_1000_A9E2 = (uint)(UInt16[DS, 0x39A3] * 0x10 + UInt16[DS, 0x39A1] - cs1 * 0x10);
    switch(targetAddress_1000_A9E2) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A9E2);
        break;
    }
    label_1000_A9E6_1A9E6:
    // RET  (1000_A9E6 / 0x1A9E6)
    return NearRet();
  }
  
  public Action unknown_1000_A83F_1A83F(int gotoTarget) {
    label_1000_A83F_1A83F:
    // MOV word ptr [0xdc26],0x0 (1000_A83F / 0x1A83F)
    UInt16[DS, 0xDC26] = 0x0;
    // CALL 0x1000:ae2f (1000_A845 / 0x1A845)
    NearCall(cs1, 0xA848, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:a87d (1000_A848 / 0x1A848)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A87D / 0x1A87D)
      return NearRet();
    }
    // CALL 0x1000:ac14 (1000_A84A / 0x1A84A)
    NearCall(cs1, 0xA84D, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // CALL 0x1000:a90b (1000_A84D / 0x1A84D)
    NearCall(cs1, 0xA850, open_res_file_ida_1000_A90B_1A90B);
    // CMC  (1000_A850 / 0x1A850)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:a87d (1000_A851 / 0x1A851)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_A87D / 0x1A87D)
      return NearRet();
    }
    // LES DI,[0x3811] (1000_A853 / 0x1A853)
    DI = UInt16[DS, 0x3811];
    ES = UInt16[DS, 0x3813];
    // ADD DI,0x1a (1000_A857 / 0x1A857)
    // DI += 0x1A;
    DI = Alu.Add16(DI, 0x1A);
    // CMP byte ptr ES:[DI],0x5 (1000_A85A / 0x1A85A)
    Alu.Sub8(UInt8[ES, DI], 0x5);
    // JNZ 0x1000:a871 (1000_A85E / 0x1A85E)
    if(!ZeroFlag) {
      goto label_1000_A871_1A871;
    }
    // MOV CX,word ptr ES:[DI + 0x1] (1000_A860 / 0x1A860)
    CX = UInt16[ES, (ushort)(DI + 0x1)];
    // ADD DI,0x4 (1000_A864 / 0x1A864)
    // DI += 0x4;
    DI = Alu.Add16(DI, 0x4);
    // MOV AX,DI (1000_A867 / 0x1A867)
    AX = DI;
    // ADD AX,0x2 (1000_A869 / 0x1A869)
    // AX += 0x2;
    AX = Alu.Add16(AX, 0x2);
    // MOV [0xdc26],AX (1000_A86C / 0x1A86C)
    UInt16[DS, 0xDC26] = AX;
    // ADD DI,CX (1000_A86F / 0x1A86F)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    label_1000_A871_1A871:
    // MOV word ptr [0x3811],DI (1000_A871 / 0x1A871)
    UInt16[DS, 0x3811] = DI;
    // SUB word ptr [0x3815],DI (1000_A875 / 0x1A875)
    // UInt16[DS, 0x3815] -= DI;
    UInt16[DS, 0x3815] = Alu.Sub16(UInt16[DS, 0x3815], DI);
    // CALL 0x1000:a9b9 (1000_A879 / 0x1A879)
    throw FailAsUntested("Could not find a valid function at address 1000_A9B9 / 0x1A9B9");
    // STC  (1000_A87C / 0x1A87C)
    CarryFlag = true;
    label_1000_A87D_1A87D:
    // RET  (1000_A87D / 0x1A87D)
    return NearRet();
  }
  
  public Action audio_test_frequency_ida_1000_A87E_1A87E(int gotoTarget) {
    label_1000_A87E_1A87E:
    // PUSHF  (1000_A87E / 0x1A87E)
    Stack.Push(FlagRegister);
    // STI  (1000_A87F / 0x1A87F)
    InterruptFlag = true;
    // CALL 0x1000:ae2f (1000_A880 / 0x1A880)
    NearCall(cs1, 0xA883, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:a8af (1000_A883 / 0x1A883)
    if(ZeroFlag) {
      goto label_1000_A8AF_1A8AF;
    }
    // CALL 0x1000:ac14 (1000_A885 / 0x1A885)
    NearCall(cs1, 0xA888, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // MOV AL,0xb (1000_A888 / 0x1A888)
    AL = 0xB;
    // CALL 0x1000:abe9 (1000_A88A / 0x1A88A)
    NearCall(cs1, 0xA88D, open_voc_resource_ida_1000_ABE9_1ABE9);
    // MOV SI,0x3811 (1000_A88D / 0x1A88D)
    SI = 0x3811;
    // CALLF [0x3991] (1000_A890 / 0x1A890)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_A890 = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_A890) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_A890);
        break;
    }
    // PUSH word ptr [0xce7a] (1000_A894 / 0x1A894)
    Stack.Push(UInt16[DS, 0xCE7A]);
    label_1000_A898_1A898:
    // CALL 0x1000:a9e7 (1000_A898 / 0x1A898)
    NearCall(cs1, 0xA89B, pcm_test_audio_done_ida_1000_A9E7_1A9E7);
    // JZ 0x1000:a898 (1000_A89B / 0x1A89B)
    if(ZeroFlag) {
      goto label_1000_A898_1A898;
    }
    // MOV AX,[0xce7a] (1000_A89D / 0x1A89D)
    AX = UInt16[DS, 0xCE7A];
    // POP BX (1000_A8A0 / 0x1A8A0)
    BX = Stack.Pop();
    // SUB AX,BX (1000_A8A1 / 0x1A8A1)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // MOV CX,0x800 (1000_A8A3 / 0x1A8A3)
    CX = 0x800;
    // MUL CX (1000_A8A6 / 0x1A8A6)
    Cpu.Mul16(CX);
    // MOV word ptr [0x2882],DX (1000_A8A8 / 0x1A8A8)
    UInt16[DS, 0x2882] = DX;
    // MOV [0x2884],AX (1000_A8AC / 0x1A8AC)
    UInt16[DS, 0x2884] = AX;
    label_1000_A8AF_1A8AF:
    // POPF  (1000_A8AF / 0x1A8AF)
    FlagRegister = Stack.Pop();
    // RET  (1000_A8B0 / 0x1A8B0)
    return NearRet();
  }
  
  public Action Unknown_1000_A8B1_1A8B1(int gotoTarget) {
    label_1000_A8B1_1A8B1:
    // AND AL,0xf (1000_A8B1 / 0x1A8B1)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // ADD AL,0x30 (1000_A8B3 / 0x1A8B3)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    // CMP AL,0x39 (1000_A8B5 / 0x1A8B5)
    Alu.Sub8(AL, 0x39);
    // JBE 0x1000:a8bb (1000_A8B7 / 0x1A8B7)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_A8BB / 0x1A8BB)
      return NearRet();
    }
    // ADD AL,0x7 (1000_A8B9 / 0x1A8B9)
    // AL += 0x7;
    AL = Alu.Add8(AL, 0x7);
    label_1000_A8BB_1A8BB:
    // RET  (1000_A8BB / 0x1A8BB)
    return NearRet();
  }
  
  public Action unknown_1000_A8BC_1A8BC(int gotoTarget) {
    label_1000_A8BC_1A8BC:
    // MOV DI,0x37db (1000_A8BC / 0x1A8BC)
    DI = 0x37DB;
    // PUSH DS (1000_A8BF / 0x1A8BF)
    Stack.Push(DS);
    // POP ES (1000_A8C0 / 0x1A8C0)
    ES = Stack.Pop();
    // PUSH AX (1000_A8C1 / 0x1A8C1)
    Stack.Push(AX);
    // MOV AL,BL (1000_A8C2 / 0x1A8C2)
    AL = BL;
    // ADD AL,0x41 (1000_A8C4 / 0x1A8C4)
    // AL += 0x41;
    AL = Alu.Add8(AL, 0x41);
    // STOSB ES:DI (1000_A8C6 / 0x1A8C6)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DI (1000_A8C7 / 0x1A8C7)
    DI = Alu.Inc16(DI);
    // INC DI (1000_A8C8 / 0x1A8C8)
    DI = Alu.Inc16(DI);
    // STOSB ES:DI (1000_A8C9 / 0x1A8C9)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // POP BX (1000_A8CA / 0x1A8CA)
    BX = Stack.Pop();
    // MOV CL,0x4 (1000_A8CB / 0x1A8CB)
    CL = 0x4;
    // MOV AL,BH (1000_A8CD / 0x1A8CD)
    AL = BH;
    // CALL 0x1000:a8b1 (1000_A8CF / 0x1A8CF)
    NearCall(cs1, 0xA8D2, Unknown_1000_A8B1_1A8B1);
    // STOSB ES:DI (1000_A8D2 / 0x1A8D2)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,BL (1000_A8D3 / 0x1A8D3)
    AL = BL;
    // SHR AL,CL (1000_A8D5 / 0x1A8D5)
    // AL >>= CL;
    AL = Alu.Shr8(AL, CL);
    // CALL 0x1000:a8b1 (1000_A8D7 / 0x1A8D7)
    NearCall(cs1, 0xA8DA, Unknown_1000_A8B1_1A8B1);
    // STOSB ES:DI (1000_A8DA / 0x1A8DA)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,BL (1000_A8DB / 0x1A8DB)
    AL = BL;
    // CALL 0x1000:a8b1 (1000_A8DD / 0x1A8DD)
    NearCall(cs1, 0xA8E0, Unknown_1000_A8B1_1A8B1);
    // STOSB ES:DI (1000_A8E0 / 0x1A8E0)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,0x4f (1000_A8E1 / 0x1A8E1)
    AL = 0x4F;
    // CMP byte ptr [0xea],0x0 (1000_A8E3 / 0x1A8E3)
    Alu.Sub8(UInt8[DS, 0xEA], 0x0);
    // JG 0x1000:a8fa (1000_A8E8 / 0x1A8E8)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_A8FA_1A8FA;
    }
    // CMP byte ptr [0x6],0x80 (1000_A8EA / 0x1A8EA)
    Alu.Sub8(UInt8[DS, 0x6], 0x80);
    // JNZ 0x1000:a8fa (1000_A8EF / 0x1A8EF)
    if(!ZeroFlag) {
      goto label_1000_A8FA_1A8FA;
    }
    // CMP byte ptr [0x4],0x1 (1000_A8F1 / 0x1A8F1)
    Alu.Sub8(UInt8[DS, 0x4], 0x1);
    // JZ 0x1000:a8fa (1000_A8F6 / 0x1A8F6)
    if(ZeroFlag) {
      goto label_1000_A8FA_1A8FA;
    }
    // MOV AL,0x49 (1000_A8F8 / 0x1A8F8)
    AL = 0x49;
    label_1000_A8FA_1A8FA:
    // STOSB ES:DI (1000_A8FA / 0x1A8FA)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,0x20 (1000_A8FB / 0x1A8FB)
    AL = 0x20;
    // SHR BH,CL (1000_A8FD / 0x1A8FD)
    // BH >>= CL;
    BH = Alu.Shr8(BH, CL);
    // OR BH,byte ptr [0x47e0] (1000_A8FF / 0x1A8FF)
    // BH |= UInt8[DS, 0x47E0];
    BH = Alu.Or8(BH, UInt8[DS, 0x47E0]);
    // JZ 0x1000:a909 (1000_A903 / 0x1A903)
    if(ZeroFlag) {
      goto label_1000_A909_1A909;
    }
    // MOV AL,BH (1000_A905 / 0x1A905)
    AL = BH;
    // ADD AL,0x41 (1000_A907 / 0x1A907)
    // AL += 0x41;
    AL = Alu.Add8(AL, 0x41);
    label_1000_A909_1A909:
    // STOSB ES:DI (1000_A909 / 0x1A909)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_A90A_1A90A:
    // RET  (1000_A90A / 0x1A90A)
    return NearRet();
  }
  
  public Action open_res_file_ida_1000_A90B_1A90B(int gotoTarget) {
    label_1000_A90B_1A90B:
    // MOV DX,0x37da (1000_A90B / 0x1A90B)
    DX = 0x37DA;
    // XOR AX,AX (1000_A90E / 0x1A90E)
    AX = 0;
    // MOV [0x3811],AX (1000_A910 / 0x1A910)
    UInt16[DS, 0x3811] = AX;
    // MOV [0x3817],AX (1000_A913 / 0x1A913)
    UInt16[DS, 0x3817] = AX;
    // MOV [0x381f],AX (1000_A916 / 0x1A916)
    UInt16[DS, 0x381F] = AX;
    // MOV [0x3823],AL (1000_A919 / 0x1A919)
    UInt8[DS, 0x3823] = AL;
    // CALL 0x1000:f1fb (1000_A91C / 0x1A91C)
    NearCall(cs1, 0xA91F, open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB);
    // JC 0x1000:a90a (1000_A91F / 0x1A91F)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_A90A / 0x1A90A)
      return NearRet();
    }
    // MOV word ptr [0x3821],BX (1000_A921 / 0x1A921)
    UInt16[DS, 0x3821] = BX;
    // SUB CX,0x1 (1000_A925 / 0x1A925)
    // CX -= 0x1;
    CX = Alu.Sub16(CX, 0x1);
    // SBB BP,0x0 (1000_A928 / 0x1A928)
    BP = Alu.Sbb16(BP, 0x0);
    // MOV word ptr [0xdbc4],CX (1000_A92B / 0x1A92B)
    UInt16[DS, 0xDBC4] = CX;
    // MOV word ptr [0xdbc6],BP (1000_A92F / 0x1A92F)
    UInt16[DS, 0xDBC6] = BP;
    // MOV [0xdbc0],AX (1000_A933 / 0x1A933)
    UInt16[DS, 0xDBC0] = AX;
    // MOV word ptr [0xdbc2],DX (1000_A936 / 0x1A936)
    UInt16[DS, 0xDBC2] = DX;
    // MOV SI,0x3811 (1000_A93A / 0x1A93A)
    SI = 0x3811;
    // LES DX,[SI] (1000_A93D / 0x1A93D)
    DX = UInt16[DS, SI];
    ES = UInt16[DS, (ushort)(SI + 2)];
    // Function call generated as ASM continues to next function entry point without return
    return read_audio_file_ida_1000_A93F_1A93F(0);
  }
  
  public Action read_audio_file_ida_1000_A93F_1A93F(int gotoTarget) {
    label_1000_A93F_1A93F:
    // PUSH DX (1000_A93F / 0x1A93F)
    Stack.Push(DX);
    // MOV DX,word ptr [0xdbc0] (1000_A940 / 0x1A940)
    DX = UInt16[DS, 0xDBC0];
    // MOV CX,word ptr [0xdbc2] (1000_A944 / 0x1A944)
    CX = UInt16[DS, 0xDBC2];
    // MOV AX,0x4200 (1000_A948 / 0x1A948)
    AX = 0x4200;
    // INT 0x21 (1000_A94B / 0x1A94B)
    Interrupt(0x21);
    // POP DX (1000_A94D / 0x1A94D)
    DX = Stack.Pop();
    // PUSH SI (1000_A94E / 0x1A94E)
    Stack.Push(SI);
    // PUSH DS (1000_A94F / 0x1A94F)
    Stack.Push(DS);
    // MOV CX,0x2000 (1000_A950 / 0x1A950)
    CX = 0x2000;
    // MOV AX,[0xdbc4] (1000_A953 / 0x1A953)
    AX = UInt16[DS, 0xDBC4];
    // SUB word ptr [0xdbc4],CX (1000_A956 / 0x1A956)
    // UInt16[DS, 0xDBC4] -= CX;
    UInt16[DS, 0xDBC4] = Alu.Sub16(UInt16[DS, 0xDBC4], CX);
    // SBB word ptr [0xdbc6],0x0 (1000_A95A / 0x1A95A)
    UInt16[DS, 0xDBC6] = Alu.Sbb16(UInt16[DS, 0xDBC6], 0x0);
    // JNC 0x1000:a964 (1000_A95F / 0x1A95F)
    if(!CarryFlag) {
      goto label_1000_A964_1A964;
    }
    // MOV CX,AX (1000_A961 / 0x1A961)
    CX = AX;
    // INC CX (1000_A963 / 0x1A963)
    CX = Alu.Inc16(CX);
    label_1000_A964_1A964:
    // PUSH ES (1000_A964 / 0x1A964)
    Stack.Push(ES);
    // POP DS (1000_A965 / 0x1A965)
    DS = Stack.Pop();
    // MOV AH,0x3f (1000_A966 / 0x1A966)
    AH = 0x3F;
    // INT 0x21 (1000_A968 / 0x1A968)
    Interrupt(0x21);
    // POP DS (1000_A96A / 0x1A96A)
    DS = Stack.Pop();
    // POP SI (1000_A96B / 0x1A96B)
    SI = Stack.Pop();
    // MOV word ptr [SI + 0x4],AX (1000_A96C / 0x1A96C)
    UInt16[DS, (ushort)(SI + 0x4)] = AX;
    // JC 0x1000:a9b8 (1000_A96F / 0x1A96F)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_A9B8 / 0x1A9B8)
      return NearRet();
    }
    // ADD word ptr [0xdbc0],AX (1000_A971 / 0x1A971)
    // UInt16[DS, 0xDBC0] += AX;
    UInt16[DS, 0xDBC0] = Alu.Add16(UInt16[DS, 0xDBC0], AX);
    // ADC word ptr [0xdbc2],0x0 (1000_A975 / 0x1A975)
    UInt16[DS, 0xDBC2] = Alu.Adc16(UInt16[DS, 0xDBC2], 0x0);
    // MOV byte ptr [0x376a],0xff (1000_A97A / 0x1A97A)
    UInt8[DS, 0x376A] = 0xFF;
    // MOV byte ptr [SI + 0x6],0x1 (1000_A97F / 0x1A97F)
    UInt8[DS, (ushort)(SI + 0x6)] = 0x1;
    // MOV BL,byte ptr [0x3823] (1000_A983 / 0x1A983)
    BL = UInt8[DS, 0x3823];
    // CMP BL,0x3f (1000_A987 / 0x1A987)
    Alu.Sub8(BL, 0x3F);
    // JNC 0x1000:a992 (1000_A98A / 0x1A98A)
    if(!CarryFlag) {
      goto label_1000_A992_1A992;
    }
    // INC byte ptr [0x3823] (1000_A98C / 0x1A98C)
    UInt8[DS, 0x3823] = Alu.Inc8(UInt8[DS, 0x3823]);
    // INC BL (1000_A990 / 0x1A990)
    BL = Alu.Inc8(BL);
    label_1000_A992_1A992:
    // MOV byte ptr [SI + 0x7],BL (1000_A992 / 0x1A992)
    UInt8[DS, (ushort)(SI + 0x7)] = BL;
    // CMP word ptr [0xdbc6],0x0 (1000_A995 / 0x1A995)
    Alu.Sub16(UInt16[DS, 0xDBC6], 0x0);
    // CLC  (1000_A99A / 0x1A99A)
    CarryFlag = false;
    // JNS 0x1000:a9b8 (1000_A99B / 0x1A99B)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_A9B8 / 0x1A9B8)
      return NearRet();
    }
    // OR byte ptr [SI + 0x7],0x80 (1000_A99D / 0x1A99D)
    // UInt8[DS, (ushort)(SI + 0x7)] |= 0x80;
    UInt8[DS, (ushort)(SI + 0x7)] = Alu.Or8(UInt8[DS, (ushort)(SI + 0x7)], 0x80);
    label_1000_A9B8_1A9B8:
    // RET  (1000_A9B8 / 0x1A9B8)
    return NearRet();
  }
  
  public Action close_res_file_handle_ida_1000_A9A1_1A9A1(int gotoTarget) {
    label_1000_A9A1_1A9A1:
    // XOR BX,BX (1000_A9A1 / 0x1A9A1)
    BX = 0;
    // XCHG word ptr [0x3821],BX (1000_A9A3 / 0x1A9A3)
    ushort tmp_1000_A9A3 = UInt16[DS, 0x3821];
    UInt16[DS, 0x3821] = BX;
    BX = tmp_1000_A9A3;
    // OR BX,BX (1000_A9A7 / 0x1A9A7)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:a9b7 (1000_A9A9 / 0x1A9A9)
    if(ZeroFlag) {
      goto label_1000_A9B7_1A9B7;
    }
    // CMP BX,word ptr [0xdbba] (1000_A9AB / 0x1A9AB)
    Alu.Sub16(BX, UInt16[DS, 0xDBBA]);
    // JZ 0x1000:a9b7 (1000_A9AF / 0x1A9AF)
    if(ZeroFlag) {
      goto label_1000_A9B7_1A9B7;
    }
    // PUSH AX (1000_A9B1 / 0x1A9B1)
    Stack.Push(AX);
    // MOV AH,0x3e (1000_A9B2 / 0x1A9B2)
    AH = 0x3E;
    // INT 0x21 (1000_A9B4 / 0x1A9B4)
    Interrupt(0x21);
    // POP AX (1000_A9B6 / 0x1A9B6)
    AX = Stack.Pop();
    label_1000_A9B7_1A9B7:
    // CLC  (1000_A9B7 / 0x1A9B7)
    CarryFlag = false;
    // Function call generated as ASM continues to next function body without return
    return read_audio_file_ida_1000_A93F_1A93F(0x1A9B8 - cs1 * 0x10);
  }
  
  public Action pcm_test_audio_done_ida_1000_A9E7_1A9E7(int gotoTarget) {
    label_1000_A9E7_1A9E7:
    // CMP byte ptr [0x3817],0x3 (1000_A9E7 / 0x1A9E7)
    Alu.Sub8(UInt8[DS, 0x3817], 0x3);
    // JZ 0x1000:a9f3 (1000_A9EC / 0x1A9EC)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_A9F3 / 0x1A9F3)
      return NearRet();
    }
    // CMP byte ptr [0x381f],0x3 (1000_A9EE / 0x1A9EE)
    Alu.Sub8(UInt8[DS, 0x381F], 0x3);
    label_1000_A9F3_1A9F3:
    // RET  (1000_A9F3 / 0x1A9F3)
    return NearRet();
  }
  
  public Action decode_sd_block_ida_1000_AA0F_1AA0F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAA0E: break;
      case 0: goto entry; break; //
    }
    label_1000_AA0E_1AA0E:
    // RET  (1000_AA0E / 0x1AA0E)
    return NearRet();
    entry:
    label_1000_AA0F_1AA0F:
    // MOV AX,[0xdc1c] (1000_AA0F / 0x1AA0F)
    AX = UInt16[DS, 0xDC1C];
    // INC AX (1000_AA12 / 0x1AA12)
    AX = Alu.Inc16(AX);
    // JZ 0x1000:aa0e (1000_AA13 / 0x1AA13)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AA0E / 0x1AA0E)
      return NearRet();
    }
    // MOV byte ptr [0x376a],0xff (1000_AA15 / 0x1AA15)
    UInt8[DS, 0x376A] = 0xFF;
    // CALL 0x1000:ac14 (1000_AA1A / 0x1AA1A)
    NearCall(cs1, 0xAA1D, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // XOR AX,AX (1000_AA1D / 0x1AA1D)
    AX = 0;
    // MOV [0x3811],AX (1000_AA1F / 0x1AA1F)
    UInt16[DS, 0x3811] = AX;
    // MOV [0x3817],AX (1000_AA22 / 0x1AA22)
    UInt16[DS, 0x3817] = AX;
    // MOV [0x381f],AX (1000_AA25 / 0x1AA25)
    UInt16[DS, 0x381F] = AX;
    // MOV SI,0x3811 (1000_AA28 / 0x1AA28)
    SI = 0x3811;
    // LES DI,[SI] (1000_AA2B / 0x1AA2B)
    DI = UInt16[DS, SI];
    ES = UInt16[DS, (ushort)(SI + 2)];
    // CALL 0x1000:aa70 (1000_AA2D / 0x1AA2D)
    NearCall(cs1, 0xAA30, transfer_sd_block_qq_ida_1000_AA70_1AA70);
    // SUB word ptr [0x3815],0x20 (1000_AA30 / 0x1AA30)
    // UInt16[DS, 0x3815] -= 0x20;
    UInt16[DS, 0x3815] = Alu.Sub16(UInt16[DS, 0x3815], 0x20);
    // MOV CX,word ptr [0x3815] (1000_AA35 / 0x1AA35)
    CX = UInt16[DS, 0x3815];
    // MOV word ptr [0x381d],CX (1000_AA39 / 0x1AA39)
    UInt16[DS, 0x381D] = CX;
    // ADD CX,0x6 (1000_AA3D / 0x1AA3D)
    // CX += 0x6;
    CX = Alu.Add16(CX, 0x6);
    // MOV SI,0x1a (1000_AA40 / 0x1AA40)
    SI = 0x1A;
    // XOR DI,DI (1000_AA43 / 0x1AA43)
    DI = 0;
    while (CX-- != 0) {
      // MOVSB ES:DI,ES:SI (1000_AA45 / 0x1AA45)
      UInt8[ES, DI] = UInt8[ES, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // LES DI,[0x3819] (1000_AA48 / 0x1AA48)
    DI = UInt16[DS, 0x3819];
    ES = UInt16[DS, 0x381B];
    // MOV CX,word ptr [0x3815] (1000_AA4C / 0x1AA4C)
    CX = UInt16[DS, 0x3815];
    // PUSH DS (1000_AA50 / 0x1AA50)
    Stack.Push(DS);
    // LDS SI,[0x3811] (1000_AA51 / 0x1AA51)
    SI = UInt16[DS, 0x3811];
    DS = UInt16[DS, 0x3813];
    // MOVSW ES:DI,SI (1000_AA55 / 0x1AA55)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_AA56 / 0x1AA56)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_AA57 / 0x1AA57)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,0x80 (1000_AA58 / 0x1AA58)
    AL = 0x80;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_AA5A / 0x1AA5A)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DS (1000_AA5C / 0x1AA5C)
    DS = Stack.Pop();
    // MOV SI,0x3819 (1000_AA5D / 0x1AA5D)
    SI = 0x3819;
    // MOV word ptr [0x3824],SI (1000_AA60 / 0x1AA60)
    UInt16[DS, 0x3824] = SI;
    // CALLF [0x3991] (1000_AA64 / 0x1AA64)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_AA64 = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_AA64) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AA64);
        break;
    }
    // MOV SI,0x3811 (1000_AA68 / 0x1AA68)
    SI = 0x3811;
    // CALLF [0x39a1] (1000_AA6B / 0x1AA6B)
    // Indirect call to [0x39a1], generating possible targets from emulator records
    uint targetAddress_1000_AA6B = (uint)(UInt16[DS, 0x39A3] * 0x10 + UInt16[DS, 0x39A1] - cs1 * 0x10);
    switch(targetAddress_1000_AA6B) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AA6B);
        break;
    }
    // RET  (1000_AA6F / 0x1AA6F)
    return NearRet();
  }
  
  public Action transfer_sd_block_qq_ida_1000_AA70_1AA70(int gotoTarget) {
    label_1000_AA70_1AA70:
    // PUSH SI (1000_AA70 / 0x1AA70)
    Stack.Push(SI);
    // PUSH DS (1000_AA71 / 0x1AA71)
    Stack.Push(DS);
    // MOV SI,word ptr [0xdc1c] (1000_AA72 / 0x1AA72)
    SI = UInt16[DS, 0xDC1C];
    // MOV DS,word ptr [0xdbde] (1000_AA76 / 0x1AA76)
    DS = UInt16[DS, 0xDBDE];
    // LODSW SI (1000_AA7A / 0x1AA7A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB AX,0x4 (1000_AA7B / 0x1AA7B)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // MOV CX,AX (1000_AA7E / 0x1AA7E)
    CX = AX;
    // SHR CX,1 (1000_AA80 / 0x1AA80)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_AA82 / 0x1AA82)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADC CL,CL (1000_AA84 / 0x1AA84)
    CL = Alu.Adc8(CL, CL);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_AA86 / 0x1AA86)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DS (1000_AA88 / 0x1AA88)
    DS = Stack.Pop();
    // POP SI (1000_AA89 / 0x1AA89)
    SI = Stack.Pop();
    // MOV word ptr [SI + 0x4],AX (1000_AA8A / 0x1AA8A)
    UInt16[DS, (ushort)(SI + 0x4)] = AX;
    // MOV byte ptr [SI + 0x6],0x1 (1000_AA8D / 0x1AA8D)
    UInt8[DS, (ushort)(SI + 0x6)] = 0x1;
    // MOV byte ptr [SI + 0x7],0x41 (1000_AA91 / 0x1AA91)
    UInt8[DS, (ushort)(SI + 0x7)] = 0x41;
    // RET  (1000_AA95 / 0x1AA95)
    return NearRet();
  }
  
  public Action unknown_1000_AA96_1AA96(int gotoTarget) {
    label_1000_AA96_1AA96:
    // XOR AX,AX (1000_AA96 / 0x1AA96)
    AX = 0;
    // CMP byte ptr [0x4774],AH (1000_AA98 / 0x1AA98)
    Alu.Sub8(UInt8[DS, 0x4774], AH);
    // JZ 0x1000:aaa7 (1000_AA9C / 0x1AA9C)
    if(ZeroFlag) {
      goto label_1000_AAA7_1AAA7;
    }
    // CMP byte ptr [0x2a],0x48 (1000_AA9E / 0x1AA9E)
    Alu.Sub8(UInt8[DS, 0x2A], 0x48);
    // JNZ 0x1000:ab14 (1000_AAA3 / 0x1AAA3)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // JMP 0x1000:ab12 (1000_AAA5 / 0x1AAA5)
    goto label_1000_AB12_1AB12;
    label_1000_AAA7_1AAA7:
    // MOV AL,0xd (1000_AAA7 / 0x1AAA7)
    AL = 0xD;
    // CMP byte ptr [0x46d9],AH (1000_AAA9 / 0x1AAA9)
    Alu.Sub8(UInt8[DS, 0x46D9], AH);
    // JNZ 0x1000:ab14 (1000_AAAD / 0x1AAAD)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // MOV AL,0x1 (1000_AAAF / 0x1AAAF)
    AL = 0x1;
    // CMP byte ptr [0xdd03],AH (1000_AAB1 / 0x1AAB1)
    Alu.Sub8(UInt8[DS, 0xDD03], AH);
    // JNZ 0x1000:ab14 (1000_AAB5 / 0x1AAB5)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AAB7 / 0x1AAB7)
    AX = Alu.Inc16(AX);
    // CMP byte ptr [0xfb],AH (1000_AAB8 / 0x1AAB8)
    Alu.Sub8(UInt8[DS, 0xFB], AH);
    // JS 0x1000:ab14 (1000_AABC / 0x1AABC)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AABE / 0x1AABE)
    AX = Alu.Inc16(AX);
    // CMP byte ptr [0xc6],AH (1000_AABF / 0x1AABF)
    Alu.Sub8(UInt8[DS, 0xC6], AH);
    // JNZ 0x1000:ab14 (1000_AAC3 / 0x1AAC3)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AAC5 / 0x1AAC5)
    AX = Alu.Inc16(AX);
    // CMP byte ptr [0xea],AH (1000_AAC6 / 0x1AAC6)
    Alu.Sub8(UInt8[DS, 0xEA], AH);
    // JG 0x1000:ab14 (1000_AACA / 0x1AACA)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AACC / 0x1AACC)
    AX = Alu.Inc16(AX);
    // MOV DX,word ptr [0x4] (1000_AACD / 0x1AACD)
    DX = UInt16[DS, 0x4];
    // MOV BX,word ptr [0x6] (1000_AAD1 / 0x1AAD1)
    BX = UInt16[DS, 0x6];
    // CMP BL,0x80 (1000_AAD5 / 0x1AAD5)
    Alu.Sub8(BL, 0x80);
    // JNZ 0x1000:aadf (1000_AAD8 / 0x1AAD8)
    if(!ZeroFlag) {
      goto label_1000_AADF_1AADF;
    }
    // CMP DL,0x1 (1000_AADA / 0x1AADA)
    Alu.Sub8(DL, 0x1);
    // JNZ 0x1000:aaef (1000_AADD / 0x1AADD)
    if(!ZeroFlag) {
      goto label_1000_AAEF_1AAEF;
    }
    label_1000_AADF_1AADF:
    // MOV BL,byte ptr [0x11c9] (1000_AADF / 0x1AADF)
    BL = UInt8[DS, 0x11C9];
    // AND BL,0x3 (1000_AAE3 / 0x1AAE3)
    // BL &= 0x3;
    BL = Alu.And8(BL, 0x3);
    // JZ 0x1000:ab14 (1000_AAE6 / 0x1AAE6)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AAE8 / 0x1AAE8)
    AX = Alu.Inc16(AX);
    // DEC BL (1000_AAE9 / 0x1AAE9)
    BL = Alu.Dec8(BL);
    // JZ 0x1000:ab14 (1000_AAEB / 0x1AAEB)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // INC AX (1000_AAED / 0x1AAED)
    AX = Alu.Inc16(AX);
    // RET  (1000_AAEE / 0x1AAEE)
    return NearRet();
    label_1000_AAEF_1AAEF:
    // CMP DH,0x20 (1000_AAEF / 0x1AAEF)
    Alu.Sub8(DH, 0x20);
    // JNC 0x1000:ab08 (1000_AAF2 / 0x1AAF2)
    if(!CarryFlag) {
      goto label_1000_AB08_1AB08;
    }
    // MOV AL,0x9 (1000_AAF4 / 0x1AAF4)
    AL = 0x9;
    // CMP DH,0x7 (1000_AAF6 / 0x1AAF6)
    Alu.Sub8(DH, 0x7);
    // SBB AL,0x0 (1000_AAF9 / 0x1AAF9)
    AL = Alu.Sbb8(AL, 0x0);
    // CMP byte ptr [0x2a],0x48 (1000_AAFB / 0x1AAFB)
    Alu.Sub8(UInt8[DS, 0x2A], 0x48);
    // JC 0x1000:ab14 (1000_AB00 / 0x1AB00)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // SHR BL,1 (1000_AB02 / 0x1AB02)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // JC 0x1000:ab14 (1000_AB04 / 0x1AB04)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // JMP 0x1000:ab12 (1000_AB06 / 0x1AB06)
    goto label_1000_AB12_1AB12;
    label_1000_AB08_1AB08:
    // MOV AL,0xc (1000_AB08 / 0x1AB08)
    AL = 0xC;
    // JNZ 0x1000:ab14 (1000_AB0A / 0x1AB0A)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    // DEC AX (1000_AB0C / 0x1AB0C)
    AX = Alu.Dec16(AX);
    // CMP DL,0x3 (1000_AB0D / 0x1AB0D)
    Alu.Sub8(DL, 0x3);
    // JNZ 0x1000:ab14 (1000_AB10 / 0x1AB10)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB14 / 0x1AB14)
      return NearRet();
    }
    label_1000_AB12_1AB12:
    // MOV AL,0xa (1000_AB12 / 0x1AB12)
    AL = 0xA;
    label_1000_AB14_1AB14:
    // RET  (1000_AB14 / 0x1AB14)
    return NearRet();
  }
  
  public Action audio_start_voc_ida_1000_AB15_1AB15(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAB44: goto label_1000_AB44_1AB44;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AB15_1AB15:
    // CALL 0x1000:abcc (1000_AB15 / 0x1AB15)
    NearCall(cs1, 0xAB18, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:ab44 (1000_AB18 / 0x1AB18)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // CALL 0x1000:ae2f (1000_AB1A / 0x1AB1A)
    NearCall(cs1, 0xAB1D, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:ab44 (1000_AB1D / 0x1AB1D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // PUSH ES (1000_AB1F / 0x1AB1F)
    Stack.Push(ES);
    // CALL 0x1000:e270 (1000_AB20 / 0x1AB20)
    NearCall(cs1, 0xAB23, PushAll_1000_E270_1E270);
    // CMP AL,byte ptr [0x376a] (1000_AB23 / 0x1AB23)
    Alu.Sub8(AL, UInt8[DS, 0x376A]);
    // JZ 0x1000:ab35 (1000_AB27 / 0x1AB27)
    if(ZeroFlag) {
      goto label_1000_AB35_1AB35;
    }
    // CALL 0x1000:ac14 (1000_AB29 / 0x1AB29)
    NearCall(cs1, 0xAB2C, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // OR AL,AL (1000_AB2C / 0x1AB2C)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:ab40 (1000_AB2E / 0x1AB2E)
    if(ZeroFlag) {
      goto label_1000_AB40_1AB40;
    }
    // CALL 0x1000:abe9 (1000_AB30 / 0x1AB30)
    NearCall(cs1, 0xAB33, open_voc_resource_ida_1000_ABE9_1ABE9);
    // JMP 0x1000:ab39 (1000_AB33 / 0x1AB33)
    goto label_1000_AB39_1AB39;
    label_1000_AB35_1AB35:
    // LES DI,[0x3811] (1000_AB35 / 0x1AB35)
    DI = UInt16[DS, 0x3811];
    ES = UInt16[DS, 0x3813];
    label_1000_AB39_1AB39:
    // MOV SI,0x3811 (1000_AB39 / 0x1AB39)
    SI = 0x3811;
    // CALLF [0x3991] (1000_AB3C / 0x1AB3C)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_AB3C = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_AB3C) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AB3C);
        break;
    }
    label_1000_AB40_1AB40:
    // CALL 0x1000:e283 (1000_AB40 / 0x1AB40)
    NearCall(cs1, 0xAB43, PopAll_1000_E283_1E283);
    // POP ES (1000_AB43 / 0x1AB43)
    ES = Stack.Pop();
    label_1000_AB44_1AB44:
    // RET  (1000_AB44 / 0x1AB44)
    return NearRet();
  }
  
  public Action unknown_1000_AB45_1AB45(int gotoTarget) {
    label_1000_AB45_1AB45:
    // CALL 0x1000:ae2f (1000_AB45 / 0x1AB45)
    NearCall(cs1, 0xAB48, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:ab44 (1000_AB48 / 0x1AB48)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // PUSH AX (1000_AB4A / 0x1AB4A)
    Stack.Push(AX);
    // CALL 0x1000:ade0 (1000_AB4B / 0x1AB4B)
    NearCall(cs1, 0xAB4E, unknown_1000_ADE0_1ADE0);
    // POP AX (1000_AB4E / 0x1AB4E)
    AX = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_AB4F_1AB4F(0);
  }
  
  public Action unknown_1000_AB4F_1AB4F(int gotoTarget) {
    label_1000_AB4F_1AB4F:
    // MOV byte ptr [0x47e0],0x0 (1000_AB4F / 0x1AB4F)
    UInt8[DS, 0x47E0] = 0x0;
    // MOV BX,0x19 (1000_AB54 / 0x1AB54)
    BX = 0x19;
    // CALL 0x1000:a8bc (1000_AB57 / 0x1AB57)
    NearCall(cs1, 0xAB5A, unknown_1000_A8BC_1A8BC);
    // MOV byte ptr [0x37e2],0x49 (1000_AB5A / 0x1AB5A)
    UInt8[DS, 0x37E2] = 0x49;
    // CALL 0x1000:abcc (1000_AB5F / 0x1AB5F)
    NearCall(cs1, 0xAB62, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:ab44 (1000_AB62 / 0x1AB62)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // CALL 0x1000:ae2f (1000_AB64 / 0x1AB64)
    NearCall(cs1, 0xAB67, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:ab44 (1000_AB67 / 0x1AB67)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // PUSH ES (1000_AB69 / 0x1AB69)
    Stack.Push(ES);
    // CALL 0x1000:e270 (1000_AB6A / 0x1AB6A)
    NearCall(cs1, 0xAB6D, PushAll_1000_E270_1E270);
    // CALL 0x1000:ac14 (1000_AB6D / 0x1AB6D)
    NearCall(cs1, 0xAB70, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // CALL 0x1000:a90b (1000_AB70 / 0x1AB70)
    NearCall(cs1, 0xAB73, open_res_file_ida_1000_A90B_1A90B);
    // JC 0x1000:ab8d (1000_AB73 / 0x1AB73)
    if(CarryFlag) {
      goto label_1000_AB8D_1AB8D;
    }
    // ADD word ptr [0x3811],0x1a (1000_AB75 / 0x1AB75)
    // UInt16[DS, 0x3811] += 0x1A;
    UInt16[DS, 0x3811] = Alu.Add16(UInt16[DS, 0x3811], 0x1A);
    // CALL 0x1000:a9b9 (1000_AB7A / 0x1AB7A)
    throw FailAsUntested("Could not find a valid function at address 1000_A9B9 / 0x1A9B9");
    // MOV SI,0xab92 (1000_AB7D / 0x1AB7D)
    SI = 0xAB92;
    // MOV BP,0x1 (1000_AB80 / 0x1AB80)
    BP = 0x1;
    // CALL 0x1000:da25 (1000_AB83 / 0x1AB83)
    NearCall(cs1, 0xAB86, unknown_1000_DA25_1DA25);
    // MOV SI,0x3811 (1000_AB86 / 0x1AB86)
    SI = 0x3811;
    // CALLF [0x3991] (1000_AB89 / 0x1AB89)
    // Indirect call to [0x3991], generating possible targets from emulator records
    uint targetAddress_1000_AB89 = (uint)(UInt16[DS, 0x3993] * 0x10 + UInt16[DS, 0x3991] - cs1 * 0x10);
    switch(targetAddress_1000_AB89) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AB89);
        break;
    }
    label_1000_AB8D_1AB8D:
    // CALL 0x1000:e283 (1000_AB8D / 0x1AB8D)
    NearCall(cs1, 0xAB90, PopAll_1000_E283_1E283);
    // POP ES (1000_AB90 / 0x1AB90)
    ES = Stack.Pop();
    // RET  (1000_AB91 / 0x1AB91)
    return NearRet();
  }
  
  public Action check_res_file_open_ida_1000_ABA3_1ABA3(int gotoTarget) {
    label_1000_ABA3_1ABA3:
    // CMP word ptr [0x3821],0x0 (1000_ABA3 / 0x1ABA3)
    Alu.Sub16(UInt16[DS, 0x3821], 0x0);
    // RET  (1000_ABA8 / 0x1ABA8)
    return NearRet();
  }
  
  public Action unknown_1000_ABA9_1ABA9(int gotoTarget) {
    label_1000_ABA9_1ABA9:
    // CALL 0x1000:ae2f (1000_ABA9 / 0x1ABA9)
    NearCall(cs1, 0xABAC, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:ab44 (1000_ABAC / 0x1ABAC)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AB44 / 0x1AB44)
      return NearRet();
    }
    // MOV BX,word ptr [0xce7a] (1000_ABAE / 0x1ABAE)
    BX = UInt16[DS, 0xCE7A];
    label_1000_ABB2_1ABB2:
    // PUSH BX (1000_ABB2 / 0x1ABB2)
    Stack.Push(BX);
    // CALL 0x1000:ab92 (1000_ABB3 / 0x1ABB3)
    throw FailAsUntested("Could not find a valid function at address 1000_AB92 / 0x1AB92");
    // CALL 0x1000:aba3 (1000_ABB6 / 0x1ABB6)
    NearCall(cs1, 0xABB9, check_res_file_open_ida_1000_ABA3_1ABA3);
    // POP BX (1000_ABB9 / 0x1ABB9)
    BX = Stack.Pop();
    // JZ 0x1000:abc6 (1000_ABBA / 0x1ABBA)
    if(ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_B1EE_1B1EE(0x1ABC6 - cs1 * 0x10);
    }
    // MOV AX,[0xce7a] (1000_ABBC / 0x1ABBC)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,BX (1000_ABBF / 0x1ABBF)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x3e8 (1000_ABC1 / 0x1ABC1)
    Alu.Sub16(AX, 0x3E8);
    // JC 0x1000:abb2 (1000_ABC4 / 0x1ABC4)
    if(CarryFlag) {
      goto label_1000_ABB2_1ABB2;
    }
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_B1EE_1B1EE(0x1ABC6 - cs1 * 0x10);
  }
  
  public Action IsUnknownDC2BZero_1000_ABCC_1ABCC(int gotoTarget) {
    label_1000_ABCC_1ABCC:
    // CMP byte ptr [0xdc2b],0x0 (1000_ABCC / 0x1ABCC)
    Alu.Sub8(UInt8[DS, 0xDC2B], 0x0);
    // RET  (1000_ABD1 / 0x1ABD1)
    return NearRet();
  }
  
  public Action unknown_1000_ABD5_1ABD5(int gotoTarget) {
    switch(gotoTarget) {
      case 0xABD2: break;
      case 0: goto entry; break; //
    }
    label_1000_ABD2_1ABD2:
    // CALL 0x1000:a7c2 (1000_ABD2 / 0x1ABD2)
    NearCall(cs1, 0xABD5, unknown_1000_A7C2_1A7C2);
    entry:
    label_1000_ABD5_1ABD5:
    // CALL 0x1000:abcc (1000_ABD5 / 0x1ABD5)
    NearCall(cs1, 0xABD8, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:abd2 (1000_ABD8 / 0x1ABD8)
    if(!ZeroFlag) {
      goto label_1000_ABD2_1ABD2;
    }
    // RET  (1000_ABDA / 0x1ABDA)
    return NearRet();
  }
  
  public Action open_voc_resource_ida_1000_ABE9_1ABE9(int gotoTarget) {
    label_1000_ABE9_1ABE9:
    // MOV word ptr [0x3811],0x0 (1000_ABE9 / 0x1ABE9)
    UInt16[DS, 0x3811] = 0x0;
    // LES DI,[0x3811] (1000_ABEF / 0x1ABEF)
    DI = UInt16[DS, 0x3811];
    ES = UInt16[DS, 0x3813];
    // ADD word ptr [0x3811],0x1a (1000_ABF3 / 0x1ABF3)
    // UInt16[DS, 0x3811] += 0x1A;
    UInt16[DS, 0x3811] = Alu.Add16(UInt16[DS, 0x3811], 0x1A);
    // XOR AH,AH (1000_ABF8 / 0x1ABF8)
    AH = 0;
    // MOV SI,AX (1000_ABFA / 0x1ABFA)
    SI = AX;
    // ADD SI,0xae (1000_ABFC / 0x1ABFC)
    // SI += 0xAE;
    SI = Alu.Add16(SI, 0xAE);
    // MOV [0x376a],AL (1000_AC00 / 0x1AC00)
    UInt8[DS, 0x376A] = AL;
    // CALL 0x1000:f0b9 (1000_AC03 / 0x1AC03)
    NearCall(cs1, 0xAC06, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // SUB CX,0x1a (1000_AC06 / 0x1AC06)
    // CX -= 0x1A;
    CX = Alu.Sub16(CX, 0x1A);
    // MOV word ptr [0x3815],CX (1000_AC09 / 0x1AC09)
    UInt16[DS, 0x3815] = CX;
    // MOV word ptr [0x3817],0x8101 (1000_AC0D / 0x1AC0D)
    UInt16[DS, 0x3817] = 0x8101;
    // RET  (1000_AC13 / 0x1AC13)
    return NearRet();
  }
  
  public Action pcm_stop_voc_q_ida_1000_AC14_1AC14(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAC14: goto label_1000_AC14_1AC14;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AC14_1AC14:
    // PUSH AX (1000_AC14 / 0x1AC14)
    Stack.Push(AX);
    // PUSH BX (1000_AC15 / 0x1AC15)
    Stack.Push(BX);
    // PUSH CX (1000_AC16 / 0x1AC16)
    Stack.Push(CX);
    // PUSH SI (1000_AC17 / 0x1AC17)
    Stack.Push(SI);
    // PUSH DI (1000_AC18 / 0x1AC18)
    Stack.Push(DI);
    // PUSH BP (1000_AC19 / 0x1AC19)
    Stack.Push(BP);
    // PUSH ES (1000_AC1A / 0x1AC1A)
    Stack.Push(ES);
    // MOV SI,0xab92 (1000_AC1B / 0x1AC1B)
    SI = 0xAB92;
    // CALL 0x1000:da5f (1000_AC1E / 0x1AC1E)
    NearCall(cs1, 0xAC21, unknown_1000_DA5F_1DA5F);
    // CALL 0x1000:a9a1 (1000_AC21 / 0x1AC21)
    NearCall(cs1, 0xAC24, close_res_file_handle_ida_1000_A9A1_1A9A1);
    // CALLF [0x3995] (1000_AC24 / 0x1AC24)
    // Indirect call to [0x3995], generating possible targets from emulator records
    uint targetAddress_1000_AC24 = (uint)(UInt16[DS, 0x3997] * 0x10 + UInt16[DS, 0x3995] - cs1 * 0x10);
    switch(targetAddress_1000_AC24) {
      case 0x46459 : throw FailAsUntested("Could not find a valid function at address 5635_0109 / 0x56459");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AC24);
        break;
    }
    // POP ES (1000_AC28 / 0x1AC28)
    ES = Stack.Pop();
    // POP BP (1000_AC29 / 0x1AC29)
    BP = Stack.Pop();
    // POP DI (1000_AC2A / 0x1AC2A)
    DI = Stack.Pop();
    // POP SI (1000_AC2B / 0x1AC2B)
    SI = Stack.Pop();
    // POP CX (1000_AC2C / 0x1AC2C)
    CX = Stack.Pop();
    // POP BX (1000_AC2D / 0x1AC2D)
    BX = Stack.Pop();
    // POP AX (1000_AC2E / 0x1AC2E)
    AX = Stack.Pop();
    // RET  (1000_AC2F / 0x1AC2F)
    return NearRet();
  }
  
  public Action CallPcmFunc05_1000_AC30_1AC30(int gotoTarget) {
    label_1000_AC30_1AC30:
    // CALLF [0x3999] (1000_AC30 / 0x1AC30)
    // Indirect call to [0x3999], generating possible targets from emulator records
    uint targetAddress_1000_AC30 = (uint)(UInt16[DS, 0x399B] * 0x10 + UInt16[DS, 0x3999] - cs1 * 0x10);
    switch(targetAddress_1000_AC30) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AC30);
        break;
    }
    // RET  (1000_AC34 / 0x1AC34)
    return NearRet();
  }
  
  public Action unknown_1000_AC3A_1AC3A(int gotoTarget) {
    label_1000_AC3A_1AC3A:
    // MOV BP,0x201a (1000_AC3A / 0x1AC3A)
    BP = 0x201A;
    // OR byte ptr [BP + 0x3],0x40 (1000_AC3D / 0x1AC3D)
    // UInt8[SS, (ushort)(BP + 0x3)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0x3)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0x3)], 0x40);
    // OR byte ptr [BP + 0x7],0x40 (1000_AC41 / 0x1AC41)
    // UInt8[SS, (ushort)(BP + 0x7)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0x7)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0x7)], 0x40);
    // OR byte ptr [BP + 0xb],0x40 (1000_AC45 / 0x1AC45)
    // UInt8[SS, (ushort)(BP + 0xB)] |= 0x40;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.Or8(UInt8[SS, (ushort)(BP + 0xB)], 0x40);
    // MOV CL,0xff (1000_AC49 / 0x1AC49)
    CL = 0xFF;
    // CALL 0x1000:ae28 (1000_AC4B / 0x1AC4B)
    NearCall(cs1, 0xAC4E, IsUnknownDBC80x100_1000_AE28_1AE28);
    // JZ 0x1000:ac6d (1000_AC4E / 0x1AC4E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AC6D / 0x1AC6D)
      return NearRet();
    }
    // AND byte ptr [BP + 0x3],0xbf (1000_AC50 / 0x1AC50)
    // UInt8[SS, (ushort)(BP + 0x3)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0x3)] = Alu.And8(UInt8[SS, (ushort)(BP + 0x3)], 0xBF);
    // AND byte ptr [BP + 0x7],0xbf (1000_AC54 / 0x1AC54)
    // UInt8[SS, (ushort)(BP + 0x7)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0x7)] = Alu.And8(UInt8[SS, (ushort)(BP + 0x7)], 0xBF);
    // AND byte ptr [BP + 0xb],0xbf (1000_AC58 / 0x1AC58)
    // UInt8[SS, (ushort)(BP + 0xB)] &= 0xBF;
    UInt8[SS, (ushort)(BP + 0xB)] = Alu.And8(UInt8[SS, (ushort)(BP + 0xB)], 0xBF);
    // XOR CX,CX (1000_AC5C / 0x1AC5C)
    CX = 0;
    // TEST byte ptr [0x2943],0x10 (1000_AC5E / 0x1AC5E)
    Alu.And8(UInt8[DS, 0x2943], 0x10);
    // JNZ 0x1000:ac6d (1000_AC63 / 0x1AC63)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AC6D / 0x1AC6D)
      return NearRet();
    }
    // MOV CL,byte ptr [0x3810] (1000_AC65 / 0x1AC65)
    CL = UInt8[DS, 0x3810];
    // AND CL,0x1 (1000_AC69 / 0x1AC69)
    // CL &= 0x1;
    CL = Alu.And8(CL, 0x1);
    // INC CX (1000_AC6C / 0x1AC6C)
    CX = Alu.Inc16(CX);
    label_1000_AC6D_1AC6D:
    // RET  (1000_AC6D / 0x1AC6D)
    return NearRet();
  }
  
  public Action unknown_1000_ACE6_1ACE6(int gotoTarget) {
    label_1000_ACE6_1ACE6:
    // CALL 0x1000:abcc (1000_ACE6 / 0x1ACE6)
    NearCall(cs1, 0xACE9, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:ad36 (1000_ACE9 / 0x1ACE9)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    // TEST byte ptr [0x3810],0x1 (1000_ACEB / 0x1ACEB)
    Alu.And8(UInt8[DS, 0x3810], 0x1);
    // JZ 0x1000:ad37 (1000_ACF0 / 0x1ACF0)
    if(ZeroFlag) {
      goto label_1000_AD37_1AD37;
    }
    // CMP byte ptr [0x227d],0x0 (1000_ACF2 / 0x1ACF2)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:ad36 (1000_ACF7 / 0x1ACF7)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    // CMP byte ptr [0xdbcd],0x0 (1000_ACF9 / 0x1ACF9)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JS 0x1000:ad36 (1000_ACFE / 0x1ACFE)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    // MOV AX,[0xdbd2] (1000_AD00 / 0x1AD00)
    AX = UInt16[DS, 0xDBD2];
    // OR AX,AX (1000_AD03 / 0x1AD03)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNZ 0x1000:ad0d (1000_AD05 / 0x1AD05)
    if(!ZeroFlag) {
      goto label_1000_AD0D_1AD0D;
    }
    // MOV AX,[0xce7a] (1000_AD07 / 0x1AD07)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdbd2],AX (1000_AD0A / 0x1AD0A)
    UInt16[DS, 0xDBD2] = AX;
    label_1000_AD0D_1AD0D:
    // SUB AX,word ptr [0xce7a] (1000_AD0D / 0x1AD0D)
    // AX -= UInt16[DS, 0xCE7A];
    AX = Alu.Sub16(AX, UInt16[DS, 0xCE7A]);
    // NEG AX (1000_AD11 / 0x1AD11)
    AX = Alu.Sub16(0, AX);
    // CMP AX,0xc8 (1000_AD13 / 0x1AD13)
    Alu.Sub16(AX, 0xC8);
    // JC 0x1000:ad36 (1000_AD16 / 0x1AD16)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    label_1000_AD18_1AD18:
    // MOV SI,word ptr [0x380e] (1000_AD18 / 0x1AD18)
    SI = UInt16[DS, 0x380E];
    // LODSB SI (1000_AD1C / 0x1AD1C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_AD1D / 0x1AD1D)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:ad30 (1000_AD1F / 0x1AD1F)
    if(!SignFlag) {
      goto label_1000_AD30_1AD30;
    }
    // MOV SI,0x37fa (1000_AD21 / 0x1AD21)
    SI = 0x37FA;
    // LODSB SI (1000_AD24 / 0x1AD24)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // TEST byte ptr [0x3810],0x2 (1000_AD25 / 0x1AD25)
    Alu.And8(UInt8[DS, 0x3810], 0x2);
    // JZ 0x1000:ad30 (1000_AD2A / 0x1AD2A)
    if(ZeroFlag) {
      goto label_1000_AD30_1AD30;
    }
    // CALL 0x1000:acbf (1000_AD2C / 0x1AD2C)
    throw FailAsUntested("Could not find a valid function at address 1000_ACBF / 0x1ACBF");
    // LODSB SI (1000_AD2F / 0x1AD2F)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_AD30_1AD30:
    // MOV word ptr [0x380e],SI (1000_AD30 / 0x1AD30)
    UInt16[DS, 0x380E] = SI;
    // JMP 0x1000:ad95 (1000_AD34 / 0x1AD34)
    // Jump converted to entry function call
    return unknown_1000_AD95_1AD95(0);
    label_1000_AD36_1AD36:
    // RET  (1000_AD36 / 0x1AD36)
    return NearRet();
    label_1000_AD37_1AD37:
    // CALL 0x1000:aec6 (1000_AD37 / 0x1AD37)
    NearCall(cs1, 0xAD3A, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6);
    // JC 0x1000:ad36 (1000_AD3A / 0x1AD3A)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    // CMP byte ptr [0xdbcd],0x0 (1000_AD3C / 0x1AD3C)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JS 0x1000:ad36 (1000_AD41 / 0x1AD41)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_AD36 / 0x1AD36)
      return NearRet();
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_AD43_1AD43(0);
  }
  
  public Action unknown_1000_AD43_1AD43(int gotoTarget) {
    label_1000_AD43_1AD43:
    // MOV AL,[0xdbcc] (1000_AD43 / 0x1AD43)
    AL = UInt8[DS, 0xDBCC];
    // MOV byte ptr [0xdbcb],0x0 (1000_AD46 / 0x1AD46)
    UInt8[DS, 0xDBCB] = 0x0;
    // OR AL,AL (1000_AD4B / 0x1AD4B)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:ad95 (1000_AD4D / 0x1AD4D)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_AD95_1AD95(0);
    }
    // RET  (1000_AD4F / 0x1AD4F)
    return NearRet();
  }
  
  public Action unknown_1000_AD50_1AD50(int gotoTarget) {
    label_1000_AD50_1AD50:
    // CALL 0x1000:aeb7 (1000_AD50 / 0x1AD50)
    NearCall(cs1, 0xAD53, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV AL,0x3 (1000_AD53 / 0x1AD53)
    AL = 0x3;
    // JMP 0x1000:ad95 (1000_AD55 / 0x1AD55)
    // Jump converted to entry function call
    return unknown_1000_AD95_1AD95(0);
  }
  
  public Action play_music_MORNING_HSQ_ida_1000_AD57_1AD57(int gotoTarget) {
    label_1000_AD57_1AD57:
    // CALL 0x1000:aeb7 (1000_AD57 / 0x1AD57)
    NearCall(cs1, 0xAD5A, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV AL,0x6 (1000_AD5A / 0x1AD5A)
    AL = 0x6;
    // JMP 0x1000:ad95 (1000_AD5C / 0x1AD5C)
    // Jump converted to entry function call
    return unknown_1000_AD95_1AD95(0);
  }
  
  public Action unknown_1000_AD5E_1AD5E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xADBD: goto label_1000_ADBD_1ADBD;break;
      case 0xAD5E: goto label_1000_AD5E_1AD5E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AD5E_1AD5E:
    // CALL 0x1000:aec6 (1000_AD5E / 0x1AD5E)
    NearCall(cs1, 0xAD61, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6);
    // JC 0x1000:ad74 (1000_AD61 / 0x1AD61)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_AD74 / 0x1AD74)
      return NearRet();
    }
    // CALL 0x1000:aa96 (1000_AD63 / 0x1AD63)
    NearCall(cs1, 0xAD66, unknown_1000_AA96_1AA96);
    // CMP byte ptr [0x3810],0x0 (1000_AD66 / 0x1AD66)
    Alu.Sub8(UInt8[DS, 0x3810], 0x0);
    // JZ 0x1000:ad75 (1000_AD6B / 0x1AD6B)
    if(ZeroFlag) {
      goto label_1000_AD75_1AD75;
    }
    // CMP byte ptr [0xdbcd],0x0 (1000_AD6D / 0x1AD6D)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JNS 0x1000:ad18 (1000_AD72 / 0x1AD72)
    if(!SignFlag) {
      // Jump converted to non entry function call
      return unknown_1000_ACE6_1ACE6(0x1AD18 - cs1 * 0x10);
    }
    label_1000_AD74_1AD74:
    // RET  (1000_AD74 / 0x1AD74)
    return NearRet();
    label_1000_AD75_1AD75:
    // MOV BX,0x375c (1000_AD75 / 0x1AD75)
    BX = 0x375C;
    // XLAT BX (1000_AD78 / 0x1AD78)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // OR AL,AL (1000_AD79 / 0x1AD79)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:adbd (1000_AD7B / 0x1AD7B)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // OR AL,AL (1000_AD7D / 0x1AD7D)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:ad89 (1000_AD7F / 0x1AD7F)
    if(SignFlag) {
      goto label_1000_AD89_1AD89;
    }
    // MOV [0xdbcc],AL (1000_AD81 / 0x1AD81)
    UInt8[DS, 0xDBCC] = AL;
    // CALLF [0x3979] (1000_AD84 / 0x1AD84)
    // Indirect call to [0x3979], generating possible targets from emulator records
    uint targetAddress_1000_AD84 = (uint)(UInt16[DS, 0x397B] * 0x10 + UInt16[DS, 0x3979] - cs1 * 0x10);
    switch(targetAddress_1000_AD84) {
      case 0x464E9 : throw FailAsUntested("Could not find a valid function at address 563E_0109 / 0x564E9");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AD84);
        break;
    }
    // RET  (1000_AD88 / 0x1AD88)
    return NearRet();
    label_1000_AD89_1AD89:
    // AND AL,0x3f (1000_AD89 / 0x1AD89)
    // AL &= 0x3F;
    AL = Alu.And8(AL, 0x3F);
    // MOV [0xdbcc],AL (1000_AD8B / 0x1AD8B)
    UInt8[DS, 0xDBCC] = AL;
    // CMP AL,byte ptr [0xdbcb] (1000_AD8E / 0x1AD8E)
    Alu.Sub8(AL, UInt8[DS, 0xDBCB]);
    // JNZ 0x1000:adbe (1000_AD92 / 0x1AD92)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_ADBE_1ADBE(0);
    }
    // RET  (1000_AD94 / 0x1AD94)
    return NearRet();
    label_1000_ADBD_1ADBD:
    // RET  (1000_ADBD / 0x1ADBD)
    return NearRet();
  }
  
  public Action unknown_1000_AD95_1AD95(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAD95: goto label_1000_AD95_1AD95;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AD95_1AD95:
    // XOR AH,AH (1000_AD95 / 0x1AD95)
    AH = 0;
    // CALL 0x1000:aec6 (1000_AD97 / 0x1AD97)
    NearCall(cs1, 0xAD9A, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6);
    // JC 0x1000:adbd (1000_AD9A / 0x1AD9A)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // CMP AL,byte ptr [0xdbcb] (1000_AD9C / 0x1AD9C)
    Alu.Sub8(AL, UInt8[DS, 0xDBCB]);
    // JZ 0x1000:adbd (1000_ADA0 / 0x1ADA0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // CALL 0x1000:ae62 (1000_ADA2 / 0x1ADA2)
    NearCall(cs1, 0xADA5, load_music_ida_1000_AE62_1AE62);
    // MOV [0xdbcb],AL (1000_ADA5 / 0x1ADA5)
    UInt8[DS, 0xDBCB] = AL;
    // LES SI,[0xdbb6] (1000_ADA8 / 0x1ADA8)
    SI = UInt16[DS, 0xDBB6];
    ES = UInt16[DS, 0xDBB8];
    // MOV AL,[0x3810] (1000_ADAC / 0x1ADAC)
    AL = UInt8[DS, 0x3810];
    // AND AL,0x1 (1000_ADAF / 0x1ADAF)
    // AL &= 0x1;
    AL = Alu.And8(AL, 0x1);
    // CALLF [0x3971] (1000_ADB1 / 0x1ADB1)
    // Indirect call to [0x3971], generating possible targets from emulator records
    uint targetAddress_1000_ADB1 = (uint)(UInt16[DS, 0x3973] * 0x10 + UInt16[DS, 0x3971] - cs1 * 0x10);
    switch(targetAddress_1000_ADB1) {
      case 0x464E3 : throw FailAsUntested("Could not find a valid function at address 563E_0103 / 0x564E3");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_ADB1);
        break;
    }
    // MOV [0xdbcd],AL (1000_ADB5 / 0x1ADB5)
    UInt8[DS, 0xDBCD] = AL;
    // XOR AX,AX (1000_ADB8 / 0x1ADB8)
    AX = 0;
    // MOV [0xdbd2],AX (1000_ADBA / 0x1ADBA)
    UInt16[DS, 0xDBD2] = AX;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_AD5E_1AD5E(0x1ADBD - cs1 * 0x10);
  }
  
  public Action unknown_1000_ADBE_1ADBE(int gotoTarget) {
    switch(gotoTarget) {
      case 0xADBE: goto label_1000_ADBE_1ADBE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_ADBE_1ADBE:
    // CALL 0x1000:aec6 (1000_ADBE / 0x1ADBE)
    NearCall(cs1, 0xADC1, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6);
    // JC 0x1000:adbd (1000_ADC1 / 0x1ADC1)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // TEST byte ptr [0x3810],0x1 (1000_ADC3 / 0x1ADC3)
    Alu.And8(UInt8[DS, 0x3810], 0x1);
    // JNZ 0x1000:adbd (1000_ADC8 / 0x1ADC8)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // TEST byte ptr [0xdbcd],0x40 (1000_ADCA / 0x1ADCA)
    Alu.And8(UInt8[DS, 0xDBCD], 0x40);
    // JNZ 0x1000:adbd (1000_ADCF / 0x1ADCF)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // PUSH BX (1000_ADD1 / 0x1ADD1)
    Stack.Push(BX);
    // MOV AX,0x12c (1000_ADD2 / 0x1ADD2)
    AX = 0x12C;
    // XOR BX,BX (1000_ADD5 / 0x1ADD5)
    BX = 0;
    // CALLF [0x397d] (1000_ADD7 / 0x1ADD7)
    // Indirect call to [0x397d], generating possible targets from emulator records
    uint targetAddress_1000_ADD7 = (uint)(UInt16[DS, 0x397F] * 0x10 + UInt16[DS, 0x397D] - cs1 * 0x10);
    switch(targetAddress_1000_ADD7) {
      case 0x464EC : FarCall(cs1, 0xADDB, unknown_563E_010C_564EC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_ADD7);
        break;
    }
    // MOV [0xdbcd],AL (1000_ADDB / 0x1ADDB)
    UInt8[DS, 0xDBCD] = AL;
    // POP BX (1000_ADDE / 0x1ADDE)
    BX = Stack.Pop();
    // RET  (1000_ADDF / 0x1ADDF)
    return NearRet();
  }
  
  public Action unknown_1000_ADE0_1ADE0(int gotoTarget) {
    label_1000_ADE0_1ADE0:
    // MOV AX,0x64 (1000_ADE0 / 0x1ADE0)
    AX = 0x64;
    // MOV BL,byte ptr [0x289e] (1000_ADE3 / 0x1ADE3)
    BL = UInt8[DS, 0x289E];
    // MOV BH,byte ptr [0x28b6] (1000_ADE7 / 0x1ADE7)
    BH = UInt8[DS, 0x28B6];
    // JMP 0x1000:adf8 (1000_ADEB / 0x1ADEB)
    // Jump converted to non entry function call
    return unknown_1000_ADED_1ADED(0x1ADF8 - cs1 * 0x10);
  }
  
  public Action unknown_1000_ADED_1ADED(int gotoTarget) {
    switch(gotoTarget) {
      case 0xADF8: goto label_1000_ADF8_1ADF8;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_ADED_1ADED:
    // MOV AX,0x190 (1000_ADED / 0x1ADED)
    AX = 0x190;
    // MOV BL,byte ptr [0x2896] (1000_ADF0 / 0x1ADF0)
    BL = UInt8[DS, 0x2896];
    // MOV BH,byte ptr [0x28ae] (1000_ADF4 / 0x1ADF4)
    BH = UInt8[DS, 0x28AE];
    label_1000_ADF8_1ADF8:
    // CMP BL,0x4 (1000_ADF8 / 0x1ADF8)
    Alu.Sub8(BL, 0x4);
    // JNC 0x1000:adff (1000_ADFB / 0x1ADFB)
    if(!CarryFlag) {
      goto label_1000_ADFF_1ADFF;
    }
    // MOV BL,0x4 (1000_ADFD / 0x1ADFD)
    BL = 0x4;
    label_1000_ADFF_1ADFF:
    // CALLF [0x397d] (1000_ADFF / 0x1ADFF)
    // Indirect call to [0x397d], generating possible targets from emulator records
    uint targetAddress_1000_ADFF = (uint)(UInt16[DS, 0x397F] * 0x10 + UInt16[DS, 0x397D] - cs1 * 0x10);
    switch(targetAddress_1000_ADFF) {
      case 0x464EC : FarCall(cs1, 0xAE03, unknown_563E_010C_564EC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_ADFF);
        break;
    }
    // RET  (1000_AE03 / 0x1AE03)
    return NearRet();
  }
  
  public Action unknown_1000_AE04_1AE04(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAE04: goto label_1000_AE04_1AE04;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AE04_1AE04:
    // CALL 0x1000:aec6 (1000_AE04 / 0x1AE04)
    NearCall(cs1, 0xAE07, IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6);
    // JC 0x1000:adbd (1000_AE07 / 0x1AE07)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // TEST byte ptr [0x3810],0x1 (1000_AE09 / 0x1AE09)
    Alu.And8(UInt8[DS, 0x3810], 0x1);
    // JNZ 0x1000:adbd (1000_AE0E / 0x1AE0E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    // CMP byte ptr [0xdbcd],0x0 (1000_AE10 / 0x1AE10)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JNS 0x1000:ae1e (1000_AE15 / 0x1AE15)
    if(!SignFlag) {
      goto label_1000_AE1E_1AE1E;
    }
    // TEST byte ptr [0xdbcd],0x40 (1000_AE17 / 0x1AE17)
    Alu.And8(UInt8[DS, 0xDBCD], 0x40);
    // JZ 0x1000:adbd (1000_AE1C / 0x1AE1C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_ADBD / 0x1ADBD)
      return NearRet();
    }
    label_1000_AE1E_1AE1E:
    // CALL 0x1000:e270 (1000_AE1E / 0x1AE1E)
    NearCall(cs1, 0xAE21, PushAll_1000_E270_1E270);
    // CALL 0x1000:ad43 (1000_AE21 / 0x1AE21)
    NearCall(cs1, 0xAE24, unknown_1000_AD43_1AD43);
    // CALL 0x1000:e283 (1000_AE24 / 0x1AE24)
    NearCall(cs1, 0xAE27, PopAll_1000_E283_1E283);
    // RET  (1000_AE27 / 0x1AE27)
    return NearRet();
  }
  
  public Action IsUnknownDBC80x100_1000_AE28_1AE28(int gotoTarget) {
    label_1000_AE28_1AE28:
    // TEST word ptr [0xdbc8],0x100 (1000_AE28 / 0x1AE28)
    Alu.And16(UInt16[DS, 0xDBC8], 0x100);
    // RET  (1000_AE2E / 0x1AE2E)
    return NearRet();
  }
  
  public Action CheckPcmEnabled_1000_AE2F_1AE2F(int gotoTarget) {
    label_1000_AE2F_1AE2F:
    // PUSH AX (1000_AE2F / 0x1AE2F)
    Stack.Push(AX);
    // PUSH DS (1000_AE30 / 0x1AE30)
    Stack.Push(DS);
    // MOV AX,0x1f4b (1000_AE31 / 0x1AE31)
    AX = 0x1F4B;
    // MOV DS,AX (1000_AE34 / 0x1AE34)
    DS = AX;
    // TEST word ptr [0xdbc8],0x1 (1000_AE36 / 0x1AE36)
    Alu.And16(UInt16[DS, 0xDBC8], 0x1);
    // POP DS (1000_AE3C / 0x1AE3C)
    DS = Stack.Pop();
    // POP AX (1000_AE3D / 0x1AE3D)
    AX = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_AE3F_1AE3F(0x1AE3E - cs1 * 0x10);
  }
  
  public Action unknown_1000_AE3F_1AE3F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xAE3E: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_AE3E_1AE3E:
    // RET  (1000_AE3E / 0x1AE3E)
    return NearRet();
    entry:
    label_1000_AE3F_1AE3F:
    // CALL 0x1000:ae28 (1000_AE3F / 0x1AE3F)
    NearCall(cs1, 0xAE42, IsUnknownDBC80x100_1000_AE28_1AE28);
    // JZ 0x1000:ae3e (1000_AE42 / 0x1AE42)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AE3E / 0x1AE3E)
      return NearRet();
    }
    // MOV DI,0xdbb6 (1000_AE44 / 0x1AE44)
    DI = 0xDBB6;
    // MOV AX,word ptr [DI] (1000_AE47 / 0x1AE47)
    AX = UInt16[DS, DI];
    // OR AX,word ptr [DI + 0x2] (1000_AE49 / 0x1AE49)
    // AX |= UInt16[DS, (ushort)(DI + 0x2)];
    AX = Alu.Or16(AX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JNZ 0x1000:ae3e (1000_AE4C / 0x1AE4C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_AE3E / 0x1AE3E)
      return NearRet();
    }
    // MOV CX,0x9c40 (1000_AE4E / 0x1AE4E)
    CX = 0x9C40;
    // JMP 0x1000:f0f6 (1000_AE51 / 0x1AE51)
    // Jump converted to entry function call
    return bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6(0);
  }
  
  public Action unknown_1000_AE54_1AE54(int gotoTarget) {
    label_1000_AE54_1AE54:
    // CALL 0x1000:ae2f (1000_AE54 / 0x1AE54)
    NearCall(cs1, 0xAE57, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:ae3e (1000_AE57 / 0x1AE57)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AE3E / 0x1AE3E)
      return NearRet();
    }
    // MOV DI,0x3811 (1000_AE59 / 0x1AE59)
    DI = 0x3811;
    // MOV CX,0x4e20 (1000_AE5C / 0x1AE5C)
    CX = 0x4E20;
    // JMP 0x1000:f0f6 (1000_AE5F / 0x1AE5F)
    // Jump converted to entry function call
    return bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6(0);
  }
  
  public Action load_music_ida_1000_AE62_1AE62(int gotoTarget) {
    label_1000_AE62_1AE62:
    // CMP AL,byte ptr [0xdbca] (1000_AE62 / 0x1AE62)
    Alu.Sub8(AL, UInt8[DS, 0xDBCA]);
    // JZ 0x1000:ae84 (1000_AE66 / 0x1AE66)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_AE84 / 0x1AE84)
      return NearRet();
    }
    // CALL 0x1000:aeb7 (1000_AE68 / 0x1AE68)
    NearCall(cs1, 0xAE6B, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV [0xdbca],AL (1000_AE6B / 0x1AE6B)
    UInt8[DS, 0xDBCA] = AL;
    // PUSH AX (1000_AE6E / 0x1AE6E)
    Stack.Push(AX);
    // ADD AX,0xa4 (1000_AE6F / 0x1AE6F)
    // AX += 0xA4;
    AX = Alu.Add16(AX, 0xA4);
    // MOV SI,AX (1000_AE72 / 0x1AE72)
    SI = AX;
    // LES DI,[0xdbb6] (1000_AE74 / 0x1AE74)
    DI = UInt16[DS, 0xDBB6];
    ES = UInt16[DS, 0xDBB8];
    // MOV AX,ES (1000_AE78 / 0x1AE78)
    AX = ES;
    // CMP AX,word ptr [0xce68] (1000_AE7A / 0x1AE7A)
    Alu.Sub16(AX, UInt16[DS, 0xCE68]);
    // JNC 0x1000:ae85 (1000_AE7E / 0x1AE7E)
    if(!CarryFlag) {
      goto label_1000_AE85_1AE85;
    }
    // CALL 0x1000:f0b9 (1000_AE80 / 0x1AE80)
    NearCall(cs1, 0xAE83, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // POP AX (1000_AE83 / 0x1AE83)
    AX = Stack.Pop();
    label_1000_AE84_1AE84:
    // RET  (1000_AE84 / 0x1AE84)
    return NearRet();
    label_1000_AE85_1AE85:
    // PUSH word ptr [0x2784] (1000_AE85 / 0x1AE85)
    Stack.Push(UInt16[DS, 0x2784]);
    // PUSH SI (1000_AE89 / 0x1AE89)
    Stack.Push(SI);
    // MOV CX,0x2af (1000_AE8A / 0x1AE8A)
    CX = 0x2AF;
    // CALL 0x1000:f11c (1000_AE8D / 0x1AE8D)
    NearCall(cs1, 0xAE90, alloc_cx_pages_to_di_ida_1000_F11C_1F11C);
    // POP SI (1000_AE90 / 0x1AE90)
    SI = Stack.Pop();
    // INC byte ptr [0xce71] (1000_AE91 / 0x1AE91)
    UInt8[DS, 0xCE71] = Alu.Inc8(UInt8[DS, 0xCE71]);
    // CALL 0x1000:f0b9 (1000_AE95 / 0x1AE95)
    NearCall(cs1, 0xAE98, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // DEC byte ptr [0xce71] (1000_AE98 / 0x1AE98)
    UInt8[DS, 0xCE71] = Alu.Dec8(UInt8[DS, 0xCE71]);
    // PUSH DS (1000_AE9C / 0x1AE9C)
    Stack.Push(DS);
    // PUSH DI (1000_AE9D / 0x1AE9D)
    Stack.Push(DI);
    // PUSH ES (1000_AE9E / 0x1AE9E)
    Stack.Push(ES);
    // LES DI,[0xdbb6] (1000_AE9F / 0x1AE9F)
    DI = UInt16[DS, 0xDBB6];
    ES = UInt16[DS, 0xDBB8];
    // POP DS (1000_AEA3 / 0x1AEA3)
    DS = Stack.Pop();
    // POP SI (1000_AEA4 / 0x1AEA4)
    SI = Stack.Pop();
    // CALL 0x1000:f403 (1000_AEA5 / 0x1AEA5)
    NearCall(cs1, 0xAEA8, hsq_decomp_skip_header_dssi_to_esdi_ida_1000_F403_1F403);
    // POP DS (1000_AEA8 / 0x1AEA8)
    DS = Stack.Pop();
    // POP AX (1000_AEA9 / 0x1AEA9)
    AX = Stack.Pop();
    // CALL 0x1000:c13e (1000_AEAA / 0x1AEAA)
    NearCall(cs1, 0xAEAD, open_sprite_sheet_ida_1000_C13E_1C13E);
    // POP AX (1000_AEAD / 0x1AEAD)
    AX = Stack.Pop();
    // RET  (1000_AEAE / 0x1AEAE)
    return NearRet();
  }
  
  public Action CallMidiFunc02_1000_AEB7_1AEB7(int gotoTarget) {
    label_1000_AEB7_1AEB7:
    // PUSH AX (1000_AEB7 / 0x1AEB7)
    Stack.Push(AX);
    // MOV byte ptr [0xdbcb],0x0 (1000_AEB8 / 0x1AEB8)
    UInt8[DS, 0xDBCB] = 0x0;
    // CALLF [0x3975] (1000_AEBD / 0x1AEBD)
    // Indirect call to [0x3975], generating possible targets from emulator records
    uint targetAddress_1000_AEBD = (uint)(UInt16[DS, 0x3977] * 0x10 + UInt16[DS, 0x3975] - cs1 * 0x10);
    switch(targetAddress_1000_AEBD) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_AEBD);
        break;
    }
    // MOV [0xdbcd],AL (1000_AEC1 / 0x1AEC1)
    UInt8[DS, 0xDBCD] = AL;
    // POP AX (1000_AEC4 / 0x1AEC4)
    AX = Stack.Pop();
    // RET  (1000_AEC5 / 0x1AEC5)
    return NearRet();
  }
  
  public Action IsUnknownDBC80x100And2943BitmaskNonZero_1000_AEC6_1AEC6(int gotoTarget) {
    label_1000_AEC6_1AEC6:
    // TEST byte ptr [0x2943],0x10 (1000_AEC6 / 0x1AEC6)
    Alu.And8(UInt8[DS, 0x2943], 0x10);
    // JNZ 0x1000:aed4 (1000_AECB / 0x1AECB)
    if(!ZeroFlag) {
      goto label_1000_AED4_1AED4;
    }
    // CALL 0x1000:ae28 (1000_AECD / 0x1AECD)
    NearCall(cs1, 0xAED0, IsUnknownDBC80x100_1000_AE28_1AE28);
    // JZ 0x1000:aed4 (1000_AED0 / 0x1AED0)
    if(ZeroFlag) {
      goto label_1000_AED4_1AED4;
    }
    // CLC  (1000_AED2 / 0x1AED2)
    CarryFlag = false;
    // RET  (1000_AED3 / 0x1AED3)
    return NearRet();
    label_1000_AED4_1AED4:
    // STC  (1000_AED4 / 0x1AED4)
    CarryFlag = true;
    // RET  (1000_AED5 / 0x1AED5)
    return NearRet();
  }
  
  public Action unknown_1000_AED6_1AED6(int gotoTarget) {
    label_1000_AED6_1AED6:
    // CMP byte ptr [0x11c9],0x0 (1000_AED6 / 0x1AED6)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JZ 0x1000:aede (1000_AEDB / 0x1AEDB)
    if(ZeroFlag) {
      goto label_1000_AEDE_1AEDE;
    }
    // RET  (1000_AEDD / 0x1AEDD)
    return NearRet();
    label_1000_AEDE_1AEDE:
    // CALL 0x1000:18ba (1000_AEDE / 0x1AEDE)
    NearCall(cs1, 0xAEE1, unknown_1000_18BA_118BA);
    // CALL 0x1000:181e (1000_AEE1 / 0x1AEE1)
    NearCall(cs1, 0xAEE4, unknown_1000_181E_1181E);
    // CALL 0x1000:daa3 (1000_AEE4 / 0x1AEE4)
    NearCall(cs1, 0xAEE7, InitMapCursorTypeDC58To0_1000_DAA3_1DAA3);
    // MOV byte ptr [0xc6],0x1 (1000_AEE7 / 0x1AEE7)
    UInt8[DS, 0xC6] = 0x1;
    // CALL 0x1000:b2b9 (1000_AEEC / 0x1AEEC)
    NearCall(cs1, 0xAEEF, Inc2788_1000_B2B9_1B2B9);
    // CALL 0x1000:d95b (1000_AEEF / 0x1AEEF)
    NearCall(cs1, 0xAEF2, SetMapClickHandlerAddressToInGame_1000_D95B_1D95B);
    // CALL 0x1000:ad5e (1000_AEF2 / 0x1AEF2)
    NearCall(cs1, 0xAEF5, unknown_1000_AD5E_1AD5E);
    // MOV AL,0x34 (1000_AEF5 / 0x1AEF5)
    AL = 0x34;
    // MOV BP,0xaf26 (1000_AEF7 / 0x1AEF7)
    BP = 0xAF26;
    // CALL 0x1000:c108 (1000_AEFA / 0x1AEFA)
    NearCall(cs1, 0xAEFD, transition_ida_1000_C108_1C108);
    // JMP 0x1000:ae04 (1000_AEFD / 0x1AEFD)
    // Jump converted to entry function call
    return unknown_1000_AE04_1AE04(0);
  }
  
  public Action unknown_1000_AF00_1AF00(int gotoTarget) {
    label_1000_AF00_1AF00:
    // MOV BH,0x4 (1000_AF00 / 0x1AF00)
    BH = 0x4;
    label_1000_AF02_1AF02:
    // MOV BL,0x1c (1000_AF02 / 0x1AF02)
    BL = 0x1C;
    // CALL 0x1000:b147 (1000_AF04 / 0x1AF04)
    NearCall(cs1, 0xAF07, unknown_1000_B147_1B147);
    // MOV AX,0x4000 (1000_AF07 / 0x1AF07)
    AX = 0x4000;
    // JZ 0x1000:af0e (1000_AF0A / 0x1AF0A)
    if(ZeroFlag) {
      goto label_1000_AF0E_1AF0E;
    }
    // XOR AH,AH (1000_AF0C / 0x1AF0C)
    AH = 0;
    label_1000_AF0E_1AF0E:
    // XOR CX,CX (1000_AF0E / 0x1AF0E)
    CX = 0;
    // MOV CL,BH (1000_AF10 / 0x1AF10)
    CL = BH;
    // MOV SI,0x2034 (1000_AF12 / 0x1AF12)
    SI = 0x2034;
    // ADD SI,CX (1000_AF15 / 0x1AF15)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // AND word ptr [SI],0xbfff (1000_AF17 / 0x1AF17)
    // UInt16[DS, SI] &= 0xBFFF;
    UInt16[DS, SI] = Alu.And16(UInt16[DS, SI], 0xBFFF);
    // OR word ptr [SI],AX (1000_AF1B / 0x1AF1B)
    // UInt16[DS, SI] |= AX;
    UInt16[DS, SI] = Alu.Or16(UInt16[DS, SI], AX);
    // ADD BH,0x4 (1000_AF1D / 0x1AF1D)
    // BH += 0x4;
    BH = Alu.Add8(BH, 0x4);
    // CMP BH,0xc (1000_AF20 / 0x1AF20)
    Alu.Sub8(BH, 0xC);
    // JBE 0x1000:af02 (1000_AF23 / 0x1AF23)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_AF02_1AF02;
    }
    // RET  (1000_AF25 / 0x1AF25)
    return NearRet();
  }
  
  public Action unknown_1000_AF26_1AF26(int gotoTarget) {
    label_1000_AF26_1AF26:
    // CALL 0x1000:d7ad (1000_AF26 / 0x1AF26)
    NearCall(cs1, 0xAF29, unknown_1000_D7AD_1D7AD);
    // MOV SI,0x1e1a (1000_AF29 / 0x1AF29)
    SI = 0x1E1A;
    // CALL 0x1000:d72b (1000_AF2C / 0x1AF2C)
    NearCall(cs1, 0xAF2F, unknown_1000_D72B_1D72B);
    // CALL 0x1000:af00 (1000_AF2F / 0x1AF2F)
    NearCall(cs1, 0xAF32, unknown_1000_AF00_1AF00);
    // MOV word ptr [0x2406],0x0 (1000_AF32 / 0x1AF32)
    UInt16[DS, 0x2406] = 0x0;
    // MOV BP,0x2032 (1000_AF38 / 0x1AF38)
    BP = 0x2032;
    // MOV BX,0xd917 (1000_AF3B / 0x1AF3B)
    BX = 0xD917;
    // XOR CX,CX (1000_AF3E / 0x1AF3E)
    CX = 0;
    // CALL 0x1000:d33a (1000_AF40 / 0x1AF40)
    NearCall(cs1, 0xAF43, unknown_1000_D33A_1D33A);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_AF43_1AF43(0);
  }
  
  public Action unknown_1000_AF43_1AF43(int gotoTarget) {
    label_1000_AF43_1AF43:
    // OR byte ptr [0xc6],0x2 (1000_AF43 / 0x1AF43)
    // UInt8[DS, 0xC6] |= 0x2;
    UInt8[DS, 0xC6] = Alu.Or8(UInt8[DS, 0xC6], 0x2);
    // CALL 0x1000:c432 (1000_AF48 / 0x1AF48)
    NearCall(cs1, 0xAF4B, unknown_1000_C432_1C432);
    // MOV AL,0x32 (1000_AF4B / 0x1AF4B)
    AL = 0x32;
    // CALL 0x1000:c2f2 (1000_AF4D / 0x1AF4D)
    NearCall(cs1, 0xAF50, unknown_1000_C2F2_1C2F2);
    // MOV byte ptr [0x1c30],0x0 (1000_AF50 / 0x1AF50)
    UInt8[DS, 0x1C30] = 0x0;
    // JMP 0x1000:1797 (1000_AF55 / 0x1AF55)
    // Jump converted to entry function call
    return unknown_1000_1797_11797(0);
  }
  
  public Action unknown_1000_B024_1B024(int gotoTarget) {
    label_1000_B024_1B024:
    // MOV DH,0xff (1000_B024 / 0x1B024)
    DH = 0xFF;
    // CALL 0x1000:b1af (1000_B026 / 0x1B026)
    NearCall(cs1, 0xB029, unknown_1000_B1AF_1B1AF);
    // MOV BP,0xaf43 (1000_B029 / 0x1B029)
    BP = 0xAF43;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B02C_1B02C(0);
  }
  
  public Action unknown_1000_B02C_1B02C(int gotoTarget) {
    label_1000_B02C_1B02C:
    // CALL 0x1000:ac14 (1000_B02C / 0x1B02C)
    NearCall(cs1, 0xB02F, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // MOV AL,0x2 (1000_B02F / 0x1B02F)
    AL = 0x2;
    // CALL 0x1000:ab15 (1000_B031 / 0x1B031)
    NearCall(cs1, 0xB034, audio_start_voc_ida_1000_AB15_1AB15);
    // MOV AL,0xe (1000_B034 / 0x1B034)
    AL = 0xE;
    // JMP 0x1000:c108 (1000_B036 / 0x1B036)
    // Jump converted to entry function call
    return transition_ida_1000_C108_1C108(0);
  }
  
  public Action unknown_1000_B039_1B039(int gotoTarget) {
    label_1000_B039_1B039:
    // AND byte ptr [0xc6],0xf9 (1000_B039 / 0x1B039)
    // UInt8[DS, 0xC6] &= 0xF9;
    UInt8[DS, 0xC6] = Alu.And8(UInt8[DS, 0xC6], 0xF9);
    // MOV SI,0xa6b0 (1000_B03E / 0x1B03E)
    SI = 0xA6B0;
    // MOV word ptr [0x47bc],SI (1000_B041 / 0x1B041)
    UInt16[DS, 0x47BC] = SI;
    // PUSH SI (1000_B045 / 0x1B045)
    Stack.Push(SI);
    // MOV SI,word ptr [0x11bf] (1000_B046 / 0x1B046)
    SI = UInt16[DS, 0x11BF];
    // MOV SI,word ptr CS:[SI] (1000_B04A / 0x1B04A)
    SI = UInt16[cs1, SI];
    // MOV AX,SI (1000_B04D / 0x1B04D)
    AX = SI;
    // CALL 0x1000:b254 (1000_B04F / 0x1B04F)
    NearCall(cs1, 0xB052, unknown_1000_B254_1B254);
    // SHR AH,1 (1000_B052 / 0x1B052)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (1000_B054 / 0x1B054)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (1000_B056 / 0x1B056)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // MOV AL,AH (1000_B058 / 0x1B058)
    AL = AH;
    // XOR AH,AH (1000_B05A / 0x1B05A)
    AH = 0;
    // ADD AX,0xf3 (1000_B05C / 0x1B05C)
    // AX += 0xF3;
    AX = Alu.Add16(AX, 0xF3);
    // CALL 0x1000:b126 (1000_B05F / 0x1B05F)
    NearCall(cs1, 0xB062, unknown_1000_B126_1B126);
    // AND SI,0x7ff (1000_B062 / 0x1B062)
    // SI &= 0x7FF;
    SI = Alu.And16(SI, 0x7FF);
    // SHL SI,1 (1000_B066 / 0x1B066)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_B068 / 0x1B068)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // ADD SI,0xaa7a (1000_B06A / 0x1B06A)
    // SI += 0xAA7A;
    SI = Alu.Add16(SI, 0xAA7A);
    // MOV word ptr [0x477c],SI (1000_B06E / 0x1B06E)
    UInt16[DS, 0x477C] = SI;
    // LODSW SI (1000_B072 / 0x1B072)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP SI (1000_B073 / 0x1B073)
    SI = Stack.Pop();
    // PUSH AX (1000_B074 / 0x1B074)
    Stack.Push(AX);
    // XCHG AH,AL (1000_B075 / 0x1B075)
    byte tmp_1000_B075 = AH;
    AH = AL;
    AL = tmp_1000_B075;
    // AND AH,0x3 (1000_B077 / 0x1B077)
    // AH &= 0x3;
    AH = Alu.And8(AH, 0x3);
    // OR AH,0x8 (1000_B07A / 0x1B07A)
    // AH |= 0x8;
    AH = Alu.Or8(AH, 0x8);
    // CALL 0x1000:b126 (1000_B07D / 0x1B07D)
    NearCall(cs1, 0xB080, unknown_1000_B126_1B126);
    // MOV DI,word ptr [0x47bc] (1000_B080 / 0x1B080)
    DI = UInt16[DS, 0x47BC];
    // MOV byte ptr [DI + -0x1],0xff (1000_B084 / 0x1B084)
    UInt8[DS, (ushort)(DI - 0x1)] = 0xFF;
    // CALL 0x1000:88e1 (1000_B088 / 0x1B088)
    NearCall(cs1, 0xB08B, unknown_1000_88E1_188E1);
    // MOV SI,0x2408 (1000_B08B / 0x1B08B)
    SI = 0x2408;
    // CALL 0x1000:c551 (1000_B08E / 0x1B08E)
    NearCall(cs1, 0xB091, unknown_1000_C551_1C551);
    // CALL 0x1000:1797 (1000_B091 / 0x1B091)
    NearCall(cs1, 0xB094, unknown_1000_1797_11797);
    // MOV AX,[0xd82e] (1000_B094 / 0x1B094)
    AX = UInt16[DS, 0xD82E];
    // MOV BX,0x8c (1000_B097 / 0x1B097)
    BX = 0x8C;
    // SUB BX,AX (1000_B09A / 0x1B09A)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // SHR BX,1 (1000_B09C / 0x1B09C)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // ADD BX,AX (1000_B09E / 0x1B09E)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // CMP BX,0x8a (1000_B0A0 / 0x1B0A0)
    Alu.Sub16(BX, 0x8A);
    // JNC 0x1000:b0b5 (1000_B0A4 / 0x1B0A4)
    if(!CarryFlag) {
      goto label_1000_B0B5_1B0B5;
    }
    // MOV DX,0x93 (1000_B0A6 / 0x1B0A6)
    DX = 0x93;
    // MOV AX,0x32 (1000_B0A9 / 0x1B0A9)
    AX = 0x32;
    // CALL 0x1000:c13e (1000_B0AC / 0x1B0AC)
    NearCall(cs1, 0xB0AF, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV AX,0x4 (1000_B0AF / 0x1B0AF)
    AX = 0x4;
    // CALL 0x1000:c22f (1000_B0B2 / 0x1B0B2)
    NearCall(cs1, 0xB0B5, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_B0B5_1B0B5:
    // POP AX (1000_B0B5 / 0x1B0B5)
    AX = Stack.Pop();
    // CMP word ptr [0x11bf],0xaa (1000_B0B6 / 0x1B0B6)
    Alu.Sub16(UInt16[DS, 0x11BF], 0xAA);
    // JZ 0x1000:b0d4 (1000_B0BC / 0x1B0BC)
    if(ZeroFlag) {
      goto label_1000_B0D4_1B0D4;
    }
    // AND AX,0xc (1000_B0BE / 0x1B0BE)
    // AX &= 0xC;
    AX = Alu.And16(AX, 0xC);
    // SHR AX,1 (1000_B0C1 / 0x1B0C1)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_B0C3 / 0x1B0C3)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD AX,0x103 (1000_B0C5 / 0x1B0C5)
    // AX += 0x103;
    AX = Alu.Add16(AX, 0x103);
    // MOV BX,0x8b (1000_B0C8 / 0x1B0C8)
    BX = 0x8B;
    // MOV DX,0xfa (1000_B0CB / 0x1B0CB)
    DX = 0xFA;
    // MOV CX,0x64 (1000_B0CE / 0x1B0CE)
    CX = 0x64;
    // CALL 0x1000:d194 (1000_B0D1 / 0x1B0D1)
    NearCall(cs1, 0xB0D4, unknown_1000_D194_1D194);
    label_1000_B0D4_1B0D4:
    // MOV BX,0x3 (1000_B0D4 / 0x1B0D4)
    BX = 0x3;
    // MOV DX,0x132 (1000_B0D7 / 0x1B0D7)
    DX = 0x132;
    // CALL 0x1000:d04e (1000_B0DA / 0x1B0DA)
    NearCall(cs1, 0xB0DD, unknown_1000_D04E_1D04E);
    // MOV word ptr [0xdbe4],0x53 (1000_B0DD / 0x1B0DD)
    UInt16[DS, 0xDBE4] = 0x53;
    // MOV AX,[0x11bf] (1000_B0E3 / 0x1B0E3)
    AX = UInt16[DS, 0x11BF];
    // SUB AX,0xaa (1000_B0E6 / 0x1B0E6)
    // AX -= 0xAA;
    AX = Alu.Sub16(AX, 0xAA);
    // SHR AX,1 (1000_B0E9 / 0x1B0E9)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AX (1000_B0EB / 0x1B0EB)
    AX = Alu.Inc16(AX);
    // AAM 0xa (1000_B0EC / 0x1B0EC)
    Cpu.Aam(0xA);
    // ADD AX,0x3030 (1000_B0EE / 0x1B0EE)
    // AX += 0x3030;
    AX = Alu.Add16(AX, 0x3030);
    // XCHG AH,AL (1000_B0F1 / 0x1B0F1)
    byte tmp_1000_B0F1 = AH;
    AH = AL;
    AL = tmp_1000_B0F1;
    // CMP AL,0x30 (1000_B0F3 / 0x1B0F3)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:b0f9 (1000_B0F5 / 0x1B0F5)
    if(!ZeroFlag) {
      goto label_1000_B0F9_1B0F9;
    }
    // MOV AL,0x20 (1000_B0F7 / 0x1B0F7)
    AL = 0x20;
    label_1000_B0F9_1B0F9:
    // PUSH AX (1000_B0F9 / 0x1B0F9)
    Stack.Push(AX);
    // CALL 0x1000:d12f (1000_B0FA / 0x1B0FA)
    NearCall(cs1, 0xB0FD, unknown_1000_D12F_1D12F);
    // POP AX (1000_B0FD / 0x1B0FD)
    AX = Stack.Pop();
    // MOV AL,AH (1000_B0FE / 0x1B0FE)
    AL = AH;
    // CALL 0x1000:d12f (1000_B100 / 0x1B100)
    NearCall(cs1, 0xB103, unknown_1000_D12F_1D12F);
    // MOV byte ptr [0x1c30],0x0 (1000_B103 / 0x1B103)
    UInt8[DS, 0x1C30] = 0x0;
    // MOV AX,[0x243e] (1000_B108 / 0x1B108)
    AX = UInt16[DS, 0x243E];
    // OR AX,AX (1000_B10B / 0x1B10B)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:b125 (1000_B10D / 0x1B10D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_B125 / 0x1B125)
      return NearRet();
    }
    // MOV byte ptr [0x1c30],0x80 (1000_B10F / 0x1B10F)
    UInt8[DS, 0x1C30] = 0x80;
    // MOV SI,0x2412 (1000_B114 / 0x1B114)
    SI = 0x2412;
    // ADD AX,0xfff5 (1000_B117 / 0x1B117)
    // AX += 0xFFF5;
    AX = Alu.Add16(AX, 0xFFF5);
    // MOV word ptr [SI],AX (1000_B11A / 0x1B11A)
    UInt16[DS, SI] = AX;
    // MOV word ptr [SI + 0x6],AX (1000_B11C / 0x1B11C)
    UInt16[DS, (ushort)(SI + 0x6)] = AX;
    // MOV word ptr [SI + 0xc],AX (1000_B11F / 0x1B11F)
    UInt16[DS, (ushort)(SI + 0xC)] = AX;
    // CALL 0x1000:c21b (1000_B122 / 0x1B122)
    NearCall(cs1, 0xB125, unknown_1000_C21B_1C21B);
    label_1000_B125_1B125:
    // RET  (1000_B125 / 0x1B125)
    return NearRet();
  }
  
  public Action unknown_1000_B126_1B126(int gotoTarget) {
    label_1000_B126_1B126:
    // PUSH SI (1000_B126 / 0x1B126)
    Stack.Push(SI);
    // MOV SI,AX (1000_B127 / 0x1B127)
    SI = AX;
    // CALL 0x1000:cf70 (1000_B129 / 0x1B129)
    NearCall(cs1, 0xB12C, unknown_1000_CF70_1CF70);
    // MOV DI,word ptr [0x47bc] (1000_B12C / 0x1B12C)
    DI = UInt16[DS, 0x47BC];
    // PUSH DI (1000_B130 / 0x1B130)
    Stack.Push(DI);
    // CALL 0x1000:88f1 (1000_B131 / 0x1B131)
    NearCall(cs1, 0xB134, unknown_1000_88F1_188F1);
    // POP DI (1000_B134 / 0x1B134)
    DI = Stack.Pop();
    // CMP byte ptr [SI],0x20 (1000_B135 / 0x1B135)
    Alu.Sub8(UInt8[DS, SI], 0x20);
    // JZ 0x1000:b141 (1000_B138 / 0x1B138)
    if(ZeroFlag) {
      goto label_1000_B141_1B141;
    }
    // CALL 0x1000:8944 (1000_B13A / 0x1B13A)
    NearCall(cs1, 0xB13D, unknown_1000_8944_18944);
    // DEC DI (1000_B13D / 0x1B13D)
    DI = Alu.Dec16(DI);
    // MOV AL,0x20 (1000_B13E / 0x1B13E)
    AL = 0x20;
    // STOSB ES:DI (1000_B140 / 0x1B140)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_B141_1B141:
    // MOV word ptr [0x47bc],DI (1000_B141 / 0x1B141)
    UInt16[DS, 0x47BC] = DI;
    // POP SI (1000_B145 / 0x1B145)
    SI = Stack.Pop();
    // RET  (1000_B146 / 0x1B146)
    return NearRet();
  }
  
  public Action unknown_1000_B147_1B147(int gotoTarget) {
    label_1000_B147_1B147:
    // MOV SI,0xa8 (1000_B147 / 0x1B147)
    SI = 0xA8;
    // MOV DX,0x2 (1000_B14A / 0x1B14A)
    DX = 0x2;
    // MOV CX,0x1 (1000_B14D / 0x1B14D)
    CX = 0x1;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B150_1B150(0);
  }
  
  public Action unknown_1000_B150_1B150(int gotoTarget) {
    label_1000_B150_1B150:
    // XOR DI,DI (1000_B150 / 0x1B150)
    DI = 0;
    label_1000_B152_1B152:
    // ADD SI,DX (1000_B152 / 0x1B152)
    // SI += DX;
    SI = Alu.Add16(SI, DX);
    // OR DX,0x2 (1000_B154 / 0x1B154)
    // DX |= 0x2;
    DX = Alu.Or16(DX, 0x2);
    // MOV BP,word ptr CS:[SI] (1000_B157 / 0x1B157)
    BP = UInt16[cs1, SI];
    // AND BP,0x7ff (1000_B15A / 0x1B15A)
    // BP &= 0x7FF;
    BP = Alu.And16(BP, 0x7FF);
    // JZ 0x1000:b177 (1000_B15E / 0x1B15E)
    if(ZeroFlag) {
      goto label_1000_B177_1B177;
    }
    // SHL BP,1 (1000_B160 / 0x1B160)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // SHL BP,1 (1000_B162 / 0x1B162)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD BP,0xaa78 (1000_B164 / 0x1B164)
    // BP += 0xAA78;
    BP = Alu.Add16(BP, 0xAA78);
    // MOV AL,byte ptr [BP + 0x2] (1000_B168 / 0x1B168)
    AL = UInt8[SS, (ushort)(BP + 0x2)];
    // AND AL,BL (1000_B16B / 0x1B16B)
    // AL &= BL;
    AL = Alu.And8(AL, BL);
    // JZ 0x1000:b173 (1000_B16D / 0x1B16D)
    if(ZeroFlag) {
      goto label_1000_B173_1B173;
    }
    // CMP AL,BH (1000_B16F / 0x1B16F)
    Alu.Sub8(AL, BH);
    // JNZ 0x1000:b152 (1000_B171 / 0x1B171)
    if(!ZeroFlag) {
      goto label_1000_B152_1B152;
    }
    label_1000_B173_1B173:
    // MOV DI,SI (1000_B173 / 0x1B173)
    DI = SI;
    // LOOP 0x1000:b152 (1000_B175 / 0x1B175)
    if(--CX != 0) {
      goto label_1000_B152_1B152;
    }
    label_1000_B177_1B177:
    // OR DI,DI (1000_B177 / 0x1B177)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // RET  (1000_B179 / 0x1B179)
    return NearRet();
  }
  
  public Action unknown_1000_B17A_1B17A(int gotoTarget) {
    label_1000_B17A_1B17A:
    // MOV AL,[0xc6] (1000_B17A / 0x1B17A)
    AL = UInt8[DS, 0xC6];
    // PUSH AX (1000_B17D / 0x1B17D)
    Stack.Push(AX);
    // OR AL,0x80 (1000_B17E / 0x1B17E)
    // AL |= 0x80;
    AL = Alu.Or8(AL, 0x80);
    // MOV [0xc6],AL (1000_B180 / 0x1B180)
    UInt8[DS, 0xC6] = AL;
    // CALL 0x1000:96b5 (1000_B183 / 0x1B183)
    NearCall(cs1, 0xB186, unknown_1000_96B5_196B5);
    // POP AX (1000_B186 / 0x1B186)
    AX = Stack.Pop();
    // MOV [0xc6],AL (1000_B187 / 0x1B187)
    UInt8[DS, 0xC6] = AL;
    // RET  (1000_B18A / 0x1B18A)
    return NearRet();
  }
  
  public Action unknown_1000_B1AF_1B1AF(int gotoTarget) {
    label_1000_B1AF_1B1AF:
    // PUSH DX (1000_B1AF / 0x1B1AF)
    Stack.Push(DX);
    // CALL 0x1000:c08e (1000_B1B0 / 0x1B1B0)
    NearCall(cs1, 0xB1B3, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:c137 (1000_B1B3 / 0x1B1B3)
    NearCall(cs1, 0xB1B6, load_icons_sprites_ida_1000_C137_1C137);
    // MOV AX,0xb (1000_B1B6 / 0x1B1B6)
    AX = 0xB;
    // OR DX,DX (1000_B1B9 / 0x1B1B9)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JS 0x1000:b1be (1000_B1BB / 0x1B1BB)
    if(SignFlag) {
      goto label_1000_B1BE_1B1BE;
    }
    // DEC AX (1000_B1BD / 0x1B1BD)
    AX = Alu.Dec16(AX);
    label_1000_B1BE_1B1BE:
    // MOV BX,0x9e (1000_B1BE / 0x1B1BE)
    BX = 0x9E;
    // MOV DX,0x1b (1000_B1C1 / 0x1B1C1)
    DX = 0x1B;
    // PUSH AX (1000_B1C4 / 0x1B1C4)
    Stack.Push(AX);
    // CALL 0x1000:c2fd (1000_B1C5 / 0x1B1C5)
    NearCall(cs1, 0xB1C8, unknown_1000_C2FD_1C2FD);
    // MOV AX,0xa (1000_B1C8 / 0x1B1C8)
    AX = 0xA;
    // CALL 0x1000:e387 (1000_B1CB / 0x1B1CB)
    NearCall(cs1, 0xB1CE, unknown_1000_E387_1E387);
    // POP AX (1000_B1CE / 0x1B1CE)
    AX = Stack.Pop();
    // INC AX (1000_B1CF / 0x1B1CF)
    AX = Alu.Inc16(AX);
    // CMP AX,0xb (1000_B1D0 / 0x1B1D0)
    Alu.Sub16(AX, 0xB);
    // JZ 0x1000:b1d8 (1000_B1D3 / 0x1B1D3)
    if(ZeroFlag) {
      goto label_1000_B1D8_1B1D8;
    }
    // SUB AX,0x2 (1000_B1D5 / 0x1B1D5)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    label_1000_B1D8_1B1D8:
    // CALL 0x1000:c22f (1000_B1D8 / 0x1B1D8)
    NearCall(cs1, 0xB1DB, draw_sprite_ida_1000_C22F_1C22F);
    // MOV AX,0xa (1000_B1DB / 0x1B1DB)
    AX = 0xA;
    // CALL 0x1000:e387 (1000_B1DE / 0x1B1DE)
    NearCall(cs1, 0xB1E1, unknown_1000_E387_1E387);
    // MOV SI,0x1af4 (1000_B1E1 / 0x1B1E1)
    SI = 0x1AF4;
    // MOV CX,0x1 (1000_B1E4 / 0x1B1E4)
    CX = 0x1;
    // CALL 0x1000:d1f2 (1000_B1E7 / 0x1B1E7)
    NearCall(cs1, 0xB1EA, unknown_1000_D1F2_1D1F2);
    // POP DX (1000_B1EA / 0x1B1EA)
    DX = Stack.Pop();
    // JMP 0x1000:c07c (1000_B1EB / 0x1B1EB)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_B1EE_1B1EE(int gotoTarget) {
    switch(gotoTarget) {
      case 0xABC6: break;
      case 0: goto entry; break; //
    }
    label_1000_ABC6_1ABC6:
    // MOV byte ptr [0xdc2b],0x0 (1000_ABC6 / 0x1ABC6)
    UInt8[DS, 0xDC2B] = 0x0;
    // RET  (1000_ABCB / 0x1ABCB)
    return NearRet();
    entry:
    label_1000_B1EE_1B1EE:
    // CALLF [0x3959] (1000_B1EE / 0x1B1EE)
    // Indirect call to [0x3959], generating possible targets from emulator records
    uint targetAddress_1000_B1EE = (uint)(UInt16[DS, 0x395B] * 0x10 + UInt16[DS, 0x3959] - cs1 * 0x10);
    switch(targetAddress_1000_B1EE) {
      case 0x2362B : FarCall(cs1, 0xB1F2, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B1EE);
        break;
    }
    // CALL 0x1000:aeb7 (1000_B1F2 / 0x1B1F2)
    NearCall(cs1, 0xB1F5, CallMidiFunc02_1000_AEB7_1AEB7);
    // MOV byte ptr [0xdc2b],0x1 (1000_B1F5 / 0x1B1F5)
    UInt8[DS, 0xDC2B] = 0x1;
    // MOV AL,0x34 (1000_B1FA / 0x1B1FA)
    AL = 0x34;
    // MOV BP,0xb236 (1000_B1FC / 0x1B1FC)
    BP = 0xB236;
    // CALL 0x1000:c108 (1000_B1FF / 0x1B1FF)
    NearCall(cs1, 0xB202, transition_ida_1000_C108_1C108);
    // CALL 0x1000:c08e (1000_B202 / 0x1B202)
    NearCall(cs1, 0xB205, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV byte ptr [0xce80],0x0 (1000_B205 / 0x1B205)
    UInt8[DS, 0xCE80] = 0x0;
    // CALL 0x1000:de4e (1000_B20A / 0x1B20A)
    NearCall(cs1, 0xB20D, SetCEE8To0_1000_DE4E_1DE4E);
    label_1000_B20D_1B20D:
    // CALL 0x1000:c9e8 (1000_B20D / 0x1B20D)
    NearCall(cs1, 0xB210, hnm_do_frame_skippable_ida_1000_C9E8_1C9E8);
    // JC 0x1000:b217 (1000_B210 / 0x1B210)
    if(CarryFlag) {
      goto label_1000_B217_1B217;
    }
    // CALL 0x1000:cc85 (1000_B212 / 0x1B212)
    NearCall(cs1, 0xB215, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:b20d (1000_B215 / 0x1B215)
    if(ZeroFlag) {
      goto label_1000_B20D_1B20D;
    }
    label_1000_B217_1B217:
    // CALL 0x1000:ca01 (1000_B217 / 0x1B217)
    NearCall(cs1, 0xB21A, hnm_close_resource_ida_1000_CA01_1CA01);
    // INC byte ptr [0xce80] (1000_B21A / 0x1B21A)
    UInt8[DS, 0xCE80] = Alu.Inc8(UInt8[DS, 0xCE80]);
    // CALL 0x1000:ac14 (1000_B21E / 0x1B21E)
    NearCall(cs1, 0xB221, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // CALL 0x1000:c07c (1000_B221 / 0x1B221)
    NearCall(cs1, 0xB224, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALLF [0x3969] (1000_B224 / 0x1B224)
    // Indirect call to [0x3969], generating possible targets from emulator records
    uint targetAddress_1000_B224 = (uint)(UInt16[DS, 0x396B] * 0x10 + UInt16[DS, 0x3969] - cs1 * 0x10);
    switch(targetAddress_1000_B224) {
      case 0x23637 : FarCall(cs1, 0xB228, unknown_334B_0187_33637);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B224);
        break;
    }
    // MOV AL,0x34 (1000_B228 / 0x1B228)
    AL = 0x34;
    // MOV BP,0xb23f (1000_B22A / 0x1B22A)
    BP = 0xB23F;
    // CALL 0x1000:c108 (1000_B22D / 0x1B22D)
    NearCall(cs1, 0xB230, transition_ida_1000_C108_1C108);
    // CALL 0x1000:c412 (1000_B230 / 0x1B230)
    NearCall(cs1, 0xB233, unknown_1000_C412_1C412);
    // JMP 0x1000:abc6 (1000_B233 / 0x1B233)
    goto label_1000_ABC6_1ABC6;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B236_1B236(0);
  }
  
  public Action unknown_1000_B236_1B236(int gotoTarget) {
    label_1000_B236_1B236:
    // CALL 0x1000:c0ad (1000_B236 / 0x1B236)
    NearCall(cs1, 0xB239, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AX,[0x243e] (1000_B239 / 0x1B239)
    AX = UInt16[DS, 0x243E];
    // JMP 0x1000:ca1b (1000_B23C / 0x1B23C)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action unknown_1000_B23F_1B23F(int gotoTarget) {
    label_1000_B23F_1B23F:
    // CALL 0x1000:c0ad (1000_B23F / 0x1B23F)
    NearCall(cs1, 0xB242, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV CX,0x12 (1000_B242 / 0x1B242)
    CX = 0x12;
    // MOV SI,0x1ae6 (1000_B245 / 0x1B245)
    SI = 0x1AE6;
    // CALL 0x1000:d1f2 (1000_B248 / 0x1B248)
    NearCall(cs1, 0xB24B, unknown_1000_D1F2_1D1F2);
    // CALL 0x1000:d397 (1000_B24B / 0x1B24B)
    NearCall(cs1, 0xB24E, unknown_1000_D397_1D397);
    // CALL 0x1000:b039 (1000_B24E / 0x1B24E)
    NearCall(cs1, 0xB251, unknown_1000_B039_1B039);
    // JMP 0x1000:9901 (1000_B251 / 0x1B251)
    // Jump converted to entry function call
    return Set479ETo0_1000_9901_19901(0);
  }
  
  public Action unknown_1000_B254_1B254(int gotoTarget) {
    label_1000_B254_1B254:
    // PUSH AX (1000_B254 / 0x1B254)
    Stack.Push(AX);
    // PUSH SI (1000_B255 / 0x1B255)
    Stack.Push(SI);
    // PUSH DS (1000_B256 / 0x1B256)
    Stack.Push(DS);
    // POP ES (1000_B257 / 0x1B257)
    ES = Stack.Pop();
    // MOV DI,0x2426 (1000_B258 / 0x1B258)
    DI = 0x2426;
    // MOV CX,0xc (1000_B25B / 0x1B25B)
    CX = 0xC;
    while (CX-- != 0) {
      // SCASW ES:DI (1000_B25E / 0x1B25E)
      Alu.Sub16(AX, UInt16[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      if(ZeroFlag == false) {
        break;
      }
    }
    // MOV AX,0x0 (1000_B260 / 0x1B260)
    AX = 0x0;
    // JNZ 0x1000:b26a (1000_B263 / 0x1B263)
    if(!ZeroFlag) {
      goto label_1000_B26A_1B26A;
    }
    // MOV AX,0x24 (1000_B265 / 0x1B265)
    AX = 0x24;
    // SUB AX,CX (1000_B268 / 0x1B268)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    label_1000_B26A_1B26A:
    // MOV [0x243e],AX (1000_B26A / 0x1B26A)
    UInt16[DS, 0x243E] = AX;
    // POP SI (1000_B26D / 0x1B26D)
    SI = Stack.Pop();
    // POP AX (1000_B26E / 0x1B26E)
    AX = Stack.Pop();
    // RET  (1000_B26F / 0x1B26F)
    return NearRet();
  }
  
  public Action unknown_1000_B2AA_1B2AA(int gotoTarget) {
    label_1000_B2AA_1B2AA:
    // CALL 0x1000:b2b9 (1000_B2AA / 0x1B2AA)
    NearCall(cs1, 0xB2AD, Inc2788_1000_B2B9_1B2B9);
    // MOV BX,0xb2b3 (1000_B2AD / 0x1B2AD)
    BX = 0xB2B3;
    // JMP 0x1000:d323 (1000_B2B0 / 0x1B2B0)
    // Jump converted to entry function call
    return unknown_1000_D323_1D323(0);
  }
  
  public Action unknown_1000_B2B3_1B2B3(int gotoTarget) {
    label_1000_B2B3_1B2B3:
    // DEC byte ptr [0x2788] (1000_B2B3 / 0x1B2B3)
    UInt8[DS, 0x2788] = Alu.Dec8(UInt8[DS, 0x2788]);
    // JNS 0x1000:b2bd (1000_B2B7 / 0x1B2B7)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_B2BD / 0x1B2BD)
      return NearRet();
    }
    // Function call generated as ASM continues to next function entry point without return
    return Inc2788_1000_B2B9_1B2B9(0);
  }
  
  public Action Inc2788_1000_B2B9_1B2B9(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB2BD: goto label_1000_B2BD_1B2BD;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B2B9_1B2B9:
    // INC byte ptr [0x2788] (1000_B2B9 / 0x1B2B9)
    UInt8[DS, 0x2788] = Alu.Inc8(UInt8[DS, 0x2788]);
    label_1000_B2BD_1B2BD:
    // RET  (1000_B2BD / 0x1B2BD)
    return NearRet();
  }
  
  public Action SetUnknown2788To0_1000_B2BE_1B2BE(int gotoTarget) {
    label_1000_B2BE_1B2BE:
    // MOV byte ptr [0x2788],0x0 (1000_B2BE / 0x1B2BE)
    UInt8[DS, 0x2788] = 0x0;
    // RET  (1000_B2C3 / 0x1B2C3)
    return NearRet();
  }
  
  public Action unknown_1000_B2C4_1B2C4(int gotoTarget) {
    label_1000_B2C4_1B2C4:
    // CMP byte ptr [0x38af],0x32 (1000_B2C4 / 0x1B2C4)
    Alu.Sub8(UInt8[DS, 0x38AF], 0x32);
    // JA 0x1000:b30e (1000_B2C9 / 0x1B2C9)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_B30E / 0x1B30E)
      return NearRet();
    }
    // MOV AX,word ptr [SI] (1000_B2CB / 0x1B2CB)
    AX = UInt16[DS, SI];
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B2CD_1B2CD(0);
  }
  
  public Action unknown_1000_B2CD_1B2CD(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB30E: goto label_1000_B30E_1B30E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B2CD_1B2CD:
    // CALL 0x1000:e270 (1000_B2CD / 0x1B2CD)
    NearCall(cs1, 0xB2D0, PushAll_1000_E270_1E270);
    // PUSH ES (1000_B2D0 / 0x1B2D0)
    Stack.Push(ES);
    // AND AX,0xfff (1000_B2D1 / 0x1B2D1)
    // AX &= 0xFFF;
    AX = Alu.And16(AX, 0xFFF);
    // MOV SI,AX (1000_B2D4 / 0x1B2D4)
    SI = AX;
    // CALL 0x1000:cf70 (1000_B2D6 / 0x1B2D6)
    NearCall(cs1, 0xB2D9, unknown_1000_CF70_1CF70);
    // CALL 0x1000:d03c (1000_B2D9 / 0x1B2D9)
    NearCall(cs1, 0xB2DC, unknown_1000_D03C_1D03C);
    // CALL 0x1000:d03c (1000_B2DC / 0x1B2DC)
    NearCall(cs1, 0xB2DF, unknown_1000_D03C_1D03C);
    // MOV AX,[0xd816] (1000_B2DF / 0x1B2DF)
    AX = UInt16[DS, 0xD816];
    // PUSH AX (1000_B2E2 / 0x1B2E2)
    Stack.Push(AX);
    // ADD AX,0x3 (1000_B2E3 / 0x1B2E3)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (1000_B2E6 / 0x1B2E6)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_B2E8 / 0x1B2E8)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_B2EA / 0x1B2EA)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_B2EC / 0x1B2EC)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AX (1000_B2EE / 0x1B2EE)
    AX = Alu.Inc16(AX);
    // CALL 0x1000:e2e3 (1000_B2EF / 0x1B2EF)
    NearCall(cs1, 0xB2F2, unknown_1000_E2E3_1E2E3);
    // LEA DI,[SI + 0x3] (1000_B2F2 / 0x1B2F2)
    DI = (ushort)(SI + 0x3);
    // MOV SI,0x117 (1000_B2F5 / 0x1B2F5)
    SI = 0x117;
    // CALL 0x1000:cf70 (1000_B2F8 / 0x1B2F8)
    NearCall(cs1, 0xB2FB, unknown_1000_CF70_1CF70);
    // POP AX (1000_B2FB / 0x1B2FB)
    AX = Stack.Pop();
    // AND AL,0xf (1000_B2FC / 0x1B2FC)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // MOV AH,0xa (1000_B2FE / 0x1B2FE)
    AH = 0xA;
    // MUL AH (1000_B300 / 0x1B300)
    Cpu.Mul8(AH);
    // ADD SI,AX (1000_B302 / 0x1B302)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV CX,0xa (1000_B304 / 0x1B304)
    CX = 0xA;
    while (CX-- != 0) {
      // MOVSB ES:DI,ES:SI (1000_B307 / 0x1B307)
      UInt8[ES, DI] = UInt8[ES, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP ES (1000_B30A / 0x1B30A)
    ES = Stack.Pop();
    // CALL 0x1000:e283 (1000_B30B / 0x1B30B)
    NearCall(cs1, 0xB30E, PopAll_1000_E283_1E283);
    label_1000_B30E_1B30E:
    // RET  (1000_B30E / 0x1B30E)
    return NearRet();
  }
  
  public Action unknown_1000_B30F_1B30F(int gotoTarget) {
    label_1000_B30F_1B30F:
    // MOV DI,0x38a8 (1000_B30F / 0x1B30F)
    DI = 0x38A8;
    // MOV byte ptr [DI + 0x7],0x31 (1000_B312 / 0x1B312)
    UInt8[DS, (ushort)(DI + 0x7)] = 0x31;
    label_1000_B316_1B316:
    // MOV DX,DI (1000_B316 / 0x1B316)
    DX = DI;
    // CALL 0x1000:f2fc (1000_B318 / 0x1B318)
    NearCall(cs1, 0xB31B, strcpy_to_filename_buf_ida_1000_F2FC_1F2FC);
    // MOV AX,0x3d00 (1000_B31B / 0x1B31B)
    AX = 0x3D00;
    // INT 0x21 (1000_B31E / 0x1B31E)
    Interrupt(0x21);
    // JC 0x1000:b33c (1000_B320 / 0x1B320)
    if(CarryFlag) {
      goto label_1000_B33C_1B33C;
    }
    // MOV BX,AX (1000_B322 / 0x1B322)
    BX = AX;
    // MOV DX,0xd816 (1000_B324 / 0x1B324)
    DX = 0xD816;
    // PUSH CX (1000_B327 / 0x1B327)
    Stack.Push(CX);
    // MOV CX,0x2 (1000_B328 / 0x1B328)
    CX = 0x2;
    // MOV AH,0x3f (1000_B32B / 0x1B32B)
    AH = 0x3F;
    // INT 0x21 (1000_B32D / 0x1B32D)
    Interrupt(0x21);
    // CMP AX,CX (1000_B32F / 0x1B32F)
    Alu.Sub16(AX, CX);
    // POP CX (1000_B331 / 0x1B331)
    CX = Stack.Pop();
    // JC 0x1000:b33c (1000_B332 / 0x1B332)
    if(CarryFlag) {
      goto label_1000_B33C_1B33C;
    }
    // MOV AH,0x3e (1000_B334 / 0x1B334)
    AH = 0x3E;
    // INT 0x21 (1000_B336 / 0x1B336)
    Interrupt(0x21);
    // CALL 0x1000:b2c4 (1000_B338 / 0x1B338)
    NearCall(cs1, 0xB33B, unknown_1000_B2C4_1B2C4);
    // CLC  (1000_B33B / 0x1B33B)
    CarryFlag = false;
    label_1000_B33C_1B33C:
    // SBB AX,AX (1000_B33C / 0x1B33C)
    AX = Alu.Sbb16(AX, AX);
    // CMP CH,0x80 (1000_B33E / 0x1B33E)
    Alu.Sub8(CH, 0x80);
    // JNZ 0x1000:b345 (1000_B341 / 0x1B341)
    if(!ZeroFlag) {
      goto label_1000_B345_1B345;
    }
    // NOT AX (1000_B343 / 0x1B343)
    AX = (ushort)~AX;
    label_1000_B345_1B345:
    // AND AX,CX (1000_B345 / 0x1B345)
    // AX &= CX;
    AX = Alu.And16(AX, CX);
    // AND word ptr [SI],0x3fff (1000_B347 / 0x1B347)
    // UInt16[DS, SI] &= 0x3FFF;
    UInt16[DS, SI] = Alu.And16(UInt16[DS, SI], 0x3FFF);
    // OR word ptr [SI],AX (1000_B34B / 0x1B34B)
    // UInt16[DS, SI] |= AX;
    UInt16[DS, SI] = Alu.Or16(UInt16[DS, SI], AX);
    // ADD SI,0x4 (1000_B34D / 0x1B34D)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // INC byte ptr [DI + 0x7] (1000_B350 / 0x1B350)
    UInt8[DS, (ushort)(DI + 0x7)] = Alu.Inc8(UInt8[DS, (ushort)(DI + 0x7)]);
    // CMP word ptr [SI],0xa3 (1000_B353 / 0x1B353)
    Alu.Sub16(UInt16[DS, SI], 0xA3);
    // JNZ 0x1000:b316 (1000_B357 / 0x1B357)
    if(!ZeroFlag) {
      goto label_1000_B316_1B316;
    }
    // RET  (1000_B359 / 0x1B359)
    return NearRet();
  }
  
  public Action open_sav_cl_ida_1000_B389_1B389(int gotoTarget) {
    label_1000_B389_1B389:
    // ADD CL,0x31 (1000_B389 / 0x1B389)
    // CL += 0x31;
    CL = Alu.Add8(CL, 0x31);
    // MOV byte ptr [0x38af],CL (1000_B38C / 0x1B38C)
    UInt8[DS, 0x38AF] = CL;
    // CALL 0x1000:b427 (1000_B390 / 0x1B390)
    NearCall(cs1, 0xB393, map_func_ida_1000_B427_1B427);
    // MOV AX,[0x2] (1000_B393 / 0x1B393)
    AX = UInt16[DS, 0x2];
    // PUSH DS (1000_B396 / 0x1B396)
    Stack.Push(DS);
    // PUSH ES (1000_B397 / 0x1B397)
    Stack.Push(ES);
    // POP DS (1000_B398 / 0x1B398)
    DS = Stack.Pop();
    // MOV SI,DI (1000_B399 / 0x1B399)
    SI = DI;
    // XOR DI,DI (1000_B39B / 0x1B39B)
    DI = 0;
    // STOSW ES:DI (1000_B39D / 0x1B39D)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CALL 0x1000:b4ea (1000_B39E / 0x1B39E)
    NearCall(cs1, 0xB3A1, unknown_1000_B4EA_1B4EA);
    // POP DS (1000_B3A1 / 0x1B3A1)
    DS = Stack.Pop();
    // MOV DX,0x38a8 (1000_B3A2 / 0x1B3A2)
    DX = 0x38A8;
    // CALL 0x1000:f2fc (1000_B3A5 / 0x1B3A5)
    NearCall(cs1, 0xB3A8, strcpy_to_filename_buf_ida_1000_F2FC_1F2FC);
    // XOR DI,DI (1000_B3A8 / 0x1B3A8)
    DI = 0;
    // ADD CX,0x2 (1000_B3AA / 0x1B3AA)
    // CX += 0x2;
    CX = Alu.Add16(CX, 0x2);
    // JMP 0x1000:f27c (1000_B3AD / 0x1B3AD)
    goto label_1000_F27C_1F27C;
    label_1000_F27C_1F27C:
    // PUSH CX (1000_F27C / 0x1F27C)
    Stack.Push(CX);
    // MOV AH,0x3c (1000_F27D / 0x1F27D)
    AH = 0x3C;
    // XOR CX,CX (1000_F27F / 0x1F27F)
    CX = 0;
    // INT 0x21 (1000_F281 / 0x1F281)
    Interrupt(0x21);
    // POP CX (1000_F283 / 0x1F283)
    CX = Stack.Pop();
    // JC 0x1000:f29a (1000_F284 / 0x1F284)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_F29A / 0x1F29A)
      return NearRet();
    }
    // MOV BX,AX (1000_F286 / 0x1F286)
    BX = AX;
    // PUSH DS (1000_F288 / 0x1F288)
    Stack.Push(DS);
    // PUSH ES (1000_F289 / 0x1F289)
    Stack.Push(ES);
    // POP DS (1000_F28A / 0x1F28A)
    DS = Stack.Pop();
    // MOV DX,DI (1000_F28B / 0x1F28B)
    DX = DI;
    // MOV AH,0x40 (1000_F28D / 0x1F28D)
    AH = 0x40;
    // INT 0x21 (1000_F28F / 0x1F28F)
    Interrupt(0x21);
    // POP DS (1000_F291 / 0x1F291)
    DS = Stack.Pop();
    // SUB AX,CX (1000_F292 / 0x1F292)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // PUSHF  (1000_F294 / 0x1F294)
    Stack.Push(FlagRegister);
    // MOV AH,0x3e (1000_F295 / 0x1F295)
    AH = 0x3E;
    // INT 0x21 (1000_F297 / 0x1F297)
    Interrupt(0x21);
    // POPF  (1000_F299 / 0x1F299)
    FlagRegister = Stack.Pop();
    label_1000_F29A_1F29A:
    // RET  (1000_F29A / 0x1F29A)
    return NearRet();
  }
  
  public Action map_func_ida_1000_B427_1B427(int gotoTarget) {
    label_1000_B427_1B427:
    // MOV CX,0x578 (1000_B427 / 0x1B427)
    CX = 0x578;
    // CALL 0x1000:f11c (1000_B42A / 0x1B42A)
    NearCall(cs1, 0xB42D, alloc_cx_pages_to_di_ida_1000_F11C_1F11C);
    // MOV DI,0x100 (1000_B42D / 0x1B42D)
    DI = 0x100;
    // PUSH DI (1000_B430 / 0x1B430)
    Stack.Push(DI);
    // PUSH ES (1000_B431 / 0x1B431)
    Stack.Push(ES);
    // PUSH DS (1000_B432 / 0x1B432)
    Stack.Push(DS);
    // LDS SI,[0xdcfe] (1000_B433 / 0x1B433)
    SI = UInt16[DS, 0xDCFE];
    DS = UInt16[DS, 0xDD00];
    // XOR SI,SI (1000_B437 / 0x1B437)
    SI = 0;
    // MOV CX,0xc5fc (1000_B439 / 0x1B439)
    CX = 0xC5FC;
    // SHR CX,1 (1000_B43C / 0x1B43C)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (1000_B43E / 0x1B43E)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    label_1000_B440_1B440:
    // MOV AH,0x3 (1000_B440 / 0x1B440)
    AH = 0x3;
    label_1000_B442_1B442:
    // LODSB SI (1000_B442 / 0x1B442)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHL AL,1 (1000_B443 / 0x1B443)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_B445 / 0x1B445)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AX,1 (1000_B447 / 0x1B447)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_B449 / 0x1B449)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNC 0x1000:b442 (1000_B44B / 0x1B44B)
    if(!CarryFlag) {
      goto label_1000_B442_1B442;
    }
    // MOV AL,AH (1000_B44D / 0x1B44D)
    AL = AH;
    // STOSB ES:DI (1000_B44F / 0x1B44F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x1000:b440 (1000_B450 / 0x1B450)
    if(--CX != 0) {
      goto label_1000_B440_1B440;
    }
    // PUSH CS (1000_B452 / 0x1B452)
    Stack.Push(cs1);
    // POP DS (1000_B453 / 0x1B453)
    DS = Stack.Pop();
    // MOV SI,0xaa (1000_B454 / 0x1B454)
    SI = 0xAA;
    // MOV CX,0xa2 (1000_B457 / 0x1B457)
    CX = 0xA2;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B45A / 0x1B45A)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DS (1000_B45C / 0x1B45C)
    DS = Stack.Pop();
    // MOV SI,0xaa76 (1000_B45D / 0x1B45D)
    SI = 0xAA76;
    // MOV CX,0x11f8 (1000_B460 / 0x1B460)
    CX = 0x11F8;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B463 / 0x1B463)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV SI,0x0 (1000_B465 / 0x1B465)
    SI = 0x0;
    // MOV CX,0x1261 (1000_B468 / 0x1B468)
    CX = 0x1261;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B46B / 0x1B46B)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP ES (1000_B46D / 0x1B46D)
    ES = Stack.Pop();
    // POP DI (1000_B46E / 0x1B46E)
    DI = Stack.Pop();
    // MOV CX,0x567a (1000_B46F / 0x1B46F)
    CX = 0x567A;
    // RET  (1000_B472 / 0x1B472)
    return NearRet();
  }
  
  public Action unknown_1000_B473_1B473(int gotoTarget) {
    label_1000_B473_1B473:
    // MOV ES,word ptr SS:[0xdd00] (1000_B473 / 0x1B473)
    ES = UInt16[SS, 0xDD00];
    // XOR DI,DI (1000_B478 / 0x1B478)
    DI = 0;
    // MOV BX,0xc5fc (1000_B47A / 0x1B47A)
    BX = 0xC5FC;
    // SHR BX,1 (1000_B47D / 0x1B47D)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_B47F / 0x1B47F)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    label_1000_B481_1B481:
    // LODSB SI (1000_B481 / 0x1B481)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV CX,0x4 (1000_B482 / 0x1B482)
    CX = 0x4;
    // MOV AH,AL (1000_B485 / 0x1B485)
    AH = AL;
    // ROR AH,1 (1000_B487 / 0x1B487)
    AH = Alu.Ror8(AH, 1);
    // ROR AH,1 (1000_B489 / 0x1B489)
    AH = Alu.Ror8(AH, 1);
    label_1000_B48B_1B48B:
    // MOV AL,byte ptr ES:[DI] (1000_B48B / 0x1B48B)
    AL = UInt8[ES, DI];
    // XOR AL,AH (1000_B48E / 0x1B48E)
    // AL ^= AH;
    AL = Alu.Xor8(AL, AH);
    // AND AL,0xcf (1000_B490 / 0x1B490)
    // AL &= 0xCF;
    AL = Alu.And8(AL, 0xCF);
    // XOR AL,AH (1000_B492 / 0x1B492)
    // AL ^= AH;
    AL = Alu.Xor8(AL, AH);
    // STOSB ES:DI (1000_B494 / 0x1B494)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ROL AH,1 (1000_B495 / 0x1B495)
    AH = Alu.Rol8(AH, 1);
    // ROL AH,1 (1000_B497 / 0x1B497)
    AH = Alu.Rol8(AH, 1);
    // LOOP 0x1000:b48b (1000_B499 / 0x1B499)
    if(--CX != 0) {
      goto label_1000_B48B_1B48B;
    }
    // DEC BX (1000_B49B / 0x1B49B)
    BX = Alu.Dec16(BX);
    // JNZ 0x1000:b481 (1000_B49C / 0x1B49C)
    if(!ZeroFlag) {
      goto label_1000_B481_1B481;
    }
    // PUSH CS (1000_B49E / 0x1B49E)
    Stack.Push(cs1);
    // POP ES (1000_B49F / 0x1B49F)
    ES = Stack.Pop();
    // MOV DI,0xaa (1000_B4A0 / 0x1B4A0)
    DI = 0xAA;
    // MOV CX,0xa2 (1000_B4A3 / 0x1B4A3)
    CX = 0xA2;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B4A6 / 0x1B4A6)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // PUSH SS (1000_B4A8 / 0x1B4A8)
    Stack.Push(SS);
    // POP ES (1000_B4A9 / 0x1B4A9)
    ES = Stack.Pop();
    // MOV DI,0xaa76 (1000_B4AA / 0x1B4AA)
    DI = 0xAA76;
    // MOV CX,0x11f8 (1000_B4AD / 0x1B4AD)
    CX = 0x11F8;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B4B0 / 0x1B4B0)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV DI,0x0 (1000_B4B2 / 0x1B4B2)
    DI = 0x0;
    // MOV CX,0x1261 (1000_B4B5 / 0x1B4B5)
    CX = 0x1261;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B4B8 / 0x1B4B8)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // RET  (1000_B4BA / 0x1B4BA)
    return NearRet();
  }
  
  public Action unknown_1000_B4BB_1B4BB(int gotoTarget) {
    label_1000_B4BB_1B4BB:
    // LODSW SI (1000_B4BB / 0x1B4BB)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BL,AL (1000_B4BC / 0x1B4BC)
    BL = AL;
    // LODSW SI (1000_B4BE / 0x1B4BE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_B4BF / 0x1B4BF)
    CX = AX;
    // SUB CX,0x4 (1000_B4C1 / 0x1B4C1)
    // CX -= 0x4;
    CX = Alu.Sub16(CX, 0x4);
    // PUSH DI (1000_B4C4 / 0x1B4C4)
    Stack.Push(DI);
    label_1000_B4C5_1B4C5:
    // LODSB SI (1000_B4C5 / 0x1B4C5)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,BL (1000_B4C6 / 0x1B4C6)
    Alu.Sub8(AL, BL);
    // JZ 0x1000:b4d3 (1000_B4C8 / 0x1B4C8)
    if(ZeroFlag) {
      goto label_1000_B4D3_1B4D3;
    }
    // STOSB ES:DI (1000_B4CA / 0x1B4CA)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x1000:b4c5 (1000_B4CB / 0x1B4CB)
    if(--CX != 0) {
      goto label_1000_B4C5_1B4C5;
    }
    label_1000_B4CD_1B4CD:
    // POP CX (1000_B4CD / 0x1B4CD)
    CX = Stack.Pop();
    // SUB DI,CX (1000_B4CE / 0x1B4CE)
    // DI -= CX;
    DI = Alu.Sub16(DI, CX);
    // XCHG DI,CX (1000_B4D0 / 0x1B4D0)
    ushort tmp_1000_B4D0 = DI;
    DI = CX;
    CX = tmp_1000_B4D0;
    // RET  (1000_B4D2 / 0x1B4D2)
    return NearRet();
    label_1000_B4D3_1B4D3:
    // LODSB SI (1000_B4D3 / 0x1B4D3)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV DX,CX (1000_B4D4 / 0x1B4D4)
    DX = CX;
    // MOV CL,AL (1000_B4D6 / 0x1B4D6)
    CL = AL;
    // XOR CH,CH (1000_B4D8 / 0x1B4D8)
    CH = 0;
    // LODSB SI (1000_B4DA / 0x1B4DA)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    while (CX-- != 0) {
      // STOSB ES:DI (1000_B4DB / 0x1B4DB)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV CX,DX (1000_B4DD / 0x1B4DD)
    CX = DX;
    // SUB CX,0x2 (1000_B4DF / 0x1B4DF)
    // CX -= 0x2;
    CX = Alu.Sub16(CX, 0x2);
    // JCXZ 0x1000:b4cd (1000_B4E2 / 0x1B4E2)
    if(CX == 0) {
      goto label_1000_B4CD_1B4CD;
    }
    // JC 0x1000:b4cd (1000_B4E4 / 0x1B4E4)
    if(CarryFlag) {
      goto label_1000_B4CD_1B4CD;
    }
    // LOOP 0x1000:b4c5 (1000_B4E6 / 0x1B4E6)
    if(--CX != 0) {
      goto label_1000_B4C5_1B4C5;
    }
    // JMP 0x1000:b4cd (1000_B4E8 / 0x1B4E8)
    goto label_1000_B4CD_1B4CD;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B4EA_1B4EA(0);
  }
  
  public Action unknown_1000_B4EA_1B4EA(int gotoTarget) {
    label_1000_B4EA_1B4EA:
    // MOV DL,0xf7 (1000_B4EA / 0x1B4EA)
    DL = 0xF7;
    // PUSH DI (1000_B4EC / 0x1B4EC)
    Stack.Push(DI);
    // ADD DI,0x4 (1000_B4ED / 0x1B4ED)
    // DI += 0x4;
    DI = Alu.Add16(DI, 0x4);
    label_1000_B4F0_1B4F0:
    // XOR DH,DH (1000_B4F0 / 0x1B4F0)
    DH = 0;
    label_1000_B4F2_1B4F2:
    // LODSB SI (1000_B4F2 / 0x1B4F2)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DH (1000_B4F3 / 0x1B4F3)
    DH = Alu.Inc8(DH);
    // CMP AL,byte ptr [SI] (1000_B4F5 / 0x1B4F5)
    Alu.Sub8(AL, UInt8[DS, SI]);
    // JNZ 0x1000:b504 (1000_B4F7 / 0x1B4F7)
    if(!ZeroFlag) {
      goto label_1000_B504_1B504;
    }
    // CMP DH,0xff (1000_B4F9 / 0x1B4F9)
    Alu.Sub8(DH, 0xFF);
    // JZ 0x1000:b504 (1000_B4FC / 0x1B4FC)
    if(ZeroFlag) {
      goto label_1000_B504_1B504;
    }
    // DEC CX (1000_B4FE / 0x1B4FE)
    CX = Alu.Dec16(CX);
    // OR CX,CX (1000_B4FF / 0x1B4FF)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JNZ 0x1000:b4f2 (1000_B501 / 0x1B501)
    if(!ZeroFlag) {
      goto label_1000_B4F2_1B4F2;
    }
    // INC CX (1000_B503 / 0x1B503)
    CX = Alu.Inc16(CX);
    label_1000_B504_1B504:
    // CMP AL,DL (1000_B504 / 0x1B504)
    Alu.Sub8(AL, DL);
    // JZ 0x1000:b512 (1000_B506 / 0x1B506)
    if(ZeroFlag) {
      goto label_1000_B512_1B512;
    }
    // CMP DH,0x1 (1000_B508 / 0x1B508)
    Alu.Sub8(DH, 0x1);
    // JZ 0x1000:b51c (1000_B50B / 0x1B50B)
    if(ZeroFlag) {
      goto label_1000_B51C_1B51C;
    }
    // CMP DH,0x2 (1000_B50D / 0x1B50D)
    Alu.Sub8(DH, 0x2);
    // JZ 0x1000:b52f (1000_B510 / 0x1B510)
    if(ZeroFlag) {
      goto label_1000_B52F_1B52F;
    }
    label_1000_B512_1B512:
    // MOV AH,AL (1000_B512 / 0x1B512)
    AH = AL;
    // MOV AL,DL (1000_B514 / 0x1B514)
    AL = DL;
    // STOSB ES:DI (1000_B516 / 0x1B516)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,DH (1000_B517 / 0x1B517)
    AL = DH;
    // STOSB ES:DI (1000_B519 / 0x1B519)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,AH (1000_B51A / 0x1B51A)
    AL = AH;
    label_1000_B51C_1B51C:
    // STOSB ES:DI (1000_B51C / 0x1B51C)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x1000:b4f0 (1000_B51D / 0x1B51D)
    if(--CX != 0) {
      goto label_1000_B4F0_1B4F0;
    }
    // MOV CX,DI (1000_B51F / 0x1B51F)
    CX = DI;
    // XOR AX,AX (1000_B521 / 0x1B521)
    AX = 0;
    // STOSW ES:DI (1000_B523 / 0x1B523)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP DI (1000_B524 / 0x1B524)
    DI = Stack.Pop();
    // SUB CX,DI (1000_B525 / 0x1B525)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // MOV word ptr ES:[DI],DX (1000_B527 / 0x1B527)
    UInt16[ES, DI] = DX;
    // MOV word ptr ES:[DI + 0x2],CX (1000_B52A / 0x1B52A)
    UInt16[ES, (ushort)(DI + 0x2)] = CX;
    // RET  (1000_B52E / 0x1B52E)
    return NearRet();
    label_1000_B52F_1B52F:
    // STOSB ES:DI (1000_B52F / 0x1B52F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x1000:b51c (1000_B530 / 0x1B530)
    goto label_1000_B51C_1B51C;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B532_1B532(0);
  }
  
  public Action unknown_1000_B532_1B532(int gotoTarget) {
    label_1000_B532_1B532:
    // PUSH DX (1000_B532 / 0x1B532)
    Stack.Push(DX);
    // CALL 0x1000:b58b (1000_B533 / 0x1B533)
    NearCall(cs1, 0xB536, map_func_ida_1000_B58B_1B58B);
    // POP DX (1000_B536 / 0x1B536)
    DX = Stack.Pop();
    // MOV AL,byte ptr ES:[DI] (1000_B537 / 0x1B537)
    AL = UInt8[ES, DI];
    // RET  (1000_B53A / 0x1B53A)
    return NearRet();
  }
  
  public Action unknown_1000_B53B_1B53B(int gotoTarget) {
    label_1000_B53B_1B53B:
    // PUSH BX (1000_B53B / 0x1B53B)
    Stack.Push(BX);
    // PUSH CX (1000_B53C / 0x1B53C)
    Stack.Push(CX);
    // PUSH DX (1000_B53D / 0x1B53D)
    Stack.Push(DX);
    // PUSH AX (1000_B53E / 0x1B53E)
    Stack.Push(AX);
    // CALL 0x1000:b58b (1000_B53F / 0x1B53F)
    NearCall(cs1, 0xB542, map_func_ida_1000_B58B_1B58B);
    // POP AX (1000_B542 / 0x1B542)
    AX = Stack.Pop();
    // MOV CX,AX (1000_B543 / 0x1B543)
    CX = AX;
    // SHR AX,1 (1000_B545 / 0x1B545)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB DI,AX (1000_B547 / 0x1B547)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // SUB DX,AX (1000_B549 / 0x1B549)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // JNC 0x1000:b551 (1000_B54B / 0x1B54B)
    if(!CarryFlag) {
      goto label_1000_B551_1B551;
    }
    // ADD DX,BP (1000_B54D / 0x1B54D)
    // DX += BP;
    DX = Alu.Add16(DX, BP);
    // ADD DI,BP (1000_B54F / 0x1B54F)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    label_1000_B551_1B551:
    // MOV AL,byte ptr ES:[DI] (1000_B551 / 0x1B551)
    AL = UInt8[ES, DI];
    // MOV byte ptr [SI],AL (1000_B554 / 0x1B554)
    UInt8[DS, SI] = AL;
    // MOV word ptr [SI + 0x1],DI (1000_B556 / 0x1B556)
    UInt16[DS, (ushort)(SI + 0x1)] = DI;
    // ADD SI,0x3 (1000_B559 / 0x1B559)
    // SI += 0x3;
    SI = Alu.Add16(SI, 0x3);
    // INC DI (1000_B55C / 0x1B55C)
    DI = Alu.Inc16(DI);
    // INC DX (1000_B55D / 0x1B55D)
    DX = Alu.Inc16(DX);
    // CMP DX,BP (1000_B55E / 0x1B55E)
    Alu.Sub16(DX, BP);
    // JC 0x1000:b566 (1000_B560 / 0x1B560)
    if(CarryFlag) {
      goto label_1000_B566_1B566;
    }
    // SUB DX,BP (1000_B562 / 0x1B562)
    // DX -= BP;
    DX = Alu.Sub16(DX, BP);
    // SUB DI,BP (1000_B564 / 0x1B564)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    label_1000_B566_1B566:
    // LOOP 0x1000:b551 (1000_B566 / 0x1B566)
    if(--CX != 0) {
      goto label_1000_B551_1B551;
    }
    // POP DX (1000_B568 / 0x1B568)
    DX = Stack.Pop();
    // POP CX (1000_B569 / 0x1B569)
    CX = Stack.Pop();
    // POP BX (1000_B56A / 0x1B56A)
    BX = Stack.Pop();
    // RET  (1000_B56B / 0x1B56B)
    return NearRet();
  }
  
  public Action unknown_1000_B56C_1B56C(int gotoTarget) {
    label_1000_B56C_1B56C:
    // PUSH CX (1000_B56C / 0x1B56C)
    Stack.Push(CX);
    // MOV SI,CX (1000_B56D / 0x1B56D)
    SI = CX;
    // SHR SI,1 (1000_B56F / 0x1B56F)
    // SI >>= 1;
    SI = Alu.Shr16(SI, 1);
    // SUB BX,SI (1000_B571 / 0x1B571)
    // BX -= SI;
    BX = Alu.Sub16(BX, SI);
    // CMP BX,-0x62 (1000_B573 / 0x1B573)
    Alu.Sub16(BX, 0xFF9E);
    // JGE 0x1000:b57b (1000_B576 / 0x1B576)
    if(SignFlag == OverflowFlag) {
      goto label_1000_B57B_1B57B;
    }
    // MOV BX,0xff9e (1000_B578 / 0x1B578)
    BX = 0xFF9E;
    label_1000_B57B_1B57B:
    // MOV SI,0x9e68 (1000_B57B / 0x1B57B)
    SI = 0x9E68;
    label_1000_B57E_1B57E:
    // PUSH AX (1000_B57E / 0x1B57E)
    Stack.Push(AX);
    // CALL 0x1000:b53b (1000_B57F / 0x1B57F)
    NearCall(cs1, 0xB582, unknown_1000_B53B_1B53B);
    // POP AX (1000_B582 / 0x1B582)
    AX = Stack.Pop();
    // INC BX (1000_B583 / 0x1B583)
    BX = Alu.Inc16(BX);
    // LOOP 0x1000:b57e (1000_B584 / 0x1B584)
    if(--CX != 0) {
      goto label_1000_B57E_1B57E;
    }
    // MOV SI,0x9e68 (1000_B586 / 0x1B586)
    SI = 0x9E68;
    // POP CX (1000_B589 / 0x1B589)
    CX = Stack.Pop();
    // RET  (1000_B58A / 0x1B58A)
    return NearRet();
  }
  
  public Action map_func_ida_1000_B58B_1B58B(int gotoTarget) {
    label_1000_B58B_1B58B:
    // CALL 0x1000:b5a0 (1000_B58B / 0x1B58B)
    NearCall(cs1, 0xB58E, unknown_1000_B5A0_1B5A0);
    // LES DI,[0xdcfe] (1000_B58E / 0x1B58E)
    DI = UInt16[DS, 0xDCFE];
    ES = UInt16[DS, 0xDD00];
    // ADD DI,AX (1000_B592 / 0x1B592)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV AX,BP (1000_B594 / 0x1B594)
    AX = BP;
    // MUL DX (1000_B596 / 0x1B596)
    Cpu.Mul16(DX);
    // SHL AX,1 (1000_B598 / 0x1B598)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADC DX,0x0 (1000_B59A / 0x1B59A)
    DX = Alu.Adc16(DX, 0x0);
    // ADD DI,DX (1000_B59D / 0x1B59D)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    // RET  (1000_B59F / 0x1B59F)
    return NearRet();
  }
  
  public Action unknown_1000_B5A0_1B5A0(int gotoTarget) {
    label_1000_B5A0_1B5A0:
    // PUSH BX (1000_B5A0 / 0x1B5A0)
    Stack.Push(BX);
    // SHL BX,1 (1000_B5A1 / 0x1B5A1)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_B5A3 / 0x1B5A3)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_B5A5 / 0x1B5A5)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // JNS 0x1000:b5b9 (1000_B5A7 / 0x1B5A7)
    if(!SignFlag) {
      goto label_1000_B5B9_1B5B9;
    }
    // NEG BX (1000_B5A9 / 0x1B5A9)
    BX = Alu.Sub16(0, BX);
    // MOV AX,word ptr [BX + 0x4948] (1000_B5AB / 0x1B5AB)
    AX = UInt16[DS, (ushort)(BX + 0x4948)];
    // NEG AX (1000_B5AF / 0x1B5AF)
    AX = Alu.Sub16(0, AX);
    // MOV BP,word ptr [BX + 0x494a] (1000_B5B1 / 0x1B5B1)
    BP = UInt16[DS, (ushort)(BX + 0x494A)];
    // SHL BP,1 (1000_B5B5 / 0x1B5B5)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // POP BX (1000_B5B7 / 0x1B5B7)
    BX = Stack.Pop();
    // RET  (1000_B5B8 / 0x1B5B8)
    return NearRet();
    label_1000_B5B9_1B5B9:
    // MOV AX,word ptr [BX + 0x4948] (1000_B5B9 / 0x1B5B9)
    AX = UInt16[DS, (ushort)(BX + 0x4948)];
    // MOV BP,word ptr [BX + 0x494a] (1000_B5BD / 0x1B5BD)
    BP = UInt16[DS, (ushort)(BX + 0x494A)];
    // SHL BP,1 (1000_B5C1 / 0x1B5C1)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // POP BX (1000_B5C3 / 0x1B5C3)
    BX = Stack.Pop();
    // RET  (1000_B5C4 / 0x1B5C4)
    return NearRet();
  }
  
  public Action unknown_1000_B5C5_1B5C5(int gotoTarget) {
    label_1000_B5C5_1B5C5:
    // CALL 0x1000:b58b (1000_B5C5 / 0x1B5C5)
    NearCall(cs1, 0xB5C8, map_func_ida_1000_B58B_1B58B);
    // XOR AX,AX (1000_B5C8 / 0x1B5C8)
    AX = 0;
    // DIV BP (1000_B5CA / 0x1B5CA)
    Cpu.Div16(BP);
    // MOV DX,AX (1000_B5CC / 0x1B5CC)
    DX = AX;
    // RET  (1000_B5CE / 0x1B5CE)
    return NearRet();
  }
  
  public Action unknown_1000_B5CF_1B5CF(int gotoTarget) {
    label_1000_B5CF_1B5CF:
    // OR AH,AH (1000_B5CF / 0x1B5CF)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:b5f5 (1000_B5D1 / 0x1B5D1)
    if(ZeroFlag) {
      goto label_1000_B5F5_1B5F5;
    }
    // JS 0x1000:b5e6 (1000_B5D3 / 0x1B5D3)
    if(SignFlag) {
      goto label_1000_B5E6_1B5E6;
    }
    // ADD BH,AH (1000_B5D5 / 0x1B5D5)
    // BH += AH;
    BH = Alu.Add8(BH, AH);
    // JNC 0x1000:b5f5 (1000_B5D7 / 0x1B5D7)
    if(!CarryFlag) {
      goto label_1000_B5F5_1B5F5;
    }
    // INC BL (1000_B5D9 / 0x1B5D9)
    BL = Alu.Inc8(BL);
    // CMP BL,0x62 (1000_B5DB / 0x1B5DB)
    Alu.Sub8(BL, 0x62);
    // JL 0x1000:b5f5 (1000_B5DE / 0x1B5DE)
    if(SignFlag != OverflowFlag) {
      goto label_1000_B5F5_1B5F5;
    }
    // DEC BL (1000_B5E0 / 0x1B5E0)
    BL = Alu.Dec8(BL);
    // SUB BH,AH (1000_B5E2 / 0x1B5E2)
    // BH -= AH;
    BH = Alu.Sub8(BH, AH);
    // JMP 0x1000:b5f5 (1000_B5E4 / 0x1B5E4)
    goto label_1000_B5F5_1B5F5;
    label_1000_B5E6_1B5E6:
    // ADD BH,AH (1000_B5E6 / 0x1B5E6)
    // BH += AH;
    BH = Alu.Add8(BH, AH);
    // JC 0x1000:b5f5 (1000_B5E8 / 0x1B5E8)
    if(CarryFlag) {
      goto label_1000_B5F5_1B5F5;
    }
    // DEC BL (1000_B5EA / 0x1B5EA)
    BL = Alu.Dec8(BL);
    // CMP BL,0x9e (1000_B5EC / 0x1B5EC)
    Alu.Sub8(BL, 0x9E);
    // JG 0x1000:b5f5 (1000_B5EF / 0x1B5EF)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_B5F5_1B5F5;
    }
    // INC BL (1000_B5F1 / 0x1B5F1)
    BL = Alu.Inc8(BL);
    // SUB BH,AH (1000_B5F3 / 0x1B5F3)
    // BH -= AH;
    BH = Alu.Sub8(BH, AH);
    label_1000_B5F5_1B5F5:
    // CBW  (1000_B5F5 / 0x1B5F5)
    AX = (ushort)((short)((sbyte)AL));
    // ADD DX,AX (1000_B5F6 / 0x1B5F6)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // RET  (1000_B5F8 / 0x1B5F8)
    return NearRet();
  }
  
  public Action unknown_1000_B5F9_1B5F9(int gotoTarget) {
    label_1000_B5F9_1B5F9:
    // SUB DX,word ptr [0xdcf6] (1000_B5F9 / 0x1B5F9)
    // DX -= UInt16[DS, 0xDCF6];
    DX = Alu.Sub16(DX, UInt16[DS, 0xDCF6]);
    // SUB BX,word ptr [0xdcf8] (1000_B5FD / 0x1B5FD)
    // BX -= UInt16[DS, 0xDCF8];
    BX = Alu.Sub16(BX, UInt16[DS, 0xDCF8]);
    // XOR CX,CX (1000_B601 / 0x1B601)
    CX = 0;
    // TEST byte ptr [0x46eb],0x80 (1000_B603 / 0x1B603)
    Alu.And8(UInt8[DS, 0x46EB], 0x80);
    // JZ 0x1000:b60c (1000_B608 / 0x1B608)
    if(ZeroFlag) {
      goto label_1000_B60C_1B60C;
    }
    // MOV CL,0x2 (1000_B60A / 0x1B60A)
    CL = 0x2;
    label_1000_B60C_1B60C:
    // SAR BX,CL (1000_B60C / 0x1B60C)
    BX = Alu.Sar16(BX, CL);
    // ADD BX,word ptr [0x197e] (1000_B60E / 0x1B60E)
    // BX += UInt16[DS, 0x197E];
    BX = Alu.Add16(BX, UInt16[DS, 0x197E]);
    // MOV AX,BX (1000_B612 / 0x1B612)
    AX = BX;
    // JNS 0x1000:b618 (1000_B614 / 0x1B614)
    if(!SignFlag) {
      goto label_1000_B618_1B618;
    }
    // NEG AX (1000_B616 / 0x1B616)
    AX = Alu.Sub16(0, AX);
    label_1000_B618_1B618:
    // SHL AX,1 (1000_B618 / 0x1B618)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_B61A / 0x1B61A)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_B61C / 0x1B61C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV SI,0x4948 (1000_B61E / 0x1B61E)
    SI = 0x4948;
    // ADD SI,AX (1000_B621 / 0x1B621)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JCXZ 0x1000:b62c (1000_B623 / 0x1B623)
    if(CX == 0) {
      goto label_1000_B62C_1B62C;
    }
    // SAR DX,CL (1000_B625 / 0x1B625)
    DX = Alu.Sar16(DX, CL);
    // ADD DX,word ptr [SI + 0x4] (1000_B627 / 0x1B627)
    // DX += UInt16[DS, (ushort)(SI + 0x4)];
    DX = Alu.Add16(DX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JMP 0x1000:b63e (1000_B62A / 0x1B62A)
    goto label_1000_B63E_1B63E;
    label_1000_B62C_1B62C:
    // ADD DX,word ptr [SI + 0x6] (1000_B62C / 0x1B62C)
    // DX += UInt16[DS, (ushort)(SI + 0x6)];
    DX = Alu.Add16(DX, UInt16[DS, (ushort)(SI + 0x6)]);
    // MOV CX,word ptr [SI + 0x2] (1000_B62F / 0x1B62F)
    CX = UInt16[DS, (ushort)(SI + 0x2)];
    // SHL CX,1 (1000_B632 / 0x1B632)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // CMP DX,CX (1000_B634 / 0x1B634)
    Alu.Sub16(DX, CX);
    // JC 0x1000:b640 (1000_B636 / 0x1B636)
    if(CarryFlag) {
      goto label_1000_B640_1B640;
    }
    // JS 0x1000:b63e (1000_B638 / 0x1B638)
    if(SignFlag) {
      goto label_1000_B63E_1B63E;
    }
    // SUB DX,CX (1000_B63A / 0x1B63A)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // JMP 0x1000:b640 (1000_B63C / 0x1B63C)
    goto label_1000_B640_1B640;
    label_1000_B63E_1B63E:
    // ADD DX,CX (1000_B63E / 0x1B63E)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    label_1000_B640_1B640:
    // XOR AX,AX (1000_B640 / 0x1B640)
    AX = 0;
    // DIV CX (1000_B642 / 0x1B642)
    Cpu.Div16(CX);
    // MOV DX,AX (1000_B644 / 0x1B644)
    DX = AX;
    // RET  (1000_B646 / 0x1B646)
    return NearRet();
  }
  
  public Action unknown_1000_B647_1B647(int gotoTarget) {
    label_1000_B647_1B647:
    // XOR CX,CX (1000_B647 / 0x1B647)
    CX = 0;
    // TEST byte ptr [0x46eb],0x80 (1000_B649 / 0x1B649)
    Alu.And8(UInt8[DS, 0x46EB], 0x80);
    // JZ 0x1000:b652 (1000_B64E / 0x1B64E)
    if(ZeroFlag) {
      goto label_1000_B652_1B652;
    }
    // MOV CL,0x2 (1000_B650 / 0x1B650)
    CL = 0x2;
    label_1000_B652_1B652:
    // MOV BP,BX (1000_B652 / 0x1B652)
    BP = BX;
    // SUB BX,word ptr [0x197e] (1000_B654 / 0x1B654)
    // BX -= UInt16[DS, 0x197E];
    BX = Alu.Sub16(BX, UInt16[DS, 0x197E]);
    // SHL BX,CL (1000_B658 / 0x1B658)
    // BX <<= CL;
    BX = Alu.Shl16(BX, CL);
    // ADD BX,word ptr [0xdcf8] (1000_B65A / 0x1B65A)
    // BX += UInt16[DS, 0xDCF8];
    BX = Alu.Add16(BX, UInt16[DS, 0xDCF8]);
    // SHL BP,1 (1000_B65E / 0x1B65E)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // SHL BP,1 (1000_B660 / 0x1B660)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // SHL BP,1 (1000_B662 / 0x1B662)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // JNS 0x1000:b668 (1000_B664 / 0x1B664)
    if(!SignFlag) {
      goto label_1000_B668_1B668;
    }
    // NEG BP (1000_B666 / 0x1B666)
    BP = Alu.Sub16(0, BP);
    label_1000_B668_1B668:
    // MOV BP,word ptr [BP + 0x494a] (1000_B668 / 0x1B668)
    BP = UInt16[SS, (ushort)(BP + 0x494A)];
    // ADD BP,BP (1000_B66C / 0x1B66C)
    // BP += BP;
    BP = Alu.Add16(BP, BP);
    // SUB DX,word ptr [0x197c] (1000_B66E / 0x1B66E)
    // DX -= UInt16[DS, 0x197C];
    DX = Alu.Sub16(DX, UInt16[DS, 0x197C]);
    // MOV AX,DX (1000_B672 / 0x1B672)
    AX = DX;
    // IMUL BP (1000_B674 / 0x1B674)
    Cpu.IMul16(BP);
    // JCXZ 0x1000:b67e (1000_B676 / 0x1B676)
    if(CX == 0) {
      goto label_1000_B67E_1B67E;
    }
    label_1000_B678_1B678:
    // SHL AX,1 (1000_B678 / 0x1B678)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // RCL DX,1 (1000_B67A / 0x1B67A)
    DX = Alu.Rcl16(DX, 1);
    // LOOP 0x1000:b678 (1000_B67C / 0x1B67C)
    if(--CX != 0) {
      goto label_1000_B678_1B678;
    }
    label_1000_B67E_1B67E:
    // ADD DX,word ptr [0xdcf6] (1000_B67E / 0x1B67E)
    // DX += UInt16[DS, 0xDCF6];
    DX = Alu.Add16(DX, UInt16[DS, 0xDCF6]);
    // RET  (1000_B682 / 0x1B682)
    return NearRet();
  }
  
  public Action unknown_1000_B683_1B683(int gotoTarget) {
    label_1000_B683_1B683:
    // JS 0x1000:b68b (1000_B683 / 0x1B683)
    if(SignFlag) {
      goto label_1000_B68B_1B68B;
    }
    // SUB BP,DX (1000_B685 / 0x1B685)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // NEG BP (1000_B687 / 0x1B687)
    BP = Alu.Sub16(0, BP);
    // JMP 0x1000:b68f (1000_B689 / 0x1B689)
    goto label_1000_B68F_1B68F;
    label_1000_B68B_1B68B:
    // XCHG BP,DX (1000_B68B / 0x1B68B)
    ushort tmp_1000_B68B = BP;
    BP = DX;
    DX = tmp_1000_B68B;
    // ADD DX,BP (1000_B68D / 0x1B68D)
    // DX += BP;
    DX = Alu.Add16(DX, BP);
    label_1000_B68F_1B68F:
    // MOV CX,BP (1000_B68F / 0x1B68F)
    CX = BP;
    // NEG CX (1000_B691 / 0x1B691)
    CX = Alu.Sub16(0, CX);
    // CMP CX,DX (1000_B693 / 0x1B693)
    Alu.Sub16(CX, DX);
    // JNC 0x1000:b699 (1000_B695 / 0x1B695)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_B699 / 0x1B699)
      return NearRet();
    }
    // MOV DX,BP (1000_B697 / 0x1B697)
    DX = BP;
    label_1000_B699_1B699:
    // RET  (1000_B699 / 0x1B699)
    return NearRet();
  }
  
  public Action unknown_1000_B69A_1B69A(int gotoTarget) {
    label_1000_B69A_1B69A:
    // MOV AX,[0x197c] (1000_B69A / 0x1B69A)
    AX = UInt16[DS, 0x197C];
    // XCHG word ptr [0x1980],AX (1000_B69D / 0x1B69D)
    ushort tmp_1000_B69D = UInt16[DS, 0x1980];
    UInt16[DS, 0x1980] = AX;
    AX = tmp_1000_B69D;
    // MOV [0x197c],AX (1000_B6A1 / 0x1B6A1)
    UInt16[DS, 0x197C] = AX;
    // MOV AX,[0x197e] (1000_B6A4 / 0x1B6A4)
    AX = UInt16[DS, 0x197E];
    // XCHG word ptr [0x1982],AX (1000_B6A7 / 0x1B6A7)
    ushort tmp_1000_B6A7 = UInt16[DS, 0x1982];
    UInt16[DS, 0x1982] = AX;
    AX = tmp_1000_B6A7;
    // MOV [0x197e],AX (1000_B6AB / 0x1B6AB)
    UInt16[DS, 0x197E] = AX;
    // MOV AX,[0xdcf6] (1000_B6AE / 0x1B6AE)
    AX = UInt16[DS, 0xDCF6];
    // XCHG word ptr [0xdcfa],AX (1000_B6B1 / 0x1B6B1)
    ushort tmp_1000_B6B1 = UInt16[DS, 0xDCFA];
    UInt16[DS, 0xDCFA] = AX;
    AX = tmp_1000_B6B1;
    // MOV [0xdcf6],AX (1000_B6B5 / 0x1B6B5)
    UInt16[DS, 0xDCF6] = AX;
    // MOV AX,[0xdcf8] (1000_B6B8 / 0x1B6B8)
    AX = UInt16[DS, 0xDCF8];
    // XCHG word ptr [0xdcfc],AX (1000_B6BB / 0x1B6BB)
    ushort tmp_1000_B6BB = UInt16[DS, 0xDCFC];
    UInt16[DS, 0xDCFC] = AX;
    AX = tmp_1000_B6BB;
    // MOV [0xdcf8],AX (1000_B6BF / 0x1B6BF)
    UInt16[DS, 0xDCF8] = AX;
    // RET  (1000_B6C2 / 0x1B6C2)
    return NearRet();
  }
  
  public Action map_func_ida_1000_B6C3_1B6C3(int gotoTarget) {
    label_1000_B6C3_1B6C3:
    // TEST byte ptr [0x46eb],0x80 (1000_B6C3 / 0x1B6C3)
    Alu.And8(UInt8[DS, 0x46EB], 0x80);
    // JZ 0x1000:b714 (1000_B6C8 / 0x1B6C8)
    if(ZeroFlag) {
      goto label_1000_B714_1B714;
    }
    // PUSH DS (1000_B6CA / 0x1B6CA)
    Stack.Push(DS);
    // POP ES (1000_B6CB / 0x1B6CB)
    ES = Stack.Pop();
    // MOV word ptr [0xdcf6],0xa0 (1000_B6CC / 0x1B6CC)
    UInt16[DS, 0xDCF6] = 0xA0;
    // MOV word ptr [0xdcf8],0x4c (1000_B6D2 / 0x1B6D2)
    UInt16[DS, 0xDCF8] = 0x4C;
    // MOV CX,0x12 (1000_B6D8 / 0x1B6D8)
    CX = 0x12;
    // MOV BX,0x4b (1000_B6DB / 0x1B6DB)
    BX = 0x4B;
    // MOV AX,[0x197e] (1000_B6DE / 0x1B6DE)
    AX = UInt16[DS, 0x197E];
    // OR AX,AX (1000_B6E1 / 0x1B6E1)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // MOV DX,AX (1000_B6E3 / 0x1B6E3)
    DX = AX;
    // JNS 0x1000:b6e9 (1000_B6E5 / 0x1B6E5)
    if(!SignFlag) {
      goto label_1000_B6E9_1B6E9;
    }
    // NEG AX (1000_B6E7 / 0x1B6E7)
    AX = Alu.Sub16(0, AX);
    label_1000_B6E9_1B6E9:
    // CMP AX,BX (1000_B6E9 / 0x1B6E9)
    Alu.Sub16(AX, BX);
    // JC 0x1000:b6f8 (1000_B6EB / 0x1B6EB)
    if(CarryFlag) {
      goto label_1000_B6F8_1B6F8;
    }
    // MOV AX,BX (1000_B6ED / 0x1B6ED)
    AX = BX;
    // OR DX,DX (1000_B6EF / 0x1B6EF)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNS 0x1000:b6f5 (1000_B6F1 / 0x1B6F1)
    if(!SignFlag) {
      goto label_1000_B6F5_1B6F5;
    }
    // NEG AX (1000_B6F3 / 0x1B6F3)
    AX = Alu.Sub16(0, AX);
    label_1000_B6F5_1B6F5:
    // MOV [0x197e],AX (1000_B6F5 / 0x1B6F5)
    UInt16[DS, 0x197E] = AX;
    label_1000_B6F8_1B6F8:
    // MOV BP,0x4948 (1000_B6F8 / 0x1B6F8)
    BP = 0x4948;
    // MOV DX,word ptr [0x197c] (1000_B6FB / 0x1B6FB)
    DX = UInt16[DS, 0x197C];
    // MOV AX,[0x197e] (1000_B6FF / 0x1B6FF)
    AX = UInt16[DS, 0x197E];
    // SUB AX,CX (1000_B702 / 0x1B702)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // LES DI,[0xdcfe] (1000_B704 / 0x1B704)
    DI = UInt16[DS, 0xDCFE];
    ES = UInt16[DS, 0xDD00];
    // MOV SI,0x4c60 (1000_B708 / 0x1B708)
    SI = 0x4C60;
    // MOV BX,word ptr [0xdbda] (1000_B70B / 0x1B70B)
    BX = UInt16[DS, 0xDBDA];
    // CALLF [0x3929] (1000_B70F / 0x1B70F)
    // Indirect call to [0x3929], generating possible targets from emulator records
    uint targetAddress_1000_B70F = (uint)(UInt16[DS, 0x392B] * 0x10 + UInt16[DS, 0x3929] - cs1 * 0x10);
    switch(targetAddress_1000_B70F) {
      case 0x23607 : FarCall(cs1, 0xB713, unknown_334B_0157_33607);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B70F);
        break;
    }
    // RET  (1000_B713 / 0x1B713)
    return NearRet();
    label_1000_B714_1B714:
    // MOV DI,0x4c60 (1000_B714 / 0x1B714)
    DI = 0x4C60;
    // MOV AX,[0x46e7] (1000_B717 / 0x1B717)
    AX = UInt16[DS, 0x46E7];
    // SUB AX,word ptr [0x46e3] (1000_B71A / 0x1B71A)
    // AX -= UInt16[DS, 0x46E3];
    AX = Alu.Sub16(AX, UInt16[DS, 0x46E3]);
    // MOV DX,AX (1000_B71E / 0x1B71E)
    DX = AX;
    // SHR DX,1 (1000_B720 / 0x1B720)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // ADD DX,word ptr [0x46e3] (1000_B722 / 0x1B722)
    // DX += UInt16[DS, 0x46E3];
    DX = Alu.Add16(DX, UInt16[DS, 0x46E3]);
    // MOV word ptr [0xdcf6],DX (1000_B726 / 0x1B726)
    UInt16[DS, 0xDCF6] = DX;
    // MOV [0xdcf2],AX (1000_B72A / 0x1B72A)
    UInt16[DS, 0xDCF2] = AX;
    // MOV AX,[0x46e9] (1000_B72D / 0x1B72D)
    AX = UInt16[DS, 0x46E9];
    // SUB AX,word ptr [0x46e5] (1000_B730 / 0x1B730)
    // AX -= UInt16[DS, 0x46E5];
    AX = Alu.Sub16(AX, UInt16[DS, 0x46E5]);
    // DEC AX (1000_B734 / 0x1B734)
    AX = Alu.Dec16(AX);
    // MOV BX,AX (1000_B735 / 0x1B735)
    BX = AX;
    // SHR BX,1 (1000_B737 / 0x1B737)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // ADD BX,word ptr [0x46e5] (1000_B739 / 0x1B739)
    // BX += UInt16[DS, 0x46E5];
    BX = Alu.Add16(BX, UInt16[DS, 0x46E5]);
    // MOV word ptr [0xdcf8],BX (1000_B73D / 0x1B73D)
    UInt16[DS, 0xDCF8] = BX;
    // INC AX (1000_B741 / 0x1B741)
    AX = Alu.Inc16(AX);
    // MOV [0xdcf4],AX (1000_B742 / 0x1B742)
    UInt16[DS, 0xDCF4] = AX;
    // DEC AX (1000_B745 / 0x1B745)
    AX = Alu.Dec16(AX);
    // SHR AX,1 (1000_B746 / 0x1B746)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CX,AX (1000_B748 / 0x1B748)
    CX = AX;
    // MOV BX,0x56 (1000_B74A / 0x1B74A)
    BX = 0x56;
    // SUB BX,AX (1000_B74D / 0x1B74D)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // MOV AX,[0x197e] (1000_B74F / 0x1B74F)
    AX = UInt16[DS, 0x197E];
    // OR AX,AX (1000_B752 / 0x1B752)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // MOV DX,AX (1000_B754 / 0x1B754)
    DX = AX;
    // JNS 0x1000:b75a (1000_B756 / 0x1B756)
    if(!SignFlag) {
      goto label_1000_B75A_1B75A;
    }
    // NEG AX (1000_B758 / 0x1B758)
    AX = Alu.Sub16(0, AX);
    label_1000_B75A_1B75A:
    // CMP AX,BX (1000_B75A / 0x1B75A)
    Alu.Sub16(AX, BX);
    // JC 0x1000:b769 (1000_B75C / 0x1B75C)
    if(CarryFlag) {
      goto label_1000_B769_1B769;
    }
    // MOV AX,BX (1000_B75E / 0x1B75E)
    AX = BX;
    // OR DX,DX (1000_B760 / 0x1B760)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JNS 0x1000:b766 (1000_B762 / 0x1B762)
    if(!SignFlag) {
      goto label_1000_B766_1B766;
    }
    // NEG AX (1000_B764 / 0x1B764)
    AX = Alu.Sub16(0, AX);
    label_1000_B766_1B766:
    // MOV [0x197e],AX (1000_B766 / 0x1B766)
    UInt16[DS, 0x197E] = AX;
    label_1000_B769_1B769:
    // MOV BP,0x4948 (1000_B769 / 0x1B769)
    BP = 0x4948;
    // MOV DX,word ptr [0x197c] (1000_B76C / 0x1B76C)
    DX = UInt16[DS, 0x197C];
    // MOV AX,[0x197e] (1000_B770 / 0x1B770)
    AX = UInt16[DS, 0x197E];
    // SUB AX,CX (1000_B773 / 0x1B773)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // PUSH AX (1000_B775 / 0x1B775)
    Stack.Push(AX);
    // MOV CX,word ptr [0xdcf4] (1000_B776 / 0x1B776)
    CX = UInt16[DS, 0xDCF4];
    // SHL AX,1 (1000_B77A / 0x1B77A)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_B77C / 0x1B77C)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_B77E / 0x1B77E)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNS 0x1000:b79c (1000_B780 / 0x1B780)
    if(!SignFlag) {
      goto label_1000_B79C_1B79C;
    }
    // NEG AX (1000_B782 / 0x1B782)
    AX = Alu.Sub16(0, AX);
    // ADD BP,AX (1000_B784 / 0x1B784)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    label_1000_B786_1B786:
    // PUSH CX (1000_B786 / 0x1B786)
    Stack.Push(CX);
    // MOV CX,word ptr [BP + 0x0] (1000_B787 / 0x1B787)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (1000_B78A / 0x1B78A)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // NEG CX (1000_B78D / 0x1B78D)
    CX = Alu.Sub16(0, CX);
    // JZ 0x1000:b7a5 (1000_B78F / 0x1B78F)
    if(ZeroFlag) {
      goto label_1000_B7A5_1B7A5;
    }
    // CALL 0x1000:b7d2 (1000_B791 / 0x1B791)
    NearCall(cs1, 0xB794, unknown_1000_B7D2_1B7D2);
    // SUB BP,0x8 (1000_B794 / 0x1B794)
    // BP -= 0x8;
    BP = Alu.Sub16(BP, 0x8);
    // POP CX (1000_B797 / 0x1B797)
    CX = Stack.Pop();
    // LOOP 0x1000:b786 (1000_B798 / 0x1B798)
    if(--CX != 0) {
      goto label_1000_B786_1B786;
    }
    // JMP 0x1000:b7ae (1000_B79A / 0x1B79A)
    goto label_1000_B7AE_1B7AE;
    label_1000_B79C_1B79C:
    // ADD BP,AX (1000_B79C / 0x1B79C)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    label_1000_B79E_1B79E:
    // PUSH CX (1000_B79E / 0x1B79E)
    Stack.Push(CX);
    // MOV CX,word ptr [BP + 0x0] (1000_B79F / 0x1B79F)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (1000_B7A2 / 0x1B7A2)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    label_1000_B7A5_1B7A5:
    // CALL 0x1000:b7d2 (1000_B7A5 / 0x1B7A5)
    NearCall(cs1, 0xB7A8, unknown_1000_B7D2_1B7D2);
    // ADD BP,0x8 (1000_B7A8 / 0x1B7A8)
    // BP += 0x8;
    BP = Alu.Add16(BP, 0x8);
    // POP CX (1000_B7AB / 0x1B7AB)
    CX = Stack.Pop();
    // LOOP 0x1000:b79e (1000_B7AC / 0x1B7AC)
    if(--CX != 0) {
      goto label_1000_B79E_1B79E;
    }
    label_1000_B7AE_1B7AE:
    // MOV ES,word ptr [0xdbda] (1000_B7AE / 0x1B7AE)
    ES = UInt16[DS, 0xDBDA];
    // MOV DI,word ptr [0xdcf2] (1000_B7B2 / 0x1B7B2)
    DI = UInt16[DS, 0xDCF2];
    // MOV CX,word ptr [0xdcf4] (1000_B7B6 / 0x1B7B6)
    CX = UInt16[DS, 0xDCF4];
    // MOV DX,word ptr [0x46e3] (1000_B7BA / 0x1B7BA)
    DX = UInt16[DS, 0x46E3];
    // MOV BX,word ptr [0x46e5] (1000_B7BE / 0x1B7BE)
    BX = UInt16[DS, 0x46E5];
    // MOV SI,0x4c60 (1000_B7C2 / 0x1B7C2)
    SI = 0x4C60;
    // POP AX (1000_B7C5 / 0x1B7C5)
    AX = Stack.Pop();
    // TEST byte ptr [0x46eb],0x40 (1000_B7C6 / 0x1B7C6)
    Alu.And8(UInt8[DS, 0x46EB], 0x40);
    // JNZ 0x1000:b7d1 (1000_B7CB / 0x1B7CB)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_B7D1 / 0x1B7D1)
      return NearRet();
    }
    // CALLF [0x390d] (1000_B7CD / 0x1B7CD)
    // Indirect call to [0x390d], generating possible targets from emulator records
    uint targetAddress_1000_B7CD = (uint)(UInt16[DS, 0x390F] * 0x10 + UInt16[DS, 0x390D] - cs1 * 0x10);
    switch(targetAddress_1000_B7CD) {
      case 0x235F2 : FarCall(cs1, 0xB7D1, unknown_334B_0142_335F2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B7CD);
        break;
    }
    label_1000_B7D1_1B7D1:
    // RET  (1000_B7D1 / 0x1B7D1)
    return NearRet();
  }
  
  public Action unknown_1000_B7D2_1B7D2(int gotoTarget) {
    label_1000_B7D2_1B7D2:
    // PUSH DX (1000_B7D2 / 0x1B7D2)
    Stack.Push(DX);
    // PUSH DI (1000_B7D3 / 0x1B7D3)
    Stack.Push(DI);
    // PUSH DS (1000_B7D4 / 0x1B7D4)
    Stack.Push(DS);
    // LDS SI,[0xdcfe] (1000_B7D5 / 0x1B7D5)
    SI = UInt16[DS, 0xDCFE];
    DS = UInt16[DS, 0xDD00];
    // PUSH SS (1000_B7D9 / 0x1B7D9)
    Stack.Push(SS);
    // POP ES (1000_B7DA / 0x1B7DA)
    ES = Stack.Pop();
    // ADD SI,CX (1000_B7DB / 0x1B7DB)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // ADD BX,BX (1000_B7DD / 0x1B7DD)
    // BX += BX;
    BX = Alu.Add16(BX, BX);
    // MOV AX,DX (1000_B7DF / 0x1B7DF)
    AX = DX;
    // MUL BX (1000_B7E1 / 0x1B7E1)
    Cpu.Mul16(BX);
    // MOV word ptr [BP + 0x6],DX (1000_B7E3 / 0x1B7E3)
    UInt16[SS, (ushort)(BP + 0x6)] = DX;
    // MOV AX,DX (1000_B7E6 / 0x1B7E6)
    AX = DX;
    // MOV DX,word ptr SS:[0xdcf2] (1000_B7E8 / 0x1B7E8)
    DX = UInt16[SS, 0xDCF2];
    // CMP BX,DX (1000_B7ED / 0x1B7ED)
    Alu.Sub16(BX, DX);
    // JNC 0x1000:b7fb (1000_B7EF / 0x1B7EF)
    if(!CarryFlag) {
      goto label_1000_B7FB_1B7FB;
    }
    // MOV CX,DX (1000_B7F1 / 0x1B7F1)
    CX = DX;
    // SUB CX,BX (1000_B7F3 / 0x1B7F3)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // SHR CX,1 (1000_B7F5 / 0x1B7F5)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // ADD DI,CX (1000_B7F7 / 0x1B7F7)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // MOV DX,BX (1000_B7F9 / 0x1B7F9)
    DX = BX;
    label_1000_B7FB_1B7FB:
    // MOV CX,DX (1000_B7FB / 0x1B7FB)
    CX = DX;
    // SHR CX,1 (1000_B7FD / 0x1B7FD)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SUB AX,CX (1000_B7FF / 0x1B7FF)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // JNS 0x1000:b805 (1000_B801 / 0x1B801)
    if(!SignFlag) {
      goto label_1000_B805_1B805;
    }
    // ADD AX,BX (1000_B803 / 0x1B803)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    label_1000_B805_1B805:
    // MOV CX,DX (1000_B805 / 0x1B805)
    CX = DX;
    // SUB BX,AX (1000_B807 / 0x1B807)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // SUB CX,BX (1000_B809 / 0x1B809)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // JNS 0x1000:b813 (1000_B80B / 0x1B80B)
    if(!SignFlag) {
      goto label_1000_B813_1B813;
    }
    // ADD CX,BX (1000_B80D / 0x1B80D)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // ADD SI,AX (1000_B80F / 0x1B80F)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JMP 0x1000:b81d (1000_B811 / 0x1B811)
    goto label_1000_B81D_1B81D;
    label_1000_B813_1B813:
    // XCHG CX,BX (1000_B813 / 0x1B813)
    ushort tmp_1000_B813 = CX;
    CX = BX;
    BX = tmp_1000_B813;
    // PUSH SI (1000_B815 / 0x1B815)
    Stack.Push(SI);
    // ADD SI,AX (1000_B816 / 0x1B816)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B818 / 0x1B818)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP SI (1000_B81A / 0x1B81A)
    SI = Stack.Pop();
    // XCHG CX,BX (1000_B81B / 0x1B81B)
    ushort tmp_1000_B81B = CX;
    CX = BX;
    BX = tmp_1000_B81B;
    label_1000_B81D_1B81D:
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_B81D / 0x1B81D)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP DS (1000_B81F / 0x1B81F)
    DS = Stack.Pop();
    // POP DI (1000_B820 / 0x1B820)
    DI = Stack.Pop();
    // POP DX (1000_B821 / 0x1B821)
    DX = Stack.Pop();
    // ADD DI,0xc8 (1000_B822 / 0x1B822)
    // DI += 0xC8;
    DI = Alu.Add16(DI, 0xC8);
    // RET  (1000_B826 / 0x1B826)
    return NearRet();
  }
  
  public Action unknown_1000_B827_1B827(int gotoTarget) {
    label_1000_B827_1B827:
    // MOV byte ptr [0xdd02],0x0 (1000_B827 / 0x1B827)
    UInt8[DS, 0xDD02] = 0x0;
    // CALL 0x1000:b84a (1000_B82C / 0x1B82C)
    NearCall(cs1, 0xB82F, unknown_1000_B84A_1B84A);
    // MOV word ptr [0xdd0f],0x0 (1000_B82F / 0x1B82F)
    UInt16[DS, 0xDD0F] = 0x0;
    // CALL 0x1000:b87e (1000_B835 / 0x1B835)
    NearCall(cs1, 0xB838, unknown_1000_B87E_1B87E);
    // CALL 0x1000:1797 (1000_B838 / 0x1B838)
    NearCall(cs1, 0xB83B, unknown_1000_1797_11797);
    // CALL 0x1000:b941 (1000_B83B / 0x1B83B)
    NearCall(cs1, 0xB83E, unknown_1000_B941_1B941);
    // CALL 0x1000:d7b2 (1000_B83E / 0x1B83E)
    NearCall(cs1, 0xB841, unknown_1000_D7B2_1D7B2);
    // MOV SI,0x1dc6 (1000_B841 / 0x1B841)
    SI = 0x1DC6;
    // CALL 0x1000:d72b (1000_B844 / 0x1B844)
    NearCall(cs1, 0xB847, unknown_1000_D72B_1D72B);
    // JMP 0x1000:ad5e (1000_B847 / 0x1B847)
    // Jump converted to entry function call
    return unknown_1000_AD5E_1AD5E(0);
  }
  
  public Action unknown_1000_B84A_1B84A(int gotoTarget) {
    label_1000_B84A_1B84A:
    // CALL 0x1000:c07c (1000_B84A / 0x1B84A)
    NearCall(cs1, 0xB84D, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // MOV ES,word ptr [0xdbda] (1000_B84D / 0x1B84D)
    ES = UInt16[DS, 0xDBDA];
    // MOV SI,0x1470 (1000_B851 / 0x1B851)
    SI = 0x1470;
    // MOV AL,0xf0 (1000_B854 / 0x1B854)
    AL = 0xF0;
    // CALLF [0x38dd] (1000_B856 / 0x1B856)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_B856 = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_B856) {
      case 0x235CE : FarCall(cs1, 0xB85A, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B856);
        break;
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B85A_1B85A(0);
  }
  
  public Action unknown_1000_B85A_1B85A(int gotoTarget) {
    label_1000_B85A_1B85A:
    // MOV AX,0x1 (1000_B85A / 0x1B85A)
    AX = 0x1;
    // CALL 0x1000:c13e (1000_B85D / 0x1B85D)
    NearCall(cs1, 0xB860, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV DX,0x5b (1000_B860 / 0x1B860)
    DX = 0x5B;
    // MOV BX,0x14 (1000_B863 / 0x1B863)
    BX = 0x14;
    // MOV AX,0x2 (1000_B866 / 0x1B866)
    AX = 0x2;
    // CALL 0x1000:c22f (1000_B869 / 0x1B869)
    NearCall(cs1, 0xB86C, draw_sprite_ida_1000_C22F_1C22F);
    // MOV SI,0x2448 (1000_B86C / 0x1B86C)
    SI = 0x2448;
    // CALL 0x1000:daaa (1000_B86F / 0x1B86F)
    NearCall(cs1, 0xB872, SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA);
    // MOV SI,0x2440 (1000_B872 / 0x1B872)
    SI = 0x2440;
    // MOV DI,0xd834 (1000_B875 / 0x1B875)
    DI = 0xD834;
    // CALL 0x1000:5b99 (1000_B878 / 0x1B878)
    NearCall(cs1, 0xB87B, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // JMP 0x1000:b977 (1000_B87B / 0x1B87B)
    // Jump converted to entry function call
    return map_func_gfx_ida_1000_B977_1B977(0);
  }
  
  public Action unknown_1000_B87E_1B87E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB87E: goto label_1000_B87E_1B87E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B87E_1B87E:
    // CALL 0x1000:5ba8 (1000_B87E / 0x1B87E)
    NearCall(cs1, 0xB881, MemCopy8Bytes_1000_5BA8_15BA8);
    // MOV AX,0x1 (1000_B881 / 0x1B881)
    AX = 0x1;
    // CALL 0x1000:c13e (1000_B884 / 0x1B884)
    NearCall(cs1, 0xB887, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV DX,word ptr [0xdd0f] (1000_B887 / 0x1B887)
    DX = UInt16[DS, 0xDD0F];
    // XOR BX,BX (1000_B88B / 0x1B88B)
    BX = 0;
    // XOR AX,AX (1000_B88D / 0x1B88D)
    AX = 0;
    // CALL 0x1000:c305 (1000_B88F / 0x1B88F)
    NearCall(cs1, 0xB892, unknown_1000_C305_1C305);
    // SUB DX,0xd6 (1000_B892 / 0x1B892)
    // DX -= 0xD6;
    DX = Alu.Sub16(DX, 0xD6);
    // NEG DX (1000_B896 / 0x1B896)
    DX = Alu.Sub16(0, DX);
    // MOV AX,0x1 (1000_B898 / 0x1B898)
    AX = 0x1;
    // CALL 0x1000:c30d (1000_B89B / 0x1B89B)
    NearCall(cs1, 0xB89E, unknown_1000_C30D_1C30D);
    // MOV SI,0x2440 (1000_B89E / 0x1B89E)
    SI = 0x2440;
    // MOV DI,0xd834 (1000_B8A1 / 0x1B8A1)
    DI = 0xD834;
    // JMP 0x1000:5b99 (1000_B8A4 / 0x1B8A4)
    // Jump converted to entry function call
    return MemCopy8BytesDsSIToDsDi_1000_5B99_15B99(0);
  }
  
  public Action unknown_1000_B8A7_1B8A7(int gotoTarget) {
    label_1000_B8A7_1B8A7:
    // PUSH DS (1000_B8A7 / 0x1B8A7)
    Stack.Push(DS);
    // POP ES (1000_B8A8 / 0x1B8A8)
    ES = Stack.Pop();
    // MOV DI,0x4c60 (1000_B8A9 / 0x1B8A9)
    DI = 0x4C60;
    // MOV SI,0x92 (1000_B8AC / 0x1B8AC)
    SI = 0x92;
    // CALL 0x1000:f0b9 (1000_B8AF / 0x1B8AF)
    NearCall(cs1, 0xB8B2, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // MOV DX,word ptr [0x197c] (1000_B8B2 / 0x1B8B2)
    DX = UInt16[DS, 0x197C];
    // MOV BX,word ptr [0x197e] (1000_B8B6 / 0x1B8B6)
    BX = UInt16[DS, 0x197E];
    // CALL 0x1000:ba75 (1000_B8BA / 0x1B8BA)
    NearCall(cs1, 0xB8BD, unknown_1000_BA75_1BA75);
    // MOV AX,0x1 (1000_B8BD / 0x1B8BD)
    AX = 0x1;
    // CALL 0x1000:c13e (1000_B8C0 / 0x1B8C0)
    NearCall(cs1, 0xB8C3, open_sprite_sheet_ida_1000_C13E_1C13E);
    // JMP 0x1000:c0f4 (1000_B8C3 / 0x1B8C3)
    // Jump converted to entry function call
    return unknown_1000_C0F4_1C0F4(0);
  }
  
  public Action unknown_1000_B8C6_1B8C6(int gotoTarget) {
    label_1000_B8C6_1B8C6:
    // CALL 0x1000:d2bd (1000_B8C6 / 0x1B8C6)
    NearCall(cs1, 0xB8C9, unknown_1000_D2BD_1D2BD);
    // CALL 0x1000:5adf (1000_B8C9 / 0x1B8C9)
    NearCall(cs1, 0xB8CC, unknown_1000_5ADF_15ADF);
    // CALL 0x1000:b8a7 (1000_B8CC / 0x1B8CC)
    NearCall(cs1, 0xB8CF, unknown_1000_B8A7_1B8A7);
    // INC byte ptr [0xdd03] (1000_B8CF / 0x1B8CF)
    UInt8[DS, 0xDD03] = Alu.Inc8(UInt8[DS, 0xDD03]);
    // XOR AL,AL (1000_B8D3 / 0x1B8D3)
    AL = 0;
    // MOV DX,0xffff (1000_B8D5 / 0x1B8D5)
    DX = 0xFFFF;
    // MOV BP,0xb827 (1000_B8D8 / 0x1B8D8)
    BP = 0xB827;
    // CALL 0x1000:c108 (1000_B8DB / 0x1B8DB)
    NearCall(cs1, 0xB8DE, transition_ida_1000_C108_1C108);
    // CALL 0x1000:ae04 (1000_B8DE / 0x1B8DE)
    NearCall(cs1, 0xB8E1, unknown_1000_AE04_1AE04);
    // MOV AX,0x2562 (1000_B8E1 / 0x1B8E1)
    AX = 0x2562;
    // CALL 0x1000:d95e (1000_B8E4 / 0x1B8E4)
    NearCall(cs1, 0xB8E7, SetMapClickHandlerAddressFromAx_1000_D95E_1D95E);
    // CALL 0x1000:17e6 (1000_B8E7 / 0x1B8E7)
    NearCall(cs1, 0xB8EA, unknown_1000_17E6_117E6);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B8EA_1B8EA(0);
  }
  
  public Action unknown_1000_B8EA_1B8EA(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB8EA: goto label_1000_B8EA_1B8EA;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B8EA_1B8EA:
    // MOV SI,0xb9ae (1000_B8EA / 0x1B8EA)
    SI = 0xB9AE;
    // MOV BP,0x1 (1000_B8ED / 0x1B8ED)
    BP = 0x1;
    // JMP 0x1000:da25 (1000_B8F0 / 0x1B8F0)
    // Jump converted to entry function call
    return unknown_1000_DA25_1DA25(0);
  }
  
  public Action unknown_1000_B8F3_1B8F3(int gotoTarget) {
    label_1000_B8F3_1B8F3:
    // CALL 0x1000:b84a (1000_B8F3 / 0x1B8F3)
    NearCall(cs1, 0xB8F6, unknown_1000_B84A_1B84A);
    // MOV BP,0xbe1d (1000_B8F6 / 0x1B8F6)
    BP = 0xBE1D;
    // CALL 0x1000:c097 (1000_B8F9 / 0x1B8F9)
    NearCall(cs1, 0xB8FC, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // CALL 0x1000:c474 (1000_B8FC / 0x1B8FC)
    NearCall(cs1, 0xB8FF, unknown_1000_C474_1C474);
    label_1000_B8FF_1B8FF:
    // CALL 0x1000:c43e (1000_B8FF / 0x1B8FF)
    NearCall(cs1, 0xB902, unknown_1000_C43E_1C43E);
    // CALL 0x1000:b87e (1000_B902 / 0x1B902)
    NearCall(cs1, 0xB905, unknown_1000_B87E_1B87E);
    // CALL 0x1000:c4dd (1000_B905 / 0x1B905)
    NearCall(cs1, 0xB908, unknown_1000_C4DD_1C4DD);
    // SUB word ptr [0xdd0f],0x10 (1000_B908 / 0x1B908)
    // UInt16[DS, 0xDD0F] -= 0x10;
    UInt16[DS, 0xDD0F] = Alu.Sub16(UInt16[DS, 0xDD0F], 0x10);
    // CMP word ptr [0xdd0f],-0x6a (1000_B90D / 0x1B90D)
    Alu.Sub16(UInt16[DS, 0xDD0F], 0xFF96);
    // JG 0x1000:b8ff (1000_B912 / 0x1B912)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_B8FF_1B8FF;
    }
    // RET  (1000_B914 / 0x1B914)
    return NearRet();
  }
  
  public Action unknown_1000_B915_1B915(int gotoTarget) {
    label_1000_B915_1B915:
    // CALL 0x1000:b93b (1000_B915 / 0x1B915)
    NearCall(cs1, 0xB918, unknown_1000_B93B_1B93B);
    // CALL 0x1000:c08e (1000_B918 / 0x1B918)
    NearCall(cs1, 0xB91B, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    label_1000_B91B_1B91B:
    // ADD word ptr [0xdd0f],0x10 (1000_B91B / 0x1B91B)
    // UInt16[DS, 0xDD0F] += 0x10;
    UInt16[DS, 0xDD0F] = Alu.Add16(UInt16[DS, 0xDD0F], 0x10);
    // CALL 0x1000:b87e (1000_B920 / 0x1B920)
    NearCall(cs1, 0xB923, unknown_1000_B87E_1B87E);
    // CMP word ptr [0xdd0f],0x0 (1000_B923 / 0x1B923)
    Alu.Sub16(UInt16[DS, 0xDD0F], 0x0);
    // JNZ 0x1000:b91b (1000_B928 / 0x1B928)
    if(!ZeroFlag) {
      goto label_1000_B91B_1B91B;
    }
    // CALL 0x1000:c07c (1000_B92A / 0x1B92A)
    NearCall(cs1, 0xB92D, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // JMP 0x1000:b87e (1000_B92D / 0x1B92D)
    // Jump converted to entry function call
    return unknown_1000_B87E_1B87E(0);
  }
  
  public Action unknown_1000_B930_1B930(int gotoTarget) {
    label_1000_B930_1B930:
    // MOV byte ptr [0xdd03],0x0 (1000_B930 / 0x1B930)
    UInt8[DS, 0xDD03] = 0x0;
    // MOV SI,0xb9ae (1000_B935 / 0x1B935)
    SI = 0xB9AE;
    // CALL 0x1000:da5f (1000_B938 / 0x1B938)
    NearCall(cs1, 0xB93B, unknown_1000_DA5F_1DA5F);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B93B_1B93B(0);
  }
  
  public Action unknown_1000_B93B_1B93B(int gotoTarget) {
    label_1000_B93B_1B93B:
    // MOV SI,0xbe57 (1000_B93B / 0x1B93B)
    SI = 0xBE57;
    // JMP 0x1000:da5f (1000_B93E / 0x1B93E)
    // Jump converted to entry function call
    return unknown_1000_DA5F_1DA5F(0);
  }
  
  public Action unknown_1000_B941_1B941(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB941: goto label_1000_B941_1B941;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B941_1B941:
    // MOV BP,0x204a (1000_B941 / 0x1B941)
    BP = 0x204A;
    // MOV AX,0xb1 (1000_B944 / 0x1B944)
    AX = 0xB1;
    // MOV BX,0xb96b (1000_B947 / 0x1B947)
    BX = 0xB96B;
    // CMP byte ptr [0xdd02],0x0 (1000_B94A / 0x1B94A)
    Alu.Sub8(UInt8[DS, 0xDD02], 0x0);
    // JZ 0x1000:b955 (1000_B94F / 0x1B94F)
    if(ZeroFlag) {
      goto label_1000_B955_1B955;
    }
    // INC AX (1000_B951 / 0x1B951)
    AX = Alu.Inc16(AX);
    // MOV BX,0xb961 (1000_B952 / 0x1B952)
    BX = 0xB961;
    label_1000_B955_1B955:
    // MOV word ptr [BP + 0x6],AX (1000_B955 / 0x1B955)
    UInt16[SS, (ushort)(BP + 0x6)] = AX;
    // MOV word ptr [BP + 0x8],BX (1000_B958 / 0x1B958)
    UInt16[SS, (ushort)(BP + 0x8)] = BX;
    // MOV BX,0xd917 (1000_B95B / 0x1B95B)
    BX = 0xD917;
    // JMP 0x1000:d338 (1000_B95E / 0x1B95E)
    // Jump converted to entry function call
    return unknown_1000_D338_1D338(0);
  }
  
  public Action unknown_1000_B96B_1B96B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB96B: goto label_1000_B96B_1B96B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B96B_1B96B:
    // CALL 0x1000:b8f3 (1000_B96B / 0x1B96B)
    NearCall(cs1, 0xB96E, unknown_1000_B8F3_1B8F3);
    // DEC byte ptr [0xdd02] (1000_B96E / 0x1B96E)
    UInt8[DS, 0xDD02] = Alu.Dec8(UInt8[DS, 0xDD02]);
    // CALL 0x1000:b98b (1000_B972 / 0x1B972)
    NearCall(cs1, 0xB975, unknown_1000_B98B_1B98B);
    // JMP 0x1000:b941 (1000_B975 / 0x1B975)
    // Jump converted to entry function call
    return unknown_1000_B941_1B941(0);
  }
  
  public Action map_func_gfx_ida_1000_B977_1B977(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB977: goto label_1000_B977_1B977;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B977_1B977:
    // MOV BP,0x4948 (1000_B977 / 0x1B977)
    BP = 0x4948;
    // MOV ES,word ptr [0xdbd6] (1000_B97A / 0x1B97A)
    ES = UInt16[DS, 0xDBD6];
    // MOV AL,[0xdd02] (1000_B97E / 0x1B97E)
    AL = UInt8[DS, 0xDD02];
    // LDS SI,[0xdcfe] (1000_B981 / 0x1B981)
    SI = UInt16[DS, 0xDCFE];
    DS = UInt16[DS, 0xDD00];
    // CALLF [0x3911] (1000_B985 / 0x1B985)
    // Indirect call to [0x3911], generating possible targets from emulator records
    uint targetAddress_1000_B985 = (uint)(UInt16[SS, 0x3913] * 0x10 + UInt16[SS, 0x3911] - cs1 * 0x10);
    switch(targetAddress_1000_B985) {
      case 0x235F5 : FarCall(cs1, 0xB98A, unknown_334B_0145_335F5);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B985);
        break;
    }
    // RET  (1000_B98A / 0x1B98A)
    return NearRet();
  }
  
  public Action unknown_1000_B98B_1B98B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB98E: goto label_1000_B98E_1B98E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B98B_1B98B:
    // CALL 0x1000:b977 (1000_B98B / 0x1B98B)
    NearCall(cs1, 0xB98E, map_func_gfx_ida_1000_B977_1B977);
    label_1000_B98E_1B98E:
    // CALL 0x1000:baf2 (1000_B98E / 0x1B98E)
    NearCall(cs1, 0xB991, unknown_1000_BAF2_1BAF2);
    // PUSH BX (1000_B991 / 0x1B991)
    Stack.Push(BX);
    // PUSH DX (1000_B992 / 0x1B992)
    Stack.Push(DX);
    // MOV SI,0xd834 (1000_B993 / 0x1B993)
    SI = 0xD834;
    // CALL 0x1000:db74 (1000_B996 / 0x1B996)
    NearCall(cs1, 0xB999, unknown_1000_DB74_1DB74);
    // CALL 0x1000:c4ed (1000_B999 / 0x1B999)
    NearCall(cs1, 0xB99C, unknown_1000_C4ED_1C4ED);
    // POP DX (1000_B99C / 0x1B99C)
    DX = Stack.Pop();
    // POP BX (1000_B99D / 0x1B99D)
    BX = Stack.Pop();
    // OR DX,DX (1000_B99E / 0x1B99E)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:b9a5 (1000_B9A0 / 0x1B9A0)
    if(ZeroFlag) {
      goto label_1000_B9A5_1B9A5;
    }
    // CALL 0x1000:bc0c (1000_B9A2 / 0x1B9A2)
    NearCall(cs1, 0xB9A5, unknown_1000_BC0C_1BC0C);
    label_1000_B9A5_1B9A5:
    // CALL 0x1000:db67 (1000_B9A5 / 0x1B9A5)
    NearCall(cs1, 0xB9A8, unknown_1000_DB67_1DB67);
    // MOV AX,0x1 (1000_B9A8 / 0x1B9A8)
    AX = 0x1;
    // JMP 0x1000:b9e0 (1000_B9AB / 0x1B9AB)
    // Jump converted to entry function call
    return unknown_1000_B9E0_1B9E0(0);
  }
  
  public Action unknown_1000_B9AE_1B9AE(int gotoTarget) {
    label_1000_B9AE_1B9AE:
    // MOV ES,word ptr [0xdbd6] (1000_B9AE / 0x1B9AE)
    ES = UInt16[DS, 0xDBD6];
    // CALLF [0x3915] (1000_B9B2 / 0x1B9B2)
    // Indirect call to [0x3915], generating possible targets from emulator records
    uint targetAddress_1000_B9B2 = (uint)(UInt16[DS, 0x3917] * 0x10 + UInt16[DS, 0x3915] - cs1 * 0x10);
    switch(targetAddress_1000_B9B2) {
      case 0x235F8 : FarCall(cs1, 0xB9B6, unknown_334B_0148_335F8);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_B9B2);
        break;
    }
    // JC 0x1000:b98e (1000_B9B6 / 0x1B9B6)
    if(CarryFlag) {
      // Jump converted to non entry function call
      return unknown_1000_B98B_1B98B(0x1B98E - cs1 * 0x10);
    }
    // RET  (1000_B9B8 / 0x1B9B8)
    return NearRet();
  }
  
  public Action unknown_1000_B9E0_1B9E0(int gotoTarget) {
    switch(gotoTarget) {
      case 0xB9E0: goto label_1000_B9E0_1B9E0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_B9E0_1B9E0:
    // MOV SI,0x494c (1000_B9E0 / 0x1B9E0)
    SI = 0x494C;
    // MOV DX,word ptr [SI] (1000_B9E3 / 0x1B9E3)
    DX = UInt16[DS, SI];
    // MOV CX,0x18e (1000_B9E5 / 0x1B9E5)
    CX = 0x18E;
    // ADD DX,AX (1000_B9E8 / 0x1B9E8)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // JNS 0x1000:b9ee (1000_B9EA / 0x1B9EA)
    if(!SignFlag) {
      goto label_1000_B9EE_1B9EE;
    }
    // ADD DX,CX (1000_B9EC / 0x1B9EC)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    label_1000_B9EE_1B9EE:
    // CMP DX,CX (1000_B9EE / 0x1B9EE)
    Alu.Sub16(DX, CX);
    // JS 0x1000:b9f4 (1000_B9F0 / 0x1B9F0)
    if(SignFlag) {
      goto label_1000_B9F4_1B9F4;
    }
    // SUB DX,CX (1000_B9F2 / 0x1B9F2)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    label_1000_B9F4_1B9F4:
    // MOV word ptr [SI],DX (1000_B9F4 / 0x1B9F4)
    UInt16[DS, SI] = DX;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_B9F6_1B9F6(0);
  }
  
  public Action unknown_1000_B9F6_1B9F6(int gotoTarget) {
    label_1000_B9F6_1B9F6:
    // MOV AX,0x8000 (1000_B9F6 / 0x1B9F6)
    AX = 0x8000;
    // MOV CX,0x18e (1000_B9F9 / 0x1B9F9)
    CX = 0x18E;
    // DIV CX (1000_B9FC / 0x1B9FC)
    Cpu.Div16(CX);
    // MOV CX,0x62 (1000_B9FE / 0x1B9FE)
    CX = 0x62;
    // MOV BX,AX (1000_BA01 / 0x1BA01)
    BX = AX;
    label_1000_BA03_1BA03:
    // ADD SI,0x6 (1000_BA03 / 0x1BA03)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // LODSW SI (1000_BA06 / 0x1BA06)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MUL BX (1000_BA07 / 0x1BA07)
    Cpu.Mul16(BX);
    // ADD AX,AX (1000_BA09 / 0x1BA09)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADC DX,DX (1000_BA0B / 0x1BA0B)
    DX = Alu.Adc16(DX, DX);
    // MOV word ptr [SI],DX (1000_BA0D / 0x1BA0D)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],AX (1000_BA0F / 0x1BA0F)
    UInt16[DS, (ushort)(SI + 0x2)] = AX;
    // LOOP 0x1000:ba03 (1000_BA12 / 0x1BA12)
    if(--CX != 0) {
      goto label_1000_BA03_1BA03;
    }
    // RET  (1000_BA14 / 0x1BA14)
    return NearRet();
  }
  
  public Action unknown_1000_BA15_1BA15(int gotoTarget) {
    switch(gotoTarget) {
      case 0xBA2D: goto label_1000_BA2D_1BA2D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_BA15_1BA15:
    // ADD AX,word ptr [0x2460] (1000_BA15 / 0x1BA15)
    // AX += UInt16[DS, 0x2460];
    AX = Alu.Add16(AX, UInt16[DS, 0x2460]);
    // MOV CX,0x62 (1000_BA19 / 0x1BA19)
    CX = 0x62;
    // CMP AX,CX (1000_BA1C / 0x1BA1C)
    Alu.Sub16(AX, CX);
    // JL 0x1000:ba22 (1000_BA1E / 0x1BA1E)
    if(SignFlag != OverflowFlag) {
      goto label_1000_BA22_1BA22;
    }
    // MOV AX,CX (1000_BA20 / 0x1BA20)
    AX = CX;
    label_1000_BA22_1BA22:
    // NEG CX (1000_BA22 / 0x1BA22)
    CX = Alu.Sub16(0, CX);
    // CMP AX,CX (1000_BA24 / 0x1BA24)
    Alu.Sub16(AX, CX);
    // JG 0x1000:ba2a (1000_BA26 / 0x1BA26)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_BA2A_1BA2A;
    }
    // MOV AX,CX (1000_BA28 / 0x1BA28)
    AX = CX;
    label_1000_BA2A_1BA2A:
    // MOV [0x2460],AX (1000_BA2A / 0x1BA2A)
    UInt16[DS, 0x2460] = AX;
    label_1000_BA2D_1BA2D:
    // PUSH DS (1000_BA2D / 0x1BA2D)
    Stack.Push(DS);
    // POP ES (1000_BA2E / 0x1BA2E)
    ES = Stack.Pop();
    // MOV DI,0x8b77 (1000_BA2F / 0x1BA2F)
    DI = 0x8B77;
    // MOV BX,0x62 (1000_BA32 / 0x1BA32)
    BX = 0x62;
    // MOV CX,0xc4 (1000_BA35 / 0x1BA35)
    CX = 0xC4;
    // MOV AX,[0x2460] (1000_BA38 / 0x1BA38)
    AX = UInt16[DS, 0x2460];
    // ADD AX,BX (1000_BA3B / 0x1BA3B)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // CMP AX,BX (1000_BA3D / 0x1BA3D)
    Alu.Sub16(AX, BX);
    // JLE 0x1000:ba55 (1000_BA3F / 0x1BA3F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_BA55_1BA55;
    }
    // NEG BX (1000_BA41 / 0x1BA41)
    BX = Alu.Sub16(0, BX);
    // ADD AL,BL (1000_BA43 / 0x1BA43)
    // AL += BL;
    AL = Alu.Add8(AL, BL);
    // ADD AL,BL (1000_BA45 / 0x1BA45)
    // AL += BL;
    AL = Alu.Add8(AL, BL);
    label_1000_BA47_1BA47:
    // DEC AL (1000_BA47 / 0x1BA47)
    AL = Alu.Dec8(AL);
    // STOSW ES:DI (1000_BA49 / 0x1BA49)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AL,BL (1000_BA4A / 0x1BA4A)
    Alu.Sub8(AL, BL);
    // JLE 0x1000:ba50 (1000_BA4C / 0x1BA4C)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_BA50_1BA50;
    }
    // LOOP 0x1000:ba47 (1000_BA4E / 0x1BA4E)
    if(--CX != 0) {
      goto label_1000_BA47_1BA47;
    }
    label_1000_BA50_1BA50:
    // NEG BX (1000_BA50 / 0x1BA50)
    BX = Alu.Sub16(0, BX);
    // MOV AX,BX (1000_BA52 / 0x1BA52)
    AX = BX;
    // DEC CX (1000_BA54 / 0x1BA54)
    CX = Alu.Dec16(CX);
    label_1000_BA55_1BA55:
    // STOSW ES:DI (1000_BA55 / 0x1BA55)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // DEC AL (1000_BA56 / 0x1BA56)
    AL = Alu.Dec8(AL);
    // JS 0x1000:ba5c (1000_BA58 / 0x1BA58)
    if(SignFlag) {
      goto label_1000_BA5C_1BA5C;
    }
    // LOOP 0x1000:ba55 (1000_BA5A / 0x1BA5A)
    if(--CX != 0) {
      goto label_1000_BA55_1BA55;
    }
    label_1000_BA5C_1BA5C:
    // DEC CX (1000_BA5C / 0x1BA5C)
    CX = Alu.Dec16(CX);
    // JLE 0x1000:ba74 (1000_BA5D / 0x1BA5D)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_BA74 / 0x1BA74)
      return NearRet();
    }
    // NEG AX (1000_BA5F / 0x1BA5F)
    AX = Alu.Sub16(0, AX);
    label_1000_BA61_1BA61:
    // STOSW ES:DI (1000_BA61 / 0x1BA61)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC AL (1000_BA62 / 0x1BA62)
    AL = Alu.Inc8(AL);
    // CMP AL,BL (1000_BA64 / 0x1BA64)
    Alu.Sub8(AL, BL);
    // JG 0x1000:ba6a (1000_BA66 / 0x1BA66)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_BA6A_1BA6A;
    }
    // LOOP 0x1000:ba61 (1000_BA68 / 0x1BA68)
    if(--CX != 0) {
      goto label_1000_BA61_1BA61;
    }
    label_1000_BA6A_1BA6A:
    // DEC CX (1000_BA6A / 0x1BA6A)
    CX = Alu.Dec16(CX);
    // JLE 0x1000:ba74 (1000_BA6B / 0x1BA6B)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_BA74 / 0x1BA74)
      return NearRet();
    }
    // NEG AL (1000_BA6D / 0x1BA6D)
    AL = Alu.Sub8(0, AL);
    label_1000_BA6F_1BA6F:
    // INC AL (1000_BA6F / 0x1BA6F)
    AL = Alu.Inc8(AL);
    // STOSW ES:DI (1000_BA71 / 0x1BA71)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x1000:ba6f (1000_BA72 / 0x1BA72)
    if(--CX != 0) {
      goto label_1000_BA6F_1BA6F;
    }
    label_1000_BA74_1BA74:
    // RET  (1000_BA74 / 0x1BA74)
    return NearRet();
  }
  
  public Action unknown_1000_BA75_1BA75(int gotoTarget) {
    label_1000_BA75_1BA75:
    // MOV SI,0x494c (1000_BA75 / 0x1BA75)
    SI = 0x494C;
    // MOV AX,0x18e (1000_BA78 / 0x1BA78)
    AX = 0x18E;
    // MUL DX (1000_BA7B / 0x1BA7B)
    Cpu.Mul16(DX);
    // MOV word ptr [SI],DX (1000_BA7D / 0x1BA7D)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],0x0 (1000_BA7F / 0x1BA7F)
    UInt16[DS, (ushort)(SI + 0x2)] = 0x0;
    // MOV AX,BX (1000_BA84 / 0x1BA84)
    AX = BX;
    // CMP AX,0x20 (1000_BA86 / 0x1BA86)
    Alu.Sub16(AX, 0x20);
    // JNC 0x1000:ba8e (1000_BA89 / 0x1BA89)
    if(!CarryFlag) {
      goto label_1000_BA8E_1BA8E;
    }
    // MOV AX,0x20 (1000_BA8B / 0x1BA8B)
    AX = 0x20;
    label_1000_BA8E_1BA8E:
    // CMP AX,0xffe0 (1000_BA8E / 0x1BA8E)
    Alu.Sub16(AX, 0xFFE0);
    // JC 0x1000:ba96 (1000_BA91 / 0x1BA91)
    if(CarryFlag) {
      goto label_1000_BA96_1BA96;
    }
    // MOV AX,0xffe0 (1000_BA93 / 0x1BA93)
    AX = 0xFFE0;
    label_1000_BA96_1BA96:
    // MOV [0x2460],AX (1000_BA96 / 0x1BA96)
    UInt16[DS, 0x2460] = AX;
    // CALL 0x1000:b9f6 (1000_BA99 / 0x1BA99)
    NearCall(cs1, 0xBA9C, unknown_1000_B9F6_1B9F6);
    // JMP 0x1000:ba2d (1000_BA9C / 0x1BA9C)
    // Jump converted to non entry function call
    return unknown_1000_BA15_1BA15(0x1BA2D - cs1 * 0x10);
  }
  
  public Action unknown_1000_BA9E_1BA9E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xBAF1: goto label_1000_BAF1_1BAF1;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_BA9E_1BA9E:
    // CALL 0x1000:407e (1000_BA9E / 0x1BA9E)
    NearCall(cs1, 0xBAA1, unknown_1000_407E_1407E);
    // MOV AX,0x18e (1000_BAA1 / 0x1BAA1)
    AX = 0x18E;
    // MUL DX (1000_BAA4 / 0x1BAA4)
    Cpu.Mul16(DX);
    // MOV BP,word ptr [0x494a] (1000_BAA6 / 0x1BAA6)
    BP = UInt16[DS, 0x494A];
    // ADD BP,BP (1000_BAAA / 0x1BAAA)
    // BP += BP;
    BP = Alu.Add16(BP, BP);
    // SUB DX,word ptr [0x494c] (1000_BAAC / 0x1BAAC)
    // DX -= UInt16[DS, 0x494C];
    DX = Alu.Sub16(DX, UInt16[DS, 0x494C]);
    // CALL 0x1000:b683 (1000_BAB0 / 0x1BAB0)
    NearCall(cs1, 0xBAB3, unknown_1000_B683_1B683);
    // MOV CX,0x1 (1000_BAB3 / 0x1BAB3)
    CX = 0x1;
    // MOV AX,0x20 (1000_BAB6 / 0x1BAB6)
    AX = 0x20;
    // CMP DX,AX (1000_BAB9 / 0x1BAB9)
    Alu.Sub16(DX, AX);
    // JL 0x1000:bac0 (1000_BABB / 0x1BABB)
    if(SignFlag != OverflowFlag) {
      goto label_1000_BAC0_1BAC0;
    }
    // MOV DX,AX (1000_BABD / 0x1BABD)
    DX = AX;
    // INC CX (1000_BABF / 0x1BABF)
    CX = Alu.Inc16(CX);
    label_1000_BAC0_1BAC0:
    // NEG AX (1000_BAC0 / 0x1BAC0)
    AX = Alu.Sub16(0, AX);
    // CMP DX,AX (1000_BAC2 / 0x1BAC2)
    Alu.Sub16(DX, AX);
    // JG 0x1000:bac9 (1000_BAC4 / 0x1BAC4)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_BAC9_1BAC9;
    }
    // MOV DX,AX (1000_BAC6 / 0x1BAC6)
    DX = AX;
    // INC CX (1000_BAC8 / 0x1BAC8)
    CX = Alu.Inc16(CX);
    label_1000_BAC9_1BAC9:
    // SUB BX,word ptr [0x2460] (1000_BAC9 / 0x1BAC9)
    // BX -= UInt16[DS, 0x2460];
    BX = Alu.Sub16(BX, UInt16[DS, 0x2460]);
    // MOV AX,0x18 (1000_BACD / 0x1BACD)
    AX = 0x18;
    // CMP BX,AX (1000_BAD0 / 0x1BAD0)
    Alu.Sub16(BX, AX);
    // JL 0x1000:bad7 (1000_BAD2 / 0x1BAD2)
    if(SignFlag != OverflowFlag) {
      goto label_1000_BAD7_1BAD7;
    }
    // MOV BX,AX (1000_BAD4 / 0x1BAD4)
    BX = AX;
    // INC CX (1000_BAD6 / 0x1BAD6)
    CX = Alu.Inc16(CX);
    label_1000_BAD7_1BAD7:
    // NEG AX (1000_BAD7 / 0x1BAD7)
    AX = Alu.Sub16(0, AX);
    // CMP BX,AX (1000_BAD9 / 0x1BAD9)
    Alu.Sub16(BX, AX);
    // JG 0x1000:bae0 (1000_BADB / 0x1BADB)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_BAE0_1BAE0;
    }
    // MOV BX,AX (1000_BADD / 0x1BADD)
    BX = AX;
    // INC CX (1000_BADF / 0x1BADF)
    CX = Alu.Inc16(CX);
    label_1000_BAE0_1BAE0:
    // MOV AX,DX (1000_BAE0 / 0x1BAE0)
    AX = DX;
    // PUSH CX (1000_BAE2 / 0x1BAE2)
    Stack.Push(CX);
    // PUSH BX (1000_BAE3 / 0x1BAE3)
    Stack.Push(BX);
    // CALL 0x1000:b9e0 (1000_BAE4 / 0x1BAE4)
    NearCall(cs1, 0xBAE7, unknown_1000_B9E0_1B9E0);
    // POP AX (1000_BAE7 / 0x1BAE7)
    AX = Stack.Pop();
    // CALL 0x1000:ba15 (1000_BAE8 / 0x1BAE8)
    NearCall(cs1, 0xBAEB, unknown_1000_BA15_1BA15);
    // CALL 0x1000:b98b (1000_BAEB / 0x1BAEB)
    NearCall(cs1, 0xBAEE, unknown_1000_B98B_1B98B);
    // POP CX (1000_BAEE / 0x1BAEE)
    CX = Stack.Pop();
    // LOOP 0x1000:ba9e (1000_BAEF / 0x1BAEF)
    if(--CX != 0) {
      goto label_1000_BA9E_1BA9E;
    }
    label_1000_BAF1_1BAF1:
    // RET  (1000_BAF1 / 0x1BAF1)
    return NearRet();
  }
  
  public Action unknown_1000_BAF2_1BAF2(int gotoTarget) {
    label_1000_BAF2_1BAF2:
    // XOR DX,DX (1000_BAF2 / 0x1BAF2)
    DX = 0;
    // CMP byte ptr [0x227d],0x0 (1000_BAF4 / 0x1BAF4)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:baf1 (1000_BAF9 / 0x1BAF9)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_BAF1 / 0x1BAF1)
      return NearRet();
    }
    // CALL 0x1000:407e (1000_BAFB / 0x1BAFB)
    NearCall(cs1, 0xBAFE, unknown_1000_407E_1407E);
    // SUB SP,0xa (1000_BAFE / 0x1BAFE)
    // SP -= 0xA;
    SP = Alu.Sub16(SP, 0xA);
    // MOV BP,SP (1000_BB01 / 0x1BB01)
    BP = SP;
    // MOV word ptr [BP + 0x0],0x0 (1000_BB03 / 0x1BB03)
    UInt16[SS, BP] = 0x0;
    // SHL BX,1 (1000_BB08 / 0x1BB08)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_BB0A / 0x1BB0A)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_BB0C / 0x1BB0C)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // JNS 0x1000:bb16 (1000_BB0E / 0x1BB0E)
    if(!SignFlag) {
      goto label_1000_BB16_1BB16;
    }
    // MOV byte ptr [BP + 0x1],0xff (1000_BB10 / 0x1BB10)
    UInt8[SS, (ushort)(BP + 0x1)] = 0xFF;
    // NEG BX (1000_BB14 / 0x1BB14)
    BX = Alu.Sub16(0, BX);
    label_1000_BB16_1BB16:
    // MOV CX,word ptr [BX + 0x494a] (1000_BB16 / 0x1BB16)
    CX = UInt16[DS, (ushort)(BX + 0x494A)];
    // MOV AX,CX (1000_BB1A / 0x1BB1A)
    AX = CX;
    // ADD AX,AX (1000_BB1C / 0x1BB1C)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // MUL DX (1000_BB1E / 0x1BB1E)
    Cpu.Mul16(DX);
    // ADD AX,AX (1000_BB20 / 0x1BB20)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADC DX,0x0 (1000_BB22 / 0x1BB22)
    DX = Alu.Adc16(DX, 0x0);
    // XOR AX,AX (1000_BB25 / 0x1BB25)
    AX = 0;
    // SUB DX,word ptr [BX + 0x494c] (1000_BB27 / 0x1BB27)
    // DX -= UInt16[DS, (ushort)(BX + 0x494C)];
    DX = Alu.Sub16(DX, UInt16[DS, (ushort)(BX + 0x494C)]);
    // JNS 0x1000:bb31 (1000_BB2B / 0x1BB2B)
    if(!SignFlag) {
      goto label_1000_BB31_1BB31;
    }
    // NEG DX (1000_BB2D / 0x1BB2D)
    DX = Alu.Sub16(0, DX);
    // NOT AX (1000_BB2F / 0x1BB2F)
    AX = (ushort)~AX;
    label_1000_BB31_1BB31:
    // CMP DX,CX (1000_BB31 / 0x1BB31)
    Alu.Sub16(DX, CX);
    // JC 0x1000:bb3d (1000_BB33 / 0x1BB33)
    if(CarryFlag) {
      goto label_1000_BB3D_1BB3D;
    }
    // SUB DX,CX (1000_BB35 / 0x1BB35)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // SUB DX,CX (1000_BB37 / 0x1BB37)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // NEG DX (1000_BB39 / 0x1BB39)
    DX = Alu.Sub16(0, DX);
    // NOT AX (1000_BB3B / 0x1BB3B)
    AX = (ushort)~AX;
    label_1000_BB3D_1BB3D:
    // SHR CX,1 (1000_BB3D / 0x1BB3D)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // CMP DX,CX (1000_BB3F / 0x1BB3F)
    Alu.Sub16(DX, CX);
    // JC 0x1000:bb4d (1000_BB41 / 0x1BB41)
    if(CarryFlag) {
      goto label_1000_BB4D_1BB4D;
    }
    // MOV byte ptr [BP + 0x0],0x80 (1000_BB43 / 0x1BB43)
    UInt8[SS, BP] = 0x80;
    // SUB DX,CX (1000_BB47 / 0x1BB47)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // SUB DX,CX (1000_BB49 / 0x1BB49)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // NEG DX (1000_BB4B / 0x1BB4B)
    DX = Alu.Sub16(0, DX);
    label_1000_BB4D_1BB4D:
    // MOV byte ptr [BP + 0x4],AL (1000_BB4D / 0x1BB4D)
    UInt8[SS, (ushort)(BP + 0x4)] = AL;
    // SHR BX,1 (1000_BB50 / 0x1BB50)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_BB52 / 0x1BB52)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // PUSH DS (1000_BB54 / 0x1BB54)
    Stack.Push(DS);
    // POP ES (1000_BB55 / 0x1BB55)
    ES = Stack.Pop();
    // MOV DI,0x593a (1000_BB56 / 0x1BB56)
    DI = 0x593A;
    // MOV AX,BX (1000_BB59 / 0x1BB59)
    AX = BX;
    // MOV CX,0x64 (1000_BB5B / 0x1BB5B)
    CX = 0x64;
    // XOR BX,BX (1000_BB5E / 0x1BB5E)
    BX = 0;
    label_1000_BB60_1BB60:
    while (CX-- != 0) {
      // SCASB ES:DI (1000_BB60 / 0x1BB60)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // JNZ 0x1000:bb7a (1000_BB62 / 0x1BB62)
    if(!ZeroFlag) {
      goto label_1000_BB7A_1BB7A;
    }
    // INC CX (1000_BB64 / 0x1BB64)
    CX = Alu.Inc16(CX);
    // CMP DL,byte ptr [DI + 0x63] (1000_BB65 / 0x1BB65)
    Alu.Sub8(DL, UInt8[DS, (ushort)(DI + 0x63)]);
    // JBE 0x1000:bb7d (1000_BB68 / 0x1BB68)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_BB7D_1BB7D;
    }
    // MOV word ptr [BP + 0x2],CX (1000_BB6A / 0x1BB6A)
    UInt16[SS, (ushort)(BP + 0x2)] = CX;
    // INC BX (1000_BB6D / 0x1BB6D)
    BX = Alu.Inc16(BX);
    // ADD DI,0xc7 (1000_BB6E / 0x1BB6E)
    // DI += 0xC7;
    DI = Alu.Add16(DI, 0xC7);
    // CMP DI,0x8b3b (1000_BB72 / 0x1BB72)
    Alu.Sub16(DI, 0x8B3B);
    // JC 0x1000:bb60 (1000_BB76 / 0x1BB76)
    if(CarryFlag) {
      goto label_1000_BB60_1BB60;
    }
    // JMP 0x1000:bbe6 (1000_BB78 / 0x1BB78)
    goto label_1000_BBE6_1BBE6;
    label_1000_BB7A_1BB7A:
    // MOV CX,word ptr [BP + 0x2] (1000_BB7A / 0x1BB7A)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    label_1000_BB7D_1BB7D:
    // MOV AX,0x64 (1000_BB7D / 0x1BB7D)
    AX = 0x64;
    // SUB AX,CX (1000_BB80 / 0x1BB80)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // MOV word ptr [BP + 0x2],BX (1000_BB82 / 0x1BB82)
    UInt16[SS, (ushort)(BP + 0x2)] = BX;
    // MOV CX,word ptr [BP + 0x0] (1000_BB85 / 0x1BB85)
    CX = UInt16[SS, BP];
    // MOV AH,CH (1000_BB88 / 0x1BB88)
    AH = CH;
    // OR CL,CL (1000_BB8A / 0x1BB8A)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JNS 0x1000:bb90 (1000_BB8C / 0x1BB8C)
    if(!SignFlag) {
      goto label_1000_BB90_1BB90;
    }
    // NEG AL (1000_BB8E / 0x1BB8E)
    AL = Alu.Sub8(0, AL);
    label_1000_BB90_1BB90:
    // MOV DI,0x8bbb (1000_BB90 / 0x1BB90)
    DI = 0x8BBB;
    // MOV CX,0x80 (1000_BB93 / 0x1BB93)
    CX = 0x80;
    while (CX-- != 0) {
      // SCASW ES:DI (1000_BB96 / 0x1BB96)
      Alu.Sub16(AX, UInt16[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      if(ZeroFlag == false) {
        break;
      }
    }
    // JNZ 0x1000:bbe6 (1000_BB98 / 0x1BB98)
    if(!ZeroFlag) {
      goto label_1000_BBE6_1BBE6;
    }
    // XOR AL,AL (1000_BB9A / 0x1BB9A)
    AL = 0;
    // SUB DI,0x8c3d (1000_BB9C / 0x1BB9C)
    // DI -= 0x8C3D;
    DI = Alu.Sub16(DI, 0x8C3D);
    // JNS 0x1000:bba6 (1000_BBA0 / 0x1BBA0)
    if(!SignFlag) {
      goto label_1000_BBA6_1BBA6;
    }
    // NEG DI (1000_BBA2 / 0x1BBA2)
    DI = Alu.Sub16(0, DI);
    // NOT AL (1000_BBA4 / 0x1BBA4)
    AL = (byte)~AL;
    label_1000_BBA6_1BBA6:
    // MOV byte ptr [BP + 0x5],AL (1000_BBA6 / 0x1BBA6)
    UInt8[SS, (ushort)(BP + 0x5)] = AL;
    // MOV BX,0x36 (1000_BBA9 / 0x1BBA9)
    BX = 0x36;
    // MOV AX,DI (1000_BBAC / 0x1BBAC)
    AX = DI;
    // SHR AX,1 (1000_BBAE / 0x1BBAE)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV SI,0x4c60 (1000_BBB0 / 0x1BBB0)
    SI = 0x4C60;
    // MOV DX,word ptr [BP + 0x2] (1000_BBB3 / 0x1BBB3)
    DX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV CL,AL (1000_BBB6 / 0x1BBB6)
    CL = AL;
    // MOV CH,0xff (1000_BBB8 / 0x1BBB8)
    CH = 0xFF;
    // XOR AX,AX (1000_BBBA / 0x1BBBA)
    AX = 0;
    label_1000_BBBC_1BBBC:
    // LODSB SI (1000_BBBC / 0x1BBBC)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC AL (1000_BBBD / 0x1BBBD)
    AL = Alu.Inc8(AL);
    // JZ 0x1000:bbe1 (1000_BBBF / 0x1BBBF)
    if(ZeroFlag) {
      goto label_1000_BBE1_1BBE1;
    }
    // NEG AL (1000_BBC1 / 0x1BBC1)
    AL = Alu.Sub8(0, AL);
    // CMP AL,DL (1000_BBC3 / 0x1BBC3)
    Alu.Sub8(AL, DL);
    // JBE 0x1000:bbe1 (1000_BBC5 / 0x1BBC5)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_BBE1_1BBE1;
    }
    // MOV DI,SI (1000_BBC7 / 0x1BBC7)
    DI = SI;
    // ADD SI,AX (1000_BBC9 / 0x1BBC9)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // ADD DI,DX (1000_BBCB / 0x1BBCB)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    // MOV AL,byte ptr [DI] (1000_BBCD / 0x1BBCD)
    AL = UInt8[DS, DI];
    // SUB AL,CL (1000_BBCF / 0x1BBCF)
    // AL -= CL;
    AL = Alu.Sub8(AL, CL);
    // CMP AL,CH (1000_BBD1 / 0x1BBD1)
    Alu.Sub8(AL, CH);
    // JNC 0x1000:bbde (1000_BBD3 / 0x1BBD3)
    if(!CarryFlag) {
      goto label_1000_BBDE_1BBDE;
    }
    // MOV CH,AL (1000_BBD5 / 0x1BBD5)
    CH = AL;
    // MOV word ptr [BP + 0x6],BX (1000_BBD7 / 0x1BBD7)
    UInt16[SS, (ushort)(BP + 0x6)] = BX;
    // OR AL,AL (1000_BBDA / 0x1BBDA)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:bbec (1000_BBDC / 0x1BBDC)
    if(ZeroFlag) {
      goto label_1000_BBEC_1BBEC;
    }
    label_1000_BBDE_1BBDE:
    // DEC BX (1000_BBDE / 0x1BBDE)
    BX = Alu.Dec16(BX);
    // JNZ 0x1000:bbbc (1000_BBDF / 0x1BBDF)
    if(!ZeroFlag) {
      goto label_1000_BBBC_1BBBC;
    }
    label_1000_BBE1_1BBE1:
    // CMP CH,0x2 (1000_BBE1 / 0x1BBE1)
    Alu.Sub8(CH, 0x2);
    // JBE 0x1000:bbec (1000_BBE4 / 0x1BBE4)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_BBEC_1BBEC;
    }
    label_1000_BBE6_1BBE6:
    // ADD SP,0xa (1000_BBE6 / 0x1BBE6)
    // SP += 0xA;
    SP = Alu.Add16(SP, 0xA);
    // XOR DX,DX (1000_BBE9 / 0x1BBE9)
    DX = 0;
    // RET  (1000_BBEB / 0x1BBEB)
    return NearRet();
    label_1000_BBEC_1BBEC:
    // MOV AX,word ptr [BP + 0x4] (1000_BBEC / 0x1BBEC)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV BX,word ptr [BP + 0x6] (1000_BBEF / 0x1BBEF)
    BX = UInt16[SS, (ushort)(BP + 0x6)];
    // SUB BX,0x36 (1000_BBF2 / 0x1BBF2)
    // BX -= 0x36;
    BX = Alu.Sub16(BX, 0x36);
    // OR AH,AH (1000_BBF5 / 0x1BBF5)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:bbfb (1000_BBF7 / 0x1BBF7)
    if(ZeroFlag) {
      goto label_1000_BBFB_1BBFB;
    }
    // NEG BX (1000_BBF9 / 0x1BBF9)
    BX = Alu.Sub16(0, BX);
    label_1000_BBFB_1BBFB:
    // ADD BX,0x4f (1000_BBFB / 0x1BBFB)
    // BX += 0x4F;
    BX = Alu.Add16(BX, 0x4F);
    // OR AL,AL (1000_BBFE / 0x1BBFE)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:bc04 (1000_BC00 / 0x1BC00)
    if(ZeroFlag) {
      goto label_1000_BC04_1BC04;
    }
    // NEG DX (1000_BC02 / 0x1BC02)
    DX = Alu.Sub16(0, DX);
    label_1000_BC04_1BC04:
    // ADD DX,0xa0 (1000_BC04 / 0x1BC04)
    // DX += 0xA0;
    DX = Alu.Add16(DX, 0xA0);
    // ADD SP,0xa (1000_BC08 / 0x1BC08)
    // SP += 0xA;
    SP = Alu.Add16(SP, 0xA);
    // RET  (1000_BC0B / 0x1BC0B)
    return NearRet();
  }
  
  public Action unknown_1000_BC0C_1BC0C(int gotoTarget) {
    label_1000_BC0C_1BC0C:
    // CALL 0x1000:c08e (1000_BC0C / 0x1BC0C)
    NearCall(cs1, 0xBC0F, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:c137 (1000_BC0F / 0x1BC0F)
    NearCall(cs1, 0xBC12, load_icons_sprites_ida_1000_C137_1C137);
    // MOV AX,0x36 (1000_BC12 / 0x1BC12)
    AX = 0x36;
    // CALL 0x1000:c1f4 (1000_BC15 / 0x1BC15)
    NearCall(cs1, 0xBC18, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // SUB BL,byte ptr ES:[SI + 0x2] (1000_BC18 / 0x1BC18)
    // BL -= UInt8[ES, (ushort)(SI + 0x2)];
    BL = Alu.Sub8(BL, UInt8[ES, (ushort)(SI + 0x2)]);
    // JMP 0x1000:c22f (1000_BC1C / 0x1BC1C)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
  }
  
  public Action unknown_1000_BC1F_1BC1F(int gotoTarget) {
    label_1000_BC1F_1BC1F:
    // CALL 0x1000:d41b (1000_BC1F / 0x1BC1F)
    NearCall(cs1, 0xBC22, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x204a (1000_BC22 / 0x1BC22)
    Alu.Sub16(BP, 0x204A);
    // JZ 0x1000:bc2c (1000_BC26 / 0x1BC26)
    if(ZeroFlag) {
      goto label_1000_BC2C_1BC2C;
    }
    // CMP BP,0x2062 (1000_BC28 / 0x1BC28)
    Alu.Sub16(BP, 0x2062);
    label_1000_BC2C_1BC2C:
    // JNZ 0x1000:bc4d (1000_BC2C / 0x1BC2C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_BC4D / 0x1BC4D)
      return NearRet();
    }
    // CALL 0x1000:bc4e (1000_BC2E / 0x1BC2E)
    NearCall(cs1, 0xBC31, unknown_1000_BC4E_1BC4E);
    // JC 0x1000:bc3c (1000_BC31 / 0x1BC31)
    if(CarryFlag) {
      goto label_1000_BC3C_1BC3C;
    }
    // CMP BP,0x204a (1000_BC33 / 0x1BC33)
    Alu.Sub16(BP, 0x204A);
    // JZ 0x1000:bc4d (1000_BC37 / 0x1BC37)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_BC4D / 0x1BC4D)
      return NearRet();
    }
    // JMP 0x1000:b941 (1000_BC39 / 0x1BC39)
    // Jump converted to entry function call
    return unknown_1000_B941_1B941(0);
    label_1000_BC3C_1BC3C:
    // CMP BP,0x2062 (1000_BC3C / 0x1BC3C)
    Alu.Sub16(BP, 0x2062);
    // JZ 0x1000:bc4d (1000_BC40 / 0x1BC40)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_BC4D / 0x1BC4D)
      return NearRet();
    }
    // MOV BP,0x2062 (1000_BC42 / 0x1BC42)
    BP = 0x2062;
    // MOV BX,0xd917 (1000_BC45 / 0x1BC45)
    BX = 0xD917;
    // XOR CX,CX (1000_BC48 / 0x1BC48)
    CX = 0;
    // JMP 0x1000:d33a (1000_BC4A / 0x1BC4A)
    // Jump converted to entry function call
    return unknown_1000_D33A_1D33A(0);
    label_1000_BC4D_1BC4D:
    // RET  (1000_BC4D / 0x1BC4D)
    return NearRet();
  }
  
  public Action unknown_1000_BC4E_1BC4E(int gotoTarget) {
    label_1000_BC4E_1BC4E:
    // SUB DX,0x60 (1000_BC4E / 0x1BC4E)
    // DX -= 0x60;
    DX = Alu.Sub16(DX, 0x60);
    // CMC  (1000_BC51 / 0x1BC51)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:bc63 (1000_BC52 / 0x1BC52)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_BC63 / 0x1BC63)
      return NearRet();
    }
    // CMP DX,0x80 (1000_BC54 / 0x1BC54)
    Alu.Sub16(DX, 0x80);
    // JNC 0x1000:bc63 (1000_BC58 / 0x1BC58)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_BC63 / 0x1BC63)
      return NearRet();
    }
    // SUB BX,0x19 (1000_BC5A / 0x1BC5A)
    // BX -= 0x19;
    BX = Alu.Sub16(BX, 0x19);
    // CMC  (1000_BC5D / 0x1BC5D)
    CarryFlag = !CarryFlag;
    // JNC 0x1000:bc63 (1000_BC5E / 0x1BC5E)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_BC63 / 0x1BC63)
      return NearRet();
    }
    // CMP BX,0x6d (1000_BC60 / 0x1BC60)
    Alu.Sub16(BX, 0x6D);
    label_1000_BC63_1BC63:
    // RET  (1000_BC63 / 0x1BC63)
    return NearRet();
  }
  
  public Action unknown_1000_BC99_1BC99(int gotoTarget) {
    label_1000_BC99_1BC99:
    // MOV SI,0xdd06 (1000_BC99 / 0x1BC99)
    SI = 0xDD06;
    // MOV word ptr [SI],DX (1000_BC9C / 0x1BC9C)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],BX (1000_BC9E / 0x1BC9E)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // INC DX (1000_BCA1 / 0x1BCA1)
    DX = Alu.Inc16(DX);
    // INC DX (1000_BCA2 / 0x1BCA2)
    DX = Alu.Inc16(DX);
    // INC BX (1000_BCA3 / 0x1BCA3)
    BX = Alu.Inc16(BX);
    // MOV word ptr [SI + 0x4],DX (1000_BCA4 / 0x1BCA4)
    UInt16[DS, (ushort)(SI + 0x4)] = DX;
    // MOV word ptr [SI + 0x6],BX (1000_BCA7 / 0x1BCA7)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // MOV byte ptr [SI + 0x8],0x7 (1000_BCAA / 0x1BCAA)
    UInt8[DS, (ushort)(SI + 0x8)] = 0x7;
    // CALL 0x1000:c08e (1000_BCAE / 0x1BCAE)
    NearCall(cs1, 0xBCB1, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV CX,0x8 (1000_BCB1 / 0x1BCB1)
    CX = 0x8;
    label_1000_BCB4_1BCB4:
    // PUSH CX (1000_BCB4 / 0x1BCB4)
    Stack.Push(CX);
    // MOV SI,0xdd06 (1000_BCB5 / 0x1BCB5)
    SI = 0xDD06;
    // MOV DI,0x2440 (1000_BCB8 / 0x1BCB8)
    DI = 0x2440;
    // MOV CX,0x2 (1000_BCBB / 0x1BCBB)
    CX = 0x2;
    // MOV DX,0xfffc (1000_BCBE / 0x1BCBE)
    DX = 0xFFFC;
    label_1000_BCC1_1BCC1:
    // MOV AX,word ptr [SI] (1000_BCC1 / 0x1BCC1)
    AX = UInt16[DS, SI];
    // ADD AX,DX (1000_BCC3 / 0x1BCC3)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // CMP AX,word ptr [DI] (1000_BCC5 / 0x1BCC5)
    Alu.Sub16(AX, UInt16[DS, DI]);
    // JNC 0x1000:bccb (1000_BCC7 / 0x1BCC7)
    if(!CarryFlag) {
      goto label_1000_BCCB_1BCCB;
    }
    // MOV AX,word ptr [DI] (1000_BCC9 / 0x1BCC9)
    AX = UInt16[DS, DI];
    label_1000_BCCB_1BCCB:
    // MOV word ptr [SI],AX (1000_BCCB / 0x1BCCB)
    UInt16[DS, SI] = AX;
    // ADD DI,0x2 (1000_BCCD / 0x1BCCD)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // ADD SI,0x2 (1000_BCD0 / 0x1BCD0)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // SAR DX,1 (1000_BCD3 / 0x1BCD3)
    DX = Alu.Sar16(DX, 1);
    // LOOP 0x1000:bcc1 (1000_BCD5 / 0x1BCD5)
    if(--CX != 0) {
      goto label_1000_BCC1_1BCC1;
    }
    // MOV CX,0x2 (1000_BCD7 / 0x1BCD7)
    CX = 0x2;
    // MOV DX,0x4 (1000_BCDA / 0x1BCDA)
    DX = 0x4;
    label_1000_BCDD_1BCDD:
    // MOV AX,word ptr [SI] (1000_BCDD / 0x1BCDD)
    AX = UInt16[DS, SI];
    // ADD AX,DX (1000_BCDF / 0x1BCDF)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // CMP AX,word ptr [DI] (1000_BCE1 / 0x1BCE1)
    Alu.Sub16(AX, UInt16[DS, DI]);
    // JC 0x1000:bce7 (1000_BCE3 / 0x1BCE3)
    if(CarryFlag) {
      goto label_1000_BCE7_1BCE7;
    }
    // MOV AX,word ptr [DI] (1000_BCE5 / 0x1BCE5)
    AX = UInt16[DS, DI];
    label_1000_BCE7_1BCE7:
    // MOV word ptr [SI],AX (1000_BCE7 / 0x1BCE7)
    UInt16[DS, SI] = AX;
    // ADD DI,0x2 (1000_BCE9 / 0x1BCE9)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // ADD SI,0x2 (1000_BCEC / 0x1BCEC)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // SAR DX,1 (1000_BCEF / 0x1BCEF)
    DX = Alu.Sar16(DX, 1);
    // LOOP 0x1000:bcdd (1000_BCF1 / 0x1BCF1)
    if(--CX != 0) {
      goto label_1000_BCDD_1BCDD;
    }
    // MOV SI,0xdd06 (1000_BCF3 / 0x1BCF3)
    SI = 0xDD06;
    // CALL 0x1000:c551 (1000_BCF6 / 0x1BCF6)
    NearCall(cs1, 0xBCF9, unknown_1000_C551_1C551);
    // CALL 0x1000:bd00 (1000_BCF9 / 0x1BCF9)
    NearCall(cs1, 0xBCFC, unknown_1000_BD00_1BD00);
    // POP CX (1000_BCFC / 0x1BCFC)
    CX = Stack.Pop();
    // LOOP 0x1000:bcb4 (1000_BCFD / 0x1BCFD)
    if(--CX != 0) {
      goto label_1000_BCB4_1BCB4;
    }
    // RET  (1000_BCFF / 0x1BCFF)
    return NearRet();
  }
  
  public Action unknown_1000_BD00_1BD00(int gotoTarget) {
    label_1000_BD00_1BD00:
    // XOR AX,AX (1000_BD00 / 0x1BD00)
    AX = 0;
    // MOV CX,0xa (1000_BD02 / 0x1BD02)
    CX = 0xA;
    // MOV SI,0xdd06 (1000_BD05 / 0x1BD05)
    SI = 0xDD06;
    // INC word ptr [SI] (1000_BD08 / 0x1BD08)
    UInt16[DS, SI] = Alu.Inc16(UInt16[DS, SI]);
    // INC word ptr [SI + 0x2] (1000_BD0A / 0x1BD0A)
    UInt16[DS, (ushort)(SI + 0x2)] = Alu.Inc16(UInt16[DS, (ushort)(SI + 0x2)]);
    // DEC word ptr [SI + 0x4] (1000_BD0D / 0x1BD0D)
    UInt16[DS, (ushort)(SI + 0x4)] = Alu.Dec16(UInt16[DS, (ushort)(SI + 0x4)]);
    // DEC word ptr [SI + 0x6] (1000_BD10 / 0x1BD10)
    UInt16[DS, (ushort)(SI + 0x6)] = Alu.Dec16(UInt16[DS, (ushort)(SI + 0x6)]);
    // CALL 0x1000:c0d5 (1000_BD13 / 0x1BD13)
    NearCall(cs1, 0xBD16, unknown_1000_C0D5_1C0D5);
    // MOV SI,0xdd06 (1000_BD16 / 0x1BD16)
    SI = 0xDD06;
    // DEC word ptr [SI] (1000_BD19 / 0x1BD19)
    UInt16[DS, SI] = Alu.Dec16(UInt16[DS, SI]);
    // DEC word ptr [SI + 0x2] (1000_BD1B / 0x1BD1B)
    UInt16[DS, (ushort)(SI + 0x2)] = Alu.Dec16(UInt16[DS, (ushort)(SI + 0x2)]);
    // INC word ptr [SI + 0x4] (1000_BD1E / 0x1BD1E)
    UInt16[DS, (ushort)(SI + 0x4)] = Alu.Inc16(UInt16[DS, (ushort)(SI + 0x4)]);
    // INC word ptr [SI + 0x6] (1000_BD21 / 0x1BD21)
    UInt16[DS, (ushort)(SI + 0x6)] = Alu.Inc16(UInt16[DS, (ushort)(SI + 0x6)]);
    // RET  (1000_BD24 / 0x1BD24)
    return NearRet();
  }
  
  public Action unknown_1000_BDBB_1BDBB(int gotoTarget) {
    label_1000_BDBB_1BDBB:
    // CMP word ptr [0xdd0f],0x0 (1000_BDBB / 0x1BDBB)
    Alu.Sub16(UInt16[DS, 0xDD0F], 0x0);
    // JZ 0x1000:bdf9 (1000_BDC0 / 0x1BDC0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_BDF9 / 0x1BDF9)
      return NearRet();
    }
    // CALL 0x1000:c08e (1000_BDC2 / 0x1BDC2)
    NearCall(cs1, 0xBDC5, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CALL 0x1000:dbb2 (1000_BDC5 / 0x1BDC5)
    NearCall(cs1, 0xBDC8, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:bdfa (1000_BDC8 / 0x1BDC8)
    NearCall(cs1, 0xBDCB, unknown_1000_BDFA_1BDFA);
    // CALL 0x1000:bed7 (1000_BDCB / 0x1BDCB)
    NearCall(cs1, 0xBDCE, unknown_1000_BED7_1BED7);
    // MOV AX,[0x2] (1000_BDCE / 0x1BDCE)
    AX = UInt16[DS, 0x2];
    // AND AX,0xfff0 (1000_BDD1 / 0x1BDD1)
    // AX &= 0xFFF0;
    AX = Alu.And16(AX, 0xFFF0);
    // MOV [0x115c],AX (1000_BDD4 / 0x1BDD4)
    UInt16[DS, 0x115C] = AX;
    // CALL 0x1000:d075 (1000_BDD7 / 0x1BDD7)
    NearCall(cs1, 0xBDDA, SetFontToMenu_1000_D075_1D075);
    // MOV SI,0x2494 (1000_BDDA / 0x1BDDA)
    SI = 0x2494;
    // CALL 0x1000:d1a6 (1000_BDDD / 0x1BDDD)
    NearCall(cs1, 0xBDE0, unknown_1000_D1A6_1D1A6);
    // MOV SI,0xdd11 (1000_BDE0 / 0x1BDE0)
    SI = 0xDD11;
    // MOV DI,0xdd17 (1000_BDE3 / 0x1BDE3)
    DI = 0xDD17;
    // PUSH DS (1000_BDE6 / 0x1BDE6)
    Stack.Push(DS);
    // POP ES (1000_BDE7 / 0x1BDE7)
    ES = Stack.Pop();
    // MOV CX,0x6 (1000_BDE8 / 0x1BDE8)
    CX = 0x6;
    label_1000_BDEB_1BDEB:
    // CMPSB ES:DI,SI (1000_BDEB / 0x1BDEB)
    Alu.Sub8(UInt8[DS, SI], UInt8[ES, DI]);
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOPNZ 0x1000:bdeb (1000_BDEC / 0x1BDEC)
    if(--CX != 0 && !ZeroFlag) {
      goto label_1000_BDEB_1BDEB;
    }
    // JNZ 0x1000:bdf9 (1000_BDEE / 0x1BDEE)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_BDF9 / 0x1BDF9)
      return NearRet();
    }
    // DEC byte ptr [DI + -0x1] (1000_BDF0 / 0x1BDF0)
    UInt8[DS, (ushort)(DI - 0x1)] = Alu.Dec8(UInt8[DS, (ushort)(DI - 0x1)]);
    // INC CX (1000_BDF3 / 0x1BDF3)
    CX = Alu.Inc16(CX);
    // LOOP 0x1000:bdeb (1000_BDF4 / 0x1BDF4)
    if(--CX != 0) {
      goto label_1000_BDEB_1BDEB;
    }
    // CALL 0x1000:dbec (1000_BDF6 / 0x1BDF6)
    NearCall(cs1, 0xBDF9, draw_mouse_ida_1000_DBEC_1DBEC);
    label_1000_BDF9_1BDF9:
    // RET  (1000_BDF9 / 0x1BDF9)
    return NearRet();
  }
  
  public Action unknown_1000_BDFA_1BDFA(int gotoTarget) {
    label_1000_BDFA_1BDFA:
    // MOV SI,0xc2 (1000_BDFA / 0x1BDFA)
    SI = 0xC2;
    // CALL 0x1000:1ad1 (1000_BDFD / 0x1BDFD)
    NearCall(cs1, 0xBE00, GetSunlightDay_1000_1AD1_11AD1);
    // INC AX (1000_BE00 / 0x1BE00)
    AX = Alu.Inc16(AX);
    // CALL 0x1000:e2db (1000_BE01 / 0x1BE01)
    NearCall(cs1, 0xBE04, unknown_1000_E2DB_1E2DB);
    // CALL 0x1000:bfa7 (1000_BE04 / 0x1BE04)
    NearCall(cs1, 0xBE07, unknown_1000_BFA7_1BFA7);
    // MOV AL,[0x29] (1000_BE07 / 0x1BE07)
    AL = UInt8[DS, 0x29];
    // XOR AH,AH (1000_BE0A / 0x1BE0A)
    AH = 0;
    // SHR AX,1 (1000_BE0C / 0x1BE0C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV SI,0xc3 (1000_BE0E / 0x1BE0E)
    SI = 0xC3;
    // CALL 0x1000:e2db (1000_BE11 / 0x1BE11)
    NearCall(cs1, 0xBE14, unknown_1000_E2DB_1E2DB);
    // CALL 0x1000:d068 (1000_BE14 / 0x1BE14)
    NearCall(cs1, 0xBE17, SetFontToIntro_1000_D068_1D068);
    // MOV SI,0x2482 (1000_BE17 / 0x1BE17)
    SI = 0x2482;
    // JMP 0x1000:d1a6 (1000_BE1A / 0x1BE1A)
    // Jump converted to entry function call
    return unknown_1000_D1A6_1D1A6(0);
  }
  
  public Action unknown_1000_BE1D_1BE1D(int gotoTarget) {
    label_1000_BE1D_1BE1D:
    // MOV AX,0x1 (1000_BE1D / 0x1BE1D)
    AX = 0x1;
    // CALL 0x1000:c13e (1000_BE20 / 0x1BE20)
    NearCall(cs1, 0xBE23, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV SI,0x2506 (1000_BE23 / 0x1BE23)
    SI = 0x2506;
    // CALL 0x1000:c21b (1000_BE26 / 0x1BE26)
    NearCall(cs1, 0xBE29, unknown_1000_C21B_1C21B);
    // CALL 0x1000:bed7 (1000_BE29 / 0x1BE29)
    NearCall(cs1, 0xBE2C, unknown_1000_BED7_1BED7);
    // CALL 0x1000:bdfa (1000_BE2C / 0x1BE2C)
    NearCall(cs1, 0xBE2F, unknown_1000_BDFA_1BDFA);
    // MOV SI,0xdd17 (1000_BE2F / 0x1BE2F)
    SI = 0xDD17;
    // XOR AX,AX (1000_BE32 / 0x1BE32)
    AX = 0;
    // MOV word ptr [SI],AX (1000_BE34 / 0x1BE34)
    UInt16[DS, SI] = AX;
    // MOV word ptr [SI + 0x2],AX (1000_BE36 / 0x1BE36)
    UInt16[DS, (ushort)(SI + 0x2)] = AX;
    // MOV word ptr [SI + 0x4],AX (1000_BE39 / 0x1BE39)
    UInt16[DS, (ushort)(SI + 0x4)] = AX;
    // MOV AX,[0x2] (1000_BE3C / 0x1BE3C)
    AX = UInt16[DS, 0x2];
    // AND AX,0xfff0 (1000_BE3F / 0x1BE3F)
    // AX &= 0xFFF0;
    AX = Alu.And16(AX, 0xFFF0);
    // MOV [0x115c],AX (1000_BE42 / 0x1BE42)
    UInt16[DS, 0x115C] = AX;
    // CALL 0x1000:d075 (1000_BE45 / 0x1BE45)
    NearCall(cs1, 0xBE48, SetFontToMenu_1000_D075_1D075);
    // MOV SI,0x2494 (1000_BE48 / 0x1BE48)
    SI = 0x2494;
    // CALL 0x1000:d1a6 (1000_BE4B / 0x1BE4B)
    NearCall(cs1, 0xBE4E, unknown_1000_D1A6_1D1A6);
    // MOV SI,0xbe57 (1000_BE4E / 0x1BE4E)
    SI = 0xBE57;
    // MOV BP,0xc (1000_BE51 / 0x1BE51)
    BP = 0xC;
    // CALL 0x1000:da25 (1000_BE54 / 0x1BE54)
    NearCall(cs1, 0xBE57, unknown_1000_DA25_1DA25);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_BE57_1BE57(0);
  }
  
  public Action unknown_1000_BE57_1BE57(int gotoTarget) {
    label_1000_BE57_1BE57:
    // CALL 0x1000:c08e (1000_BE57 / 0x1BE57)
    NearCall(cs1, 0xBE5A, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV SI,0x1470 (1000_BE5A / 0x1BE5A)
    SI = 0x1470;
    // CALL 0x1000:db74 (1000_BE5D / 0x1BE5D)
    NearCall(cs1, 0xBE60, unknown_1000_DB74_1DB74);
    // CALL 0x1000:c137 (1000_BE60 / 0x1BE60)
    NearCall(cs1, 0xBE63, load_icons_sprites_ida_1000_C137_1C137);
    // MOV SI,0xdd11 (1000_BE63 / 0x1BE63)
    SI = 0xDD11;
    // XOR BP,BP (1000_BE66 / 0x1BE66)
    BP = 0;
    label_1000_BE68_1BE68:
    // MOV CL,byte ptr [SI] (1000_BE68 / 0x1BE68)
    CL = UInt8[DS, SI];
    // SUB CL,byte ptr [SI + 0x6] (1000_BE6A / 0x1BE6A)
    // CL -= UInt8[DS, (ushort)(SI + 0x6)];
    CL = Alu.Sub8(CL, UInt8[DS, (ushort)(SI + 0x6)]);
    // JZ 0x1000:becd (1000_BE6D / 0x1BE6D)
    if(ZeroFlag) {
      goto label_1000_BECD_1BECD;
    }
    // MOV AL,0x1 (1000_BE6F / 0x1BE6F)
    AL = 0x1;
    // JNC 0x1000:be75 (1000_BE71 / 0x1BE71)
    if(!CarryFlag) {
      goto label_1000_BE75_1BE75;
    }
    // NEG AL (1000_BE73 / 0x1BE73)
    AL = Alu.Sub8(0, AL);
    label_1000_BE75_1BE75:
    // ADD byte ptr [SI + 0x6],AL (1000_BE75 / 0x1BE75)
    // UInt8[DS, (ushort)(SI + 0x6)] += AL;
    UInt8[DS, (ushort)(SI + 0x6)] = Alu.Add8(UInt8[DS, (ushort)(SI + 0x6)], AL);
    // MOV AL,byte ptr [SI + 0x6] (1000_BE78 / 0x1BE78)
    AL = UInt8[DS, (ushort)(SI + 0x6)];
    // CMP AL,0x1e (1000_BE7B / 0x1BE7B)
    Alu.Sub8(AL, 0x1E);
    // JC 0x1000:be81 (1000_BE7D / 0x1BE7D)
    if(CarryFlag) {
      goto label_1000_BE81_1BE81;
    }
    // MOV AL,0x1e (1000_BE7F / 0x1BE7F)
    AL = 0x1E;
    label_1000_BE81_1BE81:
    // MOV BX,BP (1000_BE81 / 0x1BE81)
    BX = BP;
    // SHL BX,1 (1000_BE83 / 0x1BE83)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_BE85 / 0x1BE85)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV DX,word ptr [BX + 0x24ee] (1000_BE87 / 0x1BE87)
    DX = UInt16[DS, (ushort)(BX + 0x24EE)];
    // MOV BX,word ptr [BX + 0x24f0] (1000_BE8B / 0x1BE8B)
    BX = UInt16[DS, (ushort)(BX + 0x24F0)];
    // XOR AH,AH (1000_BE8F / 0x1BE8F)
    AH = 0;
    // SUB BX,AX (1000_BE91 / 0x1BE91)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // PUSH SI (1000_BE93 / 0x1BE93)
    Stack.Push(SI);
    // PUSH BP (1000_BE94 / 0x1BE94)
    Stack.Push(BP);
    // MOV AX,0x37 (1000_BE95 / 0x1BE95)
    AX = 0x37;
    // SHR BP,1 (1000_BE98 / 0x1BE98)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // ADC AX,0x0 (1000_BE9A / 0x1BE9A)
    AX = Alu.Adc16(AX, 0x0);
    // CALL 0x1000:c2fd (1000_BE9D / 0x1BE9D)
    NearCall(cs1, 0xBEA0, unknown_1000_C2FD_1C2FD);
    // SUB BX,0xa (1000_BEA0 / 0x1BEA0)
    // BX -= 0xA;
    BX = Alu.Sub16(BX, 0xA);
    // MOV AX,0x39 (1000_BEA3 / 0x1BEA3)
    AX = 0x39;
    // CALL 0x1000:c2fd (1000_BEA6 / 0x1BEA6)
    NearCall(cs1, 0xBEA9, unknown_1000_C2FD_1C2FD);
    // POP BP (1000_BEA9 / 0x1BEA9)
    BP = Stack.Pop();
    // POP SI (1000_BEAA / 0x1BEAA)
    SI = Stack.Pop();
    // MOV AL,byte ptr [SI] (1000_BEAB / 0x1BEAB)
    AL = UInt8[DS, SI];
    // CMP AL,byte ptr [SI + 0x6] (1000_BEAD / 0x1BEAD)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0x6)]);
    // JNZ 0x1000:becd (1000_BEB0 / 0x1BEB0)
    if(!ZeroFlag) {
      goto label_1000_BECD_1BECD;
    }
    // TEST BP,0x1 (1000_BEB2 / 0x1BEB2)
    Alu.And16(BP, 0x1);
    // MOV AX,0x3f (1000_BEB6 / 0x1BEB6)
    AX = 0x3F;
    // JZ 0x1000:bebd (1000_BEB9 / 0x1BEB9)
    if(ZeroFlag) {
      goto label_1000_BEBD_1BEBD;
    }
    // MOV AL,0x25 (1000_BEBB / 0x1BEBB)
    AL = 0x25;
    label_1000_BEBD_1BEBD:
    // MOV [0xdbe4],AX (1000_BEBD / 0x1BEBD)
    UInt16[DS, 0xDBE4] = AX;
    // ADD DX,0x4 (1000_BEC0 / 0x1BEC0)
    // DX += 0x4;
    DX = Alu.Add16(DX, 0x4);
    // CALL 0x1000:d04e (1000_BEC3 / 0x1BEC3)
    NearCall(cs1, 0xBEC6, unknown_1000_D04E_1D04E);
    // MOV AL,byte ptr [BP + 0x116a] (1000_BEC6 / 0x1BEC6)
    AL = UInt8[SS, (ushort)(BP + 0x116A)];
    // CALL 0x1000:d12f (1000_BECA / 0x1BECA)
    NearCall(cs1, 0xBECD, unknown_1000_D12F_1D12F);
    label_1000_BECD_1BECD:
    // INC SI (1000_BECD / 0x1BECD)
    SI = Alu.Inc16(SI);
    // INC BP (1000_BECE / 0x1BECE)
    BP = Alu.Inc16(BP);
    // CMP BP,0x6 (1000_BECF / 0x1BECF)
    Alu.Sub16(BP, 0x6);
    // JC 0x1000:be68 (1000_BED2 / 0x1BED2)
    if(CarryFlag) {
      goto label_1000_BE68_1BE68;
    }
    // JMP 0x1000:c07c (1000_BED4 / 0x1BED4)
    // Jump converted to entry function call
    return SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(0);
  }
  
  public Action unknown_1000_BED7_1BED7(int gotoTarget) {
    label_1000_BED7_1BED7:
    // MOV AX,[0x2] (1000_BED7 / 0x1BED7)
    AX = UInt16[DS, 0x2];
    // AND AX,0xfff0 (1000_BEDA / 0x1BEDA)
    // AX &= 0xFFF0;
    AX = Alu.And16(AX, 0xFFF0);
    // MOV [0x115c],AX (1000_BEDD / 0x1BEDD)
    UInt16[DS, 0x115C] = AX;
    // CALL 0x1000:c02e (1000_BEE0 / 0x1BEE0)
    NearCall(cs1, 0xBEE3, unknown_1000_C02E_1C02E);
    // CALL 0x1000:bf26 (1000_BEE3 / 0x1BEE3)
    NearCall(cs1, 0xBEE6, unknown_1000_BF26_1BF26);
    // PUSH DS (1000_BEE6 / 0x1BEE6)
    Stack.Push(DS);
    // POP ES (1000_BEE7 / 0x1BEE7)
    ES = Stack.Pop();
    // MOV DI,0xdd11 (1000_BEE8 / 0x1BEE8)
    DI = 0xDD11;
    // MOV AX,[0xa4] (1000_BEEB / 0x1BEEB)
    AX = UInt16[DS, 0xA4];
    // SHR AX,1 (1000_BEEE / 0x1BEEE)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AX (1000_BEF0 / 0x1BEF0)
    AX = Alu.Inc16(AX);
    // STOSB ES:DI (1000_BEF1 / 0x1BEF1)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AX,[0xa2] (1000_BEF2 / 0x1BEF2)
    AX = UInt16[DS, 0xA2];
    // SHR AX,1 (1000_BEF5 / 0x1BEF5)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AX (1000_BEF7 / 0x1BEF7)
    AX = Alu.Inc16(AX);
    // STOSB ES:DI (1000_BEF8 / 0x1BEF8)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AX,[0xa8] (1000_BEF9 / 0x1BEF9)
    AX = UInt16[DS, 0xA8];
    // SHR AX,1 (1000_BEFC / 0x1BEFC)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BEFE / 0x1BEFE)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BF00 / 0x1BF00)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BF02 / 0x1BF02)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AL (1000_BF04 / 0x1BF04)
    AL = Alu.Inc8(AL);
    // STOSB ES:DI (1000_BF06 / 0x1BF06)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AX,[0xa6] (1000_BF07 / 0x1BF07)
    AX = UInt16[DS, 0xA6];
    // SHR AX,1 (1000_BF0A / 0x1BF0A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BF0C / 0x1BF0C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BF0E / 0x1BF0E)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_BF10 / 0x1BF10)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // INC AL (1000_BF12 / 0x1BF12)
    AL = Alu.Inc8(AL);
    // STOSB ES:DI (1000_BF14 / 0x1BF14)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AX,[0xac] (1000_BF15 / 0x1BF15)
    AX = UInt16[DS, 0xAC];
    // MOV AL,AH (1000_BF18 / 0x1BF18)
    AL = AH;
    // INC AL (1000_BF1A / 0x1BF1A)
    AL = Alu.Inc8(AL);
    // STOSB ES:DI (1000_BF1C / 0x1BF1C)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AX,[0xaa] (1000_BF1D / 0x1BF1D)
    AX = UInt16[DS, 0xAA];
    // MOV AL,AH (1000_BF20 / 0x1BF20)
    AL = AH;
    // INC AL (1000_BF22 / 0x1BF22)
    AL = Alu.Inc8(AL);
    // STOSB ES:DI (1000_BF24 / 0x1BF24)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // RET  (1000_BF25 / 0x1BF25)
    return NearRet();
  }
  
  public Action unknown_1000_BF26_1BF26(int gotoTarget) {
    label_1000_BF26_1BF26:
    // MOV DI,0x115e (1000_BF26 / 0x1BF26)
    DI = 0x115E;
    // MOV BP,0x116a (1000_BF29 / 0x1BF29)
    BP = 0x116A;
    // MOV SI,0xc4 (1000_BF2C / 0x1BF2C)
    SI = 0xC4;
    // CALL 0x1000:cf70 (1000_BF2F / 0x1BF2F)
    NearCall(cs1, 0xBF32, unknown_1000_CF70_1CF70);
    // MOV AX,[0xa4] (1000_BF32 / 0x1BF32)
    AX = UInt16[DS, 0xA4];
    // CALL 0x1000:bf73 (1000_BF35 / 0x1BF35)
    NearCall(cs1, 0xBF38, unknown_1000_BF73_1BF73);
    // MOV AX,[0xa2] (1000_BF38 / 0x1BF38)
    AX = UInt16[DS, 0xA2];
    // CALL 0x1000:bf73 (1000_BF3B / 0x1BF3B)
    NearCall(cs1, 0xBF3E, unknown_1000_BF73_1BF73);
    // MOV AX,[0xa8] (1000_BF3E / 0x1BF3E)
    AX = UInt16[DS, 0xA8];
    // CALL 0x1000:bf61 (1000_BF41 / 0x1BF41)
    NearCall(cs1, 0xBF44, unknown_1000_BF61_1BF61);
    // MOV AX,[0xa6] (1000_BF44 / 0x1BF44)
    AX = UInt16[DS, 0xA6];
    // CALL 0x1000:bf61 (1000_BF47 / 0x1BF47)
    NearCall(cs1, 0xBF4A, unknown_1000_BF61_1BF61);
    // MOV AX,[0xac] (1000_BF4A / 0x1BF4A)
    AX = UInt16[DS, 0xAC];
    // CALL 0x1000:bf61 (1000_BF4D / 0x1BF4D)
    NearCall(cs1, 0xBF50, unknown_1000_BF61_1BF61);
    // MOV AX,[0xaa] (1000_BF50 / 0x1BF50)
    AX = UInt16[DS, 0xAA];
    // JMP 0x1000:bf61 (1000_BF53 / 0x1BF53)
    // Jump converted to entry function call
    return unknown_1000_BF61_1BF61(0);
  }
  
  public Action unknown_1000_BF61_1BF61(int gotoTarget) {
    switch(gotoTarget) {
      case 0xBF61: goto label_1000_BF61_1BF61;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_BF61_1BF61:
    // PUSH DI (1000_BF61 / 0x1BF61)
    Stack.Push(DI);
    // PUSH AX (1000_BF62 / 0x1BF62)
    Stack.Push(AX);
    // CALL 0x1000:d03c (1000_BF63 / 0x1BF63)
    NearCall(cs1, 0xBF66, unknown_1000_D03C_1D03C);
    // DEC SI (1000_BF66 / 0x1BF66)
    SI = Alu.Dec16(SI);
    // MOV byte ptr ES:[SI],0x30 (1000_BF67 / 0x1BF67)
    UInt8[ES, SI] = 0x30;
    // POP AX (1000_BF6B / 0x1BF6B)
    AX = Stack.Pop();
    // PUSH AX (1000_BF6C / 0x1BF6C)
    Stack.Push(AX);
    // CALL 0x1000:e31c (1000_BF6D / 0x1BF6D)
    NearCall(cs1, 0xBF70, unknown_1000_E31C_1E31C);
    // INC SI (1000_BF70 / 0x1BF70)
    SI = Alu.Inc16(SI);
    // JMP 0x1000:bf7d (1000_BF71 / 0x1BF71)
    // Jump converted to non entry function call
    return unknown_1000_BF73_1BF73(0x1BF7D - cs1 * 0x10);
  }
  
  public Action unknown_1000_BF73_1BF73(int gotoTarget) {
    switch(gotoTarget) {
      case 0xBF7D: goto label_1000_BF7D_1BF7D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_BF73_1BF73:
    // PUSH DI (1000_BF73 / 0x1BF73)
    Stack.Push(DI);
    // PUSH AX (1000_BF74 / 0x1BF74)
    Stack.Push(AX);
    // CALL 0x1000:d03c (1000_BF75 / 0x1BF75)
    NearCall(cs1, 0xBF78, unknown_1000_D03C_1D03C);
    // POP AX (1000_BF78 / 0x1BF78)
    AX = Stack.Pop();
    // PUSH AX (1000_BF79 / 0x1BF79)
    Stack.Push(AX);
    // CALL 0x1000:e2e3 (1000_BF7A / 0x1BF7A)
    NearCall(cs1, 0xBF7D, unknown_1000_E2E3_1E2E3);
    label_1000_BF7D_1BF7D:
    // POP AX (1000_BF7D / 0x1BF7D)
    AX = Stack.Pop();
    // POP DI (1000_BF7E / 0x1BF7E)
    DI = Stack.Pop();
    // MOV DX,AX (1000_BF7F / 0x1BF7F)
    DX = AX;
    // XCHG word ptr [DI],AX (1000_BF81 / 0x1BF81)
    ushort tmp_1000_BF81 = UInt16[DS, DI];
    UInt16[DS, DI] = AX;
    AX = tmp_1000_BF81;
    // CMP DX,AX (1000_BF83 / 0x1BF83)
    Alu.Sub16(DX, AX);
    // MOV AL,0x3 (1000_BF85 / 0x1BF85)
    AL = 0x3;
    // JNZ 0x1000:bf99 (1000_BF87 / 0x1BF87)
    if(!ZeroFlag) {
      goto label_1000_BF99_1BF99;
    }
    // MOV AX,[0x2] (1000_BF89 / 0x1BF89)
    AX = UInt16[DS, 0x2];
    // AND AX,0xfff0 (1000_BF8C / 0x1BF8C)
    // AX &= 0xFFF0;
    AX = Alu.And16(AX, 0xFFF0);
    // CMP word ptr [0x115c],AX (1000_BF8F / 0x1BF8F)
    Alu.Sub16(UInt16[DS, 0x115C], AX);
    // JZ 0x1000:bfa2 (1000_BF93 / 0x1BF93)
    if(ZeroFlag) {
      goto label_1000_BFA2_1BFA2;
    }
    // MOV AL,0x3 (1000_BF95 / 0x1BF95)
    AL = 0x3;
    // JMP 0x1000:bf9f (1000_BF97 / 0x1BF97)
    goto label_1000_BF9F_1BF9F;
    label_1000_BF99_1BF99:
    // MOV AL,0x2 (1000_BF99 / 0x1BF99)
    AL = 0x2;
    // JC 0x1000:bf9f (1000_BF9B / 0x1BF9B)
    if(CarryFlag) {
      goto label_1000_BF9F_1BF9F;
    }
    // DEC AL (1000_BF9D / 0x1BF9D)
    AL = Alu.Dec8(AL);
    label_1000_BF9F_1BF9F:
    // MOV byte ptr [BP + 0x0],AL (1000_BF9F / 0x1BF9F)
    UInt8[SS, BP] = AL;
    label_1000_BFA2_1BFA2:
    // ADD DI,0x2 (1000_BFA2 / 0x1BFA2)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // INC BP (1000_BFA5 / 0x1BFA5)
    BP = Alu.Inc16(BP);
    // RET  (1000_BFA6 / 0x1BFA6)
    return NearRet();
  }
  
  public Action unknown_1000_BFA7_1BFA7(int gotoTarget) {
    label_1000_BFA7_1BFA7:
    // MOV BL,byte ptr [0xceeb] (1000_BFA7 / 0x1BFA7)
    BL = UInt8[DS, 0xCEEB];
    // XOR BH,BH (1000_BFAB / 0x1BFAB)
    BH = 0;
    // SHL BX,1 (1000_BFAD / 0x1BFAD)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_BFAF / 0x1BFAF)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_BFB1 / 0x1BFB1)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // ADD BX,0x251a (1000_BFB3 / 0x1BFB3)
    // BX += 0x251A;
    BX = Alu.Add16(BX, 0x251A);
    // MOV AX,word ptr ES:[SI + -0x2] (1000_BFB7 / 0x1BFB7)
    AX = UInt16[ES, (ushort)(SI - 0x2)];
    // XCHG AH,AL (1000_BFBB / 0x1BFBB)
    byte tmp_1000_BFBB = AH;
    AH = AL;
    AL = tmp_1000_BFBB;
    // AND AL,0xf (1000_BFBD / 0x1BFBD)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AH,0x31 (1000_BFBF / 0x1BFBF)
    Alu.Sub8(AH, 0x31);
    // JZ 0x1000:bfdd (1000_BFC2 / 0x1BFC2)
    if(ZeroFlag) {
      goto label_1000_BFDD_1BFDD;
    }
    // CMP AL,0x4 (1000_BFC4 / 0x1BFC4)
    Alu.Sub8(AL, 0x4);
    // JNC 0x1000:bfdd (1000_BFC6 / 0x1BFC6)
    if(!CarryFlag) {
      goto label_1000_BFDD_1BFDD;
    }
    // CMP AL,0x1 (1000_BFC8 / 0x1BFC8)
    Alu.Sub8(AL, 0x1);
    // JNZ 0x1000:bfd7 (1000_BFCA / 0x1BFCA)
    if(!ZeroFlag) {
      goto label_1000_BFD7_1BFD7;
    }
    // CMP BX,0x2522 (1000_BFCC / 0x1BFCC)
    Alu.Sub16(BX, 0x2522);
    // JNZ 0x1000:bfd7 (1000_BFD0 / 0x1BFD0)
    if(!ZeroFlag) {
      goto label_1000_BFD7_1BFD7;
    }
    // CMP AH,0x20 (1000_BFD2 / 0x1BFD2)
    Alu.Sub8(AH, 0x20);
    // JNZ 0x1000:bfdd (1000_BFD5 / 0x1BFD5)
    if(!ZeroFlag) {
      goto label_1000_BFDD_1BFDD;
    }
    label_1000_BFD7_1BFD7:
    // XOR AH,AH (1000_BFD7 / 0x1BFD7)
    AH = 0;
    // SHL AX,1 (1000_BFD9 / 0x1BFD9)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD BX,AX (1000_BFDB / 0x1BFDB)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    label_1000_BFDD_1BFDD:
    // MOV AX,word ptr [BX] (1000_BFDD / 0x1BFDD)
    AX = UInt16[DS, BX];
    // MOV word ptr ES:[SI],AX (1000_BFDF / 0x1BFDF)
    UInt16[ES, SI] = AX;
    // RET  (1000_BFE2 / 0x1BFE2)
    return NearRet();
  }
  
  public Action map_func_ida_1000_BFE3_1BFE3(int gotoTarget) {
    label_1000_BFE3_1BFE3:
    // PUSH DS (1000_BFE3 / 0x1BFE3)
    Stack.Push(DS);
    // XOR BX,BX (1000_BFE4 / 0x1BFE4)
    BX = 0;
    // XOR DX,DX (1000_BFE6 / 0x1BFE6)
    DX = 0;
    // MOV CX,0xc5f9 (1000_BFE8 / 0x1BFE8)
    CX = 0xC5F9;
    // XOR SI,SI (1000_BFEB / 0x1BFEB)
    SI = 0;
    // MOV DS,word ptr [0xdd00] (1000_BFED / 0x1BFED)
    DS = UInt16[DS, 0xDD00];
    label_1000_BFF1_1BFF1:
    // LODSB SI (1000_BFF1 / 0x1BFF1)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AL,0x30 (1000_BFF2 / 0x1BFF2)
    // AL &= 0x30;
    AL = Alu.And8(AL, 0x30);
    // JZ 0x1000:bffc (1000_BFF4 / 0x1BFF4)
    if(ZeroFlag) {
      goto label_1000_BFFC_1BFFC;
    }
    // INC DX (1000_BFF6 / 0x1BFF6)
    DX = Alu.Inc16(DX);
    // CMP AL,0x30 (1000_BFF7 / 0x1BFF7)
    Alu.Sub8(AL, 0x30);
    // JZ 0x1000:bffc (1000_BFF9 / 0x1BFF9)
    if(ZeroFlag) {
      goto label_1000_BFFC_1BFFC;
    }
    // INC BX (1000_BFFB / 0x1BFFB)
    BX = Alu.Inc16(BX);
    label_1000_BFFC_1BFFC:
    // LOOP 0x1000:bff1 (1000_BFFC / 0x1BFFC)
    if(--CX != 0) {
      goto label_1000_BFF1_1BFF1;
    }
    // SUB DX,BX (1000_BFFE / 0x1BFFE)
    // DX -= BX;
    DX = Alu.Sub16(DX, BX);
    // XOR AX,AX (1000_C000 / 0x1C000)
    AX = 0;
    // SUB SI,0x188 (1000_C002 / 0x1C002)
    // SI -= 0x188;
    SI = Alu.Sub16(SI, 0x188);
    // INC SI (1000_C006 / 0x1C006)
    SI = Alu.Inc16(SI);
    // DIV SI (1000_C007 / 0x1C007)
    Cpu.Div16(SI);
    // MOV DX,0x64 (1000_C009 / 0x1C009)
    DX = 0x64;
    // MUL DX (1000_C00C / 0x1C00C)
    Cpu.Mul16(DX);
    // ADD AX,AX (1000_C00E / 0x1C00E)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADC DX,0x0 (1000_C010 / 0x1C010)
    DX = Alu.Adc16(DX, 0x0);
    // XCHG BX,DX (1000_C013 / 0x1C013)
    ushort tmp_1000_C013 = BX;
    BX = DX;
    DX = tmp_1000_C013;
    // XOR AX,AX (1000_C015 / 0x1C015)
    AX = 0;
    // DIV SI (1000_C017 / 0x1C017)
    Cpu.Div16(SI);
    // MOV DX,0x64 (1000_C019 / 0x1C019)
    DX = 0x64;
    // MUL DX (1000_C01C / 0x1C01C)
    Cpu.Mul16(DX);
    // ADD AX,AX (1000_C01E / 0x1C01E)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADC DX,0x0 (1000_C020 / 0x1C020)
    DX = Alu.Adc16(DX, 0x0);
    // INC DX (1000_C023 / 0x1C023)
    DX = Alu.Inc16(DX);
    // POP DS (1000_C024 / 0x1C024)
    DS = Stack.Pop();
    // MOV word ptr [0xa2],DX (1000_C025 / 0x1C025)
    UInt16[DS, 0xA2] = DX;
    // MOV word ptr [0xa4],BX (1000_C029 / 0x1C029)
    UInt16[DS, 0xA4] = BX;
    // RET  (1000_C02D / 0x1C02D)
    return NearRet();
  }
  
  public Action unknown_1000_C02E_1C02E(int gotoTarget) {
    label_1000_C02E_1C02E:
    // CALL 0x1000:bfe3 (1000_C02E / 0x1C02E)
    NearCall(cs1, 0xC031, map_func_ida_1000_BFE3_1BFE3);
    // MOV AX,[0xa0] (1000_C031 / 0x1C031)
    AX = UInt16[DS, 0xA0];
    // ADD AX,word ptr [0x1172] (1000_C034 / 0x1C034)
    // AX += UInt16[DS, 0x1172];
    AX = Alu.Add16(AX, UInt16[DS, 0x1172]);
    // SUB AX,word ptr [0x1170] (1000_C038 / 0x1C038)
    // AX -= UInt16[DS, 0x1170];
    AX = Alu.Sub16(AX, UInt16[DS, 0x1170]);
    // JNC 0x1000:c040 (1000_C03C / 0x1C03C)
    if(!CarryFlag) {
      goto label_1000_C040_1C040;
    }
    // XOR AX,AX (1000_C03E / 0x1C03E)
    AX = 0;
    label_1000_C040_1C040:
    // CMP AX,word ptr [0xa6] (1000_C040 / 0x1C040)
    Alu.Sub16(AX, UInt16[DS, 0xA6]);
    // JC 0x1000:c049 (1000_C044 / 0x1C044)
    if(CarryFlag) {
      goto label_1000_C049_1C049;
    }
    // MOV [0xa6],AX (1000_C046 / 0x1C046)
    UInt16[DS, 0xA6] = AX;
    label_1000_C049_1C049:
    // XOR AX,AX (1000_C049 / 0x1C049)
    AX = 0;
    // MOV [0xaa],AX (1000_C04B / 0x1C04B)
    UInt16[DS, 0xAA] = AX;
    // MOV [0xac],AX (1000_C04E / 0x1C04E)
    UInt16[DS, 0xAC] = AX;
    // MOV SI,0x8aa (1000_C051 / 0x1C051)
    SI = 0x8AA;
    label_1000_C054_1C054:
    // MOV AL,byte ptr [SI + 0x1a] (1000_C054 / 0x1C054)
    AL = UInt8[DS, (ushort)(SI + 0x1A)];
    // TEST byte ptr [SI + 0x3],0x20 (1000_C057 / 0x1C057)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x20);
    // JNZ 0x1000:c073 (1000_C05B / 0x1C05B)
    if(!ZeroFlag) {
      goto label_1000_C073_1C073;
    }
    // TEST byte ptr [SI + 0x10],0x80 (1000_C05D / 0x1C05D)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x10)], 0x80);
    // JZ 0x1000:c069 (1000_C061 / 0x1C061)
    if(ZeroFlag) {
      goto label_1000_C069_1C069;
    }
    // ADD word ptr [0xac],AX (1000_C063 / 0x1C063)
    // UInt16[DS, 0xAC] += AX;
    UInt16[DS, 0xAC] = Alu.Add16(UInt16[DS, 0xAC], AX);
    // JMP 0x1000:c073 (1000_C067 / 0x1C067)
    goto label_1000_C073_1C073;
    label_1000_C069_1C069:
    // TEST byte ptr [SI + 0x3],0x80 (1000_C069 / 0x1C069)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x3)], 0x80);
    // JNZ 0x1000:c073 (1000_C06D / 0x1C06D)
    if(!ZeroFlag) {
      goto label_1000_C073_1C073;
    }
    // ADD word ptr [0xaa],AX (1000_C06F / 0x1C06F)
    // UInt16[DS, 0xAA] += AX;
    UInt16[DS, 0xAA] = Alu.Add16(UInt16[DS, 0xAA], AX);
    label_1000_C073_1C073:
    // ADD SI,0x1b (1000_C073 / 0x1C073)
    // SI += 0x1B;
    SI = Alu.Add16(SI, 0x1B);
    // CMP byte ptr [SI],0x0 (1000_C076 / 0x1C076)
    Alu.Sub8(UInt8[DS, SI], 0x0);
    // JNZ 0x1000:c054 (1000_C079 / 0x1C079)
    if(!ZeroFlag) {
      goto label_1000_C054_1C054;
    }
    // RET  (1000_C07B / 0x1C07B)
    return NearRet();
  }
  
  public Action SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC07C: goto label_1000_C07C_1C07C;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C07C_1C07C:
    // PUSH word ptr [0xdbd6] (1000_C07C / 0x1C07C)
    Stack.Push(UInt16[DS, 0xDBD6]);
    // POP word ptr [0xdbda] (1000_C080 / 0x1C080)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_C084 / 0x1C084)
    return NearRet();
  }
  
  public Action SetBackBufferAsActiveFrameBuffer_1000_C085_1C085(int gotoTarget) {
    label_1000_C085_1C085:
    // PUSH word ptr [0xdc32] (1000_C085 / 0x1C085)
    Stack.Push(UInt16[DS, 0xDC32]);
    // POP word ptr [0xdbda] (1000_C089 / 0x1C089)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_C08D / 0x1C08D)
    return NearRet();
  }
  
  public Action SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E(int gotoTarget) {
    label_1000_C08E_1C08E:
    // PUSH word ptr [0xdbd8] (1000_C08E / 0x1C08E)
    Stack.Push(UInt16[DS, 0xDBD8]);
    // POP word ptr [0xdbda] (1000_C092 / 0x1C092)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_C096 / 0x1C096)
    return NearRet();
  }
  
  public Action gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097(int gotoTarget) {
    label_1000_C097_1C097:
    // CALL 0x1000:c07c (1000_C097 / 0x1C097)
    NearCall(cs1, 0xC09A, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // PUSH word ptr [0xdbd8] (1000_C09A / 0x1C09A)
    Stack.Push(UInt16[DS, 0xDBD8]);
    // PUSH word ptr [0xdbd6] (1000_C09E / 0x1C09E)
    Stack.Push(UInt16[DS, 0xDBD6]);
    // POP word ptr [0xdbd8] (1000_C0A2 / 0x1C0A2)
    UInt16[DS, 0xDBD8] = Stack.Pop();
    // CALL BP (1000_C0A6 / 0x1C0A6)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_C0A6 = (uint)(BP);
    switch(targetAddress_1000_C0A6) {
      case 0x61C : NearCall(cs1, 0xC0A8, load_VIRGIN_HNM_ida_1000_061C_1061C);
        break;
      case 0xF66 : NearCall(cs1, 0xC0A8, NoOp_1000_0F66_10F66);
        break;
      case 0xC0AD : NearCall(cs1, 0xC0A8, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
        break;
      case 0x64D : NearCall(cs1, 0xC0A8, load_CRYO_HNM_ida_1000_064D_1064D);
        break;
      case 0x658 : NearCall(cs1, 0xC0A8, load_CRYO2_HNM_ida_1000_0658_10658);
        break;
      case 0x678 : NearCall(cs1, 0xC0A8, load_PRESENT_HNM_ida_1000_0678_10678);
        break;
      case 0xCEFC : NearCall(cs1, 0xC0A8, load_IRULn_HSQ_ida_1000_CEFC_1CEFC);
        break;
      case 0x9EF : NearCall(cs1, 0xC0A8, play_CREDITS_HNM_ida_1000_09EF_109EF);
        break;
      case 0x2C1 : NearCall(cs1, 0xC0A8, unknown_1000_02C1_102C1);
        break;
      case 0x301 : NearCall(cs1, 0xC0A8, unknown_1000_0301_10301);
        break;
      case 0xD1EF : NearCall(cs1, 0xC0A8, unknown_1000_D1EF_1D1EF);
        break;
      case 0xD75A : NearCall(cs1, 0xC0A8, unknown_1000_D75A_1D75A);
        break;
      case 0x2DB1 : NearCall(cs1, 0xC0A8, unknown_1000_2DB1_12DB1);
        break;
      case 0xD717 : NearCall(cs1, 0xC0A8, unknown_1000_D717_1D717);
        break;
      case 0x2EB2 : NearCall(cs1, 0xC0A8, unknown_1000_2EB2_12EB2);
        break;
      case 0x5A56 : NearCall(cs1, 0xC0A8, unknown_1000_5A56_15A56);
        break;
      case 0xB827 : NearCall(cs1, 0xC0A8, unknown_1000_B827_1B827);
        break;
      case 0xBE1D : NearCall(cs1, 0xC0A8, unknown_1000_BE1D_1BE1D);
        break;
      case 0xAF26 : NearCall(cs1, 0xC0A8, unknown_1000_AF26_1AF26);
        break;
      case 0xB039 : NearCall(cs1, 0xC0A8, unknown_1000_B039_1B039);
        break;
      case 0xB236 : NearCall(cs1, 0xC0A8, unknown_1000_B236_1B236);
        break;
      case 0xB23F : NearCall(cs1, 0xC0A8, unknown_1000_B23F_1B23F);
        break;
      case 0xAF43 : NearCall(cs1, 0xC0A8, unknown_1000_AF43_1AF43);
        break;
      case 0x98B2 : NearCall(cs1, 0xC0A8, unknown_1000_98B2_198B2);
        break;
      case 0xED0 : NearCall(cs1, 0xC0A8, unknown_1000_0ED0_10ED0);
        break;
      case 0x28B5 : NearCall(cs1, 0xC0A8, unknown_1000_28B5_128B5);
        break;
      case 0x2DD3 : NearCall(cs1, 0xC0A8, unknown_1000_2DD3_12DD3);
        break;
      case 0x2C9A : NearCall(cs1, 0xC0A8, unknown_1000_2C9A_12C9A);
        break;
      case 0x2555 : NearCall(cs1, 0xC0A8, unknown_1000_2555_12555);
        break;
      case 0xA44 : NearCall(cs1, 0xC0A8, unknown_1000_0A44_10A44);
        break;
      case 0x26A6 : NearCall(cs1, 0xC0A8, unknown_1000_26A6_126A6);
        break;
      case 0x1797 : NearCall(cs1, 0xC0A8, unknown_1000_1797_11797);
        break;
      case 0x1A0F : NearCall(cs1, 0xC0A8, unknown_1000_1A0F_11A0F);
        break;
      case 0x401F : NearCall(cs1, 0xC0A8, unknown_1000_401F_1401F);
        break;
      case 0x4057 : NearCall(cs1, 0xC0A8, unknown_1000_4057_14057);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C0A6);
        break;
    }
    // POP word ptr [0xdbd8] (1000_C0A8 / 0x1C0A8)
    UInt16[DS, 0xDBD8] = Stack.Pop();
    // RET  (1000_C0AC / 0x1C0AC)
    return NearRet();
  }
  
  public Action ClearCurrentVideoBuffer_1000_C0AD_1C0AD(int gotoTarget) {
    label_1000_C0AD_1C0AD:
    // MOV ES,word ptr [0xdbda] (1000_C0AD / 0x1C0AD)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38d5] (1000_C0B1 / 0x1C0B1)
    // Indirect call to [0x38d5], generating possible targets from emulator records
    uint targetAddress_1000_C0B1 = (uint)(UInt16[DS, 0x38D7] * 0x10 + UInt16[DS, 0x38D5] - cs1 * 0x10);
    switch(targetAddress_1000_C0B1) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C0B1);
        break;
    }
    // RET  (1000_C0B5 / 0x1C0B5)
    return NearRet();
  }
  
  public Action unknown_1000_C0D5_1C0D5(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC0D5: goto label_1000_C0D5_1C0D5;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C0D5_1C0D5:
    // PUSH DS (1000_C0D5 / 0x1C0D5)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd8] (1000_C0D6 / 0x1C0D6)
    ES = UInt16[DS, 0xDBD8];
    // MOV DS,word ptr [0xdbd6] (1000_C0DA / 0x1C0DA)
    DS = UInt16[DS, 0xDBD6];
    // MOV BP,0xce7a (1000_C0DE / 0x1C0DE)
    BP = 0xCE7A;
    // CALLF [0x392d] (1000_C0E1 / 0x1C0E1)
    // Indirect call to [0x392d], generating possible targets from emulator records
    uint targetAddress_1000_C0E1 = (uint)(UInt16[SS, 0x392F] * 0x10 + UInt16[SS, 0x392D] - cs1 * 0x10);
    switch(targetAddress_1000_C0E1) {
      case 0x2360A : FarCall(cs1, 0xC0E6, unknown_334B_015A_3360A);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C0E1);
        break;
    }
    // POP DS (1000_C0E6 / 0x1C0E6)
    DS = Stack.Pop();
    // RET  (1000_C0E7 / 0x1C0E7)
    return NearRet();
  }
  
  public Action unknown_1000_C0E8_1C0E8(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC0E8: goto label_1000_C0E8_1C0E8;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C0E8_1C0E8:
    // MOV ES,word ptr [0xdbd8] (1000_C0E8 / 0x1C0E8)
    ES = UInt16[DS, 0xDBD8];
    // MOV BP,0xce7a (1000_C0EC / 0x1C0EC)
    BP = 0xCE7A;
    // CALLF [0x392d] (1000_C0EF / 0x1C0EF)
    // Indirect call to [0x392d], generating possible targets from emulator records
    uint targetAddress_1000_C0EF = (uint)(UInt16[DS, 0x392F] * 0x10 + UInt16[DS, 0x392D] - cs1 * 0x10);
    switch(targetAddress_1000_C0EF) {
      case 0x2360A : FarCall(cs1, 0xC0F3, unknown_334B_015A_3360A);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C0EF);
        break;
    }
    // RET  (1000_C0F3 / 0x1C0F3)
    return NearRet();
  }
  
  public Action unknown_1000_C0F4_1C0F4(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC0F4: goto label_1000_C0F4_1C0F4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C0F4_1C0F4:
    // MOV AX,[0xdbd6] (1000_C0F4 / 0x1C0F4)
    AX = UInt16[DS, 0xDBD6];
    // CMP AX,word ptr [0xdbd8] (1000_C0F7 / 0x1C0F7)
    Alu.Sub16(AX, UInt16[DS, 0xDBD8]);
    // JZ 0x1000:c101 (1000_C0FB / 0x1C0FB)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C101 / 0x1C101)
      return NearRet();
    }
    // CALLF [0x3935] (1000_C0FD / 0x1C0FD)
    // Indirect call to [0x3935], generating possible targets from emulator records
    uint targetAddress_1000_C0FD = (uint)(UInt16[DS, 0x3937] * 0x10 + UInt16[DS, 0x3935] - cs1 * 0x10);
    switch(targetAddress_1000_C0FD) {
      case 0x23610 : FarCall(cs1, 0xC101, unknown_334B_0160_33610);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C0FD);
        break;
    }
    label_1000_C101_1C101:
    // RET  (1000_C101 / 0x1C101)
    return NearRet();
  }
  
  public Action unknown_1000_C102_1C102(int gotoTarget) {
    label_1000_C102_1C102:
    // CALLF [0x3959] (1000_C102 / 0x1C102)
    // Indirect call to [0x3959], generating possible targets from emulator records
    uint targetAddress_1000_C102 = (uint)(UInt16[DS, 0x395B] * 0x10 + UInt16[DS, 0x3959] - cs1 * 0x10);
    switch(targetAddress_1000_C102) {
      case 0x2362B : FarCall(cs1, 0xC106, VgaFunc41CopyPalette2toPalette1_334B_017B_3362B);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C102);
        break;
    }
    // MOV AL,0x3a (1000_C106 / 0x1C106)
    AL = 0x3A;
    // Function call generated as ASM continues to next function entry point without return
    return transition_ida_1000_C108_1C108(0);
  }
  
  public Action transition_ida_1000_C108_1C108(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC108: goto label_1000_C108_1C108;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C108_1C108:
    // MOV byte ptr [0xdce6],0x80 (1000_C108 / 0x1C108)
    UInt8[DS, 0xDCE6] = 0x80;
    // PUSH AX (1000_C10D / 0x1C10D)
    Stack.Push(AX);
    // PUSH DX (1000_C10E / 0x1C10E)
    Stack.Push(DX);
    // CALL 0x1000:c097 (1000_C10F / 0x1C10F)
    NearCall(cs1, 0xC112, gfx_call_bp_with_front_buffer_as_screen_ida_1000_C097_1C097);
    // POP DX (1000_C112 / 0x1C112)
    DX = Stack.Pop();
    // POP AX (1000_C113 / 0x1C113)
    AX = Stack.Pop();
    // PUSH DS (1000_C114 / 0x1C114)
    Stack.Push(DS);
    // MOV SI,word ptr [0xdbde] (1000_C115 / 0x1C115)
    SI = UInt16[DS, 0xDBDE];
    // MOV ES,word ptr [0xdbd8] (1000_C119 / 0x1C119)
    ES = UInt16[DS, 0xDBD8];
    // MOV DS,word ptr [0xdbd6] (1000_C11D / 0x1C11D)
    DS = UInt16[DS, 0xDBD6];
    // MOV BP,0xce7a (1000_C121 / 0x1C121)
    BP = 0xCE7A;
    // CALLF [0x3921] (1000_C124 / 0x1C124)
    // Indirect call to [0x3921], generating possible targets from emulator records
    uint targetAddress_1000_C124 = (uint)(UInt16[SS, 0x3923] * 0x10 + UInt16[SS, 0x3921] - cs1 * 0x10);
    switch(targetAddress_1000_C124) {
      case 0x23601 : FarCall(cs1, 0xC129, unknown_334B_0151_33601);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C124);
        break;
    }
    // POP DS (1000_C129 / 0x1C129)
    DS = Stack.Pop();
    // CALL 0x1000:c4cd (1000_C12A / 0x1C12A)
    NearCall(cs1, 0xC12D, gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD);
    // CALLF [0x3935] (1000_C12D / 0x1C12D)
    // Indirect call to [0x3935], generating possible targets from emulator records
    uint targetAddress_1000_C12D = (uint)(UInt16[DS, 0x3937] * 0x10 + UInt16[DS, 0x3935] - cs1 * 0x10);
    switch(targetAddress_1000_C12D) {
      case 0x23610 : FarCall(cs1, 0xC131, unknown_334B_0160_33610);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C12D);
        break;
    }
    // MOV byte ptr [0xdce6],0x0 (1000_C131 / 0x1C131)
    UInt8[DS, 0xDCE6] = 0x0;
    // RET  (1000_C136 / 0x1C136)
    return NearRet();
  }
  
  public Action load_icons_sprites_ida_1000_C137_1C137(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC137: goto label_1000_C137_1C137;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C137_1C137:
    // XOR AX,AX (1000_C137 / 0x1C137)
    AX = 0;
    // JMP 0x1000:c13e (1000_C139 / 0x1C139)
    // Jump converted to entry function call
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action unknown_1000_C13B_1C13B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC13B: goto label_1000_C13B_1C13B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C13B_1C13B:
    // MOV AX,0x25 (1000_C13B / 0x1C13B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_0B24_10B24
    AX = 0x25;
    // Function call generated as ASM continues to next function entry point without return
    return open_sprite_sheet_ida_1000_C13E_1C13E(0);
  }
  
  public Action open_sprite_sheet_ida_1000_C13E_1C13E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC1A9: goto label_1000_C1A9_1C1A9;break;
      case 0xC13E: goto label_1000_C13E_1C13E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C13E_1C13E:
    // OR AX,AX (1000_C13E / 0x1C13E)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x1000:c1a9 (1000_C140 / 0x1C140)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_C1A9 / 0x1C1A9)
      return NearRet();
    }
    // PUSH BX (1000_C142 / 0x1C142)
    Stack.Push(BX);
    // MOV BX,AX (1000_C143 / 0x1C143)
    BX = AX;
    // XCHG word ptr [0x2784],BX (1000_C145 / 0x1C145)
    ushort tmp_1000_C145 = UInt16[DS, 0x2784];
    UInt16[DS, 0x2784] = BX;
    BX = tmp_1000_C145;
    // CMP AX,BX (1000_C149 / 0x1C149)
    Alu.Sub16(AX, BX);
    // JZ 0x1000:c1a8 (1000_C14B / 0x1C14B)
    if(ZeroFlag) {
      goto label_1000_C1A8_1C1A8;
    }
    // PUSH SI (1000_C14D / 0x1C14D)
    Stack.Push(SI);
    // PUSH DI (1000_C14E / 0x1C14E)
    Stack.Push(DI);
    // SHL BX,1 (1000_C14F / 0x1C14F)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // JS 0x1000:c15b (1000_C151 / 0x1C151)
    if(SignFlag) {
      goto label_1000_C15B_1C15B;
    }
    // MOV SI,word ptr [0xce7b] (1000_C153 / 0x1C153)
    SI = UInt16[DS, 0xCE7B];
    // MOV word ptr [BX + 0xda8c],SI (1000_C157 / 0x1C157)
    UInt16[DS, (ushort)(BX + 0xDA8C)] = SI;
    label_1000_C15B_1C15B:
    // MOV SI,AX (1000_C15B / 0x1C15B)
    SI = AX;
    // SHL SI,1 (1000_C15D / 0x1C15D)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_C15F / 0x1C15F)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // ADD SI,0xd844 (1000_C161 / 0x1C161)
    // SI += 0xD844;
    SI = Alu.Add16(SI, 0xD844);
    // LES DI,[SI] (1000_C165 / 0x1C165)
    DI = UInt16[DS, SI];
    ES = UInt16[DS, (ushort)(SI + 2)];
    // MOV BX,ES (1000_C167 / 0x1C167)
    BX = ES;
    // OR BX,BX (1000_C169 / 0x1C169)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:c177 (1000_C16B / 0x1C16B)
    if(ZeroFlag) {
      goto label_1000_C177_1C177;
    }
    // CMP DI,0x2 (1000_C16D / 0x1C16D)
    Alu.Sub16(DI, 0x2);
    // JBE 0x1000:c19e (1000_C170 / 0x1C170)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C19E_1C19E;
    }
    // CALL 0x1000:c1aa (1000_C172 / 0x1C172)
    NearCall(cs1, 0xC175, unknown_1000_C1AA_1C1AA);
    // JMP 0x1000:c19e (1000_C175 / 0x1C175)
    goto label_1000_C19E_1C19E;
    label_1000_C177_1C177:
    // PUSH CX (1000_C177 / 0x1C177)
    Stack.Push(CX);
    // PUSH DX (1000_C178 / 0x1C178)
    Stack.Push(DX);
    // PUSH BP (1000_C179 / 0x1C179)
    Stack.Push(BP);
    // PUSH SI (1000_C17A / 0x1C17A)
    Stack.Push(SI);
    // MOV SI,AX (1000_C17B / 0x1C17B)
    SI = AX;
    // CALL 0x1000:f0b9 (1000_C17D / 0x1C17D)
    NearCall(cs1, 0xC180, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // CMP word ptr ES:[DI],0x2 (1000_C180 / 0x1C180)
    Alu.Sub16(UInt16[ES, DI], 0x2);
    // JBE 0x1000:c189 (1000_C184 / 0x1C184)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C189_1C189;
    }
    // CALL 0x1000:c1aa (1000_C186 / 0x1C186)
    NearCall(cs1, 0xC189, unknown_1000_C1AA_1C1AA);
    label_1000_C189_1C189:
    // POP SI (1000_C189 / 0x1C189)
    SI = Stack.Pop();
    // MOV DI,word ptr ES:[DI] (1000_C18A / 0x1C18A)
    DI = UInt16[ES, DI];
    // SUB CX,DI (1000_C18D / 0x1C18D)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // MOV word ptr [SI],DI (1000_C18F / 0x1C18F)
    UInt16[DS, SI] = DI;
    // MOV word ptr [SI + 0x2],ES (1000_C191 / 0x1C191)
    UInt16[DS, (ushort)(SI + 0x2)] = ES;
    // MOV AX,[0x2784] (1000_C194 / 0x1C194)
    AX = UInt16[DS, 0x2784];
    // CALLF [0x3905] (1000_C197 / 0x1C197)
    // Indirect call to [0x3905], generating possible targets from emulator records
    uint targetAddress_1000_C197 = (uint)(UInt16[DS, 0x3907] * 0x10 + UInt16[DS, 0x3905] - cs1 * 0x10);
    switch(targetAddress_1000_C197) {
      case 0x235EC : FarCall(cs1, 0xC19B, VgaFunc20NoOp_334B_013C_335EC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C197);
        break;
    }
    // POP BP (1000_C19B / 0x1C19B)
    BP = Stack.Pop();
    // POP DX (1000_C19C / 0x1C19C)
    DX = Stack.Pop();
    // POP CX (1000_C19D / 0x1C19D)
    CX = Stack.Pop();
    label_1000_C19E_1C19E:
    // MOV word ptr [0xdbb0],DI (1000_C19E / 0x1C19E)
    UInt16[DS, 0xDBB0] = DI;
    // MOV word ptr [0xdbb2],ES (1000_C1A2 / 0x1C1A2)
    UInt16[DS, 0xDBB2] = ES;
    // POP DI (1000_C1A6 / 0x1C1A6)
    DI = Stack.Pop();
    // POP SI (1000_C1A7 / 0x1C1A7)
    SI = Stack.Pop();
    label_1000_C1A8_1C1A8:
    // POP BX (1000_C1A8 / 0x1C1A8)
    BX = Stack.Pop();
    label_1000_C1A9_1C1A9:
    // RET  (1000_C1A9 / 0x1C1A9)
    return NearRet();
  }
  
  public Action unknown_1000_C1AA_1C1AA(int gotoTarget) {
    label_1000_C1AA_1C1AA:
    // MOV AX,[0x2784] (1000_C1AA / 0x1C1AA)
    AX = UInt16[DS, 0x2784];
    // MOV AH,AL (1000_C1AD / 0x1C1AD)
    AH = AL;
    // XCHG byte ptr [0xdbb4],AL (1000_C1AF / 0x1C1AF)
    byte tmp_1000_C1AF = UInt8[DS, 0xDBB4];
    UInt8[DS, 0xDBB4] = AL;
    AL = tmp_1000_C1AF;
    // CMP AL,AH (1000_C1B3 / 0x1C1B3)
    Alu.Sub8(AL, AH);
    // JZ 0x1000:c1a9 (1000_C1B5 / 0x1C1B5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C1A9 / 0x1C1A9)
      return NearRet();
    }
    // MOV SI,0x2 (1000_C1B7 / 0x1C1B7)
    SI = 0x2;
    // Function call generated as ASM continues to next function entry point without return
    return hnm_apply_palette_ida_1000_C1BA_1C1BA(0);
  }
  
  public Action hnm_apply_palette_ida_1000_C1BA_1C1BA(int gotoTarget) {
    label_1000_C1BA_1C1BA:
    // PUSH CX (1000_C1BA / 0x1C1BA)
    Stack.Push(CX);
    // PUSH DX (1000_C1BB / 0x1C1BB)
    Stack.Push(DX);
    // PUSH DI (1000_C1BC / 0x1C1BC)
    Stack.Push(DI);
    label_1000_C1BD_1C1BD:
    // LODSW ES:SI (1000_C1BD / 0x1C1BD)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,0x100 (1000_C1BF / 0x1C1BF)
    Alu.Sub16(AX, 0x100);
    // JNZ 0x1000:c1c9 (1000_C1C2 / 0x1C1C2)
    if(!ZeroFlag) {
      goto label_1000_C1C9_1C1C9;
    }
    // ADD SI,0x3 (1000_C1C4 / 0x1C1C4)
    // SI += 0x3;
    SI = Alu.Add16(SI, 0x3);
    // JMP 0x1000:c1bd (1000_C1C7 / 0x1C1C7)
    goto label_1000_C1BD_1C1BD;
    label_1000_C1C9_1C1C9:
    // MOV BX,AX (1000_C1C9 / 0x1C1C9)
    BX = AX;
    // INC AX (1000_C1CB / 0x1C1CB)
    AX = Alu.Inc16(AX);
    // JZ 0x1000:c1f0 (1000_C1CC / 0x1C1CC)
    if(ZeroFlag) {
      goto label_1000_C1F0_1C1F0;
    }
    // MOV CL,BH (1000_C1CE / 0x1C1CE)
    CL = BH;
    // XOR BH,BH (1000_C1D0 / 0x1C1D0)
    BH = 0;
    // AND CX,0xff (1000_C1D2 / 0x1C1D2)
    // CX &= 0xFF;
    CX = Alu.And16(CX, 0xFF);
    // JNZ 0x1000:c1da (1000_C1D6 / 0x1C1D6)
    if(!ZeroFlag) {
      goto label_1000_C1DA_1C1DA;
    }
    // INC CH (1000_C1D8 / 0x1C1D8)
    CH = Alu.Inc8(CH);
    label_1000_C1DA_1C1DA:
    // MOV AX,BX (1000_C1DA / 0x1C1DA)
    AX = BX;
    // ADD BX,BX (1000_C1DC / 0x1C1DC)
    // BX += BX;
    BX = Alu.Add16(BX, BX);
    // ADD BX,AX (1000_C1DE / 0x1C1DE)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // MOV AX,CX (1000_C1E0 / 0x1C1E0)
    AX = CX;
    // ADD CX,CX (1000_C1E2 / 0x1C1E2)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD CX,AX (1000_C1E4 / 0x1C1E4)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // MOV DX,SI (1000_C1E6 / 0x1C1E6)
    DX = SI;
    // ADD SI,CX (1000_C1E8 / 0x1C1E8)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // CALLF [0x38bd] (1000_C1EA / 0x1C1EA)
    // Indirect call to [0x38bd], generating possible targets from emulator records
    uint targetAddress_1000_C1EA = (uint)(UInt16[DS, 0x38BF] * 0x10 + UInt16[DS, 0x38BD] - cs1 * 0x10);
    switch(targetAddress_1000_C1EA) {
      case 0x235B6 : FarCall(cs1, 0xC1EE, unknown_334B_0106_335B6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C1EA);
        break;
    }
    // JMP 0x1000:c1bd (1000_C1EE / 0x1C1EE)
    goto label_1000_C1BD_1C1BD;
    label_1000_C1F0_1C1F0:
    // POP DI (1000_C1F0 / 0x1C1F0)
    DI = Stack.Pop();
    // POP DX (1000_C1F1 / 0x1C1F1)
    DX = Stack.Pop();
    // POP CX (1000_C1F2 / 0x1C1F2)
    CX = Stack.Pop();
    // RET  (1000_C1F3 / 0x1C1F3)
    return NearRet();
  }
  
  public Action GetEsSiPointerToUnknown_1000_C1F4_1C1F4(int gotoTarget) {
    label_1000_C1F4_1C1F4:
    // PUSH BX (1000_C1F4 / 0x1C1F4)
    Stack.Push(BX);
    // LES SI,[0xdbb0] (1000_C1F5 / 0x1C1F5)
    SI = UInt16[DS, 0xDBB0];
    ES = UInt16[DS, 0xDBB2];
    // MOV BX,AX (1000_C1F9 / 0x1C1F9)
    BX = AX;
    // SHL BX,1 (1000_C1FB / 0x1C1FB)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // ADD SI,word ptr ES:[BX + SI] (1000_C1FD / 0x1C1FD)
    // SI += UInt16[ES, (ushort)(BX + SI)];
    SI = Alu.Add16(SI, UInt16[ES, (ushort)(BX + SI)]);
    // POP BX (1000_C200 / 0x1C200)
    BX = Stack.Pop();
    // RET  (1000_C201 / 0x1C201)
    return NearRet();
  }
  
  public Action unknown_1000_C202_1C202(int gotoTarget) {
    label_1000_C202_1C202:
    // PUSH AX (1000_C202 / 0x1C202)
    Stack.Push(AX);
    // PUSH SI (1000_C203 / 0x1C203)
    Stack.Push(SI);
    // CALL 0x1000:c1f4 (1000_C204 / 0x1C204)
    NearCall(cs1, 0xC207, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // LODSW ES:SI (1000_C207 / 0x1C207)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AH,0xf (1000_C209 / 0x1C209)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // SHR AX,1 (1000_C20C / 0x1C20C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB DX,AX (1000_C20E / 0x1C20E)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // LODSB ES:SI (1000_C210 / 0x1C210)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AL,1 (1000_C212 / 0x1C212)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // CBW  (1000_C214 / 0x1C214)
    AX = (ushort)((short)((sbyte)AL));
    // SUB BX,AX (1000_C215 / 0x1C215)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // POP SI (1000_C217 / 0x1C217)
    SI = Stack.Pop();
    // POP AX (1000_C218 / 0x1C218)
    AX = Stack.Pop();
    // RET  (1000_C219 / 0x1C219)
    return NearRet();
  }
  
  public Action unknown_1000_C21B_1C21B(int gotoTarget) {
    label_1000_C21B_1C21B:
    // LODSW SI (1000_C21B / 0x1C21B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,0xffff (1000_C21C / 0x1C21C)
    Alu.Sub16(AX, 0xFFFF);
    // JZ 0x1000:c26a (1000_C21F / 0x1C21F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C26A / 0x1C26A)
      return NearRet();
    }
    // MOV BX,AX (1000_C221 / 0x1C221)
    BX = AX;
    // LODSW SI (1000_C223 / 0x1C223)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_C224 / 0x1C224)
    DX = AX;
    // LODSW SI (1000_C226 / 0x1C226)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,BX (1000_C227 / 0x1C227)
    ushort tmp_1000_C227 = AX;
    AX = BX;
    BX = tmp_1000_C227;
    // PUSH SI (1000_C228 / 0x1C228)
    Stack.Push(SI);
    // CALL 0x1000:c22f (1000_C229 / 0x1C229)
    NearCall(cs1, 0xC22C, draw_sprite_ida_1000_C22F_1C22F);
    // POP SI (1000_C22C / 0x1C22C)
    SI = Stack.Pop();
    // JMP 0x1000:c21b (1000_C22D / 0x1C22D)
    goto label_1000_C21B_1C21B;
    label_1000_C26A_1C26A:
    // RET  (1000_C26A / 0x1C26A)
    return NearRet();
  }
  
  public Action draw_sprite_ida_1000_C22F_1C22F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC22F: goto label_1000_C22F_1C22F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C22F_1C22F:
    // MOV ES,word ptr [0xdbda] (1000_C22F / 0x1C22F)
    ES = UInt16[DS, 0xDBDA];
    // LDS SI,[0xdbb0] (1000_C233 / 0x1C233)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // MOV BP,AX (1000_C237 / 0x1C237)
    BP = AX;
    // AND BP,0x1ff (1000_C239 / 0x1C239)
    // BP &= 0x1FF;
    BP = Alu.And16(BP, 0x1FF);
    // SHL BP,1 (1000_C23D / 0x1C23D)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_C23F / 0x1C23F)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // MOV CX,AX (1000_C242 / 0x1C242)
    CX = AX;
    // PUSH AX (1000_C244 / 0x1C244)
    Stack.Push(AX);
    // LODSW SI (1000_C245 / 0x1C245)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND CH,0x60 (1000_C246 / 0x1C246)
    // CH &= 0x60;
    CH = Alu.And8(CH, 0x60);
    // OR AH,CH (1000_C249 / 0x1C249)
    // AH |= CH;
    AH = Alu.Or8(AH, CH);
    // MOV DI,AX (1000_C24B / 0x1C24B)
    DI = AX;
    // LODSW SI (1000_C24D / 0x1C24D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_C24E / 0x1C24E)
    CX = AX;
    // CMP byte ptr CS:[0xc21a],0x0 (1000_C250 / 0x1C250)
    Alu.Sub8(UInt8[cs1, 0xC21A], 0x0);
    // JZ 0x1000:c25d (1000_C256 / 0x1C256)
    if(ZeroFlag) {
      goto label_1000_C25D_1C25D;
    }
    // MOV CH,byte ptr CS:[0xc21a] (1000_C258 / 0x1C258)
    CH = UInt8[cs1, 0xC21A];
    label_1000_C25D_1C25D:
    // POP AX (1000_C25D / 0x1C25D)
    AX = Stack.Pop();
    // AND AX,0x1c00 (1000_C25E / 0x1C25E)
    // AX &= 0x1C00;
    AX = Alu.And16(AX, 0x1C00);
    // JNZ 0x1000:c26b (1000_C261 / 0x1C261)
    if(!ZeroFlag) {
      goto label_1000_C26B_1C26B;
    }
    // CALLF [0x38c9] (1000_C263 / 0x1C263)
    // Indirect call to [0x38c9], generating possible targets from emulator records
    uint targetAddress_1000_C263 = (uint)(UInt16[SS, 0x38CB] * 0x10 + UInt16[SS, 0x38C9] - cs1 * 0x10);
    switch(targetAddress_1000_C263) {
      case 0x235BF : FarCall(cs1, 0xC268, VgaFunc05Blit_334B_010F_335BF);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C263);
        break;
    }
    // PUSH SS (1000_C268 / 0x1C268)
    Stack.Push(SS);
    // POP DS (1000_C269 / 0x1C269)
    DS = Stack.Pop();
    label_1000_C26B_1C26B:
    // XCHG AL,AH (1000_C26B / 0x1C26B)
    byte tmp_1000_C26B = AL;
    AL = AH;
    AH = tmp_1000_C26B;
    // MOV BP,AX (1000_C26D / 0x1C26D)
    BP = AX;
    // SHR BP,1 (1000_C26F / 0x1C26F)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // MOV BP,word ptr [BP + 0x2774] (1000_C271 / 0x1C271)
    BP = UInt16[SS, (ushort)(BP + 0x2774)];
    // MOV AX,DI (1000_C275 / 0x1C275)
    AX = DI;
    // AND AX,0x1ff (1000_C277 / 0x1C277)
    // AX &= 0x1FF;
    AX = Alu.And16(AX, 0x1FF);
    // PUSH DX (1000_C27A / 0x1C27A)
    Stack.Push(DX);
    // XCHG AL,AH (1000_C27B / 0x1C27B)
    byte tmp_1000_C27B = AL;
    AL = AH;
    AH = tmp_1000_C27B;
    // XOR DX,DX (1000_C27D / 0x1C27D)
    DX = 0;
    // DIV BP (1000_C27F / 0x1C27F)
    Cpu.Div16(BP);
    // POP DX (1000_C281 / 0x1C281)
    DX = Stack.Pop();
    // PUSH AX (1000_C282 / 0x1C282)
    Stack.Push(AX);
    // MOV AX,CX (1000_C283 / 0x1C283)
    AX = CX;
    // XOR AH,AH (1000_C285 / 0x1C285)
    AH = 0;
    // PUSH DX (1000_C287 / 0x1C287)
    Stack.Push(DX);
    // XCHG AL,AH (1000_C288 / 0x1C288)
    byte tmp_1000_C288 = AL;
    AL = AH;
    AH = tmp_1000_C288;
    // XOR DX,DX (1000_C28A / 0x1C28A)
    DX = 0;
    // DIV BP (1000_C28C / 0x1C28C)
    Cpu.Div16(BP);
    // POP DX (1000_C28E / 0x1C28E)
    DX = Stack.Pop();
    // MOV CL,AL (1000_C28F / 0x1C28F)
    CL = AL;
    // POP AX (1000_C291 / 0x1C291)
    AX = Stack.Pop();
    // OR DI,DI (1000_C292 / 0x1C292)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNS 0x1000:c299 (1000_C294 / 0x1C294)
    if(!SignFlag) {
      goto label_1000_C299_1C299;
    }
    // CALL 0x1000:c2a1 (1000_C296 / 0x1C296)
    NearCall(cs1, 0xC299, unknown_1000_C2A1_1C2A1);
    label_1000_C299_1C299:
    // CALLF [0x3941] (1000_C299 / 0x1C299)
    // Indirect call to [0x3941], generating possible targets from emulator records
    uint targetAddress_1000_C299 = (uint)(UInt16[SS, 0x3943] * 0x10 + UInt16[SS, 0x3941] - cs1 * 0x10);
    switch(targetAddress_1000_C299) {
      case 0x23619 : FarCall(cs1, 0xC29E, unknown_334B_0169_33619);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C299);
        break;
    }
    // PUSH SS (1000_C29E / 0x1C29E)
    Stack.Push(SS);
    // POP DS (1000_C29F / 0x1C29F)
    DS = Stack.Pop();
    // RET  (1000_C2A0 / 0x1C2A0)
    return NearRet();
  }
  
  public Action unknown_1000_C2A1_1C2A1(int gotoTarget) {
    label_1000_C2A1_1C2A1:
    // PUSH AX (1000_C2A1 / 0x1C2A1)
    Stack.Push(AX);
    // PUSH BX (1000_C2A2 / 0x1C2A2)
    Stack.Push(BX);
    // PUSH CX (1000_C2A3 / 0x1C2A3)
    Stack.Push(CX);
    // PUSH DI (1000_C2A4 / 0x1C2A4)
    Stack.Push(DI);
    // PUSH ES (1000_C2A5 / 0x1C2A5)
    Stack.Push(ES);
    // PUSH BP (1000_C2A6 / 0x1C2A6)
    Stack.Push(BP);
    // PUSH SS (1000_C2A7 / 0x1C2A7)
    Stack.Push(SS);
    // POP ES (1000_C2A8 / 0x1C2A8)
    ES = Stack.Pop();
    // MOV BP,DI (1000_C2A9 / 0x1C2A9)
    BP = DI;
    // MOV DI,0x4c60 (1000_C2AB / 0x1C2AB)
    DI = 0x4C60;
    // AND BP,0x1ff (1000_C2AE / 0x1C2AE)
    // BP &= 0x1FF;
    BP = Alu.And16(BP, 0x1FF);
    // ADD BP,0x3 (1000_C2B2 / 0x1C2B2)
    // BP += 0x3;
    BP = Alu.Add16(BP, 0x3);
    // SHR BP,1 (1000_C2B5 / 0x1C2B5)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // SHR BP,1 (1000_C2B7 / 0x1C2B7)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // SHL BP,1 (1000_C2B9 / 0x1C2B9)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // MOV CX,word ptr [SI + -0x2] (1000_C2BB / 0x1C2BB)
    CX = UInt16[DS, (ushort)(SI - 0x2)];
    // XOR CH,CH (1000_C2BE / 0x1C2BE)
    CH = 0;
    label_1000_C2C0_1C2C0:
    // PUSH CX (1000_C2C0 / 0x1C2C0)
    Stack.Push(CX);
    // MOV BX,BP (1000_C2C1 / 0x1C2C1)
    BX = BP;
    label_1000_C2C3_1C2C3:
    // LODSB SI (1000_C2C3 / 0x1C2C3)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // TEST AL,0x80 (1000_C2C4 / 0x1C2C4)
    Alu.And8(AL, 0x80);
    // JNZ 0x1000:c2d6 (1000_C2C6 / 0x1C2C6)
    if(!ZeroFlag) {
      goto label_1000_C2D6_1C2D6;
    }
    // MOV CL,0x1 (1000_C2C8 / 0x1C2C8)
    CL = 0x1;
    // ADD CL,AL (1000_C2CA / 0x1C2CA)
    // CL += AL;
    CL = Alu.Add8(CL, AL);
    // XOR CH,CH (1000_C2CC / 0x1C2CC)
    CH = 0;
    // SUB BX,CX (1000_C2CE / 0x1C2CE)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_C2D0 / 0x1C2D0)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JNZ 0x1000:c2c3 (1000_C2D2 / 0x1C2D2)
    if(!ZeroFlag) {
      goto label_1000_C2C3_1C2C3;
    }
    // JMP 0x1000:c2e3 (1000_C2D4 / 0x1C2D4)
    goto label_1000_C2E3_1C2E3;
    label_1000_C2D6_1C2D6:
    // MOV CL,0x1 (1000_C2D6 / 0x1C2D6)
    CL = 0x1;
    // SUB CL,AL (1000_C2D8 / 0x1C2D8)
    // CL -= AL;
    CL = Alu.Sub8(CL, AL);
    // XOR CH,CH (1000_C2DA / 0x1C2DA)
    CH = 0;
    // SUB BX,CX (1000_C2DC / 0x1C2DC)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // LODSB SI (1000_C2DE / 0x1C2DE)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    while (CX-- != 0) {
      // STOSB ES:DI (1000_C2DF / 0x1C2DF)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JNZ 0x1000:c2c3 (1000_C2E1 / 0x1C2E1)
    if(!ZeroFlag) {
      goto label_1000_C2C3_1C2C3;
    }
    label_1000_C2E3_1C2E3:
    // POP CX (1000_C2E3 / 0x1C2E3)
    CX = Stack.Pop();
    // LOOP 0x1000:c2c0 (1000_C2E4 / 0x1C2E4)
    if(--CX != 0) {
      goto label_1000_C2C0_1C2C0;
    }
    // MOV SI,0x4c60 (1000_C2E6 / 0x1C2E6)
    SI = 0x4C60;
    // PUSH SS (1000_C2E9 / 0x1C2E9)
    Stack.Push(SS);
    // POP DS (1000_C2EA / 0x1C2EA)
    DS = Stack.Pop();
    // POP BP (1000_C2EB / 0x1C2EB)
    BP = Stack.Pop();
    // POP ES (1000_C2EC / 0x1C2EC)
    ES = Stack.Pop();
    // POP DI (1000_C2ED / 0x1C2ED)
    DI = Stack.Pop();
    // POP CX (1000_C2EE / 0x1C2EE)
    CX = Stack.Pop();
    // POP BX (1000_C2EF / 0x1C2EF)
    BX = Stack.Pop();
    // POP AX (1000_C2F0 / 0x1C2F0)
    AX = Stack.Pop();
    // RET  (1000_C2F1 / 0x1C2F1)
    return NearRet();
  }
  
  public Action unknown_1000_C2F2_1C2F2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC2F2: goto label_1000_C2F2_1C2F2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C2F2_1C2F2:
    // XOR AH,AH (1000_C2F2 / 0x1C2F2)
    AH = 0;
    // CALL 0x1000:c13e (1000_C2F4 / 0x1C2F4)
    NearCall(cs1, 0xC2F7, open_sprite_sheet_ida_1000_C13E_1C13E);
    // XOR AX,AX (1000_C2F7 / 0x1C2F7)
    AX = 0;
    // XOR BX,BX (1000_C2F9 / 0x1C2F9)
    BX = 0;
    // XOR DX,DX (1000_C2FB / 0x1C2FB)
    DX = 0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C2FD_1C2FD(0);
  }
  
  public Action unknown_1000_C2FD_1C2FD(int gotoTarget) {
    label_1000_C2FD_1C2FD:
    // PUSH BX (1000_C2FD / 0x1C2FD)
    Stack.Push(BX);
    // PUSH DX (1000_C2FE / 0x1C2FE)
    Stack.Push(DX);
    // CALL 0x1000:c22f (1000_C2FF / 0x1C2FF)
    NearCall(cs1, 0xC302, draw_sprite_ida_1000_C22F_1C22F);
    // POP DX (1000_C302 / 0x1C302)
    DX = Stack.Pop();
    // POP BX (1000_C303 / 0x1C303)
    BX = Stack.Pop();
    // RET  (1000_C304 / 0x1C304)
    return NearRet();
  }
  
  public Action unknown_1000_C305_1C305(int gotoTarget) {
    label_1000_C305_1C305:
    // PUSH BX (1000_C305 / 0x1C305)
    Stack.Push(BX);
    // PUSH DX (1000_C306 / 0x1C306)
    Stack.Push(DX);
    // CALL 0x1000:c30d (1000_C307 / 0x1C307)
    NearCall(cs1, 0xC30A, unknown_1000_C30D_1C30D);
    // POP DX (1000_C30A / 0x1C30A)
    DX = Stack.Pop();
    // POP BX (1000_C30B / 0x1C30B)
    BX = Stack.Pop();
    // RET  (1000_C30C / 0x1C30C)
    return NearRet();
  }
  
  public Action unknown_1000_C30D_1C30D(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC30D: goto label_1000_C30D_1C30D;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C30D_1C30D:
    // MOV ES,word ptr [0xdbda] (1000_C30D / 0x1C30D)
    ES = UInt16[DS, 0xDBDA];
    // LDS SI,[0xdbb0] (1000_C311 / 0x1C311)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // MOV BP,AX (1000_C315 / 0x1C315)
    BP = AX;
    // SHL BP,1 (1000_C317 / 0x1C317)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_C319 / 0x1C319)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // LODSW SI (1000_C31C / 0x1C31C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_C31D / 0x1C31D)
    DI = AX;
    // LODSW SI (1000_C31F / 0x1C31F)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_C320 / 0x1C320)
    AH = 0;
    // MOV CX,AX (1000_C322 / 0x1C322)
    CX = AX;
    // MOV BP,0xd834 (1000_C324 / 0x1C324)
    BP = 0xD834;
    // CALLF [0x38cd] (1000_C327 / 0x1C327)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_C327 = (uint)(UInt16[SS, 0x38CF] * 0x10 + UInt16[SS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_C327) {
      case 0x235C2 : FarCall(cs1, 0xC32C, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C327);
        break;
    }
    // PUSH SS (1000_C32C / 0x1C32C)
    Stack.Push(SS);
    // POP DS (1000_C32D / 0x1C32D)
    DS = Stack.Pop();
    // RET  (1000_C32E / 0x1C32E)
    return NearRet();
  }
  
  public Action unknown_1000_C343_1C343(int gotoTarget) {
    label_1000_C343_1C343:
    // MOV ES,word ptr [0xdbda] (1000_C343 / 0x1C343)
    ES = UInt16[DS, 0xDBDA];
    // LDS SI,[0xdbb0] (1000_C347 / 0x1C347)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // MOV BP,AX (1000_C34B / 0x1C34B)
    BP = AX;
    // SHL BP,1 (1000_C34D / 0x1C34D)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_C34F / 0x1C34F)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // LODSW SI (1000_C352 / 0x1C352)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_C353 / 0x1C353)
    DI = AX;
    // AND AH,0xf (1000_C355 / 0x1C355)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // SHR AX,1 (1000_C358 / 0x1C358)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB DX,AX (1000_C35A / 0x1C35A)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // LODSW SI (1000_C35C / 0x1C35C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AH,AH (1000_C35D / 0x1C35D)
    AH = 0;
    // MOV CX,AX (1000_C35F / 0x1C35F)
    CX = AX;
    // SHR AX,1 (1000_C361 / 0x1C361)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB BX,AX (1000_C363 / 0x1C363)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // MOV BP,0xd834 (1000_C365 / 0x1C365)
    BP = 0xD834;
    // CALLF [0x38cd] (1000_C368 / 0x1C368)
    // Indirect call to [0x38cd], generating possible targets from emulator records
    uint targetAddress_1000_C368 = (uint)(UInt16[SS, 0x38CF] * 0x10 + UInt16[SS, 0x38CD] - cs1 * 0x10);
    switch(targetAddress_1000_C368) {
      case 0x235C2 : FarCall(cs1, 0xC36D, unknown_334B_0112_335C2);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C368);
        break;
    }
    // PUSH SS (1000_C36D / 0x1C36D)
    Stack.Push(SS);
    // POP DS (1000_C36E / 0x1C36E)
    DS = Stack.Pop();
    // RET  (1000_C36F / 0x1C36F)
    return NearRet();
  }
  
  public Action unknown_1000_C370_1C370(int gotoTarget) {
    label_1000_C370_1C370:
    // PUSH DS (1000_C370 / 0x1C370)
    Stack.Push(DS);
    // PUSH DS (1000_C371 / 0x1C371)
    Stack.Push(DS);
    // PUSH AX (1000_C372 / 0x1C372)
    Stack.Push(AX);
    // PUSH SI (1000_C373 / 0x1C373)
    Stack.Push(SI);
    // CALLF [0x38d9] (1000_C374 / 0x1C374)
    // Indirect call to [0x38d9], generating possible targets from emulator records
    uint targetAddress_1000_C374 = (uint)(UInt16[DS, 0x38DB] * 0x10 + UInt16[DS, 0x38D9] - cs1 * 0x10);
    switch(targetAddress_1000_C374) {
      case 0x235CB : FarCall(cs1, 0xC378, unknown_334B_011B_335CB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C374);
        break;
    }
    // POP SI (1000_C378 / 0x1C378)
    SI = Stack.Pop();
    // POP AX (1000_C379 / 0x1C379)
    AX = Stack.Pop();
    // POP DS (1000_C37A / 0x1C37A)
    DS = Stack.Pop();
    // MOV DX,word ptr [SI] (1000_C37B / 0x1C37B)
    DX = UInt16[DS, SI];
    // PUSH DX (1000_C37D / 0x1C37D)
    Stack.Push(DX);
    // MOV BX,word ptr [SI + 0x2] (1000_C37E / 0x1C37E)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // PUSH BX (1000_C381 / 0x1C381)
    Stack.Push(BX);
    // MOV CX,word ptr [SI + 0x4] (1000_C382 / 0x1C382)
    CX = UInt16[DS, (ushort)(SI + 0x4)];
    // SUB CX,DX (1000_C385 / 0x1C385)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // PUSH CX (1000_C387 / 0x1C387)
    Stack.Push(CX);
    // MOV CX,word ptr [SI + 0x6] (1000_C388 / 0x1C388)
    CX = UInt16[DS, (ushort)(SI + 0x6)];
    // SUB CX,BX (1000_C38B / 0x1C38B)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // PUSH CX (1000_C38D / 0x1C38D)
    Stack.Push(CX);
    // LDS SI,[0xdbb0] (1000_C38E / 0x1C38E)
    SI = UInt16[DS, 0xDBB0];
    DS = UInt16[DS, 0xDBB2];
    // MOV BP,AX (1000_C392 / 0x1C392)
    BP = AX;
    // SHL BP,1 (1000_C394 / 0x1C394)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD SI,word ptr DS:[BP + SI] (1000_C396 / 0x1C396)
    // SI += UInt16[DS, (ushort)(BP + SI)];
    SI = Alu.Add16(SI, UInt16[DS, (ushort)(BP + SI)]);
    // LODSW SI (1000_C399 / 0x1C399)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_C39A / 0x1C39A)
    DI = AX;
    // AND AX,0x1ff (1000_C39C / 0x1C39C)
    // AX &= 0x1FF;
    AX = Alu.And16(AX, 0x1FF);
    // PUSH AX (1000_C39F / 0x1C39F)
    Stack.Push(AX);
    // LODSW SI (1000_C3A0 / 0x1C3A0)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_C3A1 / 0x1C3A1)
    CX = AX;
    // XOR AH,AH (1000_C3A3 / 0x1C3A3)
    AH = 0;
    // PUSH AX (1000_C3A5 / 0x1C3A5)
    Stack.Push(AX);
    // CALLF [0x38c9] (1000_C3A6 / 0x1C3A6)
    // Indirect call to [0x38c9], generating possible targets from emulator records
    uint targetAddress_1000_C3A6 = (uint)(UInt16[SS, 0x38CB] * 0x10 + UInt16[SS, 0x38C9] - cs1 * 0x10);
    switch(targetAddress_1000_C3A6) {
      case 0x235BF : FarCall(cs1, 0xC3AB, VgaFunc05Blit_334B_010F_335BF);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C3A6);
        break;
    }
    // PUSH ES (1000_C3AB / 0x1C3AB)
    Stack.Push(ES);
    // POP DS (1000_C3AC / 0x1C3AC)
    DS = Stack.Pop();
    // MOV BP,SP (1000_C3AD / 0x1C3AD)
    BP = SP;
    // MOV DX,word ptr [BP + 0xa] (1000_C3AF / 0x1C3AF)
    DX = UInt16[SS, (ushort)(BP + 0xA)];
    // MOV BX,word ptr [BP + 0x8] (1000_C3B2 / 0x1C3B2)
    BX = UInt16[SS, (ushort)(BP + 0x8)];
    // PUSH BX (1000_C3B5 / 0x1C3B5)
    Stack.Push(BX);
    // PUSH DX (1000_C3B6 / 0x1C3B6)
    Stack.Push(DX);
    // PUSH word ptr [BP + 0x0] (1000_C3B7 / 0x1C3B7)
    Stack.Push(UInt16[SS, BP]);
    // PUSH word ptr [BP + 0x2] (1000_C3BA / 0x1C3BA)
    Stack.Push(UInt16[SS, (ushort)(BP + 0x2)]);
    // PUSH BX (1000_C3BD / 0x1C3BD)
    Stack.Push(BX);
    // PUSH DX (1000_C3BE / 0x1C3BE)
    Stack.Push(DX);
    // MOV BP,SP (1000_C3BF / 0x1C3BF)
    BP = SP;
    // MOV DX,word ptr [BP + 0x12] (1000_C3C1 / 0x1C3C1)
    DX = UInt16[SS, (ushort)(BP + 0x12)];
    // SUB DX,word ptr [BP + 0x4] (1000_C3C4 / 0x1C3C4)
    // DX -= UInt16[SS, (ushort)(BP + 0x4)];
    DX = Alu.Sub16(DX, UInt16[SS, (ushort)(BP + 0x4)]);
    label_1000_C3C7_1C3C7:
    // MOV AX,word ptr [BP + 0x4] (1000_C3C7 / 0x1C3C7)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // ADD word ptr [BP + 0x8],AX (1000_C3CA / 0x1C3CA)
    // UInt16[SS, (ushort)(BP + 0x8)] += AX;
    UInt16[SS, (ushort)(BP + 0x8)] = Alu.Add16(UInt16[SS, (ushort)(BP + 0x8)], AX);
    // SUB DX,AX (1000_C3CD / 0x1C3CD)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // JNC 0x1000:c3d4 (1000_C3CF / 0x1C3CF)
    if(!CarryFlag) {
      goto label_1000_C3D4_1C3D4;
    }
    // ADD word ptr [BP + 0x4],DX (1000_C3D1 / 0x1C3D1)
    // UInt16[SS, (ushort)(BP + 0x4)] += DX;
    UInt16[SS, (ushort)(BP + 0x4)] = Alu.Add16(UInt16[SS, (ushort)(BP + 0x4)], DX);
    label_1000_C3D4_1C3D4:
    // PUSH DX (1000_C3D4 / 0x1C3D4)
    Stack.Push(DX);
    // CALLF [0x3931] (1000_C3D5 / 0x1C3D5)
    // Indirect call to [0x3931], generating possible targets from emulator records
    uint targetAddress_1000_C3D5 = (uint)(UInt16[SS, 0x3933] * 0x10 + UInt16[SS, 0x3931] - cs1 * 0x10);
    switch(targetAddress_1000_C3D5) {
      case 0x2360D : FarCall(cs1, 0xC3DA, unknown_334B_015D_3360D);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C3D5);
        break;
    }
    // POP DX (1000_C3DA / 0x1C3DA)
    DX = Stack.Pop();
    // CMP DX,0x0 (1000_C3DB / 0x1C3DB)
    Alu.Sub16(DX, 0x0);
    // JG 0x1000:c3c7 (1000_C3DE / 0x1C3DE)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_C3C7_1C3C7;
    }
    // MOV AX,word ptr [BP + 0x12] (1000_C3E0 / 0x1C3E0)
    AX = UInt16[SS, (ushort)(BP + 0x12)];
    // MOV word ptr [BP + 0x4],AX (1000_C3E3 / 0x1C3E3)
    UInt16[SS, (ushort)(BP + 0x4)] = AX;
    // MOV AX,word ptr [BP + 0x0] (1000_C3E6 / 0x1C3E6)
    AX = UInt16[SS, BP];
    // MOV word ptr [BP + 0x8],AX (1000_C3E9 / 0x1C3E9)
    UInt16[SS, (ushort)(BP + 0x8)] = AX;
    // MOV BX,word ptr [BP + 0x10] (1000_C3EC / 0x1C3EC)
    BX = UInt16[SS, (ushort)(BP + 0x10)];
    // SUB BX,word ptr [BP + 0x6] (1000_C3EF / 0x1C3EF)
    // BX -= UInt16[SS, (ushort)(BP + 0x6)];
    BX = Alu.Sub16(BX, UInt16[SS, (ushort)(BP + 0x6)]);
    // JZ 0x1000:c40d (1000_C3F2 / 0x1C3F2)
    if(ZeroFlag) {
      goto label_1000_C40D_1C40D;
    }
    label_1000_C3F4_1C3F4:
    // MOV AX,word ptr [BP + 0x6] (1000_C3F4 / 0x1C3F4)
    AX = UInt16[SS, (ushort)(BP + 0x6)];
    // ADD word ptr [BP + 0xa],AX (1000_C3F7 / 0x1C3F7)
    // UInt16[SS, (ushort)(BP + 0xA)] += AX;
    UInt16[SS, (ushort)(BP + 0xA)] = Alu.Add16(UInt16[SS, (ushort)(BP + 0xA)], AX);
    // SUB BX,AX (1000_C3FA / 0x1C3FA)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // JNC 0x1000:c401 (1000_C3FC / 0x1C3FC)
    if(!CarryFlag) {
      goto label_1000_C401_1C401;
    }
    // ADD word ptr [BP + 0x6],BX (1000_C3FE / 0x1C3FE)
    // UInt16[SS, (ushort)(BP + 0x6)] += BX;
    UInt16[SS, (ushort)(BP + 0x6)] = Alu.Add16(UInt16[SS, (ushort)(BP + 0x6)], BX);
    label_1000_C401_1C401:
    // PUSH BX (1000_C401 / 0x1C401)
    Stack.Push(BX);
    // CALLF [0x3931] (1000_C402 / 0x1C402)
    // Indirect call to [0x3931], generating possible targets from emulator records
    uint targetAddress_1000_C402 = (uint)(UInt16[SS, 0x3933] * 0x10 + UInt16[SS, 0x3931] - cs1 * 0x10);
    switch(targetAddress_1000_C402) {
      case 0x2360D : FarCall(cs1, 0xC407, unknown_334B_015D_3360D);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C402);
        break;
    }
    // POP BX (1000_C407 / 0x1C407)
    BX = Stack.Pop();
    // CMP BX,0x0 (1000_C408 / 0x1C408)
    Alu.Sub16(BX, 0x0);
    // JG 0x1000:c3f4 (1000_C40B / 0x1C40B)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_C3F4_1C3F4;
    }
    label_1000_C40D_1C40D:
    // ADD SP,0x18 (1000_C40D / 0x1C40D)
    // SP += 0x18;
    SP = Alu.Add16(SP, 0x18);
    // POP DS (1000_C410 / 0x1C410)
    DS = Stack.Pop();
    // RET  (1000_C411 / 0x1C411)
    return NearRet();
  }
  
  public Action unknown_1000_C412_1C412(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC412: goto label_1000_C412_1C412;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C412_1C412:
    // PUSH DS (1000_C412 / 0x1C412)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbde] (1000_C413 / 0x1C413)
    ES = UInt16[DS, 0xDBDE];
    // MOV DS,word ptr [0xdbda] (1000_C417 / 0x1C417)
    DS = UInt16[DS, 0xDBDA];
    // CALLF [0x38e1] (1000_C41B / 0x1C41B)
    // Indirect call to [0x38e1], generating possible targets from emulator records
    uint targetAddress_1000_C41B = (uint)(UInt16[SS, 0x38E3] * 0x10 + UInt16[SS, 0x38E1] - cs1 * 0x10);
    switch(targetAddress_1000_C41B) {
      case 0x235D1 : FarCall(cs1, 0xC420, VgaFunc11MemcpyDSToESFor64000_334B_0121_335D1);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C41B);
        break;
    }
    // POP DS (1000_C420 / 0x1C420)
    DS = Stack.Pop();
    // RET  (1000_C421 / 0x1C421)
    return NearRet();
  }
  
  public Action unknown_1000_C432_1C432(int gotoTarget) {
    label_1000_C432_1C432:
    // MOV SI,0x1470 (1000_C432 / 0x1C432)
    SI = 0x1470;
    // MOV ES,word ptr [0xdbda] (1000_C435 / 0x1C435)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38d9] (1000_C439 / 0x1C439)
    // Indirect call to [0x38d9], generating possible targets from emulator records
    uint targetAddress_1000_C439 = (uint)(UInt16[DS, 0x38DB] * 0x10 + UInt16[DS, 0x38D9] - cs1 * 0x10);
    switch(targetAddress_1000_C439) {
      case 0x235CB : FarCall(cs1, 0xC43D, unknown_334B_011B_335CB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C439);
        break;
    }
    // RET  (1000_C43D / 0x1C43D)
    return NearRet();
  }
  
  public Action unknown_1000_C43E_1C43E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC43E: goto label_1000_C43E_1C43E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C43E_1C43E:
    // MOV SI,0x1470 (1000_C43E / 0x1C43E)
    SI = 0x1470;
    // JMP 0x1000:c446 (1000_C441 / 0x1C441)
    // Jump converted to entry function call
    return unknown_1000_C446_1C446(0);
  }
  
  public Action unknown_1000_C443_1C443(int gotoTarget) {
    label_1000_C443_1C443:
    // MOV SI,0xd834 (1000_C443 / 0x1C443)
    SI = 0xD834;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C446_1C446(0);
  }
  
  public Action unknown_1000_C446_1C446(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC446: goto label_1000_C446_1C446;break;
      case 0xC449: goto label_1000_C449_1C449;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C446_1C446:
    // MOV AX,[0xdbde] (1000_C446 / 0x1C446)
    AX = UInt16[DS, 0xDBDE];
    label_1000_C449_1C449:
    // PUSH CX (1000_C449 / 0x1C449)
    Stack.Push(CX);
    // MOV CX,AX (1000_C44A / 0x1C44A)
    CX = AX;
    // MOV DX,word ptr [SI] (1000_C44C / 0x1C44C)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C44E / 0x1C44E)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_C451 / 0x1C451)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_C454 / 0x1C454)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // SUB BP,DX (1000_C457 / 0x1C457)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x1000:c46d (1000_C459 / 0x1C459)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C46D_1C46D;
    }
    // SUB AX,BX (1000_C45B / 0x1C45B)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JBE 0x1000:c46d (1000_C45D / 0x1C45D)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C46D_1C46D;
    }
    // MOV ES,word ptr [0xdbd6] (1000_C45F / 0x1C45F)
    ES = UInt16[DS, 0xDBD6];
    // PUSH SI (1000_C463 / 0x1C463)
    Stack.Push(SI);
    // PUSH DS (1000_C464 / 0x1C464)
    Stack.Push(DS);
    // MOV SI,CX (1000_C465 / 0x1C465)
    SI = CX;
    // CALLF [0x38ed] (1000_C467 / 0x1C467)
    // Indirect call to [0x38ed], generating possible targets from emulator records
    uint targetAddress_1000_C467 = (uint)(UInt16[DS, 0x38EF] * 0x10 + UInt16[DS, 0x38ED] - cs1 * 0x10);
    switch(targetAddress_1000_C467) {
      case 0x235DA : FarCall(cs1, 0xC46B, VgaFunc14CopySquareOfPixelsSiIsSourceSegment_334B_012A_335DA);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C467);
        break;
    }
    // POP DS (1000_C46B / 0x1C46B)
    DS = Stack.Pop();
    // POP SI (1000_C46C / 0x1C46C)
    SI = Stack.Pop();
    label_1000_C46D_1C46D:
    // POP CX (1000_C46D / 0x1C46D)
    CX = Stack.Pop();
    // RET  (1000_C46E / 0x1C46E)
    return NearRet();
  }
  
  public Action unknown_1000_C46F_1C46F(int gotoTarget) {
    label_1000_C46F_1C46F:
    // MOV AX,[0xdc32] (1000_C46F / 0x1C46F)
    AX = UInt16[DS, 0xDC32];
    // JMP 0x1000:c449 (1000_C472 / 0x1C472)
    // Jump converted to non entry function call
    return unknown_1000_C446_1C446(0x1C449 - cs1 * 0x10);
  }
  
  public Action unknown_1000_C474_1C474(int gotoTarget) {
    label_1000_C474_1C474:
    // MOV SI,0x1470 (1000_C474 / 0x1C474)
    SI = 0x1470;
    // Function call generated as ASM continues to next function entry point without return
    return gfx_copy_rect_at_si_ida_1000_C477_1C477(0);
  }
  
  public Action gfx_copy_rect_at_si_ida_1000_C477_1C477(int gotoTarget) {
    label_1000_C477_1C477:
    // MOV DX,word ptr [SI] (1000_C477 / 0x1C477)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C479 / 0x1C479)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_C47C / 0x1C47C)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_C47F / 0x1C47F)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // SUB BP,DX (1000_C482 / 0x1C482)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x1000:c499 (1000_C484 / 0x1C484)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C499 / 0x1C499)
      return NearRet();
    }
    // SUB AX,BX (1000_C486 / 0x1C486)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JBE 0x1000:c499 (1000_C488 / 0x1C488)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C499 / 0x1C499)
      return NearRet();
    }
    // MOV ES,word ptr [0xdbde] (1000_C48A / 0x1C48A)
    ES = UInt16[DS, 0xDBDE];
    // PUSH DS (1000_C48E / 0x1C48E)
    Stack.Push(DS);
    // MOV DS,word ptr [0xdbd6] (1000_C48F / 0x1C48F)
    DS = UInt16[DS, 0xDBD6];
    // CALLF [0x38e5] (1000_C493 / 0x1C493)
    // Indirect call to [0x38e5], generating possible targets from emulator records
    uint targetAddress_1000_C493 = (uint)(UInt16[SS, 0x38E7] * 0x10 + UInt16[SS, 0x38E5] - cs1 * 0x10);
    switch(targetAddress_1000_C493) {
      case 0x235D4 : FarCall(cs1, 0xC498, VgaFunc12CopyRectangle_334B_0124_335D4);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C493);
        break;
    }
    // POP DS (1000_C498 / 0x1C498)
    DS = Stack.Pop();
    label_1000_C499_1C499:
    // RET  (1000_C499 / 0x1C499)
    return NearRet();
  }
  
  public Action gfx_copy_framebuffer_to_screen_ida_1000_C49A_1C49A(int gotoTarget) {
    label_1000_C49A_1C49A:
    // PUSH DS (1000_C49A / 0x1C49A)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd6] (1000_C49B / 0x1C49B)
    ES = UInt16[DS, 0xDBD6];
    // MOV DS,word ptr [0xdbd8] (1000_C49F / 0x1C49F)
    DS = UInt16[DS, 0xDBD8];
    // CALLF [0x38f1] (1000_C4A3 / 0x1C4A3)
    // Indirect call to [0x38f1], generating possible targets from emulator records
    uint targetAddress_1000_C4A3 = (uint)(UInt16[SS, 0x38F3] * 0x10 + UInt16[SS, 0x38F1] - cs1 * 0x10);
    switch(targetAddress_1000_C4A3) {
      case 0x235DD : FarCall(cs1, 0xC4A8, VgaFunc15MemcpyDSToESFor64000_334B_012D_335DD);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C4A3);
        break;
    }
    // POP DS (1000_C4A8 / 0x1C4A8)
    DS = Stack.Pop();
    // RET  (1000_C4A9 / 0x1C4A9)
    return NearRet();
  }
  
  public Action gfx_copy_rect_to_screen_ida_1000_C4AA_1C4AA(int gotoTarget) {
    label_1000_C4AA_1C4AA:
    // MOV DX,word ptr [SI] (1000_C4AA / 0x1C4AA)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C4AC / 0x1C4AC)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_C4AF / 0x1C4AF)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_C4B2 / 0x1C4B2)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // SUB BP,DX (1000_C4B5 / 0x1C4B5)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x1000:c4cc (1000_C4B7 / 0x1C4B7)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C4CC / 0x1C4CC)
      return NearRet();
    }
    // SUB AX,BX (1000_C4B9 / 0x1C4B9)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JBE 0x1000:c4cc (1000_C4BB / 0x1C4BB)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C4CC / 0x1C4CC)
      return NearRet();
    }
    // PUSH DS (1000_C4BD / 0x1C4BD)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd6] (1000_C4BE / 0x1C4BE)
    ES = UInt16[DS, 0xDBD6];
    // MOV DS,word ptr [0xdbd8] (1000_C4C2 / 0x1C4C2)
    DS = UInt16[DS, 0xDBD8];
    // CALLF [0x38f5] (1000_C4C6 / 0x1C4C6)
    // Indirect call to [0x38f5], generating possible targets from emulator records
    uint targetAddress_1000_C4C6 = (uint)(UInt16[SS, 0x38F7] * 0x10 + UInt16[SS, 0x38F5] - cs1 * 0x10);
    switch(targetAddress_1000_C4C6) {
      case 0x235E0 : FarCall(cs1, 0xC4CB, VgaFunc16CopySquareOfPixels_334B_0130_335E0);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C4C6);
        break;
    }
    // POP DS (1000_C4CB / 0x1C4CB)
    DS = Stack.Pop();
    label_1000_C4CC_1C4CC:
    // RET  (1000_C4CC / 0x1C4CC)
    return NearRet();
  }
  
  public Action gfx_copy_framebuf_to_screen_ida_1000_C4CD_1C4CD(int gotoTarget) {
    label_1000_C4CD_1C4CD:
    // PUSH DS (1000_C4CD / 0x1C4CD)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd8] (1000_C4CE / 0x1C4CE)
    ES = UInt16[DS, 0xDBD8];
    // MOV DS,word ptr [0xdbd6] (1000_C4D2 / 0x1C4D2)
    DS = UInt16[DS, 0xDBD6];
    // CALLF [0x38f1] (1000_C4D6 / 0x1C4D6)
    // Indirect call to [0x38f1], generating possible targets from emulator records
    uint targetAddress_1000_C4D6 = (uint)(UInt16[SS, 0x38F3] * 0x10 + UInt16[SS, 0x38F1] - cs1 * 0x10);
    switch(targetAddress_1000_C4D6) {
      case 0x235DD : FarCall(cs1, 0xC4DB, VgaFunc15MemcpyDSToESFor64000_334B_012D_335DD);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C4D6);
        break;
    }
    // POP DS (1000_C4DB / 0x1C4DB)
    DS = Stack.Pop();
    // RET  (1000_C4DC / 0x1C4DC)
    return NearRet();
  }
  
  public Action unknown_1000_C4DD_1C4DD(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC4DD: goto label_1000_C4DD_1C4DD;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C4DD_1C4DD:
    // MOV AX,[0xdc38] (1000_C4DD / 0x1C4DD)
    AX = UInt16[DS, 0xDC38];
    // CMP AX,0x98 (1000_C4E0 / 0x1C4E0)
    Alu.Sub16(AX, 0x98);
    // JNC 0x1000:c4e8 (1000_C4E3 / 0x1C4E3)
    if(!CarryFlag) {
      goto label_1000_C4E8_1C4E8;
    }
    // CALL 0x1000:dbb2 (1000_C4E5 / 0x1C4E5)
    NearCall(cs1, 0xC4E8, call_restore_cursor_ida_1000_DBB2_1DBB2);
    label_1000_C4E8_1C4E8:
    // MOV SI,0x1470 (1000_C4E8 / 0x1C4E8)
    SI = 0x1470;
    // JMP 0x1000:c4f0 (1000_C4EB / 0x1C4EB)
    // Jump converted to entry function call
    return rect_at_si_to_regs_ida_1000_C4F0_1C4F0(0);
  }
  
  public Action unknown_1000_C4ED_1C4ED(int gotoTarget) {
    label_1000_C4ED_1C4ED:
    // MOV SI,0xd834 (1000_C4ED / 0x1C4ED)
    SI = 0xD834;
    // Function call generated as ASM continues to next function entry point without return
    return rect_at_si_to_regs_ida_1000_C4F0_1C4F0(0);
  }
  
  public Action rect_at_si_to_regs_ida_1000_C4F0_1C4F0(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC4F0: goto label_1000_C4F0_1C4F0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C4F0_1C4F0:
    // MOV DX,word ptr [SI] (1000_C4F0 / 0x1C4F0)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C4F2 / 0x1C4F2)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_C4F5 / 0x1C4F5)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_C4F8 / 0x1C4F8)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C4FB_1C4FB(0);
  }
  
  public Action unknown_1000_C4FB_1C4FB(int gotoTarget) {
    label_1000_C4FB_1C4FB:
    // CMP byte ptr [0x227d],0x0 (1000_C4FB / 0x1C4FB)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:c51e (1000_C500 / 0x1C500)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_C51E_1C51E(0);
    }
    // CMP AX,0x89 (1000_C502 / 0x1C502)
    Alu.Sub16(AX, 0x89);
    // JL 0x1000:c51e (1000_C505 / 0x1C505)
    if(SignFlag != OverflowFlag) {
      // Jump converted to entry function call
      return unknown_1000_C51E_1C51E(0);
    }
    // CMP BP,0x7e (1000_C507 / 0x1C507)
    Alu.Sub16(BP, 0x7E);
    // JL 0x1000:c51e (1000_C50B / 0x1C50B)
    if(SignFlag != OverflowFlag) {
      // Jump converted to entry function call
      return unknown_1000_C51E_1C51E(0);
    }
    // CMP DX,0xc2 (1000_C50D / 0x1C50D)
    Alu.Sub16(DX, 0xC2);
    // JGE 0x1000:c51e (1000_C511 / 0x1C511)
    if(SignFlag == OverflowFlag) {
      // Jump converted to entry function call
      return unknown_1000_C51E_1C51E(0);
    }
    // PUSH AX (1000_C513 / 0x1C513)
    Stack.Push(AX);
    // PUSH BX (1000_C514 / 0x1C514)
    Stack.Push(BX);
    // PUSH DX (1000_C515 / 0x1C515)
    Stack.Push(DX);
    // PUSH BP (1000_C516 / 0x1C516)
    Stack.Push(BP);
    // CALL 0x1000:1797 (1000_C517 / 0x1C517)
    NearCall(cs1, 0xC51A, unknown_1000_1797_11797);
    // POP BP (1000_C51A / 0x1C51A)
    BP = Stack.Pop();
    // POP DX (1000_C51B / 0x1C51B)
    DX = Stack.Pop();
    // POP BX (1000_C51C / 0x1C51C)
    BX = Stack.Pop();
    // POP AX (1000_C51D / 0x1C51D)
    AX = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C51E_1C51E(0);
  }
  
  public Action unknown_1000_C51E_1C51E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC526: goto label_1000_C526_1C526;break;
      case 0xC51E: goto label_1000_C51E_1C51E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C51E_1C51E:
    // SUB BP,DX (1000_C51E / 0x1C51E)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x1000:c53d (1000_C520 / 0x1C520)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C53D / 0x1C53D)
      return NearRet();
    }
    // SUB AX,BX (1000_C522 / 0x1C522)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JBE 0x1000:c53d (1000_C524 / 0x1C524)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C53D / 0x1C53D)
      return NearRet();
    }
    label_1000_C526_1C526:
    // CMP word ptr [0x2570],0x1ad6 (1000_C526 / 0x1C526)
    Alu.Sub16(UInt16[DS, 0x2570], 0x1AD6);
    // JZ 0x1000:c53d (1000_C52C / 0x1C52C)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C53D / 0x1C53D)
      return NearRet();
    }
    // PUSH DS (1000_C52E / 0x1C52E)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd8] (1000_C52F / 0x1C52F)
    ES = UInt16[DS, 0xDBD8];
    // MOV DS,word ptr [0xdbd6] (1000_C533 / 0x1C533)
    DS = UInt16[DS, 0xDBD6];
    // CALLF [0x38f5] (1000_C537 / 0x1C537)
    // Indirect call to [0x38f5], generating possible targets from emulator records
    uint targetAddress_1000_C537 = (uint)(UInt16[SS, 0x38F7] * 0x10 + UInt16[SS, 0x38F5] - cs1 * 0x10);
    switch(targetAddress_1000_C537) {
      case 0x235E0 : FarCall(cs1, 0xC53C, VgaFunc16CopySquareOfPixels_334B_0130_335E0);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C537);
        break;
    }
    // POP DS (1000_C53C / 0x1C53C)
    DS = Stack.Pop();
    label_1000_C53D_1C53D:
    // RET  (1000_C53D / 0x1C53D)
    return NearRet();
  }
  
  public Action unknown_1000_C53E_1C53E(int gotoTarget) {
    label_1000_C53E_1C53E:
    // MOV SI,0x276a (1000_C53E / 0x1C53E)
    SI = 0x276A;
    // MOV BP,word ptr [0x2772] (1000_C541 / 0x1C541)
    BP = UInt16[DS, 0x2772];
    // MOV AL,[0xdbe4] (1000_C545 / 0x1C545)
    AL = UInt8[DS, 0xDBE4];
    // MOV ES,word ptr [0xdbda] (1000_C548 / 0x1C548)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x3901] (1000_C54C / 0x1C54C)
    // Indirect call to [0x3901], generating possible targets from emulator records
    uint targetAddress_1000_C54C = (uint)(UInt16[DS, 0x3903] * 0x10 + UInt16[DS, 0x3901] - cs1 * 0x10);
    switch(targetAddress_1000_C54C) {
      case 0x235E9 : FarCall(cs1, 0xC550, unknown_334B_0139_335E9);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C54C);
        break;
    }
    // RET  (1000_C550 / 0x1C550)
    return NearRet();
  }
  
  public Action unknown_1000_C551_1C551(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC551: goto label_1000_C551_1C551;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C551_1C551:
    // LODSW SI (1000_C551 / 0x1C551)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_C552 / 0x1C552)
    DX = AX;
    // LODSW SI (1000_C554 / 0x1C554)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_C555 / 0x1C555)
    BX = AX;
    // LODSW SI (1000_C557 / 0x1C557)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_C558 / 0x1C558)
    DI = AX;
    // DEC DI (1000_C55A / 0x1C55A)
    DI = Alu.Dec16(DI);
    // LODSW SI (1000_C55B / 0x1C55B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_C55C / 0x1C55C)
    CX = AX;
    // DEC CX (1000_C55E / 0x1C55E)
    CX = Alu.Dec16(CX);
    // LODSB SI (1000_C55F / 0x1C55F)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_C560_1C560(0);
  }
  
  public Action unknown_1000_C560_1C560(int gotoTarget) {
    label_1000_C560_1C560:
    // MOV [0xdbe4],AL (1000_C560 / 0x1C560)
    UInt8[DS, 0xDBE4] = AL;
    // PUSH BX (1000_C563 / 0x1C563)
    Stack.Push(BX);
    // PUSH CX (1000_C564 / 0x1C564)
    Stack.Push(CX);
    // PUSH DX (1000_C565 / 0x1C565)
    Stack.Push(DX);
    // PUSH DI (1000_C566 / 0x1C566)
    Stack.Push(DI);
    // MOV CX,BX (1000_C567 / 0x1C567)
    CX = BX;
    // CALL 0x1000:c53e (1000_C569 / 0x1C569)
    NearCall(cs1, 0xC56C, unknown_1000_C53E_1C53E);
    // MOV BP,SP (1000_C56C / 0x1C56C)
    BP = SP;
    // MOV CX,word ptr [BP + 0x4] (1000_C56E / 0x1C56E)
    CX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV BX,CX (1000_C571 / 0x1C571)
    BX = CX;
    // CALL 0x1000:c53e (1000_C573 / 0x1C573)
    NearCall(cs1, 0xC576, unknown_1000_C53E_1C53E);
    // MOV BP,SP (1000_C576 / 0x1C576)
    BP = SP;
    // MOV DI,DX (1000_C578 / 0x1C578)
    DI = DX;
    // MOV BX,word ptr [BP + 0x6] (1000_C57A / 0x1C57A)
    BX = UInt16[SS, (ushort)(BP + 0x6)];
    // CALL 0x1000:c53e (1000_C57D / 0x1C57D)
    NearCall(cs1, 0xC580, unknown_1000_C53E_1C53E);
    // POP DI (1000_C580 / 0x1C580)
    DI = Stack.Pop();
    // MOV DX,DI (1000_C581 / 0x1C581)
    DX = DI;
    // CALL 0x1000:c53e (1000_C583 / 0x1C583)
    NearCall(cs1, 0xC586, unknown_1000_C53E_1C53E);
    // POP DX (1000_C586 / 0x1C586)
    DX = Stack.Pop();
    // POP CX (1000_C587 / 0x1C587)
    CX = Stack.Pop();
    // POP BX (1000_C588 / 0x1C588)
    BX = Stack.Pop();
    // RET  (1000_C589 / 0x1C589)
    return NearRet();
  }
  
  public Action unknown_1000_C58A_1C58A(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC58A: goto label_1000_C58A_1C58A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C58A_1C58A:
    // CALL 0x1000:c13b (1000_C58A / 0x1C58A)
    NearCall(cs1, 0xC58D, unknown_1000_C13B_1C13B);
    // MOV SI,0x3cbe (1000_C58D / 0x1C58D)
    SI = 0x3CBE;
    // LODSW SI (1000_C590 / 0x1C590)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_C591 / 0x1C591)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:c5ce (1000_C593 / 0x1C593)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C5CE / 0x1C5CE)
      return NearRet();
    }
    // MOV AH,0x11 (1000_C595 / 0x1C595)
    AH = 0x11;
    // MUL AH (1000_C597 / 0x1C597)
    Cpu.Mul8(AH);
    // ADD SI,AX (1000_C599 / 0x1C599)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // CMP DI,SI (1000_C59B / 0x1C59B)
    Alu.Sub16(DI, SI);
    // JNC 0x1000:c5ce (1000_C59D / 0x1C59D)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_C5CE / 0x1C5CE)
      return NearRet();
    }
    // OR byte ptr [DI + 0xc],0x80 (1000_C59F / 0x1C59F)
    // UInt8[DS, (ushort)(DI + 0xC)] |= 0x80;
    UInt8[DS, (ushort)(DI + 0xC)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xC)], 0x80);
    // PUSH SI (1000_C5A3 / 0x1C5A3)
    Stack.Push(SI);
    // PUSH DI (1000_C5A4 / 0x1C5A4)
    Stack.Push(DI);
    // MOV SI,DI (1000_C5A5 / 0x1C5A5)
    SI = DI;
    // CALL 0x1000:c6ad (1000_C5A7 / 0x1C5A7)
    NearCall(cs1, 0xC5AA, unknown_1000_C6AD_1C6AD);
    // POP DI (1000_C5AA / 0x1C5AA)
    DI = Stack.Pop();
    // POP CX (1000_C5AB / 0x1C5AB)
    CX = Stack.Pop();
    // PUSH DI (1000_C5AC / 0x1C5AC)
    Stack.Push(DI);
    // LEA SI,[DI + 0x11] (1000_C5AD / 0x1C5AD)
    SI = (ushort)(DI + 0x11);
    // SUB CX,SI (1000_C5B0 / 0x1C5B0)
    // CX -= SI;
    CX = Alu.Sub16(CX, SI);
    // JZ 0x1000:c5b8 (1000_C5B2 / 0x1C5B2)
    if(ZeroFlag) {
      goto label_1000_C5B8_1C5B8;
    }
    // PUSH DS (1000_C5B4 / 0x1C5B4)
    Stack.Push(DS);
    // POP ES (1000_C5B5 / 0x1C5B5)
    ES = Stack.Pop();
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_C5B6 / 0x1C5B6)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    label_1000_C5B8_1C5B8:
    // DEC word ptr [0x3cbe] (1000_C5B8 / 0x1C5B8)
    UInt16[DS, 0x3CBE] = Alu.Dec16(UInt16[DS, 0x3CBE]);
    // POP DI (1000_C5BC / 0x1C5BC)
    DI = Stack.Pop();
    // MOV SI,0x4752 (1000_C5BD / 0x1C5BD)
    SI = 0x4752;
    // MOV CX,0x2 (1000_C5C0 / 0x1C5C0)
    CX = 0x2;
    label_1000_C5C3_1C5C3:
    // LODSW SI (1000_C5C3 / 0x1C5C3)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,DI (1000_C5C4 / 0x1C5C4)
    Alu.Sub16(AX, DI);
    // JC 0x1000:c5cc (1000_C5C6 / 0x1C5C6)
    if(CarryFlag) {
      goto label_1000_C5CC_1C5CC;
    }
    // SUB word ptr [SI + -0x2],0x11 (1000_C5C8 / 0x1C5C8)
    // UInt16[DS, (ushort)(SI - 0x2)] -= 0x11;
    UInt16[DS, (ushort)(SI - 0x2)] = Alu.Sub16(UInt16[DS, (ushort)(SI - 0x2)], 0x11);
    label_1000_C5CC_1C5CC:
    // LOOP 0x1000:c5c3 (1000_C5CC / 0x1C5CC)
    if(--CX != 0) {
      goto label_1000_C5C3_1C5C3;
    }
    label_1000_C5CE_1C5CE:
    // RET  (1000_C5CE / 0x1C5CE)
    return NearRet();
  }
  
  public Action unknown_1000_C5CF_1C5CF(int gotoTarget) {
    label_1000_C5CF_1C5CF:
    // XOR AH,AH (1000_C5CF / 0x1C5CF)
    AH = 0;
    // MOV AL,byte ptr [BP + 0x0] (1000_C5D1 / 0x1C5D1)
    AL = UInt8[SS, BP];
    // CMP byte ptr [BP + 0x3],0x0 (1000_C5D4 / 0x1C5D4)
    Alu.Sub8(UInt8[SS, (ushort)(BP + 0x3)], 0x0);
    // JZ 0x1000:c60b (1000_C5D8 / 0x1C5D8)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_C60B_1C60B(0);
    }
    // PUSH BP (1000_C5DA / 0x1C5DA)
    Stack.Push(BP);
    // CALL 0x1000:c60b (1000_C5DB / 0x1C5DB)
    NearCall(cs1, 0xC5DE, unknown_1000_C60B_1C60B);
    // POP BP (1000_C5DE / 0x1C5DE)
    BP = Stack.Pop();
    // MOV word ptr [DI + 0xf],BP (1000_C5DF / 0x1C5DF)
    UInt16[DS, (ushort)(DI + 0xF)] = BP;
    // PUSH SI (1000_C5E2 / 0x1C5E2)
    Stack.Push(SI);
    // MOV SI,BP (1000_C5E3 / 0x1C5E3)
    SI = BP;
    // MOV BX,0xffff (1000_C5E5 / 0x1C5E5)
    BX = 0xFFFF;
    label_1000_C5E8_1C5E8:
    // INC BX (1000_C5E8 / 0x1C5E8)
    BX = Alu.Inc16(BX);
    // JS 0x1000:c609 (1000_C5E9 / 0x1C5E9)
    if(SignFlag) {
      goto label_1000_C609_1C609;
    }
    // ADD SI,0x3 (1000_C5EB / 0x1C5EB)
    // SI += 0x3;
    SI = Alu.Add16(SI, 0x3);
    // CMP byte ptr [SI],0x0 (1000_C5EE / 0x1C5EE)
    Alu.Sub8(UInt8[DS, SI], 0x0);
    // JNZ 0x1000:c5e8 (1000_C5F1 / 0x1C5F1)
    if(!ZeroFlag) {
      goto label_1000_C5E8_1C5E8;
    }
    // OR BX,BX (1000_C5F3 / 0x1C5F3)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:c609 (1000_C5F5 / 0x1C5F5)
    if(ZeroFlag) {
      goto label_1000_C609_1C609;
    }
    // CALL 0x1000:e3df (1000_C5F7 / 0x1C5F7)
    NearCall(cs1, 0xC5FA, unknown_1000_E3DF_1E3DF);
    // MOV BX,AX (1000_C5FA / 0x1C5FA)
    BX = AX;
    // SHL AX,1 (1000_C5FC / 0x1C5FC)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD AX,BX (1000_C5FE / 0x1C5FE)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // ADD BP,AX (1000_C600 / 0x1C600)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // MOV word ptr [DI + 0xd],BP (1000_C602 / 0x1C602)
    UInt16[DS, (ushort)(DI + 0xD)] = BP;
    // OR byte ptr [DI + 0xc],0x1 (1000_C605 / 0x1C605)
    // UInt8[DS, (ushort)(DI + 0xC)] |= 0x1;
    UInt8[DS, (ushort)(DI + 0xC)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0xC)], 0x1);
    label_1000_C609_1C609:
    // POP SI (1000_C609 / 0x1C609)
    SI = Stack.Pop();
    // RET  (1000_C60A / 0x1C60A)
    return NearRet();
  }
  
  public Action unknown_1000_C60B_1C60B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC60B: goto label_1000_C60B_1C60B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C60B_1C60B:
    // PUSH AX (1000_C60B / 0x1C60B)
    Stack.Push(AX);
    // CALL 0x1000:c13b (1000_C60C / 0x1C60C)
    NearCall(cs1, 0xC60F, unknown_1000_C13B_1C13B);
    // POP AX (1000_C60F / 0x1C60F)
    AX = Stack.Pop();
    // CALL 0x1000:c202 (1000_C610 / 0x1C610)
    NearCall(cs1, 0xC613, unknown_1000_C202_1C202);
    // PUSH SI (1000_C613 / 0x1C613)
    Stack.Push(SI);
    // MOV DI,0x3cbe (1000_C614 / 0x1C614)
    DI = 0x3CBE;
    // MOV BP,AX (1000_C617 / 0x1C617)
    BP = AX;
    // MOV AX,word ptr [DI] (1000_C619 / 0x1C619)
    AX = UInt16[DS, DI];
    // INC word ptr [DI] (1000_C61B / 0x1C61B)
    UInt16[DS, DI] = Alu.Inc16(UInt16[DS, DI]);
    // MOV AH,0x11 (1000_C61D / 0x1C61D)
    AH = 0x11;
    // MUL AH (1000_C61F / 0x1C61F)
    Cpu.Mul8(AH);
    // XCHG AX,BP (1000_C621 / 0x1C621)
    ushort tmp_1000_C621 = AX;
    AX = BP;
    BP = tmp_1000_C621;
    // LEA DI,[BP + DI + 0x2] (1000_C622 / 0x1C622)
    DI = (ushort)(BP + DI + 0x2);
    // MOV word ptr [DI],DX (1000_C625 / 0x1C625)
    UInt16[DS, DI] = DX;
    // MOV word ptr [DI + 0x2],BX (1000_C627 / 0x1C627)
    UInt16[DS, (ushort)(DI + 0x2)] = BX;
    // MOV word ptr [DI + 0x8],AX (1000_C62A / 0x1C62A)
    UInt16[DS, (ushort)(DI + 0x8)] = AX;
    // MOV word ptr [DI + 0xa],SI (1000_C62D / 0x1C62D)
    UInt16[DS, (ushort)(DI + 0xA)] = SI;
    // MOV byte ptr [DI + 0xc],0x0 (1000_C630 / 0x1C630)
    UInt8[DS, (ushort)(DI + 0xC)] = 0x0;
    // CALL 0x1000:c1f4 (1000_C634 / 0x1C634)
    NearCall(cs1, 0xC637, GetEsSiPointerToUnknown_1000_C1F4_1C1F4);
    // LODSW ES:SI (1000_C637 / 0x1C637)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AH,0xf (1000_C639 / 0x1C639)
    // AH &= 0xF;
    AH = Alu.And8(AH, 0xF);
    // ADD DX,AX (1000_C63C / 0x1C63C)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // ADD BL,byte ptr ES:[SI] (1000_C63E / 0x1C63E)
    // BL += UInt8[ES, SI];
    BL = Alu.Add8(BL, UInt8[ES, SI]);
    // ADC BH,0x0 (1000_C641 / 0x1C641)
    BH = Alu.Adc8(BH, 0x0);
    // MOV word ptr [DI + 0x4],DX (1000_C644 / 0x1C644)
    UInt16[DS, (ushort)(DI + 0x4)] = DX;
    // MOV word ptr [DI + 0x6],BX (1000_C647 / 0x1C647)
    UInt16[DS, (ushort)(DI + 0x6)] = BX;
    // POP SI (1000_C64A / 0x1C64A)
    SI = Stack.Pop();
    // RET  (1000_C64B / 0x1C64B)
    return NearRet();
  }
  
  public Action unknown_1000_C661_1C661(int gotoTarget) {
    switch(gotoTarget) {
      case 0xC6AC: goto label_1000_C6AC_1C6AC;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_C661_1C661:
    // CALL 0x1000:c13b (1000_C661 / 0x1C661)
    NearCall(cs1, 0xC664, unknown_1000_C13B_1C13B);
    // MOV SI,DI (1000_C664 / 0x1C664)
    SI = DI;
    // SUB SP,0x8 (1000_C666 / 0x1C666)
    // SP -= 0x8;
    SP = Alu.Sub16(SP, 0x8);
    // MOV DI,SP (1000_C669 / 0x1C669)
    DI = SP;
    // PUSH DS (1000_C66B / 0x1C66B)
    Stack.Push(DS);
    // POP ES (1000_C66C / 0x1C66C)
    ES = Stack.Pop();
    // MOVSW ES:DI,SI (1000_C66D / 0x1C66D)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_C66E / 0x1C66E)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_C66F / 0x1C66F)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_C670 / 0x1C670)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB SI,0x8 (1000_C671 / 0x1C671)
    // SI -= 0x8;
    SI = Alu.Sub16(SI, 0x8);
    // SUB DI,0x8 (1000_C674 / 0x1C674)
    // DI -= 0x8;
    DI = Alu.Sub16(DI, 0x8);
    // ADD word ptr [SI],DX (1000_C677 / 0x1C677)
    // UInt16[DS, SI] += DX;
    UInt16[DS, SI] = Alu.Add16(UInt16[DS, SI], DX);
    // ADD word ptr [SI + 0x2],BX (1000_C679 / 0x1C679)
    // UInt16[DS, (ushort)(SI + 0x2)] += BX;
    UInt16[DS, (ushort)(SI + 0x2)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x2)], BX);
    // ADD word ptr [SI + 0x4],DX (1000_C67C / 0x1C67C)
    // UInt16[DS, (ushort)(SI + 0x4)] += DX;
    UInt16[DS, (ushort)(SI + 0x4)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x4)], DX);
    // ADD word ptr [SI + 0x6],BX (1000_C67F / 0x1C67F)
    // UInt16[DS, (ushort)(SI + 0x6)] += BX;
    UInt16[DS, (ushort)(SI + 0x6)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x6)], BX);
    // OR DX,DX (1000_C682 / 0x1C682)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JS 0x1000:c68e (1000_C684 / 0x1C684)
    if(SignFlag) {
      goto label_1000_C68E_1C68E;
    }
    // MOV AX,word ptr [SI + 0x4] (1000_C686 / 0x1C686)
    AX = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV word ptr [DI + 0x4],AX (1000_C689 / 0x1C689)
    UInt16[DS, (ushort)(DI + 0x4)] = AX;
    // JMP 0x1000:c692 (1000_C68C / 0x1C68C)
    goto label_1000_C692_1C692;
    label_1000_C68E_1C68E:
    // MOV AX,word ptr [SI] (1000_C68E / 0x1C68E)
    AX = UInt16[DS, SI];
    // MOV word ptr [DI],AX (1000_C690 / 0x1C690)
    UInt16[DS, DI] = AX;
    label_1000_C692_1C692:
    // OR BX,BX (1000_C692 / 0x1C692)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JS 0x1000:c69e (1000_C694 / 0x1C694)
    if(SignFlag) {
      goto label_1000_C69E_1C69E;
    }
    // MOV AX,word ptr [SI + 0x6] (1000_C696 / 0x1C696)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // MOV word ptr [DI + 0x6],AX (1000_C699 / 0x1C699)
    UInt16[DS, (ushort)(DI + 0x6)] = AX;
    // JMP 0x1000:c6a4 (1000_C69C / 0x1C69C)
    goto label_1000_C6A4_1C6A4;
    label_1000_C69E_1C69E:
    // MOV AX,word ptr [SI + 0x2] (1000_C69E / 0x1C69E)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV word ptr [DI + 0x2],AX (1000_C6A1 / 0x1C6A1)
    UInt16[DS, (ushort)(DI + 0x2)] = AX;
    label_1000_C6A4_1C6A4:
    // MOV SI,DI (1000_C6A4 / 0x1C6A4)
    SI = DI;
    // CALL 0x1000:c6ad (1000_C6A6 / 0x1C6A6)
    NearCall(cs1, 0xC6A9, unknown_1000_C6AD_1C6AD);
    // ADD SP,0x8 (1000_C6A9 / 0x1C6A9)
    // SP += 0x8;
    SP = Alu.Add16(SP, 0x8);
    label_1000_C6AC_1C6AC:
    // RET  (1000_C6AC / 0x1C6AC)
    return NearRet();
  }
  
  public Action unknown_1000_C6AD_1C6AD(int gotoTarget) {
    label_1000_C6AD_1C6AD:
    // CALL 0x1000:c13b (1000_C6AD / 0x1C6AD)
    NearCall(cs1, 0xC6B0, unknown_1000_C13B_1C13B);
    // CMP byte ptr [0xdc46],0x0 (1000_C6B0 / 0x1C6B0)
    Alu.Sub8(UInt8[DS, 0xDC46], 0x0);
    // JS 0x1000:c6e4 (1000_C6B5 / 0x1C6B5)
    if(SignFlag) {
      goto label_1000_C6E4_1C6E4;
    }
    // MOV AX,[0xdc44] (1000_C6B7 / 0x1C6B7)
    AX = UInt16[DS, 0xDC44];
    // CMP AX,word ptr [SI + 0x6] (1000_C6BA / 0x1C6BA)
    Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x6)]);
    // JGE 0x1000:c6e4 (1000_C6BD / 0x1C6BD)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C6E4_1C6E4;
    }
    // ADD AX,0x10 (1000_C6BF / 0x1C6BF)
    // AX += 0x10;
    AX = Alu.Add16(AX, 0x10);
    // CMP AX,word ptr [SI + 0x2] (1000_C6C2 / 0x1C6C2)
    Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JLE 0x1000:c6e4 (1000_C6C5 / 0x1C6C5)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C6E4_1C6E4;
    }
    // MOV AX,[0xdc42] (1000_C6C7 / 0x1C6C7)
    AX = UInt16[DS, 0xDC42];
    // CMP AX,word ptr [SI + 0x4] (1000_C6CA / 0x1C6CA)
    Alu.Sub16(AX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JGE 0x1000:c6e4 (1000_C6CD / 0x1C6CD)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C6E4_1C6E4;
    }
    // ADD AX,0x10 (1000_C6CF / 0x1C6CF)
    // AX += 0x10;
    AX = Alu.Add16(AX, 0x10);
    // MOV BX,word ptr [SI] (1000_C6D2 / 0x1C6D2)
    BX = UInt16[DS, SI];
    // AND BH,0xf (1000_C6D4 / 0x1C6D4)
    // BH &= 0xF;
    BH = Alu.And8(BH, 0xF);
    // CMP AX,BX (1000_C6D7 / 0x1C6D7)
    Alu.Sub16(AX, BX);
    // JLE 0x1000:c6e4 (1000_C6D9 / 0x1C6D9)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C6E4_1C6E4;
    }
    // MOV AX,0xdbec (1000_C6DB / 0x1C6DB)
    AX = 0xDBEC;
    // PUSH AX (1000_C6DE / 0x1C6DE)
    Stack.Push(AX);
    // PUSH SI (1000_C6DF / 0x1C6DF)
    Stack.Push(SI);
    // CALL 0x1000:dbb2 (1000_C6E0 / 0x1C6E0)
    NearCall(cs1, 0xC6E3, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // POP SI (1000_C6E3 / 0x1C6E3)
    SI = Stack.Pop();
    label_1000_C6E4_1C6E4:
    // MOV AX,DS (1000_C6E4 / 0x1C6E4)
    AX = DS;
    // MOV ES,AX (1000_C6E6 / 0x1C6E6)
    ES = AX;
    // MOV DI,0xd834 (1000_C6E8 / 0x1C6E8)
    DI = 0xD834;
    // MOV BX,0x8 (1000_C6EB / 0x1C6EB)
    BX = 0x8;
    // LODSW SI (1000_C6EE / 0x1C6EE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [BX + DI] (1000_C6EF / 0x1C6EF)
    Alu.Sub16(AX, UInt16[DS, (ushort)(BX + DI)]);
    // JGE 0x1000:c6f5 (1000_C6F1 / 0x1C6F1)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C6F5_1C6F5;
    }
    // MOV AX,word ptr [BX + DI] (1000_C6F3 / 0x1C6F3)
    AX = UInt16[DS, (ushort)(BX + DI)];
    label_1000_C6F5_1C6F5:
    // STOSW ES:DI (1000_C6F5 / 0x1C6F5)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_C6F6 / 0x1C6F6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [BX + DI] (1000_C6F7 / 0x1C6F7)
    Alu.Sub16(AX, UInt16[DS, (ushort)(BX + DI)]);
    // JGE 0x1000:c6fd (1000_C6F9 / 0x1C6F9)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C6FD_1C6FD;
    }
    // MOV AX,word ptr [BX + DI] (1000_C6FB / 0x1C6FB)
    AX = UInt16[DS, (ushort)(BX + DI)];
    label_1000_C6FD_1C6FD:
    // STOSW ES:DI (1000_C6FD / 0x1C6FD)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_C6FE / 0x1C6FE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [BX + DI] (1000_C6FF / 0x1C6FF)
    Alu.Sub16(AX, UInt16[DS, (ushort)(BX + DI)]);
    // JLE 0x1000:c705 (1000_C701 / 0x1C701)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C705_1C705;
    }
    // MOV AX,word ptr [BX + DI] (1000_C703 / 0x1C703)
    AX = UInt16[DS, (ushort)(BX + DI)];
    label_1000_C705_1C705:
    // CMP AX,word ptr [DI + -0x4] (1000_C705 / 0x1C705)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI - 0x4)]);
    // JLE 0x1000:c6ac (1000_C708 / 0x1C708)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_C6AC / 0x1C6AC)
      return NearRet();
    }
    // STOSW ES:DI (1000_C70A / 0x1C70A)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_C70B / 0x1C70B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [BX + DI] (1000_C70C / 0x1C70C)
    Alu.Sub16(AX, UInt16[DS, (ushort)(BX + DI)]);
    // JLE 0x1000:c712 (1000_C70E / 0x1C70E)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C712_1C712;
    }
    // MOV AX,word ptr [BX + DI] (1000_C710 / 0x1C710)
    AX = UInt16[DS, (ushort)(BX + DI)];
    label_1000_C712_1C712:
    // CMP AX,word ptr [DI + -0x4] (1000_C712 / 0x1C712)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI - 0x4)]);
    // JLE 0x1000:c6ac (1000_C715 / 0x1C715)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_C6AC / 0x1C6AC)
      return NearRet();
    }
    // STOSW ES:DI (1000_C717 / 0x1C717)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CALL 0x1000:c443 (1000_C718 / 0x1C718)
    NearCall(cs1, 0xC71B, unknown_1000_C443_1C443);
    // SUB SP,0x200 (1000_C71B / 0x1C71B)
    // SP -= 0x200;
    SP = Alu.Sub16(SP, 0x200);
    // MOV DI,SP (1000_C71F / 0x1C71F)
    DI = SP;
    // MOV CX,word ptr [0x3cbe] (1000_C721 / 0x1C721)
    CX = UInt16[DS, 0x3CBE];
    // JCXZ 0x1000:c780 (1000_C725 / 0x1C725)
    if(CX == 0) {
      goto label_1000_C780_1C780;
    }
    // MOV SI,0xd834 (1000_C727 / 0x1C727)
    SI = 0xD834;
    // LODSW SI (1000_C72A / 0x1C72A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_C72B / 0x1C72B)
    DX = AX;
    // LODSW SI (1000_C72D / 0x1C72D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_C72E / 0x1C72E)
    BX = AX;
    // LODSW SI (1000_C730 / 0x1C730)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_C731 / 0x1C731)
    BP = AX;
    // MOV AX,word ptr [SI] (1000_C733 / 0x1C733)
    AX = UInt16[DS, SI];
    // MOV SI,0x3cc0 (1000_C735 / 0x1C735)
    SI = 0x3CC0;
    label_1000_C738_1C738:
    // CMP byte ptr [SI + 0xc],0x0 (1000_C738 / 0x1C738)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0xC)], 0x0);
    // JS 0x1000:c756 (1000_C73C / 0x1C73C)
    if(SignFlag) {
      goto label_1000_C756_1C756;
    }
    // CMP word ptr [SI],BP (1000_C73E / 0x1C73E)
    Alu.Sub16(UInt16[DS, SI], BP);
    // JGE 0x1000:c756 (1000_C740 / 0x1C740)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C756_1C756;
    }
    // CMP word ptr [SI + 0x2],AX (1000_C742 / 0x1C742)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x2)], AX);
    // JGE 0x1000:c756 (1000_C745 / 0x1C745)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C756_1C756;
    }
    // CMP word ptr [SI + 0x4],DX (1000_C747 / 0x1C747)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x4)], DX);
    // JLE 0x1000:c756 (1000_C74A / 0x1C74A)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C756_1C756;
    }
    // CMP word ptr [SI + 0x6],BX (1000_C74C / 0x1C74C)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x6)], BX);
    // JLE 0x1000:c756 (1000_C74F / 0x1C74F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_C756_1C756;
    }
    // MOV word ptr [DI],SI (1000_C751 / 0x1C751)
    UInt16[DS, DI] = SI;
    // ADD DI,0x2 (1000_C753 / 0x1C753)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    label_1000_C756_1C756:
    // ADD SI,0x11 (1000_C756 / 0x1C756)
    // SI += 0x11;
    SI = Alu.Add16(SI, 0x11);
    // LOOP 0x1000:c738 (1000_C759 / 0x1C759)
    if(--CX != 0) {
      goto label_1000_C738_1C738;
    }
    // MOV CX,DI (1000_C75B / 0x1C75B)
    CX = DI;
    // SUB CX,SP (1000_C75D / 0x1C75D)
    // CX -= SP;
    CX = Alu.Sub16(CX, SP);
    // SHR CX,1 (1000_C75F / 0x1C75F)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // JZ 0x1000:c780 (1000_C761 / 0x1C761)
    if(ZeroFlag) {
      goto label_1000_C780_1C780;
    }
    label_1000_C763_1C763:
    // MOV SI,SP (1000_C763 / 0x1C763)
    SI = SP;
    // PUSH CX (1000_C765 / 0x1C765)
    Stack.Push(CX);
    // CALL word ptr [0x2786] (1000_C766 / 0x1C766)
    // Indirect call to word ptr [0x2786], generating possible targets from emulator records
    uint targetAddress_1000_C766 = (uint)(UInt16[DS, 0x2786]);
    switch(targetAddress_1000_C766) {
      case 0xC835 : NearCall(cs1, 0xC76A, unknown_1000_C835_1C835);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C766);
        break;
    }
    // JS 0x1000:c77f (1000_C76A / 0x1C76A)
    if(SignFlag) {
      goto label_1000_C77F_1C77F;
    }
    // XOR SI,SI (1000_C76C / 0x1C76C)
    SI = 0;
    // XCHG word ptr [BX + -0x2],SI (1000_C76E / 0x1C76E)
    ushort tmp_1000_C76E = UInt16[DS, (ushort)(BX - 0x2)];
    UInt16[DS, (ushort)(BX - 0x2)] = SI;
    SI = tmp_1000_C76E;
    // MOV AX,word ptr [SI + 0x8] (1000_C771 / 0x1C771)
    AX = UInt16[DS, (ushort)(SI + 0x8)];
    // MOV DX,word ptr [SI] (1000_C774 / 0x1C774)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C776 / 0x1C776)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // CALL 0x1000:c30d (1000_C779 / 0x1C779)
    NearCall(cs1, 0xC77C, unknown_1000_C30D_1C30D);
    // POP CX (1000_C77C / 0x1C77C)
    CX = Stack.Pop();
    // JMP 0x1000:c763 (1000_C77D / 0x1C77D)
    goto label_1000_C763_1C763;
    label_1000_C77F_1C77F:
    // POP CX (1000_C77F / 0x1C77F)
    CX = Stack.Pop();
    label_1000_C780_1C780:
    // CMP byte ptr [0x227d],0x0 (1000_C780 / 0x1C780)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:c7a2 (1000_C785 / 0x1C785)
    if(!ZeroFlag) {
      goto label_1000_C7A2_1C7A2;
    }
    // CMP word ptr [0xd83a],0x89 (1000_C787 / 0x1C787)
    Alu.Sub16(UInt16[DS, 0xD83A], 0x89);
    // JL 0x1000:c7a2 (1000_C78D / 0x1C78D)
    if(SignFlag != OverflowFlag) {
      goto label_1000_C7A2_1C7A2;
    }
    // CMP word ptr [0xd838],0x7e (1000_C78F / 0x1C78F)
    Alu.Sub16(UInt16[DS, 0xD838], 0x7E);
    // JL 0x1000:c7a2 (1000_C795 / 0x1C795)
    if(SignFlag != OverflowFlag) {
      goto label_1000_C7A2_1C7A2;
    }
    // CMP word ptr [0xd834],0xc2 (1000_C797 / 0x1C797)
    Alu.Sub16(UInt16[DS, 0xD834], 0xC2);
    // JGE 0x1000:c7a2 (1000_C79D / 0x1C79D)
    if(SignFlag == OverflowFlag) {
      goto label_1000_C7A2_1C7A2;
    }
    // CALL 0x1000:1797 (1000_C79F / 0x1C79F)
    NearCall(cs1, 0xC7A2, unknown_1000_1797_11797);
    label_1000_C7A2_1C7A2:
    // MOV SI,word ptr [0xdbe0] (1000_C7A2 / 0x1C7A2)
    SI = UInt16[DS, 0xDBE0];
    // OR SI,SI (1000_C7A6 / 0x1C7A6)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:c7be (1000_C7A8 / 0x1C7A8)
    if(ZeroFlag) {
      goto label_1000_C7BE_1C7BE;
    }
    // MOV DI,0xd834 (1000_C7AA / 0x1C7AA)
    DI = 0xD834;
    // CALL 0x1000:c7d4 (1000_C7AD / 0x1C7AD)
    NearCall(cs1, 0xC7B0, unknown_1000_C7D4_1C7D4);
    // MOV SI,word ptr [0xdbe2] (1000_C7B0 / 0x1C7B0)
    SI = UInt16[DS, 0xDBE2];
    // OR SI,SI (1000_C7B4 / 0x1C7B4)
    // SI |= SI;
    SI = Alu.Or16(SI, SI);
    // JZ 0x1000:c7be (1000_C7B6 / 0x1C7B6)
    if(ZeroFlag) {
      goto label_1000_C7BE_1C7BE;
    }
    // MOV DI,0xd834 (1000_C7B8 / 0x1C7B8)
    DI = 0xD834;
    // CALL 0x1000:c7d4 (1000_C7BB / 0x1C7BB)
    NearCall(cs1, 0xC7BE, unknown_1000_C7D4_1C7D4);
    label_1000_C7BE_1C7BE:
    // MOV SI,0xd834 (1000_C7BE / 0x1C7BE)
    SI = 0xD834;
    // MOV DX,word ptr [SI] (1000_C7C1 / 0x1C7C1)
    DX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_C7C3 / 0x1C7C3)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // MOV BP,word ptr [SI + 0x4] (1000_C7C6 / 0x1C7C6)
    BP = UInt16[DS, (ushort)(SI + 0x4)];
    // MOV AX,word ptr [SI + 0x6] (1000_C7C9 / 0x1C7C9)
    AX = UInt16[DS, (ushort)(SI + 0x6)];
    // CALL 0x1000:c51e (1000_C7CC / 0x1C7CC)
    NearCall(cs1, 0xC7CF, unknown_1000_C51E_1C51E);
    // ADD SP,0x200 (1000_C7CF / 0x1C7CF)
    // SP += 0x200;
    SP = Alu.Add16(SP, 0x200);
    // RET  (1000_C7D3 / 0x1C7D3)
    return NearRet();
  }
  
  public Action unknown_1000_C7D4_1C7D4(int gotoTarget) {
    label_1000_C7D4_1C7D4:
    // LODSW SI (1000_C7D4 / 0x1C7D4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [DI + 0x4] (1000_C7D5 / 0x1C7D5)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JGE 0x1000:c826 (1000_C7D8 / 0x1C7D8)
    if(SignFlag == OverflowFlag) {
      // JGE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // MOV DX,AX (1000_C7DA / 0x1C7DA)
    DX = AX;
    // LODSW SI (1000_C7DC / 0x1C7DC)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [DI + 0x6] (1000_C7DD / 0x1C7DD)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JGE 0x1000:c826 (1000_C7E0 / 0x1C7E0)
    if(SignFlag == OverflowFlag) {
      // JGE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // MOV BX,AX (1000_C7E2 / 0x1C7E2)
    BX = AX;
    // LODSW SI (1000_C7E4 / 0x1C7E4)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [DI] (1000_C7E5 / 0x1C7E5)
    Alu.Sub16(AX, UInt16[DS, DI]);
    // JLE 0x1000:c826 (1000_C7E7 / 0x1C7E7)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // MOV BP,AX (1000_C7E9 / 0x1C7E9)
    BP = AX;
    // LODSW SI (1000_C7EB / 0x1C7EB)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [DI + 0x2] (1000_C7EC / 0x1C7EC)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JLE 0x1000:c826 (1000_C7EF / 0x1C7EF)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // CMP DX,word ptr [DI] (1000_C7F1 / 0x1C7F1)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JNC 0x1000:c7f7 (1000_C7F3 / 0x1C7F3)
    if(!CarryFlag) {
      goto label_1000_C7F7_1C7F7;
    }
    // MOV DX,word ptr [DI] (1000_C7F5 / 0x1C7F5)
    DX = UInt16[DS, DI];
    label_1000_C7F7_1C7F7:
    // CMP BP,word ptr [DI + 0x4] (1000_C7F7 / 0x1C7F7)
    Alu.Sub16(BP, UInt16[DS, (ushort)(DI + 0x4)]);
    // JC 0x1000:c7ff (1000_C7FA / 0x1C7FA)
    if(CarryFlag) {
      goto label_1000_C7FF_1C7FF;
    }
    // MOV BP,word ptr [DI + 0x4] (1000_C7FC / 0x1C7FC)
    BP = UInt16[DS, (ushort)(DI + 0x4)];
    label_1000_C7FF_1C7FF:
    // CMP BX,word ptr [DI + 0x2] (1000_C7FF / 0x1C7FF)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JNC 0x1000:c807 (1000_C802 / 0x1C802)
    if(!CarryFlag) {
      goto label_1000_C807_1C807;
    }
    // MOV BX,word ptr [DI + 0x2] (1000_C804 / 0x1C804)
    BX = UInt16[DS, (ushort)(DI + 0x2)];
    label_1000_C807_1C807:
    // CMP AX,word ptr [DI + 0x6] (1000_C807 / 0x1C807)
    Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JC 0x1000:c80f (1000_C80A / 0x1C80A)
    if(CarryFlag) {
      goto label_1000_C80F_1C80F;
    }
    // MOV AX,word ptr [DI + 0x6] (1000_C80C / 0x1C80C)
    AX = UInt16[DS, (ushort)(DI + 0x6)];
    label_1000_C80F_1C80F:
    // SUB BP,DX (1000_C80F / 0x1C80F)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x1000:c826 (1000_C811 / 0x1C811)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // SUB AX,BX (1000_C813 / 0x1C813)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JBE 0x1000:c826 (1000_C815 / 0x1C815)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (1000_C826 / 0x1C826)
      return NearRet();
    }
    // MOV ES,word ptr [0xdbd6] (1000_C817 / 0x1C817)
    ES = UInt16[DS, 0xDBD6];
    // MOV DS,word ptr [0xdbd8] (1000_C81B / 0x1C81B)
    DS = UInt16[DS, 0xDBD8];
    // CALLF [0x38f5] (1000_C81F / 0x1C81F)
    // Indirect call to [0x38f5], generating possible targets from emulator records
    uint targetAddress_1000_C81F = (uint)(UInt16[SS, 0x38F7] * 0x10 + UInt16[SS, 0x38F5] - cs1 * 0x10);
    switch(targetAddress_1000_C81F) {
      case 0x235E0 : FarCall(cs1, 0xC824, VgaFunc16CopySquareOfPixels_334B_0130_335E0);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C81F);
        break;
    }
    // PUSH SS (1000_C824 / 0x1C824)
    Stack.Push(SS);
    // POP DS (1000_C825 / 0x1C825)
    DS = Stack.Pop();
    label_1000_C826_1C826:
    // RET  (1000_C826 / 0x1C826)
    return NearRet();
  }
  
  public Action unknown_1000_C835_1C835(int gotoTarget) {
    label_1000_C835_1C835:
    // MOV DX,0xffff (1000_C835 / 0x1C835)
    DX = 0xFFFF;
    label_1000_C838_1C838:
    // LODSW SI (1000_C838 / 0x1C838)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_C839 / 0x1C839)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:c856 (1000_C83B / 0x1C83B)
    if(ZeroFlag) {
      goto label_1000_C856_1C856;
    }
    // MOV DI,AX (1000_C83D / 0x1C83D)
    DI = AX;
    // MOV AX,word ptr [DI + 0x4] (1000_C83F / 0x1C83F)
    AX = UInt16[DS, (ushort)(DI + 0x4)];
    // ADD AX,word ptr [DI + 0x6] (1000_C842 / 0x1C842)
    // AX += UInt16[DS, (ushort)(DI + 0x6)];
    AX = Alu.Add16(AX, UInt16[DS, (ushort)(DI + 0x6)]);
    // TEST byte ptr [DI + 0xc],0x40 (1000_C845 / 0x1C845)
    Alu.And8(UInt8[DS, (ushort)(DI + 0xC)], 0x40);
    // JZ 0x1000:c84e (1000_C849 / 0x1C849)
    if(ZeroFlag) {
      goto label_1000_C84E_1C84E;
    }
    // MOV AX,0x7fff (1000_C84B / 0x1C84B)
    AX = 0x7FFF;
    label_1000_C84E_1C84E:
    // CMP AX,DX (1000_C84E / 0x1C84E)
    Alu.Sub16(AX, DX);
    // JA 0x1000:c856 (1000_C850 / 0x1C850)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_C856_1C856;
    }
    // MOV DX,AX (1000_C852 / 0x1C852)
    DX = AX;
    // MOV BX,SI (1000_C854 / 0x1C854)
    BX = SI;
    label_1000_C856_1C856:
    // LOOP 0x1000:c838 (1000_C856 / 0x1C856)
    if(--CX != 0) {
      goto label_1000_C838_1C838;
    }
    // OR DX,DX (1000_C858 / 0x1C858)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // RET  (1000_C85A / 0x1C85A)
    return NearRet();
  }
  
  public Action InitDialogue_1000_C85B_1C85B(int gotoTarget) {
    label_1000_C85B_1C85B:
    // MOV AX,[0xce7a] (1000_C85B / 0x1C85B)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0x476e],AX (1000_C85E / 0x1C85E)
    UInt16[DS, 0x476E] = AX;
    // MOV word ptr [0x4772],0x1770 (1000_C861 / 0x1C861)
    UInt16[DS, 0x4772] = 0x1770;
    // RET  (1000_C867 / 0x1C867)
    return NearRet();
  }
  
  public Action unknown_1000_C868_1C868(int gotoTarget) {
    label_1000_C868_1C868:
    // CALL 0x1000:abcc (1000_C868 / 0x1C868)
    NearCall(cs1, 0xC86B, IsUnknownDC2BZero_1000_ABCC_1ABCC);
    // JNZ 0x1000:c8c0 (1000_C86B / 0x1C86B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_C8C0 / 0x1C8C0)
      return NearRet();
    }
    // MOV SI,word ptr [0x22a6] (1000_C86D / 0x1C86D)
    SI = UInt16[DS, 0x22A6];
    // CMP SI,0x11 (1000_C871 / 0x1C871)
    Alu.Sub16(SI, 0x11);
    // JNC 0x1000:c8c0 (1000_C875 / 0x1C875)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_C8C0 / 0x1C8C0)
      return NearRet();
    }
    // SHL SI,1 (1000_C877 / 0x1C877)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_C879 / 0x1C879)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV DX,word ptr [SI + 0x27b6] (1000_C87B / 0x1C87B)
    DX = UInt16[DS, (ushort)(SI + 0x27B6)];
    // MOV BX,word ptr [SI + 0x27b8] (1000_C87F / 0x1C87F)
    BX = UInt16[DS, (ushort)(SI + 0x27B8)];
    // MOV AX,BX (1000_C883 / 0x1C883)
    AX = BX;
    // OR AX,DX (1000_C885 / 0x1C885)
    // AX |= DX;
    AX = Alu.Or16(AX, DX);
    // JZ 0x1000:c8c0 (1000_C887 / 0x1C887)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_C8C0 / 0x1C8C0)
      return NearRet();
    }
    // MOV SI,0x2792 (1000_C889 / 0x1C889)
    SI = 0x2792;
    // CMP byte ptr [0x227d],0x0 (1000_C88C / 0x1C88C)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:c8a3 (1000_C891 / 0x1C891)
    if(!ZeroFlag) {
      goto label_1000_C8A3_1C8A3;
    }
    // PUSH BX (1000_C893 / 0x1C893)
    Stack.Push(BX);
    // MOV BX,0x1 (1000_C894 / 0x1C894)
    BX = 0x1;
    // CALL 0x1000:e3b7 (1000_C897 / 0x1C897)
    NearCall(cs1, 0xC89A, unknown_1000_E3B7_1E3B7);
    // POP BX (1000_C89A / 0x1C89A)
    BX = Stack.Pop();
    // MOV SI,0x2789 (1000_C89B / 0x1C89B)
    SI = 0x2789;
    // JZ 0x1000:c8a3 (1000_C89E / 0x1C89E)
    if(ZeroFlag) {
      goto label_1000_C8A3_1C8A3;
    }
    // MOV SI,0x278e (1000_C8A0 / 0x1C8A0)
    SI = 0x278E;
    label_1000_C8A3_1C8A3:
    // LODSB SI (1000_C8A3 / 0x1C8A3)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_C8A4 / 0x1C8A4)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:c8bd (1000_C8A6 / 0x1C8A6)
    if(ZeroFlag) {
      goto label_1000_C8BD_1C8BD;
    }
    // JNS 0x1000:c8b2 (1000_C8A8 / 0x1C8A8)
    if(!SignFlag) {
      goto label_1000_C8B2_1C8B2;
    }
    // MOV AX,0x12c (1000_C8AA / 0x1C8AA)
    AX = 0x12C;
    // CALL 0x1000:e387 (1000_C8AD / 0x1C8AD)
    NearCall(cs1, 0xC8B0, unknown_1000_E387_1E387);
    // JMP 0x1000:c8a3 (1000_C8B0 / 0x1C8B0)
    goto label_1000_C8A3_1C8A3;
    label_1000_C8B2_1C8B2:
    // PUSH SI (1000_C8B2 / 0x1C8B2)
    Stack.Push(SI);
    // XOR AH,AH (1000_C8B3 / 0x1C8B3)
    AH = 0;
    // MOV BP,AX (1000_C8B5 / 0x1C8B5)
    BP = AX;
    // CALL 0x1000:c8c1 (1000_C8B7 / 0x1C8B7)
    NearCall(cs1, 0xC8BA, unknown_1000_C8C1_1C8C1);
    // POP SI (1000_C8BA / 0x1C8BA)
    SI = Stack.Pop();
    // JMP 0x1000:c8a3 (1000_C8BB / 0x1C8BB)
    goto label_1000_C8A3_1C8A3;
    label_1000_C8BD_1C8BD:
    // CALL 0x1000:c4dd (1000_C8BD / 0x1C8BD)
    NearCall(cs1, 0xC8C0, unknown_1000_C4DD_1C4DD);
    label_1000_C8C0_1C8C0:
    // RET  (1000_C8C0 / 0x1C8C0)
    return NearRet();
  }
  
  public Action unknown_1000_C8C1_1C8C1(int gotoTarget) {
    label_1000_C8C1_1C8C1:
    // PUSH BX (1000_C8C1 / 0x1C8C1)
    Stack.Push(BX);
    // PUSH DX (1000_C8C2 / 0x1C8C2)
    Stack.Push(DX);
    // PUSH word ptr [0xce7a] (1000_C8C3 / 0x1C8C3)
    Stack.Push(UInt16[DS, 0xCE7A]);
    // MOV SI,BP (1000_C8C7 / 0x1C8C7)
    SI = BP;
    // SHL SI,1 (1000_C8C9 / 0x1C8C9)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_C8CB / 0x1C8CB)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SUB DX,word ptr [SI + 0x2796] (1000_C8CD / 0x1C8CD)
    // DX -= UInt16[DS, (ushort)(SI + 0x2796)];
    DX = Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x2796)]);
    // JNC 0x1000:c8d5 (1000_C8D1 / 0x1C8D1)
    if(!CarryFlag) {
      goto label_1000_C8D5_1C8D5;
    }
    // XOR DX,DX (1000_C8D3 / 0x1C8D3)
    DX = 0;
    label_1000_C8D5_1C8D5:
    // SUB BX,word ptr [SI + 0x2798] (1000_C8D5 / 0x1C8D5)
    // BX -= UInt16[DS, (ushort)(SI + 0x2798)];
    BX = Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2798)]);
    // JNC 0x1000:c8dd (1000_C8D9 / 0x1C8D9)
    if(!CarryFlag) {
      goto label_1000_C8DD_1C8DD;
    }
    // XOR BX,BX (1000_C8DB / 0x1C8DB)
    BX = 0;
    label_1000_C8DD_1C8DD:
    // PUSH DS (1000_C8DD / 0x1C8DD)
    Stack.Push(DS);
    // MOV ES,word ptr [0xdbd8] (1000_C8DE / 0x1C8DE)
    ES = UInt16[DS, 0xDBD8];
    // MOV DS,word ptr [0xdbd6] (1000_C8E2 / 0x1C8E2)
    DS = UInt16[DS, 0xDBD6];
    // CALLF [0x3949] (1000_C8E6 / 0x1C8E6)
    // Indirect call to [0x3949], generating possible targets from emulator records
    uint targetAddress_1000_C8E6 = (uint)(UInt16[SS, 0x394B] * 0x10 + UInt16[SS, 0x3949] - cs1 * 0x10);
    switch(targetAddress_1000_C8E6) {
      case 0x2361F : FarCall(cs1, 0xC8EB, unknown_334B_016F_3361F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_C8E6);
        break;
    }
    // POP DS (1000_C8EB / 0x1C8EB)
    DS = Stack.Pop();
    // POP BX (1000_C8EC / 0x1C8EC)
    BX = Stack.Pop();
    label_1000_C8ED_1C8ED:
    // MOV AX,[0xce7a] (1000_C8ED / 0x1C8ED)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,BX (1000_C8F0 / 0x1C8F0)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AL,byte ptr [0xdbe6] (1000_C8F2 / 0x1C8F2)
    Alu.Sub8(AL, UInt8[DS, 0xDBE6]);
    // JC 0x1000:c8ed (1000_C8F6 / 0x1C8F6)
    if(CarryFlag) {
      goto label_1000_C8ED_1C8ED;
    }
    // POP DX (1000_C8F8 / 0x1C8F8)
    DX = Stack.Pop();
    // POP BX (1000_C8F9 / 0x1C8F9)
    BX = Stack.Pop();
    // RET  (1000_C8FA / 0x1C8FA)
    return NearRet();
  }
  
  public Action GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921(int gotoTarget) {
    label_1000_C921_1C921:
    // MOV BX,0x33a3 (1000_C921 / 0x1C921)
    BX = 0x33A3;
    // ADD BX,AX (1000_C924 / 0x1C924)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // ADD BX,AX (1000_C926 / 0x1C926)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // MOV BX,word ptr [BX] (1000_C928 / 0x1C928)
    BX = UInt16[DS, BX];
    // RET  (1000_C92A / 0x1C92A)
    return NearRet();
  }
  
  public Action hnm_reset_and_read_header_ida_1000_C92B_1C92B(int gotoTarget) {
    label_1000_C92B_1C92B:
    // MOV [0xdc00],AX (1000_C92B / 0x1C92B)
    UInt16[DS, 0xDC00] = AX;
    // CALL 0x1000:ca01 (1000_C92E / 0x1C92E)
    NearCall(cs1, 0xC931, hnm_close_resource_ida_1000_CA01_1CA01);
    // CALL 0x1000:ce1a (1000_C931 / 0x1C931)
    NearCall(cs1, 0xC934, hnm_reset_ida_1000_CE1A_1CE1A);
    // MOV byte ptr [0xdbe7],0x0 (1000_C934 / 0x1C934)
    UInt8[DS, 0xDBE7] = 0x0;
    // CALL 0x1000:ce01 (1000_C939 / 0x1C939)
    NearCall(cs1, 0xC93C, unknown_1000_CE01_1CE01);
    // Function call generated as ASM continues to next function entry point without return
    return hnm_read_header_ida_1000_C93C_1C93C(0);
  }
  
  public Action hnm_read_header_ida_1000_C93C_1C93C(int gotoTarget) {
    label_1000_C93C_1C93C:
    // MOV AX,[0xdc00] (1000_C93C / 0x1C93C)
    AX = UInt16[DS, 0xDC00];
    // MOV [0xdc02],AX (1000_C93F / 0x1C93F)
    UInt16[DS, 0xDC02] = AX;
    // CALL 0x1000:c921 (1000_C942 / 0x1C942)
    NearCall(cs1, 0xC945, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921);
    // MOV AX,word ptr [BX] (1000_C945 / 0x1C945)
    AX = UInt16[DS, BX];
    // MOV [0xdbfe],AX (1000_C947 / 0x1C947)
    UInt16[DS, 0xDBFE] = AX;
    // LEA DX,[BX + 0x2] (1000_C94A / 0x1C94A)
    DX = (ushort)(BX + 0x2);
    // CALL 0x1000:f229 (1000_C94D / 0x1C94D)
    NearCall(cs1, 0xC950, open_res_or_file_or_die_ida_1000_F229_1F229);
    // MOV word ptr [0x35a6],BX (1000_C950 / 0x1C950)
    UInt16[DS, 0x35A6] = BX;
    // MOV [0xdc04],AX (1000_C954 / 0x1C954)
    UInt16[DS, 0xDC04] = AX;
    // MOV word ptr [0xdc06],DX (1000_C957 / 0x1C957)
    UInt16[DS, 0xDC06] = DX;
    // MOV word ptr [0xdc08],CX (1000_C95B / 0x1C95B)
    UInt16[DS, 0xDC08] = CX;
    // MOV word ptr [0xdc0a],BP (1000_C95F / 0x1C95F)
    UInt16[DS, 0xDC0A] = BP;
    // PUSH word ptr [0xdc1a] (1000_C963 / 0x1C963)
    Stack.Push(UInt16[DS, 0xDC1A]);
    // PUSH word ptr [0xdc0c] (1000_C967 / 0x1C967)
    Stack.Push(UInt16[DS, 0xDC0C]);
    // CALL 0x1000:cd8f (1000_C96B / 0x1C96B)
    NearCall(cs1, 0xC96E, hnm_read_header_size_ida_1000_CD8F_1CD8F);
    // JC 0x1000:c988 (1000_C96E / 0x1C96E)
    if(CarryFlag) {
      goto label_1000_C988_1C988;
    }
    // ADD SI,AX (1000_C970 / 0x1C970)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JC 0x1000:c97a (1000_C972 / 0x1C972)
    if(CarryFlag) {
      goto label_1000_C97A_1C97A;
    }
    // CMP SI,word ptr [0xce74] (1000_C974 / 0x1C974)
    Alu.Sub16(SI, UInt16[DS, 0xCE74]);
    // JBE 0x1000:c980 (1000_C978 / 0x1C978)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C980_1C980;
    }
    label_1000_C97A_1C97A:
    // MOV word ptr [0xdc0c],0x0 (1000_C97A / 0x1C97A)
    UInt16[DS, 0xDC0C] = 0x0;
    label_1000_C980_1C980:
    // SUB AX,0x2 (1000_C980 / 0x1C980)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // MOV CX,AX (1000_C983 / 0x1C983)
    CX = AX;
    // CALL 0x1000:cdbf (1000_C985 / 0x1C985)
    NearCall(cs1, 0xC988, HnmReadFromFileHandle_1000_CDBF_1CDBF);
    label_1000_C988_1C988:
    // POP word ptr [0xdc0c] (1000_C988 / 0x1C988)
    UInt16[DS, 0xDC0C] = Stack.Pop();
    // POP word ptr [0xdc1a] (1000_C98C / 0x1C98C)
    UInt16[DS, 0xDC1A] = Stack.Pop();
    // JC 0x1000:c9e7 (1000_C990 / 0x1C990)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_C9E7 / 0x1C9E7)
      return NearRet();
    }
    // LES SI,[0xdc0c] (1000_C992 / 0x1C992)
    SI = UInt16[DS, 0xDC0C];
    ES = UInt16[DS, 0xDC0E];
    // LODSW ES:SI (1000_C996 / 0x1C996)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD AX,SI (1000_C998 / 0x1C998)
    // AX += SI;
    AX = Alu.Add16(AX, SI);
    // JC 0x1000:c9a2 (1000_C99A / 0x1C99A)
    if(CarryFlag) {
      goto label_1000_C9A2_1C9A2;
    }
    // CMP AX,word ptr [0xce74] (1000_C99C / 0x1C99C)
    Alu.Sub16(AX, UInt16[DS, 0xCE74]);
    // JBE 0x1000:c9a4 (1000_C9A0 / 0x1C9A0)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_C9A4_1C9A4;
    }
    label_1000_C9A2_1C9A2:
    // XOR SI,SI (1000_C9A2 / 0x1C9A2)
    SI = 0;
    label_1000_C9A4_1C9A4:
    // MOV byte ptr [0xdbb4],0xff (1000_C9A4 / 0x1C9A4)
    UInt8[DS, 0xDBB4] = 0xFF;
    // CALL 0x1000:c1ba (1000_C9A9 / 0x1C9A9)
    NearCall(cs1, 0xC9AC, hnm_apply_palette_ida_1000_C1BA_1C1BA);
    // DEC SI (1000_C9AC / 0x1C9AC)
    SI = Alu.Dec16(SI);
    label_1000_C9AD_1C9AD:
    // INC SI (1000_C9AD / 0x1C9AD)
    SI = Alu.Inc16(SI);
    // CMP byte ptr ES:[SI],0xff (1000_C9AE / 0x1C9AE)
    Alu.Sub8(UInt8[ES, SI], 0xFF);
    // JZ 0x1000:c9ad (1000_C9B2 / 0x1C9B2)
    if(ZeroFlag) {
      goto label_1000_C9AD_1C9AD;
    }
    // XOR BX,BX (1000_C9B4 / 0x1C9B4)
    BX = 0;
    // TEST byte ptr [0xdbfe],0x4 (1000_C9B6 / 0x1C9B6)
    Alu.And8(UInt8[DS, 0xDBFE], 0x4);
    // JZ 0x1000:c9bf (1000_C9BB / 0x1C9BB)
    if(ZeroFlag) {
      goto label_1000_C9BF_1C9BF;
    }
    // MOV BL,0x10 (1000_C9BD / 0x1C9BD)
    BL = 0x10;
    label_1000_C9BF_1C9BF:
    // MOV CX,word ptr ES:[BX + SI] (1000_C9BF / 0x1C9BF)
    CX = UInt16[ES, (ushort)(BX + SI)];
    // MOV BX,word ptr ES:[BX + SI + 0x2] (1000_C9C2 / 0x1C9C2)
    BX = UInt16[ES, (ushort)(BX + SI + 0x2)];
    // MOV AX,[0xdc04] (1000_C9C6 / 0x1C9C6)
    AX = UInt16[DS, 0xDC04];
    // ADD AX,CX (1000_C9C9 / 0x1C9C9)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // MOV [0xdbf6],AX (1000_C9CB / 0x1C9CB)
    UInt16[DS, 0xDBF6] = AX;
    // MOV AX,[0xdc06] (1000_C9CE / 0x1C9CE)
    AX = UInt16[DS, 0xDC06];
    // ADC AX,BX (1000_C9D1 / 0x1C9D1)
    AX = Alu.Adc16(AX, BX);
    // MOV [0xdbf8],AX (1000_C9D3 / 0x1C9D3)
    UInt16[DS, 0xDBF8] = AX;
    // MOV AX,[0xdc08] (1000_C9D6 / 0x1C9D6)
    AX = UInt16[DS, 0xDC08];
    // SUB AX,CX (1000_C9D9 / 0x1C9D9)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // MOV [0xdbfa],AX (1000_C9DB / 0x1C9DB)
    UInt16[DS, 0xDBFA] = AX;
    // MOV AX,[0xdc0a] (1000_C9DE / 0x1C9DE)
    AX = UInt16[DS, 0xDC0A];
    // SBB AX,BX (1000_C9E1 / 0x1C9E1)
    AX = Alu.Sbb16(AX, BX);
    // MOV [0xdbfc],AX (1000_C9E3 / 0x1C9E3)
    UInt16[DS, 0xDBFC] = AX;
    // CLC  (1000_C9E6 / 0x1C9E6)
    CarryFlag = false;
    label_1000_C9E7_1C9E7:
    // RET  (1000_C9E7 / 0x1C9E7)
    return NearRet();
  }
  
  public Action hnm_do_frame_skippable_ida_1000_C9E8_1C9E8(int gotoTarget) {
    label_1000_C9E8_1C9E8:
    // CALL 0x1000:ca60 (1000_C9E8 / 0x1C9E8)
    NearCall(cs1, 0xC9EB, hnm_do_frame_ida_1000_CA60_1CA60);
    // CALL 0x1000:dd63 (1000_C9EB / 0x1C9EB)
    NearCall(cs1, 0xC9EE, stc_on_user_input_ida_1000_DD63_1DD63);
    // JC 0x1000:c9f1 (1000_C9EE / 0x1C9EE)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:de4e (1000_C9F1 / 0x1C9F1)
      // Jump converted to entry function call
      return SetCEE8To0_1000_DE4E_1DE4E(0);
    }
    // RET  (1000_C9F0 / 0x1C9F0)
    return NearRet();
    label_1000_C9F1_1C9F1:
    // JMP 0x1000:de4e (1000_C9F1 / 0x1C9F1)
    // Jump converted to entry function call
    return SetCEE8To0_1000_DE4E_1DE4E(0);
  }
  
  public Action do_frame_and_check_if_frame_advanced_ida_1000_C9F4_1C9F4(int gotoTarget) {
    label_1000_C9F4_1C9F4:
    // PUSH word ptr [0xdbe8] (1000_C9F4 / 0x1C9F4)
    Stack.Push(UInt16[DS, 0xDBE8]);
    // CALL 0x1000:ca60 (1000_C9F8 / 0x1C9F8)
    NearCall(cs1, 0xC9FB, hnm_do_frame_ida_1000_CA60_1CA60);
    // POP AX (1000_C9FB / 0x1C9FB)
    AX = Stack.Pop();
    // CMP AX,word ptr [0xdbe8] (1000_C9FC / 0x1C9FC)
    Alu.Sub16(AX, UInt16[DS, 0xDBE8]);
    // RET  (1000_CA00 / 0x1CA00)
    return NearRet();
  }
  
  public Action hnm_close_resource_ida_1000_CA01_1CA01(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCA01: goto label_1000_CA01_1CA01;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CA01_1CA01:
    // XOR BX,BX (1000_CA01 / 0x1CA01)
    BX = 0;
    // XCHG word ptr [0x35a6],BX (1000_CA03 / 0x1CA03)
    ushort tmp_1000_CA03 = UInt16[DS, 0x35A6];
    UInt16[DS, 0x35A6] = BX;
    BX = tmp_1000_CA03;
    // OR BX,BX (1000_CA07 / 0x1CA07)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:ca18 (1000_CA09 / 0x1CA09)
    if(ZeroFlag) {
      goto label_1000_CA18_1CA18;
    }
    // CALL 0x1000:ce01 (1000_CA0B / 0x1CA0B)
    NearCall(cs1, 0xCA0E, unknown_1000_CE01_1CE01);
    // CMP BX,word ptr [0xdbba] (1000_CA0E / 0x1CA0E)
    Alu.Sub16(BX, UInt16[DS, 0xDBBA]);
    // JZ 0x1000:ca18 (1000_CA12 / 0x1CA12)
    if(ZeroFlag) {
      goto label_1000_CA18_1CA18;
    }
    // MOV AH,0x3e (1000_CA14 / 0x1CA14)
    AH = 0x3E;
    // INT 0x21 (1000_CA16 / 0x1CA16)
    Interrupt(0x21);
    label_1000_CA18_1CA18:
    // XOR CX,CX (1000_CA18 / 0x1CA18)
    CX = 0;
    // RET  (1000_CA1A / 0x1CA1A)
    return NearRet();
  }
  
  public Action hnm_load_ida_1000_CA1B_1CA1B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCA1B: goto label_1000_CA1B_1CA1B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CA1B_1CA1B:
    // CALL 0x1000:c92b (1000_CA1B / 0x1CA1B)
    NearCall(cs1, 0xCA1E, hnm_reset_and_read_header_ida_1000_C92B_1C92B);
    // JC 0x1000:ca01 (1000_CA1E / 0x1CA1E)
    if(CarryFlag) {
      // Jump converted to entry function call
      return hnm_close_resource_ida_1000_CA01_1CA01(0);
    }
    // CALL 0x1000:cda0 (1000_CA20 / 0x1CA20)
    NearCall(cs1, 0xCA23, hnm_prepare_header_read_ida_1000_CDA0_1CDA0);
    // JC 0x1000:ca01 (1000_CA23 / 0x1CA23)
    if(CarryFlag) {
      // Jump converted to entry function call
      return hnm_close_resource_ida_1000_CA01_1CA01(0);
    }
    // MOV byte ptr [0xdce6],0x0 (1000_CA25 / 0x1CA25)
    UInt8[DS, 0xDCE6] = 0x0;
    // LES SI,[0xdc10] (1000_CA2A / 0x1CA2A)
    SI = UInt16[DS, 0xDC10];
    ES = UInt16[DS, 0xDC12];
    // LODSW ES:SI (1000_CA2E / 0x1CA2E)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,word ptr [0xdbde] (1000_CA30 / 0x1CA30)
    BP = UInt16[DS, 0xDBDE];
    // CALL 0x1000:ccf4 (1000_CA34 / 0x1CA34)
    NearCall(cs1, 0xCA37, unknown_1000_CCF4_1CCF4);
    // CALL 0x1000:aa0f (1000_CA37 / 0x1CA37)
    NearCall(cs1, 0xCA3A, decode_sd_block_ida_1000_AA0F_1AA0F);
    // CALL 0x1000:cc96 (1000_CA3A / 0x1CA3A)
    NearCall(cs1, 0xCA3D, hnm_decode_video_frame_ida_1000_CC96_1CC96);
    // CALL 0x1000:ce1a (1000_CA3D / 0x1CA3D)
    NearCall(cs1, 0xCA40, hnm_reset_ida_1000_CE1A_1CE1A);
    // INC word ptr [0xdbe8] (1000_CA40 / 0x1CA40)
    UInt16[DS, 0xDBE8] = Alu.Inc16(UInt16[DS, 0xDBE8]);
    // INC word ptr [0xdbea] (1000_CA44 / 0x1CA44)
    UInt16[DS, 0xDBEA] = Alu.Inc16(UInt16[DS, 0xDBEA]);
    // TEST byte ptr [0xdbfe],0x40 (1000_CA48 / 0x1CA48)
    Alu.And8(UInt8[DS, 0xDBFE], 0x40);
    // JNZ 0x1000:ca59 (1000_CA4D / 0x1CA4D)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return VideoPlayRelated_1000_CA59_1CA59(0);
    }
    // MOV CX,0x32 (1000_CA4F / 0x1CA4F)
    CX = 0x32;
    label_1000_CA52_1CA52:
    // PUSH CX (1000_CA52 / 0x1CA52)
    Stack.Push(CX);
    // CALL 0x1000:cb1a (1000_CA53 / 0x1CA53)
    NearCall(cs1, 0xCA56, unknown_1000_CB1A_1CB1A);
    // POP CX (1000_CA56 / 0x1CA56)
    CX = Stack.Pop();
    // LOOP 0x1000:ca52 (1000_CA57 / 0x1CA57)
    if(--CX != 0) {
      goto label_1000_CA52_1CA52;
    }
    // Function call generated as ASM continues to next function entry point without return
    return VideoPlayRelated_1000_CA59_1CA59(0);
  }
  
  public Action VideoPlayRelated_1000_CA59_1CA59(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCA59: goto label_1000_CA59_1CA59;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CA59_1CA59:
    // MOV AX,[0xce7a] (1000_CA59 / 0x1CA59)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc22],AX (1000_CA5C / 0x1CA5C)
    UInt16[DS, 0xDC22] = AX;
    // RET  (1000_CA5F / 0x1CA5F)
    return NearRet();
  }
  
  public Action hnm_do_frame_ida_1000_CA60_1CA60(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCA60: goto label_1000_CA60_1CA60;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CA60_1CA60:
    // CMP word ptr [0x35a6],0x0 (1000_CA60 / 0x1CA60)
    Alu.Sub16(UInt16[DS, 0x35A6], 0x0);
    // JZ 0x1000:ca9a (1000_CA65 / 0x1CA65)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_CA9A_1CA9A(0);
    }
    // CMP byte ptr [0xdbfe],0x0 (1000_CA67 / 0x1CA67)
    Alu.Sub8(UInt8[DS, 0xDBFE], 0x0);
    // JNS 0x1000:ca71 (1000_CA6C / 0x1CA6C)
    if(!SignFlag) {
      goto label_1000_CA71_1CA71;
    }
    // CALL 0x1000:ca8f (1000_CA6E / 0x1CA6E)
    NearCall(cs1, 0xCA71, unknown_1000_CA8F_1CA8F);
    label_1000_CA71_1CA71:
    // CALL 0x1000:caa0 (1000_CA71 / 0x1CA71)
    NearCall(cs1, 0xCA74, unknown_1000_CAA0_1CAA0);
    // JNC 0x1000:ca7b (1000_CA74 / 0x1CA74)
    if(!CarryFlag) {
      goto label_1000_CA7B_1CA7B;
    }
    // CALL 0x1000:cb1a (1000_CA76 / 0x1CA76)
    NearCall(cs1, 0xCA79, unknown_1000_CB1A_1CB1A);
    // JMP 0x1000:ca60 (1000_CA79 / 0x1CA79)
    goto label_1000_CA60_1CA60;
    label_1000_CA7B_1CA7B:
    // CALL 0x1000:cad4 (1000_CA7B / 0x1CA7B)
    NearCall(cs1, 0xCA7E, unknown_1000_CAD4_1CAD4);
    // JC 0x1000:ca8f (1000_CA7E / 0x1CA7E)
    if(CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_CA8F_1CA8F(0);
    }
    // MOV AX,[0xdc1e] (1000_CA80 / 0x1CA80)
    AX = UInt16[DS, 0xDC1E];
    // INC AX (1000_CA83 / 0x1CA83)
    AX = Alu.Inc16(AX);
    // JZ 0x1000:ca89 (1000_CA84 / 0x1CA84)
    if(ZeroFlag) {
      goto label_1000_CA89_1CA89;
    }
    // CALL 0x1000:ce3b (1000_CA86 / 0x1CA86)
    NearCall(cs1, 0xCA89, hnm_handle_pal_chunk_ida_1000_CE3B_1CE3B);
    label_1000_CA89_1CA89:
    // CALL 0x1000:cc96 (1000_CA89 / 0x1CA89)
    NearCall(cs1, 0xCA8C, hnm_decode_video_frame_ida_1000_CC96_1CC96);
    // CALL 0x1000:cc4e (1000_CA8C / 0x1CA8C)
    NearCall(cs1, 0xCA8F, unknown_1000_CC4E_1CC4E);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_CA8F_1CA8F(0);
  }
  
  public Action unknown_1000_CA8F_1CA8F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCA8F: goto label_1000_CA8F_1CA8F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CA8F_1CA8F:
    // MOV AL,[0xdbfe] (1000_CA8F / 0x1CA8F)
    AL = UInt8[DS, 0xDBFE];
    // AND AL,0x80 (1000_CA92 / 0x1CA92)
    // AL &= 0x80;
    AL = Alu.And8(AL, 0x80);
    // MOV [0xdbb5],AL (1000_CA94 / 0x1CA94)
    UInt8[DS, 0xDBB5] = AL;
    // CALL 0x1000:cb1a (1000_CA97 / 0x1CA97)
    NearCall(cs1, 0xCA9A, unknown_1000_CB1A_1CB1A);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_CA9A_1CA9A(0);
  }
  
  public Action unknown_1000_CA9A_1CA9A(int gotoTarget) {
    label_1000_CA9A_1CA9A:
    // MOV byte ptr [0xdbb5],0x0 (1000_CA9A / 0x1CA9A)
    UInt8[DS, 0xDBB5] = 0x0;
    // RET  (1000_CA9F / 0x1CA9F)
    return NearRet();
  }
  
  public Action unknown_1000_CAA0_1CAA0(int gotoTarget) {
    label_1000_CAA0_1CAA0:
    // CMP word ptr [0xdc16],0x0 (1000_CAA0 / 0x1CAA0)
    Alu.Sub16(UInt16[DS, 0xDC16], 0x0);
    // JA 0x1000:cad3 (1000_CAA5 / 0x1CAA5)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_CAD3 / 0x1CAD3)
      return NearRet();
    }
    // MOV CX,word ptr [0xdc1a] (1000_CAA7 / 0x1CAA7)
    CX = UInt16[DS, 0xDC1A];
    // STC  (1000_CAAB / 0x1CAAB)
    CarryFlag = true;
    // JCXZ 0x1000:cad3 (1000_CAAC / 0x1CAAC)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_CAD3 / 0x1CAD3)
      return NearRet();
    }
    // LES SI,[0xdc10] (1000_CAAE / 0x1CAAE)
    SI = UInt16[DS, 0xDC10];
    ES = UInt16[DS, 0xDC12];
    // LODSW ES:SI (1000_CAB2 / 0x1CAB2)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP word ptr ES:[SI],0x6d6d (1000_CAB4 / 0x1CAB4)
    Alu.Sub16(UInt16[ES, SI], 0x6D6D);
    // JZ 0x1000:cabf (1000_CAB9 / 0x1CAB9)
    if(ZeroFlag) {
      goto label_1000_CABF_1CABF;
    }
    // CMP CX,AX (1000_CABB / 0x1CABB)
    Alu.Sub16(CX, AX);
    // JC 0x1000:cad3 (1000_CABD / 0x1CABD)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CAD3 / 0x1CAD3)
      return NearRet();
    }
    label_1000_CABF_1CABF:
    // MOV BP,word ptr [0xdbd6] (1000_CABF / 0x1CABF)
    BP = UInt16[DS, 0xDBD6];
    // TEST byte ptr [0xdbfe],0x40 (1000_CAC3 / 0x1CAC3)
    Alu.And8(UInt8[DS, 0xDBFE], 0x40);
    // JZ 0x1000:cace (1000_CAC8 / 0x1CAC8)
    if(ZeroFlag) {
      goto label_1000_CACE_1CACE;
    }
    // MOV BP,word ptr [0xdc32] (1000_CACA / 0x1CACA)
    BP = UInt16[DS, 0xDC32];
    label_1000_CACE_1CACE:
    // CALL 0x1000:ccf4 (1000_CACE / 0x1CACE)
    NearCall(cs1, 0xCAD1, unknown_1000_CCF4_1CCF4);
    // XOR AX,AX (1000_CAD1 / 0x1CAD1)
    AX = 0;
    label_1000_CAD3_1CAD3:
    // RET  (1000_CAD3 / 0x1CAD3)
    return NearRet();
  }
  
  public Action unknown_1000_CAD4_1CAD4(int gotoTarget) {
    label_1000_CAD4_1CAD4:
    // MOV AX,[0xdc1c] (1000_CAD4 / 0x1CAD4)
    AX = UInt16[DS, 0xDC1C];
    // INC AX (1000_CAD7 / 0x1CAD7)
    AX = Alu.Inc16(AX);
    // JNZ 0x1000:caf0 (1000_CAD8 / 0x1CAD8)
    if(!ZeroFlag) {
      goto label_1000_CAF0_1CAF0;
    }
    // MOV AX,[0xce7a] (1000_CADA / 0x1CADA)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,word ptr [0xdc22] (1000_CADD / 0x1CADD)
    // AX -= UInt16[DS, 0xDC22];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDC22]);
    // OR AH,AH (1000_CAE1 / 0x1CAE1)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JNZ 0x1000:caeb (1000_CAE3 / 0x1CAE3)
    if(!ZeroFlag) {
      goto label_1000_CAEB_1CAEB;
    }
    // CMP AL,byte ptr [0xdbff] (1000_CAE5 / 0x1CAE5)
    Alu.Sub8(AL, UInt8[DS, 0xDBFF]);
    // JC 0x1000:caef (1000_CAE9 / 0x1CAE9)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CAEF / 0x1CAEF)
      return NearRet();
    }
    label_1000_CAEB_1CAEB:
    // CALL 0x1000:ca59 (1000_CAEB / 0x1CAEB)
    NearCall(cs1, 0xCAEE, VideoPlayRelated_1000_CA59_1CA59);
    // CLC  (1000_CAEE / 0x1CAEE)
    CarryFlag = false;
    label_1000_CAEF_1CAEF:
    // RET  (1000_CAEF / 0x1CAEF)
    return NearRet();
    label_1000_CAF0_1CAF0:
    // MOV SI,word ptr [0x3824] (1000_CAF0 / 0x1CAF0)
    SI = UInt16[DS, 0x3824];
    // CMP byte ptr [SI + 0x6],0x1 (1000_CAF4 / 0x1CAF4)
    Alu.Sub8(UInt8[DS, (ushort)(SI + 0x6)], 0x1);
    // CMC  (1000_CAF8 / 0x1CAF8)
    CarryFlag = !CarryFlag;
    // JC 0x1000:caef (1000_CAF9 / 0x1CAF9)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CAEF / 0x1CAEF)
      return NearRet();
    }
    // CALL 0x1000:a9f4 (1000_CAFB / 0x1CAFB)
    throw FailAsUntested("Could not find a valid function at address 1000_A9F4 / 0x1A9F4");
    // CLC  (1000_CAFE / 0x1CAFE)
    CarryFlag = false;
    // RET  (1000_CAFF / 0x1CAFF)
    return NearRet();
  }
  
  public Action unknown_1000_CB1A_1CB1A(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCB00: break;
      case 0: goto entry; break; //
    }
    label_1000_CB00_1CB00:
    // MOV AX,[0xdbea] (1000_CB00 / 0x1CB00)
    AX = UInt16[DS, 0xDBEA];
    // CMP AX,word ptr [0xdbee] (1000_CB03 / 0x1CB03)
    Alu.Sub16(AX, UInt16[DS, 0xDBEE]);
    // JZ 0x1000:cb61 (1000_CB07 / 0x1CB07)
    if(ZeroFlag) {
      goto label_1000_CB61_1CB61;
    }
    // MOV AX,[0xdc08] (1000_CB09 / 0x1CB09)
    AX = UInt16[DS, 0xDC08];
    // OR AX,word ptr [0xdc0a] (1000_CB0C / 0x1CB0C)
    // AX |= UInt16[DS, 0xDC0A];
    AX = Alu.Or16(AX, UInt16[DS, 0xDC0A]);
    // JZ 0x1000:cb61 (1000_CB10 / 0x1CB10)
    if(ZeroFlag) {
      goto label_1000_CB61_1CB61;
    }
    // CALL 0x1000:cd8f (1000_CB12 / 0x1CB12)
    NearCall(cs1, 0xCB15, hnm_read_header_size_ida_1000_CD8F_1CD8F);
    // JC 0x1000:cb44 (1000_CB15 / 0x1CB15)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CB44 / 0x1CB44)
      return NearRet();
    }
    // CALL 0x1000:cc0c (1000_CB17 / 0x1CB17)
    NearCall(cs1, 0xCB1A, unknown_1000_CC0C_1CC0C);
    entry:
    label_1000_CB1A_1CB1A:
    // MOV CX,word ptr [0xdc20] (1000_CB1A / 0x1CB1A)
    CX = UInt16[DS, 0xDC20];
    // JCXZ 0x1000:cb00 (1000_CB1E / 0x1CB1E)
    if(CX == 0) {
      goto label_1000_CB00_1CB00;
    }
    // CMP byte ptr [0xdbfe],0x0 (1000_CB20 / 0x1CB20)
    Alu.Sub8(UInt8[DS, 0xDBFE], 0x0);
    // JS 0x1000:cb38 (1000_CB25 / 0x1CB25)
    if(SignFlag) {
      goto label_1000_CB38_1CB38;
    }
    // MOV AX,[0xdc04] (1000_CB27 / 0x1CB27)
    AX = UInt16[DS, 0xDC04];
    // NEG AX (1000_CB2A / 0x1CB2A)
    AX = Alu.Sub16(0, AX);
    // AND AX,0x7ff (1000_CB2C / 0x1CB2C)
    // AX &= 0x7FF;
    AX = Alu.And16(AX, 0x7FF);
    // ADD AH,0x8 (1000_CB2F / 0x1CB2F)
    // AH += 0x8;
    AH = Alu.Add8(AH, 0x8);
    // CMP AX,CX (1000_CB32 / 0x1CB32)
    Alu.Sub16(AX, CX);
    // JNC 0x1000:cb38 (1000_CB34 / 0x1CB34)
    if(!CarryFlag) {
      goto label_1000_CB38_1CB38;
    }
    // MOV CX,AX (1000_CB36 / 0x1CB36)
    CX = AX;
    label_1000_CB38_1CB38:
    // CALL 0x1000:cc2b (1000_CB38 / 0x1CB38)
    NearCall(cs1, 0xCB3B, unknown_1000_CC2B_1CC2B);
    // JC 0x1000:cb44 (1000_CB3B / 0x1CB3B)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CB44 / 0x1CB44)
      return NearRet();
    }
    // SUB word ptr [0xdc20],CX (1000_CB3D / 0x1CB3D)
    // UInt16[DS, 0xDC20] -= CX;
    UInt16[DS, 0xDC20] = Alu.Sub16(UInt16[DS, 0xDC20], CX);
    // JMP 0x1000:cdbf (1000_CB41 / 0x1CB41)
    // Jump converted to entry function call
    return HnmReadFromFileHandle_1000_CDBF_1CDBF(0);
    label_1000_CB44_1CB44:
    // RET  (1000_CB44 / 0x1CB44)
    return NearRet();
    label_1000_CB45_1CB45:
    // MOV [0xdc00],AX (1000_CB45 / 0x1CB45)
    UInt16[DS, 0xDC00] = AX;
    // CALL 0x1000:c93c (1000_CB48 / 0x1CB48)
    NearCall(cs1, 0xCB4B, hnm_read_header_ida_1000_C93C_1C93C);
    // RET  (1000_CB4B / 0x1CB4B)
    return NearRet();
    label_1000_CB4C_1CB4C:
    // OR byte ptr [0xdbe7],0x1 (1000_CB4C / 0x1CB4C)
    // UInt8[DS, 0xDBE7] |= 0x1;
    UInt8[DS, 0xDBE7] = Alu.Or8(UInt8[DS, 0xDBE7], 0x1);
    // CMP word ptr [0xdc1a],0x0 (1000_CB51 / 0x1CB51)
    Alu.Sub16(UInt16[DS, 0xDC1A], 0x0);
    // JNZ 0x1000:cb60 (1000_CB56 / 0x1CB56)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_CB60 / 0x1CB60)
      return NearRet();
    }
    // OR byte ptr [0xdbe7],0x2 (1000_CB58 / 0x1CB58)
    // UInt8[DS, 0xDBE7] |= 0x2;
    UInt8[DS, 0xDBE7] = Alu.Or8(UInt8[DS, 0xDBE7], 0x2);
    // CALL 0x1000:ca01 (1000_CB5D / 0x1CB5D)
    NearCall(cs1, 0xCB60, hnm_close_resource_ida_1000_CA01_1CA01);
    label_1000_CB60_1CB60:
    // RET  (1000_CB60 / 0x1CB60)
    return NearRet();
    label_1000_CB61_1CB61:
    // TEST byte ptr [0xdbfe],0x1 (1000_CB61 / 0x1CB61)
    Alu.And8(UInt8[DS, 0xDBFE], 0x1);
    // JZ 0x1000:cb4c (1000_CB66 / 0x1CB66)
    if(ZeroFlag) {
      goto label_1000_CB4C_1CB4C;
    }
    // MOV CX,0x1000 (1000_CB68 / 0x1CB68)
    CX = 0x1000;
    // CALL 0x1000:cc2b (1000_CB6B / 0x1CB6B)
    NearCall(cs1, 0xCB6E, unknown_1000_CC2B_1CC2B);
    // JC 0x1000:cb44 (1000_CB6E / 0x1CB6E)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CB44 / 0x1CB44)
      return NearRet();
    }
    // MOV AX,[0xdbea] (1000_CB70 / 0x1CB70)
    AX = UInt16[DS, 0xDBEA];
    // CALL 0x1000:ce07 (1000_CB73 / 0x1CB73)
    NearCall(cs1, 0xCB76, unknown_1000_CE07_1CE07);
    // MOV [0xdbec],AX (1000_CB76 / 0x1CB76)
    UInt16[DS, 0xDBEC] = AX;
    // CALL 0x1000:ca9a (1000_CB79 / 0x1CB79)
    NearCall(cs1, 0xCB7C, unknown_1000_CA9A_1CA9A);
    // MOV AX,[0xdc02] (1000_CB7C / 0x1CB7C)
    AX = UInt16[DS, 0xDC02];
    // CMP AX,word ptr [0xdc00] (1000_CB7F / 0x1CB7F)
    Alu.Sub16(AX, UInt16[DS, 0xDC00]);
    // JZ 0x1000:cba0 (1000_CB83 / 0x1CB83)
    if(ZeroFlag) {
      goto label_1000_CBA0_1CBA0;
    }
    // CALL 0x1000:c921 (1000_CB85 / 0x1CB85)
    NearCall(cs1, 0xCB88, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921);
    // TEST byte ptr [BX],0x8 (1000_CB88 / 0x1CB88)
    Alu.And8(UInt8[DS, BX], 0x8);
    // JZ 0x1000:cb45 (1000_CB8B / 0x1CB8B)
    if(ZeroFlag) {
      goto label_1000_CB45_1CB45;
    }
    // CMP word ptr [BX + -0x6],0x0 (1000_CB8D / 0x1CB8D)
    Alu.Sub16(UInt16[DS, (ushort)(BX - 0x6)], 0x0);
    // JZ 0x1000:cb45 (1000_CB91 / 0x1CB91)
    if(ZeroFlag) {
      goto label_1000_CB45_1CB45;
    }
    // MOV [0xdc00],AX (1000_CB93 / 0x1CB93)
    UInt16[DS, 0xDC00] = AX;
    // LEA SI,[BX + -0x8] (1000_CB96 / 0x1CB96)
    SI = (ushort)(BX - 0x8);
    // MOV DI,0xdbf6 (1000_CB99 / 0x1CB99)
    DI = 0xDBF6;
    // CALL 0x1000:5b99 (1000_CB9C / 0x1CB9C)
    NearCall(cs1, 0xCB9F, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    // MOVSB ES:DI,SI (1000_CB9F / 0x1CB9F)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_CBA0_1CBA0:
    // MOV AX,[0xdbfa] (1000_CBA0 / 0x1CBA0)
    AX = UInt16[DS, 0xDBFA];
    // MOV [0xdc08],AX (1000_CBA3 / 0x1CBA3)
    UInt16[DS, 0xDC08] = AX;
    // MOV AX,[0xdbfc] (1000_CBA6 / 0x1CBA6)
    AX = UInt16[DS, 0xDBFC];
    // MOV [0xdc0a],AX (1000_CBA9 / 0x1CBA9)
    UInt16[DS, 0xDC0A] = AX;
    // MOV AX,[0xdbf6] (1000_CBAC / 0x1CBAC)
    AX = UInt16[DS, 0xDBF6];
    // MOV [0xdc04],AX (1000_CBAF / 0x1CBAF)
    UInt16[DS, 0xDC04] = AX;
    // MOV AX,[0xdbf8] (1000_CBB2 / 0x1CBB2)
    AX = UInt16[DS, 0xDBF8];
    // MOV [0xdc06],AX (1000_CBB5 / 0x1CBB5)
    UInt16[DS, 0xDC06] = AX;
    // TEST byte ptr [0xdbfe],0x4 (1000_CBB8 / 0x1CBB8)
    Alu.And8(UInt8[DS, 0xDBFE], 0x4);
    // JZ 0x1000:cc09 (1000_CBBD / 0x1CBBD)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:cb00 (1000_CC09 / 0x1CC09)
      goto label_1000_CB00_1CB00;
    }
    // MOV AX,[0xdc00] (1000_CBBF / 0x1CBBF)
    AX = UInt16[DS, 0xDC00];
    // ADD AX,0x61 (1000_CBC2 / 0x1CBC2)
    // AX += 0x61;
    AX = Alu.Add16(AX, 0x61);
    // CALL 0x1000:c13e (1000_CBC5 / 0x1CBC5)
    NearCall(cs1, 0xCBC8, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV BP,word ptr [0xdbb0] (1000_CBC8 / 0x1CBC8)
    BP = UInt16[DS, 0xDBB0];
    // MOV CX,0x4 (1000_CBCC / 0x1CBCC)
    CX = 0x4;
    label_1000_CBCF_1CBCF:
    // LES DI,[0xdc0c] (1000_CBCF / 0x1CBCF)
    DI = UInt16[DS, 0xDC0C];
    ES = UInt16[DS, 0xDC0E];
    // MOV AX,0x2 (1000_CBD3 / 0x1CBD3)
    AX = 0x2;
    // CALL 0x1000:cdf7 (1000_CBD6 / 0x1CBD6)
    throw FailAsUntested("Could not find a valid function at address 1000_CDF7 / 0x1CDF7");
    // MOV AX,0xa (1000_CBD9 / 0x1CBD9)
    AX = 0xA;
    // STOSW ES:DI (1000_CBDC / 0x1CBDC)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV SI,DI (1000_CBDD / 0x1CBDD)
    SI = DI;
    // CALL 0x1000:cc0c (1000_CBDF / 0x1CBDF)
    NearCall(cs1, 0xCBE2, unknown_1000_CC0C_1CC0C);
    // MOV ES,word ptr [0xdbb2] (1000_CBE2 / 0x1CBE2)
    ES = UInt16[DS, 0xDBB2];
    // PUSH word ptr ES:[BP + 0x0] (1000_CBE6 / 0x1CBE6)
    Stack.Push(UInt16[ES, BP]);
    // PUSH ES (1000_CBEA / 0x1CBEA)
    Stack.Push(ES);
    // LES DI,[0xdc0c] (1000_CBEB / 0x1CBEB)
    DI = UInt16[DS, 0xDC0C];
    ES = UInt16[DS, 0xDC0E];
    // MOV AX,0x6d6d (1000_CBEF / 0x1CBEF)
    AX = 0x6D6D;
    // STOSW ES:DI (1000_CBF2 / 0x1CBF2)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,BP (1000_CBF3 / 0x1CBF3)
    AX = BP;
    // STOSW ES:DI (1000_CBF5 / 0x1CBF5)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP AX (1000_CBF6 / 0x1CBF6)
    AX = Stack.Pop();
    // STOSW ES:DI (1000_CBF7 / 0x1CBF7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP AX (1000_CBF8 / 0x1CBF8)
    AX = Stack.Pop();
    // STOSW ES:DI (1000_CBF9 / 0x1CBF9)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD BP,AX (1000_CBFA / 0x1CBFA)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // MOV AX,0x8 (1000_CBFC / 0x1CBFC)
    AX = 0x8;
    // CALL 0x1000:cdf7 (1000_CBFF / 0x1CBFF)
    throw FailAsUntested("Could not find a valid function at address 1000_CDF7 / 0x1CDF7");
    // LOOP 0x1000:cbcf (1000_CC02 / 0x1CC02)
    if(--CX != 0) {
      goto label_1000_CBCF_1CBCF;
    }
    // MOV byte ptr [0xdbb5],0x80 (1000_CC04 / 0x1CC04)
    UInt8[DS, 0xDBB5] = 0x80;
    label_1000_CC09_1CC09:
    // JMP 0x1000:cb00 (1000_CC09 / 0x1CC09)
    goto label_1000_CB00_1CB00;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_CC0C_1CC0C(0);
  }
  
  public Action unknown_1000_CC0C_1CC0C(int gotoTarget) {
    label_1000_CC0C_1CC0C:
    // ADD SI,AX (1000_CC0C / 0x1CC0C)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JC 0x1000:cc16 (1000_CC0E / 0x1CC0E)
    if(CarryFlag) {
      goto label_1000_CC16_1CC16;
    }
    // CMP SI,word ptr [0xce74] (1000_CC10 / 0x1CC10)
    Alu.Sub16(SI, UInt16[DS, 0xCE74]);
    // JBE 0x1000:cc20 (1000_CC14 / 0x1CC14)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_CC20_1CC20;
    }
    label_1000_CC16_1CC16:
    // XOR CX,CX (1000_CC16 / 0x1CC16)
    CX = 0;
    // XCHG word ptr [0xdc0c],CX (1000_CC18 / 0x1CC18)
    ushort tmp_1000_CC18 = UInt16[DS, 0xDC0C];
    UInt16[DS, 0xDC0C] = CX;
    CX = tmp_1000_CC18;
    // MOV word ptr [0xdc18],CX (1000_CC1C / 0x1CC1C)
    UInt16[DS, 0xDC18] = CX;
    label_1000_CC20_1CC20:
    // SUB AX,0x2 (1000_CC20 / 0x1CC20)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // MOV [0xdc20],AX (1000_CC23 / 0x1CC23)
    UInt16[DS, 0xDC20] = AX;
    // INC word ptr [0xdbea] (1000_CC26 / 0x1CC26)
    UInt16[DS, 0xDBEA] = Alu.Inc16(UInt16[DS, 0xDBEA]);
    // RET  (1000_CC2A / 0x1CC2A)
    return NearRet();
  }
  
  public Action unknown_1000_CC2B_1CC2B(int gotoTarget) {
    label_1000_CC2B_1CC2B:
    // MOV AX,[0xdc0c] (1000_CC2B / 0x1CC2B)
    AX = UInt16[DS, 0xDC0C];
    // MOV BX,word ptr [0xdc10] (1000_CC2E / 0x1CC2E)
    BX = UInt16[DS, 0xDC10];
    // CMP AX,BX (1000_CC32 / 0x1CC32)
    Alu.Sub16(AX, BX);
    // JNC 0x1000:cc3f (1000_CC34 / 0x1CC34)
    if(!CarryFlag) {
      goto label_1000_CC3F_1CC3F;
    }
    // ADD AX,CX (1000_CC36 / 0x1CC36)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // ADD AX,0x12 (1000_CC38 / 0x1CC38)
    // AX += 0x12;
    AX = Alu.Add16(AX, 0x12);
    // CMP BX,AX (1000_CC3B / 0x1CC3B)
    Alu.Sub16(BX, AX);
    // JC 0x1000:cc4d (1000_CC3D / 0x1CC3D)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CC4D / 0x1CC4D)
      return NearRet();
    }
    label_1000_CC3F_1CC3F:
    // MOV AX,[0xdc1a] (1000_CC3F / 0x1CC3F)
    AX = UInt16[DS, 0xDC1A];
    // ADD AX,0xa (1000_CC42 / 0x1CC42)
    // AX += 0xA;
    AX = Alu.Add16(AX, 0xA);
    // ADD AX,CX (1000_CC45 / 0x1CC45)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // JC 0x1000:cc4d (1000_CC47 / 0x1CC47)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CC4D / 0x1CC4D)
      return NearRet();
    }
    // CMP word ptr [0xdc18],AX (1000_CC49 / 0x1CC49)
    Alu.Sub16(UInt16[DS, 0xDC18], AX);
    label_1000_CC4D_1CC4D:
    // RET  (1000_CC4D / 0x1CC4D)
    return NearRet();
  }
  
  public Action unknown_1000_CC4E_1CC4E(int gotoTarget) {
    label_1000_CC4E_1CC4E:
    // LES SI,[0xdc10] (1000_CC4E / 0x1CC4E)
    SI = UInt16[DS, 0xDC10];
    ES = UInt16[DS, 0xDC12];
    // LODSW ES:SI (1000_CC52 / 0x1CC52)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB word ptr [0xdc1a],AX (1000_CC54 / 0x1CC54)
    // UInt16[DS, 0xDC1A] -= AX;
    UInt16[DS, 0xDC1A] = Alu.Sub16(UInt16[DS, 0xDC1A], AX);
    // ADD SI,AX (1000_CC58 / 0x1CC58)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JC 0x1000:cc62 (1000_CC5A / 0x1CC5A)
    if(CarryFlag) {
      goto label_1000_CC62_1CC62;
    }
    // CMP SI,word ptr [0xce74] (1000_CC5C / 0x1CC5C)
    Alu.Sub16(SI, UInt16[DS, 0xCE74]);
    // JBE 0x1000:cc6a (1000_CC60 / 0x1CC60)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_CC6A_1CC6A;
    }
    label_1000_CC62_1CC62:
    // SUB AX,0x2 (1000_CC62 / 0x1CC62)
    // AX -= 0x2;
    AX = Alu.Sub16(AX, 0x2);
    // MOV [0xdc10],AX (1000_CC65 / 0x1CC65)
    UInt16[DS, 0xDC10] = AX;
    // XOR AX,AX (1000_CC68 / 0x1CC68)
    AX = 0;
    label_1000_CC6A_1CC6A:
    // ADD word ptr [0xdc10],AX (1000_CC6A / 0x1CC6A)
    // UInt16[DS, 0xDC10] += AX;
    UInt16[DS, 0xDC10] = Alu.Add16(UInt16[DS, 0xDC10], AX);
    // MOV AX,[0xdbe8] (1000_CC6E / 0x1CC6E)
    AX = UInt16[DS, 0xDBE8];
    // INC AX (1000_CC71 / 0x1CC71)
    AX = Alu.Inc16(AX);
    // CMP AX,word ptr [0xdbec] (1000_CC72 / 0x1CC72)
    Alu.Sub16(AX, UInt16[DS, 0xDBEC]);
    // JBE 0x1000:cc81 (1000_CC76 / 0x1CC76)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_CC81_1CC81;
    }
    // MOV AX,0x1 (1000_CC78 / 0x1CC78)
    AX = 0x1;
    // MOV word ptr [0xdbec],0xffff (1000_CC7B / 0x1CC7B)
    UInt16[DS, 0xDBEC] = 0xFFFF;
    label_1000_CC81_1CC81:
    // MOV [0xdbe8],AX (1000_CC81 / 0x1CC81)
    UInt16[DS, 0xDBE8] = AX;
    // RET  (1000_CC84 / 0x1CC84)
    return NearRet();
  }
  
  public Action CheckIfHnmComplete_1000_CC85_1CC85(int gotoTarget) {
    label_1000_CC85_1CC85:
    // CMP byte ptr [0xdbe7],0x0 (1000_CC85 / 0x1CC85)
    Alu.Sub8(UInt8[DS, 0xDBE7], 0x0);
    // JZ 0x1000:cc91 (1000_CC8A / 0x1CC8A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_CC91 / 0x1CC91)
      return NearRet();
    }
    // CMP byte ptr [0xdbe7],0x1 (1000_CC8C / 0x1CC8C)
    Alu.Sub8(UInt8[DS, 0xDBE7], 0x1);
    label_1000_CC91_1CC91:
    // RET  (1000_CC91 / 0x1CC91)
    return NearRet();
  }
  
  public Action hnm_decode_video_frame_ida_1000_CC96_1CC96(int gotoTarget) {
    switch(gotoTarget) {
      case 0x4AEB: break;
      case 0: goto entry; break; //
    }
    label_1000_4AEB_14AEB:
    // MOV AX,0x39 (1000_4AEB / 0x14AEB)
    AX = 0x39;
    // CALL 0x1000:c13e (1000_4AEE / 0x14AEE)
    NearCall(cs1, 0x4AF1, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:c07c (1000_4AF1 / 0x14AF1)
    NearCall(cs1, 0x4AF4, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:4d6c (1000_4AF4 / 0x14AF4)
    throw FailAsUntested("Could not find a valid function at address 1000_4D6C / 0x14D6C");
    // CALL 0x1000:4b2b (1000_4AF7 / 0x14AF7)
    NearCall(cs1, 0x4AFA, unknown_1000_4B2B_14B2B);
    // JMP 0x1000:c4dd (1000_4AFA / 0x14AFA)
    // Jump converted to entry function call
    return unknown_1000_C4DD_1C4DD(0);
    label_1000_4AFD_14AFD:
    // CMP byte ptr [0x227d],0x0 (1000_4AFD / 0x14AFD)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:4b16 (1000_4B02 / 0x14B02)
    if(!ZeroFlag) {
      goto label_1000_4B16_14B16;
    }
    // CALL 0x1000:4b2b (1000_4B04 / 0x14B04)
    NearCall(cs1, 0x4B07, unknown_1000_4B2B_14B2B);
    // MOV ES,word ptr [0xdbd8] (1000_4B07 / 0x14B07)
    ES = UInt16[DS, 0xDBD8];
    // MOV SI,word ptr [0xdbd6] (1000_4B0B / 0x14B0B)
    SI = UInt16[DS, 0xDBD6];
    // CALLF [0x38fd] (1000_4B0F / 0x14B0F)
    // Indirect call to [0x38fd], generating possible targets from emulator records
    uint targetAddress_1000_4B0F = (uint)(UInt16[DS, 0x38FF] * 0x10 + UInt16[DS, 0x38FD] - cs1 * 0x10);
    switch(targetAddress_1000_4B0F) {
      case 0x235E6 : FarCall(cs1, 0x4B13, unknown_334B_0136_335E6);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_4B0F);
        break;
    }
    // JMP 0x1000:dbe3 (1000_4B13 / 0x14B13)
    goto label_1000_DBE3_1DBE3;
    label_1000_4B16_14B16:
    // MOV AX,[0xdbd8] (1000_4B16 / 0x14B16)
    AX = UInt16[DS, 0xDBD8];
    // MOV SI,word ptr [0xdbd6] (1000_4B19 / 0x14B19)
    SI = UInt16[DS, 0xDBD6];
    // CMP AX,SI (1000_4B1D / 0x14B1D)
    Alu.Sub16(AX, SI);
    // JZ 0x1000:4b2a (1000_4B1F / 0x14B1F)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_4B2A / 0x14B2A)
      return NearRet();
    }
    // ADD AX,0x1e0 (1000_4B21 / 0x14B21)
    // AX += 0x1E0;
    AX = Alu.Add16(AX, 0x1E0);
    // MOV ES,AX (1000_4B24 / 0x14B24)
    ES = AX;
    // CALLF [0x38fd] (1000_4B26 / 0x14B26)
    // Indirect call to [0x38fd], generating possible targets from emulator records
    uint targetAddress_1000_4B26 = (uint)(UInt16[DS, 0x38FF] * 0x10 + UInt16[DS, 0x38FD] - cs1 * 0x10);
    switch(targetAddress_1000_4B26) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_4B26);
        break;
    }
    label_1000_4B2A_14B2A:
    // RET  (1000_4B2A / 0x14B2A)
    return NearRet();
    entry:
    label_1000_CC96_1CC96:
    // MOV AX,[0x38fb] (1000_CC96 / 0x1CC96)
    AX = UInt16[DS, 0x38FB];
    // MOV CS:[0xcc94],AX (1000_CC99 / 0x1CC99)
    UInt16[cs1, 0xCC94] = AX;
    // XOR BP,BP (1000_CC9D / 0x1CC9D)
    BP = 0;
    // XCHG word ptr [0xdc16],BP (1000_CC9F / 0x1CC9F)
    ushort tmp_1000_CC9F = UInt16[DS, 0xDC16];
    UInt16[DS, 0xDC16] = BP;
    BP = tmp_1000_CC9F;
    // OR BP,BP (1000_CCA3 / 0x1CCA3)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JZ 0x1000:cc4d (1000_CCA5 / 0x1CCA5)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_CC4D / 0x1CC4D)
      return NearRet();
    }
    // MOV SI,word ptr [0xdc14] (1000_CCA7 / 0x1CCA7)
    SI = UInt16[DS, 0xDC14];
    // MOV AL,[0xdbfe] (1000_CCAB / 0x1CCAB)
    AL = UInt8[DS, 0xDBFE];
    // TEST AL,0x30 (1000_CCAE / 0x1CCAE)
    Alu.And8(AL, 0x30);
    // JNZ 0x1000:ccea (1000_CCB0 / 0x1CCB0)
    if(!ZeroFlag) {
      goto label_1000_CCEA_1CCEA;
    }
    // PUSH DS (1000_CCB2 / 0x1CCB2)
    Stack.Push(DS);
    // TEST word ptr [0xdc24],0x400 (1000_CCB3 / 0x1CCB3)
    Alu.And16(UInt16[DS, 0xDC24], 0x400);
    // JNZ 0x1000:cce1 (1000_CCB9 / 0x1CCB9)
    if(!ZeroFlag) {
      goto label_1000_CCE1_1CCE1;
    }
    // MOV ES,word ptr [0xdbda] (1000_CCBB / 0x1CCBB)
    ES = UInt16[DS, 0xDBDA];
    // MOV BX,word ptr [0xdc00] (1000_CCBF / 0x1CCBF)
    BX = UInt16[DS, 0xDC00];
    // MOV DS,BP (1000_CCC3 / 0x1CCC3)
    DS = BP;
    // LODSW SI (1000_CCC5 / 0x1CCC5)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AH,0xf9 (1000_CCC6 / 0x1CCC6)
    // AH &= 0xF9;
    AH = Alu.And8(AH, 0xF9);
    // MOV DI,AX (1000_CCC9 / 0x1CCC9)
    DI = AX;
    // LODSW SI (1000_CCCB / 0x1CCCB)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_CCCC / 0x1CCCC)
    CX = AX;
    // OR CL,CL (1000_CCCE / 0x1CCCE)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JZ 0x1000:cce1 (1000_CCD0 / 0x1CCD0)
    if(ZeroFlag) {
      goto label_1000_CCE1_1CCE1;
    }
    // LODSW SI (1000_CCD2 / 0x1CCD2)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_CCD3 / 0x1CCD3)
    DX = AX;
    // LODSW SI (1000_CCD5 / 0x1CCD5)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,BX (1000_CCD6 / 0x1CCD6)
    ushort tmp_1000_CCD6 = AX;
    AX = BX;
    BX = tmp_1000_CCD6;
    // CMP AX,0x19 (1000_CCD7 / 0x1CCD7)
    Alu.Sub16(AX, 0x19);
    // JNC 0x1000:cce3 (1000_CCDA / 0x1CCDA)
    if(!CarryFlag) {
      goto label_1000_CCE3_1CCE3;
    }
    // CALLF [0x38c9] (1000_CCDC / 0x1CCDC)
    // Indirect call to [0x38c9], generating possible targets from emulator records
    uint targetAddress_1000_CCDC = (uint)(UInt16[SS, 0x38CB] * 0x10 + UInt16[SS, 0x38C9] - cs1 * 0x10);
    switch(targetAddress_1000_CCDC) {
      case 0x235BF : FarCall(cs1, 0xCCE1, VgaFunc05Blit_334B_010F_335BF);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_CCDC);
        break;
    }
    label_1000_CCE1_1CCE1:
    // POP DS (1000_CCE1 / 0x1CCE1)
    DS = Stack.Pop();
    // RET  (1000_CCE2 / 0x1CCE2)
    return NearRet();
    label_1000_CCE3_1CCE3:
    // CALLF [0xcc92] (1000_CCE3 / 0x1CCE3)
    // Indirect call to [0xcc92], generating possible targets from emulator records
    uint targetAddress_1000_CCE3 = (uint)(UInt16[cs1, 0xCC94] * 0x10 + UInt16[cs1, 0xCC92]);
    switch(targetAddress_1000_CCE3) {
      case 0x235E3 : FarCall(cs1, 0xCCE8, VgaFunc17CopyframebufferExplodeAndCenter_334B_0133_335E3);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_CCE3);
        break;
    }
    // POP DS (1000_CCE8 / 0x1CCE8)
    DS = Stack.Pop();
    // RET  (1000_CCE9 / 0x1CCE9)
    return NearRet();
    label_1000_CCEA_1CCEA:
    // TEST AL,0x20 (1000_CCEA / 0x1CCEA)
    Alu.And8(AL, 0x20);
    // JNZ 0x1000:ccf1 (1000_CCEC / 0x1CCEC)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:4aeb (1000_CCF1 / 0x1CCF1)
      goto label_1000_4AEB_14AEB;
    }
    // JMP 0x1000:4afd (1000_CCEE / 0x1CCEE)
    goto label_1000_4AFD_14AFD;
    label_1000_CCF1_1CCF1:
    // JMP 0x1000:4aeb (1000_CCF1 / 0x1CCF1)
    goto label_1000_4AEB_14AEB;
    label_1000_DBE3_1DBE3:
    // MOV AX,[0xdc44] (1000_DBE3 / 0x1DBE3)
    AX = UInt16[DS, 0xDC44];
    // CMP AX,0x98 (1000_DBE6 / 0x1DBE6)
    Alu.Sub16(AX, 0x98);
    // JC 0x1000:dbec (1000_DBE9 / 0x1DBE9)
    if(CarryFlag) {
      // Jump converted to entry function call
      return draw_mouse_ida_1000_DBEC_1DBEC(0);
    }
    // RET  (1000_DBEB / 0x1DBEB)
    return NearRet();
  }
  
  public Action unknown_1000_CCF4_1CCF4(int gotoTarget) {
    label_1000_CCF4_1CCF4:
    // MOV word ptr [0xdc1c],0xffff (1000_CCF4 / 0x1CCF4)
    UInt16[DS, 0xDC1C] = 0xFFFF;
    // MOV word ptr [0xdc1e],0xffff (1000_CCFA / 0x1CCFA)
    UInt16[DS, 0xDC1E] = 0xFFFF;
    // ADD AX,SI (1000_CD00 / 0x1CD00)
    // AX += SI;
    AX = Alu.Add16(AX, SI);
    // JC 0x1000:cd0a (1000_CD02 / 0x1CD02)
    if(CarryFlag) {
      goto label_1000_CD0A_1CD0A;
    }
    // CMP AX,word ptr [0xce74] (1000_CD04 / 0x1CD04)
    Alu.Sub16(AX, UInt16[DS, 0xCE74]);
    // JBE 0x1000:cd0c (1000_CD08 / 0x1CD08)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_CD0C_1CD0C;
    }
    label_1000_CD0A_1CD0A:
    // XOR SI,SI (1000_CD0A / 0x1CD0A)
    SI = 0;
    label_1000_CD0C_1CD0C:
    // LODSW ES:SI (1000_CD0C / 0x1CD0C)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,0x6473 (1000_CD0E / 0x1CD0E)
    Alu.Sub16(AX, 0x6473);
    // JNZ 0x1000:cd25 (1000_CD11 / 0x1CD11)
    if(!ZeroFlag) {
      goto label_1000_CD25_1CD25;
    }
    // CALL 0x1000:ae2f (1000_CD13 / 0x1CD13)
    NearCall(cs1, 0xCD16, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:cd1c (1000_CD16 / 0x1CD16)
    if(ZeroFlag) {
      goto label_1000_CD1C_1CD1C;
    }
    // MOV word ptr [0xdc1c],SI (1000_CD18 / 0x1CD18)
    UInt16[DS, 0xDC1C] = SI;
    label_1000_CD1C_1CD1C:
    // LODSW ES:SI (1000_CD1C / 0x1CD1C)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB AX,0x4 (1000_CD1E / 0x1CD1E)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // ADD SI,AX (1000_CD21 / 0x1CD21)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // LODSW ES:SI (1000_CD23 / 0x1CD23)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_CD25_1CD25:
    // CMP AX,0x6c70 (1000_CD25 / 0x1CD25)
    Alu.Sub16(AX, 0x6C70);
    // JNZ 0x1000:cd37 (1000_CD28 / 0x1CD28)
    if(!ZeroFlag) {
      goto label_1000_CD37_1CD37;
    }
    // LODSW ES:SI (1000_CD2A / 0x1CD2A)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV word ptr [0xdc1e],SI (1000_CD2C / 0x1CD2C)
    UInt16[DS, 0xDC1E] = SI;
    // SUB AX,0x4 (1000_CD30 / 0x1CD30)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // ADD SI,AX (1000_CD33 / 0x1CD33)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // JMP 0x1000:cd0c (1000_CD35 / 0x1CD35)
    goto label_1000_CD0C_1CD0C;
    label_1000_CD37_1CD37:
    // CMP AX,0x6d6d (1000_CD37 / 0x1CD37)
    Alu.Sub16(AX, 0x6D6D);
    // JNZ 0x1000:cd4e (1000_CD3A / 0x1CD3A)
    if(!ZeroFlag) {
      goto label_1000_CD4E_1CD4E;
    }
    // MOV BX,word ptr ES:[SI + 0x4] (1000_CD3C / 0x1CD3C)
    BX = UInt16[ES, (ushort)(SI + 0x4)];
    // LES SI,ES:[SI] (1000_CD40 / 0x1CD40)
    SI = UInt16[ES, SI];
    ES = UInt16[ES, (ushort)(SI + 2)];
    // LODSW ES:SI (1000_CD43 / 0x1CD43)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,BX (1000_CD45 / 0x1CD45)
    Alu.Sub16(AX, BX);
    // LODSW ES:SI (1000_CD47 / 0x1CD47)
    AX = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JZ 0x1000:cd4e (1000_CD49 / 0x1CD49)
    if(ZeroFlag) {
      goto label_1000_CD4E_1CD4E;
    }
    // JMP 0x1000:cc4e (1000_CD4B / 0x1CD4B)
    // Jump converted to entry function call
    return unknown_1000_CC4E_1CC4E(0);
    label_1000_CD4E_1CD4E:
    // PUSH DS (1000_CD4E / 0x1CD4E)
    Stack.Push(DS);
    // PUSH ES (1000_CD4F / 0x1CD4F)
    Stack.Push(ES);
    // MOV ES,BP (1000_CD50 / 0x1CD50)
    ES = BP;
    // XOR DI,DI (1000_CD52 / 0x1CD52)
    DI = 0;
    // TEST AH,0x4 (1000_CD54 / 0x1CD54)
    Alu.And8(AH, 0x4);
    // JZ 0x1000:cd5d (1000_CD57 / 0x1CD57)
    if(ZeroFlag) {
      goto label_1000_CD5D_1CD5D;
    }
    // MOV ES,word ptr [0xdbda] (1000_CD59 / 0x1CD59)
    ES = UInt16[DS, 0xDBDA];
    label_1000_CD5D_1CD5D:
    // MOV word ptr [0xdc16],ES (1000_CD5D / 0x1CD5D)
    UInt16[DS, 0xDC16] = ES;
    // MOV word ptr [0xdc14],DI (1000_CD61 / 0x1CD61)
    UInt16[DS, 0xDC14] = DI;
    // MOV [0xdc24],AX (1000_CD65 / 0x1CD65)
    UInt16[DS, 0xDC24] = AX;
    // POP DS (1000_CD68 / 0x1CD68)
    DS = Stack.Pop();
    // MOV CX,AX (1000_CD69 / 0x1CD69)
    CX = AX;
    // LODSW SI (1000_CD6B / 0x1CD6B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,CX (1000_CD6C / 0x1CD6C)
    ushort tmp_1000_CD6C = AX;
    AX = CX;
    CX = tmp_1000_CD6C;
    // TEST AH,0x4 (1000_CD6D / 0x1CD6D)
    Alu.And8(AH, 0x4);
    // JNZ 0x1000:cd7c (1000_CD70 / 0x1CD70)
    if(!ZeroFlag) {
      goto label_1000_CD7C_1CD7C;
    }
    // STOSW ES:DI (1000_CD72 / 0x1CD72)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,CX (1000_CD73 / 0x1CD73)
    ushort tmp_1000_CD73 = AX;
    AX = CX;
    CX = tmp_1000_CD73;
    // STOSW ES:DI (1000_CD74 / 0x1CD74)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JCXZ 0x1000:cd7f (1000_CD75 / 0x1CD75)
    if(CX == 0) {
      goto label_1000_CD7F_1CD7F;
    }
    // TEST CH,0x2 (1000_CD77 / 0x1CD77)
    Alu.And8(CH, 0x2);
    // JZ 0x1000:cd81 (1000_CD7A / 0x1CD7A)
    if(ZeroFlag) {
      goto label_1000_CD81_1CD81;
    }
    label_1000_CD7C_1CD7C:
    // CALL 0x1000:f403 (1000_CD7C / 0x1CD7C)
    NearCall(cs1, 0xCD7F, hsq_decomp_skip_header_dssi_to_esdi_ida_1000_F403_1F403);
    label_1000_CD7F_1CD7F:
    // POP DS (1000_CD7F / 0x1CD7F)
    DS = Stack.Pop();
    // RET  (1000_CD80 / 0x1CD80)
    return NearRet();
    label_1000_CD81_1CD81:
    // SUB SI,0x4 (1000_CD81 / 0x1CD81)
    // SI -= 0x4;
    SI = Alu.Sub16(SI, 0x4);
    // MOV AX,DS (1000_CD84 / 0x1CD84)
    AX = DS;
    // POP DS (1000_CD86 / 0x1CD86)
    DS = Stack.Pop();
    // MOV word ptr [0xdc14],SI (1000_CD87 / 0x1CD87)
    UInt16[DS, 0xDC14] = SI;
    // MOV [0xdc16],AX (1000_CD8B / 0x1CD8B)
    UInt16[DS, 0xDC16] = AX;
    // RET  (1000_CD8E / 0x1CD8E)
    return NearRet();
  }
  
  public Action hnm_read_header_size_ida_1000_CD8F_1CD8F(int gotoTarget) {
    label_1000_CD8F_1CD8F:
    // MOV CX,0x2 (1000_CD8F / 0x1CD8F)
    CX = 0x2;
    // CALL 0x1000:cdbf (1000_CD92 / 0x1CD92)
    NearCall(cs1, 0xCD95, HnmReadFromFileHandle_1000_CDBF_1CDBF);
    // JC 0x1000:cd9f (1000_CD95 / 0x1CD95)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CD9F / 0x1CD9F)
      return NearRet();
    }
    // LES SI,[0xdc0c] (1000_CD97 / 0x1CD97)
    SI = UInt16[DS, 0xDC0C];
    ES = UInt16[DS, 0xDC0E];
    // MOV AX,word ptr ES:[SI + -0x2] (1000_CD9B / 0x1CD9B)
    AX = UInt16[ES, (ushort)(SI - 0x2)];
    label_1000_CD9F_1CD9F:
    // RET  (1000_CD9F / 0x1CD9F)
    return NearRet();
  }
  
  public Action hnm_prepare_header_read_ida_1000_CDA0_1CDA0(int gotoTarget) {
    label_1000_CDA0_1CDA0:
    // CALL 0x1000:ce1a (1000_CDA0 / 0x1CDA0)
    NearCall(cs1, 0xCDA3, hnm_reset_ida_1000_CE1A_1CE1A);
    // CALL 0x1000:cd8f (1000_CDA3 / 0x1CDA3)
    NearCall(cs1, 0xCDA6, hnm_read_header_size_ida_1000_CD8F_1CD8F);
    // JC 0x1000:ce00 (1000_CDA6 / 0x1CDA6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CE00 / 0x1CE00)
      return NearRet();
    }
    // MOV DI,word ptr [0xce74] (1000_CDA8 / 0x1CDA8)
    DI = UInt16[DS, 0xCE74];
    // SUB DI,AX (1000_CDAC / 0x1CDAC)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // SUB DI,0x2 (1000_CDAE / 0x1CDAE)
    // DI -= 0x2;
    DI = Alu.Sub16(DI, 0x2);
    // MOV word ptr [0xdc10],DI (1000_CDB1 / 0x1CDB1)
    UInt16[DS, 0xDC10] = DI;
    // STOSW ES:DI (1000_CDB5 / 0x1CDB5)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV word ptr [0xdc0c],DI (1000_CDB6 / 0x1CDB6)
    UInt16[DS, 0xDC0C] = DI;
    // MOV CX,AX (1000_CDBA / 0x1CDBA)
    CX = AX;
    // SUB CX,0x2 (1000_CDBC / 0x1CDBC)
    // CX -= 0x2;
    CX = Alu.Sub16(CX, 0x2);
    // Function call generated as ASM continues to next function entry point without return
    return HnmReadFromFileHandle_1000_CDBF_1CDBF(0);
  }
  
  public Action HnmReadFromFileHandle_1000_CDBF_1CDBF(int gotoTarget) {
    switch(gotoTarget) {
      case 0xCDBF: goto label_1000_CDBF_1CDBF;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_CDBF_1CDBF:
    // MOV BX,word ptr [0x35a6] (1000_CDBF / 0x1CDBF)
    BX = UInt16[DS, 0x35A6];
    // CMP BX,0x1 (1000_CDC3 / 0x1CDC3)
    Alu.Sub16(BX, 0x1);
    // JC 0x1000:ce00 (1000_CDC6 / 0x1CDC6)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CE00 / 0x1CE00)
      return NearRet();
    }
    label_1000_CDC8_1CDC8:
    // PUSH CX (1000_CDC8 / 0x1CDC8)
    Stack.Push(CX);
    // MOV CX,word ptr [0xdc06] (1000_CDC9 / 0x1CDC9)
    CX = UInt16[DS, 0xDC06];
    // MOV DX,word ptr [0xdc04] (1000_CDCD / 0x1CDCD)
    DX = UInt16[DS, 0xDC04];
    // MOV AX,0x4200 (1000_CDD1 / 0x1CDD1)
    AX = 0x4200;
    // INT 0x21 (1000_CDD4 / 0x1CDD4)
    Interrupt(0x21);
    // POP CX (1000_CDD6 / 0x1CDD6)
    CX = Stack.Pop();
    // PUSH DS (1000_CDD7 / 0x1CDD7)
    Stack.Push(DS);
    // LDS DX,[0xdc0c] (1000_CDD8 / 0x1CDD8)
    DX = UInt16[DS, 0xDC0C];
    DS = UInt16[DS, 0xDC0E];
    // MOV AH,0x3f (1000_CDDC / 0x1CDDC)
    AH = 0x3F;
    // INT 0x21 (1000_CDDE / 0x1CDDE)
    Interrupt(0x21);
    // POP DS (1000_CDE0 / 0x1CDE0)
    DS = Stack.Pop();
    // CMP AX,CX (1000_CDE1 / 0x1CDE1)
    Alu.Sub16(AX, CX);
    // JC 0x1000:cdc8 (1000_CDE3 / 0x1CDE3)
    if(CarryFlag) {
      goto label_1000_CDC8_1CDC8;
    }
    // SUB word ptr [0xdc08],AX (1000_CDE5 / 0x1CDE5)
    // UInt16[DS, 0xDC08] -= AX;
    UInt16[DS, 0xDC08] = Alu.Sub16(UInt16[DS, 0xDC08], AX);
    // SBB word ptr [0xdc0a],0x0 (1000_CDE9 / 0x1CDE9)
    UInt16[DS, 0xDC0A] = Alu.Sbb16(UInt16[DS, 0xDC0A], 0x0);
    // ADD word ptr [0xdc04],AX (1000_CDEE / 0x1CDEE)
    // UInt16[DS, 0xDC04] += AX;
    UInt16[DS, 0xDC04] = Alu.Add16(UInt16[DS, 0xDC04], AX);
    // ADC word ptr [0xdc06],0x0 (1000_CDF2 / 0x1CDF2)
    UInt16[DS, 0xDC06] = Alu.Adc16(UInt16[DS, 0xDC06], 0x0);
    label_1000_CDF7_1CDF7:
    // ADD word ptr [0xdc0c],AX (1000_CDF7 / 0x1CDF7)
    // UInt16[DS, 0xDC0C] += AX;
    UInt16[DS, 0xDC0C] = Alu.Add16(UInt16[DS, 0xDC0C], AX);
    // ADD word ptr [0xdc1a],AX (1000_CDFB / 0x1CDFB)
    // UInt16[DS, 0xDC1A] += AX;
    UInt16[DS, 0xDC1A] = Alu.Add16(UInt16[DS, 0xDC1A], AX);
    // CLC  (1000_CDFF / 0x1CDFF)
    CarryFlag = false;
    label_1000_CE00_1CE00:
    // RET  (1000_CE00 / 0x1CE00)
    return NearRet();
  }
  
  public Action unknown_1000_CE01_1CE01(int gotoTarget) {
    label_1000_CE01_1CE01:
    // MOV word ptr [0xdbe8],0x0 (1000_CE01 / 0x1CE01)
    UInt16[DS, 0xDBE8] = 0x0;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_CE07_1CE07(0);
  }
  
  public Action unknown_1000_CE07_1CE07(int gotoTarget) {
    label_1000_CE07_1CE07:
    // MOV word ptr [0xdbea],0x0 (1000_CE07 / 0x1CE07)
    UInt16[DS, 0xDBEA] = 0x0;
    // MOV word ptr [0xdbec],0xffff (1000_CE0D / 0x1CE0D)
    UInt16[DS, 0xDBEC] = 0xFFFF;
    // MOV word ptr [0xdbee],0xffff (1000_CE13 / 0x1CE13)
    UInt16[DS, 0xDBEE] = 0xFFFF;
    // RET  (1000_CE19 / 0x1CE19)
    return NearRet();
  }
  
  public Action hnm_reset_ida_1000_CE1A_1CE1A(int gotoTarget) {
    label_1000_CE1A_1CE1A:
    // MOV AX,[0xdbde] (1000_CE1A / 0x1CE1A)
    AX = UInt16[DS, 0xDBDE];
    // MOV [0xdc0e],AX (1000_CE1D / 0x1CE1D)
    UInt16[DS, 0xDC0E] = AX;
    // MOV [0xdc12],AX (1000_CE20 / 0x1CE20)
    UInt16[DS, 0xDC12] = AX;
    // XOR AX,AX (1000_CE23 / 0x1CE23)
    AX = 0;
    // MOV [0xdc0c],AX (1000_CE25 / 0x1CE25)
    UInt16[DS, 0xDC0C] = AX;
    // MOV [0xdc10],AX (1000_CE28 / 0x1CE28)
    UInt16[DS, 0xDC10] = AX;
    // MOV [0xdc1a],AX (1000_CE2B / 0x1CE2B)
    UInt16[DS, 0xDC1A] = AX;
    // MOV [0xdc20],AX (1000_CE2E / 0x1CE2E)
    UInt16[DS, 0xDC20] = AX;
    // MOV [0xdc16],AX (1000_CE31 / 0x1CE31)
    UInt16[DS, 0xDC16] = AX;
    // MOV AX,[0xce74] (1000_CE34 / 0x1CE34)
    AX = UInt16[DS, 0xCE74];
    // MOV [0xdc18],AX (1000_CE37 / 0x1CE37)
    UInt16[DS, 0xDC18] = AX;
    // RET  (1000_CE3A / 0x1CE3A)
    return NearRet();
  }
  
  public Action hnm_handle_pal_chunk_ida_1000_CE3B_1CE3B(int gotoTarget) {
    label_1000_CE3B_1CE3B:
    // LES SI,[0xdc0c] (1000_CE3B / 0x1CE3B)
    SI = UInt16[DS, 0xDC0C];
    ES = UInt16[DS, 0xDC0E];
    // MOV SI,word ptr [0xdc1e] (1000_CE3F / 0x1CE3F)
    SI = UInt16[DS, 0xDC1E];
    // CALL 0x1000:c1ba (1000_CE43 / 0x1CE43)
    NearCall(cs1, 0xCE46, hnm_apply_palette_ida_1000_C1BA_1C1BA);
    // CALLF [0x3935] (1000_CE46 / 0x1CE46)
    // Indirect call to [0x3935], generating possible targets from emulator records
    uint targetAddress_1000_CE46 = (uint)(UInt16[DS, 0x3937] * 0x10 + UInt16[DS, 0x3935] - cs1 * 0x10);
    switch(targetAddress_1000_CE46) {
      case 0x23610 : FarCall(cs1, 0xCE4A, unknown_334B_0160_33610);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_CE46);
        break;
    }
    // RET  (1000_CE4A / 0x1CE4A)
    return NearRet();
  }
  
  public Action unknown_1000_CE4B_1CE4B(int gotoTarget) {
    label_1000_CE4B_1CE4B:
    // MOV word ptr [0xdc02],BX (1000_CE4B / 0x1CE4B)
    UInt16[DS, 0xDC02] = BX;
    // MOV [0xdbee],AX (1000_CE4F / 0x1CE4F)
    UInt16[DS, 0xDBEE] = AX;
    // RET  (1000_CE52 / 0x1CE52)
    return NearRet();
  }
  
  public Action unknown_1000_CE53_1CE53(int gotoTarget) {
    label_1000_CE53_1CE53:
    // TEST byte ptr [0x3403],0x4 (1000_CE53 / 0x1CE53)
    Alu.And8(UInt8[DS, 0x3403], 0x4);
    // JZ 0x1000:ce6b (1000_CE58 / 0x1CE58)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_CE6B / 0x1CE6B)
      return NearRet();
    }
    // MOV AX,0x2 (1000_CE5A / 0x1CE5A)
    AX = 0x2;
    label_1000_CE5D_1CE5D:
    // PUSH AX (1000_CE5D / 0x1CE5D)
    Stack.Push(AX);
    // ADD AX,0x61 (1000_CE5E / 0x1CE5E)
    // AX += 0x61;
    AX = Alu.Add16(AX, 0x61);
    // CALL 0x1000:c13e (1000_CE61 / 0x1CE61)
    NearCall(cs1, 0xCE64, open_sprite_sheet_ida_1000_C13E_1C13E);
    // POP AX (1000_CE64 / 0x1CE64)
    AX = Stack.Pop();
    // INC AX (1000_CE65 / 0x1CE65)
    AX = Alu.Inc16(AX);
    // CMP AX,0x8 (1000_CE66 / 0x1CE66)
    Alu.Sub16(AX, 0x8);
    // JC 0x1000:ce5d (1000_CE69 / 0x1CE69)
    if(CarryFlag) {
      goto label_1000_CE5D_1CE5D;
    }
    label_1000_CE6B_1CE6B:
    // RET  (1000_CE6B / 0x1CE6B)
    return NearRet();
  }
  
  public Action initialize_memory_handler_ida_1000_CE6C_1CE6C(int gotoTarget) {
    label_1000_CE6C_1CE6C:
    // TEST byte ptr [0x2943],0x2 (1000_CE6C / 0x1CE6C)
    Alu.And8(UInt8[DS, 0x2943], 0x2);
    // JNZ 0x1000:ce7b (1000_CE71 / 0x1CE71)
    if(!ZeroFlag) {
      goto label_1000_CE7B_1CE7B;
    }
    // CMP word ptr [0x39a9],0x15e (1000_CE73 / 0x1CE73)
    Alu.Sub16(UInt16[DS, 0x39A9], 0x15E);
    // JNC 0x1000:ce8a (1000_CE79 / 0x1CE79)
    if(!CarryFlag) {
      goto label_1000_CE8A_1CE8A;
    }
    label_1000_CE7B_1CE7B:
    // MOV AX,0x2 (1000_CE7B / 0x1CE7B)
    AX = 0x2;
    label_1000_CE7E_1CE7E:
    // CALL 0x1000:c921 (1000_CE7E / 0x1CE7E)
    NearCall(cs1, 0xCE81, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921);
    // AND byte ptr [BX],0xfb (1000_CE81 / 0x1CE81)
    // UInt8[DS, BX] &= 0xFB;
    UInt8[DS, BX] = Alu.And8(UInt8[DS, BX], 0xFB);
    // INC AX (1000_CE84 / 0x1CE84)
    AX = Alu.Inc16(AX);
    // CMP AX,0x9 (1000_CE85 / 0x1CE85)
    Alu.Sub16(AX, 0x9);
    // JC 0x1000:ce7e (1000_CE88 / 0x1CE88)
    if(CarryFlag) {
      goto label_1000_CE7E_1CE7E;
    }
    label_1000_CE8A_1CE8A:
    // TEST byte ptr [0x2943],0x3 (1000_CE8A / 0x1CE8A)
    Alu.And8(UInt8[DS, 0x2943], 0x3);
    // JZ 0x1000:ce9f (1000_CE8F / 0x1CE8F)
    if(ZeroFlag) {
      goto label_1000_CE9F_1CE9F;
    }
    // XOR AX,AX (1000_CE91 / 0x1CE91)
    AX = 0;
    label_1000_CE93_1CE93:
    // CALL 0x1000:c921 (1000_CE93 / 0x1CE93)
    NearCall(cs1, 0xCE96, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921);
    // AND byte ptr [BX],0x7f (1000_CE96 / 0x1CE96)
    // UInt8[DS, BX] &= 0x7F;
    UInt8[DS, BX] = Alu.And8(UInt8[DS, BX], 0x7F);
    // INC AX (1000_CE99 / 0x1CE99)
    AX = Alu.Inc16(AX);
    // CMP AX,0x25 (1000_CE9A / 0x1CE9A)
    Alu.Sub16(AX, 0x25);
    // JC 0x1000:ce93 (1000_CE9D / 0x1CE9D)
    if(CarryFlag) {
      goto label_1000_CE93_1CE93;
    }
    label_1000_CE9F_1CE9F:
    // MOV AX,0x2 (1000_CE9F / 0x1CE9F)
    AX = 0x2;
    label_1000_CEA2_1CEA2:
    // PUSH AX (1000_CEA2 / 0x1CEA2)
    Stack.Push(AX);
    // CALL 0x1000:ceb0 (1000_CEA3 / 0x1CEA3)
    NearCall(cs1, 0xCEA6, unknown_1000_CEB0_1CEB0);
    // POP AX (1000_CEA6 / 0x1CEA6)
    AX = Stack.Pop();
    // INC AX (1000_CEA7 / 0x1CEA7)
    AX = Alu.Inc16(AX);
    // CMP AX,0x8 (1000_CEA8 / 0x1CEA8)
    Alu.Sub16(AX, 0x8);
    // JC 0x1000:cea2 (1000_CEAB / 0x1CEAB)
    if(CarryFlag) {
      goto label_1000_CEA2_1CEA2;
    }
    // JMP 0x1000:ca01 (1000_CEAD / 0x1CEAD)
    // Jump converted to entry function call
    return hnm_close_resource_ida_1000_CA01_1CA01(0);
  }
  
  public Action unknown_1000_CEB0_1CEB0(int gotoTarget) {
    label_1000_CEB0_1CEB0:
    // CALL 0x1000:c921 (1000_CEB0 / 0x1CEB0)
    NearCall(cs1, 0xCEB3, GetHnmResourceFlagNamePtrByIndexAXToBx_1000_C921_1C921);
    // PUSH BX (1000_CEB3 / 0x1CEB3)
    Stack.Push(BX);
    // CALL 0x1000:c92b (1000_CEB4 / 0x1CEB4)
    NearCall(cs1, 0xCEB7, hnm_reset_and_read_header_ida_1000_C92B_1C92B);
    // POP DI (1000_CEB7 / 0x1CEB7)
    DI = Stack.Pop();
    // JC 0x1000:cec8 (1000_CEB8 / 0x1CEB8)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_CEC8 / 0x1CEC8)
      return NearRet();
    }
    // TEST byte ptr [DI],0x8 (1000_CEBA / 0x1CEBA)
    Alu.And8(UInt8[DS, DI], 0x8);
    // JZ 0x1000:cec8 (1000_CEBD / 0x1CEBD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_CEC8 / 0x1CEC8)
      return NearRet();
    }
    // SUB DI,0x8 (1000_CEBF / 0x1CEBF)
    // DI -= 0x8;
    DI = Alu.Sub16(DI, 0x8);
    // MOV SI,0xdbf6 (1000_CEC2 / 0x1CEC2)
    SI = 0xDBF6;
    // CALL 0x1000:5b99 (1000_CEC5 / 0x1CEC5)
    NearCall(cs1, 0xCEC8, MemCopy8BytesDsSIToDsDi_1000_5B99_15B99);
    label_1000_CEC8_1CEC8:
    // RET  (1000_CEC8 / 0x1CEC8)
    return NearRet();
  }
  
  public Action unknown_1000_CEC9_1CEC9(int gotoTarget) {
    label_1000_CEC9_1CEC9:
    // PUSHF  (1000_CEC9 / 0x1CEC9)
    Stack.Push(FlagRegister);
    // PUSH BX (1000_CECA / 0x1CECA)
    Stack.Push(BX);
    // PUSH CX (1000_CECB / 0x1CECB)
    Stack.Push(CX);
    // PUSH DX (1000_CECC / 0x1CECC)
    Stack.Push(DX);
    // PUSH SI (1000_CECD / 0x1CECD)
    Stack.Push(SI);
    // PUSH DI (1000_CECE / 0x1CECE)
    Stack.Push(DI);
    // PUSH BP (1000_CECF / 0x1CECF)
    Stack.Push(BP);
    // PUSH ES (1000_CED0 / 0x1CED0)
    Stack.Push(ES);
    // XOR AX,AX (1000_CED1 / 0x1CED1)
    AX = 0;
    // XCHG byte ptr [0xdbb5],AL (1000_CED3 / 0x1CED3)
    byte tmp_1000_CED3 = UInt8[DS, 0xDBB5];
    UInt8[DS, 0xDBB5] = AL;
    AL = tmp_1000_CED3;
    // STI  (1000_CED7 / 0x1CED7)
    InterruptFlag = true;
    // PUSH AX (1000_CED8 / 0x1CED8)
    Stack.Push(AX);
    // CALL 0x1000:caa0 (1000_CED9 / 0x1CED9)
    NearCall(cs1, 0xCEDC, unknown_1000_CAA0_1CAA0);
    // JBE 0x1000:ceef (1000_CEDC / 0x1CEDC)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_CEEF_1CEEF;
    }
    // MOV AX,[0xdc1e] (1000_CEDE / 0x1CEDE)
    AX = UInt16[DS, 0xDC1E];
    // INC AX (1000_CEE1 / 0x1CEE1)
    AX = Alu.Inc16(AX);
    // JNZ 0x1000:ceef (1000_CEE2 / 0x1CEE2)
    if(!ZeroFlag) {
      goto label_1000_CEEF_1CEEF;
    }
    // CALL 0x1000:cad4 (1000_CEE4 / 0x1CEE4)
    NearCall(cs1, 0xCEE7, unknown_1000_CAD4_1CAD4);
    // JC 0x1000:ceef (1000_CEE7 / 0x1CEE7)
    if(CarryFlag) {
      goto label_1000_CEEF_1CEEF;
    }
    // CALL 0x1000:cc96 (1000_CEE9 / 0x1CEE9)
    NearCall(cs1, 0xCEEC, hnm_decode_video_frame_ida_1000_CC96_1CC96);
    // CALL 0x1000:cc4e (1000_CEEC / 0x1CEEC)
    NearCall(cs1, 0xCEEF, unknown_1000_CC4E_1CC4E);
    label_1000_CEEF_1CEEF:
    // POP AX (1000_CEEF / 0x1CEEF)
    AX = Stack.Pop();
    // MOV [0xdbb5],AL (1000_CEF0 / 0x1CEF0)
    UInt8[DS, 0xDBB5] = AL;
    // POP ES (1000_CEF3 / 0x1CEF3)
    ES = Stack.Pop();
    // POP BP (1000_CEF4 / 0x1CEF4)
    BP = Stack.Pop();
    // POP DI (1000_CEF5 / 0x1CEF5)
    DI = Stack.Pop();
    // POP SI (1000_CEF6 / 0x1CEF6)
    SI = Stack.Pop();
    // POP DX (1000_CEF7 / 0x1CEF7)
    DX = Stack.Pop();
    // POP CX (1000_CEF8 / 0x1CEF8)
    CX = Stack.Pop();
    // POP BX (1000_CEF9 / 0x1CEF9)
    BX = Stack.Pop();
    // POPF  (1000_CEFA / 0x1CEFA)
    FlagRegister = Stack.Pop();
    // RET  (1000_CEFB / 0x1CEFB)
    return NearRet();
  }
  
  public Action load_IRULn_HSQ_ida_1000_CEFC_1CEFC(int gotoTarget) {
    label_1000_CEFC_1CEFC:
    // MOV AX,0x69 (1000_CEFC / 0x1CEFC)
    AX = 0x69;
    // ADD AL,byte ptr [0xceeb] (1000_CEFF / 0x1CEFF)
    // AL += UInt8[DS, 0xCEEB];
    AL = Alu.Add8(AL, UInt8[DS, 0xCEEB]);
    // CALL 0x1000:c13e (1000_CF03 / 0x1CF03)
    NearCall(cs1, 0xCF06, open_sprite_sheet_ida_1000_C13E_1C13E);
    // MOV word ptr [0x3622],0x35a8 (1000_CF06 / 0x1CF06)
    UInt16[DS, 0x3622] = 0x35A8;
    // XOR AX,AX (1000_CF0C / 0x1CF0C)
    AX = 0;
    // CALLF [0x3939] (1000_CF0E / 0x1CF0E)
    // Indirect call to [0x3939], generating possible targets from emulator records
    uint targetAddress_1000_CF0E = (uint)(UInt16[DS, 0x393B] * 0x10 + UInt16[DS, 0x3939] - cs1 * 0x10);
    switch(targetAddress_1000_CF0E) {
      case 0x23613 : FarCall(cs1, 0xCF12, VgaFunc33UpdateVgaOffset01A3FromLineNumberAsAx_334B_0163_33613);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_CF0E);
        break;
    }
    // CALL 0x1000:c0ad (1000_CF12 / 0x1CF12)
    NearCall(cs1, 0xCF15, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // MOV AX,0x19 (1000_CF15 / 0x1CF15)
    AX = 0x19;
    // JMP 0x1000:ca1b (1000_CF18 / 0x1CF18)
    // Jump converted to entry function call
    return hnm_load_ida_1000_CA1B_1CA1B(0);
  }
  
  public Action play_IRULx_HSQ_ida_1000_CF1B_1CF1B(int gotoTarget) {
    label_1000_CF1B_1CF1B:
    // PUSH word ptr [0xdbda] (1000_CF1B / 0x1CF1B)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_CF1F / 0x1CF1F)
    NearCall(cs1, 0xCF22, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    label_1000_CF22_1CF22:
    // MOV SI,word ptr [0x3622] (1000_CF22 / 0x1CF22)
    SI = UInt16[DS, 0x3622];
    // LODSW SI (1000_CF26 / 0x1CF26)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP AX,word ptr [0xdbe8] (1000_CF27 / 0x1CF27)
    Alu.Sub16(AX, UInt16[DS, 0xDBE8]);
    // JA 0x1000:cf30 (1000_CF2B / 0x1CF2B)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_CF30_1CF30;
    }
    // CALL 0x1000:cf4b (1000_CF2D / 0x1CF2D)
    NearCall(cs1, 0xCF30, IRULx_draw_or_clear_subtitle_ida_1000_CF4B_1CF4B);
    label_1000_CF30_1CF30:
    // CALL 0x1000:c9e8 (1000_CF30 / 0x1CF30)
    NearCall(cs1, 0xCF33, hnm_do_frame_skippable_ida_1000_C9E8_1C9E8);
    // JC 0x1000:cf3b (1000_CF33 / 0x1CF33)
    if(CarryFlag) {
      goto label_1000_CF3B_1CF3B;
    }
    // CALL 0x1000:cc85 (1000_CF35 / 0x1CF35)
    NearCall(cs1, 0xCF38, CheckIfHnmComplete_1000_CC85_1CC85);
    // JZ 0x1000:cf22 (1000_CF38 / 0x1CF38)
    if(ZeroFlag) {
      goto label_1000_CF22_1CF22;
    }
    // CLC  (1000_CF3A / 0x1CF3A)
    CarryFlag = false;
    label_1000_CF3B_1CF3B:
    // PUSHF  (1000_CF3B / 0x1CF3B)
    Stack.Push(FlagRegister);
    // CALL 0x1000:ca01 (1000_CF3C / 0x1CF3C)
    NearCall(cs1, 0xCF3F, hnm_close_resource_ida_1000_CA01_1CA01);
    // CALL 0x1000:ac14 (1000_CF3F / 0x1CF3F)
    NearCall(cs1, 0xCF42, pcm_stop_voc_q_ida_1000_AC14_1AC14);
    // CALL 0x1000:ad57 (1000_CF42 / 0x1CF42)
    NearCall(cs1, 0xCF45, play_music_MORNING_HSQ_ida_1000_AD57_1AD57);
    // POPF  (1000_CF45 / 0x1CF45)
    FlagRegister = Stack.Pop();
    // POP word ptr [0xdbda] (1000_CF46 / 0x1CF46)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_CF4A / 0x1CF4A)
    return NearRet();
  }
  
  public Action IRULx_draw_or_clear_subtitle_ida_1000_CF4B_1CF4B(int gotoTarget) {
    label_1000_CF4B_1CF4B:
    // MOV AX,SI (1000_CF4B / 0x1CF4B)
    AX = SI;
    // MOV [0x3622],AX (1000_CF4D / 0x1CF4D)
    UInt16[DS, 0x3622] = AX;
    // SUB AX,0x35a8 (1000_CF50 / 0x1CF50)
    // AX -= 0x35A8;
    AX = Alu.Sub16(AX, 0x35A8);
    // SHR AX,1 (1000_CF53 / 0x1CF53)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_CF55 / 0x1CF55)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // JNC 0x1000:cf61 (1000_CF57 / 0x1CF57)
    if(!CarryFlag) {
      goto label_1000_CF61_1CF61;
    }
    // MOV BX,0xbe (1000_CF59 / 0x1CF59)
    BX = 0xBE;
    // XOR DX,DX (1000_CF5C / 0x1CF5C)
    DX = 0;
    // JMP 0x1000:c22f (1000_CF5E / 0x1CF5E)
    // Jump converted to entry function call
    return draw_sprite_ida_1000_C22F_1C22F(0);
    label_1000_CF61_1CF61:
    // MOV DI,0xed80 (1000_CF61 / 0x1CF61)
    DI = 0xED80;
    // MOV ES,word ptr [0xdbd8] (1000_CF64 / 0x1CF64)
    ES = UInt16[DS, 0xDBD8];
    // XOR AX,AX (1000_CF68 / 0x1CF68)
    AX = 0;
    // MOV CX,0xb40 (1000_CF6A / 0x1CF6A)
    CX = 0xB40;
    while (CX-- != 0) {
      // STOSW ES:DI (1000_CF6D / 0x1CF6D)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // RET  (1000_CF6F / 0x1CF6F)
    return NearRet();
  }
  
  public Action unknown_1000_CF70_1CF70(int gotoTarget) {
    label_1000_CF70_1CF70:
    // PUSH BX (1000_CF70 / 0x1CF70)
    Stack.Push(BX);
    // DEC SI (1000_CF71 / 0x1CF71)
    SI = Alu.Dec16(SI);
    // TEST SI,0x800 (1000_CF72 / 0x1CF72)
    Alu.And16(SI, 0x800);
    // JZ 0x1000:cf95 (1000_CF76 / 0x1CF76)
    if(ZeroFlag) {
      goto label_1000_CF95_1CF95;
    }
    // CALL 0x1000:d00f (1000_CF78 / 0x1CF78)
    NearCall(cs1, 0xCF7B, load_PHRASExx_HSQ_ida_1000_D00F_1D00F);
    // LES BX,[0x47b0] (1000_CF7B / 0x1CF7B)
    BX = UInt16[DS, 0x47B0];
    ES = UInt16[DS, 0x47B2];
    // AND SI,0x7ff (1000_CF7F / 0x1CF7F)
    // SI &= 0x7FF;
    SI = Alu.And16(SI, 0x7FF);
    // SHL SI,1 (1000_CF83 / 0x1CF83)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr ES:[BX + SI] (1000_CF85 / 0x1CF85)
    SI = UInt16[ES, (ushort)(BX + SI)];
    // MOV BX,word ptr ES:[BX] (1000_CF88 / 0x1CF88)
    BX = UInt16[ES, BX];
    // MOV BX,word ptr ES:[BX + -0x2] (1000_CF8B / 0x1CF8B)
    BX = UInt16[ES, (ushort)(BX - 0x2)];
    // MOV word ptr [0x47b4],BX (1000_CF8F / 0x1CF8F)
    UInt16[DS, 0x47B4] = BX;
    // POP BX (1000_CF93 / 0x1CF93)
    BX = Stack.Pop();
    // RET  (1000_CF94 / 0x1CF94)
    return NearRet();
    label_1000_CF95_1CF95:
    // SHL SI,1 (1000_CF95 / 0x1CF95)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // LES BX,[0x47ac] (1000_CF97 / 0x1CF97)
    BX = UInt16[DS, 0x47AC];
    ES = UInt16[DS, 0x47AE];
    // MOV SI,word ptr ES:[BX + SI] (1000_CF9B / 0x1CF9B)
    SI = UInt16[ES, (ushort)(BX + SI)];
    // POP BX (1000_CF9E / 0x1CF9E)
    BX = Stack.Pop();
    // RET  (1000_CF9F / 0x1CF9F)
    return NearRet();
  }
  
  public Action check_amr_or_eng_language_ida_1000_CFA0_1CFA0(int gotoTarget) {
    label_1000_CFA0_1CFA0:
    // CALL 0x1000:ae2f (1000_CFA0 / 0x1CFA0)
    NearCall(cs1, 0xCFA3, CheckPcmEnabled_1000_AE2F_1AE2F);
    // JZ 0x1000:cfb8 (1000_CFA3 / 0x1CFA3)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_CFB8 / 0x1CFB8)
      return NearRet();
    }
    // MOV AL,[0xceeb] (1000_CFA5 / 0x1CFA5)
    AL = UInt8[DS, 0xCEEB];
    // OR AL,AL (1000_CFA8 / 0x1CFA8)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:cfb0 (1000_CFAA / 0x1CFAA)
    if(ZeroFlag) {
      goto label_1000_CFB0_1CFB0;
    }
    // CMP AL,0x3 (1000_CFAC / 0x1CFAC)
    Alu.Sub8(AL, 0x3);
    // JNZ 0x1000:cfb8 (1000_CFAE / 0x1CFAE)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_CFB8 / 0x1CFB8)
      return NearRet();
    }
    label_1000_CFB0_1CFB0:
    // MOV AL,0x2 (1000_CFB0 / 0x1CFB0)
    AL = 0x2;
    // MOV [0x28e7],AL (1000_CFB2 / 0x1CFB2)
    UInt8[DS, 0x28E7] = AL;
    // MOV [0x28e8],AL (1000_CFB5 / 0x1CFB5)
    UInt8[DS, 0x28E8] = AL;
    label_1000_CFB8_1CFB8:
    // RET  (1000_CFB8 / 0x1CFB8)
    return NearRet();
  }
  
  public Action unknown_1000_CFB9_1CFB9(int gotoTarget) {
    label_1000_CFB9_1CFB9:
    // XOR BX,BX (1000_CFB9 / 0x1CFB9)
    BX = 0;
    // MOV DI,0xd7f4 (1000_CFBB / 0x1CFBB)
    DI = 0xD7F4;
    // PUSH DS (1000_CFBE / 0x1CFBE)
    Stack.Push(DS);
    // POP ES (1000_CFBF / 0x1CFBF)
    ES = Stack.Pop();
    label_1000_CFC0_1CFC0:
    // MOV SI,word ptr [BX + 0xaa76] (1000_CFC0 / 0x1CFC0)
    SI = UInt16[DS, (ushort)(BX + 0xAA76)];
    // CMP word ptr [SI],-0x1 (1000_CFC4 / 0x1CFC4)
    Alu.Sub16(UInt16[DS, SI], 0xFFFF);
    // JNZ 0x1000:cfce (1000_CFC7 / 0x1CFC7)
    if(!ZeroFlag) {
      goto label_1000_CFCE_1CFCE;
    }
    // ADD BX,0x2 (1000_CFC9 / 0x1CFC9)
    // BX += 0x2;
    BX = Alu.Add16(BX, 0x2);
    // JMP 0x1000:cfc0 (1000_CFCC / 0x1CFCC)
    goto label_1000_CFC0_1CFC0;
    label_1000_CFCE_1CFCE:
    // MOV AX,word ptr [SI + 0x2] (1000_CFCE / 0x1CFCE)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // XCHG AH,AL (1000_CFD1 / 0x1CFD1)
    byte tmp_1000_CFD1 = AH;
    AH = AL;
    AL = tmp_1000_CFD1;
    // AND AX,0x3ff (1000_CFD3 / 0x1CFD3)
    // AX &= 0x3FF;
    AX = Alu.And16(AX, 0x3FF);
    // DEC AX (1000_CFD6 / 0x1CFD6)
    AX = Alu.Dec16(AX);
    // STOSW ES:DI (1000_CFD7 / 0x1CFD7)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND BX,0xfff0 (1000_CFD8 / 0x1CFD8)
    // BX &= 0xFFF0;
    BX = Alu.And16(BX, 0xFFF0);
    // ADD BX,0x10 (1000_CFDB / 0x1CFDB)
    // BX += 0x10;
    BX = Alu.Add16(BX, 0x10);
    // CMP BX,0x110 (1000_CFDE / 0x1CFDE)
    Alu.Sub16(BX, 0x110);
    // JC 0x1000:cfc0 (1000_CFE2 / 0x1CFE2)
    if(CarryFlag) {
      goto label_1000_CFC0_1CFC0;
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_CFE4_1CFE4(0);
  }
  
  public Action unknown_1000_CFE4_1CFE4(int gotoTarget) {
    label_1000_CFE4_1CFE4:
    // MOV AL,[0xceeb] (1000_CFE4 / 0x1CFE4)
    AL = UInt8[DS, 0xCEEB];
    // MOV SI,0xbb (1000_CFE7 / 0x1CFE7)
    SI = 0xBB;
    // CMP AL,0x6 (1000_CFEA / 0x1CFEA)
    Alu.Sub8(AL, 0x6);
    // JNZ 0x1000:cff1 (1000_CFEC / 0x1CFEC)
    if(!ZeroFlag) {
      goto label_1000_CFF1_1CFF1;
    }
    // MOV SI,0xc7 (1000_CFEE / 0x1CFEE)
    SI = 0xC7;
    label_1000_CFF1_1CFF1:
    // MOV DI,0xceec (1000_CFF1 / 0x1CFF1)
    DI = 0xCEEC;
    // PUSH DS (1000_CFF4 / 0x1CFF4)
    Stack.Push(DS);
    // POP ES (1000_CFF5 / 0x1CFF5)
    ES = Stack.Pop();
    // CALL 0x1000:f0b9 (1000_CFF6 / 0x1CFF6)
    NearCall(cs1, 0xCFF9, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // MOV AL,0xc0 (1000_CFF9 / 0x1CFF9)
    AL = 0xC0;
    // ADD AL,byte ptr [0xceeb] (1000_CFFB / 0x1CFFB)
    // AL += UInt8[DS, 0xCEEB];
    AL = Alu.Add8(AL, UInt8[DS, 0xCEEB]);
    // XOR AH,AH (1000_CFFF / 0x1CFFF)
    AH = 0;
    // MOV SI,AX (1000_D001 / 0x1D001)
    SI = AX;
    // LES DI,[0x47ac] (1000_D003 / 0x1D003)
    DI = UInt16[DS, 0x47AC];
    ES = UInt16[DS, 0x47AE];
    // CALL 0x1000:f0b9 (1000_D007 / 0x1D007)
    NearCall(cs1, 0xD00A, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // CALL 0x1000:0098 (1000_D00A / 0x1D00A)
    NearCall(cs1, 0xD00D, ConvertIndexTableToPointerTable_1000_0098_10098);
    // JMP 0x1000:d01a (1000_D00D / 0x1D00D)
    // Jump converted to non entry function call
    return load_PHRASExx_HSQ_ida_1000_D00F_1D00F(0x1D01A - cs1 * 0x10);
  }
  
  public Action load_PHRASExx_HSQ_ida_1000_D00F_1D00F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD01A: goto label_1000_D01A_1D01A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D00F_1D00F:
    // MOV AX,[0x477c] (1000_D00F / 0x1D00F)
    AX = UInt16[DS, 0x477C];
    // CMP AX,word ptr [0xaad6] (1000_D012 / 0x1D012)
    Alu.Sub16(AX, UInt16[DS, 0xAAD6]);
    // MOV AL,0x93 (1000_D016 / 0x1D016)
    AL = 0x93;
    // JC 0x1000:d01c (1000_D018 / 0x1D018)
    if(CarryFlag) {
      goto label_1000_D01C_1D01C;
    }
    label_1000_D01A_1D01A:
    // MOV AL,0x9a (1000_D01A / 0x1D01A)
    AL = 0x9A;
    label_1000_D01C_1D01C:
    // ADD AL,byte ptr [0xceeb] (1000_D01C / 0x1D01C)
    // AL += UInt8[DS, 0xCEEB];
    AL = Alu.Add8(AL, UInt8[DS, 0xCEEB]);
    // CMP AL,byte ptr [0x477e] (1000_D020 / 0x1D020)
    Alu.Sub8(AL, UInt8[DS, 0x477E]);
    // JZ 0x1000:d03b (1000_D024 / 0x1D024)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D03B / 0x1D03B)
      return NearRet();
    }
    // PUSH SI (1000_D026 / 0x1D026)
    Stack.Push(SI);
    // MOV [0x477e],AL (1000_D027 / 0x1D027)
    UInt8[DS, 0x477E] = AL;
    // XOR AH,AH (1000_D02A / 0x1D02A)
    AH = 0;
    // MOV SI,AX (1000_D02C / 0x1D02C)
    SI = AX;
    // LES DI,[0x47b0] (1000_D02E / 0x1D02E)
    DI = UInt16[DS, 0x47B0];
    ES = UInt16[DS, 0x47B2];
    // CALL 0x1000:f0b9 (1000_D032 / 0x1D032)
    NearCall(cs1, 0xD035, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // PUSH CX (1000_D035 / 0x1D035)
    Stack.Push(CX);
    // CALL 0x1000:0098 (1000_D036 / 0x1D036)
    NearCall(cs1, 0xD039, ConvertIndexTableToPointerTable_1000_0098_10098);
    // POP CX (1000_D039 / 0x1D039)
    CX = Stack.Pop();
    // POP SI (1000_D03A / 0x1D03A)
    SI = Stack.Pop();
    label_1000_D03B_1D03B:
    // RET  (1000_D03B / 0x1D03B)
    return NearRet();
  }
  
  public Action unknown_1000_D03C_1D03C(int gotoTarget) {
    label_1000_D03C_1D03C:
    // LODSB ES:SI (1000_D03C / 0x1D03C)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB AL,0x30 (1000_D03E / 0x1D03E)
    // AL -= 0x30;
    AL = Alu.Sub8(AL, 0x30);
    // CMP AL,0x9 (1000_D040 / 0x1D040)
    Alu.Sub8(AL, 0x9);
    // JA 0x1000:d03c (1000_D042 / 0x1D042)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_D03C_1D03C;
    }
    label_1000_D044_1D044:
    // LODSB ES:SI (1000_D044 / 0x1D044)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB AL,0x30 (1000_D046 / 0x1D046)
    // AL -= 0x30;
    AL = Alu.Sub8(AL, 0x30);
    // CMP AL,0x9 (1000_D048 / 0x1D048)
    Alu.Sub8(AL, 0x9);
    // JBE 0x1000:d044 (1000_D04A / 0x1D04A)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D044_1D044;
    }
    // DEC SI (1000_D04C / 0x1D04C)
    SI = Alu.Dec16(SI);
    // RET  (1000_D04D / 0x1D04D)
    return NearRet();
  }
  
  public Action unknown_1000_D04E_1D04E(int gotoTarget) {
    label_1000_D04E_1D04E:
    // MOV word ptr [0xd82c],DX (1000_D04E / 0x1D04E)
    UInt16[DS, 0xD82C] = DX;
    // MOV word ptr [0xd82e],BX (1000_D052 / 0x1D052)
    UInt16[DS, 0xD82E] = BX;
    // MOV word ptr [0xd830],DX (1000_D056 / 0x1D056)
    UInt16[DS, 0xD830] = DX;
    // MOV word ptr [0xd832],BX (1000_D05A / 0x1D05A)
    UInt16[DS, 0xD832] = BX;
    // RET  (1000_D05E / 0x1D05E)
    return NearRet();
  }
  
  public Action GetCharacterCoordsXY_1000_D05F_1D05F(int gotoTarget) {
    label_1000_D05F_1D05F:
    // MOV DX,word ptr [0xd82c] (1000_D05F / 0x1D05F)
    DX = UInt16[DS, 0xD82C];
    // MOV BX,word ptr [0xd82e] (1000_D063 / 0x1D063)
    BX = UInt16[DS, 0xD82E];
    // RET  (1000_D067 / 0x1D067)
    return NearRet();
  }
  
  public Action SetFontToIntro_1000_D068_1D068(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD068: goto label_1000_D068_1D068;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D068_1D068:
    // MOV word ptr [0x2518],0xd096 (1000_D068 / 0x1D068)
    UInt16[DS, 0x2518] = 0xD096;
    // MOV word ptr [0x47a0],0xceec (1000_D06E / 0x1D06E)
    UInt16[DS, 0x47A0] = 0xCEEC;
    // RET  (1000_D074 / 0x1D074)
    return NearRet();
  }
  
  public Action SetFontToMenu_1000_D075_1D075(int gotoTarget) {
    label_1000_D075_1D075:
    // MOV word ptr [0x2518],0xd12f (1000_D075 / 0x1D075)
    UInt16[DS, 0x2518] = 0xD12F;
    // MOV word ptr [0x47a0],0xcf6c (1000_D07B / 0x1D07B)
    UInt16[DS, 0x47A0] = 0xCF6C;
    // RET  (1000_D081 / 0x1D081)
    return NearRet();
  }
  
  public Action SetFontToBook_1000_D082_1D082(int gotoTarget) {
    label_1000_D082_1D082:
    // MOV word ptr [0x2518],0xd0ff (1000_D082 / 0x1D082)
    UInt16[DS, 0x2518] = 0xD0FF;
    // MOV word ptr [0x47a0],0xceec (1000_D088 / 0x1D088)
    UInt16[DS, 0x47A0] = 0xCEEC;
    // RET  (1000_D08E / 0x1D08E)
    return NearRet();
  }
  
  public Action unknown_1000_D096_1D096(int gotoTarget) {
    label_1000_D096_1D096:
    // PUSH AX (1000_D096 / 0x1D096)
    Stack.Push(AX);
    // PUSH BX (1000_D097 / 0x1D097)
    Stack.Push(BX);
    // PUSH CX (1000_D098 / 0x1D098)
    Stack.Push(CX);
    // PUSH DX (1000_D099 / 0x1D099)
    Stack.Push(DX);
    // PUSH SI (1000_D09A / 0x1D09A)
    Stack.Push(SI);
    // PUSH DI (1000_D09B / 0x1D09B)
    Stack.Push(DI);
    // PUSH BP (1000_D09C / 0x1D09C)
    Stack.Push(BP);
    // PUSH ES (1000_D09D / 0x1D09D)
    Stack.Push(ES);
    // XOR AH,AH (1000_D09E / 0x1D09E)
    AH = 0;
    // MOV SI,AX (1000_D0A0 / 0x1D0A0)
    SI = AX;
    // SHL SI,1 (1000_D0A2 / 0x1D0A2)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_D0A4 / 0x1D0A4)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_D0A6 / 0x1D0A6)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // ADD SI,AX (1000_D0A8 / 0x1D0A8)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // ADD SI,word ptr [0x2514] (1000_D0AA / 0x1D0AA)
    // SI += UInt16[DS, 0x2514];
    SI = Alu.Add16(SI, UInt16[DS, 0x2514]);
    // MOV BX,0xceec (1000_D0AE / 0x1D0AE)
    BX = 0xCEEC;
    // XLAT BX (1000_D0B1 / 0x1D0B1)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CALL 0x1000:d05f (1000_D0B2 / 0x1D0B2)
    NearCall(cs1, 0xD0B5, GetCharacterCoordsXY_1000_D05F_1D05F);
    // ADD word ptr [0xd82c],AX (1000_D0B5 / 0x1D0B5)
    // UInt16[DS, 0xD82C] += AX;
    UInt16[DS, 0xD82C] = Alu.Add16(UInt16[DS, 0xD82C], AX);
    // MOV CL,AL (1000_D0B9 / 0x1D0B9)
    CL = AL;
    // MOV CH,0x9 (1000_D0BB / 0x1D0BB)
    CH = 0x9;
    // MOV AX,[0xdbe4] (1000_D0BD / 0x1D0BD)
    AX = UInt16[DS, 0xDBE4];
    // MOV ES,word ptr [0xdbda] (1000_D0C0 / 0x1D0C0)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38d1] (1000_D0C4 / 0x1D0C4)
    // Indirect call to [0x38d1], generating possible targets from emulator records
    uint targetAddress_1000_D0C4 = (uint)(UInt16[DS, 0x38D3] * 0x10 + UInt16[DS, 0x38D1] - cs1 * 0x10);
    switch(targetAddress_1000_D0C4) {
      case 0x235C5 : FarCall(cs1, 0xD0C8, unknown_334B_0115_335C5);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D0C4);
        break;
    }
    // POP ES (1000_D0C8 / 0x1D0C8)
    ES = Stack.Pop();
    // POP BP (1000_D0C9 / 0x1D0C9)
    BP = Stack.Pop();
    // POP DI (1000_D0CA / 0x1D0CA)
    DI = Stack.Pop();
    // POP SI (1000_D0CB / 0x1D0CB)
    SI = Stack.Pop();
    // POP DX (1000_D0CC / 0x1D0CC)
    DX = Stack.Pop();
    // POP CX (1000_D0CD / 0x1D0CD)
    CX = Stack.Pop();
    // POP BX (1000_D0CE / 0x1D0CE)
    BX = Stack.Pop();
    // POP AX (1000_D0CF / 0x1D0CF)
    AX = Stack.Pop();
    // RET  (1000_D0D0 / 0x1D0D0)
    return NearRet();
  }
  
  public Action unknown_1000_D0E3_1D0E3(int gotoTarget) {
    label_1000_D0E3_1D0E3:
    // PUSH CX (1000_D0E3 / 0x1D0E3)
    Stack.Push(CX);
    // PUSH DI (1000_D0E4 / 0x1D0E4)
    Stack.Push(DI);
    // PUSH ES (1000_D0E5 / 0x1D0E5)
    Stack.Push(ES);
    // PUSH CS (1000_D0E6 / 0x1D0E6)
    Stack.Push(cs1);
    // POP ES (1000_D0E7 / 0x1D0E7)
    ES = Stack.Pop();
    // MOV DI,0xd0d1 (1000_D0E8 / 0x1D0E8)
    DI = 0xD0D1;
    // MOV CX,0x9 (1000_D0EB / 0x1D0EB)
    CX = 0x9;
    while (CX-- != 0) {
      // SCASB ES:DI (1000_D0EE / 0x1D0EE)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // POP ES (1000_D0F0 / 0x1D0F0)
    ES = Stack.Pop();
    // STC  (1000_D0F1 / 0x1D0F1)
    CarryFlag = true;
    // JNZ 0x1000:d0fc (1000_D0F2 / 0x1D0F2)
    if(!ZeroFlag) {
      goto label_1000_D0FC_1D0FC;
    }
    // MOV AL,byte ptr CS:[DI + 0x8] (1000_D0F4 / 0x1D0F4)
    AL = UInt8[cs1, (ushort)(DI + 0x8)];
    // MOV AH,0xd (1000_D0F8 / 0x1D0F8)
    AH = 0xD;
    // SUB AH,CL (1000_D0FA / 0x1D0FA)
    // AH -= CL;
    AH = Alu.Sub8(AH, CL);
    label_1000_D0FC_1D0FC:
    // POP DI (1000_D0FC / 0x1D0FC)
    DI = Stack.Pop();
    // POP CX (1000_D0FD / 0x1D0FD)
    CX = Stack.Pop();
    // RET  (1000_D0FE / 0x1D0FE)
    return NearRet();
  }
  
  public Action unknown_1000_D0FF_1D0FF(int gotoTarget) {
    label_1000_D0FF_1D0FF:
    // CALL 0x1000:d068 (1000_D0FF / 0x1D0FF)
    NearCall(cs1, 0xD102, SetFontToIntro_1000_D068_1D068);
    // CALL 0x1000:d0e3 (1000_D102 / 0x1D102)
    NearCall(cs1, 0xD105, unknown_1000_D0E3_1D0E3);
    // JC 0x1000:d096 (1000_D105 / 0x1D105)
    if(CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_D096_1D096(0);
    }
    // CALL 0x1000:e270 (1000_D107 / 0x1D107)
    NearCall(cs1, 0xD10A, PushAll_1000_E270_1E270);
    // PUSH ES (1000_D10A / 0x1D10A)
    Stack.Push(ES);
    // PUSH AX (1000_D10B / 0x1D10B)
    Stack.Push(AX);
    // MOV AX,0x32 (1000_D10C / 0x1D10C)
    AX = 0x32;
    // CALL 0x1000:c13e (1000_D10F / 0x1D10F)
    NearCall(cs1, 0xD112, open_sprite_sheet_ida_1000_C13E_1C13E);
    // CALL 0x1000:d05f (1000_D112 / 0x1D112)
    NearCall(cs1, 0xD115, GetCharacterCoordsXY_1000_D05F_1D05F);
    // POP AX (1000_D115 / 0x1D115)
    AX = Stack.Pop();
    // MOV CL,AH (1000_D116 / 0x1D116)
    CL = AH;
    // XOR AH,AH (1000_D118 / 0x1D118)
    AH = 0;
    // ADD word ptr [0xd82c],AX (1000_D11A / 0x1D11A)
    // UInt16[DS, 0xD82C] += AX;
    UInt16[DS, 0xD82C] = Alu.Add16(UInt16[DS, 0xD82C], AX);
    // MOV AL,CL (1000_D11E / 0x1D11E)
    AL = CL;
    // SUB BX,0x13 (1000_D120 / 0x1D120)
    // BX -= 0x13;
    BX = Alu.Sub16(BX, 0x13);
    // JNC 0x1000:d127 (1000_D123 / 0x1D123)
    if(!CarryFlag) {
      goto label_1000_D127_1D127;
    }
    // XOR BX,BX (1000_D125 / 0x1D125)
    BX = 0;
    label_1000_D127_1D127:
    // CALL 0x1000:c22f (1000_D127 / 0x1D127)
    NearCall(cs1, 0xD12A, draw_sprite_ida_1000_C22F_1C22F);
    // POP ES (1000_D12A / 0x1D12A)
    ES = Stack.Pop();
    // CALL 0x1000:e283 (1000_D12B / 0x1D12B)
    NearCall(cs1, 0xD12E, PopAll_1000_E283_1E283);
    // RET  (1000_D12E / 0x1D12E)
    return NearRet();
  }
  
  public Action unknown_1000_D12F_1D12F(int gotoTarget) {
    label_1000_D12F_1D12F:
    // PUSH AX (1000_D12F / 0x1D12F)
    Stack.Push(AX);
    // PUSH BX (1000_D130 / 0x1D130)
    Stack.Push(BX);
    // PUSH CX (1000_D131 / 0x1D131)
    Stack.Push(CX);
    // PUSH DX (1000_D132 / 0x1D132)
    Stack.Push(DX);
    // PUSH SI (1000_D133 / 0x1D133)
    Stack.Push(SI);
    // PUSH DI (1000_D134 / 0x1D134)
    Stack.Push(DI);
    // PUSH BP (1000_D135 / 0x1D135)
    Stack.Push(BP);
    // PUSH ES (1000_D136 / 0x1D136)
    Stack.Push(ES);
    // XOR AH,AH (1000_D137 / 0x1D137)
    AH = 0;
    // MOV SI,AX (1000_D139 / 0x1D139)
    SI = AX;
    // SHL SI,1 (1000_D13B / 0x1D13B)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_D13D / 0x1D13D)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_D13F / 0x1D13F)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SUB SI,AX (1000_D141 / 0x1D141)
    // SI -= AX;
    SI = Alu.Sub16(SI, AX);
    // ADD SI,word ptr [0x2516] (1000_D143 / 0x1D143)
    // SI += UInt16[DS, 0x2516];
    SI = Alu.Add16(SI, UInt16[DS, 0x2516]);
    // MOV BX,0xcf6c (1000_D147 / 0x1D147)
    BX = 0xCF6C;
    // XLAT BX (1000_D14A / 0x1D14A)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CALL 0x1000:d05f (1000_D14B / 0x1D14B)
    NearCall(cs1, 0xD14E, GetCharacterCoordsXY_1000_D05F_1D05F);
    // ADD word ptr [0xd82c],AX (1000_D14E / 0x1D14E)
    // UInt16[DS, 0xD82C] += AX;
    UInt16[DS, 0xD82C] = Alu.Add16(UInt16[DS, 0xD82C], AX);
    // MOV CL,AL (1000_D152 / 0x1D152)
    CL = AL;
    // MOV CH,0x7 (1000_D154 / 0x1D154)
    CH = 0x7;
    // MOV AX,[0xdbe4] (1000_D156 / 0x1D156)
    AX = UInt16[DS, 0xDBE4];
    // MOV ES,word ptr [0xdbda] (1000_D159 / 0x1D159)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38d1] (1000_D15D / 0x1D15D)
    // Indirect call to [0x38d1], generating possible targets from emulator records
    uint targetAddress_1000_D15D = (uint)(UInt16[DS, 0x38D3] * 0x10 + UInt16[DS, 0x38D1] - cs1 * 0x10);
    switch(targetAddress_1000_D15D) {
      case 0x235C5 : FarCall(cs1, 0xD161, unknown_334B_0115_335C5);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D15D);
        break;
    }
    // POP ES (1000_D161 / 0x1D161)
    ES = Stack.Pop();
    // POP BP (1000_D162 / 0x1D162)
    BP = Stack.Pop();
    // POP DI (1000_D163 / 0x1D163)
    DI = Stack.Pop();
    // POP SI (1000_D164 / 0x1D164)
    SI = Stack.Pop();
    // POP DX (1000_D165 / 0x1D165)
    DX = Stack.Pop();
    // POP CX (1000_D166 / 0x1D166)
    CX = Stack.Pop();
    // POP BX (1000_D167 / 0x1D167)
    BX = Stack.Pop();
    // POP AX (1000_D168 / 0x1D168)
    AX = Stack.Pop();
    // RET  (1000_D169 / 0x1D169)
    return NearRet();
  }
  
  public Action unknown_1000_D194_1D194(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD194: goto label_1000_D194_1D194;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D194_1D194:
    // MOV word ptr [0xdbe4],CX (1000_D194 / 0x1D194)
    UInt16[DS, 0xDBE4] = CX;
    // CALL 0x1000:d04e (1000_D198 / 0x1D198)
    NearCall(cs1, 0xD19B, unknown_1000_D04E_1D04E);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D19B_1D19B(0);
  }
  
  public Action unknown_1000_D19B_1D19B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD1A5: goto label_1000_D1A5_1D1A5;break;
      case 0xD19B: goto label_1000_D19B_1D19B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D19B_1D19B:
    // PUSH SI (1000_D19B / 0x1D19B)
    Stack.Push(SI);
    // MOV SI,AX (1000_D19C / 0x1D19C)
    SI = AX;
    // CALL 0x1000:cf70 (1000_D19E / 0x1D19E)
    NearCall(cs1, 0xD1A1, unknown_1000_CF70_1CF70);
    // CALL 0x1000:d1bb (1000_D1A1 / 0x1D1A1)
    NearCall(cs1, 0xD1A4, unknown_1000_D1BB_1D1BB);
    // POP SI (1000_D1A4 / 0x1D1A4)
    SI = Stack.Pop();
    label_1000_D1A5_1D1A5:
    // RET  (1000_D1A5 / 0x1D1A5)
    return NearRet();
  }
  
  public Action unknown_1000_D1A6_1D1A6(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD1A6: goto label_1000_D1A6_1D1A6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D1A6_1D1A6:
    // LODSW SI (1000_D1A6 / 0x1D1A6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_D1A7 / 0x1D1A7)
    CX = AX;
    // INC AX (1000_D1A9 / 0x1D1A9)
    AX = Alu.Inc16(AX);
    // JZ 0x1000:d1a5 (1000_D1AA / 0x1D1AA)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D1A5 / 0x1D1A5)
      return NearRet();
    }
    // LODSW SI (1000_D1AC / 0x1D1AC)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_D1AD / 0x1D1AD)
    DX = AX;
    // LODSW SI (1000_D1AF / 0x1D1AF)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_D1B0 / 0x1D1B0)
    BX = AX;
    // LODSW SI (1000_D1B2 / 0x1D1B2)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,CX (1000_D1B3 / 0x1D1B3)
    ushort tmp_1000_D1B3 = AX;
    AX = CX;
    CX = tmp_1000_D1B3;
    // PUSH SI (1000_D1B4 / 0x1D1B4)
    Stack.Push(SI);
    // CALL 0x1000:d194 (1000_D1B5 / 0x1D1B5)
    NearCall(cs1, 0xD1B8, unknown_1000_D194_1D194);
    // POP SI (1000_D1B8 / 0x1D1B8)
    SI = Stack.Pop();
    // JMP 0x1000:d1a6 (1000_D1B9 / 0x1D1B9)
    goto label_1000_D1A6_1D1A6;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D1BB_1D1BB(0);
  }
  
  public Action unknown_1000_D1BB_1D1BB(int gotoTarget) {
    label_1000_D1BB_1D1BB:
    // LODSB ES:SI (1000_D1BB / 0x1D1BB)
    AL = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_D1BD / 0x1D1BD)
    Alu.Sub8(AL, 0xFF);
    // JZ 0x1000:d1a5 (1000_D1BF / 0x1D1BF)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D1A5 / 0x1D1A5)
      return NearRet();
    }
    // CMP AL,0xd (1000_D1C1 / 0x1D1C1)
    Alu.Sub8(AL, 0xD);
    // JZ 0x1000:d1d1 (1000_D1C3 / 0x1D1C3)
    if(ZeroFlag) {
      goto label_1000_D1D1_1D1D1;
    }
    // OR AL,AL (1000_D1C5 / 0x1D1C5)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:d1cb (1000_D1C7 / 0x1D1C7)
    if(!SignFlag) {
      goto label_1000_D1CB_1D1CB;
    }
    // MOV AL,0x40 (1000_D1C9 / 0x1D1C9)
    AL = 0x40;
    label_1000_D1CB_1D1CB:
    // CALL word ptr [0x2518] (1000_D1CB / 0x1D1CB)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_D1CB = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_D1CB) {
      case 0xD12F : NearCall(cs1, 0xD1CF, unknown_1000_D12F_1D12F);
        break;
      case 0xD096 : NearCall(cs1, 0xD1CF, unknown_1000_D096_1D096);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D1CB);
        break;
    }
    // JMP 0x1000:d1bb (1000_D1CF / 0x1D1CF)
    goto label_1000_D1BB_1D1BB;
    label_1000_D1D1_1D1D1:
    // MOV AX,[0xd830] (1000_D1D1 / 0x1D1D1)
    AX = UInt16[DS, 0xD830];
    // MOV [0xd82c],AX (1000_D1D4 / 0x1D1D4)
    UInt16[DS, 0xD82C] = AX;
    // MOV AX,0xa (1000_D1D7 / 0x1D1D7)
    AX = 0xA;
    // CMP word ptr [0x2518],0xd12f (1000_D1DA / 0x1D1DA)
    Alu.Sub16(UInt16[DS, 0x2518], 0xD12F);
    // JNZ 0x1000:d1e5 (1000_D1E0 / 0x1D1E0)
    if(!ZeroFlag) {
      goto label_1000_D1E5_1D1E5;
    }
    // MOV AX,0x7 (1000_D1E2 / 0x1D1E2)
    AX = 0x7;
    label_1000_D1E5_1D1E5:
    // ADD word ptr [0xd832],AX (1000_D1E5 / 0x1D1E5)
    // UInt16[DS, 0xD832] += AX;
    UInt16[DS, 0xD832] = Alu.Add16(UInt16[DS, 0xD832], AX);
    // ADD word ptr [0xd82e],AX (1000_D1E9 / 0x1D1E9)
    // UInt16[DS, 0xD82E] += AX;
    UInt16[DS, 0xD82E] = Alu.Add16(UInt16[DS, 0xD82E], AX);
    // JMP 0x1000:d1bb (1000_D1ED / 0x1D1ED)
    goto label_1000_D1BB_1D1BB;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D1EF_1D1EF(0);
  }
  
  public Action unknown_1000_D1EF_1D1EF(int gotoTarget) {
    label_1000_D1EF_1D1EF:
    // LODSW SI (1000_D1EF / 0x1D1EF)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_D1F0 / 0x1D1F0)
    CX = AX;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D1F2_1D1F2(0);
  }
  
  public Action unknown_1000_D1F2_1D1F2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD1F2: goto label_1000_D1F2_1D1F2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D1F2_1D1F2:
    // CALL 0x1000:c137 (1000_D1F2 / 0x1D1F2)
    NearCall(cs1, 0xD1F5, load_icons_sprites_ida_1000_C137_1C137);
    label_1000_D1F5_1D1F5:
    // PUSH CX (1000_D1F5 / 0x1D1F5)
    Stack.Push(CX);
    // CALL 0x1000:d200 (1000_D1F6 / 0x1D1F6)
    NearCall(cs1, 0xD1F9, unknown_1000_D200_1D200);
    // POP CX (1000_D1F9 / 0x1D1F9)
    CX = Stack.Pop();
    // ADD SI,0xe (1000_D1FA / 0x1D1FA)
    // SI += 0xE;
    SI = Alu.Add16(SI, 0xE);
    // LOOP 0x1000:d1f5 (1000_D1FD / 0x1D1FD)
    if(--CX != 0) {
      goto label_1000_D1F5_1D1F5;
    }
    // RET  (1000_D1FF / 0x1D1FF)
    return NearRet();
  }
  
  public Action unknown_1000_D200_1D200(int gotoTarget) {
    label_1000_D200_1D200:
    // PUSH word ptr [0xdbda] (1000_D200 / 0x1D200)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_D204 / 0x1D204)
    NearCall(cs1, 0xD207, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // PUSH SI (1000_D207 / 0x1D207)
    Stack.Push(SI);
    // TEST byte ptr [SI + 0x8],0x40 (1000_D208 / 0x1D208)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x8)], 0x40);
    // JZ 0x1000:d218 (1000_D20C / 0x1D20C)
    if(ZeroFlag) {
      goto label_1000_D218_1D218;
    }
    // MOV ES,word ptr [0xdbda] (1000_D20E / 0x1D20E)
    ES = UInt16[DS, 0xDBDA];
    // PUSH SI (1000_D212 / 0x1D212)
    Stack.Push(SI);
    // CALLF [0x38d9] (1000_D213 / 0x1D213)
    // Indirect call to [0x38d9], generating possible targets from emulator records
    uint targetAddress_1000_D213 = (uint)(UInt16[DS, 0x38DB] * 0x10 + UInt16[DS, 0x38D9] - cs1 * 0x10);
    switch(targetAddress_1000_D213) {
      case 0x235CB : FarCall(cs1, 0xD217, unknown_334B_011B_335CB);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D213);
        break;
    }
    // POP SI (1000_D217 / 0x1D217)
    SI = Stack.Pop();
    label_1000_D218_1D218:
    // TEST byte ptr [SI + 0x8],0x20 (1000_D218 / 0x1D218)
    Alu.And8(UInt8[DS, (ushort)(SI + 0x8)], 0x20);
    // JNZ 0x1000:d233 (1000_D21C / 0x1D21C)
    if(!ZeroFlag) {
      goto label_1000_D233_1D233;
    }
    // LODSW SI (1000_D21E / 0x1D21E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (1000_D21F / 0x1D21F)
    DX = AX;
    // LODSW SI (1000_D221 / 0x1D221)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (1000_D222 / 0x1D222)
    BX = AX;
    // LODSW SI (1000_D224 / 0x1D224)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_D225 / 0x1D225)
    DI = AX;
    // LODSW SI (1000_D227 / 0x1D227)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_D228 / 0x1D228)
    CX = AX;
    // LODSW SI (1000_D22A / 0x1D22A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LODSW SI (1000_D22B / 0x1D22B)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // INC AX (1000_D22C / 0x1D22C)
    AX = Alu.Inc16(AX);
    // JZ 0x1000:d233 (1000_D22D / 0x1D22D)
    if(ZeroFlag) {
      goto label_1000_D233_1D233;
    }
    // DEC AX (1000_D22F / 0x1D22F)
    AX = Alu.Dec16(AX);
    // CALL 0x1000:c22f (1000_D230 / 0x1D230)
    NearCall(cs1, 0xD233, draw_sprite_ida_1000_C22F_1C22F);
    label_1000_D233_1D233:
    // POP SI (1000_D233 / 0x1D233)
    SI = Stack.Pop();
    // POP word ptr [0xdbda] (1000_D234 / 0x1D234)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_D238 / 0x1D238)
    return NearRet();
  }
  
  public Action unknown_1000_D239_1D239(int gotoTarget) {
    label_1000_D239_1D239:
    // MOV CH,0x2 (1000_D239 / 0x1D239)
    CH = 0x2;
    // JMP 0x1000:d23f (1000_D23B / 0x1D23B)
    // Jump converted to non entry function call
    return unknown_1000_D23D_1D23D(0x1D23F - cs1 * 0x10);
  }
  
  public Action unknown_1000_D23D_1D23D(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD23F: goto label_1000_D23F_1D23F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D23D_1D23D:
    // XOR CX,CX (1000_D23D / 0x1D23D)
    CX = 0;
    label_1000_D23F_1D23F:
    // MOV SI,0x1af4 (1000_D23F / 0x1D23F)
    SI = 0x1AF4;
    // MOV AX,word ptr [SI + 0xa] (1000_D242 / 0x1D242)
    AX = UInt16[DS, (ushort)(SI + 0xA)];
    // SUB AX,0x0 (1000_D245 / 0x1D245)
    // AX -= 0x0;
    AX = Alu.Sub16(AX, 0x0);
    // MOV CL,0x3 (1000_D248 / 0x1D248)
    CL = 0x3;
    // DIV CL (1000_D24A / 0x1D24A)
    Cpu.Div8(CL);
    // CMP CH,AH (1000_D24C / 0x1D24C)
    Alu.Sub8(CH, AH);
    // JZ 0x1000:d27f (1000_D24E / 0x1D24E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D27F / 0x1D27F)
      return NearRet();
    }
    // MOV AX,0x1 (1000_D250 / 0x1D250)
    AX = 0x1;
    // JNC 0x1000:d257 (1000_D253 / 0x1D253)
    if(!CarryFlag) {
      goto label_1000_D257_1D257;
    }
    // NEG AX (1000_D255 / 0x1D255)
    AX = Alu.Sub16(0, AX);
    label_1000_D257_1D257:
    // PUSH AX (1000_D257 / 0x1D257)
    Stack.Push(AX);
    // PUSH SI (1000_D258 / 0x1D258)
    Stack.Push(SI);
    // ADD word ptr [SI + 0xa],AX (1000_D259 / 0x1D259)
    // UInt16[DS, (ushort)(SI + 0xA)] += AX;
    UInt16[DS, (ushort)(SI + 0xA)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0xA)], AX);
    // ADD word ptr [SI + 0x18],AX (1000_D25C / 0x1D25C)
    // UInt16[DS, (ushort)(SI + 0x18)] += AX;
    UInt16[DS, (ushort)(SI + 0x18)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x18)], AX);
    // MOV CX,0x2 (1000_D25F / 0x1D25F)
    CX = 0x2;
    // CALL 0x1000:d1f2 (1000_D262 / 0x1D262)
    NearCall(cs1, 0xD265, unknown_1000_D1F2_1D1F2);
    // CALL 0x1000:1a34 (1000_D265 / 0x1D265)
    NearCall(cs1, 0xD268, unknown_1000_1A34_11A34);
    // MOV AX,0xa (1000_D268 / 0x1D268)
    AX = 0xA;
    // CALL 0x1000:e387 (1000_D26B / 0x1D26B)
    NearCall(cs1, 0xD26E, unknown_1000_E387_1E387);
    // POP SI (1000_D26E / 0x1D26E)
    SI = Stack.Pop();
    // POP AX (1000_D26F / 0x1D26F)
    AX = Stack.Pop();
    // ADD word ptr [SI + 0xa],AX (1000_D270 / 0x1D270)
    // UInt16[DS, (ushort)(SI + 0xA)] += AX;
    UInt16[DS, (ushort)(SI + 0xA)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0xA)], AX);
    // ADD word ptr [SI + 0x18],AX (1000_D273 / 0x1D273)
    // UInt16[DS, (ushort)(SI + 0x18)] += AX;
    UInt16[DS, (ushort)(SI + 0x18)] = Alu.Add16(UInt16[DS, (ushort)(SI + 0x18)], AX);
    // MOV CX,0x2 (1000_D276 / 0x1D276)
    CX = 0x2;
    // CALL 0x1000:d1f2 (1000_D279 / 0x1D279)
    NearCall(cs1, 0xD27C, unknown_1000_D1F2_1D1F2);
    // CALL 0x1000:1a34 (1000_D27C / 0x1D27C)
    NearCall(cs1, 0xD27F, unknown_1000_1A34_11A34);
    label_1000_D27F_1D27F:
    // RET  (1000_D27F / 0x1D27F)
    return NearRet();
  }
  
  public Action unknown_1000_D280_1D280(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD280: goto label_1000_D280_1D280;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D280_1D280:
    // CMP byte ptr [0xdce6],0x0 (1000_D280 / 0x1D280)
    Alu.Sub8(UInt8[DS, 0xDCE6], 0x0);
    // JLE 0x1000:d2bc (1000_D285 / 0x1D285)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (1000_D2BC / 0x1D2BC)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_D287 / 0x1D287)
    NearCall(cs1, 0xD28A, PushAll_1000_E270_1E270);
    // MOV byte ptr [0xdce6],0x0 (1000_D28A / 0x1D28A)
    UInt8[DS, 0xDCE6] = 0x0;
    // CALL 0x1000:d239 (1000_D28F / 0x1D28F)
    NearCall(cs1, 0xD292, unknown_1000_D239_1D239);
    // MOV CX,0x11 (1000_D292 / 0x1D292)
    CX = 0x11;
    label_1000_D295_1D295:
    // PUSH CX (1000_D295 / 0x1D295)
    Stack.Push(CX);
    // PUSH word ptr [0xce7a] (1000_D296 / 0x1D296)
    Stack.Push(UInt16[DS, 0xCE7A]);
    // MOV SI,word ptr [0xdbde] (1000_D29A / 0x1D29A)
    SI = UInt16[DS, 0xDBDE];
    // MOV AL,0x18 (1000_D29E / 0x1D29E)
    AL = 0x18;
    // CALL 0x1000:c0d5 (1000_D2A0 / 0x1D2A0)
    NearCall(cs1, 0xD2A3, unknown_1000_C0D5_1C0D5);
    // POP BX (1000_D2A3 / 0x1D2A3)
    BX = Stack.Pop();
    label_1000_D2A4_1D2A4:
    // PUSH BX (1000_D2A4 / 0x1D2A4)
    Stack.Push(BX);
    // CALL 0x1000:a7c2 (1000_D2A5 / 0x1D2A5)
    NearCall(cs1, 0xD2A8, unknown_1000_A7C2_1A7C2);
    // POP BX (1000_D2A8 / 0x1D2A8)
    BX = Stack.Pop();
    // MOV AX,[0xce7a] (1000_D2A9 / 0x1D2A9)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,BX (1000_D2AC / 0x1D2AC)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x6 (1000_D2AE / 0x1D2AE)
    Alu.Sub16(AX, 0x6);
    // JC 0x1000:d2a4 (1000_D2B1 / 0x1D2B1)
    if(CarryFlag) {
      goto label_1000_D2A4_1D2A4;
    }
    // POP CX (1000_D2B3 / 0x1D2B3)
    CX = Stack.Pop();
    // LOOP 0x1000:d295 (1000_D2B4 / 0x1D2B4)
    if(--CX != 0) {
      goto label_1000_D295_1D295;
    }
    // CALL 0x1000:d23d (1000_D2B6 / 0x1D2B6)
    NearCall(cs1, 0xD2B9, unknown_1000_D23D_1D23D);
    // CALL 0x1000:e283 (1000_D2B9 / 0x1D2B9)
    NearCall(cs1, 0xD2BC, PopAll_1000_E283_1E283);
    label_1000_D2BC_1D2BC:
    // RET  (1000_D2BC / 0x1D2BC)
    return NearRet();
  }
  
  public Action unknown_1000_D2BD_1D2BD(int gotoTarget) {
    label_1000_D2BD_1D2BD:
    // MOV AL,[0xdce6] (1000_D2BD / 0x1D2BD)
    AL = UInt8[DS, 0xDCE6];
    // PUSH AX (1000_D2C0 / 0x1D2C0)
    Stack.Push(AX);
    label_1000_D2C1_1D2C1:
    // MOV byte ptr [0xdce6],0x80 (1000_D2C1 / 0x1D2C1)
    UInt8[DS, 0xDCE6] = 0x80;
    // MOV SI,word ptr [0x21da] (1000_D2C6 / 0x1D2C6)
    SI = UInt16[DS, 0x21DA];
    // MOV SI,word ptr [SI] (1000_D2CA / 0x1D2CA)
    SI = UInt16[DS, SI];
    // LODSB SI (1000_D2CC / 0x1D2CC)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0xff (1000_D2CD / 0x1D2CD)
    Alu.Sub8(AL, 0xFF);
    // JZ 0x1000:d2da (1000_D2CF / 0x1D2CF)
    if(ZeroFlag) {
      goto label_1000_D2DA_1D2DA;
    }
    // AND AL,0xf (1000_D2D1 / 0x1D2D1)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x1000:d2da (1000_D2D3 / 0x1D2D3)
    if(ZeroFlag) {
      goto label_1000_D2DA_1D2DA;
    }
    // CALL 0x1000:d2ea (1000_D2D5 / 0x1D2D5)
    NearCall(cs1, 0xD2D8, unknown_1000_D2EA_1D2EA);
    // JMP 0x1000:d2c1 (1000_D2D8 / 0x1D2D8)
    goto label_1000_D2C1_1D2C1;
    label_1000_D2DA_1D2DA:
    // POP AX (1000_D2DA / 0x1D2DA)
    AX = Stack.Pop();
    // MOV [0xdce6],AL (1000_D2DB / 0x1D2DB)
    UInt8[DS, 0xDCE6] = AL;
    // RET  (1000_D2DE / 0x1D2DE)
    return NearRet();
  }
  
  public Action unknown_1000_D2E2_1D2E2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD2E2: goto label_1000_D2E2_1D2E2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D2E2_1D2E2:
    // CALL 0x1000:d316 (1000_D2E2 / 0x1D2E2)
    NearCall(cs1, 0xD2E5, MenuAnimationRelated_1000_D316_1D316);
    // CALL 0x1000:d2ea (1000_D2E5 / 0x1D2E5)
    NearCall(cs1, 0xD2E8, unknown_1000_D2EA_1D2EA);
    // JMP 0x1000:d280 (1000_D2E8 / 0x1D2E8)
    // Jump converted to entry function call
    return unknown_1000_D280_1D280(0);
  }
  
  public Action unknown_1000_D2EA_1D2EA(int gotoTarget) {
    label_1000_D2EA_1D2EA:
    // MOV SI,word ptr [0x21da] (1000_D2EA / 0x1D2EA)
    SI = UInt16[DS, 0x21DA];
    // MOV DI,word ptr [SI] (1000_D2EE / 0x1D2EE)
    DI = UInt16[DS, SI];
    // MOV AL,byte ptr [DI] (1000_D2F0 / 0x1D2F0)
    AL = UInt8[DS, DI];
    // AND AL,0xf (1000_D2F2 / 0x1D2F2)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // CMP AL,0xf (1000_D2F4 / 0x1D2F4)
    Alu.Sub8(AL, 0xF);
    // JZ 0x1000:d315 (1000_D2F6 / 0x1D2F6)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D315 / 0x1D315)
      return NearRet();
    }
    // MOV AX,word ptr [SI + 0x2] (1000_D2F8 / 0x1D2F8)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // CALL AX (1000_D2FB / 0x1D2FB)
    // Indirect call to AX, generating possible targets from emulator records
    uint targetAddress_1000_D2FB = (uint)(AX);
    switch(targetAddress_1000_D2FB) {
      case 0x97CF : NearCall(cs1, 0xD2FD, unknown_1000_97CF_197CF);
        break;
      case 0x19FC : NearCall(cs1, 0xD2FD, unknown_1000_19FC_119FC);
        break;
      case 0x4415 : NearCall(cs1, 0xD2FD, unknown_1000_4415_14415);
        break;
      case 0x5F91 : NearCall(cs1, 0xD2FD, unknown_1000_5F91_15F91);
        break;
      case 0xF66 : NearCall(cs1, 0xD2FD, NoOp_1000_0F66_10F66);
        break;
      case 0x7D68 : NearCall(cs1, 0xD2FD, unknown_1000_7D68_17D68);
        break;
      case 0xB2B3 : NearCall(cs1, 0xD2FD, unknown_1000_B2B3_1B2B3);
        break;
      case 0xA541 : NearCall(cs1, 0xD2FD, unknown_1000_A541_1A541);
        break;
      case 0x824D : NearCall(cs1, 0xD2FD, unknown_1000_824D_1824D);
        break;
      case 0x4ABE : NearCall(cs1, 0xD2FD, unknown_1000_4ABE_14ABE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D2FB);
        break;
    }
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D2FD_1D2FD(0);
  }
  
  public Action unknown_1000_D2FD_1D2FD(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD315: goto label_1000_D315_1D315;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D2FD_1D2FD:
    // MOV SI,word ptr [0x21da] (1000_D2FD / 0x1D2FD)
    SI = UInt16[DS, 0x21DA];
    // CMP SI,0x21be (1000_D301 / 0x1D301)
    Alu.Sub16(SI, 0x21BE);
    // JZ 0x1000:d315 (1000_D305 / 0x1D305)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D315 / 0x1D315)
      return NearRet();
    }
    // SUB SI,0x4 (1000_D307 / 0x1D307)
    // SI -= 0x4;
    SI = Alu.Sub16(SI, 0x4);
    // MOV word ptr [0x21da],SI (1000_D30A / 0x1D30A)
    UInt16[DS, 0x21DA] = SI;
    // MOV BP,word ptr [SI] (1000_D30E / 0x1D30E)
    BP = UInt16[DS, SI];
    // MOV CL,0xff (1000_D310 / 0x1D310)
    CL = 0xFF;
    // CALL 0x1000:d36d (1000_D312 / 0x1D312)
    NearCall(cs1, 0xD315, unknown_1000_D36D_1D36D);
    label_1000_D315_1D315:
    // RET  (1000_D315 / 0x1D315)
    return NearRet();
  }
  
  public Action MenuAnimationRelated_1000_D316_1D316(int gotoTarget) {
    label_1000_D316_1D316:
    // CMP word ptr [0x35a6],0x0 (1000_D316 / 0x1D316)
    Alu.Sub16(UInt16[DS, 0x35A6], 0x0);
    // JNZ 0x1000:d322 (1000_D31B / 0x1D31B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_D322 / 0x1D322)
      return NearRet();
    }
    // OR byte ptr [0xdce6],0x1 (1000_D31D / 0x1D31D)
    // UInt8[DS, 0xDCE6] |= 0x1;
    UInt8[DS, 0xDCE6] = Alu.Or8(UInt8[DS, 0xDCE6], 0x1);
    label_1000_D322_1D322:
    // RET  (1000_D322 / 0x1D322)
    return NearRet();
  }
  
  public Action unknown_1000_D323_1D323(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD410: goto label_1000_D410_1D410;break;
      case 0xD323: goto label_1000_D323_1D323;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D323_1D323:
    // CALL 0x1000:d316 (1000_D323 / 0x1D323)
    NearCall(cs1, 0xD326, MenuAnimationRelated_1000_D316_1D316);
    // CALL 0x1000:d338 (1000_D326 / 0x1D326)
    NearCall(cs1, 0xD329, unknown_1000_D338_1D338);
    // CALL 0x1000:d280 (1000_D329 / 0x1D329)
    NearCall(cs1, 0xD32C, unknown_1000_D280_1D280);
    // JMP 0x1000:d410 (1000_D32C / 0x1D32C)
    goto label_1000_D410_1D410;
    label_1000_D410_1D410:
    // MOV DX,word ptr [0xdc36] (1000_D410 / 0x1D410)
    DX = UInt16[DS, 0xDC36];
    // MOV BX,word ptr [0xdc38] (1000_D414 / 0x1D414)
    BX = UInt16[DS, 0xDC38];
    // JMP 0x1000:d50f (1000_D418 / 0x1D418)
    // Jump converted to entry function call
    return unknown_1000_D50F_1D50F(0);
  }
  
  public Action unknown_1000_D338_1D338(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD338: goto label_1000_D338_1D338;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D338_1D338:
    // MOV CL,0xff (1000_D338 / 0x1D338)
    CL = 0xFF;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D33A_1D33A(0);
  }
  
  public Action unknown_1000_D33A_1D33A(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD33A: goto label_1000_D33A_1D33A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D33A_1D33A:
    // MOV SI,word ptr [0x21da] (1000_D33A / 0x1D33A)
    SI = UInt16[DS, 0x21DA];
    // MOV DI,word ptr [SI] (1000_D33E / 0x1D33E)
    DI = UInt16[DS, SI];
    // MOV AL,byte ptr [BP + 0x0] (1000_D340 / 0x1D340)
    AL = UInt8[SS, BP];
    // CMP AL,byte ptr [DI] (1000_D343 / 0x1D343)
    Alu.Sub8(AL, UInt8[DS, DI]);
    // JZ 0x1000:d368 (1000_D345 / 0x1D345)
    if(ZeroFlag) {
      goto label_1000_D368_1D368;
    }
    // JC 0x1000:d35b (1000_D347 / 0x1D347)
    if(CarryFlag) {
      goto label_1000_D35B_1D35B;
    }
    // PUSH BP (1000_D349 / 0x1D349)
    Stack.Push(BP);
    // PUSH BX (1000_D34A / 0x1D34A)
    Stack.Push(BX);
    // PUSH CX (1000_D34B / 0x1D34B)
    Stack.Push(CX);
    // MOV AX,word ptr [SI + 0x2] (1000_D34C / 0x1D34C)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // CALL AX (1000_D34F / 0x1D34F)
    // Indirect call to AX, generating possible targets from emulator records
    uint targetAddress_1000_D34F = (uint)(AX);
    switch(targetAddress_1000_D34F) {
      case 0xB2B3 : NearCall(cs1, 0xD351, unknown_1000_B2B3_1B2B3);
        break;
      case 0x8751 : NearCall(cs1, 0xD351, unknown_1000_8751_18751);
        break;
      case 0xF66 : NearCall(cs1, 0xD351, NoOp_1000_0F66_10F66);
        break;
      case 0x97CF : NearCall(cs1, 0xD351, unknown_1000_97CF_197CF);
        break;
      case 0x2997 : NearCall(cs1, 0xD351, unknown_1000_2997_12997);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D34F);
        break;
    }
    // SUB word ptr [0x21da],0x4 (1000_D351 / 0x1D351)
    // UInt16[DS, 0x21DA] -= 0x4;
    UInt16[DS, 0x21DA] = Alu.Sub16(UInt16[DS, 0x21DA], 0x4);
    // POP CX (1000_D356 / 0x1D356)
    CX = Stack.Pop();
    // POP BX (1000_D357 / 0x1D357)
    BX = Stack.Pop();
    // POP BP (1000_D358 / 0x1D358)
    BP = Stack.Pop();
    // JMP 0x1000:d33a (1000_D359 / 0x1D359)
    goto label_1000_D33A_1D33A;
    label_1000_D35B_1D35B:
    // CMP SI,0x21d6 (1000_D35B / 0x1D35B)
    Alu.Sub16(SI, 0x21D6);
    // JZ 0x1000:d368 (1000_D35F / 0x1D35F)
    if(ZeroFlag) {
      goto label_1000_D368_1D368;
    }
    // ADD SI,0x4 (1000_D361 / 0x1D361)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // MOV word ptr [0x21da],SI (1000_D364 / 0x1D364)
    UInt16[DS, 0x21DA] = SI;
    label_1000_D368_1D368:
    // MOV word ptr [SI],BP (1000_D368 / 0x1D368)
    UInt16[DS, SI] = BP;
    // MOV word ptr [SI + 0x2],BX (1000_D36A / 0x1D36A)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D36D_1D36D(0);
  }
  
  public Action unknown_1000_D36D_1D36D(int gotoTarget) {
    label_1000_D36D_1D36D:
    // MOV SI,word ptr [0x21da] (1000_D36D / 0x1D36D)
    SI = UInt16[DS, 0x21DA];
    // MOV word ptr [SI],BP (1000_D371 / 0x1D371)
    UInt16[DS, SI] = BP;
    // MOV SI,BP (1000_D373 / 0x1D373)
    SI = BP;
    // ADD BP,0x2 (1000_D375 / 0x1D375)
    // BP += 0x2;
    BP = Alu.Add16(BP, 0x2);
    label_1000_D378_1D378:
    // CMP word ptr [BP + 0x0],0x0 (1000_D378 / 0x1D378)
    Alu.Sub16(UInt16[SS, BP], 0x0);
    // JZ 0x1000:d388 (1000_D37C / 0x1D37C)
    if(ZeroFlag) {
      goto label_1000_D388_1D388;
    }
    // AND word ptr [BP + 0x0],0x7fff (1000_D37E / 0x1D37E)
    // UInt16[SS, BP] &= 0x7FFF;
    UInt16[SS, BP] = Alu.And16(UInt16[SS, BP], 0x7FFF);
    // ADD BP,0x4 (1000_D383 / 0x1D383)
    // BP += 0x4;
    BP = Alu.Add16(BP, 0x4);
    // JMP 0x1000:d378 (1000_D386 / 0x1D386)
    goto label_1000_D378_1D378;
    label_1000_D388_1D388:
    // CMP CX,0x5 (1000_D388 / 0x1D388)
    Alu.Sub16(CX, 0x5);
    // JNC 0x1000:d397 (1000_D38B / 0x1D38B)
    if(!CarryFlag) {
      // Jump converted to entry function call
      return unknown_1000_D397_1D397(0);
    }
    // SHL CX,1 (1000_D38D / 0x1D38D)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // SHL CX,1 (1000_D38F / 0x1D38F)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // MOV BX,CX (1000_D391 / 0x1D391)
    BX = CX;
    // OR byte ptr [BX + SI + 0x3],0x80 (1000_D393 / 0x1D393)
    // UInt8[DS, (ushort)(BX + SI + 0x3)] |= 0x80;
    UInt8[DS, (ushort)(BX + SI + 0x3)] = Alu.Or8(UInt8[DS, (ushort)(BX + SI + 0x3)], 0x80);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D397_1D397(0);
  }
  
  public Action unknown_1000_D397_1D397(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD397: goto label_1000_D397_1D397;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D397_1D397:
    // MOV byte ptr [0xdce7],0xff (1000_D397 / 0x1D397)
    UInt8[DS, 0xDCE7] = 0xFF;
    // MOV SI,word ptr [0x21da] (1000_D39C / 0x1D39C)
    SI = UInt16[DS, 0x21DA];
    // MOV SI,word ptr [SI] (1000_D3A0 / 0x1D3A0)
    SI = UInt16[DS, SI];
    // INC SI (1000_D3A2 / 0x1D3A2)
    SI = Alu.Inc16(SI);
    // LODSB SI (1000_D3A3 / 0x1D3A3)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV [0xdce4],AL (1000_D3A4 / 0x1D3A4)
    UInt8[DS, 0xDCE4] = AL;
    // CBW  (1000_D3A7 / 0x1D3A7)
    AX = (ushort)((short)((sbyte)AL));
    // ADD SI,AX (1000_D3A8 / 0x1D3A8)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // XOR CX,CX (1000_D3AA / 0x1D3AA)
    CX = 0;
    // MOV byte ptr [0xdce8],CL (1000_D3AC / 0x1D3AC)
    UInt8[DS, 0xDCE8] = CL;
    // MOV byte ptr [0xdce5],0xff (1000_D3B0 / 0x1D3B0)
    UInt8[DS, 0xDCE5] = 0xFF;
    label_1000_D3B5_1D3B5:
    // MOV AX,word ptr [SI] (1000_D3B5 / 0x1D3B5)
    AX = UInt16[DS, SI];
    // OR AX,AX (1000_D3B7 / 0x1D3B7)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:d3ef (1000_D3B9 / 0x1D3B9)
    if(ZeroFlag) {
      goto label_1000_D3EF_1D3EF;
    }
    // CMP CL,0x4 (1000_D3BB / 0x1D3BB)
    Alu.Sub8(CL, 0x4);
    // JC 0x1000:d3d9 (1000_D3BE / 0x1D3BE)
    if(CarryFlag) {
      goto label_1000_D3D9_1D3D9;
    }
    // CMP byte ptr [0xdce4],0x0 (1000_D3C0 / 0x1D3C0)
    Alu.Sub8(UInt8[DS, 0xDCE4], 0x0);
    // JNZ 0x1000:d3cd (1000_D3C5 / 0x1D3C5)
    if(!ZeroFlag) {
      goto label_1000_D3CD_1D3CD;
    }
    // CMP word ptr [SI + 0x4],0x0 (1000_D3C7 / 0x1D3C7)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x4)], 0x0);
    // JZ 0x1000:d3d9 (1000_D3CB / 0x1D3CB)
    if(ZeroFlag) {
      goto label_1000_D3D9_1D3D9;
    }
    label_1000_D3CD_1D3CD:
    // OR byte ptr [0xdce4],0x80 (1000_D3CD / 0x1D3CD)
    // UInt8[DS, 0xDCE4] |= 0x80;
    UInt8[DS, 0xDCE4] = Alu.Or8(UInt8[DS, 0xDCE4], 0x80);
    // MOV AX,0xa0 (1000_D3D2 / 0x1D3D2)
    AX = 0xA0;
    // MOV byte ptr [0xdce5],CL (1000_D3D5 / 0x1D3D5)
    UInt8[DS, 0xDCE5] = CL;
    label_1000_D3D9_1D3D9:
    // ADD SI,0x4 (1000_D3D9 / 0x1D3D9)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // PUSH CX (1000_D3DC / 0x1D3DC)
    Stack.Push(CX);
    // PUSH SI (1000_D3DD / 0x1D3DD)
    Stack.Push(SI);
    // INC byte ptr [0xdce8] (1000_D3DE / 0x1D3DE)
    UInt8[DS, 0xDCE8] = Alu.Inc8(UInt8[DS, 0xDCE8]);
    // CALL 0x1000:d48a (1000_D3E2 / 0x1D3E2)
    NearCall(cs1, 0xD3E5, unknown_1000_D48A_1D48A);
    // POP SI (1000_D3E5 / 0x1D3E5)
    SI = Stack.Pop();
    // POP CX (1000_D3E6 / 0x1D3E6)
    CX = Stack.Pop();
    // INC CX (1000_D3E7 / 0x1D3E7)
    CX = Alu.Inc16(CX);
    // CMP CL,0x5 (1000_D3E8 / 0x1D3E8)
    Alu.Sub8(CL, 0x5);
    // JC 0x1000:d3b5 (1000_D3EB / 0x1D3EB)
    if(CarryFlag) {
      goto label_1000_D3B5_1D3B5;
    }
    // JMP 0x1000:d410 (1000_D3ED / 0x1D3ED)
    // Jump converted to non entry function call
    return unknown_1000_D323_1D323(0x1D410 - cs1 * 0x10);
    label_1000_D3EF_1D3EF:
    // CMP byte ptr [0xdce4],0x0 (1000_D3EF / 0x1D3EF)
    Alu.Sub8(UInt8[DS, 0xDCE4], 0x0);
    // JZ 0x1000:d403 (1000_D3F4 / 0x1D3F4)
    if(ZeroFlag) {
      goto label_1000_D403_1D403;
    }
    // MOV AX,0xa0 (1000_D3F6 / 0x1D3F6)
    AX = 0xA0;
    // MOV byte ptr [0xdce5],CL (1000_D3F9 / 0x1D3F9)
    UInt8[DS, 0xDCE5] = CL;
    // INC byte ptr [0xdce8] (1000_D3FD / 0x1D3FD)
    UInt8[DS, 0xDCE8] = Alu.Inc8(UInt8[DS, 0xDCE8]);
    // JMP 0x1000:d405 (1000_D401 / 0x1D401)
    goto label_1000_D405_1D405;
    label_1000_D403_1D403:
    // XOR AX,AX (1000_D403 / 0x1D403)
    AX = 0;
    label_1000_D405_1D405:
    // PUSH CX (1000_D405 / 0x1D405)
    Stack.Push(CX);
    // CALL 0x1000:d48a (1000_D406 / 0x1D406)
    NearCall(cs1, 0xD409, unknown_1000_D48A_1D48A);
    // POP CX (1000_D409 / 0x1D409)
    CX = Stack.Pop();
    // INC CX (1000_D40A / 0x1D40A)
    CX = Alu.Inc16(CX);
    // CMP CL,0x5 (1000_D40B / 0x1D40B)
    Alu.Sub8(CL, 0x5);
    // JC 0x1000:d403 (1000_D40E / 0x1D40E)
    if(CarryFlag) {
      goto label_1000_D403_1D403;
    }
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_D323_1D323(0x1D410 - cs1 * 0x10);
  }
  
  public Action SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B(int gotoTarget) {
    label_1000_D41B_1D41B:
    // MOV BP,word ptr [0x21da] (1000_D41B / 0x1D41B)
    BP = UInt16[DS, 0x21DA];
    // MOV BP,word ptr [BP + 0x0] (1000_D41F / 0x1D41F)
    BP = UInt16[SS, BP];
    // RET  (1000_D422 / 0x1D422)
    return NearRet();
  }
  
  public Action unknown_1000_D42F_1D42F(int gotoTarget) {
    label_1000_D42F_1D42F:
    // MOV CX,0x4 (1000_D42F / 0x1D42F)
    CX = 0x4;
    // JMP 0x1000:d445 (1000_D432 / 0x1D432)
    // Jump converted to non entry function call
    return unknown_1000_D43E_1D43E(0x1D445 - cs1 * 0x10);
  }
  
  public Action unknown_1000_D434_1D434(int gotoTarget) {
    label_1000_D434_1D434:
    // MOV CX,0x3 (1000_D434 / 0x1D434)
    CX = 0x3;
    // JMP 0x1000:d445 (1000_D437 / 0x1D437)
    // Jump converted to non entry function call
    return unknown_1000_D43E_1D43E(0x1D445 - cs1 * 0x10);
  }
  
  public Action unknown_1000_D439_1D439(int gotoTarget) {
    label_1000_D439_1D439:
    // MOV CX,0x2 (1000_D439 / 0x1D439)
    CX = 0x2;
    // JMP 0x1000:d445 (1000_D43C / 0x1D43C)
    // Jump converted to non entry function call
    return unknown_1000_D43E_1D43E(0x1D445 - cs1 * 0x10);
  }
  
  public Action unknown_1000_D43E_1D43E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD445: goto label_1000_D445_1D445;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D43E_1D43E:
    // MOV CX,0x1 (1000_D43E / 0x1D43E)
    CX = 0x1;
    // JMP 0x1000:d445 (1000_D441 / 0x1D441)
    goto label_1000_D445_1D445;
    label_1000_D445_1D445:
    // CALL 0x1000:d454 (1000_D445 / 0x1D445)
    NearCall(cs1, 0xD448, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454);
    // OR BX,BX (1000_D448 / 0x1D448)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:d453 (1000_D44A / 0x1D44A)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D453 / 0x1D453)
      return NearRet();
    }
    // TEST AH,0x40 (1000_D44C / 0x1D44C)
    Alu.And8(AH, 0x40);
    // JNZ 0x1000:d453 (1000_D44F / 0x1D44F)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_D453 / 0x1D453)
      return NearRet();
    }
    // JMP BX (1000_D451 / 0x1D451)
    // Indirect jump to BX, generating possible targets from emulator records
    uint targetAddress_1000_D451 = (uint)(BX);
    switch(targetAddress_1000_D451) {
      case 0x186B : // Jump converted to entry function call
    return unknown_1000_186B_1186B(0);
      case 0xB29E : throw FailAsUntested("Would have been a goto but label label_1000_B29E_1B29E does not exist because no instruction was found there that belongs to a function.");
      case 0xB3B0 : throw FailAsUntested("Would have been a goto but label label_1000_B3B0_1B3B0 does not exist because no instruction was found there that belongs to a function.");
      case 0xBC81 : throw FailAsUntested("Would have been a goto but label label_1000_BC81_1BC81 does not exist because no instruction was found there that belongs to a function.");
      case 0x95E2 : throw FailAsUntested("Would have been a goto but label label_1000_95E2_195E2 does not exist because no instruction was found there that belongs to a function.");
      case 0xAF60 : throw FailAsUntested("Would have been a goto but label label_1000_AF60_1AF60 does not exist because no instruction was found there that belongs to a function.");
      case 0xAF68 : throw FailAsUntested("Would have been a goto but label label_1000_AF68_1AF68 does not exist because no instruction was found there that belongs to a function.");
      case 0xAF70 : throw FailAsUntested("Would have been a goto but label label_1000_AF70_1AF70 does not exist because no instruction was found there that belongs to a function.");
      case 0xB18B : throw FailAsUntested("Would have been a goto but label label_1000_B18B_1B18B does not exist because no instruction was found there that belongs to a function.");
      case 0x4FFB : throw FailAsUntested("Would have been a goto but label label_1000_4FFB_14FFB does not exist because no instruction was found there that belongs to a function.");
      case 0x9306 : throw FailAsUntested("Would have been a goto but label label_1000_9306_19306 does not exist because no instruction was found there that belongs to a function.");
      case 0x9472 : // Jump converted to non entry function call
    return unknown_1000_9215_19215(0x19472 - cs1 * 0x10);
      case 0x42E9 : // Jump converted to non entry function call
    return unknown_1000_9215_19215(0x142E9 - cs1 * 0x10);
      case 0x50DB : throw FailAsUntested("Would have been a goto but label label_1000_50DB_150DB does not exist because no instruction was found there that belongs to a function.");
      case 0x95C1 : throw FailAsUntested("Would have been a goto but label label_1000_95C1_195C1 does not exist because no instruction was found there that belongs to a function.");
      case 0x5A03 : throw FailAsUntested("Would have been a goto but label label_1000_5A03_15A03 does not exist because no instruction was found there that belongs to a function.");
      case 0x7BED : // Jump converted to entry function call
    return unknown_1000_7BED_17BED(0);
      case 0x69B3 : throw FailAsUntested("Would have been a goto but label label_1000_69B3_169B3 does not exist because no instruction was found there that belongs to a function.");
      case 0x6A71 : throw FailAsUntested("Would have been a goto but label label_1000_6A71_16A71 does not exist because no instruction was found there that belongs to a function.");
      case 0x8763 : // Jump converted to entry function call
    return unknown_1000_8763_18763(0);
      case 0x9ED5 : // Jump converted to non entry function call
    return unknown_1000_1707_11707(0x19ED5 - cs1 * 0x10);
      case 0x6A83 : throw FailAsUntested("Would have been a goto but label label_1000_6A83_16A83 does not exist because no instruction was found there that belongs to a function.");
      case 0x9533 : throw FailAsUntested("Would have been a goto but label label_1000_9533_19533 does not exist because no instruction was found there that belongs to a function.");
      case 0xD2E2 : // Jump converted to entry function call
    return unknown_1000_D2E2_1D2E2(0);
      case 0x9373 : throw FailAsUntested("Would have been a goto but label label_1000_9373_19373 does not exist because no instruction was found there that belongs to a function.");
      case 0x7CBB : throw FailAsUntested("Would have been a goto but label label_1000_7CBB_17CBB does not exist because no instruction was found there that belongs to a function.");
      case 0xB96B : // Jump converted to entry function call
    return unknown_1000_B96B_1B96B(0);
      case 0x8064 : throw FailAsUntested("Would have been a goto but label label_1000_8064_18064 does not exist because no instruction was found there that belongs to a function.");
      case 0x8214 : // Jump converted to non entry function call
    return unknown_1000_81EC_181EC(0x18214 - cs1 * 0x10);
      case 0x53F1 : throw FailAsUntested("Would have been a goto but label label_1000_53F1_153F1 does not exist because no instruction was found there that belongs to a function.");
      case 0xEA6 : throw FailAsUntested("Would have been a goto but label label_1000_0EA6_10EA6 does not exist because no instruction was found there that belongs to a function.");
      case 0xB28C : throw FailAsUntested("Would have been a goto but label label_1000_B28C_1B28C does not exist because no instruction was found there that belongs to a function.");
      case 0xB35A : throw FailAsUntested("Would have been a goto but label label_1000_B35A_1B35A does not exist because no instruction was found there that belongs to a function.");
      case 0xEB9 : // Jump converted to non entry function call
    return unknown_1000_941D_1941D(0x10EB9 - cs1 * 0x10);
      case 0x92F7 : throw FailAsUntested("Would have been a goto but label label_1000_92F7_192F7 does not exist because no instruction was found there that belongs to a function.");
      case 0xA3F0 : throw FailAsUntested("Would have been a goto but label label_1000_A3F0_1A3F0 does not exist because no instruction was found there that belongs to a function.");
      case 0x776D : throw FailAsUntested("Would have been a goto but label label_1000_776D_1776D does not exist because no instruction was found there that belongs to a function.");
      case 0x283A : throw FailAsUntested("Would have been a goto but label label_1000_283A_1283A does not exist because no instruction was found there that belongs to a function.");
      case 0x290B : throw FailAsUntested("Would have been a goto but label label_1000_290B_1290B does not exist because no instruction was found there that belongs to a function.");
      case 0x2993 : // Jump converted to non entry function call
    return unknown_1000_941D_1941D(0x12993 - cs1 * 0x10);
      case 0x241A : throw FailAsUntested("Would have been a goto but label label_1000_241A_1241A does not exist because no instruction was found there that belongs to a function.");
      case 0xE3E : throw FailAsUntested("Would have been a goto but label label_1000_0E3E_10E3E does not exist because no instruction was found there that belongs to a function.");
      case 0x3A : // Jump converted to non entry function call
    return entry_1000_0000_10000(0x1003A - cs1 * 0x10);
      case 0x92F2 : throw FailAsUntested("Would have been a goto but label label_1000_92F2_192F2 does not exist because no instruction was found there that belongs to a function.");
      case 0x283E : throw FailAsUntested("Would have been a goto but label label_1000_283E_1283E does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_1000_D451);
        break;
    }
    label_1000_D453_1D453:
    // RET  (1000_D453 / 0x1D453)
    return NearRet();
  }
  
  public Action DispatcherJumpsToBX_1000_D443_1D443(int gotoTarget) {
    label_1000_D443_1D443:
    // XOR CX,CX (1000_D443 / 0x1D443)
    CX = 0;
    // Function call generated as ASM continues to next function body without return
    return unknown_1000_D43E_1D43E(0x1D445 - cs1 * 0x10);
  }
  
  public Action DispatcherHelperDeterminesWhereToJump_1000_D454_1D454(int gotoTarget) {
    label_1000_D454_1D454:
    // MOV SI,word ptr [0x21da] (1000_D454 / 0x1D454)
    SI = UInt16[DS, 0x21DA];
    // MOV SI,word ptr [SI] (1000_D458 / 0x1D458)
    SI = UInt16[DS, SI];
    // INC SI (1000_D45A / 0x1D45A)
    SI = Alu.Inc16(SI);
    // XOR CH,CH (1000_D45B / 0x1D45B)
    CH = 0;
    // CMP CL,byte ptr [0xdce5] (1000_D45D / 0x1D45D)
    Alu.Sub8(CL, UInt8[DS, 0xDCE5]);
    // JZ 0x1000:d475 (1000_D461 / 0x1D461)
    if(ZeroFlag) {
      goto label_1000_D475_1D475;
    }
    // LODSB SI (1000_D463 / 0x1D463)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CBW  (1000_D464 / 0x1D464)
    AX = (ushort)((short)((sbyte)AL));
    // ADD SI,AX (1000_D465 / 0x1D465)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV AX,CX (1000_D467 / 0x1D467)
    AX = CX;
    // SHL AX,1 (1000_D469 / 0x1D469)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_D46B / 0x1D46B)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD SI,AX (1000_D46D / 0x1D46D)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV AX,word ptr [SI] (1000_D46F / 0x1D46F)
    AX = UInt16[DS, SI];
    // MOV BX,word ptr [SI + 0x2] (1000_D471 / 0x1D471)
    BX = UInt16[DS, (ushort)(SI + 0x2)];
    // RET  (1000_D474 / 0x1D474)
    return NearRet();
    label_1000_D475_1D475:
    // MOV AX,0xa0 (1000_D475 / 0x1D475)
    AX = 0xA0;
    // MOV BX,0xd423 (1000_D478 / 0x1D478)
    BX = 0xD423;
    // CMP byte ptr [0xdce4],0x0 (1000_D47B / 0x1D47B)
    Alu.Sub8(UInt8[DS, 0xDCE4], 0x0);
    // JS 0x1000:d489 (1000_D480 / 0x1D480)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_D489 / 0x1D489)
      return NearRet();
    }
    // MOV BX,0xd429 (1000_D482 / 0x1D482)
    BX = 0xD429;
    // JG 0x1000:d489 (1000_D485 / 0x1D485)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (1000_D489 / 0x1D489)
      return NearRet();
    }
    // XOR BX,BX (1000_D487 / 0x1D487)
    BX = 0;
    label_1000_D489_1D489:
    // RET  (1000_D489 / 0x1D489)
    return NearRet();
  }
  
  public Action unknown_1000_D48A_1D48A(int gotoTarget) {
    label_1000_D48A_1D48A:
    // PUSH word ptr [0xdbda] (1000_D48A / 0x1D48A)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_D48E / 0x1D48E)
    NearCall(cs1, 0xD491, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // CMP byte ptr [0xdce6],0x0 (1000_D491 / 0x1D491)
    Alu.Sub8(UInt8[DS, 0xDCE6], 0x0);
    // JLE 0x1000:d49b (1000_D496 / 0x1D496)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_D49B_1D49B;
    }
    // CALL 0x1000:c07c (1000_D498 / 0x1D498)
    NearCall(cs1, 0xD49B, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    label_1000_D49B_1D49B:
    // CALL 0x1000:d075 (1000_D49B / 0x1D49B)
    NearCall(cs1, 0xD49E, SetFontToMenu_1000_D075_1D075);
    // MOV SI,AX (1000_D49E / 0x1D49E)
    SI = AX;
    // MOV AL,0xe (1000_D4A0 / 0x1D4A0)
    AL = 0xE;
    // MUL CL (1000_D4A2 / 0x1D4A2)
    Cpu.Mul8(CL);
    // MOV DI,AX (1000_D4A4 / 0x1D4A4)
    DI = AX;
    // ADD DI,0x1b48 (1000_D4A6 / 0x1D4A6)
    // DI += 0x1B48;
    DI = Alu.Add16(DI, 0x1B48);
    // MOV BX,word ptr [DI + 0x2] (1000_D4AA / 0x1D4AA)
    BX = UInt16[DS, (ushort)(DI + 0x2)];
    // INC BX (1000_D4AD / 0x1D4AD)
    BX = Alu.Inc16(BX);
    // MOV DX,0x5d (1000_D4AE / 0x1D4AE)
    DX = 0x5D;
    // CALL 0x1000:d04e (1000_D4B1 / 0x1D4B1)
    NearCall(cs1, 0xD4B4, unknown_1000_D04E_1D04E);
    // MOV byte ptr [0xdbe5],0xf3 (1000_D4B4 / 0x1D4B4)
    UInt8[DS, 0xDBE5] = 0xF3;
    // AND byte ptr [DI + 0x8],0x7f (1000_D4B9 / 0x1D4B9)
    // UInt8[DS, (ushort)(DI + 0x8)] &= 0x7F;
    UInt8[DS, (ushort)(DI + 0x8)] = Alu.And8(UInt8[DS, (ushort)(DI + 0x8)], 0x7F);
    // MOV AX,SI (1000_D4BD / 0x1D4BD)
    AX = SI;
    // AND SI,0x3fff (1000_D4BF / 0x1D4BF)
    // SI &= 0x3FFF;
    SI = Alu.And16(SI, 0x3FFF);
    // JZ 0x1000:d4e9 (1000_D4C3 / 0x1D4C3)
    if(ZeroFlag) {
      goto label_1000_D4E9_1D4E9;
    }
    // MOV AL,0xf5 (1000_D4C5 / 0x1D4C5)
    AL = 0xF5;
    // TEST AH,0x40 (1000_D4C7 / 0x1D4C7)
    Alu.And8(AH, 0x40);
    // JNZ 0x1000:d4da (1000_D4CA / 0x1D4CA)
    if(!ZeroFlag) {
      goto label_1000_D4DA_1D4DA;
    }
    // OR byte ptr [DI + 0x8],0x80 (1000_D4CC / 0x1D4CC)
    // UInt8[DS, (ushort)(DI + 0x8)] |= 0x80;
    UInt8[DS, (ushort)(DI + 0x8)] = Alu.Or8(UInt8[DS, (ushort)(DI + 0x8)], 0x80);
    // MOV AL,0xfa (1000_D4D0 / 0x1D4D0)
    AL = 0xFA;
    // OR AH,AH (1000_D4D2 / 0x1D4D2)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JNS 0x1000:d4da (1000_D4D4 / 0x1D4D4)
    if(!SignFlag) {
      goto label_1000_D4DA_1D4DA;
    }
    // XCHG byte ptr [0xdbe5],AL (1000_D4D6 / 0x1D4D6)
    byte tmp_1000_D4D6 = UInt8[DS, 0xDBE5];
    UInt8[DS, 0xDBE5] = AL;
    AL = tmp_1000_D4D6;
    label_1000_D4DA_1D4DA:
    // MOV [0xdbe4],AL (1000_D4DA / 0x1D4DA)
    UInt8[DS, 0xDBE4] = AL;
    // CALL 0x1000:cf70 (1000_D4DD / 0x1D4DD)
    NearCall(cs1, 0xD4E0, unknown_1000_CF70_1CF70);
    // MOV AL,0x20 (1000_D4E0 / 0x1D4E0)
    AL = 0x20;
    // CALL word ptr [0x2518] (1000_D4E2 / 0x1D4E2)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_D4E2 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_D4E2) {
      case 0xD12F : NearCall(cs1, 0xD4E6, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D4E2);
        break;
    }
    // CALL 0x1000:d1bb (1000_D4E6 / 0x1D4E6)
    NearCall(cs1, 0xD4E9, unknown_1000_D1BB_1D1BB);
    label_1000_D4E9_1D4E9:
    // CALL 0x1000:d05f (1000_D4E9 / 0x1D4E9)
    NearCall(cs1, 0xD4EC, GetCharacterCoordsXY_1000_D05F_1D05F);
    // MOV SI,0xdce9 (1000_D4EC / 0x1D4EC)
    SI = 0xDCE9;
    // MOV word ptr [SI],DX (1000_D4EF / 0x1D4EF)
    UInt16[DS, SI] = DX;
    // MOV word ptr [SI + 0x2],BX (1000_D4F1 / 0x1D4F1)
    UInt16[DS, (ushort)(SI + 0x2)] = BX;
    // MOV word ptr [SI + 0x4],0xe3 (1000_D4F4 / 0x1D4F4)
    UInt16[DS, (ushort)(SI + 0x4)] = 0xE3;
    // ADD BX,0x7 (1000_D4F9 / 0x1D4F9)
    // BX += 0x7;
    BX = Alu.Add16(BX, 0x7);
    // MOV word ptr [SI + 0x6],BX (1000_D4FC / 0x1D4FC)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // MOV AL,[0xdbe5] (1000_D4FF / 0x1D4FF)
    AL = UInt8[DS, 0xDBE5];
    // MOV ES,word ptr [0xdbda] (1000_D502 / 0x1D502)
    ES = UInt16[DS, 0xDBDA];
    // CALLF [0x38dd] (1000_D506 / 0x1D506)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_D506 = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_D506) {
      case 0x235CE : FarCall(cs1, 0xD50A, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D506);
        break;
    }
    // POP word ptr [0xdbda] (1000_D50A / 0x1D50A)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // RET  (1000_D50E / 0x1D50E)
    return NearRet();
  }
  
  public Action unknown_1000_D50F_1D50F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD50F: goto label_1000_D50F_1D50F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D50F_1D50F:
    // PUSH BX (1000_D50F / 0x1D50F)
    Stack.Push(BX);
    // PUSH CX (1000_D510 / 0x1D510)
    Stack.Push(CX);
    // PUSH DX (1000_D511 / 0x1D511)
    Stack.Push(DX);
    // PUSH SI (1000_D512 / 0x1D512)
    Stack.Push(SI);
    // PUSH DI (1000_D513 / 0x1D513)
    Stack.Push(DI);
    // PUSH BP (1000_D514 / 0x1D514)
    Stack.Push(BP);
    // CMP byte ptr [0x4774],0x0 (1000_D515 / 0x1D515)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JZ 0x1000:d523 (1000_D51A / 0x1D51A)
    if(ZeroFlag) {
      goto label_1000_D523_1D523;
    }
    // MOV CL,byte ptr [0x4775] (1000_D51C / 0x1D51C)
    CL = UInt8[DS, 0x4775];
    // JMP 0x1000:d5dd (1000_D520 / 0x1D520)
    goto label_1000_D5DD_1D5DD;
    label_1000_D523_1D523:
    // CALL 0x1000:d41b (1000_D523 / 0x1D523)
    NearCall(cs1, 0xD526, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // CMP BP,0x1f0e (1000_D526 / 0x1D526)
    Alu.Sub16(BP, 0x1F0E);
    // JNZ 0x1000:d575 (1000_D52A / 0x1D52A)
    if(!ZeroFlag) {
      goto label_1000_D575_1D575;
    }
    // CMP byte ptr [0x11c9],0x0 (1000_D52C / 0x1D52C)
    Alu.Sub8(UInt8[DS, 0x11C9], 0x0);
    // JNZ 0x1000:d575 (1000_D531 / 0x1D531)
    if(!ZeroFlag) {
      goto label_1000_D575_1D575;
    }
    // MOV DI,0x1bf0 (1000_D533 / 0x1D533)
    DI = 0x1BF0;
    // CMP byte ptr [DI + 0x8],0x0 (1000_D536 / 0x1D536)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x0);
    // JNS 0x1000:d545 (1000_D53A / 0x1D53A)
    if(!SignFlag) {
      goto label_1000_D545_1D545;
    }
    // CALL 0x1000:d6fe (1000_D53C / 0x1D53C)
    NearCall(cs1, 0xD53F, unknown_1000_D6FE_1D6FE);
    // MOV CX,word ptr [0x47c4] (1000_D53F / 0x1D53F)
    CX = UInt16[DS, 0x47C4];
    // JC 0x1000:d55d (1000_D543 / 0x1D543)
    if(CarryFlag) {
      goto label_1000_D55D_1D55D;
    }
    label_1000_D545_1D545:
    // PUSH BP (1000_D545 / 0x1D545)
    Stack.Push(BP);
    // CALL 0x1000:9285 (1000_D546 / 0x1D546)
    NearCall(cs1, 0xD549, unknown_1000_9285_19285);
    // POP BP (1000_D549 / 0x1D549)
    BP = Stack.Pop();
    // JNC 0x1000:d575 (1000_D54A / 0x1D54A)
    if(!CarryFlag) {
      goto label_1000_D575_1D575;
    }
    // MOV AL,CL (1000_D54C / 0x1D54C)
    AL = CL;
    // SUB AL,0xf (1000_D54E / 0x1D54E)
    // AL -= 0xF;
    AL = Alu.Sub8(AL, 0xF);
    // JC 0x1000:d55d (1000_D550 / 0x1D550)
    if(CarryFlag) {
      goto label_1000_D55D_1D55D;
    }
    // INC AL (1000_D552 / 0x1D552)
    AL = Alu.Inc8(AL);
    // CMP AL,byte ptr [0x476b] (1000_D554 / 0x1D554)
    Alu.Sub8(AL, UInt8[DS, 0x476B]);
    // JNZ 0x1000:d55d (1000_D558 / 0x1D558)
    if(!ZeroFlag) {
      goto label_1000_D55D_1D55D;
    }
    // MOV CX,0x17 (1000_D55A / 0x1D55A)
    CX = 0x17;
    label_1000_D55D_1D55D:
    // MOV BP,CX (1000_D55D / 0x1D55D)
    BP = CX;
    // ADD BP,0x78 (1000_D55F / 0x1D55F)
    // BP += 0x78;
    BP = Alu.Add16(BP, 0x78);
    // XOR CX,CX (1000_D563 / 0x1D563)
    CX = 0;
    label_1000_D565_1D565:
    // CALL 0x1000:d454 (1000_D565 / 0x1D565)
    NearCall(cs1, 0xD568, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454);
    // CMP AX,BP (1000_D568 / 0x1D568)
    Alu.Sub16(AX, BP);
    // JZ 0x1000:d5dd (1000_D56A / 0x1D56A)
    if(ZeroFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // INC CX (1000_D56C / 0x1D56C)
    CX = Alu.Inc16(CX);
    // CMP CL,byte ptr [0xdce8] (1000_D56D / 0x1D56D)
    Alu.Sub8(CL, UInt8[DS, 0xDCE8]);
    // JC 0x1000:d565 (1000_D571 / 0x1D571)
    if(CarryFlag) {
      goto label_1000_D565_1D565;
    }
    // JMP 0x1000:d5db (1000_D573 / 0x1D573)
    goto label_1000_D5DB_1D5DB;
    label_1000_D575_1D575:
    // CMP BP,0x1f7e (1000_D575 / 0x1D575)
    Alu.Sub16(BP, 0x1F7E);
    // JNZ 0x1000:d5b1 (1000_D579 / 0x1D579)
    if(!ZeroFlag) {
      goto label_1000_D5B1_1D5B1;
    }
    // MOV DI,0x1be2 (1000_D57B / 0x1D57B)
    DI = 0x1BE2;
    // CMP byte ptr [DI + 0x8],0x0 (1000_D57E / 0x1D57E)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x0);
    // JNS 0x1000:d593 (1000_D582 / 0x1D582)
    if(!SignFlag) {
      goto label_1000_D593_1D593;
    }
    // XOR CX,CX (1000_D584 / 0x1D584)
    CX = 0;
    // CALL 0x1000:d6fe (1000_D586 / 0x1D586)
    NearCall(cs1, 0xD589, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:d5dd (1000_D589 / 0x1D589)
    if(CarryFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // MOV DI,0x1bf0 (1000_D58B / 0x1D58B)
    DI = 0x1BF0;
    // CALL 0x1000:d6fe (1000_D58E / 0x1D58E)
    NearCall(cs1, 0xD591, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:d5dd (1000_D591 / 0x1D591)
    if(CarryFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    label_1000_D593_1D593:
    // CMP byte ptr [0x1bf8],0x0 (1000_D593 / 0x1D593)
    Alu.Sub8(UInt8[DS, 0x1BF8], 0x0);
    // JNS 0x1000:d5b1 (1000_D598 / 0x1D598)
    if(!SignFlag) {
      goto label_1000_D5B1_1D5B1;
    }
    // MOV DI,0x1bfe (1000_D59A / 0x1D59A)
    DI = 0x1BFE;
    // CALL 0x1000:d6fe (1000_D59D / 0x1D59D)
    NearCall(cs1, 0xD5A0, unknown_1000_D6FE_1D6FE);
    // MOV CL,0x3 (1000_D5A0 / 0x1D5A0)
    CL = 0x3;
    // JC 0x1000:d5dd (1000_D5A2 / 0x1D5A2)
    if(CarryFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // CALL 0x1000:92c9 (1000_D5A4 / 0x1D5A4)
    NearCall(cs1, 0xD5A7, unknown_1000_92C9_192C9);
    // JNC 0x1000:d5b1 (1000_D5A7 / 0x1D5A7)
    if(!CarryFlag) {
      goto label_1000_D5B1_1D5B1;
    }
    // CMP CX,word ptr [0x47c4] (1000_D5A9 / 0x1D5A9)
    Alu.Sub16(CX, UInt16[DS, 0x47C4]);
    // MOV CL,0x2 (1000_D5AD / 0x1D5AD)
    CL = 0x2;
    // JZ 0x1000:d5dd (1000_D5AF / 0x1D5AF)
    if(ZeroFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    label_1000_D5B1_1D5B1:
    // CMP BX,0x98 (1000_D5B1 / 0x1D5B1)
    Alu.Sub16(BX, 0x98);
    // JC 0x1000:d5db (1000_D5B5 / 0x1D5B5)
    if(CarryFlag) {
      goto label_1000_D5DB_1D5DB;
    }
    // MOV CL,0xff (1000_D5B7 / 0x1D5B7)
    CL = 0xFF;
    // MOV DI,0x1b48 (1000_D5B9 / 0x1D5B9)
    DI = 0x1B48;
    // CMP DX,word ptr [DI] (1000_D5BC / 0x1D5BC)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JC 0x1000:d5dd (1000_D5BE / 0x1D5BE)
    if(CarryFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // CMP DX,word ptr [DI + 0x4] (1000_D5C0 / 0x1D5C0)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JNC 0x1000:d5dd (1000_D5C3 / 0x1D5C3)
    if(!CarryFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // XOR CX,CX (1000_D5C5 / 0x1D5C5)
    CX = 0;
    label_1000_D5C7_1D5C7:
    // CMP BX,word ptr [DI + 0x2] (1000_D5C7 / 0x1D5C7)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JBE 0x1000:d5db (1000_D5CA / 0x1D5CA)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D5DB_1D5DB;
    }
    // CMP BX,word ptr [DI + 0x6] (1000_D5CC / 0x1D5CC)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JBE 0x1000:d5dd (1000_D5CF / 0x1D5CF)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D5DD_1D5DD;
    }
    // ADD DI,0xe (1000_D5D1 / 0x1D5D1)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // INC CX (1000_D5D4 / 0x1D5D4)
    CX = Alu.Inc16(CX);
    // CMP CL,byte ptr [0xdce8] (1000_D5D5 / 0x1D5D5)
    Alu.Sub8(CL, UInt8[DS, 0xDCE8]);
    // JC 0x1000:d5c7 (1000_D5D9 / 0x1D5D9)
    if(CarryFlag) {
      goto label_1000_D5C7_1D5C7;
    }
    label_1000_D5DB_1D5DB:
    // MOV CL,0xff (1000_D5DB / 0x1D5DB)
    CL = 0xFF;
    label_1000_D5DD_1D5DD:
    // MOV AL,CL (1000_D5DD / 0x1D5DD)
    AL = CL;
    // XCHG byte ptr [0xdce7],CL (1000_D5DF / 0x1D5DF)
    byte tmp_1000_D5DF = UInt8[DS, 0xDCE7];
    UInt8[DS, 0xDCE7] = CL;
    CL = tmp_1000_D5DF;
    // CMP AL,CL (1000_D5E3 / 0x1D5E3)
    Alu.Sub8(AL, CL);
    // JZ 0x1000:d610 (1000_D5E5 / 0x1D5E5)
    if(ZeroFlag) {
      goto label_1000_D610_1D610;
    }
    // CALL 0x1000:dbb2 (1000_D5E7 / 0x1D5E7)
    NearCall(cs1, 0xD5EA, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // OR CL,CL (1000_D5EA / 0x1D5EA)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JS 0x1000:d5fc (1000_D5EC / 0x1D5EC)
    if(SignFlag) {
      goto label_1000_D5FC_1D5FC;
    }
    // CMP CL,byte ptr [0xdce8] (1000_D5EE / 0x1D5EE)
    Alu.Sub8(CL, UInt8[DS, 0xDCE8]);
    // JNC 0x1000:d5fc (1000_D5F2 / 0x1D5F2)
    if(!CarryFlag) {
      goto label_1000_D5FC_1D5FC;
    }
    // PUSH AX (1000_D5F4 / 0x1D5F4)
    Stack.Push(AX);
    // CALL 0x1000:d454 (1000_D5F5 / 0x1D5F5)
    NearCall(cs1, 0xD5F8, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454);
    // CALL 0x1000:d48a (1000_D5F8 / 0x1D5F8)
    NearCall(cs1, 0xD5FB, unknown_1000_D48A_1D48A);
    // POP AX (1000_D5FB / 0x1D5FB)
    AX = Stack.Pop();
    label_1000_D5FC_1D5FC:
    // CMP AL,byte ptr [0xdce8] (1000_D5FC / 0x1D5FC)
    Alu.Sub8(AL, UInt8[DS, 0xDCE8]);
    // JNC 0x1000:d60d (1000_D600 / 0x1D600)
    if(!CarryFlag) {
      goto label_1000_D60D_1D60D;
    }
    // MOV CX,AX (1000_D602 / 0x1D602)
    CX = AX;
    // CALL 0x1000:d454 (1000_D604 / 0x1D604)
    NearCall(cs1, 0xD607, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454);
    // OR AH,0x80 (1000_D607 / 0x1D607)
    // AH |= 0x80;
    AH = Alu.Or8(AH, 0x80);
    // CALL 0x1000:d48a (1000_D60A / 0x1D60A)
    NearCall(cs1, 0xD60D, unknown_1000_D48A_1D48A);
    label_1000_D60D_1D60D:
    // CALL 0x1000:dbec (1000_D60D / 0x1D60D)
    NearCall(cs1, 0xD610, draw_mouse_ida_1000_DBEC_1DBEC);
    label_1000_D610_1D610:
    // POP BP (1000_D610 / 0x1D610)
    BP = Stack.Pop();
    // POP DI (1000_D611 / 0x1D611)
    DI = Stack.Pop();
    // POP SI (1000_D612 / 0x1D612)
    SI = Stack.Pop();
    // POP DX (1000_D613 / 0x1D613)
    DX = Stack.Pop();
    // POP CX (1000_D614 / 0x1D614)
    CX = Stack.Pop();
    // POP BX (1000_D615 / 0x1D615)
    BX = Stack.Pop();
    // RET  (1000_D616 / 0x1D616)
    return NearRet();
  }
  
  public Action unknown_1000_D61D_1D61D(int gotoTarget) {
    label_1000_D61D_1D61D:
    // PUSH AX (1000_D61D / 0x1D61D)
    Stack.Push(AX);
    // MOV AX,0x9f (1000_D61E / 0x1D61E)
    AX = 0x9F;
    label_1000_D621_1D621:
    // CALL 0x1000:e270 (1000_D621 / 0x1D621)
    NearCall(cs1, 0xD624, PushAll_1000_E270_1E270);
    // CALL 0x1000:d41b (1000_D624 / 0x1D624)
    NearCall(cs1, 0xD627, SetBpToCurrentMenuTypeForScreenAction_1000_D41B_1D41B);
    // MOV SI,0x1f7e (1000_D627 / 0x1D627)
    SI = 0x1F7E;
    // CMP word ptr [SI + 0x2],AX (1000_D62A / 0x1D62A)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x2)], AX);
    // MOV word ptr [SI + 0x2],AX (1000_D62D / 0x1D62D)
    UInt16[DS, (ushort)(SI + 0x2)] = AX;
    // JZ 0x1000:d649 (1000_D630 / 0x1D630)
    if(ZeroFlag) {
      goto label_1000_D649_1D649;
    }
    // CMP BP,SI (1000_D632 / 0x1D632)
    Alu.Sub16(BP, SI);
    // JNZ 0x1000:d649 (1000_D634 / 0x1D634)
    if(!ZeroFlag) {
      goto label_1000_D649_1D649;
    }
    // CALL 0x1000:dbb2 (1000_D636 / 0x1D636)
    NearCall(cs1, 0xD639, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // XOR CX,CX (1000_D639 / 0x1D639)
    CX = 0;
    // CALL 0x1000:d454 (1000_D63B / 0x1D63B)
    NearCall(cs1, 0xD63E, DispatcherHelperDeterminesWhereToJump_1000_D454_1D454);
    // CALL 0x1000:d48a (1000_D63E / 0x1D63E)
    NearCall(cs1, 0xD641, unknown_1000_D48A_1D48A);
    // MOV byte ptr [0xdce7],0xff (1000_D641 / 0x1D641)
    UInt8[DS, 0xDCE7] = 0xFF;
    // CALL 0x1000:dbec (1000_D646 / 0x1D646)
    NearCall(cs1, 0xD649, draw_mouse_ida_1000_DBEC_1DBEC);
    label_1000_D649_1D649:
    // CALL 0x1000:e283 (1000_D649 / 0x1D649)
    NearCall(cs1, 0xD64C, PopAll_1000_E283_1E283);
    // POP AX (1000_D64C / 0x1D64C)
    AX = Stack.Pop();
    // RET  (1000_D64D / 0x1D64D)
    return NearRet();
  }
  
  public Action unknown_1000_D64E_1D64E(int gotoTarget) {
    label_1000_D64E_1D64E:
    // PUSH BX (1000_D64E / 0x1D64E)
    Stack.Push(BX);
    // PUSH DX (1000_D64F / 0x1D64F)
    Stack.Push(DX);
    // XOR BX,BX (1000_D650 / 0x1D650)
    BX = 0;
    // XOR DX,DX (1000_D652 / 0x1D652)
    DX = 0;
    // CALL 0x1000:d50f (1000_D654 / 0x1D654)
    NearCall(cs1, 0xD657, unknown_1000_D50F_1D50F);
    // POP DX (1000_D657 / 0x1D657)
    DX = Stack.Pop();
    // POP BX (1000_D658 / 0x1D658)
    BX = Stack.Pop();
    // RET  (1000_D659 / 0x1D659)
    return NearRet();
  }
  
  public Action unknown_1000_D65A_1D65A(int gotoTarget) {
    label_1000_D65A_1D65A:
    // TEST byte ptr [DI + 0x9],0x20 (1000_D65A / 0x1D65A)
    Alu.And8(UInt8[DS, (ushort)(DI + 0x9)], 0x20);
    // JZ 0x1000:d676 (1000_D65E / 0x1D65E)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D676 / 0x1D676)
      return NearRet();
    }
    // MOV word ptr [0xdc60],DI (1000_D660 / 0x1D660)
    UInt16[DS, 0xDC60] = DI;
    // INC word ptr [DI + 0xa] (1000_D664 / 0x1D664)
    UInt16[DS, (ushort)(DI + 0xA)] = Alu.Inc16(UInt16[DS, (ushort)(DI + 0xA)]);
    // PUSH SI (1000_D667 / 0x1D667)
    Stack.Push(SI);
    // PUSH DI (1000_D668 / 0x1D668)
    Stack.Push(DI);
    // MOV SI,DI (1000_D669 / 0x1D669)
    SI = DI;
    // MOV CX,0x1 (1000_D66B / 0x1D66B)
    CX = 0x1;
    // CALL 0x1000:d1f2 (1000_D66E / 0x1D66E)
    NearCall(cs1, 0xD671, unknown_1000_D1F2_1D1F2);
    // POP DI (1000_D671 / 0x1D671)
    DI = Stack.Pop();
    // POP SI (1000_D672 / 0x1D672)
    SI = Stack.Pop();
    // DEC word ptr [DI + 0xa] (1000_D673 / 0x1D673)
    UInt16[DS, (ushort)(DI + 0xA)] = Alu.Dec16(UInt16[DS, (ushort)(DI + 0xA)]);
    label_1000_D676_1D676:
    // RET  (1000_D676 / 0x1D676)
    return NearRet();
  }
  
  public Action unknown_1000_D694_1D694(int gotoTarget) {
    label_1000_D694_1D694:
    // MOV AX,[0x2582] (1000_D694 / 0x1D694)
    AX = UInt16[DS, 0x2582];
    // MOV DI,0x1b9c (1000_D697 / 0x1D697)
    DI = 0x1B9C;
    // CMP AX,0x260c (1000_D69A / 0x1D69A)
    Alu.Sub16(AX, 0x260C);
    // JZ 0x1000:d6b5 (1000_D69D / 0x1D69D)
    if(ZeroFlag) {
      goto label_1000_D6B5_1D6B5;
    }
    // ADD DI,0xe (1000_D69F / 0x1D69F)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // CMP AX,0x2650 (1000_D6A2 / 0x1D6A2)
    Alu.Sub16(AX, 0x2650);
    // JZ 0x1000:d6b5 (1000_D6A5 / 0x1D6A5)
    if(ZeroFlag) {
      goto label_1000_D6B5_1D6B5;
    }
    // ADD DI,0xe (1000_D6A7 / 0x1D6A7)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // CMP AX,0x2694 (1000_D6AA / 0x1D6AA)
    Alu.Sub16(AX, 0x2694);
    // JZ 0x1000:d6b5 (1000_D6AD / 0x1D6AD)
    if(ZeroFlag) {
      goto label_1000_D6B5_1D6B5;
    }
    // ADD DI,0xe (1000_D6AF / 0x1D6AF)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // CMP AX,0x26d8 (1000_D6B2 / 0x1D6B2)
    Alu.Sub16(AX, 0x26D8);
    label_1000_D6B5_1D6B5:
    // STC  (1000_D6B5 / 0x1D6B5)
    CarryFlag = true;
    // RET  (1000_D6B6 / 0x1D6B6)
    return NearRet();
  }
  
  public Action unknown_1000_D6B7_1D6B7(int gotoTarget) {
    label_1000_D6B7_1D6B7:
    // CALL 0x1000:d694 (1000_D6B7 / 0x1D6B7)
    NearCall(cs1, 0xD6BA, unknown_1000_D694_1D694);
    // JZ 0x1000:d6fd (1000_D6BA / 0x1D6BA)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D6FD / 0x1D6FD)
      return NearRet();
    }
    // MOV DI,0x1ae4 (1000_D6BC / 0x1D6BC)
    DI = 0x1AE4;
    // MOV CX,word ptr [DI] (1000_D6BF / 0x1D6BF)
    CX = UInt16[DS, DI];
    // ADD DI,0x2 (1000_D6C1 / 0x1D6C1)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // CMP word ptr [0x2570],0x1ad6 (1000_D6C4 / 0x1D6C4)
    Alu.Sub16(UInt16[DS, 0x2570], 0x1AD6);
    // JNZ 0x1000:d6cf (1000_D6CA / 0x1D6CA)
    if(!ZeroFlag) {
      goto label_1000_D6CF_1D6CF;
    }
    // SUB CX,0x5 (1000_D6CC / 0x1D6CC)
    // CX -= 0x5;
    CX = Alu.Sub16(CX, 0x5);
    label_1000_D6CF_1D6CF:
    // CMP byte ptr [0x46d9],0x0 (1000_D6CF / 0x1D6CF)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JZ 0x1000:d6dc (1000_D6D4 / 0x1D6D4)
    if(ZeroFlag) {
      goto label_1000_D6DC_1D6DC;
    }
    // MOV CX,0x5 (1000_D6D6 / 0x1D6D6)
    CX = 0x5;
    // MOV DI,0x1b48 (1000_D6D9 / 0x1D6D9)
    DI = 0x1B48;
    label_1000_D6DC_1D6DC:
    // CMP byte ptr [DI + 0x8],0x0 (1000_D6DC / 0x1D6DC)
    Alu.Sub8(UInt8[DS, (ushort)(DI + 0x8)], 0x0);
    // JNS 0x1000:d6f7 (1000_D6E0 / 0x1D6E0)
    if(!SignFlag) {
      goto label_1000_D6F7_1D6F7;
    }
    // CMP DX,word ptr [DI] (1000_D6E2 / 0x1D6E2)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JBE 0x1000:d6f7 (1000_D6E4 / 0x1D6E4)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D6F7_1D6F7;
    }
    // CMP DX,word ptr [DI + 0x4] (1000_D6E6 / 0x1D6E6)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JNC 0x1000:d6f7 (1000_D6E9 / 0x1D6E9)
    if(!CarryFlag) {
      goto label_1000_D6F7_1D6F7;
    }
    // CMP BX,word ptr [DI + 0x2] (1000_D6EB / 0x1D6EB)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JBE 0x1000:d6f7 (1000_D6EE / 0x1D6EE)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D6F7_1D6F7;
    }
    // DEC BX (1000_D6F0 / 0x1D6F0)
    BX = Alu.Dec16(BX);
    // CMP BX,word ptr [DI + 0x6] (1000_D6F1 / 0x1D6F1)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // INC BX (1000_D6F4 / 0x1D6F4)
    BX = Alu.Inc16(BX);
    // JC 0x1000:d6fd (1000_D6F5 / 0x1D6F5)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_D6FD / 0x1D6FD)
      return NearRet();
    }
    label_1000_D6F7_1D6F7:
    // ADD DI,0xe (1000_D6F7 / 0x1D6F7)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // LOOP 0x1000:d6dc (1000_D6FA / 0x1D6FA)
    if(--CX != 0) {
      goto label_1000_D6DC_1D6DC;
    }
    // CLC  (1000_D6FC / 0x1D6FC)
    CarryFlag = false;
    label_1000_D6FD_1D6FD:
    // RET  (1000_D6FD / 0x1D6FD)
    return NearRet();
  }
  
  public Action unknown_1000_D6FE_1D6FE(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD6FE: goto label_1000_D6FE_1D6FE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D6FE_1D6FE:
    // CMP DX,word ptr [DI] (1000_D6FE / 0x1D6FE)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JBE 0x1000:d710 (1000_D700 / 0x1D700)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D710_1D710;
    }
    // CMP DX,word ptr [DI + 0x4] (1000_D702 / 0x1D702)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JNC 0x1000:d710 (1000_D705 / 0x1D705)
    if(!CarryFlag) {
      goto label_1000_D710_1D710;
    }
    // CMP BX,word ptr [DI + 0x2] (1000_D707 / 0x1D707)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JBE 0x1000:d710 (1000_D70A / 0x1D70A)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_D710_1D710;
    }
    // CMP BX,word ptr [DI + 0x6] (1000_D70C / 0x1D70C)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // RET  (1000_D70F / 0x1D70F)
    return NearRet();
    label_1000_D710_1D710:
    // CLC  (1000_D710 / 0x1D710)
    CarryFlag = false;
    // RET  (1000_D711 / 0x1D711)
    return NearRet();
  }
  
  public Action unknown_1000_D717_1D717(int gotoTarget) {
    label_1000_D717_1D717:
    // CMP byte ptr [0x46eb],0x0 (1000_D717 / 0x1D717)
    Alu.Sub8(UInt8[DS, 0x46EB], 0x0);
    // JNZ 0x1000:d712 (1000_D71C / 0x1D71C)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_5A56_15A56(0x1D712 - cs1 * 0x10);
    }
    // MOV SI,0x1c76 (1000_D71E / 0x1D71E)
    SI = 0x1C76;
    // TEST byte ptr [0x11c9],0x3 (1000_D721 / 0x1D721)
    Alu.And8(UInt8[DS, 0x11C9], 0x3);
    // JZ 0x1000:d72b (1000_D726 / 0x1D726)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_D72B_1D72B(0);
    }
    // MOV SI,0x1d72 (1000_D728 / 0x1D728)
    SI = 0x1D72;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D72B_1D72B(0);
  }
  
  public Action unknown_1000_D72B_1D72B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD735: goto label_1000_D735_1D735;break;
      case 0xD72B: goto label_1000_D72B_1D72B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D72B_1D72B:
    // PUSH DS (1000_D72B / 0x1D72B)
    Stack.Push(DS);
    // POP ES (1000_D72C / 0x1D72C)
    ES = Stack.Pop();
    // MOV DI,0x1b8e (1000_D72D / 0x1D72D)
    DI = 0x1B8E;
    // MOV CX,0x2a (1000_D730 / 0x1D730)
    CX = 0x2A;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_D733 / 0x1D733)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    label_1000_D735_1D735:
    // CALL 0x1000:d741 (1000_D735 / 0x1D735)
    NearCall(cs1, 0xD738, unknown_1000_D741_1D741);
    // MOV SI,0x1b8e (1000_D738 / 0x1D738)
    SI = 0x1B8E;
    // MOV CX,0x6 (1000_D73B / 0x1D73B)
    CX = 0x6;
    // JMP 0x1000:d1f2 (1000_D73E / 0x1D73E)
    // Jump converted to entry function call
    return unknown_1000_D1F2_1D1F2(0);
  }
  
  public Action unknown_1000_D741_1D741(int gotoTarget) {
    label_1000_D741_1D741:
    // MOV AX,[0x1b0c] (1000_D741 / 0x1D741)
    AX = UInt16[DS, 0x1B0C];
    // SUB AX,0x3 (1000_D744 / 0x1D744)
    // AX -= 0x3;
    AX = Alu.Sub16(AX, 0x3);
    // CMP AX,0x3 (1000_D747 / 0x1D747)
    Alu.Sub16(AX, 0x3);
    // JNC 0x1000:d759 (1000_D74A / 0x1D74A)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_D759 / 0x1D759)
      return NearRet();
    }
    // MOV SI,0x2458 (1000_D74C / 0x1D74C)
    SI = 0x2458;
    // MOV ES,word ptr [0xdbd8] (1000_D74F / 0x1D74F)
    ES = UInt16[DS, 0xDBD8];
    // MOV AL,0xf0 (1000_D753 / 0x1D753)
    AL = 0xF0;
    // CALLF [0x38dd] (1000_D755 / 0x1D755)
    // Indirect call to [0x38dd], generating possible targets from emulator records
    uint targetAddress_1000_D755 = (uint)(UInt16[DS, 0x38DF] * 0x10 + UInt16[DS, 0x38DD] - cs1 * 0x10);
    switch(targetAddress_1000_D755) {
      case 0x235CE : FarCall(cs1, 0xD759, unknown_334B_011E_335CE);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D755);
        break;
    }
    label_1000_D759_1D759:
    // RET  (1000_D759 / 0x1D759)
    return NearRet();
  }
  
  public Action unknown_1000_D75A_1D75A(int gotoTarget) {
    label_1000_D75A_1D75A:
    // MOV SI,0x1c36 (1000_D75A / 0x1D75A)
    SI = 0x1C36;
    // CALL 0x1000:d795 (1000_D75D / 0x1D75D)
    NearCall(cs1, 0xD760, unknown_1000_D795_1D795);
    // CALL 0x1000:1a34 (1000_D760 / 0x1D760)
    NearCall(cs1, 0xD763, unknown_1000_1A34_11A34);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D763_1D763(0);
  }
  
  public Action unknown_1000_D763_1D763(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD763: goto label_1000_D763_1D763;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D763_1D763:
    // MOV SI,0x1c0c (1000_D763 / 0x1D763)
    SI = 0x1C0C;
    // MOV AX,0x40 (1000_D766 / 0x1D766)
    AX = 0x40;
    // MOV word ptr [SI + 0xa],AX (1000_D769 / 0x1D769)
    UInt16[DS, (ushort)(SI + 0xA)] = AX;
    // MOV word ptr [SI + 0x18],AX (1000_D76C / 0x1D76C)
    UInt16[DS, (ushort)(SI + 0x18)] = AX;
    // MOV CX,0x2 (1000_D76F / 0x1D76F)
    CX = 0x2;
    // CALL 0x1000:d1f2 (1000_D772 / 0x1D772)
    NearCall(cs1, 0xD775, unknown_1000_D1F2_1D1F2);
    // MOV SI,0x1c0c (1000_D775 / 0x1D775)
    SI = 0x1C0C;
    // MOV AL,[0x1152] (1000_D778 / 0x1D778)
    AL = UInt8[DS, 0x1152];
    // CBW  (1000_D77B / 0x1D77B)
    AX = (ushort)((short)((sbyte)AL));
    // ADD AX,0x41 (1000_D77C / 0x1D77C)
    // AX += 0x41;
    AX = Alu.Add16(AX, 0x41);
    // MOV word ptr [SI + 0xa],AX (1000_D77F / 0x1D77F)
    UInt16[DS, (ushort)(SI + 0xA)] = AX;
    // MOV AL,[0x1153] (1000_D782 / 0x1D782)
    AL = UInt8[DS, 0x1153];
    // CBW  (1000_D785 / 0x1D785)
    AX = (ushort)((short)((sbyte)AL));
    // ADD AX,0x41 (1000_D786 / 0x1D786)
    // AX += 0x41;
    AX = Alu.Add16(AX, 0x41);
    // MOV word ptr [SI + 0x18],AX (1000_D789 / 0x1D789)
    UInt16[DS, (ushort)(SI + 0x18)] = AX;
    // MOV CX,0x2 (1000_D78C / 0x1D78C)
    CX = 0x2;
    // JMP 0x1000:d1f2 (1000_D78F / 0x1D78F)
    // Jump converted to entry function call
    return unknown_1000_D1F2_1D1F2(0);
  }
  
  public Action unknown_1000_D792_1D792(int gotoTarget) {
    label_1000_D792_1D792:
    // MOV SI,0x1c66 (1000_D792 / 0x1D792)
    SI = 0x1C66;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_D795_1D795(0);
  }
  
  public Action unknown_1000_D795_1D795(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD795: goto label_1000_D795_1D795;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D795_1D795:
    // PUSH DS (1000_D795 / 0x1D795)
    Stack.Push(DS);
    // POP ES (1000_D796 / 0x1D796)
    ES = Stack.Pop();
    // MOV DI,0x1aee (1000_D797 / 0x1D797)
    DI = 0x1AEE;
    // MOV CX,0x4 (1000_D79A / 0x1D79A)
    CX = 0x4;
    label_1000_D79D_1D79D:
    // MOVSW ES:DI,SI (1000_D79D / 0x1D79D)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_D79E / 0x1D79E)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0xa (1000_D79F / 0x1D79F)
    // DI += 0xA;
    DI = Alu.Add16(DI, 0xA);
    // LOOP 0x1000:d79d (1000_D7A2 / 0x1D7A2)
    if(--CX != 0) {
      goto label_1000_D79D_1D79D;
    }
    // MOV SI,0x1ae6 (1000_D7A4 / 0x1D7A4)
    SI = 0x1AE6;
    // MOV CX,0x3 (1000_D7A7 / 0x1D7A7)
    CX = 0x3;
    // JMP 0x1000:d1f2 (1000_D7AA / 0x1D7AA)
    // Jump converted to entry function call
    return unknown_1000_D1F2_1D1F2(0);
  }
  
  public Action unknown_1000_D7AD_1D7AD(int gotoTarget) {
    label_1000_D7AD_1D7AD:
    // MOV SI,0x1c56 (1000_D7AD / 0x1D7AD)
    SI = 0x1C56;
    // JMP 0x1000:d795 (1000_D7B0 / 0x1D7B0)
    // Jump converted to entry function call
    return unknown_1000_D795_1D795(0);
  }
  
  public Action unknown_1000_D7B2_1D7B2(int gotoTarget) {
    label_1000_D7B2_1D7B2:
    // MOV SI,0x1c46 (1000_D7B2 / 0x1D7B2)
    SI = 0x1C46;
    // JMP 0x1000:d795 (1000_D7B5 / 0x1D7B5)
    // Jump converted to entry function call
    return unknown_1000_D795_1D795(0);
  }
  
  public Action unknown_1000_D7B7_1D7B7(int gotoTarget) {
    label_1000_D7B7_1D7B7:
    // MOV AX,[0xce7a] (1000_D7B7 / 0x1D7B7)
    AX = UInt16[DS, 0xCE7A];
    // SHL AX,1 (1000_D7BA / 0x1D7BA)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_D7BC / 0x1D7BC)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // CMP AH,byte ptr [0xdcf1] (1000_D7BE / 0x1D7BE)
    Alu.Sub8(AH, UInt8[DS, 0xDCF1]);
    // JZ 0x1000:d814 (1000_D7C2 / 0x1D7C2)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D814 / 0x1D814)
      return NearRet();
    }
    // MOV byte ptr [0xdcf1],AH (1000_D7C4 / 0x1D7C4)
    UInt8[DS, 0xDCF1] = AH;
    // MOV AX,[0x2222] (1000_D7C8 / 0x1D7C8)
    AX = UInt16[DS, 0x2222];
    // OR AX,AX (1000_D7CB / 0x1D7CB)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:d814 (1000_D7CD / 0x1D7CD)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_D814 / 0x1D814)
      return NearRet();
    }
    // MOV BX,word ptr [0x1152] (1000_D7CF / 0x1D7CF)
    BX = UInt16[DS, 0x1152];
    // PUSH BX (1000_D7D3 / 0x1D7D3)
    Stack.Push(BX);
    // OR AL,AL (1000_D7D4 / 0x1D7D4)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:d7e0 (1000_D7D6 / 0x1D7D6)
    if(ZeroFlag) {
      goto label_1000_D7E0_1D7E0;
    }
    // DEC AL (1000_D7D8 / 0x1D7D8)
    AL = Alu.Dec8(AL);
    // TEST AL,0x1 (1000_D7DA / 0x1D7DA)
    Alu.And8(AL, 0x1);
    // JZ 0x1000:d7e0 (1000_D7DC / 0x1D7DC)
    if(ZeroFlag) {
      goto label_1000_D7E0_1D7E0;
    }
    // MOV BL,0xff (1000_D7DE / 0x1D7DE)
    BL = 0xFF;
    label_1000_D7E0_1D7E0:
    // OR AH,AH (1000_D7E0 / 0x1D7E0)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:d7ed (1000_D7E2 / 0x1D7E2)
    if(ZeroFlag) {
      goto label_1000_D7ED_1D7ED;
    }
    // DEC AH (1000_D7E4 / 0x1D7E4)
    AH = Alu.Dec8(AH);
    // TEST AH,0x1 (1000_D7E6 / 0x1D7E6)
    Alu.And8(AH, 0x1);
    // JZ 0x1000:d7ed (1000_D7E9 / 0x1D7E9)
    if(ZeroFlag) {
      goto label_1000_D7ED_1D7ED;
    }
    // MOV BH,0xff (1000_D7EB / 0x1D7EB)
    BH = 0xFF;
    label_1000_D7ED_1D7ED:
    // MOV [0x2222],AX (1000_D7ED / 0x1D7ED)
    UInt16[DS, 0x2222] = AX;
    // MOV word ptr [0x1152],BX (1000_D7F0 / 0x1D7F0)
    UInt16[DS, 0x1152] = BX;
    // CMP word ptr [0x1afe],0x0 (1000_D7F4 / 0x1D7F4)
    Alu.Sub16(UInt16[DS, 0x1AFE], 0x0);
    // JNZ 0x1000:d810 (1000_D7FA / 0x1D7FA)
    if(!ZeroFlag) {
      goto label_1000_D810_1D810;
    }
    // PUSH word ptr [0x2784] (1000_D7FC / 0x1D7FC)
    Stack.Push(UInt16[DS, 0x2784]);
    // CALL 0x1000:c137 (1000_D800 / 0x1D800)
    NearCall(cs1, 0xD803, load_icons_sprites_ida_1000_C137_1C137);
    // CALL 0x1000:dbb2 (1000_D803 / 0x1D803)
    NearCall(cs1, 0xD806, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:d763 (1000_D806 / 0x1D806)
    NearCall(cs1, 0xD809, unknown_1000_D763_1D763);
    // CALL 0x1000:dbec (1000_D809 / 0x1D809)
    NearCall(cs1, 0xD80C, draw_mouse_ida_1000_DBEC_1DBEC);
    // POP AX (1000_D80C / 0x1D80C)
    AX = Stack.Pop();
    // CALL 0x1000:c13e (1000_D80D / 0x1D80D)
    NearCall(cs1, 0xD810, open_sprite_sheet_ida_1000_C13E_1C13E);
    label_1000_D810_1D810:
    // POP word ptr [0x1152] (1000_D810 / 0x1D810)
    UInt16[DS, 0x1152] = Stack.Pop();
    label_1000_D814_1D814:
    // RET  (1000_D814 / 0x1D814)
    return NearRet();
  }
  
  public Action unknown_1000_D815_1D815(int gotoTarget) {
    label_1000_D815_1D815:
    // MOV AX,[0xce7a] (1000_D815 / 0x1D815)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc68],AX (1000_D818 / 0x1D818)
    UInt16[DS, 0xDC68] = AX;
    // MOV byte ptr [0xdc4b],0x0 (1000_D81B / 0x1D81B)
    UInt8[DS, 0xDC4B] = 0x0;
    label_1000_D820_1D820:
    // CMP byte ptr [0xcee8],0x2f (1000_D820 / 0x1D820)
    Alu.Sub8(UInt8[DS, 0xCEE8], 0x2F);
    // JNZ 0x1000:d831 (1000_D825 / 0x1D825)
    if(!ZeroFlag) {
      goto label_1000_D831_1D831;
    }
    // CMP byte ptr [0xce9e],0xff (1000_D827 / 0x1D827)
    Alu.Sub8(UInt8[DS, 0xCE9E], 0xFF);
    // JNZ 0x1000:d831 (1000_D82C / 0x1D82C)
    if(!ZeroFlag) {
      goto label_1000_D831_1D831;
    }
    // CALL 0x1000:b270 (1000_D82E / 0x1D82E)
    throw FailAsUntested("Could not find a valid function at address 1000_B270 / 0x1B270");
    label_1000_D831_1D831:
    // CMP byte ptr [0x46d9],0x0 (1000_D831 / 0x1D831)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JNZ 0x1000:d83e (1000_D836 / 0x1D836)
    if(!ZeroFlag) {
      goto label_1000_D83E_1D83E;
    }
    // CALL 0x1000:d7b7 (1000_D838 / 0x1D838)
    NearCall(cs1, 0xD83B, unknown_1000_D7B7_1D7B7);
    // CALL 0x1000:1b0d (1000_D83B / 0x1D83B)
    NearCall(cs1, 0xD83E, unknown_1000_1B0D_11B0D);
    label_1000_D83E_1D83E:
    // CALL 0x1000:d9d2 (1000_D83E / 0x1D83E)
    NearCall(cs1, 0xD841, unknown_1000_D9D2_1D9D2);
    // CMP byte ptr [0x46d9],0x0 (1000_D841 / 0x1D841)
    Alu.Sub8(UInt8[DS, 0x46D9], 0x0);
    // JZ 0x1000:d84b (1000_D846 / 0x1D846)
    if(ZeroFlag) {
      goto label_1000_D84B_1D84B;
    }
    // CALL 0x1000:0d8e (1000_D848 / 0x1D848)
    NearCall(cs1, 0xD84B, unknown_1000_0D8E_10D8E);
    label_1000_D84B_1D84B:
    // CALL 0x1000:e3cc (1000_D84B / 0x1D84B)
    NearCall(cs1, 0xD84E, unknown_1000_E3CC_1E3CC);
    // MOV [0x0],AX (1000_D84E / 0x1D84E)
    UInt16[DS, 0x0] = AX;
    // CALL 0x1000:4f0c (1000_D851 / 0x1D851)
    NearCall(cs1, 0xD854, unknown_1000_4F0C_14F0C);
    // CMP byte ptr [0xdc4b],0x0 (1000_D854 / 0x1D854)
    Alu.Sub8(UInt8[DS, 0xDC4B], 0x0);
    // JZ 0x1000:d860 (1000_D859 / 0x1D859)
    if(ZeroFlag) {
      goto label_1000_D860_1D860;
    }
    // CALL 0x1000:d962 (1000_D85B / 0x1D85B)
    throw FailAsUntested("Could not find a valid function at address 1000_D962 / 0x1D962");
    // JMP 0x1000:d866 (1000_D85E / 0x1D85E)
    goto label_1000_D866_1D866;
    label_1000_D860_1D860:
    // CALL 0x1000:df1e (1000_D860 / 0x1D860)
    NearCall(cs1, 0xD863, get_mouse_pos_etc_ida_1000_DF1E_1DF1E);
    // CALL 0x1000:db4c (1000_D863 / 0x1D863)
    NearCall(cs1, 0xD866, mouse_stuff_ida_1000_DB4C_1DB4C);
    label_1000_D866_1D866:
    // CALL 0x1000:dc20 (1000_D866 / 0x1D866)
    NearCall(cs1, 0xD869, redraw_mouse_ida_1000_DC20_1DC20);
    // MOV DI,DX (1000_D869 / 0x1D869)
    DI = DX;
    // XCHG word ptr [0xdc62],DI (1000_D86B / 0x1D86B)
    ushort tmp_1000_D86B = UInt16[DS, 0xDC62];
    UInt16[DS, 0xDC62] = DI;
    DI = tmp_1000_D86B;
    // MOV CX,BX (1000_D86F / 0x1D86F)
    CX = BX;
    // XCHG word ptr [0xdc64],CX (1000_D871 / 0x1D871)
    ushort tmp_1000_D871 = UInt16[DS, 0xDC64];
    UInt16[DS, 0xDC64] = CX;
    CX = tmp_1000_D871;
    // SUB DI,DX (1000_D875 / 0x1D875)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // SUB CX,BX (1000_D877 / 0x1D877)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // NEG DI (1000_D879 / 0x1D879)
    DI = Alu.Sub16(0, DI);
    // NEG CX (1000_D87B / 0x1D87B)
    CX = Alu.Sub16(0, CX);
    // MOV SI,word ptr [0x2570] (1000_D87D / 0x1D87D)
    SI = UInt16[DS, 0x2570];
    // AND AX,0xf (1000_D881 / 0x1D881)
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // JNZ 0x1000:d893 (1000_D884 / 0x1D884)
    if(!ZeroFlag) {
      goto label_1000_D893_1D893;
    }
    // CALL 0x1000:d50f (1000_D886 / 0x1D886)
    NearCall(cs1, 0xD889, unknown_1000_D50F_1D50F);
    // MOV AX,CX (1000_D889 / 0x1D889)
    AX = CX;
    // OR AX,DI (1000_D88B / 0x1D88B)
    // AX |= DI;
    AX = Alu.Or16(AX, DI);
    // JZ 0x1000:d88f (1000_D88D / 0x1D88D)
    if(ZeroFlag) {
      goto label_1000_D88F_1D88F;
    }
    label_1000_D88F_1D88F:
    // CALL word ptr [SI] (1000_D88F / 0x1D88F)
    // Indirect call to word ptr [SI], generating possible targets from emulator records
    uint targetAddress_1000_D88F = (uint)(UInt16[DS, SI]);
    switch(targetAddress_1000_D88F) {
      case 0x1AE7 : NearCall(cs1, 0xD891, unknown_1000_1AE7_11AE7);
        break;
      case 0xF66 : NearCall(cs1, 0xD891, NoOp_1000_0F66_10F66);
        break;
      case 0x5C03 : NearCall(cs1, 0xD891, unknown_1000_5C03_15C03);
        break;
      case 0xBC1F : NearCall(cs1, 0xD891, unknown_1000_BC1F_1BC1F);
        break;
      case 0x4586 : NearCall(cs1, 0xD891, unknown_1000_4586_14586);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D88F);
        break;
    }
    // JMP 0x1000:d820 (1000_D891 / 0x1D891)
    goto label_1000_D820_1D820;
    label_1000_D893_1D893:
    // MOV BP,word ptr [0xce7a] (1000_D893 / 0x1D893)
    BP = UInt16[DS, 0xCE7A];
    // MOV word ptr [0xdc5a],BP (1000_D897 / 0x1D897)
    UInt16[DS, 0xDC5A] = BP;
    // CMP byte ptr [0x4774],0x0 (1000_D89B / 0x1D89B)
    Alu.Sub8(UInt8[DS, 0x4774], 0x0);
    // JZ 0x1000:d8b1 (1000_D8A0 / 0x1D8A0)
    if(ZeroFlag) {
      goto label_1000_D8B1_1D8B1;
    }
    // AND AL,0x5 (1000_D8A2 / 0x1D8A2)
    // AL &= 0x5;
    AL = Alu.And8(AL, 0x5);
    // CMP AL,0x5 (1000_D8A4 / 0x1D8A4)
    Alu.Sub8(AL, 0x5);
    // JNZ 0x1000:d8d7 (1000_D8A6 / 0x1D8A6)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
      goto label_1000_D820_1D820;
    }
    // CALL 0x1000:dbb2 (1000_D8A8 / 0x1D8A8)
    NearCall(cs1, 0xD8AB, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:1707 (1000_D8AB / 0x1D8AB)
    NearCall(cs1, 0xD8AE, unknown_1000_1707_11707);
    // JMP 0x1000:d820 (1000_D8AE / 0x1D8AE)
    goto label_1000_D820_1D820;
    label_1000_D8B1_1D8B1:
    // TEST AL,0x5 (1000_D8B1 / 0x1D8B1)
    Alu.And8(AL, 0x5);
    // JNZ 0x1000:d8ba (1000_D8B3 / 0x1D8B3)
    if(!ZeroFlag) {
      goto label_1000_D8BA_1D8BA;
    }
    // ADD SI,0x2 (1000_D8B5 / 0x1D8B5)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // SHR AX,1 (1000_D8B8 / 0x1D8B8)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    label_1000_D8BA_1D8BA:
    // AND AL,0x5 (1000_D8BA / 0x1D8BA)
    // AL &= 0x5;
    AL = Alu.And8(AL, 0x5);
    // DEC AL (1000_D8BC / 0x1D8BC)
    AL = Alu.Dec8(AL);
    // JNZ 0x1000:d8f4 (1000_D8BE / 0x1D8BE)
    if(!ZeroFlag) {
      goto label_1000_D8F4_1D8F4;
    }
    // MOV BP,word ptr [0xdc5c] (1000_D8C0 / 0x1D8C0)
    BP = UInt16[DS, 0xDC5C];
    // OR BP,BP (1000_D8C4 / 0x1D8C4)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JNZ 0x1000:d8da (1000_D8C6 / 0x1D8C6)
    if(!ZeroFlag) {
      goto label_1000_D8DA_1D8DA;
    }
    // MOV AX,CX (1000_D8C8 / 0x1D8C8)
    AX = CX;
    // OR AX,DI (1000_D8CA / 0x1D8CA)
    // AX |= DI;
    AX = Alu.Or16(AX, DI);
    // JZ 0x1000:d8d7 (1000_D8CC / 0x1D8CC)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
      goto label_1000_D820_1D820;
    }
    // CALL 0x1000:dbb2 (1000_D8CE / 0x1D8CE)
    NearCall(cs1, 0xD8D1, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // MOV AL,[0xdc35] (1000_D8D1 / 0x1D8D1)
    AL = UInt8[DS, 0xDC35];
    // CALL word ptr [SI + 0xa] (1000_D8D4 / 0x1D8D4)
    // Indirect call to word ptr [SI + 0xa], generating possible targets from emulator records
    uint targetAddress_1000_D8D4 = (uint)(UInt16[DS, (ushort)(SI + 0xA)]);
    switch(targetAddress_1000_D8D4) {
      case 0xD917 : NearCall(cs1, 0xD8D7, NoOp_1000_D917_1D917);
        break;
      case 0x59C1 : NearCall(cs1, 0xD8D7, unknown_1000_59C1_159C1);
        break;
      case 0xF66 : NearCall(cs1, 0xD8D7, NoOp_1000_0F66_10F66);
        break;
      case 0x4586 : NearCall(cs1, 0xD8D7, unknown_1000_4586_14586);
        break;
      case 0xA5DF : throw FailAsUntested("Could not find a valid function at address 1000_A5DF / 0x1A5DF");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D8D4);
        break;
    }
    label_1000_D8D7_1D8D7:
    // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
    goto label_1000_D820_1D820;
    label_1000_D8DA_1D8DA:
    // MOV AX,[0xce7a] (1000_D8DA / 0x1D8DA)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,word ptr [0xdc5e] (1000_D8DD / 0x1D8DD)
    // AX -= UInt16[DS, 0xDC5E];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDC5E]);
    // CMP AX,0x32 (1000_D8E1 / 0x1D8E1)
    Alu.Sub16(AX, 0x32);
    // JC 0x1000:d8d7 (1000_D8E4 / 0x1D8E4)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
      goto label_1000_D820_1D820;
    }
    // CALL 0x1000:d6b7 (1000_D8E6 / 0x1D8E6)
    NearCall(cs1, 0xD8E9, unknown_1000_D6B7_1D6B7);
    // JNC 0x1000:d8d7 (1000_D8E9 / 0x1D8E9)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
      goto label_1000_D820_1D820;
    }
    // CMP DI,BP (1000_D8EB / 0x1D8EB)
    Alu.Sub16(DI, BP);
    // JNZ 0x1000:d8d7 (1000_D8ED / 0x1D8ED)
    if(!ZeroFlag) {
      // JNZ target is JMP, inlining.
      // JMP 0x1000:d820 (1000_D8D7 / 0x1D8D7)
      goto label_1000_D820_1D820;
    }
    // CALL 0x1000:dbb2 (1000_D8EF / 0x1D8EF)
    NearCall(cs1, 0xD8F2, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // JMP 0x1000:d92b (1000_D8F2 / 0x1D8F2)
    goto label_1000_D92B_1D92B;
    label_1000_D8F4_1D8F4:
    // CALL 0x1000:dbb2 (1000_D8F4 / 0x1D8F4)
    NearCall(cs1, 0xD8F7, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // CALL 0x1000:e26f (1000_D8F7 / 0x1D8F7)
    NearCall(cs1, 0xD8FA, NoOp_1000_E26F_1E26F);
    // SUB AL,0x3 (1000_D8FA / 0x1D8FA)
    // AL -= 0x3;
    AL = Alu.Sub8(AL, 0x3);
    // JZ 0x1000:d944 (1000_D8FC / 0x1D8FC)
    if(ZeroFlag) {
      goto label_1000_D944_1D944;
    }
    // CMP SI,word ptr [0x2570] (1000_D8FE / 0x1D8FE)
    Alu.Sub16(SI, UInt16[DS, 0x2570]);
    // JNZ 0x1000:d90e (1000_D902 / 0x1D902)
    if(!ZeroFlag) {
      goto label_1000_D90E_1D90E;
    }
    // CALL 0x1000:d6b7 (1000_D904 / 0x1D904)
    NearCall(cs1, 0xD907, unknown_1000_D6B7_1D6B7);
    // JC 0x1000:d918 (1000_D907 / 0x1D907)
    if(CarryFlag) {
      goto label_1000_D918_1D918;
    }
    // PUSH SI (1000_D909 / 0x1D909)
    Stack.Push(SI);
    // CALL 0x1000:9215 (1000_D90A / 0x1D90A)
    NearCall(cs1, 0xD90D, unknown_1000_9215_19215);
    // POP SI (1000_D90D / 0x1D90D)
    SI = Stack.Pop();
    label_1000_D90E_1D90E:
    // MOV AL,[0xdc35] (1000_D90E / 0x1D90E)
    AL = UInt8[DS, 0xDC35];
    // CALL word ptr [SI + 0x2] (1000_D911 / 0x1D911)
    // Indirect call to word ptr [SI + 0x2], generating possible targets from emulator records
    uint targetAddress_1000_D911 = (uint)(UInt16[DS, (ushort)(SI + 0x2)]);
    switch(targetAddress_1000_D911) {
      case 0xD917 : NearCall(cs1, 0xD914, NoOp_1000_D917_1D917);
        break;
      case 0x5C76 : NearCall(cs1, 0xD914, unknown_1000_5C76_15C76);
        break;
      case 0x450E : NearCall(cs1, 0xD914, unknown_1000_450E_1450E);
        break;
      case 0x81EC : NearCall(cs1, 0xD914, unknown_1000_81EC_181EC);
        break;
      case 0xA576 : NearCall(cs1, 0xD914, unknown_1000_A576_1A576);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D911);
        break;
    }
    // JMP 0x1000:d820 (1000_D914 / 0x1D914)
    goto label_1000_D820_1D820;
    label_1000_D918_1D918:
    // MOV word ptr [0xdc60],DI (1000_D918 / 0x1D918)
    UInt16[DS, 0xDC60] = DI;
    // CALL 0x1000:d65a (1000_D91C / 0x1D91C)
    NearCall(cs1, 0xD91F, unknown_1000_D65A_1D65A);
    // TEST byte ptr [DI + 0x9],0x40 (1000_D91F / 0x1D91F)
    Alu.And8(UInt8[DS, (ushort)(DI + 0x9)], 0x40);
    // JZ 0x1000:d92b (1000_D923 / 0x1D923)
    if(ZeroFlag) {
      goto label_1000_D92B_1D92B;
    }
    // MOV word ptr [0xdc5c],DI (1000_D925 / 0x1D925)
    UInt16[DS, 0xDC5C] = DI;
    // JMP 0x1000:d935 (1000_D929 / 0x1D929)
    goto label_1000_D935_1D935;
    label_1000_D92B_1D92B:
    // MOV byte ptr [0xce9d],0x0 (1000_D92B / 0x1D92B)
    UInt8[DS, 0xCE9D] = 0x0;
    // MOV byte ptr [0xceba],0x0 (1000_D930 / 0x1D930)
    UInt8[DS, 0xCEBA] = 0x0;
    label_1000_D935_1D935:
    // MOV AX,[0xce7a] (1000_D935 / 0x1D935)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc5e],AX (1000_D938 / 0x1D938)
    UInt16[DS, 0xDC5E] = AX;
    // MOV AL,[0xdc35] (1000_D93B / 0x1D93B)
    AL = UInt8[DS, 0xDC35];
    // CALL word ptr [DI + 0xc] (1000_D93E / 0x1D93E)
    // Indirect call to word ptr [DI + 0xc], generating possible targets from emulator records
    uint targetAddress_1000_D93E = (uint)(UInt16[DS, (ushort)(DI + 0xC)]);
    switch(targetAddress_1000_D93E) {
      case 0x945B : NearCall(cs1, 0xD941, unknown_1000_945B_1945B);
        break;
      case 0x3F15 : NearCall(cs1, 0xD941, unknown_1000_3F15_13F15);
        break;
      case 0x3F1F : NearCall(cs1, 0xD941, unknown_1000_3F1F_13F1F);
        break;
      case 0x18EE : NearCall(cs1, 0xD941, unknown_1000_18EE_118EE);
        break;
      case 0x3F1A : NearCall(cs1, 0xD941, unknown_1000_3F1A_13F1A);
        break;
      case 0x3F24 : NearCall(cs1, 0xD941, unknown_1000_3F24_13F24);
        break;
      case 0xD443 : NearCall(cs1, 0xD941, DispatcherJumpsToBX_1000_D443_1D443);
        break;
      case 0xB8C6 : NearCall(cs1, 0xD941, unknown_1000_B8C6_1B8C6);
        break;
      case 0xD439 : NearCall(cs1, 0xD941, unknown_1000_D439_1D439);
        break;
      case 0xD43E : NearCall(cs1, 0xD941, unknown_1000_D43E_1D43E);
        break;
      case 0xAED6 : NearCall(cs1, 0xD941, unknown_1000_AED6_1AED6);
        break;
      case 0xB1EE : NearCall(cs1, 0xD941, unknown_1000_B1EE_1B1EE);
        break;
      case 0xD434 : NearCall(cs1, 0xD941, unknown_1000_D434_1D434);
        break;
      case 0xD42F : NearCall(cs1, 0xD941, unknown_1000_D42F_1D42F);
        break;
      case 0x9215 : NearCall(cs1, 0xD941, unknown_1000_9215_19215);
        break;
      case 0x7BED : NearCall(cs1, 0xD941, unknown_1000_7BED_17BED);
        break;
      case 0x881F : NearCall(cs1, 0xD941, unknown_1000_881F_1881F);
        break;
      case 0x8824 : NearCall(cs1, 0xD941, unknown_1000_8824_18824);
        break;
      case 0x882E : NearCall(cs1, 0xD941, unknown_1000_882E_1882E);
        break;
      case 0x941D : NearCall(cs1, 0xD941, unknown_1000_941D_1941D);
        break;
      case 0x9468 : NearCall(cs1, 0xD941, unknown_1000_9468_19468);
        break;
      case 0x8829 : NearCall(cs1, 0xD941, unknown_1000_8829_18829);
        break;
      case 0xB9D3 : throw FailAsUntested("Could not find a valid function at address 1000_B9D3 / 0x1B9D3");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D93E);
        break;
    }
    // JMP 0x1000:d820 (1000_D941 / 0x1D941)
    goto label_1000_D820_1D820;
    label_1000_D944_1D944:
    // MOV DI,word ptr [0xdc5c] (1000_D944 / 0x1D944)
    DI = UInt16[DS, 0xDC5C];
    // MOV word ptr [0xdc5c],0x0 (1000_D948 / 0x1D948)
    UInt16[DS, 0xDC5C] = 0x0;
    // OR DI,DI (1000_D94E / 0x1D94E)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNZ 0x1000:d92b (1000_D950 / 0x1D950)
    if(!ZeroFlag) {
      goto label_1000_D92B_1D92B;
    }
    // MOV AL,[0xdc35] (1000_D952 / 0x1D952)
    AL = UInt8[DS, 0xDC35];
    // CALL word ptr [SI + 0x6] (1000_D955 / 0x1D955)
    // Indirect call to word ptr [SI + 0x6], generating possible targets from emulator records
    uint targetAddress_1000_D955 = (uint)(UInt16[DS, (ushort)(SI + 0x6)]);
    switch(targetAddress_1000_D955) {
      case 0xD917 : NearCall(cs1, 0xD958, NoOp_1000_D917_1D917);
        break;
      case 0xF66 : NearCall(cs1, 0xD958, NoOp_1000_0F66_10F66);
        break;
      case 0x599F : NearCall(cs1, 0xD958, unknown_1000_599F_1599F);
        break;
      case 0xA5AA : NearCall(cs1, 0xD958, unknown_1000_A5AA_1A5AA);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_D955);
        break;
    }
    // JMP 0x1000:d820 (1000_D958 / 0x1D958)
    goto label_1000_D820_1D820;
    // Function call generated as ASM continues to next function entry point without return
    return SetMapClickHandlerAddressToInGame_1000_D95B_1D95B(0);
  }
  
  public Action NoOp_1000_D917_1D917(int gotoTarget) {
    label_1000_D917_1D917:
    // RET  (1000_D917 / 0x1D917)
    return NearRet();
  }
  
  public Action SetMapClickHandlerAddressToInGame_1000_D95B_1D95B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xD95B: goto label_1000_D95B_1D95B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_D95B_1D95B:
    // MOV AX,0x2572 (1000_D95B / 0x1D95B)
    AX = 0x2572;
    // Function call generated as ASM continues to next function entry point without return
    return SetMapClickHandlerAddressFromAx_1000_D95E_1D95E(0);
  }
  
  public Action SetMapClickHandlerAddressFromAx_1000_D95E_1D95E(int gotoTarget) {
    label_1000_D95E_1D95E:
    // MOV [0x2570],AX (1000_D95E / 0x1D95E)
    UInt16[DS, 0x2570] = AX;
    // RET  (1000_D961 / 0x1D961)
    return NearRet();
  }
  
  public Action unknown_1000_D9D2_1D9D2(int gotoTarget) {
    label_1000_D9D2_1D9D2:
    // CALL 0x1000:ace6 (1000_D9D2 / 0x1D9D2)
    NearCall(cs1, 0xD9D5, unknown_1000_ACE6_1ACE6);
    // MOV AX,[0xce7a] (1000_D9D5 / 0x1D9D5)
    AX = UInt16[DS, 0xCE7A];
    // MOV CX,AX (1000_D9D8 / 0x1D9D8)
    CX = AX;
    // MOV BX,AX (1000_D9DA / 0x1D9DA)
    BX = AX;
    // MOV SI,0xdc68 (1000_D9DC / 0x1D9DC)
    SI = 0xDC68;
    // XCHG word ptr [SI],CX (1000_D9DF / 0x1D9DF)
    ushort tmp_1000_D9DF = UInt16[DS, SI];
    UInt16[DS, SI] = CX;
    CX = tmp_1000_D9DF;
    // SUB BX,CX (1000_D9E1 / 0x1D9E1)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // MOV CX,word ptr [SI + 0x2] (1000_D9E3 / 0x1D9E3)
    CX = UInt16[DS, (ushort)(SI + 0x2)];
    // JCXZ 0x1000:da03 (1000_D9E6 / 0x1D9E6)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_DA03 / 0x1DA03)
      return NearRet();
    }
    // ADD SI,0x4 (1000_D9E8 / 0x1D9E8)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    label_1000_D9EB_1D9EB:
    // LODSW SI (1000_D9EB / 0x1D9EB)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_D9EC / 0x1D9EC)
    BP = AX;
    // MOV AX,BX (1000_D9EE / 0x1D9EE)
    AX = BX;
    // ADD AX,word ptr [SI] (1000_D9F0 / 0x1D9F0)
    // AX += UInt16[DS, SI];
    AX = Alu.Add16(AX, UInt16[DS, SI]);
    // CMP AX,BP (1000_D9F2 / 0x1D9F2)
    Alu.Sub16(AX, BP);
    // JNC 0x1000:da04 (1000_D9F4 / 0x1D9F4)
    if(!CarryFlag) {
      goto label_1000_DA04_1DA04;
    }
    // MOV word ptr [SI],AX (1000_D9F6 / 0x1D9F6)
    UInt16[DS, SI] = AX;
    // ADD SI,0x4 (1000_D9F8 / 0x1D9F8)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LOOP 0x1000:d9eb (1000_D9FB / 0x1D9FB)
    if(--CX != 0) {
      goto label_1000_D9EB_1D9EB;
    }
    label_1000_D9FD_1D9FD:
    // MOV word ptr [0xdc66],0x0 (1000_D9FD / 0x1D9FD)
    UInt16[DS, 0xDC66] = 0x0;
    label_1000_DA03_1DA03:
    // RET  (1000_DA03 / 0x1DA03)
    return NearRet();
    label_1000_DA04_1DA04:
    // OR BP,BP (1000_DA04 / 0x1DA04)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JZ 0x1000:da0e (1000_DA06 / 0x1DA06)
    if(ZeroFlag) {
      goto label_1000_DA0E_1DA0E;
    }
    // XOR DX,DX (1000_DA08 / 0x1DA08)
    DX = 0;
    // DIV BP (1000_DA0A / 0x1DA0A)
    Cpu.Div16(BP);
    // MOV word ptr [SI],DX (1000_DA0C / 0x1DA0C)
    UInt16[DS, SI] = DX;
    label_1000_DA0E_1DA0E:
    // SUB SI,0x2 (1000_DA0E / 0x1DA0E)
    // SI -= 0x2;
    SI = Alu.Sub16(SI, 0x2);
    // PUSH BX (1000_DA11 / 0x1DA11)
    Stack.Push(BX);
    // PUSH CX (1000_DA12 / 0x1DA12)
    Stack.Push(CX);
    // PUSH SI (1000_DA13 / 0x1DA13)
    Stack.Push(SI);
    // MOV word ptr [0xdc66],SP (1000_DA14 / 0x1DA14)
    UInt16[DS, 0xDC66] = SP;
    // CALL word ptr [SI + 0x4] (1000_DA18 / 0x1DA18)
    // Indirect call to word ptr [SI + 0x4], generating possible targets from emulator records
    uint targetAddress_1000_DA18 = (uint)(UInt16[DS, (ushort)(SI + 0x4)]);
    switch(targetAddress_1000_DA18) {
      case 0xB9AE : NearCall(cs1, 0xDA1B, unknown_1000_B9AE_1B9AE);
        break;
      case 0x99BE : NearCall(cs1, 0xDA1B, unknown_1000_99BE_199BE);
        break;
      case 0x3916 : NearCall(cs1, 0xDA1B, unknown_1000_3916_13916);
        break;
      case 0x6B34 : NearCall(cs1, 0xDA1B, unknown_1000_6B34_16B34);
        break;
      case 0xBE57 : NearCall(cs1, 0xDA1B, unknown_1000_BE57_1BE57);
        break;
      case 0x46B5 : NearCall(cs1, 0xDA1B, unknown_1000_46B5_146B5);
        break;
      case 0x44AB : NearCall(cs1, 0xDA1B, unknown_1000_44AB_144AB);
        break;
      case 0x176B : NearCall(cs1, 0xDA1B, unknown_1000_176B_1176B);
        break;
      case 0x2CC7 : NearCall(cs1, 0xDA1B, unknown_1000_2CC7_12CC7);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DA18);
        break;
    }
    // POP SI (1000_DA1B / 0x1DA1B)
    SI = Stack.Pop();
    // POP CX (1000_DA1C / 0x1DA1C)
    CX = Stack.Pop();
    // POP BX (1000_DA1D / 0x1DA1D)
    BX = Stack.Pop();
    // ADD SI,0x6 (1000_DA1E / 0x1DA1E)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // LOOP 0x1000:d9eb (1000_DA21 / 0x1DA21)
    if(--CX != 0) {
      goto label_1000_D9EB_1D9EB;
    }
    // JMP 0x1000:d9fd (1000_DA23 / 0x1DA23)
    goto label_1000_D9FD_1D9FD;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_DA25_1DA25(0);
  }
  
  public Action unknown_1000_DA25_1DA25(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDA25: goto label_1000_DA25_1DA25;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DA25_1DA25:
    // PUSH DS (1000_DA25 / 0x1DA25)
    Stack.Push(DS);
    // POP ES (1000_DA26 / 0x1DA26)
    ES = Stack.Pop();
    // MOV DI,0xdc6a (1000_DA27 / 0x1DA27)
    DI = 0xDC6A;
    // MOV AX,word ptr [DI] (1000_DA2A / 0x1DA2A)
    AX = UInt16[DS, DI];
    // INC AX (1000_DA2C / 0x1DA2C)
    AX = Alu.Inc16(AX);
    // CMP AX,0x14 (1000_DA2D / 0x1DA2D)
    Alu.Sub16(AX, 0x14);
    // JA 0x1000:da52 (1000_DA30 / 0x1DA30)
    if(!CarryFlag && !ZeroFlag) {
      // JA target is RET, inlining.
      // RET  (1000_DA52 / 0x1DA52)
      return NearRet();
    }
    // STOSW ES:DI (1000_DA32 / 0x1DA32)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // DEC AX (1000_DA33 / 0x1DA33)
    AX = Alu.Dec16(AX);
    // ADD AX,AX (1000_DA34 / 0x1DA34)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // MOV BX,AX (1000_DA36 / 0x1DA36)
    BX = AX;
    // ADD AX,AX (1000_DA38 / 0x1DA38)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // ADD AX,BX (1000_DA3A / 0x1DA3A)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // ADD DI,AX (1000_DA3C / 0x1DA3C)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV AX,BP (1000_DA3E / 0x1DA3E)
    AX = BP;
    // STOSW ES:DI (1000_DA40 / 0x1DA40)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AX,AX (1000_DA41 / 0x1DA41)
    AX = 0;
    // STOSW ES:DI (1000_DA43 / 0x1DA43)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AX,SI (1000_DA44 / 0x1DA44)
    AX = SI;
    // STOSW ES:DI (1000_DA46 / 0x1DA46)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,word ptr [0xdc66] (1000_DA47 / 0x1DA47)
    BP = UInt16[DS, 0xDC66];
    // OR BP,BP (1000_DA4B / 0x1DA4B)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JZ 0x1000:da52 (1000_DA4D / 0x1DA4D)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DA52 / 0x1DA52)
      return NearRet();
    }
    // INC word ptr [BP + 0x2] (1000_DA4F / 0x1DA4F)
    UInt16[SS, (ushort)(BP + 0x2)] = Alu.Inc16(UInt16[SS, (ushort)(BP + 0x2)]);
    label_1000_DA52_1DA52:
    // RET  (1000_DA52 / 0x1DA52)
    return NearRet();
  }
  
  public Action VgaInitRelated_1000_DA53_1DA53(int gotoTarget) {
    label_1000_DA53_1DA53:
    // MOV word ptr [0xdc6a],0x0 (1000_DA53 / 0x1DA53)
    UInt16[DS, 0xDC6A] = 0x0;
    // MOV byte ptr [0x46d7],0x0 (1000_DA59 / 0x1DA59)
    UInt8[DS, 0x46D7] = 0x0;
    // RET  (1000_DA5E / 0x1DA5E)
    return NearRet();
  }
  
  public Action unknown_1000_DA5F_1DA5F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDA5F: goto label_1000_DA5F_1DA5F;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DA5F_1DA5F:
    // MOV DI,0xdc6a (1000_DA5F / 0x1DA5F)
    DI = 0xDC6A;
    // MOV CX,word ptr [DI] (1000_DA62 / 0x1DA62)
    CX = UInt16[DS, DI];
    // JCXZ 0x1000:da72 (1000_DA64 / 0x1DA64)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (1000_DA72 / 0x1DA72)
      return NearRet();
    }
    // ADD DI,0x6 (1000_DA66 / 0x1DA66)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    label_1000_DA69_1DA69:
    // CMP word ptr [DI],SI (1000_DA69 / 0x1DA69)
    Alu.Sub16(UInt16[DS, DI], SI);
    // JZ 0x1000:da73 (1000_DA6B / 0x1DA6B)
    if(ZeroFlag) {
      goto label_1000_DA73_1DA73;
    }
    // ADD DI,0x6 (1000_DA6D / 0x1DA6D)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    // LOOP 0x1000:da69 (1000_DA70 / 0x1DA70)
    if(--CX != 0) {
      goto label_1000_DA69_1DA69;
    }
    label_1000_DA72_1DA72:
    // RET  (1000_DA72 / 0x1DA72)
    return NearRet();
    label_1000_DA73_1DA73:
    // SUB DI,0x4 (1000_DA73 / 0x1DA73)
    // DI -= 0x4;
    DI = Alu.Sub16(DI, 0x4);
    // DEC word ptr [0xdc6a] (1000_DA76 / 0x1DA76)
    UInt16[DS, 0xDC6A] = Alu.Dec16(UInt16[DS, 0xDC6A]);
    // MOV BP,word ptr [0xdc66] (1000_DA7A / 0x1DA7A)
    BP = UInt16[DS, 0xDC66];
    // OR BP,BP (1000_DA7E / 0x1DA7E)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JZ 0x1000:da90 (1000_DA80 / 0x1DA80)
    if(ZeroFlag) {
      goto label_1000_DA90_1DA90;
    }
    // CMP DI,word ptr [BP + 0x0] (1000_DA82 / 0x1DA82)
    Alu.Sub16(DI, UInt16[SS, BP]);
    // JA 0x1000:da8d (1000_DA85 / 0x1DA85)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_DA8D_1DA8D;
    }
    // SUB word ptr [BP + 0x0],0x6 (1000_DA87 / 0x1DA87)
    // UInt16[SS, BP] -= 0x6;
    UInt16[SS, BP] = Alu.Sub16(UInt16[SS, BP], 0x6);
    // JMP 0x1000:da90 (1000_DA8B / 0x1DA8B)
    goto label_1000_DA90_1DA90;
    label_1000_DA8D_1DA8D:
    // DEC word ptr [BP + 0x2] (1000_DA8D / 0x1DA8D)
    UInt16[SS, (ushort)(BP + 0x2)] = Alu.Dec16(UInt16[SS, (ushort)(BP + 0x2)]);
    label_1000_DA90_1DA90:
    // DEC CX (1000_DA90 / 0x1DA90)
    CX = Alu.Dec16(CX);
    // JZ 0x1000:da72 (1000_DA91 / 0x1DA91)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DA72 / 0x1DA72)
      return NearRet();
    }
    // MOV AX,CX (1000_DA93 / 0x1DA93)
    AX = CX;
    // ADD CX,CX (1000_DA95 / 0x1DA95)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD CX,AX (1000_DA97 / 0x1DA97)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // MOV SI,DI (1000_DA99 / 0x1DA99)
    SI = DI;
    // ADD SI,0x6 (1000_DA9B / 0x1DA9B)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // PUSH DS (1000_DA9E / 0x1DA9E)
    Stack.Push(DS);
    // POP ES (1000_DA9F / 0x1DA9F)
    ES = Stack.Pop();
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_DAA0 / 0x1DAA0)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // RET  (1000_DAA2 / 0x1DAA2)
    return NearRet();
  }
  
  public Action InitMapCursorTypeDC58To0_1000_DAA3_1DAA3(int gotoTarget) {
    label_1000_DAA3_1DAA3:
    // MOV word ptr [0xdc58],0x0 (1000_DAA3 / 0x1DAA3)
    UInt16[DS, 0xDC58] = 0x0;
    // RET  (1000_DAA9 / 0x1DAA9)
    return NearRet();
  }
  
  public Action SetSiToMapCursorTypeDC58_1000_DAAA_1DAAA(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDAAA: goto label_1000_DAAA_1DAAA;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DAAA_1DAAA:
    // MOV word ptr [0xdc58],SI (1000_DAAA / 0x1DAAA)
    UInt16[DS, 0xDC58] = SI;
    // RET  (1000_DAAE / 0x1DAAE)
    return NearRet();
  }
  
  public Action unknown_1000_DAE3_1DAE3(int gotoTarget) {
    label_1000_DAE3_1DAE3:
    // TEST byte ptr [0x2942],0x40 (1000_DAE3 / 0x1DAE3)
    Alu.And8(UInt8[DS, 0x2942], 0x40);
    // JNZ 0x1000:db02 (1000_DAE8 / 0x1DAE8)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_DB02 / 0x1DB02)
      return NearRet();
    }
    // MOV AX,[0xdc36] (1000_DAEA / 0x1DAEA)
    AX = UInt16[DS, 0xDC36];
    // MOV DX,word ptr [0xdc38] (1000_DAED / 0x1DAED)
    DX = UInt16[DS, 0xDC38];
    // MOV CX,word ptr [0x2580] (1000_DAF1 / 0x1DAF1)
    CX = UInt16[DS, 0x2580];
    // SHL AX,CL (1000_DAF5 / 0x1DAF5)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // MOV CL,CH (1000_DAF7 / 0x1DAF7)
    CL = CH;
    // SHL DX,CL (1000_DAF9 / 0x1DAF9)
    // DX <<= CL;
    DX = Alu.Shl16(DX, CL);
    // MOV CX,AX (1000_DAFB / 0x1DAFB)
    CX = AX;
    // MOV AX,0x4 (1000_DAFD / 0x1DAFD)
    AX = 0x4;
    // INT 0x33 (1000_DB00 / 0x1DB00)
    Interrupt(0x33);
    label_1000_DB02_1DB02:
    // RET  (1000_DB02 / 0x1DB02)
    return NearRet();
  }
  
  public Action unknown_1000_DB03_1DB03(int gotoTarget) {
    label_1000_DB03_1DB03:
    // CALL 0x1000:dbb2 (1000_DB03 / 0x1DB03)
    NearCall(cs1, 0xDB06, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // MOV word ptr [0xdc36],DX (1000_DB06 / 0x1DB06)
    UInt16[DS, 0xDC36] = DX;
    // MOV word ptr [0xdc38],BX (1000_DB0A / 0x1DB0A)
    UInt16[DS, 0xDC38] = BX;
    // CALL 0x1000:dae3 (1000_DB0E / 0x1DB0E)
    NearCall(cs1, 0xDB11, unknown_1000_DAE3_1DAE3);
    // JMP 0x1000:dbec (1000_DB11 / 0x1DB11)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
  }
  
  public Action define_mouse_range_ida_1000_DB14_1DB14(int gotoTarget) {
    label_1000_DB14_1DB14:
    // MOV DI,0xdc3a (1000_DB14 / 0x1DB14)
    DI = 0xDC3A;
    // MOV word ptr [DI],CX (1000_DB17 / 0x1DB17)
    UInt16[DS, DI] = CX;
    // MOV word ptr [DI + 0x2],DX (1000_DB19 / 0x1DB19)
    UInt16[DS, (ushort)(DI + 0x2)] = DX;
    // MOV word ptr [DI + 0x4],AX (1000_DB1C / 0x1DB1C)
    UInt16[DS, (ushort)(DI + 0x4)] = AX;
    // MOV word ptr [DI + 0x6],BX (1000_DB1F / 0x1DB1F)
    UInt16[DS, (ushort)(DI + 0x6)] = BX;
    // TEST byte ptr [0x2942],0x40 (1000_DB22 / 0x1DB22)
    Alu.And8(UInt8[DS, 0x2942], 0x40);
    // JNZ 0x1000:db43 (1000_DB27 / 0x1DB27)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_DB43 / 0x1DB43)
      return NearRet();
    }
    // PUSH AX (1000_DB29 / 0x1DB29)
    Stack.Push(AX);
    // PUSH BX (1000_DB2A / 0x1DB2A)
    Stack.Push(BX);
    // MOV AL,[0x2580] (1000_DB2B / 0x1DB2B)
    AL = UInt8[DS, 0x2580];
    // CALL 0x1000:db44 (1000_DB2E / 0x1DB2E)
    NearCall(cs1, 0xDB31, ShlDXAndCXByAX_1000_DB44_1DB44);
    // MOV AX,0x7 (1000_DB31 / 0x1DB31)
    AX = 0x7;
    // INT 0x33 (1000_DB34 / 0x1DB34)
    Interrupt(0x33);
    // POP DX (1000_DB36 / 0x1DB36)
    DX = Stack.Pop();
    // POP CX (1000_DB37 / 0x1DB37)
    CX = Stack.Pop();
    // MOV AL,[0x2581] (1000_DB38 / 0x1DB38)
    AL = UInt8[DS, 0x2581];
    // CALL 0x1000:db44 (1000_DB3B / 0x1DB3B)
    NearCall(cs1, 0xDB3E, ShlDXAndCXByAX_1000_DB44_1DB44);
    // MOV AX,0x8 (1000_DB3E / 0x1DB3E)
    AX = 0x8;
    // INT 0x33 (1000_DB41 / 0x1DB41)
    Interrupt(0x33);
    label_1000_DB43_1DB43:
    // RET  (1000_DB43 / 0x1DB43)
    return NearRet();
  }
  
  public Action ShlDXAndCXByAX_1000_DB44_1DB44(int gotoTarget) {
    label_1000_DB44_1DB44:
    // XCHG AX,CX (1000_DB44 / 0x1DB44)
    ushort tmp_1000_DB44 = AX;
    AX = CX;
    CX = tmp_1000_DB44;
    // SHL AX,CL (1000_DB45 / 0x1DB45)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // SHL DX,CL (1000_DB47 / 0x1DB47)
    // DX <<= CL;
    DX = Alu.Shl16(DX, CL);
    // MOV CX,AX (1000_DB49 / 0x1DB49)
    CX = AX;
    // RET  (1000_DB4B / 0x1DB4B)
    return NearRet();
  }
  
  public Action mouse_stuff_ida_1000_DB4C_1DB4C(int gotoTarget) {
    label_1000_DB4C_1DB4C:
    // MOV AX,[0xdc34] (1000_DB4C / 0x1DB4C)
    AX = UInt16[DS, 0xDC34];
    // AND AL,0x3 (1000_DB4F / 0x1DB4F)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // MOV [0xdc35],AL (1000_DB51 / 0x1DB51)
    UInt8[DS, 0xDC35] = AL;
    // XOR AH,AL (1000_DB54 / 0x1DB54)
    // AH ^= AL;
    AH = Alu.Xor8(AH, AL);
    // ADD AH,AH (1000_DB56 / 0x1DB56)
    // AH += AH;
    AH = Alu.Add8(AH, AH);
    // ADD AH,AH (1000_DB58 / 0x1DB58)
    // AH += AH;
    AH = Alu.Add8(AH, AH);
    // OR AL,AH (1000_DB5A / 0x1DB5A)
    // AL |= AH;
    AL = Alu.Or8(AL, AH);
    // XOR AH,AH (1000_DB5C / 0x1DB5C)
    AH = 0;
    // MOV DX,word ptr [0xdc36] (1000_DB5E / 0x1DB5E)
    DX = UInt16[DS, 0xDC36];
    // MOV BX,word ptr [0xdc38] (1000_DB62 / 0x1DB62)
    BX = UInt16[DS, 0xDC38];
    // RET  (1000_DB66 / 0x1DB66)
    return NearRet();
  }
  
  public Action unknown_1000_DB67_1DB67(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDB67: goto label_1000_DB67_1DB67;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DB67_1DB67:
    // CMP byte ptr [0xdc47],0x0 (1000_DB67 / 0x1DB67)
    Alu.Sub8(UInt8[DS, 0xDC47], 0x0);
    // JNS 0x1000:dbab (1000_DB6C / 0x1DB6C)
    if(!SignFlag) {
      // JNS target is RET, inlining.
      // RET  (1000_DBAB / 0x1DBAB)
      return NearRet();
    }
    // INC byte ptr [0xdc47] (1000_DB6E / 0x1DB6E)
    UInt8[DS, 0xDC47] = Alu.Inc8(UInt8[DS, 0xDC47]);
    // JMP 0x1000:dbec (1000_DB72 / 0x1DB72)
    // Jump converted to entry function call
    return draw_mouse_ida_1000_DBEC_1DBEC(0);
  }
  
  public Action unknown_1000_DB74_1DB74(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDBAB: goto label_1000_DBAB_1DBAB;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DB74_1DB74:
    // CMP byte ptr [0xdc46],0x0 (1000_DB74 / 0x1DB74)
    Alu.Sub8(UInt8[DS, 0xDC46], 0x0);
    // JS 0x1000:dbab (1000_DB79 / 0x1DB79)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_DBAB / 0x1DBAB)
      return NearRet();
    }
    // PUSH BX (1000_DB7B / 0x1DB7B)
    Stack.Push(BX);
    // PUSH DX (1000_DB7C / 0x1DB7C)
    Stack.Push(DX);
    // MOV BX,word ptr [0x2582] (1000_DB7D / 0x1DB7D)
    BX = UInt16[DS, 0x2582];
    // MOV DX,word ptr [0xdc42] (1000_DB81 / 0x1DB81)
    DX = UInt16[DS, 0xDC42];
    // SUB DX,word ptr [BX] (1000_DB85 / 0x1DB85)
    // DX -= UInt16[DS, BX];
    DX = Alu.Sub16(DX, UInt16[DS, BX]);
    // MOV BX,word ptr [BX + 0x2] (1000_DB87 / 0x1DB87)
    BX = UInt16[DS, (ushort)(BX + 0x2)];
    // NEG BX (1000_DB8A / 0x1DB8A)
    BX = Alu.Sub16(0, BX);
    // ADD BX,word ptr [0xdc44] (1000_DB8C / 0x1DB8C)
    // BX += UInt16[DS, 0xDC44];
    BX = Alu.Add16(BX, UInt16[DS, 0xDC44]);
    // CMP DX,word ptr [SI + 0x4] (1000_DB90 / 0x1DB90)
    Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JGE 0x1000:dba9 (1000_DB93 / 0x1DB93)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DBA9_1DBA9;
    }
    // CMP BX,word ptr [SI + 0x6] (1000_DB95 / 0x1DB95)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x6)]);
    // JGE 0x1000:dba9 (1000_DB98 / 0x1DB98)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DBA9_1DBA9;
    }
    // ADD DX,0x10 (1000_DB9A / 0x1DB9A)
    // DX += 0x10;
    DX = Alu.Add16(DX, 0x10);
    // CMP DX,word ptr [SI] (1000_DB9D / 0x1DB9D)
    Alu.Sub16(DX, UInt16[DS, SI]);
    // JLE 0x1000:dba9 (1000_DB9F / 0x1DB9F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_DBA9_1DBA9;
    }
    // ADD BX,0x10 (1000_DBA1 / 0x1DBA1)
    // BX += 0x10;
    BX = Alu.Add16(BX, 0x10);
    // CMP BX,word ptr [SI + 0x2] (1000_DBA4 / 0x1DBA4)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JG 0x1000:dbac (1000_DBA7 / 0x1DBA7)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_DBAC_1DBAC;
    }
    label_1000_DBA9_1DBA9:
    // POP DX (1000_DBA9 / 0x1DBA9)
    DX = Stack.Pop();
    // POP BX (1000_DBAA / 0x1DBAA)
    BX = Stack.Pop();
    label_1000_DBAB_1DBAB:
    // RET  (1000_DBAB / 0x1DBAB)
    return NearRet();
    label_1000_DBAC_1DBAC:
    // POP DX (1000_DBAC / 0x1DBAC)
    DX = Stack.Pop();
    // POP BX (1000_DBAD / 0x1DBAD)
    BX = Stack.Pop();
    // DEC byte ptr [0xdc47] (1000_DBAE / 0x1DBAE)
    UInt8[DS, 0xDC47] = Alu.Dec8(UInt8[DS, 0xDC47]);
    // Function call generated as ASM continues to next function entry point without return
    return call_restore_cursor_ida_1000_DBB2_1DBB2(0);
  }
  
  public Action call_restore_cursor_ida_1000_DBB2_1DBB2(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDBB2: goto label_1000_DBB2_1DBB2;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DBB2_1DBB2:
    // PUSH AX (1000_DBB2 / 0x1DBB2)
    Stack.Push(AX);
    // MOV AL,[0xdc46] (1000_DBB3 / 0x1DBB3)
    AL = UInt8[DS, 0xDC46];
    // DEC byte ptr [0xdc46] (1000_DBB6 / 0x1DBB6)
    UInt8[DS, 0xDC46] = Alu.Dec8(UInt8[DS, 0xDC46]);
    // JS 0x1000:dbc0 (1000_DBBA / 0x1DBBA)
    if(SignFlag) {
      goto label_1000_DBC0_1DBC0;
    }
    // INC byte ptr [0xdc46] (1000_DBBC / 0x1DBBC)
    UInt8[DS, 0xDC46] = Alu.Inc8(UInt8[DS, 0xDC46]);
    label_1000_DBC0_1DBC0:
    // OR AL,AL (1000_DBC0 / 0x1DBC0)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:dbc8 (1000_DBC2 / 0x1DBC2)
    if(SignFlag) {
      goto label_1000_DBC8_1DBC8;
    }
    // CALLF [0x38c5] (1000_DBC4 / 0x1DBC4)
    // Indirect call to [0x38c5], generating possible targets from emulator records
    uint targetAddress_1000_DBC4 = (uint)(UInt16[DS, 0x38C7] * 0x10 + UInt16[DS, 0x38C5] - cs1 * 0x10);
    switch(targetAddress_1000_DBC4) {
      case 0x235BC : FarCall(cs1, 0xDBC8, VgaFunc04RestoreImageUnderMouseCursor_334B_010C_335BC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DBC4);
        break;
    }
    label_1000_DBC8_1DBC8:
    // POP AX (1000_DBC8 / 0x1DBC8)
    AX = Stack.Pop();
    // RET  (1000_DBC9 / 0x1DBC9)
    return NearRet();
  }
  
  public Action draw_mouse_ida_1000_DBEC_1DBEC(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDBEC: goto label_1000_DBEC_1DBEC;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DBEC_1DBEC:
    // INC byte ptr [0xdc46] (1000_DBEC / 0x1DBEC)
    UInt8[DS, 0xDC46] = Alu.Inc8(UInt8[DS, 0xDC46]);
    // JS 0x1000:dc1a (1000_DBF0 / 0x1DBF0)
    if(SignFlag) {
      // JS target is RET, inlining.
      // RET  (1000_DC1A / 0x1DC1A)
      return NearRet();
    }
    // JNZ 0x1000:dc1b (1000_DBF2 / 0x1DBF2)
    if(!ZeroFlag) {
      goto label_1000_DC1B_1DC1B;
    }
    // PUSH AX (1000_DBF4 / 0x1DBF4)
    Stack.Push(AX);
    // PUSH BX (1000_DBF5 / 0x1DBF5)
    Stack.Push(BX);
    // PUSH CX (1000_DBF6 / 0x1DBF6)
    Stack.Push(CX);
    // PUSH DX (1000_DBF7 / 0x1DBF7)
    Stack.Push(DX);
    // PUSH SI (1000_DBF8 / 0x1DBF8)
    Stack.Push(SI);
    // PUSH DI (1000_DBF9 / 0x1DBF9)
    Stack.Push(DI);
    // PUSH BP (1000_DBFA / 0x1DBFA)
    Stack.Push(BP);
    // MOV DX,word ptr [0xdc36] (1000_DBFB / 0x1DBFB)
    DX = UInt16[DS, 0xDC36];
    // MOV BX,word ptr [0xdc38] (1000_DBFF / 0x1DBFF)
    BX = UInt16[DS, 0xDC38];
    // MOV word ptr [0xdc42],DX (1000_DC03 / 0x1DC03)
    UInt16[DS, 0xDC42] = DX;
    // MOV word ptr [0xdc44],BX (1000_DC07 / 0x1DC07)
    UInt16[DS, 0xDC44] = BX;
    // MOV SI,word ptr [0x2582] (1000_DC0B / 0x1DC0B)
    SI = UInt16[DS, 0x2582];
    // CALLF [0x38c1] (1000_DC0F / 0x1DC0F)
    // Indirect call to [0x38c1], generating possible targets from emulator records
    uint targetAddress_1000_DC0F = (uint)(UInt16[DS, 0x38C3] * 0x10 + UInt16[DS, 0x38C1] - cs1 * 0x10);
    switch(targetAddress_1000_DC0F) {
      case 0x235B9 : FarCall(cs1, 0xDC13, VgaFunc03DrawMouseCursor_334B_0109_335B9);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DC0F);
        break;
    }
    // POP BP (1000_DC13 / 0x1DC13)
    BP = Stack.Pop();
    // POP DI (1000_DC14 / 0x1DC14)
    DI = Stack.Pop();
    // POP SI (1000_DC15 / 0x1DC15)
    SI = Stack.Pop();
    // POP DX (1000_DC16 / 0x1DC16)
    DX = Stack.Pop();
    // POP CX (1000_DC17 / 0x1DC17)
    CX = Stack.Pop();
    // POP BX (1000_DC18 / 0x1DC18)
    BX = Stack.Pop();
    // POP AX (1000_DC19 / 0x1DC19)
    AX = Stack.Pop();
    label_1000_DC1A_1DC1A:
    // RET  (1000_DC1A / 0x1DC1A)
    return NearRet();
    label_1000_DC1B_1DC1B:
    // DEC byte ptr [0xdc46] (1000_DC1B / 0x1DC1B)
    UInt8[DS, 0xDC46] = Alu.Dec8(UInt8[DS, 0xDC46]);
    // RET  (1000_DC1F / 0x1DC1F)
    return NearRet();
  }
  
  public Action redraw_mouse_ida_1000_DC20_1DC20(int gotoTarget) {
    label_1000_DC20_1DC20:
    // PUSH AX (1000_DC20 / 0x1DC20)
    Stack.Push(AX);
    // PUSH BX (1000_DC21 / 0x1DC21)
    Stack.Push(BX);
    // PUSH CX (1000_DC22 / 0x1DC22)
    Stack.Push(CX);
    // PUSH DX (1000_DC23 / 0x1DC23)
    Stack.Push(DX);
    // PUSH SI (1000_DC24 / 0x1DC24)
    Stack.Push(SI);
    // PUSH DI (1000_DC25 / 0x1DC25)
    Stack.Push(DI);
    // PUSH BP (1000_DC26 / 0x1DC26)
    Stack.Push(BP);
    // MOV DX,word ptr [0xdc36] (1000_DC27 / 0x1DC27)
    DX = UInt16[DS, 0xDC36];
    // MOV BX,word ptr [0xdc38] (1000_DC2B / 0x1DC2B)
    BX = UInt16[DS, 0xDC38];
    // CALL 0x1000:dc6a (1000_DC2F / 0x1DC2F)
    NearCall(cs1, 0xDC32, unknown_1000_DC6A_1DC6A);
    // MOV SI,BP (1000_DC32 / 0x1DC32)
    SI = BP;
    // XCHG word ptr [0x2582],BP (1000_DC34 / 0x1DC34)
    ushort tmp_1000_DC34 = UInt16[DS, 0x2582];
    UInt16[DS, 0x2582] = BP;
    BP = tmp_1000_DC34;
    // XOR AL,AL (1000_DC38 / 0x1DC38)
    AL = 0;
    // XCHG byte ptr [0xdc46],AL (1000_DC3A / 0x1DC3A)
    byte tmp_1000_DC3A = UInt8[DS, 0xDC46];
    UInt8[DS, 0xDC46] = AL;
    AL = tmp_1000_DC3A;
    // OR AL,AL (1000_DC3E / 0x1DC3E)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x1000:dc56 (1000_DC40 / 0x1DC40)
    if(SignFlag) {
      goto label_1000_DC56_1DC56;
    }
    // CMP DX,word ptr [0xdc42] (1000_DC42 / 0x1DC42)
    Alu.Sub16(DX, UInt16[DS, 0xDC42]);
    // JNZ 0x1000:dc52 (1000_DC46 / 0x1DC46)
    if(!ZeroFlag) {
      goto label_1000_DC52_1DC52;
    }
    // CMP BX,word ptr [0xdc44] (1000_DC48 / 0x1DC48)
    Alu.Sub16(BX, UInt16[DS, 0xDC44]);
    // JNZ 0x1000:dc52 (1000_DC4C / 0x1DC4C)
    if(!ZeroFlag) {
      goto label_1000_DC52_1DC52;
    }
    // CMP SI,BP (1000_DC4E / 0x1DC4E)
    Alu.Sub16(SI, BP);
    // JZ 0x1000:dc62 (1000_DC50 / 0x1DC50)
    if(ZeroFlag) {
      goto label_1000_DC62_1DC62;
    }
    label_1000_DC52_1DC52:
    // CALLF [0x38c5] (1000_DC52 / 0x1DC52)
    // Indirect call to [0x38c5], generating possible targets from emulator records
    uint targetAddress_1000_DC52 = (uint)(UInt16[DS, 0x38C7] * 0x10 + UInt16[DS, 0x38C5] - cs1 * 0x10);
    switch(targetAddress_1000_DC52) {
      case 0x235BC : FarCall(cs1, 0xDC56, VgaFunc04RestoreImageUnderMouseCursor_334B_010C_335BC);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DC52);
        break;
    }
    label_1000_DC56_1DC56:
    // MOV word ptr [0xdc42],DX (1000_DC56 / 0x1DC56)
    UInt16[DS, 0xDC42] = DX;
    // MOV word ptr [0xdc44],BX (1000_DC5A / 0x1DC5A)
    UInt16[DS, 0xDC44] = BX;
    // CALLF [0x38c1] (1000_DC5E / 0x1DC5E)
    // Indirect call to [0x38c1], generating possible targets from emulator records
    uint targetAddress_1000_DC5E = (uint)(UInt16[DS, 0x38C3] * 0x10 + UInt16[DS, 0x38C1] - cs1 * 0x10);
    switch(targetAddress_1000_DC5E) {
      case 0x235B9 : FarCall(cs1, 0xDC62, VgaFunc03DrawMouseCursor_334B_0109_335B9);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DC5E);
        break;
    }
    label_1000_DC62_1DC62:
    // POP BP (1000_DC62 / 0x1DC62)
    BP = Stack.Pop();
    // POP DI (1000_DC63 / 0x1DC63)
    DI = Stack.Pop();
    // POP SI (1000_DC64 / 0x1DC64)
    SI = Stack.Pop();
    // POP DX (1000_DC65 / 0x1DC65)
    DX = Stack.Pop();
    // POP CX (1000_DC66 / 0x1DC66)
    CX = Stack.Pop();
    // POP BX (1000_DC67 / 0x1DC67)
    BX = Stack.Pop();
    // POP AX (1000_DC68 / 0x1DC68)
    AX = Stack.Pop();
    // RET  (1000_DC69 / 0x1DC69)
    return NearRet();
  }
  
  public Action unknown_1000_DC6A_1DC6A(int gotoTarget) {
    label_1000_DC6A_1DC6A:
    // CMP byte ptr [0x28be],0x0 (1000_DC6A / 0x1DC6A)
    Alu.Sub8(UInt8[DS, 0x28BE], 0x0);
    // MOV BP,0x25c8 (1000_DC6F / 0x1DC6F)
    BP = 0x25C8;
    // JNZ 0x1000:dcdf (1000_DC72 / 0x1DC72)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // MOV BP,0x2584 (1000_DC74 / 0x1DC74)
    BP = 0x2584;
    // CMP byte ptr [0x4723],0x0 (1000_DC77 / 0x1DC77)
    Alu.Sub8(UInt8[DS, 0x4723], 0x0);
    // JNZ 0x1000:dcdf (1000_DC7C / 0x1DC7C)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // MOV DI,word ptr [0xdc58] (1000_DC7E / 0x1DC7E)
    DI = UInt16[DS, 0xDC58];
    // OR DI,DI (1000_DC82 / 0x1DC82)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JZ 0x1000:dcdf (1000_DC84 / 0x1DC84)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // CMP BX,0x9b (1000_DC86 / 0x1DC86)
    Alu.Sub16(BX, 0x9B);
    // JGE 0x1000:dcdf (1000_DC8A / 0x1DC8A)
    if(SignFlag == OverflowFlag) {
      // JGE target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // CALL 0x1000:d6fe (1000_DC8C / 0x1DC8C)
    NearCall(cs1, 0xDC8F, unknown_1000_D6FE_1D6FE);
    // MOV BP,0x25c8 (1000_DC8F / 0x1DC8F)
    BP = 0x25C8;
    // JC 0x1000:dcdf (1000_DC92 / 0x1DC92)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // CMP BX,word ptr [DI + 0x2] (1000_DC94 / 0x1DC94)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JL 0x1000:dcb9 (1000_DC97 / 0x1DC97)
    if(SignFlag != OverflowFlag) {
      goto label_1000_DCB9_1DCB9;
    }
    // CMP BX,word ptr [DI + 0x6] (1000_DC99 / 0x1DC99)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JGE 0x1000:dcb9 (1000_DC9C / 0x1DC9C)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DCB9_1DCB9;
    }
    // MOV BP,0x26d8 (1000_DC9E / 0x1DC9E)
    BP = 0x26D8;
    // MOV AX,word ptr [DI] (1000_DCA1 / 0x1DCA1)
    AX = UInt16[DS, DI];
    // SUB AX,DX (1000_DCA3 / 0x1DCA3)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // CMP AX,0x32 (1000_DCA5 / 0x1DCA5)
    Alu.Sub16(AX, 0x32);
    // JC 0x1000:dcdf (1000_DCA8 / 0x1DCA8)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // MOV BP,0x2650 (1000_DCAA / 0x1DCAA)
    BP = 0x2650;
    // MOV AX,DX (1000_DCAD / 0x1DCAD)
    AX = DX;
    // SUB AX,word ptr [DI + 0x4] (1000_DCAF / 0x1DCAF)
    // AX -= UInt16[DS, (ushort)(DI + 0x4)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x4)]);
    // CMP AX,0x32 (1000_DCB2 / 0x1DCB2)
    Alu.Sub16(AX, 0x32);
    // JC 0x1000:dcdf (1000_DCB5 / 0x1DCB5)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // JMP 0x1000:dcdc (1000_DCB7 / 0x1DCB7)
    goto label_1000_DCDC_1DCDC;
    label_1000_DCB9_1DCB9:
    // CMP DX,word ptr [DI] (1000_DCB9 / 0x1DCB9)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JL 0x1000:dcdc (1000_DCBB / 0x1DCBB)
    if(SignFlag != OverflowFlag) {
      goto label_1000_DCDC_1DCDC;
    }
    // CMP DX,word ptr [DI + 0x4] (1000_DCBD / 0x1DCBD)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JGE 0x1000:dcdc (1000_DCC0 / 0x1DCC0)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DCDC_1DCDC;
    }
    // MOV BP,0x260c (1000_DCC2 / 0x1DCC2)
    BP = 0x260C;
    // MOV AX,word ptr [DI + 0x2] (1000_DCC5 / 0x1DCC5)
    AX = UInt16[DS, (ushort)(DI + 0x2)];
    // SUB AX,BX (1000_DCC8 / 0x1DCC8)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x19 (1000_DCCA / 0x1DCCA)
    Alu.Sub16(AX, 0x19);
    // JC 0x1000:dcdf (1000_DCCD / 0x1DCCD)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    // MOV BP,0x2694 (1000_DCCF / 0x1DCCF)
    BP = 0x2694;
    // MOV AX,BX (1000_DCD2 / 0x1DCD2)
    AX = BX;
    // SUB AX,word ptr [DI + 0x6] (1000_DCD4 / 0x1DCD4)
    // AX -= UInt16[DS, (ushort)(DI + 0x6)];
    AX = Alu.Sub16(AX, UInt16[DS, (ushort)(DI + 0x6)]);
    // CMP AX,0x19 (1000_DCD7 / 0x1DCD7)
    Alu.Sub16(AX, 0x19);
    // JC 0x1000:dcdf (1000_DCDA / 0x1DCDA)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_DCDF / 0x1DCDF)
      return NearRet();
    }
    label_1000_DCDC_1DCDC:
    // MOV BP,0x2584 (1000_DCDC / 0x1DCDC)
    BP = 0x2584;
    label_1000_DCDF_1DCDF:
    // RET  (1000_DCDF / 0x1DCDF)
    return NearRet();
  }
  
  public Action read_game_port_ida_1000_DCE0_1DCE0(int gotoTarget) {
    label_1000_DCE0_1DCE0:
    // MOV DX,0x201 (1000_DCE0 / 0x1DCE0)
    DX = 0x201;
    // PUSHF  (1000_DCE3 / 0x1DCE3)
    Stack.Push(FlagRegister);
    // CLI  (1000_DCE4 / 0x1DCE4)
    InterruptFlag = false;
    // OUT DX,AL (1000_DCE5 / 0x1DCE5)
    Cpu.Out8(DX, AL);
    // XOR BX,BX (1000_DCE6 / 0x1DCE6)
    BX = 0;
    // MOV CX,BX (1000_DCE8 / 0x1DCE8)
    CX = BX;
    // MOV DI,0x800 (1000_DCEA / 0x1DCEA)
    DI = 0x800;
    label_1000_DCED_1DCED:
    // IN AL,DX (1000_DCED / 0x1DCED)
    AL = Cpu.In8(DX);
    // MOV AH,AL (1000_DCEE / 0x1DCEE)
    AH = AL;
    // SHR AH,1 (1000_DCF0 / 0x1DCF0)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // AND AX,0x101 (1000_DCF2 / 0x1DCF2)
    // AX &= 0x101;
    AX = Alu.And16(AX, 0x101);
    // JZ 0x1000:dd09 (1000_DCF5 / 0x1DCF5)
    if(ZeroFlag) {
      goto label_1000_DD09_1DD09;
    }
    // ADD CL,AL (1000_DCF7 / 0x1DCF7)
    // CL += AL;
    CL = Alu.Add8(CL, AL);
    // ADC CH,0x0 (1000_DCF9 / 0x1DCF9)
    CH = Alu.Adc8(CH, 0x0);
    // ADD BL,AH (1000_DCFC / 0x1DCFC)
    // BL += AH;
    BL = Alu.Add8(BL, AH);
    // ADC BH,0x0 (1000_DCFE / 0x1DCFE)
    BH = Alu.Adc8(BH, 0x0);
    // DEC DI (1000_DD01 / 0x1DD01)
    DI = Alu.Dec16(DI);
    // JNZ 0x1000:dced (1000_DD02 / 0x1DD02)
    if(!ZeroFlag) {
      goto label_1000_DCED_1DCED;
    }
    // AND byte ptr [0x2942],0x7f (1000_DD04 / 0x1DD04)
    // UInt8[DS, 0x2942] &= 0x7F;
    UInt8[DS, 0x2942] = Alu.And8(UInt8[DS, 0x2942], 0x7F);
    label_1000_DD09_1DD09:
    // IN AL,DX (1000_DD09 / 0x1DD09)
    AL = Cpu.In8(DX);
    // POPF  (1000_DD0A / 0x1DD0A)
    FlagRegister = Stack.Pop();
    // MOV DX,CX (1000_DD0B / 0x1DD0B)
    DX = CX;
    // NOT AL (1000_DD0D / 0x1DD0D)
    AL = (byte)~AL;
    // RET  (1000_DD0F / 0x1DD0F)
    return NearRet();
  }
  
  public Action get_key_hit_ida_1000_DD5A_1DD5A(int gotoTarget) {
    label_1000_DD5A_1DD5A:
    // XOR AL,AL (1000_DD5A / 0x1DD5A)
    AL = 0;
    // XCHG byte ptr [0xcee8],AL (1000_DD5C / 0x1DD5C)
    byte tmp_1000_DD5C = UInt8[DS, 0xCEE8];
    UInt8[DS, 0xCEE8] = AL;
    AL = tmp_1000_DD5C;
    // OR AL,AL (1000_DD60 / 0x1DD60)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // RET  (1000_DD62 / 0x1DD62)
    return NearRet();
  }
  
  public Action stc_on_user_input_ida_1000_DD63_1DD63(int gotoTarget) {
    label_1000_DD63_1DD63:
    // CALL 0x1000:de7b (1000_DD63 / 0x1DD63)
    NearCall(cs1, 0xDD66, unknown_1000_DE7B_1DE7B);
    // CALL 0x1000:de54 (1000_DD66 / 0x1DD66)
    NearCall(cs1, 0xDD69, unknown_1000_DE54_1DE54);
    // JZ 0x1000:ddae (1000_DD69 / 0x1DD69)
    if(ZeroFlag) {
      goto label_1000_DDAE_1DDAE;
    }
    // CMP byte ptr [0xcee8],0x0 (1000_DD6B / 0x1DD6B)
    Alu.Sub8(UInt8[DS, 0xCEE8], 0x0);
    // JNZ 0x1000:ddae (1000_DD70 / 0x1DD70)
    if(!ZeroFlag) {
      goto label_1000_DDAE_1DDAE;
    }
    // TEST byte ptr [0x2942],0x40 (1000_DD72 / 0x1DD72)
    Alu.And8(UInt8[DS, 0x2942], 0x40);
    // JNZ 0x1000:dd89 (1000_DD77 / 0x1DD77)
    if(!ZeroFlag) {
      goto label_1000_DD89_1DD89;
    }
    // MOV AX,0x3 (1000_DD79 / 0x1DD79)
    AX = 0x3;
    // INT 0x33 (1000_DD7C / 0x1DD7C)
    Interrupt(0x33);
    // XCHG SI,BX (1000_DD7E / 0x1DD7E)
    ushort tmp_1000_DD7E = SI;
    SI = BX;
    BX = tmp_1000_DD7E;
    // XOR BX,SI (1000_DD80 / 0x1DD80)
    // BX ^= SI;
    BX = Alu.Xor16(BX, SI);
    // AND BX,SI (1000_DD82 / 0x1DD82)
    // BX &= SI;
    BX = Alu.And16(BX, SI);
    // AND BL,0x7 (1000_DD84 / 0x1DD84)
    // BL &= 0x7;
    BL = Alu.And8(BL, 0x7);
    // JNZ 0x1000:ddae (1000_DD87 / 0x1DD87)
    if(!ZeroFlag) {
      goto label_1000_DDAE_1DDAE;
    }
    label_1000_DD89_1DD89:
    // TEST byte ptr [0x2942],0x80 (1000_DD89 / 0x1DD89)
    Alu.And8(UInt8[DS, 0x2942], 0x80);
    // JZ 0x1000:dd9e (1000_DD8E / 0x1DD8E)
    if(ZeroFlag) {
      goto label_1000_DD9E_1DD9E;
    }
    // PUSH DI (1000_DD90 / 0x1DD90)
    Stack.Push(DI);
    // CALL 0x1000:dce0 (1000_DD91 / 0x1DD91)
    NearCall(cs1, 0xDD94, read_game_port_ida_1000_DCE0_1DCE0);
    // POP DI (1000_DD94 / 0x1DD94)
    DI = Stack.Pop();
    // XCHG AX,DI (1000_DD95 / 0x1DD95)
    ushort tmp_1000_DD95 = AX;
    AX = DI;
    DI = tmp_1000_DD95;
    // XOR AX,DI (1000_DD96 / 0x1DD96)
    // AX ^= DI;
    AX = Alu.Xor16(AX, DI);
    // AND AX,DI (1000_DD98 / 0x1DD98)
    // AX &= DI;
    AX = Alu.And16(AX, DI);
    // AND AL,0x30 (1000_DD9A / 0x1DD9A)
    // AL &= 0x30;
    AL = Alu.And8(AL, 0x30);
    // JNZ 0x1000:ddae (1000_DD9C / 0x1DD9C)
    if(!ZeroFlag) {
      goto label_1000_DDAE_1DDAE;
    }
    label_1000_DD9E_1DD9E:
    // PUSH SI (1000_DD9E / 0x1DD9E)
    Stack.Push(SI);
    // PUSH DI (1000_DD9F / 0x1DD9F)
    Stack.Push(DI);
    // CALL 0x1000:e3cc (1000_DDA0 / 0x1DDA0)
    NearCall(cs1, 0xDDA3, unknown_1000_E3CC_1E3CC);
    // MOV [0x0],AX (1000_DDA3 / 0x1DDA3)
    UInt16[DS, 0x0] = AX;
    // CALL 0x1000:d9d2 (1000_DDA6 / 0x1DDA6)
    NearCall(cs1, 0xDDA9, unknown_1000_D9D2_1D9D2);
    // POP DI (1000_DDA9 / 0x1DDA9)
    DI = Stack.Pop();
    // POP SI (1000_DDAA / 0x1DDAA)
    SI = Stack.Pop();
    // OR AL,0x1 (1000_DDAB / 0x1DDAB)
    // AL |= 0x1;
    AL = Alu.Or8(AL, 0x1);
    // RET  (1000_DDAD / 0x1DDAD)
    return NearRet();
    label_1000_DDAE_1DDAE:
    // STC  (1000_DDAE / 0x1DDAE)
    CarryFlag = true;
    // RET  (1000_DDAF / 0x1DDAF)
    return NearRet();
  }
  
  public Action unknown_1000_DDB0_1DDB0(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDDE7: goto label_1000_DDE7_1DDE7;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DDB0_1DDB0:
    // CALL 0x1000:e270 (1000_DDB0 / 0x1DDB0)
    NearCall(cs1, 0xDDB3, PushAll_1000_E270_1E270);
    // PUSH AX (1000_DDB3 / 0x1DDB3)
    Stack.Push(AX);
    // MOV byte ptr [0xcee8],0x0 (1000_DDB4 / 0x1DDB4)
    UInt8[DS, 0xCEE8] = 0x0;
    // CMP byte ptr [0x227d],0x0 (1000_DDB9 / 0x1DDB9)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JNZ 0x1000:ddc3 (1000_DDBE / 0x1DDBE)
    if(!ZeroFlag) {
      goto label_1000_DDC3_1DDC3;
    }
    // CALL 0x1000:d64e (1000_DDC0 / 0x1DDC0)
    NearCall(cs1, 0xDDC3, unknown_1000_D64E_1D64E);
    label_1000_DDC3_1DDC3:
    // MOV SI,0xffff (1000_DDC3 / 0x1DDC3)
    SI = 0xFFFF;
    // MOV DI,SI (1000_DDC6 / 0x1DDC6)
    DI = SI;
    // POP CX (1000_DDC8 / 0x1DDC8)
    CX = Stack.Pop();
    // STI  (1000_DDC9 / 0x1DDC9)
    InterruptFlag = true;
    label_1000_DDCA_1DDCA:
    // PUSH word ptr [0xce7a] (1000_DDCA / 0x1DDCA)
    Stack.Push(UInt16[DS, 0xCE7A]);
    // PUSH CX (1000_DDCE / 0x1DDCE)
    Stack.Push(CX);
    // CALL 0x1000:dd63 (1000_DDCF / 0x1DDCF)
    NearCall(cs1, 0xDDD2, stc_on_user_input_ida_1000_DD63_1DD63);
    // POP CX (1000_DDD2 / 0x1DDD2)
    CX = Stack.Pop();
    // POP AX (1000_DDD3 / 0x1DDD3)
    AX = Stack.Pop();
    // JC 0x1000:dde7 (1000_DDD4 / 0x1DDD4)
    if(CarryFlag) {
      goto label_1000_DDE7_1DDE7;
    }
    // MOV BX,AX (1000_DDD6 / 0x1DDD6)
    BX = AX;
    label_1000_DDD8_1DDD8:
    // MOV AX,BX (1000_DDD8 / 0x1DDD8)
    AX = BX;
    // SUB AX,word ptr SS:[0xce7a] (1000_DDDA / 0x1DDDA)
    // AX -= UInt16[SS, 0xCE7A];
    AX = Alu.Sub16(AX, UInt16[SS, 0xCE7A]);
    // JZ 0x1000:ddd8 (1000_DDDF / 0x1DDDF)
    if(ZeroFlag) {
      goto label_1000_DDD8_1DDD8;
    }
    // ADD CX,AX (1000_DDE1 / 0x1DDE1)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // JC 0x1000:ddca (1000_DDE3 / 0x1DDE3)
    if(CarryFlag) {
      goto label_1000_DDCA_1DDCA;
    }
    // OR AL,0x1 (1000_DDE5 / 0x1DDE5)
    // AL |= 0x1;
    AL = Alu.Or8(AL, 0x1);
    label_1000_DDE7_1DDE7:
    // PUSHF  (1000_DDE7 / 0x1DDE7)
    Stack.Push(FlagRegister);
    // CALL 0x1000:de4e (1000_DDE8 / 0x1DDE8)
    NearCall(cs1, 0xDDEB, SetCEE8To0_1000_DE4E_1DE4E);
    // POPF  (1000_DDEB / 0x1DDEB)
    FlagRegister = Stack.Pop();
    // CALL 0x1000:e283 (1000_DDEC / 0x1DDEC)
    NearCall(cs1, 0xDDEF, PopAll_1000_E283_1E283);
    // RET  (1000_DDEF / 0x1DDEF)
    return NearRet();
  }
  
  public Action unknown_1000_DDF0_1DDF0(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDE07: goto label_1000_DE07_1DE07;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DDF0_1DDF0:
    // CMP byte ptr [0xdbcd],0x0 (1000_DDF0 / 0x1DDF0)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JS 0x1000:de07 (1000_DDF5 / 0x1DDF5)
    if(SignFlag) {
      goto label_1000_DE07_1DE07;
    }
    // CALL 0x1000:aba3 (1000_DDF7 / 0x1DDF7)
    NearCall(cs1, 0xDDFA, check_res_file_open_ida_1000_ABA3_1ABA3);
    // JZ 0x1000:ddb0 (1000_DDFA / 0x1DDFA)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return unknown_1000_DDB0_1DDB0(0);
    }
    label_1000_DDFC_1DDFC:
    // CALL 0x1000:aba3 (1000_DDFC / 0x1DDFC)
    NearCall(cs1, 0xDDFF, check_res_file_open_ida_1000_ABA3_1ABA3);
    // JZ 0x1000:de07 (1000_DDFF / 0x1DDFF)
    if(ZeroFlag) {
      goto label_1000_DE07_1DE07;
    }
    // CALL 0x1000:dd63 (1000_DE01 / 0x1DE01)
    NearCall(cs1, 0xDE04, stc_on_user_input_ida_1000_DD63_1DD63);
    // JNC 0x1000:ddfc (1000_DE04 / 0x1DE04)
    if(!CarryFlag) {
      goto label_1000_DDFC_1DDFC;
    }
    // RET  (1000_DE06 / 0x1DE06)
    return NearRet();
    label_1000_DE07_1DE07:
    // PUSH AX (1000_DE07 / 0x1DE07)
    Stack.Push(AX);
    // OR AL,0x1 (1000_DE08 / 0x1DE08)
    // AL |= 0x1;
    AL = Alu.Or8(AL, 0x1);
    // POP AX (1000_DE0A / 0x1DE0A)
    AX = Stack.Pop();
    // RET  (1000_DE0B / 0x1DE0B)
    return NearRet();
  }
  
  public Action check_midi_ida_1000_DE0C_1DE0C(int gotoTarget) {
    label_1000_DE0C_1DE0C:
    // CMP byte ptr [0xdbcd],0x0 (1000_DE0C / 0x1DE0C)
    Alu.Sub8(UInt8[DS, 0xDBCD], 0x0);
    // JNS 0x1000:de07 (1000_DE11 / 0x1DE11)
    if(!SignFlag) {
      // Jump converted to non entry function call
      return unknown_1000_DDF0_1DDF0(0x1DE07 - cs1 * 0x10);
    }
    // CALL 0x1000:e270 (1000_DE13 / 0x1DE13)
    NearCall(cs1, 0xDE16, PushAll_1000_E270_1E270);
    // MOV byte ptr [0xcee8],0x0 (1000_DE16 / 0x1DE16)
    UInt8[DS, 0xCEE8] = 0x0;
    // MOV SI,0xffff (1000_DE1B / 0x1DE1B)
    SI = 0xFFFF;
    // MOV DI,SI (1000_DE1E / 0x1DE1E)
    DI = SI;
    label_1000_DE20_1DE20:
    // MOV AX,0x60 (1000_DE20 / 0x1DE20)
    AX = 0x60;
    // SUB AX,word ptr [0xdbd0] (1000_DE23 / 0x1DE23)
    // AX -= UInt16[DS, 0xDBD0];
    AX = Alu.Sub16(AX, UInt16[DS, 0xDBD0]);
    // XOR AH,AH (1000_DE27 / 0x1DE27)
    AH = 0;
    // MOV DL,0x6 (1000_DE29 / 0x1DE29)
    DL = 0x6;
    // DIV DL (1000_DE2B / 0x1DE2B)
    Cpu.Div8(DL);
    // AND AL,0xf (1000_DE2D / 0x1DE2D)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // MOV DX,word ptr [0xdbce] (1000_DE2F / 0x1DE2F)
    DX = UInt16[DS, 0xDBCE];
    // SHL DX,1 (1000_DE33 / 0x1DE33)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_DE35 / 0x1DE35)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_DE37 / 0x1DE37)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_DE39 / 0x1DE39)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // OR DL,AL (1000_DE3B / 0x1DE3B)
    // DL |= AL;
    DL = Alu.Or8(DL, AL);
    // CMP BX,DX (1000_DE3D / 0x1DE3D)
    Alu.Sub16(BX, DX);
    // JBE 0x1000:de4a (1000_DE3F / 0x1DE3F)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_DE4A_1DE4A;
    }
    // PUSH BX (1000_DE41 / 0x1DE41)
    Stack.Push(BX);
    // CALL 0x1000:dd63 (1000_DE42 / 0x1DE42)
    NearCall(cs1, 0xDE45, stc_on_user_input_ida_1000_DD63_1DD63);
    // POP BX (1000_DE45 / 0x1DE45)
    BX = Stack.Pop();
    // JC 0x1000:dde7 (1000_DE46 / 0x1DE46)
    if(CarryFlag) {
      // Jump converted to non entry function call
      return unknown_1000_DDB0_1DDB0(0x1DDE7 - cs1 * 0x10);
    }
    // JMP 0x1000:de20 (1000_DE48 / 0x1DE48)
    goto label_1000_DE20_1DE20;
    label_1000_DE4A_1DE4A:
    // OR AL,0x1 (1000_DE4A / 0x1DE4A)
    // AL |= 0x1;
    AL = Alu.Or8(AL, 0x1);
    // JMP 0x1000:dde7 (1000_DE4C / 0x1DE4C)
    // Jump converted to non entry function call
    return unknown_1000_DDB0_1DDB0(0x1DDE7 - cs1 * 0x10);
  }
  
  public Action SetCEE8To0_1000_DE4E_1DE4E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDE4E: goto label_1000_DE4E_1DE4E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_DE4E_1DE4E:
    // MOV byte ptr [0xcee8],0x0 (1000_DE4E / 0x1DE4E)
    UInt8[DS, 0xCEE8] = 0x0;
    // RET  (1000_DE53 / 0x1DE53)
    return NearRet();
  }
  
  public Action unknown_1000_DE54_1DE54(int gotoTarget) {
    label_1000_DE54_1DE54:
    // MOV byte ptr [0xcee9],0x0 (1000_DE54 / 0x1DE54)
    UInt8[DS, 0xCEE9] = 0x0;
    // CMP byte ptr [0xcee8],0x1 (1000_DE59 / 0x1DE59)
    Alu.Sub8(UInt8[DS, 0xCEE8], 0x1);
    // JNZ 0x1000:de67 (1000_DE5E / 0x1DE5E)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_DE67 / 0x1DE67)
      return NearRet();
    }
    // MOV byte ptr [0xcee9],0x1 (1000_DE60 / 0x1DE60)
    UInt8[DS, 0xCEE9] = 0x1;
    // JMP 0x1000:de4e (1000_DE65 / 0x1DE65)
    // Jump converted to entry function call
    return SetCEE8To0_1000_DE4E_1DE4E(0);
    label_1000_DE67_1DE67:
    // RET  (1000_DE67 / 0x1DE67)
    return NearRet();
  }
  
  public Action unknown_1000_DE7B_1DE7B(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDE7A: break;
      case 0: goto entry; break; //
    }
    label_1000_DE7A_1DE7A:
    // RET  (1000_DE7A / 0x1DE7A)
    return NearRet();
    entry:
    label_1000_DE7B_1DE7B:
    // CMP byte ptr [0xce9a],0x0 (1000_DE7B / 0x1DE7B)
    Alu.Sub8(UInt8[DS, 0xCE9A], 0x0);
    // JZ 0x1000:de7a (1000_DE80 / 0x1DE80)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DE7A / 0x1DE7A)
      return NearRet();
    }
    // CMP byte ptr [0xce80],0x0 (1000_DE82 / 0x1DE82)
    Alu.Sub8(UInt8[DS, 0xCE80], 0x0);
    // JZ 0x1000:de7a (1000_DE87 / 0x1DE87)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DE7A / 0x1DE7A)
      return NearRet();
    }
    // CALL 0x1000:e270 (1000_DE89 / 0x1DE89)
    NearCall(cs1, 0xDE8C, PushAll_1000_E270_1E270);
    // MOV AL,0x1 (1000_DE8C / 0x1DE8C)
    AL = 0x1;
    // XCHG byte ptr [0x2788],AL (1000_DE8E / 0x1DE8E)
    byte tmp_1000_DE8E = UInt8[DS, 0x2788];
    UInt8[DS, 0x2788] = AL;
    AL = tmp_1000_DE8E;
    // PUSH AX (1000_DE92 / 0x1DE92)
    Stack.Push(AX);
    // PUSH word ptr [0xce7a] (1000_DE93 / 0x1DE93)
    Stack.Push(UInt16[DS, 0xCE7A]);
    // CALL 0x1000:dbb2 (1000_DE97 / 0x1DE97)
    NearCall(cs1, 0xDE9A, call_restore_cursor_ida_1000_DBB2_1DBB2);
    // PUSH word ptr [0xdbda] (1000_DE9A / 0x1DE9A)
    Stack.Push(UInt16[DS, 0xDBDA]);
    // CALL 0x1000:c08e (1000_DE9E / 0x1DE9E)
    NearCall(cs1, 0xDEA1, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // PUSH word ptr [0xdbd6] (1000_DEA1 / 0x1DEA1)
    Stack.Push(UInt16[DS, 0xDBD6]);
    // CALLF [0x38b9] (1000_DEA5 / 0x1DEA5)
    // Indirect call to [0x38b9], generating possible targets from emulator records
    uint targetAddress_1000_DEA5 = (uint)(UInt16[DS, 0x38BB] * 0x10 + UInt16[DS, 0x38B9] - cs1 * 0x10);
    switch(targetAddress_1000_DEA5) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_DEA5);
        break;
    }
    // MOV [0xdbd6],AX (1000_DEA9 / 0x1DEA9)
    UInt16[DS, 0xDBD6] = AX;
    // MOV SI,0x2945 (1000_DEAC / 0x1DEAC)
    SI = 0x2945;
    // CALL 0x1000:7b1b (1000_DEAF / 0x1DEAF)
    NearCall(cs1, 0xDEB2, unknown_1000_7B1B_17B1B);
    // MOV CX,0xf1fe (1000_DEB2 / 0x1DEB2)
    CX = 0xF1FE;
    // MOV DX,0x82 (1000_DEB5 / 0x1DEB5)
    DX = 0x82;
    // MOV BX,0xa9 (1000_DEB8 / 0x1DEB8)
    BX = 0xA9;
    // MOV AX,0x115 (1000_DEBB / 0x1DEBB)
    AX = 0x115;
    // CALL 0x1000:d068 (1000_DEBE / 0x1DEBE)
    NearCall(cs1, 0xDEC1, SetFontToIntro_1000_D068_1D068);
    // CALL 0x1000:d194 (1000_DEC1 / 0x1DEC1)
    NearCall(cs1, 0xDEC4, unknown_1000_D194_1D194);
    // CALL 0x1000:d075 (1000_DEC4 / 0x1DEC4)
    NearCall(cs1, 0xDEC7, SetFontToMenu_1000_D075_1D075);
    // MOV DX,0x60 (1000_DEC7 / 0x1DEC7)
    DX = 0x60;
    // MOV BX,0xb8 (1000_DECA / 0x1DECA)
    BX = 0xB8;
    // MOV AX,0x116 (1000_DECD / 0x1DECD)
    AX = 0x116;
    // MOV CX,0xf1f7 (1000_DED0 / 0x1DED0)
    CX = 0xF1F7;
    // CALL 0x1000:d194 (1000_DED3 / 0x1DED3)
    NearCall(cs1, 0xDED6, unknown_1000_D194_1D194);
    label_1000_DED6_1DED6:
    // CMP byte ptr [0xce9a],0x0 (1000_DED6 / 0x1DED6)
    Alu.Sub8(UInt8[DS, 0xCE9A], 0x0);
    // JNZ 0x1000:ded6 (1000_DEDB / 0x1DEDB)
    if(!ZeroFlag) {
      goto label_1000_DED6_1DED6;
    }
    // CALL 0x1000:de68 (1000_DEDD / 0x1DEDD)
    throw FailAsUntested("Could not find a valid function at address 1000_DE68 / 0x1DE68");
    label_1000_DEE0_1DEE0:
    // CALL 0x1000:dd5a (1000_DEE0 / 0x1DEE0)
    NearCall(cs1, 0xDEE3, get_key_hit_ida_1000_DD5A_1DD5A);
    // JZ 0x1000:dee0 (1000_DEE3 / 0x1DEE3)
    if(ZeroFlag) {
      goto label_1000_DEE0_1DEE0;
    }
    // PUSH AX (1000_DEE5 / 0x1DEE5)
    Stack.Push(AX);
    // CALL 0x1000:de68 (1000_DEE6 / 0x1DEE6)
    throw FailAsUntested("Could not find a valid function at address 1000_DE68 / 0x1DE68");
    // CALL 0x1000:df07 (1000_DEE9 / 0x1DEE9)
    throw FailAsUntested("Could not find a valid function at address 1000_DF07 / 0x1DF07");
    // POP AX (1000_DEEC / 0x1DEEC)
    AX = Stack.Pop();
    // DEC AL (1000_DEED / 0x1DEED)
    AL = Alu.Dec8(AL);
    // JZ 0x1000:dee0 (1000_DEEF / 0x1DEEF)
    if(ZeroFlag) {
      goto label_1000_DEE0_1DEE0;
    }
    // POP word ptr [0xdbd6] (1000_DEF1 / 0x1DEF1)
    UInt16[DS, 0xDBD6] = Stack.Pop();
    // POP word ptr [0xdbda] (1000_DEF5 / 0x1DEF5)
    UInt16[DS, 0xDBDA] = Stack.Pop();
    // POP word ptr [0xce7a] (1000_DEF9 / 0x1DEF9)
    UInt16[DS, 0xCE7A] = Stack.Pop();
    // POP AX (1000_DEFD / 0x1DEFD)
    AX = Stack.Pop();
    // MOV [0x2788],AL (1000_DEFE / 0x1DEFE)
    UInt8[DS, 0x2788] = AL;
    // CALL 0x1000:e283 (1000_DF01 / 0x1DF01)
    NearCall(cs1, 0xDF04, PopAll_1000_E283_1E283);
    // XOR AX,AX (1000_DF04 / 0x1DF04)
    AX = 0;
    // RET  (1000_DF06 / 0x1DF06)
    return NearRet();
  }
  
  public Action get_mouse_pos_etc_ida_1000_DF1E_1DF1E(int gotoTarget) {
    switch(gotoTarget) {
      case 0xDAAF: break;
      case 0: goto entry; break; //
    }
    label_1000_DAAF_1DAAF:
    // MOV SI,0xdc3a (1000_DAAF / 0x1DAAF)
    SI = 0xDC3A;
    // MOV AX,[0xdc36] (1000_DAB2 / 0x1DAB2)
    AX = UInt16[DS, 0xDC36];
    // ADD AX,DX (1000_DAB5 / 0x1DAB5)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // CMP AX,word ptr [SI] (1000_DAB7 / 0x1DAB7)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JGE 0x1000:dabd (1000_DAB9 / 0x1DAB9)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DABD_1DABD;
    }
    // MOV AX,word ptr [SI] (1000_DABB / 0x1DABB)
    AX = UInt16[DS, SI];
    label_1000_DABD_1DABD:
    // ADD SI,0x2 (1000_DABD / 0x1DABD)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // CMP AX,word ptr [SI] (1000_DAC0 / 0x1DAC0)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JLE 0x1000:dac6 (1000_DAC2 / 0x1DAC2)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_DAC6_1DAC6;
    }
    // MOV AX,word ptr [SI] (1000_DAC4 / 0x1DAC4)
    AX = UInt16[DS, SI];
    label_1000_DAC6_1DAC6:
    // MOV [0xdc36],AX (1000_DAC6 / 0x1DAC6)
    UInt16[DS, 0xDC36] = AX;
    // ADD SI,0x2 (1000_DAC9 / 0x1DAC9)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // MOV AX,[0xdc38] (1000_DACC / 0x1DACC)
    AX = UInt16[DS, 0xDC38];
    // ADD AX,BX (1000_DACF / 0x1DACF)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // CMP AX,word ptr [SI] (1000_DAD1 / 0x1DAD1)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JGE 0x1000:dad7 (1000_DAD3 / 0x1DAD3)
    if(SignFlag == OverflowFlag) {
      goto label_1000_DAD7_1DAD7;
    }
    // MOV AX,word ptr [SI] (1000_DAD5 / 0x1DAD5)
    AX = UInt16[DS, SI];
    label_1000_DAD7_1DAD7:
    // ADD SI,0x2 (1000_DAD7 / 0x1DAD7)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // CMP AX,word ptr [SI] (1000_DADA / 0x1DADA)
    Alu.Sub16(AX, UInt16[DS, SI]);
    // JLE 0x1000:dae0 (1000_DADC / 0x1DADC)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_1000_DAE0_1DAE0;
    }
    // MOV AX,word ptr [SI] (1000_DADE / 0x1DADE)
    AX = UInt16[DS, SI];
    label_1000_DAE0_1DAE0:
    // MOV [0xdc38],AX (1000_DAE0 / 0x1DAE0)
    UInt16[DS, 0xDC38] = AX;
    entry:
    label_1000_DF1E_1DF1E:
    // CALL 0x1000:de7b (1000_DF1E / 0x1DF1E)
    NearCall(cs1, 0xDF21, unknown_1000_DE7B_1DE7B);
    // XOR AL,AL (1000_DF21 / 0x1DF21)
    AL = 0;
    // TEST byte ptr [0x2942],0x40 (1000_DF23 / 0x1DF23)
    Alu.And8(UInt8[DS, 0x2942], 0x40);
    // JNZ 0x1000:df49 (1000_DF28 / 0x1DF28)
    if(!ZeroFlag) {
      goto label_1000_DF49_1DF49;
    }
    // MOV AX,0x3 (1000_DF2A / 0x1DF2A)
    AX = 0x3;
    // INT 0x33 (1000_DF2D / 0x1DF2D)
    Interrupt(0x33);
    // MOV AX,CX (1000_DF2F / 0x1DF2F)
    AX = CX;
    // MOV CX,word ptr [0x2580] (1000_DF31 / 0x1DF31)
    CX = UInt16[DS, 0x2580];
    // SHR AX,CL (1000_DF35 / 0x1DF35)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // MOV CL,CH (1000_DF37 / 0x1DF37)
    CL = CH;
    // SHR DX,CL (1000_DF39 / 0x1DF39)
    // DX >>= CL;
    DX = Alu.Shr16(DX, CL);
    // MOV CX,AX (1000_DF3B / 0x1DF3B)
    CX = AX;
    // MOV AL,BL (1000_DF3D / 0x1DF3D)
    AL = BL;
    // AND AL,0x3 (1000_DF3F / 0x1DF3F)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // MOV word ptr [0xdc36],CX (1000_DF41 / 0x1DF41)
    UInt16[DS, 0xDC36] = CX;
    // MOV word ptr [0xdc38],DX (1000_DF45 / 0x1DF45)
    UInt16[DS, 0xDC38] = DX;
    label_1000_DF49_1DF49:
    // MOV [0xdc34],AL (1000_DF49 / 0x1DF49)
    UInt8[DS, 0xDC34] = AL;
    // TEST byte ptr [0x2942],0x80 (1000_DF4C / 0x1DF4C)
    Alu.And8(UInt8[DS, 0x2942], 0x80);
    // JZ 0x1000:df56 (1000_DF51 / 0x1DF51)
    if(ZeroFlag) {
      goto label_1000_DF56_1DF56;
    }
    // CALL 0x1000:dd10 (1000_DF53 / 0x1DF53)
    throw FailAsUntested("Could not find a valid function at address 1000_DD10 / 0x1DD10");
    label_1000_DF56_1DF56:
    // MOV SI,0xcec8 (1000_DF56 / 0x1DF56)
    SI = 0xCEC8;
    // MOV DI,word ptr [0xdc48] (1000_DF59 / 0x1DF59)
    DI = UInt16[DS, 0xDC48];
    // XOR DX,DX (1000_DF5D / 0x1DF5D)
    DX = 0;
    // MOV BX,DX (1000_DF5F / 0x1DF5F)
    BX = DX;
    // MOV AX,DX (1000_DF61 / 0x1DF61)
    AX = DX;
    // MOV CX,0xd (1000_DF63 / 0x1DF63)
    CX = 0xD;
    label_1000_DF66_1DF66:
    // LODSB SI (1000_DF66 / 0x1DF66)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,byte ptr [SI + 0x12] (1000_DF67 / 0x1DF67)
    // AL |= UInt8[DS, (ushort)(SI + 0x12)];
    AL = Alu.Or8(AL, UInt8[DS, (ushort)(SI + 0x12)]);
    // JZ 0x1000:df74 (1000_DF6A / 0x1DF6A)
    if(ZeroFlag) {
      goto label_1000_DF74_1DF74;
    }
    // OR AH,byte ptr [DI] (1000_DF6C / 0x1DF6C)
    // AH |= UInt8[DS, DI];
    AH = Alu.Or8(AH, UInt8[DS, DI]);
    // ADD DX,word ptr [DI + 0x2] (1000_DF6E / 0x1DF6E)
    // DX += UInt16[DS, (ushort)(DI + 0x2)];
    DX = Alu.Add16(DX, UInt16[DS, (ushort)(DI + 0x2)]);
    // ADD BX,word ptr [DI + 0x4] (1000_DF71 / 0x1DF71)
    // BX += UInt16[DS, (ushort)(DI + 0x4)];
    BX = Alu.Add16(BX, UInt16[DS, (ushort)(DI + 0x4)]);
    label_1000_DF74_1DF74:
    // ADD DI,0x6 (1000_DF74 / 0x1DF74)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    // LOOP 0x1000:df66 (1000_DF77 / 0x1DF77)
    if(--CX != 0) {
      goto label_1000_DF66_1DF66;
    }
    // MOV AL,[0xceba] (1000_DF79 / 0x1DF79)
    AL = UInt8[DS, 0xCEBA];
    // OR AL,byte ptr [0xce9d] (1000_DF7C / 0x1DF7C)
    // AL |= UInt8[DS, 0xCE9D];
    AL = Alu.Or8(AL, UInt8[DS, 0xCE9D]);
    // OR AL,byte ptr [0xcee6] (1000_DF80 / 0x1DF80)
    // AL |= UInt8[DS, 0xCEE6];
    AL = Alu.Or8(AL, UInt8[DS, 0xCEE6]);
    // AND AL,0x1 (1000_DF84 / 0x1DF84)
    // AL &= 0x1;
    AL = Alu.And8(AL, 0x1);
    // MOV AH,AL (1000_DF86 / 0x1DF86)
    AH = AL;
    // XCHG byte ptr [0xdc57],AL (1000_DF88 / 0x1DF88)
    byte tmp_1000_DF88 = UInt8[DS, 0xDC57];
    UInt8[DS, 0xDC57] = AL;
    AL = tmp_1000_DF88;
    // NOT AL (1000_DF8C / 0x1DF8C)
    AL = (byte)~AL;
    // AND AL,byte ptr [0xdc34] (1000_DF8E / 0x1DF8E)
    // AL &= UInt8[DS, 0xDC34];
    AL = Alu.And8(AL, UInt8[DS, 0xDC34]);
    // OR AL,AH (1000_DF92 / 0x1DF92)
    // AL |= AH;
    AL = Alu.Or8(AL, AH);
    // MOV [0xdc34],AL (1000_DF94 / 0x1DF94)
    UInt8[DS, 0xDC34] = AL;
    // MOV AX,DX (1000_DF97 / 0x1DF97)
    AX = DX;
    // OR AX,BX (1000_DF99 / 0x1DF99)
    // AX |= BX;
    AX = Alu.Or16(AX, BX);
    // JNZ 0x1000:dfb7 (1000_DF9B / 0x1DF9B)
    if(!ZeroFlag) {
      goto label_1000_DFB7_1DFB7;
    }
    // MOV [0xdc51],AX (1000_DF9D / 0x1DF9D)
    UInt16[DS, 0xDC51] = AX;
    // MOV [0xdc53],AX (1000_DFA0 / 0x1DFA0)
    UInt16[DS, 0xDC53] = AX;
    // MOV [0xdc55],AX (1000_DFA3 / 0x1DFA3)
    UInt16[DS, 0xDC55] = AX;
    label_1000_DFA6_1DFA6:
    // RET  (1000_DFA6 / 0x1DFA6)
    return NearRet();
    label_1000_DFB7_1DFB7:
    // CMP byte ptr [0xce9e],0xff (1000_DFB7 / 0x1DFB7)
    Alu.Sub8(UInt8[DS, 0xCE9E], 0xFF);
    // JNZ 0x1000:dfc1 (1000_DFBC / 0x1DFBC)
    if(!ZeroFlag) {
      goto label_1000_DFC1_1DFC1;
    }
    // JMP 0x1000:e1d1 (1000_DFBE / 0x1DFBE)
    goto label_1000_E1D1_1E1D1;
    label_1000_DFC1_1DFC1:
    // MOV DI,0xdfa9 (1000_DFC1 / 0x1DFC1)
    DI = 0xDFA9;
    // OR DL,DL (1000_DFC4 / 0x1DFC4)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x1000:dfdb (1000_DFC6 / 0x1DFC6)
    if(ZeroFlag) {
      goto label_1000_DFDB_1DFDB;
    }
    // JNS 0x1000:dfcd (1000_DFC8 / 0x1DFC8)
    if(!SignFlag) {
      goto label_1000_DFCD_1DFCD;
    }
    // ADD DI,0x6 (1000_DFCA / 0x1DFCA)
    // DI += 0x6;
    DI = Alu.Add16(DI, 0x6);
    label_1000_DFCD_1DFCD:
    // OR BL,BL (1000_DFCD / 0x1DFCD)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JZ 0x1000:dfe7 (1000_DFCF / 0x1DFCF)
    if(ZeroFlag) {
      goto label_1000_DFE7_1DFE7;
    }
    // LEA DI,[DI + -0x2] (1000_DFD1 / 0x1DFD1)
    DI = (ushort)(DI - 0x2);
    // JS 0x1000:dfe7 (1000_DFD4 / 0x1DFD4)
    if(SignFlag) {
      goto label_1000_DFE7_1DFE7;
    }
    // ADD DI,0x4 (1000_DFD6 / 0x1DFD6)
    // DI += 0x4;
    DI = Alu.Add16(DI, 0x4);
    // JMP 0x1000:dfe7 (1000_DFD9 / 0x1DFD9)
    goto label_1000_DFE7_1DFE7;
    label_1000_DFDB_1DFDB:
    // MOV DI,0xdfb3 (1000_DFDB / 0x1DFDB)
    DI = 0xDFB3;
    // OR BL,BL (1000_DFDE / 0x1DFDE)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JZ 0x1000:dfa6 (1000_DFE0 / 0x1DFE0)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_DFA6 / 0x1DFA6)
      return NearRet();
    }
    // JS 0x1000:dfe7 (1000_DFE2 / 0x1DFE2)
    if(SignFlag) {
      goto label_1000_DFE7_1DFE7;
    }
    // ADD DI,0x2 (1000_DFE4 / 0x1DFE4)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    label_1000_DFE7_1DFE7:
    // MOV BX,word ptr CS:[DI] (1000_DFE7 / 0x1DFE7)
    BX = UInt16[cs1, DI];
    // SUB SP,0xa (1000_DFEA / 0x1DFEA)
    // SP -= 0xA;
    SP = Alu.Sub16(SP, 0xA);
    // MOV BP,SP (1000_DFED / 0x1DFED)
    BP = SP;
    // MOV word ptr [BP + 0x0],BX (1000_DFEF / 0x1DFEF)
    UInt16[SS, BP] = BX;
    // CALL 0x1000:de4e (1000_DFF2 / 0x1DFF2)
    NearCall(cs1, 0xDFF5, SetCEE8To0_1000_DE4E_1DE4E);
    // MOV DX,word ptr [0xdc36] (1000_DFF5 / 0x1DFF5)
    DX = UInt16[DS, 0xDC36];
    // MOV BX,word ptr [0xdc38] (1000_DFF9 / 0x1DFF9)
    BX = UInt16[DS, 0xDC38];
    // MOV DI,0x1ae4 (1000_DFFD / 0x1DFFD)
    DI = 0x1AE4;
    // MOV CX,word ptr [DI] (1000_E000 / 0x1E000)
    CX = UInt16[DS, DI];
    // MOV word ptr [BP + 0x2],0x8000 (1000_E002 / 0x1E002)
    UInt16[SS, (ushort)(BP + 0x2)] = 0x8000;
    // ADD DI,0x2 (1000_E007 / 0x1E007)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    label_1000_E00A_1E00A:
    // TEST byte ptr [DI + 0x8],0x80 (1000_E00A / 0x1E00A)
    Alu.And8(UInt8[DS, (ushort)(DI + 0x8)], 0x80);
    // JZ 0x1000:e02c (1000_E00E / 0x1E00E)
    if(ZeroFlag) {
      goto label_1000_E02C_1E02C;
    }
    // CALL 0x1000:d6fe (1000_E010 / 0x1E010)
    NearCall(cs1, 0xE013, unknown_1000_D6FE_1D6FE);
    // JC 0x1000:e02c (1000_E013 / 0x1E013)
    if(CarryFlag) {
      goto label_1000_E02C_1E02C;
    }
    // CALL 0x1000:e159 (1000_E015 / 0x1E015)
    throw FailAsUntested("Could not find a valid function at address 1000_E159 / 0x1E159");
    // CALL word ptr [BP + 0x0] (1000_E018 / 0x1E018)
    // Indirect call to word ptr [BP + 0x0], generating possible targets from emulator records
    uint targetAddress_1000_E018 = (uint)(UInt16[SS, BP]);
    switch(targetAddress_1000_E018) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E018);
        break;
    }
    // CMP AX,word ptr [BP + 0x2] (1000_E01B / 0x1E01B)
    Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x2)]);
    // JNC 0x1000:e02c (1000_E01E / 0x1E01E)
    if(!CarryFlag) {
      goto label_1000_E02C_1E02C;
    }
    // MOV word ptr [BP + 0x2],AX (1000_E020 / 0x1E020)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // CALL 0x1000:e159 (1000_E023 / 0x1E023)
    throw FailAsUntested("Could not find a valid function at address 1000_E159 / 0x1E159");
    // MOV word ptr [BP + 0x4],AX (1000_E026 / 0x1E026)
    UInt16[SS, (ushort)(BP + 0x4)] = AX;
    // MOV word ptr [BP + 0x6],SI (1000_E029 / 0x1E029)
    UInt16[SS, (ushort)(BP + 0x6)] = SI;
    label_1000_E02C_1E02C:
    // ADD DI,0xe (1000_E02C / 0x1E02C)
    // DI += 0xE;
    DI = Alu.Add16(DI, 0xE);
    // LOOP 0x1000:e00a (1000_E02F / 0x1E02F)
    if(--CX != 0) {
      goto label_1000_E00A_1E00A;
    }
    // CALL 0x1000:e068 (1000_E031 / 0x1E031)
    throw FailAsUntested("Could not find a valid function at address 1000_E068 / 0x1E068");
    // CALL 0x1000:e0a2 (1000_E034 / 0x1E034)
    throw FailAsUntested("Could not find a valid function at address 1000_E0A2 / 0x1E0A2");
    // CALL 0x1000:e0db (1000_E037 / 0x1E037)
    throw FailAsUntested("Could not find a valid function at address 1000_E0DB / 0x1E0DB");
    // CALL 0x1000:e11c (1000_E03A / 0x1E03A)
    throw FailAsUntested("Could not find a valid function at address 1000_E11C / 0x1E11C");
    // CMP word ptr [BP + 0x2],0x0 (1000_E03D / 0x1E03D)
    Alu.Sub16(UInt16[SS, (ushort)(BP + 0x2)], 0x0);
    // JS 0x1000:e064 (1000_E041 / 0x1E041)
    if(SignFlag) {
      goto label_1000_E064_1E064;
    }
    // MOV byte ptr [0xceba],0x0 (1000_E043 / 0x1E043)
    UInt8[DS, 0xCEBA] = 0x0;
    // OR byte ptr [0xce9d],0x0 (1000_E048 / 0x1E048)
    // UInt8[DS, 0xCE9D] |= 0x0;
    UInt8[DS, 0xCE9D] = Alu.Or8(UInt8[DS, 0xCE9D], 0x0);
    // MOV AX,word ptr [BP + 0x4] (1000_E04D / 0x1E04D)
    AX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV [0xdc4c],AX (1000_E050 / 0x1E050)
    UInt16[DS, 0xDC4C] = AX;
    // MOV AX,word ptr [BP + 0x6] (1000_E053 / 0x1E053)
    AX = UInt16[SS, (ushort)(BP + 0x6)];
    // MOV [0xdc4e],AX (1000_E056 / 0x1E056)
    UInt16[DS, 0xDC4E] = AX;
    // MOV byte ptr [0xdc4b],0x64 (1000_E059 / 0x1E059)
    UInt8[DS, 0xDC4B] = 0x64;
    // MOV AX,[0xce7a] (1000_E05E / 0x1E05E)
    AX = UInt16[DS, 0xCE7A];
    // MOV [0xdc4a],AL (1000_E061 / 0x1E061)
    UInt8[DS, 0xDC4A] = AL;
    label_1000_E064_1E064:
    // ADD SP,0xa (1000_E064 / 0x1E064)
    // SP += 0xA;
    SP = Alu.Add16(SP, 0xA);
    // RET  (1000_E067 / 0x1E067)
    return NearRet();
    label_1000_E1D1_1E1D1:
    // OR DL,DL (1000_E1D1 / 0x1E1D1)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x1000:e1f3 (1000_E1D3 / 0x1E1D3)
    if(ZeroFlag) {
      goto label_1000_E1F3_1E1F3;
    }
    // MOV AX,[0xdc51] (1000_E1D5 / 0x1E1D5)
    AX = UInt16[DS, 0xDC51];
    // OR AX,AX (1000_E1D8 / 0x1E1D8)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:e1de (1000_E1DA / 0x1E1DA)
    if(!SignFlag) {
      goto label_1000_E1DE_1E1DE;
    }
    // NEG AX (1000_E1DC / 0x1E1DC)
    AX = Alu.Sub16(0, AX);
    label_1000_E1DE_1E1DE:
    // CMP AX,0x4 (1000_E1DE / 0x1E1DE)
    Alu.Sub16(AX, 0x4);
    // JC 0x1000:e1f3 (1000_E1E1 / 0x1E1E1)
    if(CarryFlag) {
      goto label_1000_E1F3_1E1F3;
    }
    // ADD DL,DL (1000_E1E3 / 0x1E1E3)
    // DL += DL;
    DL = Alu.Add8(DL, DL);
    // CMP AX,0xc (1000_E1E5 / 0x1E1E5)
    Alu.Sub16(AX, 0xC);
    // JC 0x1000:e1f3 (1000_E1E8 / 0x1E1E8)
    if(CarryFlag) {
      goto label_1000_E1F3_1E1F3;
    }
    // ADD DL,DL (1000_E1EA / 0x1E1EA)
    // DL += DL;
    DL = Alu.Add8(DL, DL);
    // CMP AX,0x24 (1000_E1EC / 0x1E1EC)
    Alu.Sub16(AX, 0x24);
    // JC 0x1000:e1f3 (1000_E1EF / 0x1E1EF)
    if(CarryFlag) {
      goto label_1000_E1F3_1E1F3;
    }
    // ADD DL,DL (1000_E1F1 / 0x1E1F1)
    // DL += DL;
    DL = Alu.Add8(DL, DL);
    label_1000_E1F3_1E1F3:
    // OR BL,BL (1000_E1F3 / 0x1E1F3)
    // BL |= BL;
    BL = Alu.Or8(BL, BL);
    // JZ 0x1000:e213 (1000_E1F5 / 0x1E1F5)
    if(ZeroFlag) {
      goto label_1000_E213_1E213;
    }
    // MOV AX,[0xdc53] (1000_E1F7 / 0x1E1F7)
    AX = UInt16[DS, 0xDC53];
    // JNS 0x1000:e1fe (1000_E1FA / 0x1E1FA)
    if(!SignFlag) {
      goto label_1000_E1FE_1E1FE;
    }
    // NEG AX (1000_E1FC / 0x1E1FC)
    AX = Alu.Sub16(0, AX);
    label_1000_E1FE_1E1FE:
    // CMP AX,0x3 (1000_E1FE / 0x1E1FE)
    Alu.Sub16(AX, 0x3);
    // JC 0x1000:e213 (1000_E201 / 0x1E201)
    if(CarryFlag) {
      goto label_1000_E213_1E213;
    }
    // ADD BL,BL (1000_E203 / 0x1E203)
    // BL += BL;
    BL = Alu.Add8(BL, BL);
    // CMP AX,0xa (1000_E205 / 0x1E205)
    Alu.Sub16(AX, 0xA);
    // JC 0x1000:e213 (1000_E208 / 0x1E208)
    if(CarryFlag) {
      goto label_1000_E213_1E213;
    }
    // ADD BL,BL (1000_E20A / 0x1E20A)
    // BL += BL;
    BL = Alu.Add8(BL, BL);
    // CMP AX,0x1c (1000_E20C / 0x1E20C)
    Alu.Sub16(AX, 0x1C);
    // JC 0x1000:e213 (1000_E20F / 0x1E20F)
    if(CarryFlag) {
      goto label_1000_E213_1E213;
    }
    // ADD BL,BL (1000_E211 / 0x1E211)
    // BL += BL;
    BL = Alu.Add8(BL, BL);
    label_1000_E213_1E213:
    // MOV AL,[0xce7a] (1000_E213 / 0x1E213)
    AL = UInt8[DS, 0xCE7A];
    // MOV AH,AL (1000_E216 / 0x1E216)
    AH = AL;
    // XCHG byte ptr [0xdc50],AH (1000_E218 / 0x1E218)
    byte tmp_1000_E218 = UInt8[DS, 0xDC50];
    UInt8[DS, 0xDC50] = AH;
    AH = tmp_1000_E218;
    // SUB AL,AH (1000_E21C / 0x1E21C)
    // AL -= AH;
    AL = Alu.Sub8(AL, AH);
    // CMP AL,0x8 (1000_E21E / 0x1E21E)
    Alu.Sub8(AL, 0x8);
    // JC 0x1000:e224 (1000_E220 / 0x1E220)
    if(CarryFlag) {
      goto label_1000_E224_1E224;
    }
    // MOV AL,0x8 (1000_E222 / 0x1E222)
    AL = 0x8;
    label_1000_E224_1E224:
    // MOV CL,AL (1000_E224 / 0x1E224)
    CL = AL;
    // MOV SI,0xdc55 (1000_E226 / 0x1E226)
    SI = 0xDC55;
    // MOV AL,DL (1000_E229 / 0x1E229)
    AL = DL;
    // CALL 0x1000:e243 (1000_E22B / 0x1E22B)
    throw FailAsUntested("Could not find a valid function at address 1000_E243 / 0x1E243");
    // MOV DX,AX (1000_E22E / 0x1E22E)
    DX = AX;
    // ADD word ptr [0xdc51],AX (1000_E230 / 0x1E230)
    // UInt16[DS, 0xDC51] += AX;
    UInt16[DS, 0xDC51] = Alu.Add16(UInt16[DS, 0xDC51], AX);
    // INC SI (1000_E234 / 0x1E234)
    SI = Alu.Inc16(SI);
    // MOV AL,BL (1000_E235 / 0x1E235)
    AL = BL;
    // CALL 0x1000:e243 (1000_E237 / 0x1E237)
    throw FailAsUntested("Could not find a valid function at address 1000_E243 / 0x1E243");
    // MOV BX,AX (1000_E23A / 0x1E23A)
    BX = AX;
    // ADD word ptr [0xdc53],AX (1000_E23C / 0x1E23C)
    // UInt16[DS, 0xDC53] += AX;
    UInt16[DS, 0xDC53] = Alu.Add16(UInt16[DS, 0xDC53], AX);
    // JMP 0x1000:daaf (1000_E240 / 0x1E240)
    goto label_1000_DAAF_1DAAF;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x1E243");
  }
  
  public Action NoOp_1000_E26F_1E26F(int gotoTarget) {
    label_1000_E26F_1E26F:
    // RET  (1000_E26F / 0x1E26F)
    return NearRet();
  }
  
  public Action PushAll_1000_E270_1E270(int gotoTarget) {
    label_1000_E270_1E270:
    // PUSH BX (1000_E270 / 0x1E270)
    Stack.Push(BX);
    // PUSH CX (1000_E271 / 0x1E271)
    Stack.Push(CX);
    // PUSH DX (1000_E272 / 0x1E272)
    Stack.Push(DX);
    // PUSH SI (1000_E273 / 0x1E273)
    Stack.Push(SI);
    // PUSH DI (1000_E274 / 0x1E274)
    Stack.Push(DI);
    // PUSH BP (1000_E275 / 0x1E275)
    Stack.Push(BP);
    // MOV BP,SP (1000_E276 / 0x1E276)
    BP = SP;
    // XCHG word ptr [BP + 0xc],AX (1000_E278 / 0x1E278)
    ushort tmp_1000_E278 = UInt16[SS, (ushort)(BP + 0xC)];
    UInt16[SS, (ushort)(BP + 0xC)] = AX;
    AX = tmp_1000_E278;
    // PUSH AX (1000_E27B / 0x1E27B)
    Stack.Push(AX);
    // MOV AX,word ptr [BP + 0xc] (1000_E27C / 0x1E27C)
    AX = UInt16[SS, (ushort)(BP + 0xC)];
    // MOV BP,word ptr [BP + 0x0] (1000_E27F / 0x1E27F)
    BP = UInt16[SS, BP];
    // RET  (1000_E282 / 0x1E282)
    return NearRet();
  }
  
  public Action PopAll_1000_E283_1E283(int gotoTarget) {
    label_1000_E283_1E283:
    // POP AX (1000_E283 / 0x1E283)
    AX = Stack.Pop();
    // MOV BP,SP (1000_E284 / 0x1E284)
    BP = SP;
    // XCHG word ptr [BP + 0xc],AX (1000_E286 / 0x1E286)
    ushort tmp_1000_E286 = UInt16[SS, (ushort)(BP + 0xC)];
    UInt16[SS, (ushort)(BP + 0xC)] = AX;
    AX = tmp_1000_E286;
    // POP BP (1000_E289 / 0x1E289)
    BP = Stack.Pop();
    // POP DI (1000_E28A / 0x1E28A)
    DI = Stack.Pop();
    // POP SI (1000_E28B / 0x1E28B)
    SI = Stack.Pop();
    // POP DX (1000_E28C / 0x1E28C)
    DX = Stack.Pop();
    // POP CX (1000_E28D / 0x1E28D)
    CX = Stack.Pop();
    // POP BX (1000_E28E / 0x1E28E)
    BX = Stack.Pop();
    // RET  (1000_E28F / 0x1E28F)
    return NearRet();
  }
  
  public Action unknown_1000_E290_1E290(int gotoTarget) {
    label_1000_E290_1E290:
    // CALL 0x1000:d04e (1000_E290 / 0x1E290)
    NearCall(cs1, 0xE293, unknown_1000_D04E_1D04E);
    // JMP 0x1000:e297 (1000_E293 / 0x1E293)
    goto label_1000_E297_1E297;
    label_1000_E297_1E297:
    // PUSH CX (1000_E297 / 0x1E297)
    Stack.Push(CX);
    // MOV CX,0x64 (1000_E298 / 0x1E298)
    CX = 0x64;
    // DIV CL (1000_E29B / 0x1E29B)
    Cpu.Div8(CL);
    // ADD AL,0x30 (1000_E29D / 0x1E29D)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    // CMP AL,0x30 (1000_E29F / 0x1E29F)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:e2a7 (1000_E2A1 / 0x1E2A1)
    if(!ZeroFlag) {
      goto label_1000_E2A7_1E2A7;
    }
    // MOV AL,0x20 (1000_E2A3 / 0x1E2A3)
    AL = 0x20;
    // DEC CH (1000_E2A5 / 0x1E2A5)
    CH = Alu.Dec8(CH);
    label_1000_E2A7_1E2A7:
    // CALL word ptr [0x2518] (1000_E2A7 / 0x1E2A7)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_E2A7 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_E2A7) {
      case 0xD12F : NearCall(cs1, 0xE2AB, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E2A7);
        break;
    }
    // MOV AL,AH (1000_E2AB / 0x1E2AB)
    AL = AH;
    // AAM 0xa (1000_E2AD / 0x1E2AD)
    Cpu.Aam(0xA);
    // XCHG AH,AL (1000_E2AF / 0x1E2AF)
    byte tmp_1000_E2AF = AH;
    AH = AL;
    AL = tmp_1000_E2AF;
    // ADD AX,0x3030 (1000_E2B1 / 0x1E2B1)
    // AX += 0x3030;
    AX = Alu.Add16(AX, 0x3030);
    // OR CH,CH (1000_E2B4 / 0x1E2B4)
    // CH |= CH;
    CH = Alu.Or8(CH, CH);
    // JZ 0x1000:e2be (1000_E2B6 / 0x1E2B6)
    if(ZeroFlag) {
      goto label_1000_E2BE_1E2BE;
    }
    // CMP AL,0x30 (1000_E2B8 / 0x1E2B8)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:e2be (1000_E2BA / 0x1E2BA)
    if(!ZeroFlag) {
      goto label_1000_E2BE_1E2BE;
    }
    // MOV AL,0x20 (1000_E2BC / 0x1E2BC)
    AL = 0x20;
    label_1000_E2BE_1E2BE:
    // CALL word ptr [0x2518] (1000_E2BE / 0x1E2BE)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_E2BE = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_E2BE) {
      case 0xD12F : NearCall(cs1, 0xE2C2, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E2BE);
        break;
    }
    // MOV AL,AH (1000_E2C2 / 0x1E2C2)
    AL = AH;
    // CALL word ptr [0x2518] (1000_E2C4 / 0x1E2C4)
    // Indirect call to word ptr [0x2518], generating possible targets from emulator records
    uint targetAddress_1000_E2C4 = (uint)(UInt16[DS, 0x2518]);
    switch(targetAddress_1000_E2C4) {
      case 0xD12F : NearCall(cs1, 0xE2C8, unknown_1000_D12F_1D12F);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E2C4);
        break;
    }
    // POP CX (1000_E2C8 / 0x1E2C8)
    CX = Stack.Pop();
    // RET  (1000_E2C9 / 0x1E2C9)
    return NearRet();
  }
  
  public Action unknown_1000_E2DB_1E2DB(int gotoTarget) {
    label_1000_E2DB_1E2DB:
    // PUSH AX (1000_E2DB / 0x1E2DB)
    Stack.Push(AX);
    // CALL 0x1000:cf70 (1000_E2DC / 0x1E2DC)
    NearCall(cs1, 0xE2DF, unknown_1000_CF70_1CF70);
    // CALL 0x1000:d03c (1000_E2DF / 0x1E2DF)
    NearCall(cs1, 0xE2E2, unknown_1000_D03C_1D03C);
    // POP AX (1000_E2E2 / 0x1E2E2)
    AX = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_E2E3_1E2E3(0);
  }
  
  public Action unknown_1000_E2E3_1E2E3(int gotoTarget) {
    switch(gotoTarget) {
      case 0xE2F6: goto label_1000_E2F6_1E2F6;break;
      case 0xE2FE: goto label_1000_E2FE_1E2FE;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_E2E3_1E2E3:
    // PUSH BX (1000_E2E3 / 0x1E2E3)
    Stack.Push(BX);
    // PUSH CX (1000_E2E4 / 0x1E2E4)
    Stack.Push(CX);
    // MOV CX,0x64 (1000_E2E5 / 0x1E2E5)
    CX = 0x64;
    // MOV BX,CX (1000_E2E8 / 0x1E2E8)
    BX = CX;
    // CMP AX,0x3e8 (1000_E2EA / 0x1E2EA)
    Alu.Sub16(AX, 0x3E8);
    // JC 0x1000:e2f2 (1000_E2ED / 0x1E2ED)
    if(CarryFlag) {
      goto label_1000_E2F2_1E2F2;
    }
    // MOV AX,0x3e7 (1000_E2EF / 0x1E2EF)
    AX = 0x3E7;
    label_1000_E2F2_1E2F2:
    // DIV CL (1000_E2F2 / 0x1E2F2)
    Cpu.Div8(CL);
    // ADD AL,0x30 (1000_E2F4 / 0x1E2F4)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    label_1000_E2F6_1E2F6:
    // CMP AL,0x30 (1000_E2F6 / 0x1E2F6)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:e2fe (1000_E2F8 / 0x1E2F8)
    if(!ZeroFlag) {
      goto label_1000_E2FE_1E2FE;
    }
    // MOV AL,0x20 (1000_E2FA / 0x1E2FA)
    AL = 0x20;
    // XOR BX,BX (1000_E2FC / 0x1E2FC)
    BX = 0;
    label_1000_E2FE_1E2FE:
    // MOV byte ptr ES:[SI + -0x3],AL (1000_E2FE / 0x1E2FE)
    UInt8[ES, (ushort)(SI - 0x3)] = AL;
    // MOV AL,AH (1000_E302 / 0x1E302)
    AL = AH;
    // AAM 0xa (1000_E304 / 0x1E304)
    Cpu.Aam(0xA);
    // XCHG AH,AL (1000_E306 / 0x1E306)
    byte tmp_1000_E306 = AH;
    AH = AL;
    AL = tmp_1000_E306;
    // ADD AX,0x3030 (1000_E308 / 0x1E308)
    // AX += 0x3030;
    AX = Alu.Add16(AX, 0x3030);
    // OR BX,BX (1000_E30B / 0x1E30B)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNZ 0x1000:e315 (1000_E30D / 0x1E30D)
    if(!ZeroFlag) {
      goto label_1000_E315_1E315;
    }
    // CMP AL,0x30 (1000_E30F / 0x1E30F)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:e315 (1000_E311 / 0x1E311)
    if(!ZeroFlag) {
      goto label_1000_E315_1E315;
    }
    // MOV AL,0x20 (1000_E313 / 0x1E313)
    AL = 0x20;
    label_1000_E315_1E315:
    // MOV word ptr ES:[SI + -0x2],AX (1000_E315 / 0x1E315)
    UInt16[ES, (ushort)(SI - 0x2)] = AX;
    // POP CX (1000_E319 / 0x1E319)
    CX = Stack.Pop();
    // POP BX (1000_E31A / 0x1E31A)
    BX = Stack.Pop();
    // RET  (1000_E31B / 0x1E31B)
    return NearRet();
  }
  
  public Action unknown_1000_E31C_1E31C(int gotoTarget) {
    label_1000_E31C_1E31C:
    // PUSH BX (1000_E31C / 0x1E31C)
    Stack.Push(BX);
    // PUSH CX (1000_E31D / 0x1E31D)
    Stack.Push(CX);
    // MOV CX,0x3e8 (1000_E31E / 0x1E31E)
    CX = 0x3E8;
    // MOV BX,CX (1000_E321 / 0x1E321)
    BX = CX;
    // XOR DX,DX (1000_E323 / 0x1E323)
    DX = 0;
    // DIV CX (1000_E325 / 0x1E325)
    Cpu.Div16(CX);
    // AAM 0xa (1000_E327 / 0x1E327)
    Cpu.Aam(0xA);
    // XCHG AH,AL (1000_E329 / 0x1E329)
    byte tmp_1000_E329 = AH;
    AH = AL;
    AL = tmp_1000_E329;
    // ADD AX,0x3030 (1000_E32B / 0x1E32B)
    // AX += 0x3030;
    AX = Alu.Add16(AX, 0x3030);
    // CMP AL,0x30 (1000_E32E / 0x1E32E)
    Alu.Sub8(AL, 0x30);
    // JNZ 0x1000:e33d (1000_E330 / 0x1E330)
    if(!ZeroFlag) {
      goto label_1000_E33D_1E33D;
    }
    // MOV AL,0x20 (1000_E332 / 0x1E332)
    AL = 0x20;
    // CMP AH,0x30 (1000_E334 / 0x1E334)
    Alu.Sub8(AH, 0x30);
    // JNZ 0x1000:e33d (1000_E337 / 0x1E337)
    if(!ZeroFlag) {
      goto label_1000_E33D_1E33D;
    }
    // MOV AH,AL (1000_E339 / 0x1E339)
    AH = AL;
    // XOR BX,BX (1000_E33B / 0x1E33B)
    BX = 0;
    label_1000_E33D_1E33D:
    // MOV word ptr ES:[SI + -0x5],AX (1000_E33D / 0x1E33D)
    UInt16[ES, (ushort)(SI - 0x5)] = AX;
    // MOV AX,DX (1000_E341 / 0x1E341)
    AX = DX;
    // XOR DX,DX (1000_E343 / 0x1E343)
    DX = 0;
    // MOV CX,0x64 (1000_E345 / 0x1E345)
    CX = 0x64;
    // DIV CL (1000_E348 / 0x1E348)
    Cpu.Div8(CL);
    // ADD AL,0x30 (1000_E34A / 0x1E34A)
    // AL += 0x30;
    AL = Alu.Add8(AL, 0x30);
    // OR BX,BX (1000_E34C / 0x1E34C)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNZ 0x1000:e2fe (1000_E34E / 0x1E34E)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return unknown_1000_E2E3_1E2E3(0x1E2FE - cs1 * 0x10);
    }
    // INC BX (1000_E350 / 0x1E350)
    BX = Alu.Inc16(BX);
    // JMP 0x1000:e2f6 (1000_E351 / 0x1E351)
    // Jump converted to non entry function call
    return unknown_1000_E2E3_1E2E3(0x1E2F6 - cs1 * 0x10);
  }
  
  public Action unknown_1000_E353_1E353(int gotoTarget) {
    label_1000_E353_1E353:
    // PUSH AX (1000_E353 / 0x1E353)
    Stack.Push(AX);
    // PUSH word ptr [0xce7a] (1000_E354 / 0x1E354)
    Stack.Push(UInt16[DS, 0xCE7A]);
    // CALL BP (1000_E358 / 0x1E358)
    // Indirect call to BP, generating possible targets from emulator records
    uint targetAddress_1000_E358 = (uint)(BP);
    switch(targetAddress_1000_E358) {
      case 0x4821 : NearCall(cs1, 0xE35A, unknown_1000_4821_14821);
        break;
      case 0x99F6 : NearCall(cs1, 0xE35A, unknown_1000_99F6_199F6);
        break;
      case 0x27B6 : NearCall(cs1, 0xE35A, unknown_1000_27B6_127B6);
        break;
      case 0xA44 : NearCall(cs1, 0xE35A, unknown_1000_0A44_10A44);
        break;
      case 0x26AC : NearCall(cs1, 0xE35A, unknown_1000_26AC_126AC);
        break;
      case 0x391D : NearCall(cs1, 0xE35A, unknown_1000_391D_1391D);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E358);
        break;
    }
    // POP BX (1000_E35A / 0x1E35A)
    BX = Stack.Pop();
    // POP BP (1000_E35B / 0x1E35B)
    BP = Stack.Pop();
    label_1000_E35C_1E35C:
    // CMP byte ptr [0x227d],0x0 (1000_E35C / 0x1E35C)
    Alu.Sub8(UInt8[DS, 0x227D], 0x0);
    // JZ 0x1000:e378 (1000_E361 / 0x1E361)
    if(ZeroFlag) {
      goto label_1000_E378_1E378;
    }
    // PUSH BX (1000_E363 / 0x1E363)
    Stack.Push(BX);
    // PUSH CX (1000_E364 / 0x1E364)
    Stack.Push(CX);
    // PUSH DX (1000_E365 / 0x1E365)
    Stack.Push(DX);
    // PUSH SI (1000_E366 / 0x1E366)
    Stack.Push(SI);
    // PUSH DI (1000_E367 / 0x1E367)
    Stack.Push(DI);
    // PUSH BP (1000_E368 / 0x1E368)
    Stack.Push(BP);
    // PUSH ES (1000_E369 / 0x1E369)
    Stack.Push(ES);
    // CALL 0x1000:dd63 (1000_E36A / 0x1E36A)
    NearCall(cs1, 0xE36D, stc_on_user_input_ida_1000_DD63_1DD63);
    // POP ES (1000_E36D / 0x1E36D)
    ES = Stack.Pop();
    // POP BP (1000_E36E / 0x1E36E)
    BP = Stack.Pop();
    // POP DI (1000_E36F / 0x1E36F)
    DI = Stack.Pop();
    // POP SI (1000_E370 / 0x1E370)
    SI = Stack.Pop();
    // POP DX (1000_E371 / 0x1E371)
    DX = Stack.Pop();
    // POP CX (1000_E372 / 0x1E372)
    CX = Stack.Pop();
    // POP BX (1000_E373 / 0x1E373)
    BX = Stack.Pop();
    // JC 0x1000:e386 (1000_E374 / 0x1E374)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_E386 / 0x1E386)
      return NearRet();
    }
    // JMP 0x1000:e37b (1000_E376 / 0x1E376)
    goto label_1000_E37B_1E37B;
    label_1000_E378_1E378:
    // CALL 0x1000:de7b (1000_E378 / 0x1E378)
    NearCall(cs1, 0xE37B, unknown_1000_DE7B_1DE7B);
    label_1000_E37B_1E37B:
    // MOV AX,[0xce7a] (1000_E37B / 0x1E37B)
    AX = UInt16[DS, 0xCE7A];
    // SUB AX,BX (1000_E37E / 0x1E37E)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,BP (1000_E380 / 0x1E380)
    Alu.Sub16(AX, BP);
    // JC 0x1000:e35c (1000_E382 / 0x1E382)
    if(CarryFlag) {
      goto label_1000_E35C_1E35C;
    }
    // OR AL,0x1 (1000_E384 / 0x1E384)
    // AL |= 0x1;
    AL = Alu.Or8(AL, 0x1);
    label_1000_E386_1E386:
    // RET  (1000_E386 / 0x1E386)
    return NearRet();
  }
  
  public Action unknown_1000_E387_1E387(int gotoTarget) {
    label_1000_E387_1E387:
    // PUSH AX (1000_E387 / 0x1E387)
    Stack.Push(AX);
    // PUSH CX (1000_E388 / 0x1E388)
    Stack.Push(CX);
    // MOV CX,AX (1000_E389 / 0x1E389)
    CX = AX;
    // JCXZ 0x1000:e39d (1000_E38B / 0x1E38B)
    if(CX == 0) {
      goto label_1000_E39D_1E39D;
    }
    // PUSHF  (1000_E38D / 0x1E38D)
    Stack.Push(FlagRegister);
    // STI  (1000_E38E / 0x1E38E)
    InterruptFlag = true;
    label_1000_E38F_1E38F:
    // MOV AX,SS:[0xce7a] (1000_E38F / 0x1E38F)
    AX = UInt16[SS, 0xCE7A];
    label_1000_E393_1E393:
    // CMP AX,word ptr SS:[0xce7a] (1000_E393 / 0x1E393)
    Alu.Sub16(AX, UInt16[SS, 0xCE7A]);
    // JZ 0x1000:e393 (1000_E398 / 0x1E398)
    if(ZeroFlag) {
      goto label_1000_E393_1E393;
    }
    // LOOP 0x1000:e38f (1000_E39A / 0x1E39A)
    if(--CX != 0) {
      goto label_1000_E38F_1E38F;
    }
    // POPF  (1000_E39C / 0x1E39C)
    FlagRegister = Stack.Pop();
    label_1000_E39D_1E39D:
    // POP CX (1000_E39D / 0x1E39D)
    CX = Stack.Pop();
    // POP AX (1000_E39E / 0x1E39E)
    AX = Stack.Pop();
    // RET  (1000_E39F / 0x1E39F)
    return NearRet();
  }
  
  public Action unknown_1000_E3A0_1E3A0(int gotoTarget) {
    label_1000_E3A0_1E3A0:
    // MOV CX,AX (1000_E3A0 / 0x1E3A0)
    CX = AX;
    label_1000_E3A2_1E3A2:
    // MOV AX,[0xce7a] (1000_E3A2 / 0x1E3A2)
    AX = UInt16[DS, 0xCE7A];
    label_1000_E3A5_1E3A5:
    // CMP AX,word ptr [0xce7a] (1000_E3A5 / 0x1E3A5)
    Alu.Sub16(AX, UInt16[DS, 0xCE7A]);
    // JZ 0x1000:e3a5 (1000_E3A9 / 0x1E3A9)
    if(ZeroFlag) {
      goto label_1000_E3A5_1E3A5;
    }
    // CALL 0x1000:e270 (1000_E3AB / 0x1E3AB)
    NearCall(cs1, 0xE3AE, PushAll_1000_E270_1E270);
    // CALL 0x1000:d9d2 (1000_E3AE / 0x1E3AE)
    NearCall(cs1, 0xE3B1, unknown_1000_D9D2_1D9D2);
    // CALL 0x1000:e283 (1000_E3B1 / 0x1E3B1)
    NearCall(cs1, 0xE3B4, PopAll_1000_E283_1E283);
    // LOOP 0x1000:e3a2 (1000_E3B4 / 0x1E3B4)
    if(--CX != 0) {
      goto label_1000_E3A2_1E3A2;
    }
    // RET  (1000_E3B6 / 0x1E3B6)
    return NearRet();
  }
  
  public Action unknown_1000_E3B7_1E3B7(int gotoTarget) {
    switch(gotoTarget) {
      case 0xE3B7: goto label_1000_E3B7_1E3B7;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_E3B7_1E3B7:
    // PUSH DX (1000_E3B7 / 0x1E3B7)
    Stack.Push(DX);
    // MOV AX,[0xd824] (1000_E3B8 / 0x1E3B8)
    AX = UInt16[DS, 0xD824];
    // MOV DX,0xe56d (1000_E3BB / 0x1E3BB)
    DX = 0xE56D;
    // MUL DX (1000_E3BE / 0x1E3BE)
    Cpu.Mul16(DX);
    // INC AX (1000_E3C0 / 0x1E3C0)
    AX = Alu.Inc16(AX);
    // MOV [0xd824],AX (1000_E3C1 / 0x1E3C1)
    UInt16[DS, 0xD824] = AX;
    // MOV AL,AH (1000_E3C4 / 0x1E3C4)
    AL = AH;
    // MOV AH,DL (1000_E3C6 / 0x1E3C6)
    AH = DL;
    // AND AX,BX (1000_E3C8 / 0x1E3C8)
    // AX &= BX;
    AX = Alu.And16(AX, BX);
    // POP DX (1000_E3CA / 0x1E3CA)
    DX = Stack.Pop();
    // RET  (1000_E3CB / 0x1E3CB)
    return NearRet();
  }
  
  public Action unknown_1000_E3CC_1E3CC(int gotoTarget) {
    label_1000_E3CC_1E3CC:
    // PUSH DX (1000_E3CC / 0x1E3CC)
    Stack.Push(DX);
    // MOV AX,[0xd826] (1000_E3CD / 0x1E3CD)
    AX = UInt16[DS, 0xD826];
    // MOV DX,0xcbd1 (1000_E3D0 / 0x1E3D0)
    DX = 0xCBD1;
    // MUL DX (1000_E3D3 / 0x1E3D3)
    Cpu.Mul16(DX);
    // INC AX (1000_E3D5 / 0x1E3D5)
    AX = Alu.Inc16(AX);
    // MOV [0xd826],AX (1000_E3D6 / 0x1E3D6)
    UInt16[DS, 0xD826] = AX;
    // MOV AL,AH (1000_E3D9 / 0x1E3D9)
    AL = AH;
    // MOV AH,DL (1000_E3DB / 0x1E3DB)
    AH = DL;
    // POP DX (1000_E3DD / 0x1E3DD)
    DX = Stack.Pop();
    // RET  (1000_E3DE / 0x1E3DE)
    return NearRet();
  }
  
  public Action unknown_1000_E3DF_1E3DF(int gotoTarget) {
    label_1000_E3DF_1E3DF:
    // PUSH CX (1000_E3DF / 0x1E3DF)
    Stack.Push(CX);
    // PUSH DX (1000_E3E0 / 0x1E3E0)
    Stack.Push(DX);
    // MOV AX,BX (1000_E3E1 / 0x1E3E1)
    AX = BX;
    // OR AX,AX (1000_E3E3 / 0x1E3E3)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:e408 (1000_E3E5 / 0x1E3E5)
    if(ZeroFlag) {
      goto label_1000_E408_1E408;
    }
    // MOV CX,0xffff (1000_E3E7 / 0x1E3E7)
    CX = 0xFFFF;
    label_1000_E3EA_1E3EA:
    // SHL CX,1 (1000_E3EA / 0x1E3EA)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // SHR AX,1 (1000_E3EC / 0x1E3EC)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // JNZ 0x1000:e3ea (1000_E3EE / 0x1E3EE)
    if(!ZeroFlag) {
      goto label_1000_E3EA_1E3EA;
    }
    // NOT CX (1000_E3F0 / 0x1E3F0)
    CX = (ushort)~CX;
    label_1000_E3F2_1E3F2:
    // MOV AX,[0xd828] (1000_E3F2 / 0x1E3F2)
    AX = UInt16[DS, 0xD828];
    // MOV DX,0xcbd1 (1000_E3F5 / 0x1E3F5)
    DX = 0xCBD1;
    // MUL DX (1000_E3F8 / 0x1E3F8)
    Cpu.Mul16(DX);
    // INC AX (1000_E3FA / 0x1E3FA)
    AX = Alu.Inc16(AX);
    // MOV [0xd828],AX (1000_E3FB / 0x1E3FB)
    UInt16[DS, 0xD828] = AX;
    // MOV AL,AH (1000_E3FE / 0x1E3FE)
    AL = AH;
    // MOV AH,DL (1000_E400 / 0x1E400)
    AH = DL;
    // AND AX,CX (1000_E402 / 0x1E402)
    // AX &= CX;
    AX = Alu.And16(AX, CX);
    // CMP AX,BX (1000_E404 / 0x1E404)
    Alu.Sub16(AX, BX);
    // JA 0x1000:e3f2 (1000_E406 / 0x1E406)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_E3F2_1E3F2;
    }
    label_1000_E408_1E408:
    // POP DX (1000_E408 / 0x1E408)
    DX = Stack.Pop();
    // POP CX (1000_E409 / 0x1E409)
    CX = Stack.Pop();
    // RET  (1000_E40A / 0x1E40A)
    return NearRet();
  }
  
  public Action parse_command_line_ida_1000_E4AD_1E4AD(int gotoTarget) {
    label_1000_E4AD_1E4AD:
    // MOV SI,0x80 (1000_E4AD / 0x1E4AD)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x80;
    // LODSB SI (1000_E4B0 / 0x1E4B0)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (1000_E4B1 / 0x1E4B1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    AH = 0;
    // MOV BP,AX (1000_E4B3 / 0x1E4B3)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    BP = AX;
    // ADD BP,SI (1000_E4B5 / 0x1E4B5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // BP += SI;
    BP = Alu.Add16(BP, SI);
    label_1000_E4B7_1E4B7:
    // PUSH CS (1000_E4B7 / 0x1E4B7)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(cs1);
    // POP ES (1000_E4B8 / 0x1E4B8)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    ES = Stack.Pop();
    label_1000_E4B9_1E4B9:
    // CALL 0x1000:e56b (1000_E4B9 / 0x1E4B9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE4BC, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JC 0x1000:e4e5 (1000_E4BC / 0x1E4BC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_E4E5 / 0x1E4E5)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // JZ 0x1000:e4b9 (1000_E4BE / 0x1E4BE)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      goto label_1000_E4B9_1E4B9;
    }
    // MOV DL,AL (1000_E4C0 / 0x1E4C0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    DL = AL;
    // CALL 0x1000:e56b (1000_E4C2 / 0x1E4C2)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE4C5, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JBE 0x1000:e542 (1000_E4C5 / 0x1E4C5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E542_1E542;
    }
    // MOV AH,AL (1000_E4C7 / 0x1E4C7)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AH = AL;
    // CALL 0x1000:e56b (1000_E4C9 / 0x1E4C9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE4CC, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JBE 0x1000:e542 (1000_E4CC / 0x1E4CC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E542_1E542;
    }
    // XCHG DL,AL (1000_E4CE / 0x1E4CE)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    byte tmp_1000_E4CE = DL;
    DL = AL;
    AL = tmp_1000_E4CE;
    // MOV DI,0xe40c (1000_E4D0 / 0x1E4D0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    DI = 0xE40C;
    // MOV CX,0x17 (1000_E4D3 / 0x1E4D3)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x17;
    label_1000_E4D6_1E4D6:
    // SCASW ES:DI (1000_E4D6 / 0x1E4D6)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(AX, UInt16[ES, DI]);
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // JNZ 0x1000:e4de (1000_E4D7 / 0x1E4D7)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(!ZeroFlag) {
      goto label_1000_E4DE_1E4DE;
    }
    // CMP DL,byte ptr ES:[DI] (1000_E4D9 / 0x1E4D9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(DL, UInt8[ES, DI]);
    // JZ 0x1000:e4e6 (1000_E4DC / 0x1E4DC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(ZeroFlag) {
      goto label_1000_E4E6_1E4E6;
    }
    label_1000_E4DE_1E4DE:
    // ADD DI,0x5 (1000_E4DE / 0x1E4DE)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // DI += 0x5;
    DI = Alu.Add16(DI, 0x5);
    // LOOP 0x1000:e4d6 (1000_E4E1 / 0x1E4E1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(--CX != 0) {
      goto label_1000_E4D6_1E4D6;
    }
    // JMP 0x1000:e542 (1000_E4E3 / 0x1E4E3)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E542_1E542;
    label_1000_E4E5_1E4E5:
    // RET  (1000_E4E5 / 0x1E4E5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    return NearRet();
    label_1000_E4E6_1E4E6:
    // MOV AX,0x1f4b (1000_E4E6 / 0x1E4E6)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x1F4B;
    // MOV ES,AX (1000_E4E9 / 0x1E4E9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    ES = AX;
    // MOV BL,byte ptr CS:[DI + 0x1] (1000_E4EB / 0x1E4EB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F8_149F8
    BL = UInt8[cs1, (ushort)(DI + 0x1)];
    // XOR BH,BH (1000_E4EF / 0x1E4EF)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    BH = 0;
    // ADD BX,0x2942 (1000_E4F1 / 0x1E4F1)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // BX += 0x2942;
    BX = Alu.Add16(BX, 0x2942);
    // MOV AL,byte ptr CS:[DI + 0x2] (1000_E4F5 / 0x1E4F5)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[cs1, (ushort)(DI + 0x2)];
    // OR byte ptr ES:[BX],AL (1000_E4F9 / 0x1E4F9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // UInt8[ES, BX] |= AL;
    UInt8[ES, BX] = Alu.Or8(UInt8[ES, BX], AL);
    // MOV BX,word ptr CS:[DI + 0x3] (1000_E4FC / 0x1E4FC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    BX = UInt16[cs1, (ushort)(DI + 0x3)];
    // OR BX,BX (1000_E500 / 0x1E500)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:e542 (1000_E502 / 0x1E502)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      goto label_1000_E542_1E542;
    }
    // CALL 0x1000:e56b (1000_E504 / 0x1E504)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE507, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JC 0x1000:e4e5 (1000_E507 / 0x1E507)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_E4E5 / 0x1E4E5)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // JZ 0x1000:e542 (1000_E509 / 0x1E509)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      goto label_1000_E542_1E542;
    }
    // DEC SI (1000_E50B / 0x1E50B)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = Alu.Dec16(SI);
    // CMP BX,0x3826 (1000_E50C / 0x1E50C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(BX, 0x3826);
    // JZ 0x1000:e54d (1000_E510 / 0x1E510)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(ZeroFlag) {
      goto label_1000_E54D_1E54D;
    }
    label_1000_E512_1E512:
    // XOR DX,DX (1000_E512 / 0x1E512)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    DX = 0;
    label_1000_E514_1E514:
    // CALL 0x1000:e56b (1000_E514 / 0x1E514)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE517, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // MOV AH,AL (1000_E517 / 0x1E517)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AH = AL;
    // JBE 0x1000:e537 (1000_E519 / 0x1E519)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E537_1E537;
    }
    // SUB AL,0x30 (1000_E51B / 0x1E51B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AL -= 0x30;
    AL = Alu.Sub8(AL, 0x30);
    // JC 0x1000:e537 (1000_E51D / 0x1E51D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E537_1E537;
    }
    // CMP AL,0x9 (1000_E51F / 0x1E51F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(AL, 0x9);
    // JBE 0x1000:e52b (1000_E521 / 0x1E521)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E52B_1E52B;
    }
    // SUB AL,0x7 (1000_E523 / 0x1E523)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AL -= 0x7;
    AL = Alu.Sub8(AL, 0x7);
    // JC 0x1000:e537 (1000_E525 / 0x1E525)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E537_1E537;
    }
    // CMP AL,0xf (1000_E527 / 0x1E527)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(AL, 0xF);
    // JA 0x1000:e537 (1000_E529 / 0x1E529)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_E537_1E537;
    }
    label_1000_E52B_1E52B:
    // SHL DX,1 (1000_E52B / 0x1E52B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_E52D / 0x1E52D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_E52F / 0x1E52F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // SHL DX,1 (1000_E531 / 0x1E531)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // OR DL,AL (1000_E533 / 0x1E533)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // DL |= AL;
    DL = Alu.Or8(DL, AL);
    // JMP 0x1000:e514 (1000_E535 / 0x1E535)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E514_1E514;
    label_1000_E537_1E537:
    // MOV word ptr ES:[BX],DX (1000_E537 / 0x1E537)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, BX] = DX;
    // ADD BX,0x2 (1000_E53A / 0x1E53A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // BX += 0x2;
    BX = Alu.Add16(BX, 0x2);
    // CMP AH,0x20 (1000_E53D / 0x1E53D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(AH, 0x20);
    // JA 0x1000:e512 (1000_E540 / 0x1E540)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_E512_1E512;
    }
    label_1000_E542_1E542:
    // DEC SI (1000_E542 / 0x1E542)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = Alu.Dec16(SI);
    label_1000_E543_1E543:
    // CALL 0x1000:e56b (1000_E543 / 0x1E543)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE546, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JC 0x1000:e4e5 (1000_E546 / 0x1E546)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_E4E5 / 0x1E4E5)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // JNZ 0x1000:e543 (1000_E548 / 0x1E548)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!ZeroFlag) {
      goto label_1000_E543_1E543;
    }
    // JMP 0x1000:e4b7 (1000_E54A / 0x1E54A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E4B7_1E4B7;
    label_1000_E54D_1E54D:
    // MOV DI,BX (1000_E54D / 0x1E54D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    DI = BX;
    label_1000_E54F_1E54F:
    // CALL 0x1000:e56b (1000_E54F / 0x1E54F)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE552, parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B);
    // JBE 0x1000:e55b (1000_E552 / 0x1E552)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E55B_1E55B;
    }
    // STOSB ES:DI (1000_E554 / 0x1E554)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP DI,0x3898 (1000_E555 / 0x1E555)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(DI, 0x3898);
    // JC 0x1000:e54f (1000_E559 / 0x1E559)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E54F_1E54F;
    }
    label_1000_E55B_1E55B:
    // MOV AL,0x5c (1000_E55B / 0x1E55B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AL = 0x5C;
    // CMP byte ptr ES:[DI + -0x1],AL (1000_E55D / 0x1E55D)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(UInt8[ES, (ushort)(DI - 0x1)], AL);
    // JZ 0x1000:e564 (1000_E561 / 0x1E561)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      goto label_1000_E564_1E564;
    }
    // STOSB ES:DI (1000_E563 / 0x1E563)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_E564_1E564:
    // MOV word ptr ES:[0x38a6],DI (1000_E564 / 0x1E564)
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, 0x38A6] = DI;
    // JMP 0x1000:e542 (1000_E569 / 0x1E569)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E542_1E542;
    // Function call generated as ASM continues to next function entry point without return
    return parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B(0);
  }
  
  public Action parse_cmd_is_end_of_arg_ida_1000_E56B_1E56B(int gotoTarget) {
    label_1000_E56B_1E56B:
    // MOV AL,0xd (1000_E56B / 0x1E56B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AL = 0xD;
    // CMP SI,BP (1000_E56D / 0x1E56D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(SI, BP);
    // JNC 0x1000:e578 (1000_E56F / 0x1E56F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(!CarryFlag) {
      goto label_1000_E578_1E578;
    }
    // LODSB SI (1000_E571 / 0x1E571)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0x61 (1000_E572 / 0x1E572)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(AL, 0x61);
    // JC 0x1000:e578 (1000_E574 / 0x1E574)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      goto label_1000_E578_1E578;
    }
    // AND AL,0xdf (1000_E576 / 0x1E576)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // AL &= 0xDF;
    AL = Alu.And8(AL, 0xDF);
    label_1000_E578_1E578:
    // CMP AL,0x20 (1000_E578 / 0x1E578)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    Alu.Sub8(AL, 0x20);
    // RET  (1000_E57A / 0x1E57A)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B(0);
  }
  
  public Action load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B(int gotoTarget) {
    label_1000_E57B_1E57B:
    // PUSH CX (1000_E57B / 0x1E57B)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(CX);
    // PUSH SI (1000_E57C / 0x1E57C)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(SI);
    // ADD AX,0xc8 (1000_E57D / 0x1E57D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0xC8;
    AX = Alu.Add16(AX, 0xC8);
    // MOV SI,AX (1000_E580 / 0x1E580)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    SI = AX;
    // CALL 0x1000:f0b9 (1000_E582 / 0x1E582)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE585, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // POP SI (1000_E585 / 0x1E585)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    SI = Stack.Pop();
    // POP CX (1000_E586 / 0x1E586)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    CX = Stack.Pop();
    // MOV AX,ES (1000_E587 / 0x1E587)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = ES;
    // SUB AX,0x10 (1000_E589 / 0x1E589)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // AX -= 0x10;
    AX = Alu.Sub16(AX, 0x10);
    label_1000_E58C_1E58C:
    // MOV word ptr [SI],AX (1000_E58C / 0x1E58C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    UInt16[DS, SI] = AX;
    // ADD SI,0x4 (1000_E58E / 0x1E58E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LOOP 0x1000:e58c (1000_E591 / 0x1E591)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(--CX != 0) {
      goto label_1000_E58C_1E58C;
    }
    // RET  (1000_E593 / 0x1E593)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return initialize_ida_1000_E594_1E594(0);
  }
  
  public Action initialize_ida_1000_E594_1E594(int gotoTarget) {
    label_1000_E594_1E594:
    // MOV AX,0x1f4b (1000_E594 / 0x1E594)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x1F4B;
    // MOV ES,AX (1000_E597 / 0x1E597)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    ES = AX;
    // MOV CX,0xdd1d (1000_E599 / 0x1E599)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0xDD1D;
    // MOV DI,0x3cbc (1000_E59C / 0x1E59C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    DI = 0x3CBC;
    // SUB CX,DI (1000_E59F / 0x1E59F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // CLD  (1000_E5A1 / 0x1E5A1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    DirectionFlag = false;
    // XOR AX,AX (1000_E5A2 / 0x1E5A2)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AX = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_E5A4 / 0x1E5A4)
      // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV AX,[0x2] (1000_E5A6 / 0x1E5A6)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x2];
    // PUSH ES (1000_E5A9 / 0x1E5A9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(ES);
    // POP DS (1000_E5AA / 0x1E5AA)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DS = Stack.Pop();
    // MOV [0xce68],AX (1000_E5AB / 0x1E5AB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xCE68] = AX;
    // MOV CX,0xdd1d (1000_E5AE / 0x1E5AE)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    CX = 0xDD1D;
    // CALL 0x1000:f0ff (1000_E5B1 / 0x1E5B1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE5B4, bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF);
    // MOV AX,0x4c6f (1000_E5B4 / 0x1E5B4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x4C6F;
    // MOV CL,0x4 (1000_E5B7 / 0x1E5B7)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    CL = 0x4;
    // SHR AX,CL (1000_E5B9 / 0x1E5B9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // MOV CX,DS (1000_E5BB / 0x1E5BB)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    CX = DS;
    // ADD AX,CX (1000_E5BD / 0x1E5BD)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // MOV [0xdc32],AX (1000_E5BF / 0x1E5BF)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDC32] = AX;
    // MOV AH,0x19 (1000_E5C2 / 0x1E5C2)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AH = 0x19;
    // INT 0x21 (1000_E5C4 / 0x1E5C4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    Interrupt(0x21);
    // MOV [0xce76],AL (1000_E5C6 / 0x1E5C6)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xCE76] = AL;
    // MOV [0xce77],AL (1000_E5C9 / 0x1E5C9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xCE77] = AL;
    // MOV AX,0x3301 (1000_E5CC / 0x1E5CC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x3301;
    // INT 0x21 (1000_E5CF / 0x1E5CF)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Interrupt(0x21);
    // MOV byte ptr [0x2941],DL (1000_E5D1 / 0x1E5D1)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0x2941] = DL;
    // MOV AX,0x3301 (1000_E5D5 / 0x1E5D5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x3301;
    // XOR DX,DX (1000_E5D8 / 0x1E5D8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    DX = 0;
    // INT 0x21 (1000_E5DA / 0x1E5DA)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    Interrupt(0x21);
    // CALL 0x1000:e675 (1000_E5DC / 0x1E5DC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE5DF, open_dune_dat_ida_1000_E675_1E675);
    // MOV AL,[0x2942] (1000_E5DF / 0x1E5DF)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[DS, 0x2942];
    // AND AX,0x1 (1000_E5E2 / 0x1E5E2)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // AX &= 0x1;
    AX = Alu.And16(AX, 0x1);
    // MOV SI,0x38b7 (1000_E5E5 / 0x1E5E5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x38B7;
    // MOV CX,0x2e (1000_E5E8 / 0x1E5E8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x2E;
    // CALL 0x1000:e57b (1000_E5EB / 0x1E5EB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE5EE, load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B);
    // CALLF [0x38b9] (1000_E5EE / 0x1E5EE)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x38b9], generating possible targets from emulator records
    uint targetAddress_1000_E5EE = (uint)(UInt16[DS, 0x38BB] * 0x10 + UInt16[DS, 0x38B9] - cs1 * 0x10);
    switch(targetAddress_1000_E5EE) {
      case 0x235B3 : FarCall(cs1, 0xE5F2, VgaFunc01GetInfoInAxCxBp_334B_0103_335B3);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E5EE);
        break;
    }
    // MOV [0xdbd8],AX (1000_E5F2 / 0x1E5F2)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBD8] = AX;
    // CALL 0x1000:c08e (1000_E5F5 / 0x1E5F5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE5F8, SetTextBufferAsActiveFrameBuffer_1000_C08E_1C08E);
    // MOV word ptr [0xce74],CX (1000_E5F8 / 0x1E5F8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xCE74] = CX;
    // MOV DI,0xdbdc (1000_E5FC / 0x1E5FC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    DI = 0xDBDC;
    // CALL 0x1000:f0f6 (1000_E5FF / 0x1E5FF)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE602, bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6);
    // MOV word ptr [0xdbd6],BP (1000_E602 / 0x1E602)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBD6] = BP;
    // OR BP,BP (1000_E606 / 0x1E606)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JNZ 0x1000:e610 (1000_E608 / 0x1E608)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!ZeroFlag) {
      goto label_1000_E610_1E610;
    }
    // MOV DI,0xdbd4 (1000_E60A / 0x1E60A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    DI = 0xDBD4;
    // CALL 0x1000:f0f6 (1000_E60D / 0x1E60D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE610, bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6);
    label_1000_E610_1E610:
    // CALLF [0x38b5] (1000_E610 / 0x1E610)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x38b5], generating possible targets from emulator records
    uint targetAddress_1000_E610 = (uint)(UInt16[DS, 0x38B7] * 0x10 + UInt16[DS, 0x38B5] - cs1 * 0x10);
    switch(targetAddress_1000_E610) {
      case 0x235B0 : FarCall(cs1, 0xE614, VgaFunc00SetMode_334B_0100_335B0);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E610);
        break;
    }
    // MOV AL,[0x2942] (1000_E614 / 0x1E614)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[DS, 0x2942];
    // PUSH AX (1000_E617 / 0x1E617)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(AX);
    // SHR AL,1 (1000_E618 / 0x1E618)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (1000_E61A / 0x1E61A)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // AND AL,0x7 (1000_E61C / 0x1E61C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // AL &= 0x7;
    AL = Alu.And8(AL, 0x7);
    // MOV [0xceeb],AL (1000_E61E / 0x1E61E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xCEEB] = AL;
    // POP AX (1000_E621 / 0x1E621)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    AX = Stack.Pop();
    // OR AL,AL (1000_E622 / 0x1E622)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x1000:e62b (1000_E624 / 0x1E624)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!SignFlag) {
      goto label_1000_E62B_1E62B;
    }
    // PUSH AX (1000_E626 / 0x1E626)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(AX);
    // CALL 0x1000:ea32 (1000_E627 / 0x1E627)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE62A, initialize_joystick_ida_1000_EA32_1EA32);
    // POP AX (1000_E62A / 0x1E62A)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = Stack.Pop();
    label_1000_E62B_1E62B:
    // TEST AL,0x40 (1000_E62B / 0x1E62B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Alu.And8(AL, 0x40);
    // JNZ 0x1000:e632 (1000_E62D / 0x1E62D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(!ZeroFlag) {
      goto label_1000_E632_1E632;
    }
    // CALL 0x1000:e97a (1000_E62F / 0x1E62F)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE632, initialize_mouse_ida_1000_E97A_1E97A);
    label_1000_E632_1E632:
    // CALL 0x1000:e85c (1000_E632 / 0x1E632)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE635, unknown_1000_E85C_1E85C);
    // CALL 0x1000:ea7b (1000_E635 / 0x1E635)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE638, memory_func_qq_ida_1000_EA7B_1EA7B);
    // MOV AL,[0x2942] (1000_E638 / 0x1E638)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[DS, 0x2942];
    // AND AL,0x2 (1000_E63B / 0x1E63B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AL &= 0x2;
    AL = Alu.And8(AL, 0x2);
    // MOV BP,0xce7a (1000_E63D / 0x1E63D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    BP = 0xCE7A;
    // CALLF [0x3925] (1000_E640 / 0x1E640)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x3925], generating possible targets from emulator records
    uint targetAddress_1000_E640 = (uint)(UInt16[DS, 0x3927] * 0x10 + UInt16[DS, 0x3925] - cs1 * 0x10);
    switch(targetAddress_1000_E640) {
      case 0x23604 : FarCall(cs1, 0xE644, unknown_334B_0154_33604);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E640);
        break;
    }
    // MOV word ptr [0xdc48],0x271c (1000_E644 / 0x1E644)
    // Instruction bytes at index 0, 1, 4, 5 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDC48] = 0x271C;
    // MOV byte ptr [0xdc46],0xff (1000_E64A / 0x1E64A)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xDC46] = 0xFF;
    // XOR AX,AX (1000_E64F / 0x1E64F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = 0;
    // MOV BX,0xc7 (1000_E651 / 0x1E651)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    BX = 0xC7;
    // XOR CX,CX (1000_E654 / 0x1E654)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    CX = 0;
    // MOV DX,0x13f (1000_E656 / 0x1E656)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    DX = 0x13F;
    // CALL 0x1000:db14 (1000_E659 / 0x1E659)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE65C, define_mouse_range_ida_1000_DB14_1DB14);
    // MOV BX,0xab (1000_E65C / 0x1E65C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    BX = 0xAB;
    // MOV DX,0xed (1000_E65F / 0x1E65F)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = 0xED;
    // CALL 0x1000:db03 (1000_E662 / 0x1E662)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE665, unknown_1000_DB03_1DB03);
    // CALL 0x1000:e76a (1000_E665 / 0x1E665)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE668, initialize_audio_ida_1000_E76A_1E76A);
    // CALL 0x1000:ce6c (1000_E668 / 0x1E668)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE66B, initialize_memory_handler_ida_1000_CE6C_1CE6C);
    // CALL 0x1000:c07c (1000_E66B / 0x1E66B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE66E, SetFrontBufferAsActiveFrameBuffer_1000_C07C_1C07C);
    // CALL 0x1000:c0ad (1000_E66E / 0x1E66E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE671, ClearCurrentVideoBuffer_1000_C0AD_1C0AD);
    // JMP 0x1000:c412 (1000_E671 / 0x1E671)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // Jump converted to entry function call
    return unknown_1000_C412_1C412(0);
    // Function call generated as ASM continues to next function body without return
    return open_dune_dat_ida_1000_E675_1E675(0x1E674 - cs1 * 0x10);
  }
  
  public Action open_dune_dat_ida_1000_E675_1E675(int gotoTarget) {
    switch(gotoTarget) {
      case 0xE674: break;
      case 0: goto entry; break; //
    }
    label_1000_E674_1E674:
    // RET  (1000_E674 / 0x1E674)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    return NearRet();
    entry:
    label_1000_E675_1E675:
    // MOV DX,0x37f2 (1000_E675 / 0x1E675)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    DX = 0x37F2;
    // CALL 0x1000:f1fb (1000_E678 / 0x1E678)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE67B, open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB);
    // JC 0x1000:e692 (1000_E67B / 0x1E67B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E692_1E692;
    }
    // LES DI,[0x39b7] (1000_E67D / 0x1E67D)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    DI = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // CALL 0x1000:f260 (1000_E681 / 0x1E681)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE684, read_ffff_to_esdi_and_close_ida_1000_F260_1F260);
    // CMP word ptr ES:[DI],0xc089 (1000_E684 / 0x1E684)
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(UInt16[ES, DI], 0xC089);
    // JNZ 0x1000:e692 (1000_E689 / 0x1E689)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(!ZeroFlag) {
      goto label_1000_E692_1E692;
    }
    // MOV DX,0x31ff (1000_E68B / 0x1E68B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = 0x31FF;
    // CALLF [0x39b7] (1000_E68E / 0x1E68E)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x39b7], generating possible targets from emulator records
    uint targetAddress_1000_E68E = (uint)(UInt16[DS, 0x39B9] * 0x10 + UInt16[DS, 0x39B7] - cs1 * 0x10);
    switch(targetAddress_1000_E68E) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E68E);
        break;
    }
    label_1000_E692_1E692:
    // MOV SI,0x37f7 (1000_E692 / 0x1E692)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x37F7;
    // INC byte ptr [SI] (1000_E695 / 0x1E695)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, SI] = Alu.Inc8(UInt8[DS, SI]);
    // CMP byte ptr [SI],0x39 (1000_E697 / 0x1E697)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(UInt8[DS, SI], 0x39);
    // JBE 0x1000:e675 (1000_E69A / 0x1E69A)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag || ZeroFlag) {
      goto label_1000_E675_1E675;
    }
    // MOV DX,0x37e9 (1000_E69C / 0x1E69C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    DX = 0x37E9;
    // MOV AX,0x3d00 (1000_E69F / 0x1E69F)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x3D00;
    // INT 0x21 (1000_E6A2 / 0x1E6A2)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    Interrupt(0x21);
    // JC 0x1000:e674 (1000_E6A4 / 0x1E6A4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_E674 / 0x1E674)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // MOV [0xdbba],AX (1000_E6A6 / 0x1E6A6)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBBA] = AX;
    // CALL 0x1000:e741 (1000_E6A9 / 0x1E6A9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE6AC, read_dune_dat_toc_ida_1000_E741_1E741);
    // MOV SI,DI (1000_E6AC / 0x1E6AC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    SI = DI;
    // MOV BP,ES (1000_E6AE / 0x1E6AE)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    BP = ES;
    // LES DI,[0x39b7] (1000_E6B0 / 0x1E6B0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    DI = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // MOV word ptr [0xdbbc],DI (1000_E6B4 / 0x1E6B4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBBC] = DI;
    // MOV word ptr [0xdbbe],ES (1000_E6B8 / 0x1E6B8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBBE] = ES;
    // MOV AX,0x145 (1000_E6BC / 0x1E6BC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = 0x145;
    // STOSW ES:DI (1000_E6BF / 0x1E6BF)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,0x14d (1000_E6C0 / 0x1E6C0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x14D;
    // MOV AL,0xff (1000_E6C3 / 0x1E6C3)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AL = 0xFF;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_E6C5 / 0x1E6C5)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV word ptr [0xd820],DI (1000_E6C7 / 0x1E6C7)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xD820] = DI;
    // PUSH DS (1000_E6CB / 0x1E6CB)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(DS);
    // MOV DS,BP (1000_E6CC / 0x1E6CC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    DS = BP;
    // LODSW SI (1000_E6CE / 0x1E6CE)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_E6CF_1E6CF:
    // PUSH SI (1000_E6CF / 0x1E6CF)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(SI);
    // CALL 0x1000:f314 (1000_E6D0 / 0x1E6D0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE6D3, locate_res_by_name_dssi_ida_1000_F314_1F314);
    // POP SI (1000_E6D3 / 0x1E6D3)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = Stack.Pop();
    // JC 0x1000:e702 (1000_E6D4 / 0x1E6D4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      goto label_1000_E702_1E702;
    }
    // CALL 0x1000:f3a7 (1000_E6D6 / 0x1E6D6)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE6D9, unknown_1000_F3A7_1F3A7);
    // JZ 0x1000:e6f9 (1000_E6D9 / 0x1E6D9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      goto label_1000_E6F9_1E6F9;
    }
    // PUSH AX (1000_E6DB / 0x1E6DB)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(AX);
    // PUSH DX (1000_E6DC / 0x1E6DC)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(DX);
    // PUSH SI (1000_E6DD / 0x1E6DD)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(SI);
    // PUSH DI (1000_E6DE / 0x1E6DE)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(DI);
    // MOV CX,word ptr SS:[0xd820] (1000_E6DF / 0x1E6DF)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3, 4 modified by those instruction(s): 1000_49F8_149F8
    CX = UInt16[SS, 0xD820];
    // MOV SI,CX (1000_E6E4 / 0x1E6E4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    SI = CX;
    // SUB CX,DI (1000_E6E6 / 0x1E6E6)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // SUB SI,0x2 (1000_E6E8 / 0x1E6E8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    // SI -= 0x2;
    SI = Alu.Sub16(SI, 0x2);
    // LEA DI,[SI + 0xa] (1000_E6EB / 0x1E6EB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DI = (ushort)(SI + 0xA);
    // SHR CX,1 (1000_E6EE / 0x1E6EE)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // STD  (1000_E6F0 / 0x1E6F0)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    DirectionFlag = true;
    while (CX-- != 0) {
      // MOVSW ES:DI,ES:SI (1000_E6F1 / 0x1E6F1)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
      UInt16[ES, DI] = UInt16[ES, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // CLD  (1000_E6F4 / 0x1E6F4)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    DirectionFlag = false;
    // POP DI (1000_E6F5 / 0x1E6F5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    DI = Stack.Pop();
    // POP SI (1000_E6F6 / 0x1E6F6)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = Stack.Pop();
    // POP DX (1000_E6F7 / 0x1E6F7)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = Stack.Pop();
    // POP AX (1000_E6F8 / 0x1E6F8)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    AX = Stack.Pop();
    label_1000_E6F9_1E6F9:
    // CALL 0x1000:e75b (1000_E6F9 / 0x1E6F9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE6FC, UnknownStructCreation_1000_E75B_1E75B);
    // ADD word ptr SS:[0xd820],0xa (1000_E6FC / 0x1E6FC)
    // Instruction bytes at index 0, 1, 4, 5 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // UInt16[SS, 0xD820] += 0xA;
    UInt16[SS, 0xD820] = Alu.Add16(UInt16[SS, 0xD820], 0xA);
    label_1000_E702_1E702:
    // ADD SI,0x19 (1000_E702 / 0x1E702)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // SI += 0x19;
    SI = Alu.Add16(SI, 0x19);
    // CMP byte ptr [SI],0x0 (1000_E705 / 0x1E705)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub8(UInt8[DS, SI], 0x0);
    // JNZ 0x1000:e6cf (1000_E708 / 0x1E708)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!ZeroFlag) {
      goto label_1000_E6CF_1E6CF;
    }
    // POP DS (1000_E70A / 0x1E70A)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DS = Stack.Pop();
    // MOV SI,0x145 (1000_E70B / 0x1E70B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x145;
    // MOV AX,[0xd820] (1000_E70E / 0x1E70E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0xD820];
    // SUB AX,SI (1000_E711 / 0x1E711)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // AX -= SI;
    AX = Alu.Sub16(AX, SI);
    // XOR DX,DX (1000_E713 / 0x1E713)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = 0;
    // MOV CX,0x280 (1000_E715 / 0x1E715)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x280;
    // DIV CX (1000_E718 / 0x1E718)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    Cpu.Div16(CX);
    // MOV DX,0xa (1000_E71A / 0x1E71A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    DX = 0xA;
    // MUL DX (1000_E71D / 0x1E71D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    Cpu.Mul16(DX);
    // MOV DX,AX (1000_E71F / 0x1E71F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = AX;
    // LES DI,SS:[0xdbbc] (1000_E721 / 0x1E721)
    // Instruction bytes at index 0, 3, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    DI = UInt16[SS, 0xDBBC];
    ES = UInt16[SS, 0xDBBE];
    // ADD DI,0x2 (1000_E726 / 0x1E726)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    label_1000_E729_1E729:
    // ADD SI,DX (1000_E729 / 0x1E729)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // SI += DX;
    SI = Alu.Add16(SI, DX);
    // PUSH SI (1000_E72B / 0x1E72B)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(SI);
    // MOVSW ES:DI,ES:SI (1000_E72C / 0x1E72C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    UInt16[ES, DI] = UInt16[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSB ES:DI,ES:SI (1000_E72E / 0x1E72E)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt8[ES, DI] = UInt8[ES, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // POP SI (1000_E730 / 0x1E730)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    SI = Stack.Pop();
    // MOV AX,SI (1000_E731 / 0x1E731)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    AX = SI;
    // STOSW ES:DI (1000_E733 / 0x1E733)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // CMP DI,0x140 (1000_E734 / 0x1E734)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(DI, 0x140);
    // JC 0x1000:e729 (1000_E738 / 0x1E738)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      goto label_1000_E729_1E729;
    }
    // MOV CX,word ptr [0xd820] (1000_E73A / 0x1E73A)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    CX = UInt16[DS, 0xD820];
    // JMP 0x1000:f0ff (1000_E73E / 0x1E73E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // Jump converted to entry function call
    return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0);
    // Function call generated as ASM continues to next function entry point without return
    return read_dune_dat_toc_ida_1000_E741_1E741(0);
  }
  
  public Action read_dune_dat_toc_ida_1000_E741_1E741(int gotoTarget) {
    label_1000_E741_1E741:
    // XOR AX,AX (1000_E741 / 0x1E741)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    AX = 0;
    // XOR DX,DX (1000_E743 / 0x1E743)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DX = 0;
    // CALL 0x1000:f2d6 (1000_E745 / 0x1E745)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE748, seek_dune_dat_offset_dxax_ida_1000_F2D6_1F2D6);
    // MOV AX,[0x39b9] (1000_E748 / 0x1E748)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x39B9];
    // ADD AX,0x800 (1000_E74B / 0x1E74B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0x800;
    AX = Alu.Add16(AX, 0x800);
    // MOV ES,AX (1000_E74E / 0x1E74E)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    ES = AX;
    // XOR DI,DI (1000_E750 / 0x1E750)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    DI = 0;
    // MOV CX,0xffff (1000_E752 / 0x1E752)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    CX = 0xFFFF;
    // CALL 0x1000:f2ea (1000_E755 / 0x1E755)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE758, read_dune_dat_cx_to_esdi_ida_1000_F2EA_1F2EA);
    // JC 0x1000:e741 (1000_E758 / 0x1E758)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(CarryFlag) {
      goto label_1000_E741_1E741;
    }
    // RET  (1000_E75A / 0x1E75A)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return UnknownStructCreation_1000_E75B_1E75B(0);
  }
  
  public Action UnknownStructCreation_1000_E75B_1E75B(int gotoTarget) {
    label_1000_E75B_1E75B:
    // PUSH SI (1000_E75B / 0x1E75B)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(SI);
    // STOSW ES:DI (1000_E75C / 0x1E75C)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,DL (1000_E75D / 0x1E75D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    AL = DL;
    // STOSB ES:DI (1000_E75F / 0x1E75F)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD SI,0x10 (1000_E760 / 0x1E760)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    // SI += 0x10;
    SI = Alu.Add16(SI, 0x10);
    // MOVSW ES:DI,SI (1000_E763 / 0x1E763)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSB ES:DI,SI (1000_E764 / 0x1E764)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC SI (1000_E765 / 0x1E765)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    SI = Alu.Inc16(SI);
    // MOVSW ES:DI,SI (1000_E766 / 0x1E766)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (1000_E767 / 0x1E767)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // POP SI (1000_E768 / 0x1E768)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    SI = Stack.Pop();
    // RET  (1000_E769 / 0x1E769)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return initialize_audio_ida_1000_E76A_1E76A(0);
  }
  
  public Action initialize_audio_ida_1000_E76A_1E76A(int gotoTarget) {
    label_1000_E76A_1E76A:
    // MOV AL,[0x2944] (1000_E76A / 0x1E76A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[DS, 0x2944];
    // MOV CL,0x4 (1000_E76D / 0x1E76D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    CL = 0x4;
    // SHR AL,CL (1000_E76F / 0x1E76F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AL >>= CL;
    AL = Alu.Shr8(AL, CL);
    // ADD AL,0x7 (1000_E771 / 0x1E771)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    // AL += 0x7;
    AL = Alu.Add8(AL, 0x7);
    // XOR AH,AH (1000_E773 / 0x1E773)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AH = 0;
    // MOV SI,0x398b (1000_E775 / 0x1E775)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x398B;
    // MOV CX,0x8 (1000_E778 / 0x1E778)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x8;
    // CALL 0x1000:e57b (1000_E77B / 0x1E77B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE77E, load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B);
    // MOV AX,[0x39b5] (1000_E77E / 0x1E77E)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x39B5];
    // CALLF [0x3989] (1000_E781 / 0x1E781)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x3989], generating possible targets from emulator records
    uint targetAddress_1000_E781 = (uint)(UInt16[DS, 0x398B] * 0x10 + UInt16[DS, 0x3989] - cs1 * 0x10);
    switch(targetAddress_1000_E781) {
      case 0x46450 : FarCall(cs1, 0xE785, PcSpeakerActivationWithBXAndALCleanup_5635_0100_56450);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E781);
        break;
    }
    // MOV word ptr [0xdbc8],BX (1000_E785 / 0x1E785)
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBC8] = BX;
    // CALL 0x1000:a637 (1000_E789 / 0x1E789)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE78C, unknown_1000_A637_1A637);
    // CALL 0x1000:ae54 (1000_E78C / 0x1E78C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE78F, unknown_1000_AE54_1AE54);
    // CALL 0x1000:e851 (1000_E78F / 0x1E78F)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE792, CheckUnknown39B9_1000_E851_1E851);
    // JC 0x1000:e7bc (1000_E792 / 0x1E792)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E7BC_1E7BC;
    }
    // TEST byte ptr [0x2944],0xf0 (1000_E794 / 0x1E794)
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    Alu.And8(UInt8[DS, 0x2944], 0xF0);
    // JZ 0x1000:e7b9 (1000_E799 / 0x1E799)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:f131 (1000_E7B9 / 0x1E7B9)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
      // Jump converted to non entry function call
      return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0x1F131 - cs1 * 0x10);
    }
    // AND byte ptr [0x2944],0xf (1000_E79B / 0x1E79B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3, 4 modified by those instruction(s): 1000_49F8_149F8
    // UInt8[DS, 0x2944] &= 0xF;
    UInt8[DS, 0x2944] = Alu.And8(UInt8[DS, 0x2944], 0xF);
    // XOR AX,AX (1000_E7A0 / 0x1E7A0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    AX = 0;
    // MOV [0x3813],AX (1000_E7A2 / 0x1E7A2)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x3813] = AX;
    // MOV [0xdbc8],AL (1000_E7A5 / 0x1E7A5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xDBC8] = AL;
    // MOV AX,[0x398b] (1000_E7A8 / 0x1E7A8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x398B];
    // ADD AX,0x10 (1000_E7AB / 0x1E7AB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0x10;
    AX = Alu.Add16(AX, 0x10);
    // MOV [0x39b9],AX (1000_E7AE / 0x1E7AE)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x39B9] = AX;
    // MOV word ptr [0x3cbc],0x3624 (1000_E7B1 / 0x1E7B1)
    // Instruction bytes at index 0, 3, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2, 5 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x3CBC] = 0x3624;
    // JMP 0x1000:e76a (1000_E7B7 / 0x1E7B7)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E76A_1E76A;
    label_1000_E7B9_1E7B9:
    // JMP 0x1000:f131 (1000_E7B9 / 0x1E7B9)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // Jump converted to non entry function call
    return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0x1F131 - cs1 * 0x10);
    label_1000_E7BC_1E7BC:
    // MOV AX,[0x3813] (1000_E7BC / 0x1E7BC)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x3813];
    // MOV [0x381b],AX (1000_E7BF / 0x1E7BF)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x381B] = AX;
    // CALL 0x1000:a87e (1000_E7C2 / 0x1E7C2)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE7C5, audio_test_frequency_ida_1000_A87E_1A87E);
    label_1000_E7C5_1E7C5:
    // MOV AL,[0x2944] (1000_E7C5 / 0x1E7C5)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    AL = UInt8[DS, 0x2944];
    // AND AX,0xf (1000_E7C8 / 0x1E7C8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    // AX &= 0xF;
    AX = Alu.And16(AX, 0xF);
    // ADD AX,0x2 (1000_E7CB / 0x1E7CB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0x2;
    AX = Alu.Add16(AX, 0x2);
    // MOV SI,0x396f (1000_E7CE / 0x1E7CE)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    SI = 0x396F;
    // MOV CX,0x7 (1000_E7D1 / 0x1E7D1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    CX = 0x7;
    // CALL 0x1000:e57b (1000_E7D4 / 0x1E7D4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE7D7, load_driver_ax_with_vtable_at_si_ida_1000_E57B_1E57B);
    // MOV BP,0x3349 (1000_E7D7 / 0x1E7D7)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    BP = 0x3349;
    // MOV CX,0xa (1000_E7DA / 0x1E7DA)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    CX = 0xA;
    // MOV AX,[0x39b3] (1000_E7DD / 0x1E7DD)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x39B3];
    // CALLF [0x396d] (1000_E7E0 / 0x1E7E0)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // Indirect call to [0x396d], generating possible targets from emulator records
    uint targetAddress_1000_E7E0 = (uint)(UInt16[DS, 0x396F] * 0x10 + UInt16[DS, 0x396D] - cs1 * 0x10);
    switch(targetAddress_1000_E7E0) {
      case 0x464E0 : FarCall(cs1, 0xE7E4, PcSpeakerActivationWithBXAndALCleanup_563E_0100_564E0);
        break;
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_E7E0);
        break;
    }
    // OR word ptr [0xdbc8],BX (1000_E7E4 / 0x1E7E4)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // UInt16[DS, 0xDBC8] |= BX;
    UInt16[DS, 0xDBC8] = Alu.Or16(UInt16[DS, 0xDBC8], BX);
    // CALL 0x1000:a650 (1000_E7E8 / 0x1E7E8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE7EB, unknown_1000_A650_1A650);
    // CALL 0x1000:ae3f (1000_E7EB / 0x1E7EB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE7EE, unknown_1000_AE3F_1AE3F);
    // CALL 0x1000:e851 (1000_E7EE / 0x1E7EE)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE7F1, CheckUnknown39B9_1000_E851_1E851);
    // JC 0x1000:e818 (1000_E7F1 / 0x1E7F1)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E818_1E818;
    }
    // TEST byte ptr [0x2944],0xf (1000_E7F3 / 0x1E7F3)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3, 4 modified by those instruction(s): 1000_49F8_149F8
    Alu.And8(UInt8[DS, 0x2944], 0xF);
    // JZ 0x1000:e7b9 (1000_E7F8 / 0x1E7F8)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x1000:f131 (1000_E7B9 / 0x1E7B9)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
      // Jump converted to non entry function call
      return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0x1F131 - cs1 * 0x10);
    }
    // AND byte ptr [0x2944],0xf0 (1000_E7FA / 0x1E7FA)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F8_149F8
    // UInt8[DS, 0x2944] &= 0xF0;
    UInt8[DS, 0x2944] = Alu.And8(UInt8[DS, 0x2944], 0xF0);
    // XOR AX,AX (1000_E7FF / 0x1E7FF)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = 0;
    // MOV [0xdbb8],AX (1000_E801 / 0x1E801)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0xDBB8] = AX;
    // MOV [0xdbc9],AL (1000_E804 / 0x1E804)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    UInt8[DS, 0xDBC9] = AL;
    // MOV AX,[0x396f] (1000_E807 / 0x1E807)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x396F];
    // ADD AX,0x10 (1000_E80A / 0x1E80A)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0x10;
    AX = Alu.Add16(AX, 0x10);
    // MOV [0x39b9],AX (1000_E80D / 0x1E80D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x39B9] = AX;
    // MOV word ptr [0x3cbc],0x364b (1000_E810 / 0x1E810)
    // Instruction bytes at index 0, 1, 4, 5 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    UInt16[DS, 0x3CBC] = 0x364B;
    // JMP 0x1000:e7c5 (1000_E816 / 0x1E816)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    goto label_1000_E7C5_1E7C5;
    label_1000_E818_1E818:
    // CALL 0x1000:ae28 (1000_E818 / 0x1E818)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE81B, IsUnknownDBC80x100_1000_AE28_1AE28);
    // JZ 0x1000:e825 (1000_E81B / 0x1E81B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_E825 / 0x1E825)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // CALL 0x1000:e826 (1000_E81D / 0x1E81D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE820, unknown_1000_E826_1E826);
    // AND byte ptr [0x2943],0xef (1000_E820 / 0x1E820)
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F8_149F8
    // UInt8[DS, 0x2943] &= 0xEF;
    UInt8[DS, 0x2943] = Alu.And8(UInt8[DS, 0x2943], 0xEF);
    label_1000_E825_1E825:
    // RET  (1000_E825 / 0x1E825)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_E826_1E826(0);
  }
  
  public Action unknown_1000_E826_1E826(int gotoTarget) {
    label_1000_E826_1E826:
    // CMP word ptr [0xdbba],0x0 (1000_E826 / 0x1E826)
    // Instruction bytes at index 2, 3 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1, 4 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(UInt16[DS, 0xDBBA], 0x0);
    // JZ 0x1000:e850 (1000_E82B / 0x1E82B)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_E850 / 0x1E850)
      // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
      return NearRet();
    }
    // CALL 0x1000:e741 (1000_E82D / 0x1E82D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE830, read_dune_dat_toc_ida_1000_E741_1E741);
    // PUSH DS (1000_E830 / 0x1E830)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(DS);
    // MOV SI,DI (1000_E831 / 0x1E831)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    SI = DI;
    // PUSH ES (1000_E833 / 0x1E833)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(ES);
    // POP DS (1000_E834 / 0x1E834)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    DS = Stack.Pop();
    // LODSW SI (1000_E835 / 0x1E835)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,0xfa (1000_E836 / 0x1E836)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    CX = 0xFA;
    label_1000_E839_1E839:
    // PUSH CX (1000_E839 / 0x1E839)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    Stack.Push(CX);
    // PUSH SI (1000_E83A / 0x1E83A)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    Stack.Push(SI);
    // CALL 0x1000:f314 (1000_E83B / 0x1E83B)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE83E, locate_res_by_name_dssi_ida_1000_F314_1F314);
    // POP SI (1000_E83E / 0x1E83E)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    SI = Stack.Pop();
    // JC 0x1000:e849 (1000_E83F / 0x1E83F)
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    if(CarryFlag) {
      goto label_1000_E849_1E849;
    }
    // CALL 0x1000:f3a7 (1000_E841 / 0x1E841)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE844, unknown_1000_F3A7_1F3A7);
    // JNZ 0x1000:e849 (1000_E844 / 0x1E844)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    if(!ZeroFlag) {
      goto label_1000_E849_1E849;
    }
    // CALL 0x1000:e75b (1000_E846 / 0x1E846)
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F8_149F8
    NearCall(cs1, 0xE849, UnknownStructCreation_1000_E75B_1E75B);
    label_1000_E849_1E849:
    // ADD SI,0x19 (1000_E849 / 0x1E849)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    // SI += 0x19;
    SI = Alu.Add16(SI, 0x19);
    // POP CX (1000_E84C / 0x1E84C)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    CX = Stack.Pop();
    // LOOP 0x1000:e839 (1000_E84D / 0x1E84D)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1 modified by those instruction(s): 1000_49F8_149F8
    if(--CX != 0) {
      goto label_1000_E839_1E839;
    }
    // POP DS (1000_E84F / 0x1E84F)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    DS = Stack.Pop();
    label_1000_E850_1E850:
    // RET  (1000_E850 / 0x1E850)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return CheckUnknown39B9_1000_E851_1E851(0);
  }
  
  public Action CheckUnknown39B9_1000_E851_1E851(int gotoTarget) {
    label_1000_E851_1E851:
    // MOV AX,[0x39b9] (1000_E851 / 0x1E851)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F8_149F8
    AX = UInt16[DS, 0x39B9];
    // ADD AX,0x2f13 (1000_E854 / 0x1E854)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 2 modified by those instruction(s): 1000_49F8_149F8
    // AX += 0x2F13;
    AX = Alu.Add16(AX, 0x2F13);
    // CMP AX,word ptr [0xce68] (1000_E857 / 0x1E857)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_49F7_149F7
    // Instruction bytes at index 0, 3 modified by those instruction(s): 1000_49F8_149F8
    Alu.Sub16(AX, UInt16[DS, 0xCE68]);
    // RET  (1000_E85B / 0x1E85B)
    // Instruction bytes at index 0 modified by those instruction(s): 1000_49F8_149F8
    return NearRet();
    // Function call generated as ASM continues to next function entry point without return
    return unknown_1000_E85C_1E85C(0);
  }
  
  public Action unknown_1000_E85C_1E85C(int gotoTarget) {
    label_1000_E85C_1E85C:
    // CLI  (1000_E85C / 0x1E85C)
    InterruptFlag = false;
    // CALL 0x1000:e913 (1000_E85D / 0x1E85D)
    NearCall(cs1, 0xE860, install_interrupt_handlers_ida_1000_E913_1E913);
    // XOR AX,AX (1000_E860 / 0x1E860)
    AX = 0;
    // MOV ES,AX (1000_E862 / 0x1E862)
    ES = AX;
    // MOV DI,0x20 (1000_E864 / 0x1E864)
    DI = 0x20;
    // MOV word ptr ES:[DI],0xe8b8 (1000_E867 / 0x1E867)
    UInt16[ES, DI] = 0xE8B8;
    // PUSHF  (1000_E86C / 0x1E86C)
    Stack.Push(FlagRegister);
    // STI  (1000_E86D / 0x1E86D)
    InterruptFlag = true;
    label_1000_E86E_1E86E:
    // CMP byte ptr CS:[0xe8d4],0x0 (1000_E86E / 0x1E86E)
    Alu.Sub8(UInt8[cs1, 0xE8D4], 0x0);
    // JZ 0x1000:e86e (1000_E874 / 0x1E874)
    if(ZeroFlag) {
      goto label_1000_E86E_1E86E;
    }
    // POPF  (1000_E876 / 0x1E876)
    FlagRegister = Stack.Pop();
    // MOV word ptr ES:[DI],0xef6a (1000_E877 / 0x1E877)
    UInt16[ES, DI] = 0xEF6A;
    // MOV AX,CS:[0xe8d2] (1000_E87C / 0x1E87C)
    AX = UInt16[cs1, 0xE8D2];
    // OR AH,AH (1000_E880 / 0x1E880)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x1000:e8a5 (1000_E882 / 0x1E882)
    if(ZeroFlag) {
      goto label_1000_E8A5_1E8A5;
    }
    // OR AL,AL (1000_E884 / 0x1E884)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:e8a5 (1000_E886 / 0x1E886)
    if(ZeroFlag) {
      goto label_1000_E8A5_1E8A5;
    }
    // XOR DX,DX (1000_E888 / 0x1E888)
    DX = 0;
    // MOV CX,0x1745 (1000_E88A / 0x1E88A)
    CX = 0x1745;
    // DIV CX (1000_E88D / 0x1E88D)
    Cpu.Div16(CX);
    // SHL DX,1 (1000_E88F / 0x1E88F)
    // DX <<= 1;
    DX = Alu.Shl16(DX, 1);
    // CMP DX,CX (1000_E891 / 0x1E891)
    Alu.Sub16(DX, CX);
    // JC 0x1000:e896 (1000_E893 / 0x1E893)
    if(CarryFlag) {
      goto label_1000_E896_1E896;
    }
    // INC AX (1000_E895 / 0x1E895)
    AX = Alu.Inc16(AX);
    label_1000_E896_1E896:
    // DEC AX (1000_E896 / 0x1E896)
    AX = Alu.Dec16(AX);
    // JNS 0x1000:e89a (1000_E897 / 0x1E897)
    if(!SignFlag) {
      goto label_1000_E89A_1E89A;
    }
    // INC AX (1000_E899 / 0x1E899)
    AX = Alu.Inc16(AX);
    label_1000_E89A_1E89A:
    // CMP AX,0xa (1000_E89A / 0x1E89A)
    Alu.Sub16(AX, 0xA);
    // JC 0x1000:e8a1 (1000_E89D / 0x1E89D)
    if(CarryFlag) {
      goto label_1000_E8A1_1E8A1;
    }
    // MOV AL,0xa (1000_E89F / 0x1E89F)
    AL = 0xA;
    label_1000_E8A1_1E8A1:
    // MOV CS:[0xefd9],AL (1000_E8A1 / 0x1E8A1)
    UInt8[cs1, 0xEFD9] = AL;
    label_1000_E8A5_1E8A5:
    // MOV AX,0x1745 (1000_E8A5 / 0x1E8A5)
    AX = 0x1745;
    // Function call generated as ASM continues to next function entry point without return
    return SetPitTimerToAX_1000_E8A8_1E8A8(0);
  }
  
  public Action SetPitTimerToAX_1000_E8A8_1E8A8(int gotoTarget) {
    label_1000_E8A8_1E8A8:
    // PUSHF  (1000_E8A8 / 0x1E8A8)
    Stack.Push(FlagRegister);
    // PUSH AX (1000_E8A9 / 0x1E8A9)
    Stack.Push(AX);
    // CLI  (1000_E8AA / 0x1E8AA)
    InterruptFlag = false;
    // MOV AL,0x36 (1000_E8AB / 0x1E8AB)
    AL = 0x36;
    // OUT 0x43,AL (1000_E8AD / 0x1E8AD)
    Cpu.Out8(0x43, AL);
    // POP AX (1000_E8AF / 0x1E8AF)
    AX = Stack.Pop();
    // OUT 0x40,AL (1000_E8B0 / 0x1E8B0)
    Cpu.Out8(0x40, AL);
    // MOV AL,AH (1000_E8B2 / 0x1E8B2)
    AL = AH;
    // OUT 0x40,AL (1000_E8B4 / 0x1E8B4)
    Cpu.Out8(0x40, AL);
    // POPF  (1000_E8B6 / 0x1E8B6)
    FlagRegister = Stack.Pop();
    // RET  (1000_E8B7 / 0x1E8B7)
    return NearRet();
  }
  
  public Action get_pit_timer_value_ida_1000_E8B8_1E8B8(int gotoTarget) {
    label_1000_E8B8_1E8B8:
    // PUSH AX (1000_E8B8 / 0x1E8B8)
    Stack.Push(AX);
    // MOV AL,0x36 (1000_E8B9 / 0x1E8B9)
    AL = 0x36;
    // OUT 0x43,AL (1000_E8BB / 0x1E8BB)
    Cpu.Out8(0x43, AL);
    // IN AL,0x40 (1000_E8BD / 0x1E8BD)
    AL = Cpu.In8(0x40);
    // MOV AH,AL (1000_E8BF / 0x1E8BF)
    AH = AL;
    // IN AL,0x40 (1000_E8C1 / 0x1E8C1)
    AL = Cpu.In8(0x40);
    // XCHG AL,AH (1000_E8C3 / 0x1E8C3)
    byte tmp_1000_E8C3 = AL;
    AL = AH;
    AH = tmp_1000_E8C3;
    // MOV CS:[0xe8d2],AX (1000_E8C5 / 0x1E8C5)
    UInt16[cs1, 0xE8D2] = AX;
    // INC byte ptr CS:[0xe8d4] (1000_E8C9 / 0x1E8C9)
    UInt8[cs1, 0xE8D4] = Alu.Inc8(UInt8[cs1, 0xE8D4]);
    // POP AX (1000_E8CE / 0x1E8CE)
    AX = Stack.Pop();
    // JMP 0x1000:ef6a (1000_E8CF / 0x1E8CF)
    // Jump converted to entry function call
    return interrupt_handler_0x8_1000_EF6A_1EF6A(0);
  }
  
  public Action uninitialize_memory_driver_ida_1000_E8D5_1E8D5(int gotoTarget) {
    label_1000_E8D5_1E8D5:
    // CMP word ptr CS:[0xee8a],0x0 (1000_E8D5 / 0x1E8D5)
    Alu.Sub16(UInt16[cs1, 0xEE8A], 0x0);
    // JZ 0x1000:e8e2 (1000_E8DB / 0x1E8DB)
    if(ZeroFlag) {
      goto label_1000_E8E2_1E8E2;
    }
    // MOV AH,0xa (1000_E8DD / 0x1E8DD)
    AH = 0xA;
    // CALL 0x1000:ef2b (1000_E8DF / 0x1E8DF)
    NearCall(cs1, 0xE8E2, call_xms_func_on_block_ida_1000_EF2B_1EF2B);
    label_1000_E8E2_1E8E2:
    // CMP word ptr CS:[0xed3a],0x0 (1000_E8E2 / 0x1E8E2)
    Alu.Sub16(UInt16[cs1, 0xED3A], 0x0);
    // JZ 0x1000:e8ef (1000_E8E8 / 0x1E8E8)
    if(ZeroFlag) {
      goto label_1000_E8EF_1E8EF;
    }
    // MOV AH,0x45 (1000_E8EA / 0x1E8EA)
    AH = 0x45;
    // CALL 0x1000:ed40 (1000_E8EC / 0x1E8EC)
    NearCall(cs1, 0xE8EF, get_ems_emm_handle_ida_1000_ED40_1ED40);
    label_1000_E8EF_1E8EF:
    // MOV DX,word ptr CS:[0xed3e] (1000_E8EF / 0x1E8EF)
    DX = UInt16[cs1, 0xED3E];
    // OR DX,DX (1000_E8F4 / 0x1E8F4)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:e8fd (1000_E8F6 / 0x1E8F6)
    if(ZeroFlag) {
      goto label_1000_E8FD_1E8FD;
    }
    // MOV AH,0x45 (1000_E8F8 / 0x1E8F8)
    AH = 0x45;
    // CALL 0x1000:ed45 (1000_E8FA / 0x1E8FA)
    NearCall(cs1, 0xE8FD, call_ems_func_ida_1000_ED45_1ED45);
    label_1000_E8FD_1E8FD:
    // XOR AX,AX (1000_E8FD / 0x1E8FD)
    AX = 0;
    // CALL 0x1000:e8a8 (1000_E8FF / 0x1E8FF)
    NearCall(cs1, 0xE902, SetPitTimerToAX_1000_E8A8_1E8A8);
    // MOV DL,byte ptr [0x2941] (1000_E902 / 0x1E902)
    DL = UInt8[DS, 0x2941];
    // MOV AX,0x3301 (1000_E906 / 0x1E906)
    AX = 0x3301;
    // INT 0x21 (1000_E909 / 0x1E909)
    Interrupt(0x21);
    // CMP byte ptr [0xce73],0x0 (1000_E90B / 0x1E90B)
    Alu.Sub8(UInt8[DS, 0xCE73], 0x0);
    // JNZ 0x1000:e913 (1000_E910 / 0x1E910)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return install_interrupt_handlers_ida_1000_E913_1E913(0);
    }
    // RET  (1000_E912 / 0x1E912)
    return NearRet();
  }
  
  public Action install_interrupt_handlers_ida_1000_E913_1E913(int gotoTarget) {
    switch(gotoTarget) {
      case 0xE913: goto label_1000_E913_1E913;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_E913_1E913:
    // XOR byte ptr [0xce73],0xff (1000_E913 / 0x1E913)
    // UInt8[DS, 0xCE73] ^= 0xFF;
    UInt8[DS, 0xCE73] = Alu.Xor8(UInt8[DS, 0xCE73], 0xFF);
    // MOV SI,0x2913 (1000_E918 / 0x1E918)
    SI = 0x2913;
    // PUSHF  (1000_E91B / 0x1E91B)
    Stack.Push(FlagRegister);
    // CLI  (1000_E91C / 0x1E91C)
    InterruptFlag = false;
    // LODSW SI (1000_E91D / 0x1E91D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_1000_E91E_1E91E:
    // MOV DI,AX (1000_E91E / 0x1E91E)
    DI = AX;
    // LODSW SI (1000_E920 / 0x1E920)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XCHG AX,DI (1000_E921 / 0x1E921)
    ushort tmp_1000_E921 = AX;
    AX = DI;
    DI = tmp_1000_E921;
    // PUSH SI (1000_E922 / 0x1E922)
    Stack.Push(SI);
    // MOV SI,AX (1000_E923 / 0x1E923)
    SI = AX;
    // SHL SI,1 (1000_E925 / 0x1E925)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // SHL SI,1 (1000_E927 / 0x1E927)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // XOR AX,AX (1000_E929 / 0x1E929)
    AX = 0;
    // MOV ES,AX (1000_E92B / 0x1E92B)
    ES = AX;
    // MOV AX,word ptr CS:[DI] (1000_E92D / 0x1E92D)
    AX = UInt16[cs1, DI];
    // XCHG word ptr ES:[SI],AX (1000_E930 / 0x1E930)
    ushort tmp_1000_E930 = UInt16[ES, SI];
    UInt16[ES, SI] = AX;
    AX = tmp_1000_E930;
    // MOV word ptr CS:[DI],AX (1000_E933 / 0x1E933)
    UInt16[cs1, DI] = AX;
    // MOV AX,word ptr CS:[DI + 0x2] (1000_E936 / 0x1E936)
    AX = UInt16[cs1, (ushort)(DI + 0x2)];
    // XCHG word ptr ES:[SI + 0x2],AX (1000_E93A / 0x1E93A)
    ushort tmp_1000_E93A = UInt16[ES, (ushort)(SI + 0x2)];
    UInt16[ES, (ushort)(SI + 0x2)] = AX;
    AX = tmp_1000_E93A;
    // MOV word ptr CS:[DI + 0x2],AX (1000_E93E / 0x1E93E)
    UInt16[cs1, (ushort)(DI + 0x2)] = AX;
    // POP SI (1000_E942 / 0x1E942)
    SI = Stack.Pop();
    // LODSW SI (1000_E943 / 0x1E943)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (1000_E944 / 0x1E944)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x1000:e91e (1000_E946 / 0x1E946)
    if(!SignFlag) {
      goto label_1000_E91E_1E91E;
    }
    // POPF  (1000_E948 / 0x1E948)
    FlagRegister = Stack.Pop();
    // RET  (1000_E949 / 0x1E949)
    return NearRet();
  }
  
  public Action initialize_mouse_ida_1000_E97A_1E97A(int gotoTarget) {
    label_1000_E97A_1E97A:
    // MOV AX,0x3533 (1000_E97A / 0x1E97A)
    AX = 0x3533;
    // INT 0x21 (1000_E97D / 0x1E97D)
    Interrupt(0x21);
    // MOV AX,ES (1000_E97F / 0x1E97F)
    AX = ES;
    // OR AX,BX (1000_E981 / 0x1E981)
    // AX |= BX;
    AX = Alu.Or16(AX, BX);
    // JZ 0x1000:e9f3 (1000_E983 / 0x1E983)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_E9F3 / 0x1E9F3)
      return NearRet();
    }
    // MOV AX,0x0 (1000_E985 / 0x1E985)
    AX = 0x0;
    // INT 0x33 (1000_E988 / 0x1E988)
    Interrupt(0x33);
    // INC AX (1000_E98A / 0x1E98A)
    AX = Alu.Inc16(AX);
    // JNZ 0x1000:e9f3 (1000_E98B / 0x1E98B)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_E9F3 / 0x1E9F3)
      return NearRet();
    }
    // XOR CX,CX (1000_E98D / 0x1E98D)
    CX = 0;
    // XOR DX,DX (1000_E98F / 0x1E98F)
    DX = 0;
    // MOV AX,0x4 (1000_E991 / 0x1E991)
    AX = 0x4;
    // INT 0x33 (1000_E994 / 0x1E994)
    Interrupt(0x33);
    label_1000_E996_1E996:
    // INC byte ptr [0x2580] (1000_E996 / 0x1E996)
    UInt8[DS, 0x2580] = Alu.Inc8(UInt8[DS, 0x2580]);
    // JS 0x1000:e9b3 (1000_E99A / 0x1E99A)
    if(SignFlag) {
      goto label_1000_E9B3_1E9B3;
    }
    // MOV CL,byte ptr [0x2580] (1000_E99C / 0x1E99C)
    CL = UInt8[DS, 0x2580];
    // MOV AX,0x1 (1000_E9A0 / 0x1E9A0)
    AX = 0x1;
    // SHL AX,CL (1000_E9A3 / 0x1E9A3)
    // AX <<= CL;
    AX = Alu.Shl16(AX, CL);
    // MOV CX,AX (1000_E9A5 / 0x1E9A5)
    CX = AX;
    // MOV AX,0x4 (1000_E9A7 / 0x1E9A7)
    AX = 0x4;
    // INT 0x33 (1000_E9AA / 0x1E9AA)
    Interrupt(0x33);
    // MOV AX,0x3 (1000_E9AC / 0x1E9AC)
    AX = 0x3;
    // INT 0x33 (1000_E9AF / 0x1E9AF)
    Interrupt(0x33);
    // JCXZ 0x1000:e996 (1000_E9B1 / 0x1E9B1)
    if(CX == 0) {
      goto label_1000_E996_1E996;
    }
    label_1000_E9B3_1E9B3:
    // INC byte ptr [0x2581] (1000_E9B3 / 0x1E9B3)
    UInt8[DS, 0x2581] = Alu.Inc8(UInt8[DS, 0x2581]);
    // JS 0x1000:e9d0 (1000_E9B7 / 0x1E9B7)
    if(SignFlag) {
      goto label_1000_E9D0_1E9D0;
    }
    // MOV CL,byte ptr [0x2581] (1000_E9B9 / 0x1E9B9)
    CL = UInt8[DS, 0x2581];
    // MOV DX,0x1 (1000_E9BD / 0x1E9BD)
    DX = 0x1;
    // SHL DX,CL (1000_E9C0 / 0x1E9C0)
    // DX <<= CL;
    DX = Alu.Shl16(DX, CL);
    // MOV AX,0x4 (1000_E9C2 / 0x1E9C2)
    AX = 0x4;
    // INT 0x33 (1000_E9C5 / 0x1E9C5)
    Interrupt(0x33);
    // MOV AX,0x3 (1000_E9C7 / 0x1E9C7)
    AX = 0x3;
    // INT 0x33 (1000_E9CA / 0x1E9CA)
    Interrupt(0x33);
    // OR DX,DX (1000_E9CC / 0x1E9CC)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x1000:e9b3 (1000_E9CE / 0x1E9CE)
    if(ZeroFlag) {
      goto label_1000_E9B3_1E9B3;
    }
    label_1000_E9D0_1E9D0:
    // MOV AX,0x10 (1000_E9D0 / 0x1E9D0)
    AX = 0x10;
    // MOV DX,AX (1000_E9D3 / 0x1E9D3)
    DX = AX;
    // AND word ptr [0x2580],0x7f7f (1000_E9D5 / 0x1E9D5)
    // UInt16[DS, 0x2580] &= 0x7F7F;
    UInt16[DS, 0x2580] = Alu.And16(UInt16[DS, 0x2580], 0x7F7F);
    // MOV CX,word ptr [0x2580] (1000_E9DB / 0x1E9DB)
    CX = UInt16[DS, 0x2580];
    // SHR AX,CL (1000_E9DF / 0x1E9DF)
    // AX >>= CL;
    AX = Alu.Shr16(AX, CL);
    // MOV CL,CH (1000_E9E1 / 0x1E9E1)
    CL = CH;
    // SHR DX,CL (1000_E9E3 / 0x1E9E3)
    // DX >>= CL;
    DX = Alu.Shr16(DX, CL);
    // MOV CX,AX (1000_E9E5 / 0x1E9E5)
    CX = AX;
    // MOV AX,0xf (1000_E9E7 / 0x1E9E7)
    AX = 0xF;
    // PUSH DX (1000_E9EA / 0x1E9EA)
    Stack.Push(DX);
    // INT 0x33 (1000_E9EB / 0x1E9EB)
    Interrupt(0x33);
    // POP DX (1000_E9ED / 0x1E9ED)
    DX = Stack.Pop();
    // MOV AX,0x13 (1000_E9EE / 0x1E9EE)
    AX = 0x13;
    // INT 0x33 (1000_E9F1 / 0x1E9F1)
    Interrupt(0x33);
    label_1000_E9F3_1E9F3:
    // RET  (1000_E9F3 / 0x1E9F3)
    return NearRet();
  }
  
  public Action mouse_func_uncalled_ida_1000_E9F4_1E9F4(int gotoTarget) {
    label_1000_E9F4_1E9F4:
    // PUSH AX (1000_E9F4 / 0x1E9F4)
    Stack.Push(AX);
    // PUSH DS (1000_E9F5 / 0x1E9F5)
    Stack.Push(DS);
    // MOV DS,word ptr CS:[0xea30] (1000_E9F6 / 0x1E9F6)
    DS = UInt16[cs1, 0xEA30];
    // MOV word ptr [0xdc36],CX (1000_E9FB / 0x1E9FB)
    UInt16[DS, 0xDC36] = CX;
    // MOV word ptr [0xdc38],DX (1000_E9FF / 0x1E9FF)
    UInt16[DS, 0xDC38] = DX;
    // SHR AL,1 (1000_EA03 / 0x1EA03)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x1000:ea2d (1000_EA05 / 0x1EA05)
    if(ZeroFlag) {
      goto label_1000_EA2D_1EA2D;
    }
    // PUSH CX (1000_EA07 / 0x1EA07)
    Stack.Push(CX);
    // MOV CL,byte ptr [0xdc34] (1000_EA08 / 0x1EA08)
    CL = UInt8[DS, 0xDC34];
    // SHR AL,1 (1000_EA0C / 0x1EA0C)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNC 0x1000:ea13 (1000_EA0E / 0x1EA0E)
    if(!CarryFlag) {
      goto label_1000_EA13_1EA13;
    }
    // OR CL,0x1 (1000_EA10 / 0x1EA10)
    // CL |= 0x1;
    CL = Alu.Or8(CL, 0x1);
    label_1000_EA13_1EA13:
    // SHR AL,1 (1000_EA13 / 0x1EA13)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNC 0x1000:ea1a (1000_EA15 / 0x1EA15)
    if(!CarryFlag) {
      goto label_1000_EA1A_1EA1A;
    }
    // AND CL,0xfe (1000_EA17 / 0x1EA17)
    // CL &= 0xFE;
    CL = Alu.And8(CL, 0xFE);
    label_1000_EA1A_1EA1A:
    // SHR AL,1 (1000_EA1A / 0x1EA1A)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNC 0x1000:ea21 (1000_EA1C / 0x1EA1C)
    if(!CarryFlag) {
      goto label_1000_EA21_1EA21;
    }
    // OR CL,0x2 (1000_EA1E / 0x1EA1E)
    // CL |= 0x2;
    CL = Alu.Or8(CL, 0x2);
    label_1000_EA21_1EA21:
    // SHR AL,1 (1000_EA21 / 0x1EA21)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JNC 0x1000:ea28 (1000_EA23 / 0x1EA23)
    if(!CarryFlag) {
      goto label_1000_EA28_1EA28;
    }
    // AND CL,0xfd (1000_EA25 / 0x1EA25)
    // CL &= 0xFD;
    CL = Alu.And8(CL, 0xFD);
    label_1000_EA28_1EA28:
    // MOV byte ptr [0xdc34],CL (1000_EA28 / 0x1EA28)
    UInt8[DS, 0xDC34] = CL;
    // POP CX (1000_EA2C / 0x1EA2C)
    CX = Stack.Pop();
    label_1000_EA2D_1EA2D:
    // POP DS (1000_EA2D / 0x1EA2D)
    DS = Stack.Pop();
    // POP AX (1000_EA2E / 0x1EA2E)
    AX = Stack.Pop();
    // RETF  (1000_EA2F / 0x1EA2F)
    return FarRet();
  }
  
  public Action initialize_joystick_ida_1000_EA32_1EA32(int gotoTarget) {
    label_1000_EA32_1EA32:
    // MOV SI,0x39ab (1000_EA32 / 0x1EA32)
    SI = 0x39AB;
    // XOR BX,BX (1000_EA35 / 0x1EA35)
    BX = 0;
    // MOV CX,0x4 (1000_EA37 / 0x1EA37)
    CX = 0x4;
    label_1000_EA3A_1EA3A:
    // LODSW SI (1000_EA3A / 0x1EA3A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR BX,AX (1000_EA3B / 0x1EA3B)
    // BX |= AX;
    BX = Alu.Or16(BX, AX);
    // LOOP 0x1000:ea3a (1000_EA3D / 0x1EA3D)
    if(--CX != 0) {
      goto label_1000_EA3A_1EA3A;
    }
    // OR BX,BX (1000_EA3F / 0x1EA3F)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNZ 0x1000:ea74 (1000_EA41 / 0x1EA41)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_EA74 / 0x1EA74)
      return NearRet();
    }
    // CALL 0x1000:dce0 (1000_EA43 / 0x1EA43)
    NearCall(cs1, 0xEA46, read_game_port_ida_1000_DCE0_1DCE0);
    // MOV AX,DX (1000_EA46 / 0x1EA46)
    AX = DX;
    // SUB AX,0x4 (1000_EA48 / 0x1EA48)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // CMP AH,0x4 (1000_EA4B / 0x1EA4B)
    Alu.Sub8(AH, 0x4);
    // JNC 0x1000:e9f3 (1000_EA4E / 0x1EA4E)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_E9F3 / 0x1E9F3)
      return NearRet();
    }
    // MOV AX,BX (1000_EA50 / 0x1EA50)
    AX = BX;
    // SUB AX,0x4 (1000_EA52 / 0x1EA52)
    // AX -= 0x4;
    AX = Alu.Sub16(AX, 0x4);
    // CMP AH,0x4 (1000_EA55 / 0x1EA55)
    Alu.Sub8(AH, 0x4);
    // JNC 0x1000:e9f3 (1000_EA58 / 0x1EA58)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_E9F3 / 0x1E9F3)
      return NearRet();
    }
    // MOV AX,DX (1000_EA5A / 0x1EA5A)
    AX = DX;
    // SHR AX,1 (1000_EA5C / 0x1EA5C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD DX,AX (1000_EA5E / 0x1EA5E)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV SI,0x39ab (1000_EA60 / 0x1EA60)
    SI = 0x39AB;
    // MOV word ptr [SI],AX (1000_EA63 / 0x1EA63)
    UInt16[DS, SI] = AX;
    // MOV word ptr [SI + 0x2],DX (1000_EA65 / 0x1EA65)
    UInt16[DS, (ushort)(SI + 0x2)] = DX;
    // MOV AX,BX (1000_EA68 / 0x1EA68)
    AX = BX;
    // SHR AX,1 (1000_EA6A / 0x1EA6A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD BX,AX (1000_EA6C / 0x1EA6C)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // MOV word ptr [SI + 0x4],AX (1000_EA6E / 0x1EA6E)
    UInt16[DS, (ushort)(SI + 0x4)] = AX;
    // MOV word ptr [SI + 0x6],BX (1000_EA71 / 0x1EA71)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    label_1000_EA74_1EA74:
    // RET  (1000_EA74 / 0x1EA74)
    return NearRet();
  }
  
  public Action memory_func_qq_ida_1000_EA7B_1EA7B(int gotoTarget) {
    label_1000_EA7B_1EA7B:
    // TEST byte ptr [0x2943],0x80 (1000_EA7B / 0x1EA7B)
    Alu.And8(UInt8[DS, 0x2943], 0x80);
    // JZ 0x1000:ea85 (1000_EA80 / 0x1EA80)
    if(ZeroFlag) {
      goto label_1000_EA85_1EA85;
    }
    // CALL 0x1000:eea0 (1000_EA82 / 0x1EA82)
    NearCall(cs1, 0xEA85, initialize_himem_sys_ida_1000_EEA0_1EEA0);
    label_1000_EA85_1EA85:
    // TEST byte ptr [0x2943],0x48 (1000_EA85 / 0x1EA85)
    Alu.And8(UInt8[DS, 0x2943], 0x48);
    // JZ 0x1000:ea8f (1000_EA8A / 0x1EA8A)
    if(ZeroFlag) {
      goto label_1000_EA8F_1EA8F;
    }
    // CALL 0x1000:ed4c (1000_EA8C / 0x1EA8C)
    throw FailAsUntested("Could not find a valid function at address 1000_ED4C / 0x1ED4C");
    label_1000_EA8F_1EA8F:
    // TEST byte ptr [0x2943],0xe8 (1000_EA8F / 0x1EA8F)
    Alu.And8(UInt8[DS, 0x2943], 0xE8);
    // JZ 0x1000:eab6 (1000_EA94 / 0x1EA94)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_EAB6 / 0x1EAB6)
      return NearRet();
    }
    // MOV DI,0xce6a (1000_EA96 / 0x1EA96)
    DI = 0xCE6A;
    // MOV CX,word ptr [0x39a9] (1000_EA99 / 0x1EA99)
    CX = UInt16[DS, 0x39A9];
    // MOV AX,0xb9 (1000_EA9D / 0x1EA9D)
    AX = 0xB9;
    // MOV [0xce70],AL (1000_EAA0 / 0x1EAA0)
    UInt8[DS, 0xCE70] = AL;
    // ADD CX,AX (1000_EAA3 / 0x1EAA3)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // ADD CX,AX (1000_EAA5 / 0x1EAA5)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // PUSH CX (1000_EAA7 / 0x1EAA7)
    Stack.Push(CX);
    // SHL CX,1 (1000_EAA8 / 0x1EAA8)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // CALL 0x1000:f0f6 (1000_EAAA / 0x1EAAA)
    NearCall(cs1, 0xEAAD, bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6);
    // LES DI,[0xce6a] (1000_EAAD / 0x1EAAD)
    DI = UInt16[DS, 0xCE6A];
    ES = UInt16[DS, 0xCE6C];
    // POP CX (1000_EAB1 / 0x1EAB1)
    CX = Stack.Pop();
    // XOR AX,AX (1000_EAB2 / 0x1EAB2)
    AX = 0;
    while (CX-- != 0) {
      // STOSW ES:DI (1000_EAB4 / 0x1EAB4)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    label_1000_EAB6_1EAB6:
    // RET  (1000_EAB6 / 0x1EAB6)
    return NearRet();
  }
  
  public Action memory_func_qq_ida_1000_EAB7_1EAB7(int gotoTarget) {
    label_1000_EAB7_1EAB7:
    // CALL 0x1000:e270 (1000_EAB7 / 0x1EAB7)
    NearCall(cs1, 0xEABA, PushAll_1000_E270_1E270);
    // PUSH DS (1000_EABA / 0x1EABA)
    Stack.Push(DS);
    // PUSH ES (1000_EABB / 0x1EABB)
    Stack.Push(ES);
    // SUB SP,0x6 (1000_EABC / 0x1EABC)
    // SP -= 0x6;
    SP = Alu.Sub16(SP, 0x6);
    // MOV BP,SP (1000_EABF / 0x1EABF)
    BP = SP;
    // MOV [0xce6e],AX (1000_EAC1 / 0x1EAC1)
    UInt16[DS, 0xCE6E] = AX;
    // PUSH DI (1000_EAC4 / 0x1EAC4)
    Stack.Push(DI);
    // PUSH ES (1000_EAC5 / 0x1EAC5)
    Stack.Push(ES);
    // LES DI,[0xce6a] (1000_EAC6 / 0x1EAC6)
    DI = UInt16[DS, 0xCE6A];
    ES = UInt16[DS, 0xCE6C];
    // MOV SI,AX (1000_EACA / 0x1EACA)
    SI = AX;
    // MOV AX,[0x39a9] (1000_EACC / 0x1EACC)
    AX = UInt16[DS, 0x39A9];
    // SHL AX,1 (1000_EACF / 0x1EACF)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV word ptr [BP + 0x0],AX (1000_EAD1 / 0x1EAD1)
    UInt16[SS, BP] = AX;
    // SHL SI,1 (1000_EAD4 / 0x1EAD4)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // ADD SI,AX (1000_EAD6 / 0x1EAD6)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV DX,SI (1000_EAD8 / 0x1EAD8)
    DX = SI;
    // MOV AX,CS:[0xea75] (1000_EADA / 0x1EADA)
    AX = UInt16[cs1, 0xEA75];
    // INC AX (1000_EADE / 0x1EADE)
    AX = Alu.Inc16(AX);
    // MOV word ptr ES:[SI + 0x172],AX (1000_EADF / 0x1EADF)
    UInt16[ES, (ushort)(SI + 0x172)] = AX;
    // MOV CS:[0xea75],AX (1000_EAE4 / 0x1EAE4)
    UInt16[cs1, 0xEA75] = AX;
    // MOV word ptr [BP + 0x2],CX (1000_EAE8 / 0x1EAE8)
    UInt16[SS, (ushort)(BP + 0x2)] = CX;
    // POP DS (1000_EAEB / 0x1EAEB)
    DS = Stack.Pop();
    // POP SI (1000_EAEC / 0x1EAEC)
    SI = Stack.Pop();
    label_1000_EAED_1EAED:
    // CMP DI,word ptr [BP + 0x0] (1000_EAED / 0x1EAED)
    Alu.Sub16(DI, UInt16[SS, BP]);
    // JC 0x1000:eaf4 (1000_EAF0 / 0x1EAF0)
    if(CarryFlag) {
      goto label_1000_EAF4_1EAF4;
    }
    label_1000_EAF2_1EAF2:
    // XOR DI,DI (1000_EAF2 / 0x1EAF2)
    DI = 0;
    label_1000_EAF4_1EAF4:
    // MOV CX,word ptr [BP + 0x0] (1000_EAF4 / 0x1EAF4)
    CX = UInt16[SS, BP];
    // SUB CX,DI (1000_EAF7 / 0x1EAF7)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // SHR CX,1 (1000_EAF9 / 0x1EAF9)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // XOR AX,AX (1000_EAFB / 0x1EAFB)
    AX = 0;
    while (CX-- != 0) {
      // SCASW ES:DI (1000_EAFD / 0x1EAFD)
      Alu.Sub16(AX, UInt16[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      if(ZeroFlag == false) {
        break;
      }
    }
    // JZ 0x1000:eb08 (1000_EAFF / 0x1EAFF)
    if(ZeroFlag) {
      goto label_1000_EB08_1EB08;
    }
    // CALL 0x1000:eb74 (1000_EB01 / 0x1EB01)
    throw FailAsUntested("Could not find a valid function at address 1000_EB74 / 0x1EB74");
    // JC 0x1000:eaf2 (1000_EB04 / 0x1EB04)
    if(CarryFlag) {
      goto label_1000_EAF2_1EAF2;
    }
    // JMP 0x1000:eb60 (1000_EB06 / 0x1EB06)
    goto label_1000_EB60_1EB60;
    label_1000_EB08_1EB08:
    // SUB DI,0x2 (1000_EB08 / 0x1EB08)
    // DI -= 0x2;
    DI = Alu.Sub16(DI, 0x2);
    // XOR CX,CX (1000_EB0B / 0x1EB0B)
    CX = 0;
    // MOV BX,DI (1000_EB0D / 0x1EB0D)
    BX = DI;
    // SHR BX,1 (1000_EB0F / 0x1EB0F)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // INC BX (1000_EB11 / 0x1EB11)
    BX = Alu.Inc16(BX);
    // MOV word ptr [BP + 0x4],BX (1000_EB12 / 0x1EB12)
    UInt16[SS, (ushort)(BP + 0x4)] = BX;
    // JMP 0x1000:eb28 (1000_EB15 / 0x1EB15)
    goto label_1000_EB28_1EB28;
    label_1000_EB17_1EB17:
    // MOV DI,DX (1000_EB17 / 0x1EB17)
    DI = DX;
    // ADD DI,0x2 (1000_EB19 / 0x1EB19)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // CMP DI,word ptr [BP + 0x0] (1000_EB1C / 0x1EB1C)
    Alu.Sub16(DI, UInt16[SS, BP]);
    // JNC 0x1000:eb3f (1000_EB1F / 0x1EB1F)
    if(!CarryFlag) {
      goto label_1000_EB3F_1EB3F;
    }
    // CMP word ptr ES:[DI],0x0 (1000_EB21 / 0x1EB21)
    Alu.Sub16(UInt16[ES, DI], 0x0);
    // JNZ 0x1000:eb3f (1000_EB25 / 0x1EB25)
    if(!ZeroFlag) {
      goto label_1000_EB3F_1EB3F;
    }
    // INC BX (1000_EB27 / 0x1EB27)
    BX = Alu.Inc16(BX);
    label_1000_EB28_1EB28:
    // XCHG DX,DI (1000_EB28 / 0x1EB28)
    ushort tmp_1000_EB28 = DX;
    DX = DI;
    DI = tmp_1000_EB28;
    // MOV word ptr ES:[DI],BX (1000_EB2A / 0x1EB2A)
    UInt16[ES, DI] = BX;
    // MOV AX,0x400 (1000_EB2D / 0x1EB2D)
    AX = 0x400;
    // ADD CX,AX (1000_EB30 / 0x1EB30)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // SUB word ptr [BP + 0x2],AX (1000_EB32 / 0x1EB32)
    // UInt16[SS, (ushort)(BP + 0x2)] -= AX;
    UInt16[SS, (ushort)(BP + 0x2)] = Alu.Sub16(UInt16[SS, (ushort)(BP + 0x2)], AX);
    // JA 0x1000:eb17 (1000_EB35 / 0x1EB35)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_EB17_1EB17;
    }
    // MOV DI,DX (1000_EB37 / 0x1EB37)
    DI = DX;
    // MOV AX,word ptr [BP + 0x2] (1000_EB39 / 0x1EB39)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // STOSW ES:DI (1000_EB3C / 0x1EB3C)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD CX,AX (1000_EB3D / 0x1EB3D)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    label_1000_EB3F_1EB3F:
    // MOV BX,word ptr [BP + 0x4] (1000_EB3F / 0x1EB3F)
    BX = UInt16[SS, (ushort)(BP + 0x4)];
    // PUSH DX (1000_EB42 / 0x1EB42)
    Stack.Push(DX);
    // CALL 0x1000:ec59 (1000_EB43 / 0x1EB43)
    NearCall(cs1, 0xEB46, call_memory_func_1_ida_1000_EC59_1EC59);
    // POP DX (1000_EB46 / 0x1EB46)
    DX = Stack.Pop();
    // MOV DI,DX (1000_EB47 / 0x1EB47)
    DI = DX;
    // OR word ptr ES:[DI],0x8000 (1000_EB49 / 0x1EB49)
    // UInt16[ES, DI] |= 0x8000;
    UInt16[ES, DI] = Alu.Or16(UInt16[ES, DI], 0x8000);
    // MOV AX,word ptr [BP + 0x2] (1000_EB4E / 0x1EB4E)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // DEC AX (1000_EB51 / 0x1EB51)
    AX = Alu.Dec16(AX);
    // CMP AX,0xfc00 (1000_EB52 / 0x1EB52)
    Alu.Sub16(AX, 0xFC00);
    // JBE 0x1000:eaed (1000_EB55 / 0x1EB55)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_EAED_1EAED;
    }
    label_1000_EB57_1EB57:
    // ADD SP,0x6 (1000_EB57 / 0x1EB57)
    // SP += 0x6;
    SP = Alu.Add16(SP, 0x6);
    // POP ES (1000_EB5A / 0x1EB5A)
    ES = Stack.Pop();
    // POP DS (1000_EB5B / 0x1EB5B)
    DS = Stack.Pop();
    // CALL 0x1000:e283 (1000_EB5C / 0x1EB5C)
    NearCall(cs1, 0xEB5F, PopAll_1000_E283_1E283);
    // RET  (1000_EB5F / 0x1EB5F)
    return NearRet();
    label_1000_EB60_1EB60:
    // MOV SI,word ptr [BP + 0x0] (1000_EB60 / 0x1EB60)
    SI = UInt16[SS, BP];
    // MOV AX,0xffff (1000_EB63 / 0x1EB63)
    AX = 0xFFFF;
    // XCHG word ptr SS:[0xce6e],AX (1000_EB66 / 0x1EB66)
    ushort tmp_1000_EB66 = UInt16[SS, 0xCE6E];
    UInt16[SS, 0xCE6E] = AX;
    AX = tmp_1000_EB66;
    // ADD SI,AX (1000_EB6B / 0x1EB6B)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // ADD SI,AX (1000_EB6D / 0x1EB6D)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // CALL 0x1000:ebaa (1000_EB6F / 0x1EB6F)
    throw FailAsUntested("Could not find a valid function at address 1000_EBAA / 0x1EBAA");
    // JMP 0x1000:eb57 (1000_EB72 / 0x1EB72)
    goto label_1000_EB57_1EB57;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x1EB74");
  }
  
  public Action call_memory_func_2_ida_1000_EC46_1EC46(int gotoTarget) {
    label_1000_EC46_1EC46:
    // PUSH CX (1000_EC46 / 0x1EC46)
    Stack.Push(CX);
    // PUSH DI (1000_EC47 / 0x1EC47)
    Stack.Push(DI);
    // PUSH DS (1000_EC48 / 0x1EC48)
    Stack.Push(DS);
    // PUSH ES (1000_EC49 / 0x1EC49)
    Stack.Push(ES);
    // DEC BX (1000_EC4A / 0x1EC4A)
    BX = Alu.Dec16(BX);
    // CALL word ptr CS:[0xea79] (1000_EC4B / 0x1EC4B)
    // Indirect call to word ptr CS:[0xea79], generating possible targets from emulator records
    uint targetAddress_1000_EC4B = (uint)(UInt16[cs1, 0xEA79]);
    switch(targetAddress_1000_EC4B) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_EC4B);
        break;
    }
    // POP ES (1000_EC50 / 0x1EC50)
    ES = Stack.Pop();
    // POP DS (1000_EC51 / 0x1EC51)
    DS = Stack.Pop();
    // POP DI (1000_EC52 / 0x1EC52)
    DI = Stack.Pop();
    // POP CX (1000_EC53 / 0x1EC53)
    CX = Stack.Pop();
    // PUSHF  (1000_EC54 / 0x1EC54)
    Stack.Push(FlagRegister);
    // ADD DI,CX (1000_EC55 / 0x1EC55)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // POPF  (1000_EC57 / 0x1EC57)
    FlagRegister = Stack.Pop();
    // RET  (1000_EC58 / 0x1EC58)
    return NearRet();
  }
  
  public Action call_memory_func_1_ida_1000_EC59_1EC59(int gotoTarget) {
    label_1000_EC59_1EC59:
    // PUSH SI (1000_EC59 / 0x1EC59)
    Stack.Push(SI);
    // PUSH DS (1000_EC5A / 0x1EC5A)
    Stack.Push(DS);
    // PUSH ES (1000_EC5B / 0x1EC5B)
    Stack.Push(ES);
    // PUSH CX (1000_EC5C / 0x1EC5C)
    Stack.Push(CX);
    // DEC BX (1000_EC5D / 0x1EC5D)
    BX = Alu.Dec16(BX);
    // CALL word ptr CS:[0xea77] (1000_EC5E / 0x1EC5E)
    // Indirect call to word ptr CS:[0xea77], generating possible targets from emulator records
    uint targetAddress_1000_EC5E = (uint)(UInt16[cs1, 0xEA77]);
    switch(targetAddress_1000_EC5E) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_EC5E);
        break;
    }
    // POP AX (1000_EC63 / 0x1EC63)
    AX = Stack.Pop();
    // POP ES (1000_EC64 / 0x1EC64)
    ES = Stack.Pop();
    // POP DS (1000_EC65 / 0x1EC65)
    DS = Stack.Pop();
    // POP SI (1000_EC66 / 0x1EC66)
    SI = Stack.Pop();
    // PUSHF  (1000_EC67 / 0x1EC67)
    Stack.Push(FlagRegister);
    // ADD SI,AX (1000_EC68 / 0x1EC68)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // POPF  (1000_EC6A / 0x1EC6A)
    FlagRegister = Stack.Pop();
    // RET  (1000_EC6B / 0x1EC6B)
    return NearRet();
  }
  
  public Action xms_memory_func_1_ida_1000_EC9C_1EC9C(int gotoTarget) {
    label_1000_EC9C_1EC9C:
    // MOV DI,0xec6c (1000_EC9C / 0x1EC9C)
    DI = 0xEC6C;
    // INC CX (1000_EC9F / 0x1EC9F)
    CX = Alu.Inc16(CX);
    // SHR CX,1 (1000_ECA0 / 0x1ECA0)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // PUSH CX (1000_ECA2 / 0x1ECA2)
    Stack.Push(CX);
    // SHL CX,1 (1000_ECA3 / 0x1ECA3)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // MOV word ptr CS:[DI + 0x10],CX (1000_ECA5 / 0x1ECA5)
    UInt16[cs1, (ushort)(DI + 0x10)] = CX;
    // MOV word ptr CS:[DI + 0x18],CX (1000_ECA9 / 0x1ECA9)
    UInt16[cs1, (ushort)(DI + 0x18)] = CX;
    // MOV AX,DS (1000_ECAD / 0x1ECAD)
    AX = DS;
    // XOR DX,DX (1000_ECAF / 0x1ECAF)
    DX = 0;
    // MOV CX,0x4 (1000_ECB1 / 0x1ECB1)
    CX = 0x4;
    label_1000_ECB4_1ECB4:
    // SHL AX,1 (1000_ECB4 / 0x1ECB4)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // RCL DX,1 (1000_ECB6 / 0x1ECB6)
    DX = Alu.Rcl16(DX, 1);
    // LOOP 0x1000:ecb4 (1000_ECB8 / 0x1ECB8)
    if(--CX != 0) {
      goto label_1000_ECB4_1ECB4;
    }
    // ADD AX,SI (1000_ECBA / 0x1ECBA)
    // AX += SI;
    AX = Alu.Add16(AX, SI);
    // ADC DX,0x0 (1000_ECBC / 0x1ECBC)
    DX = Alu.Adc16(DX, 0x0);
    // MOV word ptr CS:[DI + 0x12],AX (1000_ECBF / 0x1ECBF)
    UInt16[cs1, (ushort)(DI + 0x12)] = AX;
    // MOV DH,0x92 (1000_ECC3 / 0x1ECC3)
    DH = 0x92;
    // MOV word ptr CS:[DI + 0x14],DX (1000_ECC5 / 0x1ECC5)
    UInt16[cs1, (ushort)(DI + 0x14)] = DX;
    // XOR DL,DL (1000_ECC9 / 0x1ECC9)
    DL = 0;
    // XCHG BH,BL (1000_ECCB / 0x1ECCB)
    byte tmp_1000_ECCB = BH;
    BH = BL;
    BL = tmp_1000_ECCB;
    // XCHG DL,BL (1000_ECCD / 0x1ECCD)
    byte tmp_1000_ECCD = DL;
    DL = BL;
    BL = tmp_1000_ECCD;
    // SHL BX,1 (1000_ECCF / 0x1ECCF)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_ECD1 / 0x1ECD1)
    DL = Alu.Rcl8(DL, 1);
    // SHL BX,1 (1000_ECD3 / 0x1ECD3)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_ECD5 / 0x1ECD5)
    DL = Alu.Rcl8(DL, 1);
    // ADD DL,0x10 (1000_ECD7 / 0x1ECD7)
    // DL += 0x10;
    DL = Alu.Add8(DL, 0x10);
    // MOV word ptr CS:[DI + 0x1a],BX (1000_ECDA / 0x1ECDA)
    UInt16[cs1, (ushort)(DI + 0x1A)] = BX;
    // MOV word ptr CS:[DI + 0x1c],DX (1000_ECDE / 0x1ECDE)
    UInt16[cs1, (ushort)(DI + 0x1C)] = DX;
    // MOV SI,DI (1000_ECE2 / 0x1ECE2)
    SI = DI;
    // PUSH CS (1000_ECE4 / 0x1ECE4)
    Stack.Push(cs1);
    // POP ES (1000_ECE5 / 0x1ECE5)
    ES = Stack.Pop();
    // POP CX (1000_ECE6 / 0x1ECE6)
    CX = Stack.Pop();
    // MOV AH,0x87 (1000_ECE7 / 0x1ECE7)
    AH = 0x87;
    // INT 0x15 (1000_ECE9 / 0x1ECE9)
    Interrupt(0x15);
    // RET  (1000_ECEB / 0x1ECEB)
    return NearRet();
  }
  
  public Action xms_memory_func_1_ida_1000_ECEC_1ECEC(int gotoTarget) {
    label_1000_ECEC_1ECEC:
    // MOV SI,0xec6c (1000_ECEC / 0x1ECEC)
    SI = 0xEC6C;
    // INC CX (1000_ECEF / 0x1ECEF)
    CX = Alu.Inc16(CX);
    // SHR CX,1 (1000_ECF0 / 0x1ECF0)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // PUSH CX (1000_ECF2 / 0x1ECF2)
    Stack.Push(CX);
    // SHL CX,1 (1000_ECF3 / 0x1ECF3)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // MOV word ptr CS:[SI + 0x10],CX (1000_ECF5 / 0x1ECF5)
    UInt16[cs1, (ushort)(SI + 0x10)] = CX;
    // MOV word ptr CS:[SI + 0x18],CX (1000_ECF9 / 0x1ECF9)
    UInt16[cs1, (ushort)(SI + 0x18)] = CX;
    // MOV AX,ES (1000_ECFD / 0x1ECFD)
    AX = ES;
    // XOR DX,DX (1000_ECFF / 0x1ECFF)
    DX = 0;
    // MOV CX,0x4 (1000_ED01 / 0x1ED01)
    CX = 0x4;
    label_1000_ED04_1ED04:
    // SHL AX,1 (1000_ED04 / 0x1ED04)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // RCL DX,1 (1000_ED06 / 0x1ED06)
    DX = Alu.Rcl16(DX, 1);
    // LOOP 0x1000:ed04 (1000_ED08 / 0x1ED08)
    if(--CX != 0) {
      goto label_1000_ED04_1ED04;
    }
    // ADD AX,DI (1000_ED0A / 0x1ED0A)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // ADC DX,0x0 (1000_ED0C / 0x1ED0C)
    DX = Alu.Adc16(DX, 0x0);
    // MOV word ptr CS:[SI + 0x1a],AX (1000_ED0F / 0x1ED0F)
    UInt16[cs1, (ushort)(SI + 0x1A)] = AX;
    // MOV DH,0x92 (1000_ED13 / 0x1ED13)
    DH = 0x92;
    // MOV word ptr CS:[SI + 0x1c],DX (1000_ED15 / 0x1ED15)
    UInt16[cs1, (ushort)(SI + 0x1C)] = DX;
    // XOR DL,DL (1000_ED19 / 0x1ED19)
    DL = 0;
    // XCHG BH,BL (1000_ED1B / 0x1ED1B)
    byte tmp_1000_ED1B = BH;
    BH = BL;
    BL = tmp_1000_ED1B;
    // XCHG DL,BL (1000_ED1D / 0x1ED1D)
    byte tmp_1000_ED1D = DL;
    DL = BL;
    BL = tmp_1000_ED1D;
    // SHL BX,1 (1000_ED1F / 0x1ED1F)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_ED21 / 0x1ED21)
    DL = Alu.Rcl8(DL, 1);
    // SHL BX,1 (1000_ED23 / 0x1ED23)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_ED25 / 0x1ED25)
    DL = Alu.Rcl8(DL, 1);
    // ADD DL,0x10 (1000_ED27 / 0x1ED27)
    // DL += 0x10;
    DL = Alu.Add8(DL, 0x10);
    // MOV word ptr CS:[SI + 0x12],BX (1000_ED2A / 0x1ED2A)
    UInt16[cs1, (ushort)(SI + 0x12)] = BX;
    // MOV word ptr CS:[SI + 0x14],DX (1000_ED2E / 0x1ED2E)
    UInt16[cs1, (ushort)(SI + 0x14)] = DX;
    // PUSH CS (1000_ED32 / 0x1ED32)
    Stack.Push(cs1);
    // POP ES (1000_ED33 / 0x1ED33)
    ES = Stack.Pop();
    // POP CX (1000_ED34 / 0x1ED34)
    CX = Stack.Pop();
    // MOV AH,0x87 (1000_ED35 / 0x1ED35)
    AH = 0x87;
    // INT 0x15 (1000_ED37 / 0x1ED37)
    Interrupt(0x15);
    // RET  (1000_ED39 / 0x1ED39)
    return NearRet();
  }
  
  public Action get_ems_emm_handle_ida_1000_ED40_1ED40(int gotoTarget) {
    label_1000_ED40_1ED40:
    // MOV DX,word ptr CS:[0xed3a] (1000_ED40 / 0x1ED40)
    DX = UInt16[cs1, 0xED3A];
    // Function call generated as ASM continues to next function entry point without return
    return call_ems_func_ida_1000_ED45_1ED45(0);
  }
  
  public Action call_ems_func_ida_1000_ED45_1ED45(int gotoTarget) {
    label_1000_ED45_1ED45:
    // INT 0x67 (1000_ED45 / 0x1ED45)
    Interrupt(0x67);
    // CMP AH,0x80 (1000_ED47 / 0x1ED47)
    Alu.Sub8(AH, 0x80);
    // CMC  (1000_ED4A / 0x1ED4A)
    CarryFlag = !CarryFlag;
    // RET  (1000_ED4B / 0x1ED4B)
    return NearRet();
  }
  
  public Action map_ems_for_midi_audio_ida_1000_EDB9_1EDB9(int gotoTarget) {
    label_1000_EDB9_1EDB9:
    // TEST byte ptr [0x2944],0xf (1000_EDB9 / 0x1EDB9)
    Alu.And8(UInt8[DS, 0x2944], 0xF);
    // JZ 0x1000:edfc (1000_EDBE / 0x1EDBE)
    if(ZeroFlag) {
      // JZ target is RET, inlining.
      // RET  (1000_EDFC / 0x1EDFC)
      return NearRet();
    }
    // MOV BX,0x3 (1000_EDC0 / 0x1EDC0)
    BX = 0x3;
    // MOV AH,0x43 (1000_EDC3 / 0x1EDC3)
    AH = 0x43;
    // CALL 0x1000:ed45 (1000_EDC5 / 0x1EDC5)
    NearCall(cs1, 0xEDC8, call_ems_func_ida_1000_ED45_1ED45);
    // JC 0x1000:edfc (1000_EDC8 / 0x1EDC8)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_EDFC / 0x1EDFC)
      return NearRet();
    }
    // MOV word ptr CS:[0xed3e],DX (1000_EDCA / 0x1EDCA)
    UInt16[cs1, 0xED3E] = DX;
    // MOV AX,0x4401 (1000_EDCF / 0x1EDCF)
    AX = 0x4401;
    // XOR BX,BX (1000_EDD2 / 0x1EDD2)
    BX = 0;
    // CALL 0x1000:ed45 (1000_EDD4 / 0x1EDD4)
    NearCall(cs1, 0xEDD7, call_ems_func_ida_1000_ED45_1ED45);
    // JC 0x1000:edfd (1000_EDD7 / 0x1EDD7)
    if(CarryFlag) {
      goto label_1000_EDFD_1EDFD;
    }
    // MOV AX,0x4402 (1000_EDD9 / 0x1EDD9)
    AX = 0x4402;
    // MOV BX,0x1 (1000_EDDC / 0x1EDDC)
    BX = 0x1;
    // CALL 0x1000:ed45 (1000_EDDF / 0x1EDDF)
    NearCall(cs1, 0xEDE2, call_ems_func_ida_1000_ED45_1ED45);
    // JC 0x1000:edfd (1000_EDE2 / 0x1EDE2)
    if(CarryFlag) {
      goto label_1000_EDFD_1EDFD;
    }
    // MOV AX,0x4403 (1000_EDE4 / 0x1EDE4)
    AX = 0x4403;
    // MOV BX,0x2 (1000_EDE7 / 0x1EDE7)
    BX = 0x2;
    // CALL 0x1000:ed45 (1000_EDEA / 0x1EDEA)
    NearCall(cs1, 0xEDED, call_ems_func_ida_1000_ED45_1ED45);
    // JC 0x1000:edfd (1000_EDED / 0x1EDED)
    if(CarryFlag) {
      goto label_1000_EDFD_1EDFD;
    }
    // MOV AX,CS:[0xed3c] (1000_EDEF / 0x1EDEF)
    AX = UInt16[cs1, 0xED3C];
    // MOV [0xdbb8],AX (1000_EDF3 / 0x1EDF3)
    UInt16[DS, 0xDBB8] = AX;
    // MOV word ptr [0xdbb6],0x4000 (1000_EDF6 / 0x1EDF6)
    UInt16[DS, 0xDBB6] = 0x4000;
    label_1000_EDFC_1EDFC:
    // RET  (1000_EDFC / 0x1EDFC)
    return NearRet();
    label_1000_EDFD_1EDFD:
    // MOV AH,0x45 (1000_EDFD / 0x1EDFD)
    AH = 0x45;
    // JMP 0x1000:ed45 (1000_EDFF / 0x1EDFF)
    // Jump converted to entry function call
    return call_ems_func_ida_1000_ED45_1ED45(0);
  }
  
  public Action ems_memory_func_2_ida_1000_EE02_1EE02(int gotoTarget) {
    label_1000_EE02_1EE02:
    // MOV AX,BX (1000_EE02 / 0x1EE02)
    AX = BX;
    // SHL AX,1 (1000_EE04 / 0x1EE04)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_EE06 / 0x1EE06)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // XCHG AH,AL (1000_EE08 / 0x1EE08)
    byte tmp_1000_EE08 = AH;
    AH = AL;
    AL = tmp_1000_EE08;
    // AND AX,0x3c00 (1000_EE0A / 0x1EE0A)
    // AX &= 0x3C00;
    AX = Alu.And16(AX, 0x3C00);
    // MOV DI,AX (1000_EE0D / 0x1EE0D)
    DI = AX;
    // SHR BX,1 (1000_EE0F / 0x1EE0F)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE11 / 0x1EE11)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE13 / 0x1EE13)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE15 / 0x1EE15)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    label_1000_EE17_1EE17:
    // MOV AX,0x4400 (1000_EE17 / 0x1EE17)
    AX = 0x4400;
    // CALL 0x1000:ed40 (1000_EE1A / 0x1EE1A)
    NearCall(cs1, 0xEE1D, get_ems_emm_handle_ida_1000_ED40_1ED40);
    // JC 0x1000:ee45 (1000_EE1D / 0x1EE1D)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_EE45 / 0x1EE45)
      return NearRet();
    }
    // MOV ES,word ptr CS:[0xed3c] (1000_EE1F / 0x1EE1F)
    ES = UInt16[cs1, 0xED3C];
    // MOV DX,CX (1000_EE24 / 0x1EE24)
    DX = CX;
    // MOV CX,0x4000 (1000_EE26 / 0x1EE26)
    CX = 0x4000;
    // SUB CX,DI (1000_EE29 / 0x1EE29)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // CMP CX,DX (1000_EE2B / 0x1EE2B)
    Alu.Sub16(CX, DX);
    // JC 0x1000:ee31 (1000_EE2D / 0x1EE2D)
    if(CarryFlag) {
      goto label_1000_EE31_1EE31;
    }
    // MOV CX,DX (1000_EE2F / 0x1EE2F)
    CX = DX;
    label_1000_EE31_1EE31:
    // SUB DX,CX (1000_EE31 / 0x1EE31)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // SHR CX,1 (1000_EE33 / 0x1EE33)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_EE35 / 0x1EE35)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADC CL,CL (1000_EE37 / 0x1EE37)
    CL = Alu.Adc8(CL, CL);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_EE39 / 0x1EE39)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV CX,DX (1000_EE3B / 0x1EE3B)
    CX = DX;
    // JCXZ 0x1000:ee44 (1000_EE3D / 0x1EE3D)
    if(CX == 0) {
      goto label_1000_EE44_1EE44;
    }
    // INC BX (1000_EE3F / 0x1EE3F)
    BX = Alu.Inc16(BX);
    // XOR DI,DI (1000_EE40 / 0x1EE40)
    DI = 0;
    // JMP 0x1000:ee17 (1000_EE42 / 0x1EE42)
    goto label_1000_EE17_1EE17;
    label_1000_EE44_1EE44:
    // CLC  (1000_EE44 / 0x1EE44)
    CarryFlag = false;
    label_1000_EE45_1EE45:
    // RET  (1000_EE45 / 0x1EE45)
    return NearRet();
  }
  
  public Action ems_memory_func_1_ida_1000_EE46_1EE46(int gotoTarget) {
    label_1000_EE46_1EE46:
    // MOV AX,BX (1000_EE46 / 0x1EE46)
    AX = BX;
    // SHL AX,1 (1000_EE48 / 0x1EE48)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (1000_EE4A / 0x1EE4A)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // XCHG AH,AL (1000_EE4C / 0x1EE4C)
    byte tmp_1000_EE4C = AH;
    AH = AL;
    AL = tmp_1000_EE4C;
    // AND AX,0x3c00 (1000_EE4E / 0x1EE4E)
    // AX &= 0x3C00;
    AX = Alu.And16(AX, 0x3C00);
    // MOV SI,AX (1000_EE51 / 0x1EE51)
    SI = AX;
    // SHR BX,1 (1000_EE53 / 0x1EE53)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE55 / 0x1EE55)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE57 / 0x1EE57)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (1000_EE59 / 0x1EE59)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    label_1000_EE5B_1EE5B:
    // MOV AX,0x4400 (1000_EE5B / 0x1EE5B)
    AX = 0x4400;
    // CALL 0x1000:ed40 (1000_EE5E / 0x1EE5E)
    NearCall(cs1, 0xEE61, get_ems_emm_handle_ida_1000_ED40_1ED40);
    // JC 0x1000:ee45 (1000_EE61 / 0x1EE61)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_EE45 / 0x1EE45)
      return NearRet();
    }
    // MOV DS,word ptr CS:[0xed3c] (1000_EE63 / 0x1EE63)
    DS = UInt16[cs1, 0xED3C];
    // MOV DX,CX (1000_EE68 / 0x1EE68)
    DX = CX;
    // MOV CX,0x4000 (1000_EE6A / 0x1EE6A)
    CX = 0x4000;
    // SUB CX,SI (1000_EE6D / 0x1EE6D)
    // CX -= SI;
    CX = Alu.Sub16(CX, SI);
    // CMP CX,DX (1000_EE6F / 0x1EE6F)
    Alu.Sub16(CX, DX);
    // JC 0x1000:ee75 (1000_EE71 / 0x1EE71)
    if(CarryFlag) {
      goto label_1000_EE75_1EE75;
    }
    // MOV CX,DX (1000_EE73 / 0x1EE73)
    CX = DX;
    label_1000_EE75_1EE75:
    // SUB DX,CX (1000_EE75 / 0x1EE75)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // SHR CX,1 (1000_EE77 / 0x1EE77)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_EE79 / 0x1EE79)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADC CL,CL (1000_EE7B / 0x1EE7B)
    CL = Alu.Adc8(CL, CL);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_EE7D / 0x1EE7D)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV CX,DX (1000_EE7F / 0x1EE7F)
    CX = DX;
    // JCXZ 0x1000:ee88 (1000_EE81 / 0x1EE81)
    if(CX == 0) {
      goto label_1000_EE88_1EE88;
    }
    // INC BX (1000_EE83 / 0x1EE83)
    BX = Alu.Inc16(BX);
    // XOR SI,SI (1000_EE84 / 0x1EE84)
    SI = 0;
    // JMP 0x1000:ee5b (1000_EE86 / 0x1EE86)
    goto label_1000_EE5B_1EE5B;
    label_1000_EE88_1EE88:
    // CLC  (1000_EE88 / 0x1EE88)
    CarryFlag = false;
    // RET  (1000_EE89 / 0x1EE89)
    return NearRet();
  }
  
  public Action initialize_himem_sys_ida_1000_EEA0_1EEA0(int gotoTarget) {
    label_1000_EEA0_1EEA0:
    // MOV AX,0x4310 (1000_EEA0 / 0x1EEA0)
    AX = 0x4310;
    // INT 0x2f (1000_EEA3 / 0x1EEA3)
    Interrupt(0x2f);
    // MOV word ptr CS:[0xee8c],BX (1000_EEA5 / 0x1EEA5)
    UInt16[cs1, 0xEE8C] = BX;
    // MOV word ptr CS:[0xee8e],ES (1000_EEAA / 0x1EEAA)
    UInt16[cs1, 0xEE8E] = ES;
    // MOV AH,0x8 (1000_EEAF / 0x1EEAF)
    AH = 0x8;
    // CALL 0x1000:ef22 (1000_EEB1 / 0x1EEB1)
    NearCall(cs1, 0xEEB4, call_xms_driver_func_ida_1000_EF22_1EF22);
    // CMP AX,0x3f (1000_EEB4 / 0x1EEB4)
    Alu.Sub16(AX, 0x3F);
    // JC 0x1000:eee3 (1000_EEB7 / 0x1EEB7)
    if(CarryFlag) {
      goto label_1000_EEE3_1EEE3;
    }
    // CMP AX,0x800 (1000_EEB9 / 0x1EEB9)
    Alu.Sub16(AX, 0x800);
    // JC 0x1000:eec1 (1000_EEBC / 0x1EEBC)
    if(CarryFlag) {
      goto label_1000_EEC1_1EEC1;
    }
    // MOV AX,0x800 (1000_EEBE / 0x1EEBE)
    AX = 0x800;
    label_1000_EEC1_1EEC1:
    // MOV [0x39a9],AX (1000_EEC1 / 0x1EEC1)
    UInt16[DS, 0x39A9] = AX;
    // MOV DX,AX (1000_EEC4 / 0x1EEC4)
    DX = AX;
    // MOV AH,0x9 (1000_EEC6 / 0x1EEC6)
    AH = 0x9;
    // CALL 0x1000:ef22 (1000_EEC8 / 0x1EEC8)
    NearCall(cs1, 0xEECB, call_xms_driver_func_ida_1000_EF22_1EF22);
    // JC 0x1000:eee3 (1000_EECB / 0x1EECB)
    if(CarryFlag) {
      goto label_1000_EEE3_1EEE3;
    }
    // MOV word ptr CS:[0xee8a],DX (1000_EECD / 0x1EECD)
    UInt16[cs1, 0xEE8A] = DX;
    // MOV SI,0xef32 (1000_EED2 / 0x1EED2)
    SI = 0xEF32;
    // MOV DI,0xeee9 (1000_EED5 / 0x1EED5)
    DI = 0xEEE9;
    // MOV word ptr CS:[0xea77],DI (1000_EED8 / 0x1EED8)
    UInt16[cs1, 0xEA77] = DI;
    // MOV word ptr CS:[0xea79],SI (1000_EEDD / 0x1EEDD)
    UInt16[cs1, 0xEA79] = SI;
    // RET  (1000_EEE2 / 0x1EEE2)
    return NearRet();
    label_1000_EEE3_1EEE3:
    // AND byte ptr [0x2943],0x7f (1000_EEE3 / 0x1EEE3)
    // UInt8[DS, 0x2943] &= 0x7F;
    UInt8[DS, 0x2943] = Alu.And8(UInt8[DS, 0x2943], 0x7F);
    // RET  (1000_EEE8 / 0x1EEE8)
    return NearRet();
  }
  
  public Action call_xms_driver_func_ida_1000_EF22_1EF22(int gotoTarget) {
    label_1000_EF22_1EF22:
    // CALLF [0xee8c] (1000_EF22 / 0x1EF22)
    // Indirect call to [0xee8c], generating possible targets from emulator records
    uint targetAddress_1000_EF22 = (uint)(UInt16[cs1, 0xEE8E] * 0x10 + UInt16[cs1, 0xEE8C]);
    switch(targetAddress_1000_EF22) {
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_EF22);
        break;
    }
    // CMP AX,0x1 (1000_EF27 / 0x1EF27)
    Alu.Sub16(AX, 0x1);
    // RET  (1000_EF2A / 0x1EF2A)
    return NearRet();
  }
  
  public Action call_xms_func_on_block_ida_1000_EF2B_1EF2B(int gotoTarget) {
    label_1000_EF2B_1EF2B:
    // MOV DX,word ptr CS:[0xee8a] (1000_EF2B / 0x1EF2B)
    DX = UInt16[cs1, 0xEE8A];
    // JMP 0x1000:ef22 (1000_EF30 / 0x1EF30)
    // Jump converted to entry function call
    return call_xms_driver_func_ida_1000_EF22_1EF22(0);
  }
  
  public Action xms_move_memory_ida_1000_EF32_1EF32(int gotoTarget) {
    label_1000_EF32_1EF32:
    // PUSH CS (1000_EF32 / 0x1EF32)
    Stack.Push(cs1);
    // POP DS (1000_EF33 / 0x1EF33)
    DS = Stack.Pop();
    // MOV SI,0xee90 (1000_EF34 / 0x1EF34)
    SI = 0xEE90;
    // INC CX (1000_EF37 / 0x1EF37)
    CX = Alu.Inc16(CX);
    // AND CL,0xfe (1000_EF38 / 0x1EF38)
    // CL &= 0xFE;
    CL = Alu.And8(CL, 0xFE);
    // MOV word ptr [SI],CX (1000_EF3B / 0x1EF3B)
    UInt16[DS, SI] = CX;
    // XOR AX,AX (1000_EF3D / 0x1EF3D)
    AX = 0;
    // MOV word ptr [SI + 0x2],AX (1000_EF3F / 0x1EF3F)
    UInt16[DS, (ushort)(SI + 0x2)] = AX;
    // MOV word ptr [SI + 0xa],AX (1000_EF42 / 0x1EF42)
    UInt16[DS, (ushort)(SI + 0xA)] = AX;
    // MOV word ptr [SI + 0xc],DI (1000_EF45 / 0x1EF45)
    UInt16[DS, (ushort)(SI + 0xC)] = DI;
    // MOV word ptr [SI + 0xe],ES (1000_EF48 / 0x1EF48)
    UInt16[DS, (ushort)(SI + 0xE)] = ES;
    // MOV AX,CS:[0xee8a] (1000_EF4B / 0x1EF4B)
    AX = UInt16[cs1, 0xEE8A];
    // MOV word ptr [SI + 0x4],AX (1000_EF4F / 0x1EF4F)
    UInt16[DS, (ushort)(SI + 0x4)] = AX;
    // XOR DX,DX (1000_EF52 / 0x1EF52)
    DX = 0;
    // XCHG BH,BL (1000_EF54 / 0x1EF54)
    byte tmp_1000_EF54 = BH;
    BH = BL;
    BL = tmp_1000_EF54;
    // XCHG DL,BL (1000_EF56 / 0x1EF56)
    byte tmp_1000_EF56 = DL;
    DL = BL;
    BL = tmp_1000_EF56;
    // SHL BX,1 (1000_EF58 / 0x1EF58)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_EF5A / 0x1EF5A)
    DL = Alu.Rcl8(DL, 1);
    // SHL BX,1 (1000_EF5C / 0x1EF5C)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // RCL DL,1 (1000_EF5E / 0x1EF5E)
    DL = Alu.Rcl8(DL, 1);
    // MOV word ptr [SI + 0x6],BX (1000_EF60 / 0x1EF60)
    UInt16[DS, (ushort)(SI + 0x6)] = BX;
    // MOV word ptr [SI + 0x8],DX (1000_EF63 / 0x1EF63)
    UInt16[DS, (ushort)(SI + 0x8)] = DX;
    // MOV AH,0xb (1000_EF66 / 0x1EF66)
    AH = 0xB;
    // JMP 0x1000:ef22 (1000_EF68 / 0x1EF68)
    // Jump converted to entry function call
    return call_xms_driver_func_ida_1000_EF22_1EF22(0);
  }
  
  public Action interrupt_handler_0x8_1000_EF6A_1EF6A(int gotoTarget) {
    switch(gotoTarget) {
      case 0xEF6A: goto label_1000_EF6A_1EF6A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_EF6A_1EF6A:
    // PUSH AX (1000_EF6A / 0x1EF6A)
    Stack.Push(AX);
    // PUSH DS (1000_EF6B / 0x1EF6B)
    Stack.Push(DS);
    // PUSH ES (1000_EF6C / 0x1EF6C)
    Stack.Push(ES);
    // MOV AX,0x1f4b (1000_EF6D / 0x1EF6D)
    AX = 0x1F4B;
    // MOV DS,AX (1000_EF70 / 0x1EF70)
    DS = AX;
    // CLD  (1000_EF72 / 0x1EF72)
    DirectionFlag = false;
    // CMP byte ptr [0xceea],0x0 (1000_EF73 / 0x1EF73)
    Alu.Sub8(UInt8[DS, 0xCEEA], 0x0);
    // JG 0x1000:efa2 (1000_EF78 / 0x1EF78)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_1000_EFA2_1EFA2;
    }
    // INC word ptr [0xce7a] (1000_EF7A / 0x1EF7A)
    UInt16[DS, 0xCE7A] = Alu.Inc16(UInt16[DS, 0xCE7A]);
    // JNZ 0x1000:ef84 (1000_EF7E / 0x1EF7E)
    if(!ZeroFlag) {
      goto label_1000_EF84_1EF84;
    }
    // INC word ptr [0xce7c] (1000_EF80 / 0x1EF80)
    UInt16[DS, 0xCE7C] = Alu.Inc16(UInt16[DS, 0xCE7C]);
    label_1000_EF84_1EF84:
    // CMP byte ptr [0x2788],0x0 (1000_EF84 / 0x1EF84)
    Alu.Sub8(UInt8[DS, 0x2788], 0x0);
    // JNZ 0x1000:ef9f (1000_EF89 / 0x1EF89)
    if(!ZeroFlag) {
      goto label_1000_EF9F_1EF9F;
    }
    // DEC word ptr [0x46db] (1000_EF8B / 0x1EF8B)
    UInt16[DS, 0x46DB] = Alu.Dec16(UInt16[DS, 0x46DB]);
    // JNS 0x1000:ef9f (1000_EF8F / 0x1EF8F)
    if(!SignFlag) {
      goto label_1000_EF9F_1EF9F;
    }
    // MOV AX,[0x146e] (1000_EF91 / 0x1EF91)
    AX = UInt16[DS, 0x146E];
    // MOV [0x46db],AX (1000_EF94 / 0x1EF94)
    UInt16[DS, 0x46DB] = AX;
    // INC word ptr [0x2] (1000_EF97 / 0x1EF97)
    UInt16[DS, 0x2] = Alu.Inc16(UInt16[DS, 0x2]);
    // INC byte ptr [0x46dd] (1000_EF9B / 0x1EF9B)
    UInt8[DS, 0x46DD] = Alu.Inc8(UInt8[DS, 0x46DD]);
    label_1000_EF9F_1EF9F:
    // CALL 0x1000:efba (1000_EF9F / 0x1EF9F)
    NearCall(cs1, 0xEFA2, unknown_1000_EFBA_1EFBA);
    label_1000_EFA2_1EFA2:
    // POP ES (1000_EFA2 / 0x1EFA2)
    ES = Stack.Pop();
    // DEC byte ptr [0xce72] (1000_EFA3 / 0x1EFA3)
    UInt8[DS, 0xCE72] = Alu.Dec8(UInt8[DS, 0xCE72]);
    // JS 0x1000:efd5 (1000_EFA7 / 0x1EFA7)
    if(SignFlag) {
      goto label_1000_EFD5_1EFD5;
    }
    // MOV AL,0x20 (1000_EFA9 / 0x1EFA9)
    AL = 0x20;
    // OUT 0x20,AL (1000_EFAB / 0x1EFAB)
    Cpu.Out8(0x20, AL);
    // CMP byte ptr [0xdbb5],0x0 (1000_EFAD / 0x1EFAD)
    Alu.Sub8(UInt8[DS, 0xDBB5], 0x0);
    // JZ 0x1000:efb7 (1000_EFB2 / 0x1EFB2)
    if(ZeroFlag) {
      goto label_1000_EFB7_1EFB7;
    }
    // CALL 0x1000:cec9 (1000_EFB4 / 0x1EFB4)
    NearCall(cs1, 0xEFB7, unknown_1000_CEC9_1CEC9);
    label_1000_EFB7_1EFB7:
    // POP DS (1000_EFB7 / 0x1EFB7)
    DS = Stack.Pop();
    // POP AX (1000_EFB8 / 0x1EFB8)
    AX = Stack.Pop();
    // IRET  (1000_EFB9 / 0x1EFB9)
    return InterruptRet();
    label_1000_EFD5_1EFD5:
    // MOV byte ptr [0xce72],0xa (1000_EFD5 / 0x1EFD5)
    UInt8[DS, 0xCE72] = 0xA;
    // POP DS (1000_EFDA / 0x1EFDA)
    DS = Stack.Pop();
    // POP AX (1000_EFDB / 0x1EFDB)
    AX = Stack.Pop();
    // JMPF 0x1000:ef6a (1000_EFDC / 0x1EFDC)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 1000_E933_1E933
    // Instruction bytes at index 3, 4 modified by those instruction(s): 1000_E93E_1E93E
    goto label_1000_EF6A_1EF6A;
    // Function call generated as ASM continues to next function entry point without return
    return reset_keyboard_ida_1000_F05C_1F05C(0);
  }
  
  public Action unknown_1000_EFBA_1EFBA(int gotoTarget) {
    label_1000_EFBA_1EFBA:
    // PUSH BX (1000_EFBA / 0x1EFBA)
    Stack.Push(BX);
    // TEST byte ptr [0x2943],0x10 (1000_EFBB / 0x1EFBB)
    Alu.And8(UInt8[DS, 0x2943], 0x10);
    // JNZ 0x1000:efd3 (1000_EFC0 / 0x1EFC0)
    if(!ZeroFlag) {
      goto label_1000_EFD3_1EFD3;
    }
    // PUSH CX (1000_EFC2 / 0x1EFC2)
    Stack.Push(CX);
    // CALLF [0x3981] (1000_EFC3 / 0x1EFC3)
    // Indirect call to [0x3981], generating possible targets from emulator records
    uint targetAddress_1000_EFC3 = (uint)(UInt16[DS, 0x3983] * 0x10 + UInt16[DS, 0x3981] - cs1 * 0x10);
    switch(targetAddress_1000_EFC3) {
      case 0x464EF : throw FailAsUntested("Could not find a valid function at address 563E_010F / 0x564EF");
      default: throw FailAsUntested("Error: Function not registered at address " + targetAddress_1000_EFC3);
        break;
    }
    // MOV [0xdbcd],AL (1000_EFC7 / 0x1EFC7)
    UInt8[DS, 0xDBCD] = AL;
    // MOV word ptr [0xdbce],BX (1000_EFCA / 0x1EFCA)
    UInt16[DS, 0xDBCE] = BX;
    // MOV word ptr [0xdbd0],CX (1000_EFCE / 0x1EFCE)
    UInt16[DS, 0xDBD0] = CX;
    // POP CX (1000_EFD2 / 0x1EFD2)
    CX = Stack.Pop();
    label_1000_EFD3_1EFD3:
    // POP BX (1000_EFD3 / 0x1EFD3)
    BX = Stack.Pop();
    // RET  (1000_EFD4 / 0x1EFD4)
    return NearRet();
  }
  
  public Action reset_keyboard_ida_1000_F05C_1F05C(int gotoTarget) {
    label_1000_F05C_1F05C:
    // CMP byte ptr [0xceea],0x0 (1000_F05C / 0x1F05C)
    Alu.Sub8(UInt8[DS, 0xCEEA], 0x0);
    // JNZ 0x1000:f08d (1000_F061 / 0x1F061)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_F08D / 0x1F08D)
      return NearRet();
    }
    // PUSH BX (1000_F063 / 0x1F063)
    Stack.Push(BX);
    // PUSH ES (1000_F064 / 0x1F064)
    Stack.Push(ES);
    // MOV AH,0x34 (1000_F065 / 0x1F065)
    AH = 0x34;
    // INT 0x21 (1000_F067 / 0x1F067)
    Interrupt(0x21);
    // MOV AL,byte ptr ES:[BX] (1000_F069 / 0x1F069)
    AL = UInt8[ES, BX];
    // POP ES (1000_F06C / 0x1F06C)
    ES = Stack.Pop();
    // POP BX (1000_F06D / 0x1F06D)
    BX = Stack.Pop();
    // OR AL,AL (1000_F06E / 0x1F06E)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:f08d (1000_F070 / 0x1F070)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_F08D / 0x1F08D)
      return NearRet();
    }
    // INC byte ptr [0xceea] (1000_F072 / 0x1F072)
    UInt8[DS, 0xCEEA] = Alu.Inc8(UInt8[DS, 0xCEEA]);
    // IN AL,0x61 (1000_F076 / 0x1F076)
    AL = Cpu.In8(0x61);
    // OR AL,0x80 (1000_F078 / 0x1F078)
    // AL |= 0x80;
    AL = Alu.Or8(AL, 0x80);
    // OUT 0x61,AL (1000_F07A / 0x1F07A)
    Cpu.Out8(0x61, AL);
    // AND AL,0x7c (1000_F07C / 0x1F07C)
    // AL &= 0x7C;
    AL = Alu.And8(AL, 0x7C);
    // OUT 0x61,AL (1000_F07E / 0x1F07E)
    Cpu.Out8(0x61, AL);
    // MOV AL,0x20 (1000_F080 / 0x1F080)
    AL = 0x20;
    // CLI  (1000_F082 / 0x1F082)
    InterruptFlag = false;
    // OUT 0x20,AL (1000_F083 / 0x1F083)
    Cpu.Out8(0x20, AL);
    // PUSH DS (1000_F085 / 0x1F085)
    Stack.Push(DS);
    // POP SS (1000_F086 / 0x1F086)
    SS = Stack.Pop();
    // MOV SP,0x3cbc (1000_F087 / 0x1F087)
    SP = 0x3CBC;
    // JMP 0x1000:003a (1000_F08A / 0x1F08A)
    // Jump converted to non entry function call
    return entry_1000_0000_10000(0x1003A - cs1 * 0x10);
    label_1000_F08D_1F08D:
    // RET  (1000_F08D / 0x1F08D)
    return NearRet();
  }
  
  public Action clear_keyboard_array_ida_1000_F08E_1F08E(int gotoTarget) {
    label_1000_F08E_1F08E:
    // PUSH ES (1000_F08E / 0x1F08E)
    Stack.Push(ES);
    // PUSH DS (1000_F08F / 0x1F08F)
    Stack.Push(DS);
    // POP ES (1000_F090 / 0x1F090)
    ES = Stack.Pop();
    // XOR AX,AX (1000_F091 / 0x1F091)
    AX = 0;
    // MOV [0xcee8],AL (1000_F093 / 0x1F093)
    UInt8[DS, 0xCEE8] = AL;
    // MOV DI,0xce81 (1000_F096 / 0x1F096)
    DI = 0xCE81;
    // MOV CX,0x67 (1000_F099 / 0x1F099)
    CX = 0x67;
    while (CX-- != 0) {
      // STOSB ES:DI (1000_F09C / 0x1F09C)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP ES (1000_F09E / 0x1F09E)
    ES = Stack.Pop();
    // RET  (1000_F09F / 0x1F09F)
    return NearRet();
  }
  
  public Action open_resource_force_hsq_ida_1000_F0A0_1F0A0(int gotoTarget) {
    label_1000_F0A0_1F0A0:
    // PUSH DI (1000_F0A0 / 0x1F0A0)
    Stack.Push(DI);
    // PUSH ES (1000_F0A1 / 0x1F0A1)
    Stack.Push(ES);
    // INC byte ptr [0xce71] (1000_F0A2 / 0x1F0A2)
    UInt8[DS, 0xCE71] = Alu.Inc8(UInt8[DS, 0xCE71]);
    // PUSH DS (1000_F0A6 / 0x1F0A6)
    Stack.Push(DS);
    // POP ES (1000_F0A7 / 0x1F0A7)
    ES = Stack.Pop();
    // MOV DI,0x4c60 (1000_F0A8 / 0x1F0A8)
    DI = 0x4C60;
    // CALL 0x1000:f0b9 (1000_F0AB / 0x1F0AB)
    NearCall(cs1, 0xF0AE, open_resource_by_index_si_ida_1000_F0B9_1F0B9);
    // DEC byte ptr [0xce71] (1000_F0AE / 0x1F0AE)
    UInt8[DS, 0xCE71] = Alu.Dec8(UInt8[DS, 0xCE71]);
    // MOV SI,DI (1000_F0B2 / 0x1F0B2)
    SI = DI;
    // POP ES (1000_F0B4 / 0x1F0B4)
    ES = Stack.Pop();
    // POP DI (1000_F0B5 / 0x1F0B5)
    DI = Stack.Pop();
    // JMP 0x1000:f403 (1000_F0B6 / 0x1F0B6)
    // Jump converted to entry function call
    return hsq_decomp_skip_header_dssi_to_esdi_ida_1000_F403_1F403(0);
  }
  
  public Action open_resource_by_index_si_ida_1000_F0B9_1F0B9(int gotoTarget) {
    label_1000_F0B9_1F0B9:
    // MOV word ptr [0xce78],SI (1000_F0B9 / 0x1F0B9)
    UInt16[DS, 0xCE78] = SI;
    // SHL SI,1 (1000_F0BD / 0x1F0BD)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr [SI + 0x31ff] (1000_F0BF / 0x1F0BF)
    SI = UInt16[DS, (ushort)(SI + 0x31FF)];
    // LODSW SI (1000_F0C3 / 0x1F0C3)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,SI (1000_F0C4 / 0x1F0C4)
    DX = SI;
    // OR AX,AX (1000_F0C6 / 0x1F0C6)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:f0d6 (1000_F0C8 / 0x1F0C8)
    if(ZeroFlag) {
      // Jump converted to entry function call
      return read_and_maybe_hsq_ida_1000_F0D6_1F0D6(0);
    }
    // MOV CX,AX (1000_F0CA / 0x1F0CA)
    CX = AX;
    // PUSH DX (1000_F0CC / 0x1F0CC)
    Stack.Push(DX);
    // CALL 0x1000:f11c (1000_F0CD / 0x1F0CD)
    NearCall(cs1, 0xF0D0, alloc_cx_pages_to_di_ida_1000_F11C_1F11C);
    // POP DX (1000_F0D0 / 0x1F0D0)
    DX = Stack.Pop();
    // CALL 0x1000:f0d6 (1000_F0D1 / 0x1F0D1)
    NearCall(cs1, 0xF0D4, read_and_maybe_hsq_ida_1000_F0D6_1F0D6);
    // JMP 0x1000:f0ff (1000_F0D4 / 0x1F0D4)
    // Jump converted to entry function call
    return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0);
  }
  
  public Action read_and_maybe_hsq_ida_1000_F0D6_1F0D6(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF435: goto label_1000_F435_1F435;break;
      case 0xF0D6: goto label_1000_F0D6_1F0D6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_F0D6_1F0D6:
    // MOV AX,[0xce78] (1000_F0D6 / 0x1F0D6)
    AX = UInt16[DS, 0xCE78];
    // CMP AL,byte ptr [0xce70] (1000_F0D9 / 0x1F0D9)
    Alu.Sub8(AL, UInt8[DS, 0xCE70]);
    // JNC 0x1000:f0e4 (1000_F0DD / 0x1F0DD)
    if(!CarryFlag) {
      goto label_1000_F0E4_1F0E4;
    }
    // CALL 0x1000:ebe3 (1000_F0DF / 0x1F0DF)
    throw FailAsUntested("Could not find a valid function at address 1000_EBE3 / 0x1EBE3");
    // JC 0x1000:f0f3 (1000_F0E2 / 0x1F0E2)
    if(CarryFlag) {
      // JC target is JMP, inlining.
      // JMP 0x1000:f3d3 (1000_F0F3 / 0x1F0F3)
      goto label_1000_F3D3_1F3D3;
    }
    label_1000_F0E4_1F0E4:
    // CALL 0x1000:f244 (1000_F0E4 / 0x1F0E4)
    NearCall(cs1, 0xF0E7, read_resource_to_esdi_ida_1000_F244_1F244);
    // MOV AX,[0xce78] (1000_F0E7 / 0x1F0E7)
    AX = UInt16[DS, 0xCE78];
    // CMP AL,byte ptr [0xce70] (1000_F0EA / 0x1F0EA)
    Alu.Sub8(AL, UInt8[DS, 0xCE70]);
    // JNC 0x1000:f0f3 (1000_F0EE / 0x1F0EE)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x1000:f3d3 (1000_F0F3 / 0x1F0F3)
      goto label_1000_F3D3_1F3D3;
    }
    // CALL 0x1000:eab7 (1000_F0F0 / 0x1F0F0)
    NearCall(cs1, 0xF0F3, memory_func_qq_ida_1000_EAB7_1EAB7);
    label_1000_F0F3_1F0F3:
    // JMP 0x1000:f3d3 (1000_F0F3 / 0x1F0F3)
    goto label_1000_F3D3_1F3D3;
    label_1000_F3D3_1F3D3:
    // CMP byte ptr [0xce71],0x0 (1000_F3D3 / 0x1F3D3)
    Alu.Sub8(UInt8[DS, 0xCE71], 0x0);
    // JNZ 0x1000:f402 (1000_F3D8 / 0x1F3D8)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (1000_F402 / 0x1F402)
      return NearRet();
    }
    // PUSH CX (1000_F3DA / 0x1F3DA)
    Stack.Push(CX);
    // PUSH DI (1000_F3DB / 0x1F3DB)
    Stack.Push(DI);
    // PUSH DS (1000_F3DC / 0x1F3DC)
    Stack.Push(DS);
    // PUSH ES (1000_F3DD / 0x1F3DD)
    Stack.Push(ES);
    // POP DS (1000_F3DE / 0x1F3DE)
    DS = Stack.Pop();
    // MOV DX,DI (1000_F3DF / 0x1F3DF)
    DX = DI;
    // ADD DX,CX (1000_F3E1 / 0x1F3E1)
    // DX += CX;
    DX = Alu.Add16(DX, CX);
    // MOV CX,0x6 (1000_F3E3 / 0x1F3E3)
    CX = 0x6;
    // MOV SI,DI (1000_F3E6 / 0x1F3E6)
    SI = DI;
    // XOR AX,AX (1000_F3E8 / 0x1F3E8)
    AX = 0;
    label_1000_F3EA_1F3EA:
    // LODSB SI (1000_F3EA / 0x1F3EA)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD AH,AL (1000_F3EB / 0x1F3EB)
    // AH += AL;
    AH = Alu.Add8(AH, AL);
    // LOOP 0x1000:f3ea (1000_F3ED / 0x1F3ED)
    if(--CX != 0) {
      goto label_1000_F3EA_1F3EA;
    }
    // CMP AH,0xab (1000_F3EF / 0x1F3EF)
    Alu.Sub8(AH, 0xAB);
    // JNZ 0x1000:f3fe (1000_F3F2 / 0x1F3F2)
    if(!ZeroFlag) {
      goto label_1000_F3FE_1F3FE;
    }
    // MOV SI,DI (1000_F3F4 / 0x1F3F4)
    SI = DI;
    // LODSW SI (1000_F3F6 / 0x1F3F6)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DI,AX (1000_F3F7 / 0x1F3F7)
    DI = AX;
    // LODSB SI (1000_F3F9 / 0x1F3F9)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_F3FA / 0x1F3FA)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x1000:f40d (1000_F3FC / 0x1F3FC)
    if(ZeroFlag) {
      goto label_1000_F40D_1F40D;
    }
    label_1000_F3FE_1F3FE:
    // STC  (1000_F3FE / 0x1F3FE)
    CarryFlag = true;
    // POP DS (1000_F3FF / 0x1F3FF)
    DS = Stack.Pop();
    // POP DI (1000_F400 / 0x1F400)
    DI = Stack.Pop();
    // POP CX (1000_F401 / 0x1F401)
    CX = Stack.Pop();
    label_1000_F402_1F402:
    // RET  (1000_F402 / 0x1F402)
    return NearRet();
    label_1000_F40D_1F40D:
    // LODSW SI (1000_F40D / 0x1F40D)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,AX (1000_F40E / 0x1F40E)
    CX = AX;
    // SUB SI,0x5 (1000_F410 / 0x1F410)
    // SI -= 0x5;
    SI = Alu.Sub16(SI, 0x5);
    // MOV BP,SI (1000_F413 / 0x1F413)
    BP = SI;
    // ADD DI,SI (1000_F415 / 0x1F415)
    // DI += SI;
    DI = Alu.Add16(DI, SI);
    // ADD DI,0x40 (1000_F417 / 0x1F417)
    // DI += 0x40;
    DI = Alu.Add16(DI, 0x40);
    // ADD SI,CX (1000_F41A / 0x1F41A)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // DEC SI (1000_F41C / 0x1F41C)
    SI = Alu.Dec16(SI);
    // DEC DI (1000_F41D / 0x1F41D)
    DI = Alu.Dec16(DI);
    // SUB CX,0x6 (1000_F41E / 0x1F41E)
    // CX -= 0x6;
    CX = Alu.Sub16(CX, 0x6);
    // STD  (1000_F421 / 0x1F421)
    DirectionFlag = true;
    // SHR CX,1 (1000_F422 / 0x1F422)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // JNC 0x1000:f427 (1000_F424 / 0x1F424)
    if(!CarryFlag) {
      goto label_1000_F427_1F427;
    }
    // MOVSB ES:DI,SI (1000_F426 / 0x1F426)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_1000_F427_1F427:
    // DEC SI (1000_F427 / 0x1F427)
    SI = Alu.Dec16(SI);
    // DEC DI (1000_F428 / 0x1F428)
    DI = Alu.Dec16(DI);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_F429 / 0x1F429)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // CLD  (1000_F42B / 0x1F42B)
    DirectionFlag = false;
    // MOV SI,DI (1000_F42C / 0x1F42C)
    SI = DI;
    // ADD SI,0x2 (1000_F42E / 0x1F42E)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // MOV DI,BP (1000_F431 / 0x1F431)
    DI = BP;
    // XOR BP,BP (1000_F433 / 0x1F433)
    BP = 0;
    label_1000_F435_1F435:
    // SHR BP,1 (1000_F435 / 0x1F435)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JZ 0x1000:f43e (1000_F437 / 0x1F437)
    if(ZeroFlag) {
      goto label_1000_F43E_1F43E;
    }
    // JNC 0x1000:f446 (1000_F439 / 0x1F439)
    if(!CarryFlag) {
      goto label_1000_F446_1F446;
    }
    label_1000_F43B_1F43B:
    // MOVSB ES:DI,SI (1000_F43B / 0x1F43B)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x1000:f435 (1000_F43C / 0x1F43C)
    goto label_1000_F435_1F435;
    label_1000_F43E_1F43E:
    // LODSW SI (1000_F43E / 0x1F43E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_F43F / 0x1F43F)
    BP = AX;
    // STC  (1000_F441 / 0x1F441)
    CarryFlag = true;
    // RCR BP,1 (1000_F442 / 0x1F442)
    BP = Alu.Rcr16(BP, 1);
    // JC 0x1000:f43b (1000_F444 / 0x1F444)
    if(CarryFlag) {
      goto label_1000_F43B_1F43B;
    }
    label_1000_F446_1F446:
    // XOR CX,CX (1000_F446 / 0x1F446)
    CX = 0;
    // SHR BP,1 (1000_F448 / 0x1F448)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JNZ 0x1000:f452 (1000_F44A / 0x1F44A)
    if(!ZeroFlag) {
      goto label_1000_F452_1F452;
    }
    // LODSW SI (1000_F44C / 0x1F44C)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_F44D / 0x1F44D)
    BP = AX;
    // STC  (1000_F44F / 0x1F44F)
    CarryFlag = true;
    // RCR BP,1 (1000_F450 / 0x1F450)
    BP = Alu.Rcr16(BP, 1);
    label_1000_F452_1F452:
    // JC 0x1000:f482 (1000_F452 / 0x1F452)
    if(CarryFlag) {
      goto label_1000_F482_1F482;
    }
    // SHR BP,1 (1000_F454 / 0x1F454)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JNZ 0x1000:f45e (1000_F456 / 0x1F456)
    if(!ZeroFlag) {
      goto label_1000_F45E_1F45E;
    }
    // LODSW SI (1000_F458 / 0x1F458)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_F459 / 0x1F459)
    BP = AX;
    // STC  (1000_F45B / 0x1F45B)
    CarryFlag = true;
    // RCR BP,1 (1000_F45C / 0x1F45C)
    BP = Alu.Rcr16(BP, 1);
    label_1000_F45E_1F45E:
    // RCL CX,1 (1000_F45E / 0x1F45E)
    CX = Alu.Rcl16(CX, 1);
    // SHR BP,1 (1000_F460 / 0x1F460)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JNZ 0x1000:f46a (1000_F462 / 0x1F462)
    if(!ZeroFlag) {
      goto label_1000_F46A_1F46A;
    }
    // LODSW SI (1000_F464 / 0x1F464)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (1000_F465 / 0x1F465)
    BP = AX;
    // STC  (1000_F467 / 0x1F467)
    CarryFlag = true;
    // RCR BP,1 (1000_F468 / 0x1F468)
    BP = Alu.Rcr16(BP, 1);
    label_1000_F46A_1F46A:
    // RCL CX,1 (1000_F46A / 0x1F46A)
    CX = Alu.Rcl16(CX, 1);
    // LODSB SI (1000_F46C / 0x1F46C)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,0xff (1000_F46D / 0x1F46D)
    AH = 0xFF;
    label_1000_F46F_1F46F:
    // ADD AX,DI (1000_F46F / 0x1F46F)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // XCHG AX,SI (1000_F471 / 0x1F471)
    ushort tmp_1000_F471 = AX;
    AX = SI;
    SI = tmp_1000_F471;
    // MOV BX,DS (1000_F472 / 0x1F472)
    BX = DS;
    // MOV DX,ES (1000_F474 / 0x1F474)
    DX = ES;
    // MOV DS,DX (1000_F476 / 0x1F476)
    DS = DX;
    // INC CX (1000_F478 / 0x1F478)
    CX = Alu.Inc16(CX);
    // INC CX (1000_F479 / 0x1F479)
    CX = Alu.Inc16(CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_F47A / 0x1F47A)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV DS,BX (1000_F47C / 0x1F47C)
    DS = BX;
    // MOV SI,AX (1000_F47E / 0x1F47E)
    SI = AX;
    // JMP 0x1000:f435 (1000_F480 / 0x1F480)
    goto label_1000_F435_1F435;
    label_1000_F482_1F482:
    // LODSW SI (1000_F482 / 0x1F482)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CL,AL (1000_F483 / 0x1F483)
    CL = AL;
    // SHR AX,1 (1000_F485 / 0x1F485)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_F487 / 0x1F487)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_F489 / 0x1F489)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // OR AH,0xe0 (1000_F48B / 0x1F48B)
    // AH |= 0xE0;
    AH = Alu.Or8(AH, 0xE0);
    // AND CL,0x7 (1000_F48E / 0x1F48E)
    // CL &= 0x7;
    CL = Alu.And8(CL, 0x7);
    // JNZ 0x1000:f46f (1000_F491 / 0x1F491)
    if(!ZeroFlag) {
      goto label_1000_F46F_1F46F;
    }
    // MOV BX,AX (1000_F493 / 0x1F493)
    BX = AX;
    // LODSB SI (1000_F495 / 0x1F495)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV CL,AL (1000_F496 / 0x1F496)
    CL = AL;
    // MOV AX,BX (1000_F498 / 0x1F498)
    AX = BX;
    // OR CL,CL (1000_F49A / 0x1F49A)
    // CL |= CL;
    CL = Alu.Or8(CL, CL);
    // JNZ 0x1000:f46f (1000_F49C / 0x1F49C)
    if(!ZeroFlag) {
      goto label_1000_F46F_1F46F;
    }
    // STC  (1000_F49E / 0x1F49E)
    CarryFlag = true;
    // MOV CX,DI (1000_F49F / 0x1F49F)
    CX = DI;
    // POP DS (1000_F4A1 / 0x1F4A1)
    DS = Stack.Pop();
    // POP DI (1000_F4A2 / 0x1F4A2)
    DI = Stack.Pop();
    // ADD SP,0x2 (1000_F4A3 / 0x1F4A3)
    // SP += 0x2;
    SP = Alu.Add16(SP, 0x2);
    // SUB CX,DI (1000_F4A6 / 0x1F4A6)
    // CX -= DI;
    CX = Alu.Sub16(CX, DI);
    // RET  (1000_F4A8 / 0x1F4A8)
    return NearRet();
  }
  
  public Action bump_alloc_get_addr_in_di_ida_1000_F0F6_1F0F6(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF0F6: goto label_1000_F0F6_1F0F6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_F0F6_1F0F6:
    // LES SI,[0x39b7] (1000_F0F6 / 0x1F0F6)
    SI = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // MOV word ptr [DI],SI (1000_F0FA / 0x1F0FA)
    UInt16[DS, DI] = SI;
    // MOV word ptr [DI + 0x2],ES (1000_F0FC / 0x1F0FC)
    UInt16[DS, (ushort)(DI + 0x2)] = ES;
    // Function call generated as ASM continues to next function entry point without return
    return bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(0);
  }
  
  public Action bump_allocate_bump_cx_bytes_ida_1000_F0FF_1F0FF(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF0FF: goto label_1000_F0FF_1F0FF;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_F0FF_1F0FF:
    // MOV AX,CX (1000_F0FF / 0x1F0FF)
    AX = CX;
    // ADD AX,0xf (1000_F101 / 0x1F101)
    // AX += 0xF;
    AX = Alu.Add16(AX, 0xF);
    // RCR AX,1 (1000_F104 / 0x1F104)
    AX = Alu.Rcr16(AX, 1);
    // SHR AX,1 (1000_F106 / 0x1F106)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_F108 / 0x1F108)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_F10A / 0x1F10A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD word ptr [0x39b9],AX (1000_F10C / 0x1F10C)
    // UInt16[DS, 0x39B9] += AX;
    UInt16[DS, 0x39B9] = Alu.Add16(UInt16[DS, 0x39B9], AX);
    // PUSH AX (1000_F110 / 0x1F110)
    Stack.Push(AX);
    // MOV AX,[0x39b9] (1000_F111 / 0x1F111)
    AX = UInt16[DS, 0x39B9];
    // CMP AX,word ptr [0xce68] (1000_F114 / 0x1F114)
    Alu.Sub16(AX, UInt16[DS, 0xCE68]);
    // POP AX (1000_F118 / 0x1F118)
    AX = Stack.Pop();
    // JA 0x1000:f131 (1000_F119 / 0x1F119)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_F131_1F131;
    }
    // RET  (1000_F11B / 0x1F11B)
    return NearRet();
    label_1000_F131_1F131:
    // MOV AX,0x1f4b (1000_F131 / 0x1F131)
    AX = 0x1F4B;
    // MOV DS,AX (1000_F134 / 0x1F134)
    DS = AX;
    // MOV word ptr [0x3cbc],0x368d (1000_F136 / 0x1F136)
    UInt16[DS, 0x3CBC] = 0x368D;
    // JMP 0x1000:003a (1000_F13C / 0x1F13C)
    // Jump converted to non entry function call
    return entry_1000_0000_10000(0x1003A - cs1 * 0x10);
  }
  
  public Action alloc_cx_pages_to_di_ida_1000_F11C_1F11C(int gotoTarget) {
    label_1000_F11C_1F11C:
    // LES DI,[0x39b7] (1000_F11C / 0x1F11C)
    DI = UInt16[DS, 0x39B7];
    ES = UInt16[DS, 0x39B9];
    // MOV AX,ES (1000_F120 / 0x1F120)
    AX = ES;
    // ADD AX,CX (1000_F122 / 0x1F122)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // CMP AX,word ptr [0xce68] (1000_F124 / 0x1F124)
    Alu.Sub16(AX, UInt16[DS, 0xCE68]);
    // JNC 0x1000:f12b (1000_F128 / 0x1F128)
    if(!CarryFlag) {
      goto label_1000_F12B_1F12B;
    }
    // RET  (1000_F12A / 0x1F12A)
    return NearRet();
    label_1000_F12B_1F12B:
    // CALL 0x1000:f13f (1000_F12B / 0x1F12B)
    NearCall(cs1, 0xF12E, allocator_attempt_to_free_space_ida_1000_F13F_1F13F);
    // JMP 0x1000:f11c (1000_F12E / 0x1F12E)
    goto label_1000_F11C_1F11C;
    // Function call generated as ASM continues to next function body without return
    return allocator_attempt_to_free_space_ida_1000_F13F_1F13F(0x1F130 - cs1 * 0x10);
  }
  
  public Action allocator_attempt_to_free_space_ida_1000_F13F_1F13F(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF130: break;
      case 0: goto entry; break; //
    }
    label_1000_F130_1F130:
    // POP CX (1000_F130 / 0x1F130)
    CX = Stack.Pop();
    entry:
    label_1000_F13F_1F13F:
    // PUSH CX (1000_F13F / 0x1F13F)
    Stack.Push(CX);
    // MOV BP,word ptr [0x2] (1000_F140 / 0x1F140)
    BP = UInt16[DS, 0x2];
    // MOV SI,0xd844 (1000_F144 / 0x1F144)
    SI = 0xD844;
    // MOV DI,0xda8c (1000_F147 / 0x1F147)
    DI = 0xDA8C;
    // MOV CX,0x91 (1000_F14A / 0x1F14A)
    CX = 0x91;
    // XOR DX,DX (1000_F14D / 0x1F14D)
    DX = 0;
    // MOV BX,DX (1000_F14F / 0x1F14F)
    BX = DX;
    label_1000_F151_1F151:
    // ADD DI,0x2 (1000_F151 / 0x1F151)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // ADD SI,0x4 (1000_F154 / 0x1F154)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // MOV AX,word ptr [SI + 0x2] (1000_F157 / 0x1F157)
    AX = UInt16[DS, (ushort)(SI + 0x2)];
    // OR AX,AX (1000_F15A / 0x1F15A)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JZ 0x1000:f16a (1000_F15C / 0x1F15C)
    if(ZeroFlag) {
      goto label_1000_F16A_1F16A;
    }
    // MOV AX,BP (1000_F15E / 0x1F15E)
    AX = BP;
    // SUB AX,word ptr [DI] (1000_F160 / 0x1F160)
    // AX -= UInt16[DS, DI];
    AX = Alu.Sub16(AX, UInt16[DS, DI]);
    // CMP AX,DX (1000_F162 / 0x1F162)
    Alu.Sub16(AX, DX);
    // JC 0x1000:f16a (1000_F164 / 0x1F164)
    if(CarryFlag) {
      goto label_1000_F16A_1F16A;
    }
    // MOV DX,AX (1000_F166 / 0x1F166)
    DX = AX;
    // MOV BX,SI (1000_F168 / 0x1F168)
    BX = SI;
    label_1000_F16A_1F16A:
    // LOOP 0x1000:f151 (1000_F16A / 0x1F16A)
    if(--CX != 0) {
      goto label_1000_F151_1F151;
    }
    // OR BX,BX (1000_F16C / 0x1F16C)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x1000:f130 (1000_F16E / 0x1F16E)
    if(ZeroFlag) {
      goto label_1000_F130_1F130;
    }
    // MOV AX,BX (1000_F170 / 0x1F170)
    AX = BX;
    // SUB AX,0xd844 (1000_F172 / 0x1F172)
    // AX -= 0xD844;
    AX = Alu.Sub16(AX, 0xD844);
    // SHR AX,1 (1000_F175 / 0x1F175)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (1000_F177 / 0x1F177)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // CMP AX,word ptr [0x2784] (1000_F179 / 0x1F179)
    Alu.Sub16(AX, UInt16[DS, 0x2784]);
    // JNZ 0x1000:f185 (1000_F17D / 0x1F17D)
    if(!ZeroFlag) {
      goto label_1000_F185_1F185;
    }
    // MOV word ptr [0x2784],0xffff (1000_F17F / 0x1F17F)
    UInt16[DS, 0x2784] = 0xFFFF;
    label_1000_F185_1F185:
    // XOR DX,DX (1000_F185 / 0x1F185)
    DX = 0;
    // XCHG word ptr [BX + 0x2],DX (1000_F187 / 0x1F187)
    ushort tmp_1000_F187 = UInt16[DS, (ushort)(BX + 0x2)];
    UInt16[DS, (ushort)(BX + 0x2)] = DX;
    DX = tmp_1000_F187;
    // MOV SI,0xd84a (1000_F18A / 0x1F18A)
    SI = 0xD84A;
    // MOV CX,0x91 (1000_F18D / 0x1F18D)
    CX = 0x91;
    // MOV BX,0x8000 (1000_F190 / 0x1F190)
    BX = 0x8000;
    label_1000_F193_1F193:
    // LODSW SI (1000_F193 / 0x1F193)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD SI,0x2 (1000_F194 / 0x1F194)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // SUB AX,DX (1000_F197 / 0x1F197)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JC 0x1000:f1a1 (1000_F199 / 0x1F199)
    if(CarryFlag) {
      goto label_1000_F1A1_1F1A1;
    }
    // CMP AX,BX (1000_F19B / 0x1F19B)
    Alu.Sub16(AX, BX);
    // JNC 0x1000:f1a1 (1000_F19D / 0x1F19D)
    if(!CarryFlag) {
      goto label_1000_F1A1_1F1A1;
    }
    // MOV BX,AX (1000_F19F / 0x1F19F)
    BX = AX;
    label_1000_F1A1_1F1A1:
    // LOOP 0x1000:f193 (1000_F1A1 / 0x1F1A1)
    if(--CX != 0) {
      goto label_1000_F193_1F193;
    }
    // OR BX,BX (1000_F1A3 / 0x1F1A3)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JS 0x1000:f1f5 (1000_F1A5 / 0x1F1A5)
    if(SignFlag) {
      goto label_1000_F1F5_1F1F5;
    }
    // MOV SI,0xd846 (1000_F1A7 / 0x1F1A7)
    SI = 0xD846;
    // MOV CX,0x91 (1000_F1AA / 0x1F1AA)
    CX = 0x91;
    label_1000_F1AD_1F1AD:
    // ADD SI,0x4 (1000_F1AD / 0x1F1AD)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // CMP word ptr [SI],DX (1000_F1B0 / 0x1F1B0)
    Alu.Sub16(UInt16[DS, SI], DX);
    // JC 0x1000:f1b6 (1000_F1B2 / 0x1F1B2)
    if(CarryFlag) {
      goto label_1000_F1B6_1F1B6;
    }
    // SUB word ptr [SI],BX (1000_F1B4 / 0x1F1B4)
    // UInt16[DS, SI] -= BX;
    UInt16[DS, SI] = Alu.Sub16(UInt16[DS, SI], BX);
    label_1000_F1B6_1F1B6:
    // LOOP 0x1000:f1ad (1000_F1B6 / 0x1F1B6)
    if(--CX != 0) {
      goto label_1000_F1AD_1F1AD;
    }
    // MOV SI,0xdbb2 (1000_F1B8 / 0x1F1B8)
    SI = 0xDBB2;
    // CMP word ptr [SI],DX (1000_F1BB / 0x1F1BB)
    Alu.Sub16(UInt16[DS, SI], DX);
    // JC 0x1000:f1c1 (1000_F1BD / 0x1F1BD)
    if(CarryFlag) {
      goto label_1000_F1C1_1F1C1;
    }
    // SUB word ptr [SI],BX (1000_F1BF / 0x1F1BF)
    // UInt16[DS, SI] -= BX;
    UInt16[DS, SI] = Alu.Sub16(UInt16[DS, SI], BX);
    label_1000_F1C1_1F1C1:
    // MOV ES,DX (1000_F1C1 / 0x1F1C1)
    ES = DX;
    // ADD DX,BX (1000_F1C3 / 0x1F1C3)
    // DX += BX;
    DX = Alu.Add16(DX, BX);
    // MOV DS,DX (1000_F1C5 / 0x1F1C5)
    DS = DX;
    // XOR SI,SI (1000_F1C7 / 0x1F1C7)
    SI = 0;
    // MOV DI,SI (1000_F1C9 / 0x1F1C9)
    DI = SI;
    // MOV AX,SS:[0x39b9] (1000_F1CB / 0x1F1CB)
    AX = UInt16[SS, 0x39B9];
    // SUB AX,DX (1000_F1CF / 0x1F1CF)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // CMP AX,0x1000 (1000_F1D1 / 0x1F1D1)
    Alu.Sub16(AX, 0x1000);
    // JBE 0x1000:f1e3 (1000_F1D4 / 0x1F1D4)
    if(CarryFlag || ZeroFlag) {
      goto label_1000_F1E3_1F1E3;
    }
    // MOV CX,0x8000 (1000_F1D6 / 0x1F1D6)
    CX = 0x8000;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_F1D9 / 0x1F1D9)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOV DX,ES (1000_F1DB / 0x1F1DB)
    DX = ES;
    // ADD DX,0x1000 (1000_F1DD / 0x1F1DD)
    // DX += 0x1000;
    DX = Alu.Add16(DX, 0x1000);
    // JMP 0x1000:f1c1 (1000_F1E1 / 0x1F1E1)
    goto label_1000_F1C1_1F1C1;
    label_1000_F1E3_1F1E3:
    // MOV CX,AX (1000_F1E3 / 0x1F1E3)
    CX = AX;
    // SHL CX,1 (1000_F1E5 / 0x1F1E5)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // SHL CX,1 (1000_F1E7 / 0x1F1E7)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // SHL CX,1 (1000_F1E9 / 0x1F1E9)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (1000_F1EB / 0x1F1EB)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // PUSH SS (1000_F1ED / 0x1F1ED)
    Stack.Push(SS);
    // POP DS (1000_F1EE / 0x1F1EE)
    DS = Stack.Pop();
    // SUB word ptr [0x39b9],BX (1000_F1EF / 0x1F1EF)
    // UInt16[DS, 0x39B9] -= BX;
    UInt16[DS, 0x39B9] = Alu.Sub16(UInt16[DS, 0x39B9], BX);
    // POP CX (1000_F1F3 / 0x1F1F3)
    CX = Stack.Pop();
    // RET  (1000_F1F4 / 0x1F1F4)
    return NearRet();
    label_1000_F1F5_1F1F5:
    // MOV word ptr [0x39b9],DX (1000_F1F5 / 0x1F1F5)
    UInt16[DS, 0x39B9] = DX;
    // POP CX (1000_F1F9 / 0x1F1F9)
    CX = Stack.Pop();
    // RET  (1000_F1FA / 0x1F1FA)
    return NearRet();
  }
  
  public Action open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF228: goto label_1000_F228_1F228;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_F1FB_1F1FB:
    // PUSH DX (1000_F1FB / 0x1F1FB)
    Stack.Push(DX);
    // CALL 0x1000:f2a7 (1000_F1FC / 0x1F1FC)
    NearCall(cs1, 0xF1FF, seek_dune_dat_to_res_dsdx_ida_1000_F2A7_1F2A7);
    // POP SI (1000_F1FF / 0x1F1FF)
    SI = Stack.Pop();
    // JNC 0x1000:f228 (1000_F200 / 0x1F200)
    if(!CarryFlag) {
      // JNC target is RET, inlining.
      // RET  (1000_F228 / 0x1F228)
      return NearRet();
    }
    // MOV DX,SI (1000_F202 / 0x1F202)
    DX = SI;
    label_1000_F228_1F228:
    // RET  (1000_F228 / 0x1F228)
    return NearRet();
  }
  
  public Action unknown_1000_F204_1F204(int gotoTarget) {
    label_1000_F204_1F204:
    // PUSH DX (1000_F204 / 0x1F204)
    Stack.Push(DX);
    // CALL 0x1000:f2fc (1000_F205 / 0x1F205)
    NearCall(cs1, 0xF208, strcpy_to_filename_buf_ida_1000_F2FC_1F2FC);
    // MOV AX,0x3d00 (1000_F208 / 0x1F208)
    AX = 0x3D00;
    // INT 0x21 (1000_F20B / 0x1F20B)
    Interrupt(0x21);
    // POP DX (1000_F20D / 0x1F20D)
    DX = Stack.Pop();
    // JC 0x1000:f228 (1000_F20E / 0x1F20E)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (1000_F228 / 0x1F228)
      return NearRet();
    }
    // MOV BX,AX (1000_F210 / 0x1F210)
    BX = AX;
    // XOR CX,CX (1000_F212 / 0x1F212)
    CX = 0;
    // MOV DX,CX (1000_F214 / 0x1F214)
    DX = CX;
    // MOV AX,0x4202 (1000_F216 / 0x1F216)
    AX = 0x4202;
    // INT 0x21 (1000_F219 / 0x1F219)
    Interrupt(0x21);
    // PUSH AX (1000_F21B / 0x1F21B)
    Stack.Push(AX);
    // PUSH DX (1000_F21C / 0x1F21C)
    Stack.Push(DX);
    // XOR CX,CX (1000_F21D / 0x1F21D)
    CX = 0;
    // MOV DX,CX (1000_F21F / 0x1F21F)
    DX = CX;
    // MOV AX,0x4200 (1000_F221 / 0x1F221)
    AX = 0x4200;
    // INT 0x21 (1000_F224 / 0x1F224)
    Interrupt(0x21);
    // POP BP (1000_F226 / 0x1F226)
    BP = Stack.Pop();
    // POP CX (1000_F227 / 0x1F227)
    CX = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB(0x1F228 - cs1 * 0x10);
  }
  
  public Action open_res_or_file_or_die_ida_1000_F229_1F229(int gotoTarget) {
    label_1000_F229_1F229:
    // CALL 0x1000:f1fb (1000_F229 / 0x1F229)
    NearCall(cs1, 0xF22C, open_res_or_file_to_dx_size_ax_ida_1000_F1FB_1F1FB);
    // JC 0x1000:f22f (1000_F22C / 0x1F22C)
    if(CarryFlag) {
      goto label_1000_F22F_1F22F;
    }
    // RET  (1000_F22E / 0x1F22E)
    return NearRet();
    label_1000_F22F_1F22F:
    // MOV SI,DX (1000_F22F / 0x1F22F)
    SI = DX;
    // MOV DI,0x36c4 (1000_F231 / 0x1F231)
    DI = 0x36C4;
    // MOV CX,0xc (1000_F234 / 0x1F234)
    CX = 0xC;
    // PUSH DS (1000_F237 / 0x1F237)
    Stack.Push(DS);
    // POP ES (1000_F238 / 0x1F238)
    ES = Stack.Pop();
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (1000_F239 / 0x1F239)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV word ptr [0x3cbc],0x36b4 (1000_F23B / 0x1F23B)
    UInt16[DS, 0x3CBC] = 0x36B4;
    // JMP 0x1000:003a (1000_F241 / 0x1F241)
    // Jump converted to non entry function call
    return entry_1000_0000_10000(0x1003A - cs1 * 0x10);
  }
  
  public Action read_resource_to_esdi_ida_1000_F244_1F244(int gotoTarget) {
    label_1000_F244_1F244:
    // PUSH DX (1000_F244 / 0x1F244)
    Stack.Push(DX);
    // CALL 0x1000:f229 (1000_F245 / 0x1F245)
    NearCall(cs1, 0xF248, open_res_or_file_or_die_ida_1000_F229_1F229);
    // POP DX (1000_F248 / 0x1F248)
    DX = Stack.Pop();
    // CMP BX,word ptr [0xdbba] (1000_F249 / 0x1F249)
    Alu.Sub16(BX, UInt16[DS, 0xDBBA]);
    // JNZ 0x1000:f260 (1000_F24D / 0x1F24D)
    if(!ZeroFlag) {
      // Jump converted to entry function call
      return read_ffff_to_esdi_and_close_ida_1000_F260_1F260(0);
    }
    // CALL 0x1000:f2ea (1000_F24F / 0x1F24F)
    NearCall(cs1, 0xF252, read_dune_dat_cx_to_esdi_ida_1000_F2EA_1F2EA);
    // JC 0x1000:f244 (1000_F252 / 0x1F252)
    if(CarryFlag) {
      goto label_1000_F244_1F244;
    }
    // RET  (1000_F254 / 0x1F254)
    return NearRet();
  }
  
  public Action open_nonres_file_ida_1000_F255_1F255(int gotoTarget) {
    label_1000_F255_1F255:
    // PUSH DX (1000_F255 / 0x1F255)
    Stack.Push(DX);
    // PUSH DI (1000_F256 / 0x1F256)
    Stack.Push(DI);
    // PUSH ES (1000_F257 / 0x1F257)
    Stack.Push(ES);
    // CALL 0x1000:f204 (1000_F258 / 0x1F258)
    NearCall(cs1, 0xF25B, unknown_1000_F204_1F204);
    // JC 0x1000:f22f (1000_F25B / 0x1F25B)
    if(CarryFlag) {
      // Jump converted to non entry function call
      return open_res_or_file_or_die_ida_1000_F229_1F229(0x1F22F - cs1 * 0x10);
    }
    // POP ES (1000_F25D / 0x1F25D)
    ES = Stack.Pop();
    // POP DI (1000_F25E / 0x1F25E)
    DI = Stack.Pop();
    // POP DX (1000_F25F / 0x1F25F)
    DX = Stack.Pop();
    // Function call generated as ASM continues to next function entry point without return
    return read_ffff_to_esdi_and_close_ida_1000_F260_1F260(0);
  }
  
  public Action read_ffff_to_esdi_and_close_ida_1000_F260_1F260(int gotoTarget) {
    label_1000_F260_1F260:
    // PUSH DX (1000_F260 / 0x1F260)
    Stack.Push(DX);
    // PUSH DI (1000_F261 / 0x1F261)
    Stack.Push(DI);
    // PUSH ES (1000_F262 / 0x1F262)
    Stack.Push(ES);
    // PUSH DS (1000_F263 / 0x1F263)
    Stack.Push(DS);
    // PUSH ES (1000_F264 / 0x1F264)
    Stack.Push(ES);
    // POP DS (1000_F265 / 0x1F265)
    DS = Stack.Pop();
    // MOV CX,0xffff (1000_F266 / 0x1F266)
    CX = 0xFFFF;
    // MOV DX,DI (1000_F269 / 0x1F269)
    DX = DI;
    // MOV AH,0x3f (1000_F26B / 0x1F26B)
    AH = 0x3F;
    // INT 0x21 (1000_F26D / 0x1F26D)
    Interrupt(0x21);
    // POP DS (1000_F26F / 0x1F26F)
    DS = Stack.Pop();
    // MOV CX,AX (1000_F270 / 0x1F270)
    CX = AX;
    // PUSHF  (1000_F272 / 0x1F272)
    Stack.Push(FlagRegister);
    // MOV AH,0x3e (1000_F273 / 0x1F273)
    AH = 0x3E;
    // INT 0x21 (1000_F275 / 0x1F275)
    Interrupt(0x21);
    // POPF  (1000_F277 / 0x1F277)
    FlagRegister = Stack.Pop();
    // POP ES (1000_F278 / 0x1F278)
    ES = Stack.Pop();
    // POP DI (1000_F279 / 0x1F279)
    DI = Stack.Pop();
    // POP DX (1000_F27A / 0x1F27A)
    DX = Stack.Pop();
    // RET  (1000_F27B / 0x1F27B)
    return NearRet();
  }
  
  public Action seek_dune_dat_to_res_dsdx_ida_1000_F2A7_1F2A7(int gotoTarget) {
    label_1000_F2A7_1F2A7:
    // PUSH DI (1000_F2A7 / 0x1F2A7)
    Stack.Push(DI);
    // PUSH ES (1000_F2A8 / 0x1F2A8)
    Stack.Push(ES);
    // CMP word ptr [0xdbba],0x1 (1000_F2A9 / 0x1F2A9)
    Alu.Sub16(UInt16[DS, 0xDBBA], 0x1);
    // JC 0x1000:f2d3 (1000_F2AE / 0x1F2AE)
    if(CarryFlag) {
      goto label_1000_F2D3_1F2D3;
    }
    // MOV SI,DX (1000_F2B0 / 0x1F2B0)
    SI = DX;
    // CALL 0x1000:f314 (1000_F2B2 / 0x1F2B2)
    NearCall(cs1, 0xF2B5, locate_res_by_name_dssi_ida_1000_F314_1F314);
    // JC 0x1000:f2d3 (1000_F2B5 / 0x1F2B5)
    if(CarryFlag) {
      goto label_1000_F2D3_1F2D3;
    }
    // CALL 0x1000:f3a7 (1000_F2B7 / 0x1F2B7)
    NearCall(cs1, 0xF2BA, unknown_1000_F3A7_1F3A7);
    // JC 0x1000:f2d3 (1000_F2BA / 0x1F2BA)
    if(CarryFlag) {
      goto label_1000_F2D3_1F2D3;
    }
    // XOR CX,CX (1000_F2BC / 0x1F2BC)
    CX = 0;
    // MOV CL,byte ptr ES:[DI + 0x5] (1000_F2BE / 0x1F2BE)
    CL = UInt8[ES, (ushort)(DI + 0x5)];
    // MOV BP,CX (1000_F2C2 / 0x1F2C2)
    BP = CX;
    // MOV CX,word ptr ES:[DI + 0x3] (1000_F2C4 / 0x1F2C4)
    CX = UInt16[ES, (ushort)(DI + 0x3)];
    // MOV AX,word ptr ES:[DI + 0x6] (1000_F2C8 / 0x1F2C8)
    AX = UInt16[ES, (ushort)(DI + 0x6)];
    // MOV DX,word ptr ES:[DI + 0x8] (1000_F2CC / 0x1F2CC)
    DX = UInt16[ES, (ushort)(DI + 0x8)];
    // CALL 0x1000:f2d6 (1000_F2D0 / 0x1F2D0)
    NearCall(cs1, 0xF2D3, seek_dune_dat_offset_dxax_ida_1000_F2D6_1F2D6);
    label_1000_F2D3_1F2D3:
    // POP ES (1000_F2D3 / 0x1F2D3)
    ES = Stack.Pop();
    // POP DI (1000_F2D4 / 0x1F2D4)
    DI = Stack.Pop();
    // RET  (1000_F2D5 / 0x1F2D5)
    return NearRet();
  }
  
  public Action seek_dune_dat_offset_dxax_ida_1000_F2D6_1F2D6(int gotoTarget) {
    label_1000_F2D6_1F2D6:
    // PUSH CX (1000_F2D6 / 0x1F2D6)
    Stack.Push(CX);
    // MOV BX,word ptr SS:[0xdbba] (1000_F2D7 / 0x1F2D7)
    BX = UInt16[SS, 0xDBBA];
    // MOV CX,DX (1000_F2DC / 0x1F2DC)
    CX = DX;
    // MOV DX,AX (1000_F2DE / 0x1F2DE)
    DX = AX;
    // MOV AX,0x4200 (1000_F2E0 / 0x1F2E0)
    AX = 0x4200;
    // INT 0x21 (1000_F2E3 / 0x1F2E3)
    Interrupt(0x21);
    // POP CX (1000_F2E5 / 0x1F2E5)
    CX = Stack.Pop();
    // RET  (1000_F2E6 / 0x1F2E6)
    return NearRet();
  }
  
  public Action read_dune_dat_cx_to_esdi_ida_1000_F2EA_1F2EA(int gotoTarget) {
    label_1000_F2EA_1F2EA:
    // PUSH DS (1000_F2EA / 0x1F2EA)
    Stack.Push(DS);
    // PUSH ES (1000_F2EB / 0x1F2EB)
    Stack.Push(ES);
    // POP DS (1000_F2EC / 0x1F2EC)
    DS = Stack.Pop();
    // MOV BX,word ptr SS:[0xdbba] (1000_F2ED / 0x1F2ED)
    BX = UInt16[SS, 0xDBBA];
    // MOV DX,DI (1000_F2F2 / 0x1F2F2)
    DX = DI;
    // MOV AH,0x3f (1000_F2F4 / 0x1F2F4)
    AH = 0x3F;
    // INT 0x21 (1000_F2F6 / 0x1F2F6)
    Interrupt(0x21);
    // CMP AX,CX (1000_F2F8 / 0x1F2F8)
    Alu.Sub16(AX, CX);
    // POP DS (1000_F2FA / 0x1F2FA)
    DS = Stack.Pop();
    // RET  (1000_F2FB / 0x1F2FB)
    return NearRet();
  }
  
  public Action strcpy_to_filename_buf_ida_1000_F2FC_1F2FC(int gotoTarget) {
    label_1000_F2FC_1F2FC:
    // PUSH SI (1000_F2FC / 0x1F2FC)
    Stack.Push(SI);
    // PUSH DI (1000_F2FD / 0x1F2FD)
    Stack.Push(DI);
    // MOV SI,DX (1000_F2FE / 0x1F2FE)
    SI = DX;
    // MOV DI,word ptr [0x38a6] (1000_F300 / 0x1F300)
    DI = UInt16[DS, 0x38A6];
    label_1000_F304_1F304:
    // MOV AL,byte ptr [SI] (1000_F304 / 0x1F304)
    AL = UInt8[DS, SI];
    // INC SI (1000_F306 / 0x1F306)
    SI = Alu.Inc16(SI);
    // MOV byte ptr [DI],AL (1000_F307 / 0x1F307)
    UInt8[DS, DI] = AL;
    // INC DI (1000_F309 / 0x1F309)
    DI = Alu.Inc16(DI);
    // OR AL,AL (1000_F30A / 0x1F30A)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x1000:f304 (1000_F30C / 0x1F30C)
    if(!ZeroFlag) {
      goto label_1000_F304_1F304;
    }
    // POP DI (1000_F30E / 0x1F30E)
    DI = Stack.Pop();
    // POP SI (1000_F30F / 0x1F30F)
    SI = Stack.Pop();
    // MOV DX,0x3826 (1000_F310 / 0x1F310)
    DX = 0x3826;
    // RET  (1000_F313 / 0x1F313)
    return NearRet();
  }
  
  public Action locate_res_by_name_dssi_ida_1000_F314_1F314(int gotoTarget) {
    label_1000_F314_1F314:
    // PUSH SS (1000_F314 / 0x1F314)
    Stack.Push(SS);
    // POP ES (1000_F315 / 0x1F315)
    ES = Stack.Pop();
    // CMP word ptr [SI + 0x2],0x505c (1000_F316 / 0x1F316)
    Alu.Sub16(UInt16[DS, (ushort)(SI + 0x2)], 0x505C);
    // JZ 0x1000:f36c (1000_F31B / 0x1F31B)
    if(ZeroFlag) {
      goto label_1000_F36C_1F36C;
    }
    // PUSH SI (1000_F31D / 0x1F31D)
    Stack.Push(SI);
    // MOV CX,0x10 (1000_F31E / 0x1F31E)
    CX = 0x10;
    // MOV DX,CX (1000_F321 / 0x1F321)
    DX = CX;
    label_1000_F323_1F323:
    // LODSB SI (1000_F323 / 0x1F323)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (1000_F324 / 0x1F324)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // LOOPNZ 0x1000:f323 (1000_F326 / 0x1F326)
    if(--CX != 0 && !ZeroFlag) {
      goto label_1000_F323_1F323;
    }
    // JNZ 0x1000:f32b (1000_F328 / 0x1F328)
    if(!ZeroFlag) {
      goto label_1000_F32B_1F32B;
    }
    // INC CX (1000_F32A / 0x1F32A)
    CX = Alu.Inc16(CX);
    label_1000_F32B_1F32B:
    // SUB CX,0x10 (1000_F32B / 0x1F32B)
    // CX -= 0x10;
    CX = Alu.Sub16(CX, 0x10);
    // NEG CX (1000_F32E / 0x1F32E)
    CX = Alu.Sub16(0, CX);
    // POP SI (1000_F330 / 0x1F330)
    SI = Stack.Pop();
    // XOR DX,DX (1000_F331 / 0x1F331)
    DX = 0;
    // MOV AX,[0xce78] (1000_F333 / 0x1F333)
    AX = UInt16[DS, 0xCE78];
    // MOV DI,AX (1000_F336 / 0x1F336)
    DI = AX;
    // SHL DI,1 (1000_F338 / 0x1F338)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV DI,word ptr [DI + 0x31ff] (1000_F33A / 0x1F33A)
    DI = UInt16[DS, (ushort)(DI + 0x31FF)];
    // ADD DI,0x2 (1000_F33E / 0x1F33E)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // PUSH CX (1000_F341 / 0x1F341)
    Stack.Push(CX);
    // PUSH SI (1000_F342 / 0x1F342)
    Stack.Push(SI);
    while (CX-- != 0) {
      // CMPSB ES:DI,SI (1000_F343 / 0x1F343)
      Alu.Sub8(UInt8[DS, SI], UInt8[ES, DI]);
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == true) {
        break;
      }
    }
    // POP SI (1000_F345 / 0x1F345)
    SI = Stack.Pop();
    // POP CX (1000_F346 / 0x1F346)
    CX = Stack.Pop();
    // JZ 0x1000:f3a5 (1000_F347 / 0x1F347)
    if(ZeroFlag) {
      goto label_1000_F3A5_1F3A5;
    }
    // MOV BX,0x31ff (1000_F349 / 0x1F349)
    BX = 0x31FF;
    // MOV BP,0xf7 (1000_F34C / 0x1F34C)
    BP = 0xF7;
    label_1000_F34F_1F34F:
    // MOV DI,word ptr ES:[BX] (1000_F34F / 0x1F34F)
    DI = UInt16[ES, BX];
    // MOV AX,BX (1000_F352 / 0x1F352)
    AX = BX;
    // SUB AX,0x31ff (1000_F354 / 0x1F354)
    // AX -= 0x31FF;
    AX = Alu.Sub16(AX, 0x31FF);
    // SHR AX,1 (1000_F357 / 0x1F357)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD BX,0x2 (1000_F359 / 0x1F359)
    // BX += 0x2;
    BX = Alu.Add16(BX, 0x2);
    // ADD DI,0x2 (1000_F35C / 0x1F35C)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // PUSH CX (1000_F35F / 0x1F35F)
    Stack.Push(CX);
    // PUSH SI (1000_F360 / 0x1F360)
    Stack.Push(SI);
    while (CX-- != 0) {
      // CMPSB ES:DI,SI (1000_F361 / 0x1F361)
      Alu.Sub8(UInt8[DS, SI], UInt8[ES, DI]);
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == true) {
        break;
      }
    }
    // POP SI (1000_F363 / 0x1F363)
    SI = Stack.Pop();
    // POP CX (1000_F364 / 0x1F364)
    CX = Stack.Pop();
    // JZ 0x1000:f3a5 (1000_F365 / 0x1F365)
    if(ZeroFlag) {
      goto label_1000_F3A5_1F3A5;
    }
    // DEC BP (1000_F367 / 0x1F367)
    BP = Alu.Dec16(BP);
    // JNZ 0x1000:f34f (1000_F368 / 0x1F368)
    if(!ZeroFlag) {
      goto label_1000_F34F_1F34F;
    }
    // STC  (1000_F36A / 0x1F36A)
    CarryFlag = true;
    // RET  (1000_F36B / 0x1F36B)
    return NearRet();
    label_1000_F36C_1F36C:
    // ADD SI,0x4 (1000_F36C / 0x1F36C)
    // SI += 0x4;
    SI = Alu.Add16(SI, 0x4);
    // LODSB SI (1000_F36F / 0x1F36F)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB AL,0x40 (1000_F370 / 0x1F370)
    // AL -= 0x40;
    AL = Alu.Sub8(AL, 0x40);
    // MOV DL,AL (1000_F372 / 0x1F372)
    DL = AL;
    // XOR BX,BX (1000_F374 / 0x1F374)
    BX = 0;
    // MOV CX,0x3 (1000_F376 / 0x1F376)
    CX = 0x3;
    label_1000_F379_1F379:
    // LODSB SI (1000_F379 / 0x1F379)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0x41 (1000_F37A / 0x1F37A)
    Alu.Sub8(AL, 0x41);
    // JC 0x1000:f380 (1000_F37C / 0x1F37C)
    if(CarryFlag) {
      goto label_1000_F380_1F380;
    }
    // SUB AL,0x7 (1000_F37E / 0x1F37E)
    // AL -= 0x7;
    AL = Alu.Sub8(AL, 0x7);
    label_1000_F380_1F380:
    // AND AL,0xf (1000_F380 / 0x1F380)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // SHL BX,1 (1000_F382 / 0x1F382)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_F384 / 0x1F384)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_F386 / 0x1F386)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (1000_F388 / 0x1F388)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // OR BL,AL (1000_F38A / 0x1F38A)
    // BL |= AL;
    BL = Alu.Or8(BL, AL);
    // LOOP 0x1000:f379 (1000_F38C / 0x1F38C)
    if(--CX != 0) {
      goto label_1000_F379_1F379;
    }
    // LODSB SI (1000_F38E / 0x1F38E)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,0x4f (1000_F38F / 0x1F38F)
    Alu.Sub8(AL, 0x4F);
    // CMC  (1000_F391 / 0x1F391)
    CarryFlag = !CarryFlag;
    // RCL DL,1 (1000_F392 / 0x1F392)
    DL = Alu.Rcl8(DL, 1);
    // LODSB SI (1000_F394 / 0x1F394)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB AL,0x41 (1000_F395 / 0x1F395)
    // AL -= 0x41;
    AL = Alu.Sub8(AL, 0x41);
    // JC 0x1000:f3a3 (1000_F397 / 0x1F397)
    if(CarryFlag) {
      goto label_1000_F3A3_1F3A3;
    }
    // SHL AL,1 (1000_F399 / 0x1F399)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_F39B / 0x1F39B)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_F39D / 0x1F39D)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (1000_F39F / 0x1F39F)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // OR BH,AL (1000_F3A1 / 0x1F3A1)
    // BH |= AL;
    BH = Alu.Or8(BH, AL);
    label_1000_F3A3_1F3A3:
    // MOV AX,BX (1000_F3A3 / 0x1F3A3)
    AX = BX;
    label_1000_F3A5_1F3A5:
    // CLC  (1000_F3A5 / 0x1F3A5)
    CarryFlag = false;
    // RET  (1000_F3A6 / 0x1F3A6)
    return NearRet();
  }
  
  public Action unknown_1000_F3A7_1F3A7(int gotoTarget) {
    label_1000_F3A7_1F3A7:
    // LES DI,SS:[0xdbbc] (1000_F3A7 / 0x1F3A7)
    DI = UInt16[SS, 0xDBBC];
    ES = UInt16[SS, 0xDBBE];
    // SUB DI,0x5 (1000_F3AC / 0x1F3AC)
    // DI -= 0x5;
    DI = Alu.Sub16(DI, 0x5);
    label_1000_F3AF_1F3AF:
    // ADD DI,0x5 (1000_F3AF / 0x1F3AF)
    // DI += 0x5;
    DI = Alu.Add16(DI, 0x5);
    // CMP DL,byte ptr ES:[DI + 0x4] (1000_F3B2 / 0x1F3B2)
    Alu.Sub8(DL, UInt8[ES, (ushort)(DI + 0x4)]);
    // JNZ 0x1000:f3bc (1000_F3B6 / 0x1F3B6)
    if(!ZeroFlag) {
      goto label_1000_F3BC_1F3BC;
    }
    // CMP AX,word ptr ES:[DI + 0x2] (1000_F3B8 / 0x1F3B8)
    Alu.Sub16(AX, UInt16[ES, (ushort)(DI + 0x2)]);
    label_1000_F3BC_1F3BC:
    // JA 0x1000:f3af (1000_F3BC / 0x1F3BC)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_F3AF_1F3AF;
    }
    // MOV DI,word ptr ES:[DI] (1000_F3BE / 0x1F3BE)
    DI = UInt16[ES, DI];
    // SUB DI,0xa (1000_F3C1 / 0x1F3C1)
    // DI -= 0xA;
    DI = Alu.Sub16(DI, 0xA);
    label_1000_F3C4_1F3C4:
    // ADD DI,0xa (1000_F3C4 / 0x1F3C4)
    // DI += 0xA;
    DI = Alu.Add16(DI, 0xA);
    // CMP DL,byte ptr ES:[DI + 0x2] (1000_F3C7 / 0x1F3C7)
    Alu.Sub8(DL, UInt8[ES, (ushort)(DI + 0x2)]);
    // JNZ 0x1000:f3d0 (1000_F3CB / 0x1F3CB)
    if(!ZeroFlag) {
      goto label_1000_F3D0_1F3D0;
    }
    // CMP AX,word ptr ES:[DI] (1000_F3CD / 0x1F3CD)
    Alu.Sub16(AX, UInt16[ES, DI]);
    label_1000_F3D0_1F3D0:
    // JA 0x1000:f3c4 (1000_F3D0 / 0x1F3D0)
    if(!CarryFlag && !ZeroFlag) {
      goto label_1000_F3C4_1F3C4;
    }
    // RET  (1000_F3D2 / 0x1F3D2)
    return NearRet();
  }
  
  public Action hsq_decomp_skip_header_dssi_to_esdi_ida_1000_F403_1F403(int gotoTarget) {
    switch(gotoTarget) {
      case 0xF403: goto label_1000_F403_1F403;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_1000_F403_1F403:
    // PUSH CX (1000_F403 / 0x1F403)
    Stack.Push(CX);
    // PUSH DI (1000_F404 / 0x1F404)
    Stack.Push(DI);
    // PUSH DS (1000_F405 / 0x1F405)
    Stack.Push(DS);
    // ADD SI,0x6 (1000_F406 / 0x1F406)
    // SI += 0x6;
    SI = Alu.Add16(SI, 0x6);
    // XOR BP,BP (1000_F409 / 0x1F409)
    BP = 0;
    // JMP 0x1000:f435 (1000_F40B / 0x1F40B)
    // Jump converted to non entry function call
    return read_and_maybe_hsq_ida_1000_F0D6_1F0D6(0x1F435 - cs1 * 0x10);
  }
  
  public Action VgaFunc00SetMode_334B_0100_335B0(int gotoTarget) {
    label_334B_0100_335B0:
    // JMP 0x3000:3e17 (334B_0100 / 0x335B0)
    // Jump converted to entry function call
    return spice86_label_334B_0967_33E17(0);
  }
  
  public Action VgaFunc01GetInfoInAxCxBp_334B_0103_335B3(int gotoTarget) {
    label_334B_0103_335B3:
    // JMP 0x3000:3e89 (334B_0103 / 0x335B3)
    // Jump converted to entry function call
    return not_observed_334B_09D9_033E89(0);
  }
  
  public Action unknown_334B_0106_335B6(int gotoTarget) {
    label_334B_0106_335B6:
    // JMP 0x3000:3e92 (334B_0106 / 0x335B6)
    // Jump converted to entry function call
    return spice86_label_334B_09E2_33E92(0);
  }
  
  public Action VgaFunc03DrawMouseCursor_334B_0109_335B9(int gotoTarget) {
    label_334B_0109_335B9:
    // JMP 0x3000:4d38 (334B_0109 / 0x335B9)
    // Jump converted to entry function call
    return spice86_label_334B_1888_34D38(0);
  }
  
  public Action VgaFunc04RestoreImageUnderMouseCursor_334B_010C_335BC(int gotoTarget) {
    label_334B_010C_335BC:
    // JMP 0x3000:4df0 (334B_010C / 0x335BC)
    // Jump converted to entry function call
    return not_observed_334B_1940_034DF0(0);
  }
  
  public Action VgaFunc05Blit_334B_010F_335BF(int gotoTarget) {
    label_334B_010F_335BF:
    // JMP 0x3000:440b (334B_010F / 0x335BF)
    // Jump converted to entry function call
    return spice86_label_334B_0F5B_3440B(0);
  }
  
  public Action unknown_334B_0112_335C2(int gotoTarget) {
    label_334B_0112_335C2:
    // JMP 0x3000:4902 (334B_0112 / 0x335C2)
    // Jump converted to entry function call
    return spice86_label_334B_1452_34902(0);
  }
  
  public Action unknown_334B_0115_335C5(int gotoTarget) {
    label_334B_0115_335C5:
    // JMP 0x3000:50a5 (334B_0115 / 0x335C5)
    // Jump converted to entry function call
    return spice86_label_334B_1BF5_350A5(0);
  }
  
  public Action VgaFunc08FillWithZeroFor64000AtES_334B_0118_335C8(int gotoTarget) {
    label_334B_0118_335C8:
    // JMP 0x3000:4ea7 (334B_0118 / 0x335C8)
    // Jump converted to entry function call
    return not_observed_334B_19F7_034EA7(0);
  }
  
  public Action unknown_334B_011B_335CB(int gotoTarget) {
    label_334B_011B_335CB:
    // JMP 0x3000:4e29 (334B_011B / 0x335CB)
    // Jump converted to entry function call
    return spice86_label_334B_1979_34E29(0);
  }
  
  public Action unknown_334B_011E_335CE(int gotoTarget) {
    label_334B_011E_335CE:
    // JMP 0x3000:4e2b (334B_011E / 0x335CE)
    // Jump converted to entry function call
    return spice86_label_334B_197B_34E2B(0);
  }
  
  public Action VgaFunc11MemcpyDSToESFor64000_334B_0121_335D1(int gotoTarget) {
    label_334B_0121_335D1:
    // JMP 0x3000:502c (334B_0121 / 0x335D1)
    // Jump converted to entry function call
    return MemcpyDSToESFor64000_334B_1B7C_3502C(0);
  }
  
  public Action VgaFunc12CopyRectangle_334B_0124_335D4(int gotoTarget) {
    label_334B_0124_335D4:
    // JMP 0x3000:503e (334B_0124 / 0x335D4)
    // Jump converted to entry function call
    return CopySquareOfPixels_334B_1B8E_3503E(0);
  }
  
  public Action VgaFunc14CopySquareOfPixelsSiIsSourceSegment_334B_012A_335DA(int gotoTarget) {
    label_334B_012A_335DA:
    // JMP 0x3000:503c (334B_012A / 0x335DA)
    // Jump converted to entry function call
    return not_observed_334B_1B8C_03503C(0);
  }
  
  public Action VgaFunc15MemcpyDSToESFor64000_334B_012D_335DD(int gotoTarget) {
    label_334B_012D_335DD:
    // JMP 0x3000:502c (334B_012D / 0x335DD)
    // Jump converted to entry function call
    return MemcpyDSToESFor64000_334B_1B7C_3502C(0);
  }
  
  public Action VgaFunc16CopySquareOfPixels_334B_0130_335E0(int gotoTarget) {
    label_334B_0130_335E0:
    // JMP 0x3000:503e (334B_0130 / 0x335E0)
    // Jump converted to entry function call
    return CopySquareOfPixels_334B_1B8E_3503E(0);
  }
  
  public Action VgaFunc17CopyframebufferExplodeAndCenter_334B_0133_335E3(int gotoTarget) {
    label_334B_0133_335E3:
    // JMP 0x3000:507a (334B_0133 / 0x335E3)
    // Jump converted to entry function call
    return spice86_label_334B_1BCA_3507A(0);
  }
  
  public Action unknown_334B_0136_335E6(int gotoTarget) {
    label_334B_0136_335E6:
    // JMP 0x3000:5097 (334B_0136 / 0x335E6)
    // Jump converted to entry function call
    return spice86_label_334B_1BE7_35097(0);
  }
  
  public Action unknown_334B_0139_335E9(int gotoTarget) {
    label_334B_0139_335E9:
    // JMP 0x3000:4eb7 (334B_0139 / 0x335E9)
    // Jump converted to entry function call
    return spice86_label_334B_1A07_34EB7(0);
  }
  
  public Action VgaFunc20NoOp_334B_013C_335EC(int gotoTarget) {
    label_334B_013C_335EC:
    // RETF  (334B_013C / 0x335EC)
    return FarRet();
  }
  
  public Action VgaFunc21SetPixel_334B_013F_335EF(int gotoTarget) {
    label_334B_013F_335EF:
    // JMP 0x3000:40dd (334B_013F / 0x335EF)
    // Jump converted to entry function call
    return not_observed_334B_0C2D_0340DD(0);
  }
  
  public Action unknown_334B_0142_335F2(int gotoTarget) {
    label_334B_0142_335F2:
    // JMP 0x3000:589b (334B_0142 / 0x335F2)
    // Jump converted to entry function call
    return spice86_label_334B_23EB_3589B(0);
  }
  
  public Action unknown_334B_0145_335F5(int gotoTarget) {
    label_334B_0145_335F5:
    // JMP 0x3000:5166 (334B_0145 / 0x335F5)
    // Jump converted to entry function call
    return spice86_label_334B_1CB6_35166(0);
  }
  
  public Action unknown_334B_0148_335F8(int gotoTarget) {
    label_334B_0148_335F8:
    // JMP 0x3000:51b7 (334B_0148 / 0x335F8)
    // Jump converted to entry function call
    return UnknownGlobeRelated_334B_1D07_351B7(0);
  }
  
  public Action unknown_334B_014B_335FB(int gotoTarget) {
    label_334B_014B_335FB:
    // JMP 0x3000:50f6 (334B_014B / 0x335FB)
    // Jump converted to entry function call
    return spice86_label_334B_1C46_350F6(0);
  }
  
  public Action unknown_334B_014E_335FE(int gotoTarget) {
    label_334B_014E_335FE:
    // JMP 0x3000:5126 (334B_014E / 0x335FE)
    // Jump converted to entry function call
    return spice86_label_334B_1C76_35126(0);
  }
  
  public Action unknown_334B_0151_33601(int gotoTarget) {
    label_334B_0151_33601:
    // JMP 0x3000:5a97 (334B_0151 / 0x33601)
    // Jump converted to entry function call
    return spice86_label_334B_25E7_35A97(0);
  }
  
  public Action unknown_334B_0154_33604(int gotoTarget) {
    label_334B_0154_33604:
    // JMP 0x3000:3e25 (334B_0154 / 0x33604)
    // Jump converted to entry function call
    return spice86_label_334B_0975_33E25(0);
  }
  
  public Action unknown_334B_0157_33607(int gotoTarget) {
    label_334B_0157_33607:
    // JMP 0x3000:53fc (334B_0157 / 0x33607)
    // Jump converted to entry function call
    return spice86_label_334B_1F4C_353FC(0);
  }
  
  public Action unknown_334B_015A_3360A(int gotoTarget) {
    label_334B_015A_3360A:
    // JMP 0x3000:66b0 (334B_015A / 0x3360A)
    // Jump converted to entry function call
    return spice86_label_334B_3200_366B0(0);
  }
  
  public Action unknown_334B_015D_3360D(int gotoTarget) {
    label_334B_015D_3360D:
    // JMP 0x3000:4e79 (334B_015D / 0x3360D)
    // Jump converted to entry function call
    return spice86_label_334B_19C9_34E79(0);
  }
  
  public Action unknown_334B_0160_33610(int gotoTarget) {
    label_334B_0160_33610:
    // JMP 0x3000:3fbc (334B_0160 / 0x33610)
    // Jump converted to entry function call
    return unknown_334B_0B0C_33FBC(0);
  }
  
  public Action VgaFunc33UpdateVgaOffset01A3FromLineNumberAsAx_334B_0163_33613(int gotoTarget) {
    label_334B_0163_33613:
    // JMP 0x3000:40b6 (334B_0163 / 0x33613)
    // Jump converted to entry function call
    return not_observed_334B_0C06_0340B6(0);
  }
  
  public Action unknown_334B_0169_33619(int gotoTarget) {
    label_334B_0169_33619:
    // JMP 0x3000:4235 (334B_0169 / 0x33619)
    // Jump converted to non entry function call
    return spice86_label_334B_0F5B_3440B(0x34235 - cs1 * 0x10);
  }
  
  public Action VgaFunc36GenerateTextureOutBP_334B_016C_3361C(int gotoTarget) {
    label_334B_016C_3361C:
    // JMP 0x3000:6e99 (334B_016C / 0x3361C)
    // Jump converted to entry function call
    return not_observed_334B_39E9_036E99(0);
  }
  
  public Action unknown_334B_016F_3361F(int gotoTarget) {
    label_334B_016F_3361F:
    // JMP 0x3000:6ec4 (334B_016F / 0x3361F)
    // Jump converted to entry function call
    return spice86_label_334B_3A14_36EC4(0);
  }
  
  public Action unknown_334B_0172_33622(int gotoTarget) {
    label_334B_0172_33622:
    // JMP 0x3000:3ef0 (334B_0172 / 0x33622)
    // Jump converted to entry function call
    return spice86_label_334B_0A40_33EF0(0);
  }
  
  public Action unknown_334B_0175_33625(int gotoTarget) {
    label_334B_0175_33625:
    // JMP 0x3000:3f87 (334B_0175 / 0x33625)
    // Jump converted to entry function call
    return spice86_label_334B_0AD7_33F87(0);
  }
  
  public Action VgaFunc41CopyPalette2toPalette1_334B_017B_3362B(int gotoTarget) {
    label_334B_017B_3362B:
    // JMP 0x3000:3f18 (334B_017B / 0x3362B)
    // Jump converted to entry function call
    return spice86_label_334B_0A68_33F18(0);
  }
  
  public Action unknown_334B_017E_3362E(int gotoTarget) {
    label_334B_017E_3362E:
    // JMP 0x3000:58f1 (334B_017E / 0x3362E)
    // Jump converted to entry function call
    return spice86_label_334B_2441_358F1(0);
  }
  
  public Action unknown_334B_0181_33631(int gotoTarget) {
    label_334B_0181_33631:
    // JMP 0x3000:6bd4 (334B_0181 / 0x33631)
    // Jump converted to entry function call
    return spice86_label_334B_3724_36BD4(0);
  }
  
  public Action unknown_334B_0184_33634(int gotoTarget) {
    label_334B_0184_33634:
    // JMP 0x3000:40e4 (334B_0184 / 0x33634)
    // Jump converted to entry function call
    return spice86_label_334B_0C34_340E4(0);
  }
  
  public Action unknown_334B_0187_33637(int gotoTarget) {
    label_334B_0187_33637:
    // JMP 0x3000:3f26 (334B_0187 / 0x33637)
    // Jump converted to entry function call
    return spice86_label_334B_0A76_33F26(0);
  }
  
  public Action spice86_label_334B_0967_33E17(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23E17: goto label_334B_0967_33E17;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0967_33E17:
    // MOV AH,0xf (334B_0967 / 0x33E17)
    AH = 0xF;
    // INT 0x10 (334B_0969 / 0x33E19)
    Interrupt(0x10);
    // CMP AL,0x13 (334B_096B / 0x33E1B)
    Alu.Sub8(AL, 0x13);
    // JZ 0x3000:3e24 (334B_096D / 0x33E1D)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_0974 / 0x33E24)
      return FarRet();
    }
    // MOV AX,0x13 (334B_096F / 0x33E1F)
    AX = 0x13;
    // INT 0x10 (334B_0972 / 0x33E22)
    Interrupt(0x10);
    label_334B_0974_33E24:
    // RETF  (334B_0974 / 0x33E24)
    return FarRet();
  }
  
  public Action spice86_label_334B_0975_33E25(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23E25: goto label_334B_0975_33E25;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0975_33E25:
    // MOV CS:[0x1bd],AL (334B_0975 / 0x33E25)
    UInt8[cs2, 0x1BD] = AL;
    // PUSHF  (334B_0979 / 0x33E29)
    Stack.Push(FlagRegister);
    // STI  (334B_097A / 0x33E2A)
    InterruptFlag = true;
    // MOV AX,0x40 (334B_097B / 0x33E2B)
    AX = 0x40;
    // MOV ES,AX (334B_097E / 0x33E2E)
    ES = AX;
    // MOV DX,word ptr ES:[0x63] (334B_0980 / 0x33E30)
    DX = UInt16[ES, 0x63];
    // ADD DL,0x6 (334B_0985 / 0x33E35)
    // DL += 0x6;
    DL = Alu.Add8(DL, 0x6);
    // MOV word ptr CS:[0x19f],DX (334B_0988 / 0x33E38)
    UInt16[cs2, 0x19F] = DX;
    // IN AL,DX (334B_098D / 0x33E3D)
    AL = Cpu.In8(DX);
    // AND AL,0x8 (334B_098E / 0x33E3E)
    // AL &= 0x8;
    AL = Alu.And8(AL, 0x8);
    // CALL 0x3000:3e68 (334B_0990 / 0x33E40)
    NearCall(cs2, 0x993, WaitForRetrace_334B_09B8_33E68);
    // JNC 0x3000:3e64 (334B_0993 / 0x33E43)
    if(!CarryFlag) {
      goto label_334B_09B4_33E64;
    }
    // CALL 0x3000:3e68 (334B_0995 / 0x33E45)
    NearCall(cs2, 0x998, WaitForRetrace_334B_09B8_33E68);
    // JNC 0x3000:3e64 (334B_0998 / 0x33E48)
    if(!CarryFlag) {
      goto label_334B_09B4_33E64;
    }
    // MOV DI,SI (334B_099A / 0x33E4A)
    DI = SI;
    // MOV byte ptr CS:[0x1a2],AH (334B_099C / 0x33E4C)
    UInt8[cs2, 0x1A2] = AH;
    // CALL 0x3000:3e68 (334B_09A1 / 0x33E51)
    NearCall(cs2, 0x9A4, WaitForRetrace_334B_09B8_33E68);
    // JNC 0x3000:3e64 (334B_09A4 / 0x33E54)
    if(!CarryFlag) {
      goto label_334B_09B4_33E64;
    }
    // CMP SI,DI (334B_09A6 / 0x33E56)
    Alu.Sub16(SI, DI);
    // NOT byte ptr CS:[0x1a1] (334B_09A8 / 0x33E58)
    UInt8[cs2, 0x1A1] = (byte)~UInt8[cs2, 0x1A1];
    // JNC 0x3000:3e64 (334B_09AD / 0x33E5D)
    if(!CarryFlag) {
      goto label_334B_09B4_33E64;
    }
    // MOV byte ptr CS:[0x1a2],AH (334B_09AF / 0x33E5F)
    UInt8[cs2, 0x1A2] = AH;
    label_334B_09B4_33E64:
    // POPF  (334B_09B4 / 0x33E64)
    FlagRegister = Stack.Pop();
    // JMP 0x3000:3fbc (334B_09B5 / 0x33E65)
    // Jump converted to entry function call
    return unknown_334B_0B0C_33FBC(0);
  }
  
  public Action WaitForRetrace_334B_09B8_33E68(int gotoTarget) {
    label_334B_09B8_33E68:
    // MOV AH,AL (334B_09B8 / 0x33E68)
    AH = AL;
    // XOR SI,SI (334B_09BA / 0x33E6A)
    SI = 0;
    // MOV BX,word ptr [BP + 0x0] (334B_09BC / 0x33E6C)
    BX = UInt16[SS, BP];
    label_334B_09BF_33E6F:
    // INC SI (334B_09BF / 0x33E6F)
    SI = Alu.Inc16(SI);
    // JNZ 0x3000:3e73 (334B_09C0 / 0x33E70)
    if(!ZeroFlag) {
      goto label_334B_09C3_33E73;
    }
    // DEC SI (334B_09C2 / 0x33E72)
    SI = Alu.Dec16(SI);
    label_334B_09C3_33E73:
    // IN AL,DX (334B_09C3 / 0x33E73)
    AL = Cpu.In8(DX);
    // AND AL,0x8 (334B_09C4 / 0x33E74)
    // AL &= 0x8;
    AL = Alu.And8(AL, 0x8);
    // CMP AL,AH (334B_09C6 / 0x33E76)
    Alu.Sub8(AL, AH);
    // JNZ 0x3000:3e87 (334B_09C8 / 0x33E78)
    if(!ZeroFlag) {
      goto label_334B_09D7_33E87;
    }
    // PUSH AX (334B_09CA / 0x33E7A)
    Stack.Push(AX);
    // MOV AX,word ptr [BP + 0x0] (334B_09CB / 0x33E7B)
    AX = UInt16[SS, BP];
    // SUB AX,BX (334B_09CE / 0x33E7E)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x64 (334B_09D0 / 0x33E80)
    Alu.Sub16(AX, 0x64);
    // POP AX (334B_09D3 / 0x33E83)
    AX = Stack.Pop();
    // JC 0x3000:3e6f (334B_09D4 / 0x33E84)
    if(CarryFlag) {
      goto label_334B_09BF_33E6F;
    }
    // RET  (334B_09D6 / 0x33E86)
    return NearRet();
    label_334B_09D7_33E87:
    // STC  (334B_09D7 / 0x33E87)
    CarryFlag = true;
    // RET  (334B_09D8 / 0x33E88)
    return NearRet();
  }
  
  public Action not_observed_334B_09D9_033E89(int gotoTarget) {
    label_334B_09D9_33E89:
    // MOV AX,0xa000 (334B_09D9 / 0x33E89)
    AX = 0xA000;
    // MOV CX,0xfa00 (334B_09DC / 0x33E8C)
    CX = 0xFA00;
    // XOR BP,BP (334B_09DF / 0x33E8F)
    BP = 0;
    // RETF  (334B_09E1 / 0x33E91)
    return FarRet();
  }
  
  public Action spice86_label_334B_09E2_33E92(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23E92: goto label_334B_09E2_33E92;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_09E2_33E92:
    // PUSH AX (334B_09E2 / 0x33E92)
    Stack.Push(AX);
    // PUSH BX (334B_09E3 / 0x33E93)
    Stack.Push(BX);
    // PUSH CX (334B_09E4 / 0x33E94)
    Stack.Push(CX);
    // PUSH SI (334B_09E5 / 0x33E95)
    Stack.Push(SI);
    // PUSH DI (334B_09E6 / 0x33E96)
    Stack.Push(DI);
    // PUSH DS (334B_09E7 / 0x33E97)
    Stack.Push(DS);
    // PUSH ES (334B_09E8 / 0x33E98)
    Stack.Push(ES);
    // PUSH ES (334B_09E9 / 0x33E99)
    Stack.Push(ES);
    // POP DS (334B_09EA / 0x33E9A)
    DS = Stack.Pop();
    // PUSH CS (334B_09EB / 0x33E9B)
    Stack.Push(cs2);
    // POP ES (334B_09EC / 0x33E9C)
    ES = Stack.Pop();
    // MOV DI,0x5bf (334B_09ED / 0x33E9D)
    DI = 0x5BF;
    // ADD DI,BX (334B_09F0 / 0x33EA0)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // MOV AX,CX (334B_09F2 / 0x33EA2)
    AX = CX;
    // MOV SI,DX (334B_09F4 / 0x33EA4)
    SI = DX;
    while (CX-- != 0) {
      // CMPSB ES:DI,SI (334B_09F6 / 0x33EA6)
      Alu.Sub8(UInt8[DS, SI], UInt8[ES, DI]);
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == true) {
        break;
      }
    }
    // JZ 0x3000:3ec9 (334B_09F8 / 0x33EA8)
    if(ZeroFlag) {
      goto label_334B_0A19_33EC9;
    }
    // MOV byte ptr CS:[0x1be],0x1 (334B_09FA / 0x33EAA)
    UInt8[cs2, 0x1BE] = 0x1;
    // MOV DI,0x5bf (334B_0A00 / 0x33EB0)
    DI = 0x5BF;
    // ADD DI,BX (334B_0A03 / 0x33EB3)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // MOV SI,DX (334B_0A05 / 0x33EB5)
    SI = DX;
    // MOV CX,AX (334B_0A07 / 0x33EB7)
    CX = AX;
    // PUSH CX (334B_0A09 / 0x33EB9)
    Stack.Push(CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_0A0A / 0x33EBA)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP CX (334B_0A0C / 0x33EBC)
    CX = Stack.Pop();
    // CALL 0x3000:3ed1 (334B_0A0D / 0x33EBD)
    NearCall(cs2, 0xA10, SetBxCxPaletteRelated_334B_0A21_33ED1);
    // MOV DI,0x1bf (334B_0A10 / 0x33EC0)
    DI = 0x1BF;
    // ADD DI,BX (334B_0A13 / 0x33EC3)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // MOV AL,0x1 (334B_0A15 / 0x33EC5)
    AL = 0x1;
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0A17 / 0x33EC7)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    label_334B_0A19_33EC9:
    // POP ES (334B_0A19 / 0x33EC9)
    ES = Stack.Pop();
    // POP DS (334B_0A1A / 0x33ECA)
    DS = Stack.Pop();
    // POP DI (334B_0A1B / 0x33ECB)
    DI = Stack.Pop();
    // POP SI (334B_0A1C / 0x33ECC)
    SI = Stack.Pop();
    // POP CX (334B_0A1D / 0x33ECD)
    CX = Stack.Pop();
    // POP BX (334B_0A1E / 0x33ECE)
    BX = Stack.Pop();
    // POP AX (334B_0A1F / 0x33ECF)
    AX = Stack.Pop();
    // RETF  (334B_0A20 / 0x33ED0)
    return FarRet();
  }
  
  public Action SetBxCxPaletteRelated_334B_0A21_33ED1(int gotoTarget) {
    label_334B_0A21_33ED1:
    // PUSH DX (334B_0A21 / 0x33ED1)
    Stack.Push(DX);
    // MOV AX,BX (334B_0A22 / 0x33ED2)
    AX = BX;
    // MOV DL,0x3 (334B_0A24 / 0x33ED4)
    DL = 0x3;
    // DIV DL (334B_0A26 / 0x33ED6)
    Cpu.Div8(DL);
    // XOR AH,AH (334B_0A28 / 0x33ED8)
    AH = 0;
    // MOV BX,AX (334B_0A2A / 0x33EDA)
    BX = AX;
    // MOV AX,CX (334B_0A2C / 0x33EDC)
    AX = CX;
    // CMP AX,0x300 (334B_0A2E / 0x33EDE)
    Alu.Sub16(AX, 0x300);
    // JNC 0x3000:3eeb (334B_0A31 / 0x33EE1)
    if(!CarryFlag) {
      goto label_334B_0A3B_33EEB;
    }
    // DIV DL (334B_0A33 / 0x33EE3)
    Cpu.Div8(DL);
    // XOR AH,AH (334B_0A35 / 0x33EE5)
    AH = 0;
    // MOV CX,AX (334B_0A37 / 0x33EE7)
    CX = AX;
    // POP DX (334B_0A39 / 0x33EE9)
    DX = Stack.Pop();
    // RET  (334B_0A3A / 0x33EEA)
    return NearRet();
    label_334B_0A3B_33EEB:
    // MOV CX,0x100 (334B_0A3B / 0x33EEB)
    CX = 0x100;
    // POP DX (334B_0A3E / 0x33EEE)
    DX = Stack.Pop();
    // RET  (334B_0A3F / 0x33EEF)
    return NearRet();
  }
  
  public Action spice86_label_334B_0A40_33EF0(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23EF0: goto label_334B_0A40_33EF0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0A40_33EF0:
    // PUSH CX (334B_0A40 / 0x33EF0)
    Stack.Push(CX);
    // PUSH SI (334B_0A41 / 0x33EF1)
    Stack.Push(SI);
    // PUSH DI (334B_0A42 / 0x33EF2)
    Stack.Push(DI);
    // PUSH DS (334B_0A43 / 0x33EF3)
    Stack.Push(DS);
    // PUSH ES (334B_0A44 / 0x33EF4)
    Stack.Push(ES);
    // PUSH ES (334B_0A45 / 0x33EF5)
    Stack.Push(ES);
    // POP DS (334B_0A46 / 0x33EF6)
    DS = Stack.Pop();
    // PUSH CS (334B_0A47 / 0x33EF7)
    Stack.Push(cs2);
    // POP ES (334B_0A48 / 0x33EF8)
    ES = Stack.Pop();
    // MOV DI,0x2bf (334B_0A49 / 0x33EF9)
    DI = 0x2BF;
    // ADD DI,BX (334B_0A4C / 0x33EFC)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // MOV SI,DX (334B_0A4E / 0x33EFE)
    SI = DX;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_0A50 / 0x33F00)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP ES (334B_0A52 / 0x33F02)
    ES = Stack.Pop();
    // POP DS (334B_0A53 / 0x33F03)
    DS = Stack.Pop();
    // POP DI (334B_0A54 / 0x33F04)
    DI = Stack.Pop();
    // POP SI (334B_0A55 / 0x33F05)
    SI = Stack.Pop();
    // POP CX (334B_0A56 / 0x33F06)
    CX = Stack.Pop();
    // RETF  (334B_0A57 / 0x33F07)
    return FarRet();
  }
  
  public Action CopyCsRamB5FToB2F_334B_0A58_33F08(int gotoTarget) {
    label_334B_0A58_33F08:
    // PUSH CS (334B_0A58 / 0x33F08)
    Stack.Push(cs2);
    // PUSH CS (334B_0A59 / 0x33F09)
    Stack.Push(cs2);
    // POP DS (334B_0A5A / 0x33F0A)
    DS = Stack.Pop();
    // POP ES (334B_0A5B / 0x33F0B)
    ES = Stack.Pop();
    // MOV SI,0x5bf (334B_0A5C / 0x33F0C)
    SI = 0x5BF;
    // MOV DI,0x2bf (334B_0A5F / 0x33F0F)
    DI = 0x2BF;
    // MOV CX,0x180 (334B_0A62 / 0x33F12)
    CX = 0x180;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_0A65 / 0x33F15)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // RET  (334B_0A67 / 0x33F17)
    return NearRet();
  }
  
  public Action spice86_label_334B_0A68_33F18(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23F18: goto label_334B_0A68_33F18;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0A68_33F18:
    // PUSH CX (334B_0A68 / 0x33F18)
    Stack.Push(CX);
    // PUSH SI (334B_0A69 / 0x33F19)
    Stack.Push(SI);
    // PUSH DI (334B_0A6A / 0x33F1A)
    Stack.Push(DI);
    // PUSH DS (334B_0A6B / 0x33F1B)
    Stack.Push(DS);
    // PUSH ES (334B_0A6C / 0x33F1C)
    Stack.Push(ES);
    // CALL 0x3000:3f08 (334B_0A6D / 0x33F1D)
    NearCall(cs2, 0xA70, CopyCsRamB5FToB2F_334B_0A58_33F08);
    // POP ES (334B_0A70 / 0x33F20)
    ES = Stack.Pop();
    // POP DS (334B_0A71 / 0x33F21)
    DS = Stack.Pop();
    // POP DI (334B_0A72 / 0x33F22)
    DI = Stack.Pop();
    // POP SI (334B_0A73 / 0x33F23)
    SI = Stack.Pop();
    // POP CX (334B_0A74 / 0x33F24)
    CX = Stack.Pop();
    // RETF  (334B_0A75 / 0x33F25)
    return FarRet();
  }
  
  public Action spice86_label_334B_0A76_33F26(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23F26: goto label_334B_0A76_33F26;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0A76_33F26:
    // PUSH AX (334B_0A76 / 0x33F26)
    Stack.Push(AX);
    // PUSH CX (334B_0A77 / 0x33F27)
    Stack.Push(CX);
    // PUSH SI (334B_0A78 / 0x33F28)
    Stack.Push(SI);
    // PUSH DI (334B_0A79 / 0x33F29)
    Stack.Push(DI);
    // PUSH DS (334B_0A7A / 0x33F2A)
    Stack.Push(DS);
    // PUSH ES (334B_0A7B / 0x33F2B)
    Stack.Push(ES);
    // PUSH CS (334B_0A7C / 0x33F2C)
    Stack.Push(cs2);
    // PUSH CS (334B_0A7D / 0x33F2D)
    Stack.Push(cs2);
    // POP DS (334B_0A7E / 0x33F2E)
    DS = Stack.Pop();
    // POP ES (334B_0A7F / 0x33F2F)
    ES = Stack.Pop();
    // MOV SI,0x5bf (334B_0A80 / 0x33F30)
    SI = 0x5BF;
    // MOV DI,0x2bf (334B_0A83 / 0x33F33)
    DI = 0x2BF;
    // MOV CX,0x180 (334B_0A86 / 0x33F36)
    CX = 0x180;
    label_334B_0A89_33F39:
    // MOV AX,word ptr [DI] (334B_0A89 / 0x33F39)
    AX = UInt16[DS, DI];
    // XCHG word ptr [SI],AX (334B_0A8B / 0x33F3B)
    ushort tmp_334B_0A8B = UInt16[DS, SI];
    UInt16[DS, SI] = AX;
    AX = tmp_334B_0A8B;
    // STOSW ES:DI (334B_0A8D / 0x33F3D)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD SI,0x2 (334B_0A8E / 0x33F3E)
    // SI += 0x2;
    SI = Alu.Add16(SI, 0x2);
    // LOOP 0x3000:3f39 (334B_0A91 / 0x33F41)
    if(--CX != 0) {
      goto label_334B_0A89_33F39;
    }
    // MOV AL,0x1 (334B_0A93 / 0x33F43)
    AL = 0x1;
    // MOV DI,0x1be (334B_0A95 / 0x33F45)
    DI = 0x1BE;
    // MOV CX,0x101 (334B_0A98 / 0x33F48)
    CX = 0x101;
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0A9B / 0x33F4B)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP ES (334B_0A9D / 0x33F4D)
    ES = Stack.Pop();
    // POP DS (334B_0A9E / 0x33F4E)
    DS = Stack.Pop();
    // POP DI (334B_0A9F / 0x33F4F)
    DI = Stack.Pop();
    // POP SI (334B_0AA0 / 0x33F50)
    SI = Stack.Pop();
    // POP CX (334B_0AA1 / 0x33F51)
    CX = Stack.Pop();
    // POP AX (334B_0AA2 / 0x33F52)
    AX = Stack.Pop();
    // RETF  (334B_0AA3 / 0x33F53)
    return FarRet();
  }
  
  public Action spice86_label_334B_0AD7_33F87(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24017: goto label_334B_0B67_34017;break;
      case 0x23F87: goto label_334B_0AD7_33F87;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0AD7_33F87:
    // PUSH AX (334B_0AD7 / 0x33F87)
    Stack.Push(AX);
    // PUSH BX (334B_0AD8 / 0x33F88)
    Stack.Push(BX);
    // PUSH CX (334B_0AD9 / 0x33F89)
    Stack.Push(CX);
    // PUSH DX (334B_0ADA / 0x33F8A)
    Stack.Push(DX);
    // PUSH SI (334B_0ADB / 0x33F8B)
    Stack.Push(SI);
    // PUSH DI (334B_0ADC / 0x33F8C)
    Stack.Push(DI);
    // PUSH BP (334B_0ADD / 0x33F8D)
    Stack.Push(BP);
    // PUSH ES (334B_0ADE / 0x33F8E)
    Stack.Push(ES);
    // PUSH DS (334B_0ADF / 0x33F8F)
    Stack.Push(DS);
    // PUSH CS (334B_0AE0 / 0x33F90)
    Stack.Push(cs2);
    // POP DS (334B_0AE1 / 0x33F91)
    DS = Stack.Pop();
    // PUSH CS (334B_0AE2 / 0x33F92)
    Stack.Push(cs2);
    // POP ES (334B_0AE3 / 0x33F93)
    ES = Stack.Pop();
    // MOV DL,AL (334B_0AE4 / 0x33F94)
    DL = AL;
    // OR DL,DL (334B_0AE6 / 0x33F96)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JNZ 0x3000:3f9b (334B_0AE8 / 0x33F98)
    if(!ZeroFlag) {
      goto label_334B_0AEB_33F9B;
    }
    // INC DX (334B_0AEA / 0x33F9A)
    DX = Alu.Inc16(DX);
    label_334B_0AEB_33F9B:
    // MOV DI,0x5bf (334B_0AEB / 0x33F9B)
    DI = 0x5BF;
    // ADD DI,BX (334B_0AEE / 0x33F9E)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // LEA SI,[DI + 0xfd00] (334B_0AF0 / 0x33FA0)
    SI = (ushort)(DI + 0xFD00);
    // PUSH DI (334B_0AF4 / 0x33FA4)
    Stack.Push(DI);
    // PUSH CX (334B_0AF5 / 0x33FA5)
    Stack.Push(CX);
    label_334B_0AF6_33FA6:
    // LODSB SI (334B_0AF6 / 0x33FA6)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB AL,byte ptr [DI] (334B_0AF7 / 0x33FA7)
    // AL -= UInt8[DS, DI];
    AL = Alu.Sub8(AL, UInt8[DS, DI]);
    // CBW  (334B_0AF9 / 0x33FA9)
    AX = (ushort)((short)((sbyte)AL));
    // IDIV DL (334B_0AFA / 0x33FAA)
    Cpu.IDiv8(DL);
    // ADD AL,byte ptr [DI] (334B_0AFC / 0x33FAC)
    // AL += UInt8[DS, DI];
    AL = Alu.Add8(AL, UInt8[DS, DI]);
    // STOSB ES:DI (334B_0AFE / 0x33FAE)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:3fa6 (334B_0AFF / 0x33FAF)
    if(--CX != 0) {
      goto label_334B_0AF6_33FA6;
    }
    // POP CX (334B_0B01 / 0x33FB1)
    CX = Stack.Pop();
    // CALL 0x3000:3ed1 (334B_0B02 / 0x33FB2)
    NearCall(cs2, 0xB05, SetBxCxPaletteRelated_334B_0A21_33ED1);
    // POP DX (334B_0B05 / 0x33FB5)
    DX = Stack.Pop();
    // CALL 0x3000:4018 (334B_0B06 / 0x33FB6)
    NearCall(cs2, 0xB09, LoadPaletteInVgaDac_334B_0B68_34018);
    // POP DS (334B_0B09 / 0x33FB9)
    DS = Stack.Pop();
    // JMP 0x3000:400f (334B_0B0A / 0x33FBA)
    goto label_334B_0B5F_3400F;
    label_334B_0B5F_3400F:
    // POP ES (334B_0B5F / 0x3400F)
    ES = Stack.Pop();
    // POP BP (334B_0B60 / 0x34010)
    BP = Stack.Pop();
    // POP DI (334B_0B61 / 0x34011)
    DI = Stack.Pop();
    // POP SI (334B_0B62 / 0x34012)
    SI = Stack.Pop();
    // POP DX (334B_0B63 / 0x34013)
    DX = Stack.Pop();
    // POP CX (334B_0B64 / 0x34014)
    CX = Stack.Pop();
    // POP BX (334B_0B65 / 0x34015)
    BX = Stack.Pop();
    // POP AX (334B_0B66 / 0x34016)
    AX = Stack.Pop();
    label_334B_0B67_34017:
    // RETF  (334B_0B67 / 0x34017)
    return FarRet();
  }
  
  public Action unknown_334B_0B0C_33FBC(int gotoTarget) {
    switch(gotoTarget) {
      case 0x23FBC: goto label_334B_0B0C_33FBC;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0B0C_33FBC:
    // CMP byte ptr CS:[0x1be],0x0 (334B_0B0C / 0x33FBC)
    Alu.Sub8(UInt8[cs2, 0x1BE], 0x0);
    // JZ 0x3000:4017 (334B_0B12 / 0x33FC2)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_0B67 / 0x34017)
      return FarRet();
    }
    // MOV byte ptr CS:[0x1be],0x0 (334B_0B14 / 0x33FC4)
    UInt8[cs2, 0x1BE] = 0x0;
    // PUSH AX (334B_0B1A / 0x33FCA)
    Stack.Push(AX);
    // PUSH BX (334B_0B1B / 0x33FCB)
    Stack.Push(BX);
    // PUSH CX (334B_0B1C / 0x33FCC)
    Stack.Push(CX);
    // PUSH DX (334B_0B1D / 0x33FCD)
    Stack.Push(DX);
    // PUSH SI (334B_0B1E / 0x33FCE)
    Stack.Push(SI);
    // PUSH DI (334B_0B1F / 0x33FCF)
    Stack.Push(DI);
    // PUSH BP (334B_0B20 / 0x33FD0)
    Stack.Push(BP);
    // PUSH ES (334B_0B21 / 0x33FD1)
    Stack.Push(ES);
    // PUSH CS (334B_0B22 / 0x33FD2)
    Stack.Push(cs2);
    // POP ES (334B_0B23 / 0x33FD3)
    ES = Stack.Pop();
    // MOV DI,0x1bf (334B_0B24 / 0x33FD4)
    DI = 0x1BF;
    // MOV CX,0x100 (334B_0B27 / 0x33FD7)
    CX = 0x100;
    label_334B_0B2A_33FDA:
    // XOR AL,AL (334B_0B2A / 0x33FDA)
    AL = 0;
    while (CX-- != 0) {
      // SCASB ES:DI (334B_0B2C / 0x33FDC)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == true) {
        break;
      }
    }
    // JZ 0x3000:4005 (334B_0B2E / 0x33FDE)
    if(ZeroFlag) {
      goto label_334B_0B55_34005;
    }
    // DEC DI (334B_0B30 / 0x33FE0)
    DI = Alu.Dec16(DI);
    // INC CX (334B_0B31 / 0x33FE1)
    CX = Alu.Inc16(CX);
    // MOV BX,CX (334B_0B32 / 0x33FE2)
    BX = CX;
    while (CX-- != 0) {
      // SCASB ES:DI (334B_0B34 / 0x33FE4)
      Alu.Sub8(AL, UInt8[ES, DI]);
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      if(ZeroFlag == false) {
        break;
      }
    }
    // PUSH CX (334B_0B36 / 0x33FE6)
    Stack.Push(CX);
    // JNZ 0x3000:3fea (334B_0B37 / 0x33FE7)
    if(!ZeroFlag) {
      goto label_334B_0B3A_33FEA;
    }
    // INC CX (334B_0B39 / 0x33FE9)
    CX = Alu.Inc16(CX);
    label_334B_0B3A_33FEA:
    // SUB CX,BX (334B_0B3A / 0x33FEA)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // NEG CX (334B_0B3C / 0x33FEC)
    CX = Alu.Sub16(0, CX);
    // MOV DX,0x100 (334B_0B3E / 0x33FEE)
    DX = 0x100;
    // SUB DX,BX (334B_0B41 / 0x33FF1)
    // DX -= BX;
    DX = Alu.Sub16(DX, BX);
    // MOV BX,DX (334B_0B43 / 0x33FF3)
    BX = DX;
    // ADD DX,DX (334B_0B45 / 0x33FF5)
    // DX += DX;
    DX = Alu.Add16(DX, DX);
    // ADD DX,BX (334B_0B47 / 0x33FF7)
    // DX += BX;
    DX = Alu.Add16(DX, BX);
    // ADD DX,0x5bf (334B_0B49 / 0x33FF9)
    // DX += 0x5BF;
    DX = Alu.Add16(DX, 0x5BF);
    // CALL 0x3000:4018 (334B_0B4D / 0x33FFD)
    NearCall(cs2, 0xB50, LoadPaletteInVgaDac_334B_0B68_34018);
    // POP CX (334B_0B50 / 0x34000)
    CX = Stack.Pop();
    // OR CX,CX (334B_0B51 / 0x34001)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JNZ 0x3000:3fda (334B_0B53 / 0x34003)
    if(!ZeroFlag) {
      goto label_334B_0B2A_33FDA;
    }
    label_334B_0B55_34005:
    // MOV DI,0x1bf (334B_0B55 / 0x34005)
    DI = 0x1BF;
    // MOV CX,0x80 (334B_0B58 / 0x34008)
    CX = 0x80;
    // XOR AX,AX (334B_0B5B / 0x3400B)
    AX = 0;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_0B5D / 0x3400D)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // Function call generated as ASM continues to next function body without return
    return spice86_label_334B_0AD7_33F87(0x3400F - cs1 * 0x10);
  }
  
  public Action LoadPaletteInVgaDac_334B_0B68_34018(int gotoTarget) {
    label_334B_0B68_34018:
    // PUSH SI (334B_0B68 / 0x34018)
    Stack.Push(SI);
    // PUSH DS (334B_0B69 / 0x34019)
    Stack.Push(DS);
    // PUSH ES (334B_0B6A / 0x3401A)
    Stack.Push(ES);
    // POP DS (334B_0B6B / 0x3401B)
    DS = Stack.Pop();
    // MOV SI,DX (334B_0B6C / 0x3401C)
    SI = DX;
    // PUSHF  (334B_0B6E / 0x3401E)
    Stack.Push(FlagRegister);
    // CMP byte ptr [0x1a1],0x0 (334B_0B6F / 0x3401F)
    Alu.Sub8(UInt8[DS, 0x1A1], 0x0);
    // JZ 0x3000:4033 (334B_0B74 / 0x34024)
    if(ZeroFlag) {
      goto label_334B_0B83_34033;
    }
    // MOV DX,word ptr [0x19f] (334B_0B76 / 0x34026)
    DX = UInt16[DS, 0x19F];
    label_334B_0B7A_3402A:
    // IN AL,DX (334B_0B7A / 0x3402A)
    AL = Cpu.In8(DX);
    // AND AL,0x8 (334B_0B7B / 0x3402B)
    // AL &= 0x8;
    AL = Alu.And8(AL, 0x8);
    // CMP AL,byte ptr [0x1a2] (334B_0B7D / 0x3402D)
    Alu.Sub8(AL, UInt8[DS, 0x1A2]);
    // JNZ 0x3000:402a (334B_0B81 / 0x34031)
    if(!ZeroFlag) {
      goto label_334B_0B7A_3402A;
    }
    label_334B_0B83_34033:
    // CLI  (334B_0B83 / 0x34033)
    InterruptFlag = false;
    // MOV DX,0x3c8 (334B_0B84 / 0x34034)
    DX = 0x3C8;
    // MOV AL,BL (334B_0B87 / 0x34037)
    AL = BL;
    // OUT DX,AL (334B_0B89 / 0x34039)
    Cpu.Out8(DX, AL);
    // JMP 0x3000:403c (334B_0B8A / 0x3403A)
    // JMP target is JMP, inlining.
    // JMP 0x3000:403e (334B_0B8C / 0x3403C)
    // JMP target is JMP, inlining.
    // JMP 0x3000:4040 (334B_0B8E / 0x3403E)
    // JMP target is JMP, inlining.
    // JMP 0x3000:4042 (334B_0B90 / 0x34040)
    goto label_334B_0B92_34042;
    label_334B_0B8C_3403C:
    // JMP 0x3000:403e (334B_0B8C / 0x3403C)
    // JMP target is JMP, inlining.
    // JMP 0x3000:4040 (334B_0B8E / 0x3403E)
    // JMP target is JMP, inlining.
    // JMP 0x3000:4042 (334B_0B90 / 0x34040)
    goto label_334B_0B92_34042;
    label_334B_0B8E_3403E:
    // JMP 0x3000:4040 (334B_0B8E / 0x3403E)
    // JMP target is JMP, inlining.
    // JMP 0x3000:4042 (334B_0B90 / 0x34040)
    goto label_334B_0B92_34042;
    label_334B_0B90_34040:
    // JMP 0x3000:4042 (334B_0B90 / 0x34040)
    goto label_334B_0B92_34042;
    label_334B_0B92_34042:
    // INC DX (334B_0B92 / 0x34042)
    DX = Alu.Inc16(DX);
    // CMP byte ptr CS:[0x1bd],0x0 (334B_0B93 / 0x34043)
    Alu.Sub8(UInt8[cs2, 0x1BD], 0x0);
    // JNZ 0x3000:4059 (334B_0B99 / 0x34049)
    if(!ZeroFlag) {
      goto label_334B_0BA9_34059;
    }
    // MOV AX,CX (334B_0B9B / 0x3404B)
    AX = CX;
    // ADD CX,CX (334B_0B9D / 0x3404D)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD CX,AX (334B_0B9F / 0x3404F)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    label_334B_0BA1_34051:
    // LODSB SI (334B_0BA1 / 0x34051)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OUT DX,AL (334B_0BA2 / 0x34052)
    Cpu.Out8(DX, AL);
    // LOOP 0x3000:4051 (334B_0BA3 / 0x34053)
    if(--CX != 0) {
      goto label_334B_0BA1_34051;
    }
    // POPF  (334B_0BA5 / 0x34055)
    FlagRegister = Stack.Pop();
    // POP DS (334B_0BA6 / 0x34056)
    DS = Stack.Pop();
    // POP SI (334B_0BA7 / 0x34057)
    SI = Stack.Pop();
    // RET  (334B_0BA8 / 0x34058)
    return NearRet();
    label_334B_0BA9_34059:
    // LODSB SI (334B_0BA9 / 0x34059)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AX,0x3f (334B_0BAA / 0x3405A)
    // AX &= 0x3F;
    AX = Alu.And16(AX, 0x3F);
    // MOV BP,AX (334B_0BAD / 0x3405D)
    BP = AX;
    // SHL BP,1 (334B_0BAF / 0x3405F)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // SHL BP,1 (334B_0BB1 / 0x34061)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // ADD BP,AX (334B_0BB3 / 0x34063)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // LODSB SI (334B_0BB5 / 0x34065)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AL,0x3f (334B_0BB6 / 0x34066)
    // AL &= 0x3F;
    AL = Alu.And8(AL, 0x3F);
    // MOV BX,AX (334B_0BB8 / 0x34068)
    BX = AX;
    // SHL BX,1 (334B_0BBA / 0x3406A)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_0BBC / 0x3406C)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_0BBE / 0x3406E)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // ADD BX,AX (334B_0BC0 / 0x34070)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // LODSB SI (334B_0BC2 / 0x34072)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AL,0x3f (334B_0BC3 / 0x34073)
    // AL &= 0x3F;
    AL = Alu.And8(AL, 0x3F);
    // SHL AX,1 (334B_0BC5 / 0x34075)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // ADD AX,BP (334B_0BC7 / 0x34077)
    // AX += BP;
    AX = Alu.Add16(AX, BP);
    // ADD AX,BX (334B_0BC9 / 0x34079)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    // SHR AX,1 (334B_0BCB / 0x3407B)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_0BCD / 0x3407D)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_0BCF / 0x3407F)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_0BD1 / 0x34081)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // OUT DX,AL (334B_0BD3 / 0x34083)
    Cpu.Out8(DX, AL);
    // OUT DX,AL (334B_0BD4 / 0x34084)
    Cpu.Out8(DX, AL);
    // OUT DX,AL (334B_0BD5 / 0x34085)
    Cpu.Out8(DX, AL);
    // LOOP 0x3000:4059 (334B_0BD6 / 0x34086)
    if(--CX != 0) {
      goto label_334B_0BA9_34059;
    }
    // POPF  (334B_0BD8 / 0x34088)
    FlagRegister = Stack.Pop();
    // POP DS (334B_0BD9 / 0x34089)
    DS = Stack.Pop();
    // POP SI (334B_0BDA / 0x3408A)
    SI = Stack.Pop();
    // RET  (334B_0BDB / 0x3408B)
    return NearRet();
  }
  
  public Action unknown_334B_0BDC_3408C(int gotoTarget) {
    label_334B_0BDC_3408C:
    // PUSH SI (334B_0BDC / 0x3408C)
    Stack.Push(SI);
    // PUSH DS (334B_0BDD / 0x3408D)
    Stack.Push(DS);
    // PUSH ES (334B_0BDE / 0x3408E)
    Stack.Push(ES);
    // PUSH CS (334B_0BDF / 0x3408F)
    Stack.Push(cs2);
    // PUSH CS (334B_0BE0 / 0x34090)
    Stack.Push(cs2);
    // POP DS (334B_0BE1 / 0x34091)
    DS = Stack.Pop();
    // POP ES (334B_0BE2 / 0x34092)
    ES = Stack.Pop();
    // MOV SI,0x73f (334B_0BE3 / 0x34093)
    SI = 0x73F;
    // MOV DX,SI (334B_0BE6 / 0x34096)
    DX = SI;
    // MOV DI,SI (334B_0BE8 / 0x34098)
    DI = SI;
    // LODSW SI (334B_0BEA / 0x3409A)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BL,byte ptr [SI] (334B_0BEB / 0x3409B)
    BL = UInt8[DS, SI];
    // INC SI (334B_0BED / 0x3409D)
    SI = Alu.Inc16(SI);
    // MOV CX,0x5e (334B_0BEE / 0x3409E)
    CX = 0x5E;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_0BF1 / 0x340A1)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOVSB ES:DI,SI (334B_0BF3 / 0x340A3)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // STOSW ES:DI (334B_0BF4 / 0x340A4)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV byte ptr [DI],BL (334B_0BF5 / 0x340A5)
    UInt8[DS, DI] = BL;
    // MOV BX,0x80 (334B_0BF7 / 0x340A7)
    BX = 0x80;
    // MOV CX,0x40 (334B_0BFA / 0x340AA)
    CX = 0x40;
    // CALL 0x3000:4018 (334B_0BFD / 0x340AD)
    NearCall(cs2, 0xC00, LoadPaletteInVgaDac_334B_0B68_34018);
    // POP ES (334B_0C00 / 0x340B0)
    ES = Stack.Pop();
    // POP DS (334B_0C01 / 0x340B1)
    DS = Stack.Pop();
    // POP SI (334B_0C02 / 0x340B2)
    SI = Stack.Pop();
    // RET  (334B_0C03 / 0x340B3)
    return NearRet();
  }
  
  public Action not_observed_334B_0C06_0340B6(int gotoTarget) {
    label_334B_0C06_340B6:
    // MOV DX,0x140 (334B_0C06 / 0x340B6)
    DX = 0x140;
    // MUL DX (334B_0C09 / 0x340B9)
    Cpu.Mul16(DX);
    // MOV CS:[0x1a3],AX (334B_0C0B / 0x340BB)
    UInt16[cs2, 0x1A3] = AX;
    // RETF  (334B_0C0F / 0x340BF)
    return FarRet();
  }
  
  public Action SetDiFromXYCordsDxBx_334B_0C10_340C0(int gotoTarget) {
    label_334B_0C10_340C0:
    // CMP BX,0xc8 (334B_0C10 / 0x340C0)
    Alu.Sub16(BX, 0xC8);
    // JC 0x3000:40c9 (334B_0C14 / 0x340C4)
    if(CarryFlag) {
      goto label_334B_0C19_340C9;
    }
    // MOV BX,0xc7 (334B_0C16 / 0x340C6)
    BX = 0xC7;
    label_334B_0C19_340C9:
    // XCHG BL,BH (334B_0C19 / 0x340C9)
    byte tmp_334B_0C19 = BL;
    BL = BH;
    BH = tmp_334B_0C19;
    // MOV DI,BX (334B_0C1B / 0x340CB)
    DI = BX;
    // SHR DI,1 (334B_0C1D / 0x340CD)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR DI,1 (334B_0C1F / 0x340CF)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // ADD DI,BX (334B_0C21 / 0x340D1)
    // DI += BX;
    DI = Alu.Add16(DI, BX);
    // XCHG BL,BH (334B_0C23 / 0x340D3)
    byte tmp_334B_0C23 = BL;
    BL = BH;
    BH = tmp_334B_0C23;
    // ADD DI,DX (334B_0C25 / 0x340D5)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    // ADD DI,word ptr CS:[0x1a3] (334B_0C27 / 0x340D7)
    // DI += UInt16[cs2, 0x1A3];
    DI = Alu.Add16(DI, UInt16[cs2, 0x1A3]);
    // RET  (334B_0C2C / 0x340DC)
    return NearRet();
  }
  
  public Action not_observed_334B_0C2D_0340DD(int gotoTarget) {
    label_334B_0C2D_340DD:
    // PUSH BX (334B_0C2D / 0x340DD)
    Stack.Push(BX);
    // CALL 0x3000:40c0 (334B_0C2E / 0x340DE)
    NearCall(cs2, 0xC31, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP BX (334B_0C31 / 0x340E1)
    BX = Stack.Pop();
    // STOSB ES:DI (334B_0C32 / 0x340E2)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // RETF  (334B_0C33 / 0x340E3)
    return FarRet();
  }
  
  public Action spice86_label_334B_0C34_340E4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x240E4: goto label_334B_0C34_340E4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0C34_340E4:
    // CALL 0x3000:40c0 (334B_0C34 / 0x340E4)
    NearCall(cs2, 0xC37, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV AL,byte ptr ES:[DI] (334B_0C37 / 0x340E7)
    AL = UInt8[ES, DI];
    // RETF  (334B_0C3A / 0x340EA)
    return FarRet();
  }
  
  public Action spice86_label_334B_0F5B_3440B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x240F6: goto label_334B_0C46_340F6;break;
      case 0x24235: goto label_334B_0D85_34235;break;
      case 0x2440B: goto label_334B_0F5B_3440B;break;
      case 0x24A3A: goto label_334B_158A_34A3A;break;
      case 0x240EB: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_0C3B_340EB:
    // MOV BP,0x1234 (334B_0C3B / 0x340EB)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_13DD_3488D, 334B_0FB4_34464
    BP = 0x1234;
    // SUB DI,BP (334B_0C3E / 0x340EE)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // SUB DI,BP (334B_0C40 / 0x340F0)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // ADD DI,0x140 (334B_0C42 / 0x340F2)
    // Instruction bytes at index 1 modified by those instruction(s): 334B_0C74_34124, 334B_0FBE_3446E
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0C46_340F6:
    // LODSB SI (334B_0C46 / 0x340F6)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_0C47 / 0x340F7)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4135 (334B_0C49 / 0x340F9)
    if(SignFlag) {
      goto label_334B_0C85_34135;
    }
    // MOV CX,AX (334B_0C4B / 0x340FB)
    CX = AX;
    // XOR CH,CH (334B_0C4D / 0x340FD)
    CH = 0;
    // INC CX (334B_0C4F / 0x340FF)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0C50 / 0x34100)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    label_334B_0C52_34102:
    // LODSB SI (334B_0C52 / 0x34102)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,AL (334B_0C53 / 0x34103)
    AH = AL;
    // AND AL,DL (334B_0C55 / 0x34105)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:412b (334B_0C57 / 0x34107)
    if(ZeroFlag) {
      goto label_334B_0C7B_3412B;
    }
    // ADD AL,DH (334B_0C59 / 0x34109)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_0C5B / 0x3410B)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AH,1 (334B_0C5C / 0x3410C)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_0C5E_3410E:
    // SHR AH,1 (334B_0C5E / 0x3410E)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_0C60 / 0x34110)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_0C62 / 0x34112)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:4130 (334B_0C64 / 0x34114)
    if(ZeroFlag) {
      goto label_334B_0C80_34130;
    }
    // MOV AL,AH (334B_0C66 / 0x34116)
    AL = AH;
    // ADD AL,DH (334B_0C68 / 0x34118)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_0C6A / 0x3411A)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4102 (334B_0C6B / 0x3411B)
    if(--CX != 0) {
      goto label_334B_0C52_34102;
    }
    label_334B_0C6D_3411D:
    // OR BP,BP (334B_0C6D / 0x3411D)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:40f6 (334B_0C6F / 0x3411F)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0C46_340F6;
    }
    // DEC BX (334B_0C71 / 0x34121)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:40eb (334B_0C72 / 0x34122)
    if(!ZeroFlag) {
      goto label_334B_0C3B_340EB;
    }
    label_334B_0C74_34124:
    // MOV byte ptr CS:[0xc43],0xc7 (334B_0C74 / 0x34124)
    UInt8[cs2, 0xC43] = 0xC7;
    // RETF  (334B_0C7A / 0x3412A)
    return FarRet();
    label_334B_0C7B_3412B:
    // INC DI (334B_0C7B / 0x3412B)
    DI = Alu.Inc16(DI);
    // SHR AH,1 (334B_0C7C / 0x3412C)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JNZ 0x3000:410e (334B_0C7E / 0x3412E)
    if(!ZeroFlag) {
      goto label_334B_0C5E_3410E;
    }
    label_334B_0C80_34130:
    // INC DI (334B_0C80 / 0x34130)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:4102 (334B_0C81 / 0x34131)
    if(--CX != 0) {
      goto label_334B_0C52_34102;
    }
    // JMP 0x3000:411d (334B_0C83 / 0x34133)
    goto label_334B_0C6D_3411D;
    label_334B_0C85_34135:
    // MOV CX,0x101 (334B_0C85 / 0x34135)
    CX = 0x101;
    // XOR AH,AH (334B_0C88 / 0x34138)
    AH = 0;
    // SUB CX,AX (334B_0C8A / 0x3413A)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0C8C / 0x3413C)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // LODSB SI (334B_0C8E / 0x3413E)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHL AX,1 (334B_0C8F / 0x3413F)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JZ 0x3000:4166 (334B_0C91 / 0x34141)
    if(ZeroFlag) {
      goto label_334B_0CB6_34166;
    }
    // SHL AX,1 (334B_0C93 / 0x34143)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_0C95 / 0x34145)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_0C97 / 0x34147)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHR AL,1 (334B_0C99 / 0x34149)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:4170 (334B_0C9B / 0x3414B)
    if(ZeroFlag) {
      goto label_334B_0CC0_34170;
    }
    // SHR AL,1 (334B_0C9D / 0x3414D)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0C9F / 0x3414F)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0CA1 / 0x34151)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // ADD AL,DH (334B_0CA3 / 0x34153)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // OR AH,AH (334B_0CA5 / 0x34155)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x3000:417f (334B_0CA7 / 0x34157)
    if(ZeroFlag) {
      goto label_334B_0CCF_3417F;
    }
    // ADD AH,DH (334B_0CA9 / 0x34159)
    // AH += DH;
    AH = Alu.Add8(AH, DH);
    while (CX-- != 0) {
      // STOSW ES:DI (334B_0CAB / 0x3415B)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    label_334B_0CAD_3415D:
    // OR BP,BP (334B_0CAD / 0x3415D)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:40f6 (334B_0CAF / 0x3415F)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0C46_340F6;
    }
    label_334B_0CB1_34161:
    // DEC BX (334B_0CB1 / 0x34161)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:40eb (334B_0CB2 / 0x34162)
    if(!ZeroFlag) {
      goto label_334B_0C3B_340EB;
    }
    // JMP 0x3000:4124 (334B_0CB4 / 0x34164)
    goto label_334B_0C74_34124;
    label_334B_0CB6_34166:
    // SHL CX,1 (334B_0CB6 / 0x34166)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // ADD DI,CX (334B_0CB8 / 0x34168)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // OR BP,BP (334B_0CBA / 0x3416A)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:40f6 (334B_0CBC / 0x3416C)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0C46_340F6;
    }
    // JMP 0x3000:4161 (334B_0CBE / 0x3416E)
    goto label_334B_0CB1_34161;
    label_334B_0CC0_34170:
    // MOV AL,AH (334B_0CC0 / 0x34170)
    AL = AH;
    // ADD AL,DH (334B_0CC2 / 0x34172)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    label_334B_0CC4_34174:
    // INC DI (334B_0CC4 / 0x34174)
    DI = Alu.Inc16(DI);
    // STOSB ES:DI (334B_0CC5 / 0x34175)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4174 (334B_0CC6 / 0x34176)
    if(--CX != 0) {
      goto label_334B_0CC4_34174;
    }
    // OR BP,BP (334B_0CC8 / 0x34178)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JBE 0x3000:4161 (334B_0CCA / 0x3417A)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_0CB1_34161;
    }
    // JMP 0x3000:40f6 (334B_0CCC / 0x3417C)
    goto label_334B_0C46_340F6;
    label_334B_0CCF_3417F:
    // STOSB ES:DI (334B_0CCF / 0x3417F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DI (334B_0CD0 / 0x34180)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:417f (334B_0CD1 / 0x34181)
    if(--CX != 0) {
      goto label_334B_0CCF_3417F;
    }
    // JMP 0x3000:415d (334B_0CD3 / 0x34183)
    goto label_334B_0CAD_3415D;
    label_334B_0CD5_34185:
    // MOV BP,0x1234 (334B_0CD5 / 0x34185)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_0FD9_34489
    BP = 0x1234;
    // ADD DI,BP (334B_0CD8 / 0x34188)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // ADD DI,BP (334B_0CDA / 0x3418A)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // ADD DI,0x140 (334B_0CDC / 0x3418C)
    // Instruction bytes at index 1 modified by those instruction(s): 334B_0D13_341C3, 334B_0D4A_341FA, 334B_0FE3_34493
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0CE0_34190:
    // MOV AL,byte ptr [SI] (334B_0CE0 / 0x34190)
    AL = UInt8[DS, SI];
    // INC SI (334B_0CE2 / 0x34192)
    SI = Alu.Inc16(SI);
    // OR AL,AL (334B_0CE3 / 0x34193)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4201 (334B_0CE5 / 0x34195)
    if(SignFlag) {
      goto label_334B_0D51_34201;
    }
    // MOV CX,AX (334B_0CE7 / 0x34197)
    CX = AX;
    // XOR CH,CH (334B_0CE9 / 0x34199)
    CH = 0;
    // INC CX (334B_0CEB / 0x3419B)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0CEC / 0x3419C)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    label_334B_0CEE_3419E:
    // MOV AL,byte ptr [SI] (334B_0CEE / 0x3419E)
    AL = UInt8[DS, SI];
    // INC SI (334B_0CF0 / 0x341A0)
    SI = Alu.Inc16(SI);
    // MOV AH,AL (334B_0CF1 / 0x341A1)
    AH = AL;
    // AND AL,DL (334B_0CF3 / 0x341A3)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:41ca (334B_0CF5 / 0x341A5)
    if(ZeroFlag) {
      goto label_334B_0D1A_341CA;
    }
    // ADD AL,DH (334B_0CF7 / 0x341A7)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_0CF9 / 0x341A9)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AH,1 (334B_0CFA / 0x341AA)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_0CFC_341AC:
    // SHR AH,1 (334B_0CFC / 0x341AC)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_0CFE / 0x341AE)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_0D00 / 0x341B0)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:41cf (334B_0D02 / 0x341B2)
    if(ZeroFlag) {
      goto label_334B_0D1F_341CF;
    }
    // MOV AL,AH (334B_0D04 / 0x341B4)
    AL = AH;
    // ADD AL,DH (334B_0D06 / 0x341B6)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_0D08 / 0x341B8)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:419e (334B_0D09 / 0x341B9)
    if(--CX != 0) {
      goto label_334B_0CEE_3419E;
    }
    label_334B_0D0B_341BB:
    // OR BP,BP (334B_0D0B / 0x341BB)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4190 (334B_0D0D / 0x341BD)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0CE0_34190;
    }
    // DEC BX (334B_0D0F / 0x341BF)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4185 (334B_0D10 / 0x341C0)
    if(!ZeroFlag) {
      goto label_334B_0CD5_34185;
    }
    // CLD  (334B_0D12 / 0x341C2)
    DirectionFlag = false;
    // MOV byte ptr CS:[0xcdd],0xc7 (334B_0D13 / 0x341C3)
    UInt8[cs2, 0xCDD] = 0xC7;
    // RETF  (334B_0D19 / 0x341C9)
    return FarRet();
    label_334B_0D1A_341CA:
    // DEC DI (334B_0D1A / 0x341CA)
    DI = Alu.Dec16(DI);
    // SHR AH,1 (334B_0D1B / 0x341CB)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JNZ 0x3000:41ac (334B_0D1D / 0x341CD)
    if(!ZeroFlag) {
      goto label_334B_0CFC_341AC;
    }
    label_334B_0D1F_341CF:
    // DEC DI (334B_0D1F / 0x341CF)
    DI = Alu.Dec16(DI);
    // LOOP 0x3000:419e (334B_0D20 / 0x341D0)
    if(--CX != 0) {
      goto label_334B_0CEE_3419E;
    }
    // JMP 0x3000:41bb (334B_0D22 / 0x341D2)
    goto label_334B_0D0B_341BB;
    label_334B_0D24_341D4:
    // SHL CX,1 (334B_0D24 / 0x341D4)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // SUB DI,CX (334B_0D26 / 0x341D6)
    // DI -= CX;
    DI = Alu.Sub16(DI, CX);
    // OR BP,BP (334B_0D28 / 0x341D8)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4190 (334B_0D2A / 0x341DA)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0CE0_34190;
    }
    // JMP 0x3000:41f6 (334B_0D2C / 0x341DC)
    goto label_334B_0D46_341F6;
    label_334B_0D2F_341DF:
    // MOV AL,AH (334B_0D2F / 0x341DF)
    AL = AH;
    // ADD AL,DH (334B_0D31 / 0x341E1)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    label_334B_0D33_341E3:
    // DEC DI (334B_0D33 / 0x341E3)
    DI = Alu.Dec16(DI);
    // STOSB ES:DI (334B_0D34 / 0x341E4)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:41e3 (334B_0D35 / 0x341E5)
    if(--CX != 0) {
      goto label_334B_0D33_341E3;
    }
    // OR BP,BP (334B_0D37 / 0x341E7)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4190 (334B_0D39 / 0x341E9)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0CE0_34190;
    }
    // JMP 0x3000:41f6 (334B_0D3B / 0x341EB)
    goto label_334B_0D46_341F6;
    label_334B_0D3E_341EE:
    // STOSB ES:DI (334B_0D3E / 0x341EE)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // DEC DI (334B_0D3F / 0x341EF)
    DI = Alu.Dec16(DI);
    // LOOP 0x3000:41ee (334B_0D40 / 0x341F0)
    if(--CX != 0) {
      goto label_334B_0D3E_341EE;
    }
    label_334B_0D42_341F2:
    // OR BP,BP (334B_0D42 / 0x341F2)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4190 (334B_0D44 / 0x341F4)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0CE0_34190;
    }
    label_334B_0D46_341F6:
    // DEC BX (334B_0D46 / 0x341F6)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4185 (334B_0D47 / 0x341F7)
    if(!ZeroFlag) {
      goto label_334B_0CD5_34185;
    }
    // CLD  (334B_0D49 / 0x341F9)
    DirectionFlag = false;
    // MOV byte ptr CS:[0xcdd],0xc7 (334B_0D4A / 0x341FA)
    UInt8[cs2, 0xCDD] = 0xC7;
    // RETF  (334B_0D50 / 0x34200)
    return FarRet();
    label_334B_0D51_34201:
    // MOV CX,0x101 (334B_0D51 / 0x34201)
    CX = 0x101;
    // XOR AH,AH (334B_0D54 / 0x34204)
    AH = 0;
    // SUB CX,AX (334B_0D56 / 0x34206)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0D58 / 0x34208)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // MOV AL,byte ptr [SI] (334B_0D5A / 0x3420A)
    AL = UInt8[DS, SI];
    // INC SI (334B_0D5C / 0x3420C)
    SI = Alu.Inc16(SI);
    // SHL AX,1 (334B_0D5D / 0x3420D)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JZ 0x3000:41d4 (334B_0D5F / 0x3420F)
    if(ZeroFlag) {
      goto label_334B_0D24_341D4;
    }
    // SHL AX,1 (334B_0D61 / 0x34211)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_0D63 / 0x34213)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_0D65 / 0x34215)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHR AL,1 (334B_0D67 / 0x34217)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:41df (334B_0D69 / 0x34219)
    if(ZeroFlag) {
      goto label_334B_0D2F_341DF;
    }
    // SHR AL,1 (334B_0D6B / 0x3421B)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0D6D / 0x3421D)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0D6F / 0x3421F)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // ADD AL,DH (334B_0D71 / 0x34221)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // OR AH,AH (334B_0D73 / 0x34223)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x3000:41ee (334B_0D75 / 0x34225)
    if(ZeroFlag) {
      goto label_334B_0D3E_341EE;
    }
    // ADD AH,DH (334B_0D77 / 0x34227)
    // AH += DH;
    AH = Alu.Add8(AH, DH);
    // DEC DI (334B_0D79 / 0x34229)
    DI = Alu.Dec16(DI);
    // XCHG AL,AH (334B_0D7A / 0x3422A)
    byte tmp_334B_0D7A = AL;
    AL = AH;
    AH = tmp_334B_0D7A;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_0D7C / 0x3422C)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // INC DI (334B_0D7E / 0x3422E)
    DI = Alu.Inc16(DI);
    // JMP 0x3000:41f2 (334B_0D7F / 0x3422F)
    goto label_334B_0D42_341F2;
    label_334B_0D85_34235:
    // MOV byte ptr CS:[0x19e],CH (334B_0D85 / 0x34235)
    UInt8[cs2, 0x19E] = CH;
    // XOR CH,CH (334B_0D8A / 0x3423A)
    CH = 0;
    // AND AX,0x3ff (334B_0D8C / 0x3423C)
    // AX &= 0x3FF;
    AX = Alu.And16(AX, 0x3FF);
    // MOV CS:[0xd81],AX (334B_0D8F / 0x3423F)
    UInt16[cs2, 0xD81] = AX;
    // MOV AX,DI (334B_0D93 / 0x34243)
    AX = DI;
    // AND DI,0x1ff (334B_0D95 / 0x34245)
    // DI &= 0x1FF;
    DI = Alu.And16(DI, 0x1FF);
    // ADD DI,0x3 (334B_0D99 / 0x34249)
    // DI += 0x3;
    DI = Alu.Add16(DI, 0x3);
    // SHR DI,1 (334B_0D9C / 0x3424C)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR DI,1 (334B_0D9E / 0x3424E)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHL DI,1 (334B_0DA0 / 0x34250)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV word ptr CS:[0xdde],DI (334B_0DA2 / 0x34252)
    UInt16[cs2, 0xDDE] = DI;
    // MOV byte ptr CS:[0xe13],0xc7 (334B_0DA7 / 0x34257)
    UInt8[cs2, 0xE13] = 0xC7;
    // TEST AX,0x2000 (334B_0DAD / 0x3425D)
    Alu.And16(AX, 0x2000);
    // JZ 0x3000:426b (334B_0DB0 / 0x34260)
    if(ZeroFlag) {
      goto label_334B_0DBB_3426B;
    }
    // MOV byte ptr CS:[0xe13],0xef (334B_0DB2 / 0x34262)
    UInt8[cs2, 0xE13] = 0xEF;
    // ADD BX,CX (334B_0DB8 / 0x34268)
    // BX += CX;
    BX = Alu.Add16(BX, CX);
    // DEC BX (334B_0DBA / 0x3426A)
    BX = Alu.Dec16(BX);
    label_334B_0DBB_3426B:
    // MOV byte ptr CS:[0xe26],0x47 (334B_0DBB / 0x3426B)
    UInt8[cs2, 0xE26] = 0x47;
    // TEST AX,0x4000 (334B_0DC1 / 0x34271)
    Alu.And16(AX, 0x4000);
    // JZ 0x3000:4283 (334B_0DC4 / 0x34274)
    if(ZeroFlag) {
      goto label_334B_0DD3_34283;
    }
    // MOV byte ptr CS:[0xe26],0x4f (334B_0DC6 / 0x34276)
    UInt8[cs2, 0xE26] = 0x4F;
    // ADD DX,word ptr CS:[0xd81] (334B_0DCC / 0x3427C)
    // DX += UInt16[cs2, 0xD81];
    DX = Alu.Add16(DX, UInt16[cs2, 0xD81]);
    // DEC DX (334B_0DD1 / 0x34281)
    DX = Alu.Dec16(DX);
    // STD  (334B_0DD2 / 0x34282)
    DirectionFlag = true;
    label_334B_0DD3_34283:
    // CALL 0x3000:40c0 (334B_0DD3 / 0x34283)
    NearCall(cs2, 0xDD6, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // XOR BX,BX (334B_0DD6 / 0x34286)
    BX = 0;
    // MOV word ptr CS:[0xd83],BX (334B_0DD8 / 0x34288)
    UInt16[cs2, 0xD83] = BX;
    label_334B_0DDD_3428D:
    // MOV AX,0x1234 (334B_0DDD / 0x3428D)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_0DA2_34252
    AX = 0x1234;
    // PUSH SI (334B_0DE0 / 0x34290)
    Stack.Push(SI);
    // MUL BH (334B_0DE1 / 0x34291)
    Cpu.Mul8(BH);
    // ADD SI,AX (334B_0DE3 / 0x34293)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // PUSH DI (334B_0DE5 / 0x34295)
    Stack.Push(DI);
    // PUSH CX (334B_0DE6 / 0x34296)
    Stack.Push(CX);
    // XOR DX,DX (334B_0DE7 / 0x34297)
    DX = 0;
    // MOV BX,SI (334B_0DE9 / 0x34299)
    BX = SI;
    // MOV CX,word ptr CS:[0xd81] (334B_0DEB / 0x3429B)
    CX = UInt16[cs2, 0xD81];
    // MOV AH,byte ptr CS:[0x19e] (334B_0DF0 / 0x342A0)
    AH = UInt8[cs2, 0x19E];
    label_334B_0DF5_342A5:
    // MOV AL,DH (334B_0DF5 / 0x342A5)
    AL = DH;
    // SHR AL,1 (334B_0DF7 / 0x342A7)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // XLAT BX (334B_0DF9 / 0x342A9)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // JNC 0x3000:42b4 (334B_0DFA / 0x342AA)
    if(!CarryFlag) {
      goto label_334B_0E04_342B4;
    }
    // SHR AL,1 (334B_0DFC / 0x342AC)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0DFE / 0x342AE)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0E00 / 0x342B0)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_0E02 / 0x342B2)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    label_334B_0E04_342B4:
    // AND AL,0xf (334B_0E04 / 0x342B4)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x3000:42d6 (334B_0E06 / 0x342B6)
    if(ZeroFlag) {
      goto label_334B_0E26_342D6;
    }
    // ADD AL,AH (334B_0E08 / 0x342B8)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // STOSB ES:DI (334B_0E0A / 0x342BA)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DX,BP (334B_0E0B / 0x342BB)
    // DX += BP;
    DX = Alu.Add16(DX, BP);
    // LOOP 0x3000:42a5 (334B_0E0D / 0x342BD)
    if(--CX != 0) {
      goto label_334B_0DF5_342A5;
    }
    label_334B_0E0F_342BF:
    // POP CX (334B_0E0F / 0x342BF)
    CX = Stack.Pop();
    // POP DI (334B_0E10 / 0x342C0)
    DI = Stack.Pop();
    // POP SI (334B_0E11 / 0x342C1)
    SI = Stack.Pop();
    // ADD DI,0x140 (334B_0E12 / 0x342C2)
    // Instruction bytes at index 1 modified by those instruction(s): 334B_0DA7_34257, 334B_0DB2_34262
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // MOV BX,word ptr CS:[0xd83] (334B_0E16 / 0x342C6)
    BX = UInt16[cs2, 0xD83];
    // ADD BX,BP (334B_0E1B / 0x342CB)
    // BX += BP;
    BX = Alu.Add16(BX, BP);
    // MOV word ptr CS:[0xd83],BX (334B_0E1D / 0x342CD)
    UInt16[cs2, 0xD83] = BX;
    // LOOP 0x3000:428d (334B_0E22 / 0x342D2)
    if(--CX != 0) {
      goto label_334B_0DDD_3428D;
    }
    // CLD  (334B_0E24 / 0x342D4)
    DirectionFlag = false;
    // RETF  (334B_0E25 / 0x342D5)
    return FarRet();
    label_334B_0E26_342D6:
    // INC DI (334B_0E26 / 0x342D6)
    // Instruction bytes at index 0 modified by those instruction(s): 334B_0DBB_3426B, 334B_0DC6_34276
    DI = Alu.Inc16(DI);
    // ADD DX,BP (334B_0E27 / 0x342D7)
    // DX += BP;
    DX = Alu.Add16(DX, BP);
    // LOOP 0x3000:42a5 (334B_0E29 / 0x342D9)
    if(--CX != 0) {
      goto label_334B_0DF5_342A5;
    }
    // JMP 0x3000:42bf (334B_0E2B / 0x342DB)
    goto label_334B_0E0F_342BF;
    label_334B_0E2D_342DD:
    // MOV BP,DX (334B_0E2D / 0x342DD)
    BP = DX;
    // SUB DI,BP (334B_0E2F / 0x342DF)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // ADD DI,0x140 (334B_0E31 / 0x342E1)
    // Instruction bytes at index 1 modified by those instruction(s): 334B_0E51_34301
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0E35_342E5:
    // LODSB SI (334B_0E35 / 0x342E5)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_0E36 / 0x342E6)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:431a (334B_0E38 / 0x342E8)
    if(SignFlag) {
      goto label_334B_0E6A_3431A;
    }
    // MOV CX,AX (334B_0E3A / 0x342EA)
    CX = AX;
    // XOR CH,CH (334B_0E3C / 0x342EC)
    CH = 0;
    // INC CX (334B_0E3E / 0x342EE)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0E3F / 0x342EF)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    label_334B_0E41_342F1:
    // LODSB SI (334B_0E41 / 0x342F1)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_0E42 / 0x342F2)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:430e (334B_0E44 / 0x342F4)
    if(ZeroFlag) {
      goto label_334B_0E5E_3430E;
    }
    // STOSB ES:DI (334B_0E46 / 0x342F6)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:42f1 (334B_0E47 / 0x342F7)
    if(--CX != 0) {
      goto label_334B_0E41_342F1;
    }
    // OR BP,BP (334B_0E49 / 0x342F9)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:42e5 (334B_0E4B / 0x342FB)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E35_342E5;
    }
    // DEC BX (334B_0E4D / 0x342FD)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:42dd (334B_0E4E / 0x342FE)
    if(!ZeroFlag) {
      goto label_334B_0E2D_342DD;
    }
    label_334B_0E50_34300:
    // CLD  (334B_0E50 / 0x34300)
    DirectionFlag = false;
    // MOV byte ptr CS:[0xe32],0xc7 (334B_0E51 / 0x34301)
    UInt8[cs2, 0xE32] = 0xC7;
    // MOV byte ptr CS:[0xef0],0xc7 (334B_0E57 / 0x34307)
    UInt8[cs2, 0xEF0] = 0xC7;
    // RETF  (334B_0E5D / 0x3430D)
    return FarRet();
    label_334B_0E5E_3430E:
    // INC DI (334B_0E5E / 0x3430E)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:42f1 (334B_0E5F / 0x3430F)
    if(--CX != 0) {
      goto label_334B_0E41_342F1;
    }
    // OR BP,BP (334B_0E61 / 0x34311)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:42e5 (334B_0E63 / 0x34313)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E35_342E5;
    }
    // DEC BX (334B_0E65 / 0x34315)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:42dd (334B_0E66 / 0x34316)
    if(!ZeroFlag) {
      goto label_334B_0E2D_342DD;
    }
    // JMP 0x3000:4300 (334B_0E68 / 0x34318)
    goto label_334B_0E50_34300;
    label_334B_0E6A_3431A:
    // MOV CX,0x101 (334B_0E6A / 0x3431A)
    CX = 0x101;
    // XOR AH,AH (334B_0E6D / 0x3431D)
    AH = 0;
    // SUB CX,AX (334B_0E6F / 0x3431F)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0E71 / 0x34321)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // LODSB SI (334B_0E73 / 0x34323)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_0E74 / 0x34324)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:4333 (334B_0E76 / 0x34326)
    if(ZeroFlag) {
      goto label_334B_0E83_34333;
    }
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0E78 / 0x34328)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // OR BP,BP (334B_0E7A / 0x3432A)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:42e5 (334B_0E7C / 0x3432C)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E35_342E5;
    }
    // DEC BX (334B_0E7E / 0x3432E)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:42dd (334B_0E7F / 0x3432F)
    if(!ZeroFlag) {
      goto label_334B_0E2D_342DD;
    }
    // JMP 0x3000:4300 (334B_0E81 / 0x34331)
    goto label_334B_0E50_34300;
    label_334B_0E83_34333:
    // ADD DI,CX (334B_0E83 / 0x34333)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // OR BP,BP (334B_0E85 / 0x34335)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:42e5 (334B_0E87 / 0x34337)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E35_342E5;
    }
    // DEC BX (334B_0E89 / 0x34339)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:42dd (334B_0E8A / 0x3433A)
    if(!ZeroFlag) {
      goto label_334B_0E2D_342DD;
    }
    // JMP 0x3000:4300 (334B_0E8C / 0x3433C)
    goto label_334B_0E50_34300;
    label_334B_0E8E_3433E:
    // MOV BP,DX (334B_0E8E / 0x3433E)
    BP = DX;
    // ADD DI,BP (334B_0E90 / 0x34340)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // ADD DI,0x140 (334B_0E92 / 0x34342)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0E96_34346:
    // MOV AL,byte ptr [SI] (334B_0E96 / 0x34346)
    AL = UInt8[DS, SI];
    // INC SI (334B_0E98 / 0x34348)
    SI = Alu.Inc16(SI);
    // OR AL,AL (334B_0E99 / 0x34349)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:4373 (334B_0E9B / 0x3434B)
    if(ZeroFlag) {
      goto label_334B_0EC3_34373;
    }
    // MOV CX,AX (334B_0E9D / 0x3434D)
    CX = AX;
    // XOR CH,CH (334B_0E9F / 0x3434F)
    CH = 0;
    // INC CX (334B_0EA1 / 0x34351)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0EA2 / 0x34352)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    label_334B_0EA4_34354:
    // MOV AL,byte ptr [SI] (334B_0EA4 / 0x34354)
    AL = UInt8[DS, SI];
    // INC SI (334B_0EA6 / 0x34356)
    SI = Alu.Inc16(SI);
    // OR AL,AL (334B_0EA7 / 0x34357)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:4367 (334B_0EA9 / 0x34359)
    if(ZeroFlag) {
      goto label_334B_0EB7_34367;
    }
    // STOSB ES:DI (334B_0EAB / 0x3435B)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4354 (334B_0EAC / 0x3435C)
    if(--CX != 0) {
      goto label_334B_0EA4_34354;
    }
    // OR BP,BP (334B_0EAE / 0x3435E)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4346 (334B_0EB0 / 0x34360)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E96_34346;
    }
    // DEC BX (334B_0EB2 / 0x34362)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:433e (334B_0EB3 / 0x34363)
    if(!ZeroFlag) {
      goto label_334B_0E8E_3433E;
    }
    // JMP 0x3000:4300 (334B_0EB5 / 0x34365)
    goto label_334B_0E50_34300;
    label_334B_0EB7_34367:
    // DEC DI (334B_0EB7 / 0x34367)
    DI = Alu.Dec16(DI);
    // LOOP 0x3000:4354 (334B_0EB8 / 0x34368)
    if(--CX != 0) {
      goto label_334B_0EA4_34354;
    }
    // OR BP,BP (334B_0EBA / 0x3436A)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4346 (334B_0EBC / 0x3436C)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E96_34346;
    }
    // DEC BX (334B_0EBE / 0x3436E)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:433e (334B_0EBF / 0x3436F)
    if(!ZeroFlag) {
      goto label_334B_0E8E_3433E;
    }
    // JMP 0x3000:4300 (334B_0EC1 / 0x34371)
    goto label_334B_0E50_34300;
    label_334B_0EC3_34373:
    // MOV CX,0x101 (334B_0EC3 / 0x34373)
    CX = 0x101;
    // XOR AH,AH (334B_0EC6 / 0x34376)
    AH = 0;
    // SUB CX,AX (334B_0EC8 / 0x34378)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0ECA / 0x3437A)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // MOV AL,byte ptr [SI] (334B_0ECC / 0x3437C)
    AL = UInt8[DS, SI];
    // INC SI (334B_0ECE / 0x3437E)
    SI = Alu.Inc16(SI);
    // OR AL,AL (334B_0ECF / 0x3437F)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:438f (334B_0ED1 / 0x34381)
    if(ZeroFlag) {
      goto label_334B_0EDF_3438F;
    }
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0ED3 / 0x34383)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // OR BP,BP (334B_0ED5 / 0x34385)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4346 (334B_0ED7 / 0x34387)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E96_34346;
    }
    // DEC BX (334B_0ED9 / 0x34389)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:433e (334B_0EDA / 0x3438A)
    if(!ZeroFlag) {
      goto label_334B_0E8E_3433E;
    }
    // JMP 0x3000:4300 (334B_0EDC / 0x3438C)
    goto label_334B_0E50_34300;
    label_334B_0EDF_3438F:
    // SUB DI,CX (334B_0EDF / 0x3438F)
    // DI -= CX;
    DI = Alu.Sub16(DI, CX);
    // OR BP,BP (334B_0EE1 / 0x34391)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:4346 (334B_0EE3 / 0x34393)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0E96_34346;
    }
    // DEC BX (334B_0EE5 / 0x34395)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:433e (334B_0EE6 / 0x34396)
    if(!ZeroFlag) {
      goto label_334B_0E8E_3433E;
    }
    // JMP 0x3000:4300 (334B_0EE8 / 0x34398)
    goto label_334B_0E50_34300;
    label_334B_0EEB_3439B:
    // MOV BP,DX (334B_0EEB / 0x3439B)
    BP = DX;
    // SUB DI,BP (334B_0EED / 0x3439D)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // ADD DI,0x140 (334B_0EEF / 0x3439F)
    // Instruction bytes at index 1 modified by those instruction(s): 334B_0E57_34307
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0EF3_343A3:
    // LODSB SI (334B_0EF3 / 0x343A3)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_0EF4 / 0x343A4)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:43b9 (334B_0EF6 / 0x343A6)
    if(SignFlag) {
      goto label_334B_0F09_343B9;
    }
    // MOV CX,AX (334B_0EF8 / 0x343A8)
    CX = AX;
    // XOR CH,CH (334B_0EFA / 0x343AA)
    CH = 0;
    // INC CX (334B_0EFC / 0x343AC)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0EFD / 0x343AD)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_0EFF / 0x343AF)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JA 0x3000:43a3 (334B_0F01 / 0x343B1)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0EF3_343A3;
    }
    // DEC BX (334B_0F03 / 0x343B3)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:439b (334B_0F04 / 0x343B4)
    if(!ZeroFlag) {
      goto label_334B_0EEB_3439B;
    }
    // JMP 0x3000:4300 (334B_0F06 / 0x343B6)
    goto label_334B_0E50_34300;
    label_334B_0F09_343B9:
    // MOV CX,0x101 (334B_0F09 / 0x343B9)
    CX = 0x101;
    // XOR AH,AH (334B_0F0C / 0x343BC)
    AH = 0;
    // SUB CX,AX (334B_0F0E / 0x343BE)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0F10 / 0x343C0)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // LODSB SI (334B_0F12 / 0x343C2)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0F13 / 0x343C3)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JA 0x3000:43a3 (334B_0F15 / 0x343C5)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0EF3_343A3;
    }
    // DEC BX (334B_0F17 / 0x343C7)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:439b (334B_0F18 / 0x343C8)
    if(!ZeroFlag) {
      goto label_334B_0EEB_3439B;
    }
    // JMP 0x3000:4300 (334B_0F1A / 0x343CA)
    goto label_334B_0E50_34300;
    label_334B_0F1D_343CD:
    // MOV BP,DX (334B_0F1D / 0x343CD)
    BP = DX;
    // ADD DI,BP (334B_0F1F / 0x343CF)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // ADD DI,0x140 (334B_0F21 / 0x343D1)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_0F25_343D5:
    // MOV AL,byte ptr [SI] (334B_0F25 / 0x343D5)
    AL = UInt8[DS, SI];
    // INC SI (334B_0F27 / 0x343D7)
    SI = Alu.Inc16(SI);
    // OR AL,AL (334B_0F28 / 0x343D8)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:43f3 (334B_0F2A / 0x343DA)
    if(ZeroFlag) {
      goto label_334B_0F43_343F3;
    }
    // MOV CX,AX (334B_0F2C / 0x343DC)
    CX = AX;
    // XOR CH,CH (334B_0F2E / 0x343DE)
    CH = 0;
    // INC CX (334B_0F30 / 0x343E0)
    CX = Alu.Inc16(CX);
    // SUB BP,CX (334B_0F31 / 0x343E1)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    label_334B_0F33_343E3:
    // MOV AL,byte ptr [SI] (334B_0F33 / 0x343E3)
    AL = UInt8[DS, SI];
    // INC SI (334B_0F35 / 0x343E5)
    SI = Alu.Inc16(SI);
    // STOSB ES:DI (334B_0F36 / 0x343E6)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:43e3 (334B_0F37 / 0x343E7)
    if(--CX != 0) {
      goto label_334B_0F33_343E3;
    }
    // OR BP,BP (334B_0F39 / 0x343E9)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:43d5 (334B_0F3B / 0x343EB)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0F25_343D5;
    }
    // DEC BX (334B_0F3D / 0x343ED)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:43cd (334B_0F3E / 0x343EE)
    if(!ZeroFlag) {
      goto label_334B_0F1D_343CD;
    }
    // JMP 0x3000:4300 (334B_0F40 / 0x343F0)
    goto label_334B_0E50_34300;
    label_334B_0F43_343F3:
    // MOV CX,0x101 (334B_0F43 / 0x343F3)
    CX = 0x101;
    // XOR AH,AH (334B_0F46 / 0x343F6)
    AH = 0;
    // SUB CX,AX (334B_0F48 / 0x343F8)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // SUB BP,CX (334B_0F4A / 0x343FA)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // MOV AL,byte ptr [SI] (334B_0F4C / 0x343FC)
    AL = UInt8[DS, SI];
    // INC SI (334B_0F4E / 0x343FE)
    SI = Alu.Inc16(SI);
    while (CX-- != 0) {
      // STOSB ES:DI (334B_0F4F / 0x343FF)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // OR BP,BP (334B_0F51 / 0x34401)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JA 0x3000:43d5 (334B_0F53 / 0x34403)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_0F25_343D5;
    }
    // DEC BX (334B_0F55 / 0x34405)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:43cd (334B_0F56 / 0x34406)
    if(!ZeroFlag) {
      goto label_334B_0F1D_343CD;
    }
    // JMP 0x3000:4300 (334B_0F58 / 0x34408)
    goto label_334B_0E50_34300;
    entry:
    label_334B_0F5B_3440B:
    // CMP CH,0xfe (334B_0F5B / 0x3440B)
    Alu.Sub8(CH, 0xFE);
    // JC 0x3000:4413 (334B_0F5E / 0x3440E)
    if(CarryFlag) {
      goto label_334B_0F63_34413;
    }
    // JMP 0x3000:44ba (334B_0F60 / 0x34410)
    goto label_334B_100A_344BA;
    label_334B_0F63_34413:
    // OR DI,DI (334B_0F63 / 0x34413)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JS 0x3000:443e (334B_0F65 / 0x34415)
    if(SignFlag) {
      goto label_334B_0F8E_3443E;
    }
    // MOV AX,DI (334B_0F67 / 0x34417)
    AX = DI;
    // MOV BP,0x100 (334B_0F69 / 0x34419)
    BP = 0x100;
    // TEST AX,0x6000 (334B_0F6C / 0x3441C)
    Alu.And16(AX, 0x6000);
    // JZ 0x3000:4424 (334B_0F6F / 0x3441F)
    if(ZeroFlag) {
      goto label_334B_0F74_34424;
    }
    // JMP 0x3000:4235 (334B_0F71 / 0x34421)
    goto label_334B_0D85_34235;
    label_334B_0F74_34424:
    // AND AX,0x1ff (334B_0F74 / 0x34424)
    // AX &= 0x1FF;
    AX = Alu.And16(AX, 0x1FF);
    // ADD AX,0x3 (334B_0F77 / 0x34427)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (334B_0F7A / 0x3442A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_0F7C / 0x3442C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CS:[0x158b],AX (334B_0F7E / 0x3442E)
    UInt16[cs2, 0x158B] = AX;
    // CALL 0x3000:40c0 (334B_0F82 / 0x34432)
    NearCall(cs2, 0xF85, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DH,CH (334B_0F85 / 0x34435)
    DH = CH;
    // XOR CH,CH (334B_0F87 / 0x34437)
    CH = 0;
    // MOV DL,0xf (334B_0F89 / 0x34439)
    DL = 0xF;
    // JMP 0x3000:4a3a (334B_0F8B / 0x3443B)
    goto label_334B_158A_34A3A;
    label_334B_0F8E_3443E:
    // MOV AX,DI (334B_0F8E / 0x3443E)
    AX = DI;
    // AND AX,0x1ff (334B_0F90 / 0x34440)
    // AX &= 0x1FF;
    AX = Alu.And16(AX, 0x1FF);
    // MOV CS:[0xd81],AX (334B_0F93 / 0x34443)
    UInt16[cs2, 0xD81] = AX;
    // ADD AX,0x3 (334B_0F97 / 0x34447)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (334B_0F9A / 0x3444A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_0F9C / 0x3444C)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHL AX,1 (334B_0F9E / 0x3444E)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // MOV BP,AX (334B_0FA0 / 0x34450)
    BP = AX;
    // MOV AX,DI (334B_0FA2 / 0x34452)
    AX = DI;
    // CALL 0x3000:40c0 (334B_0FA4 / 0x34454)
    NearCall(cs2, 0xFA7, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DH,CH (334B_0FA7 / 0x34457)
    DH = CH;
    // XOR CH,CH (334B_0FA9 / 0x34459)
    CH = 0;
    // MOV DL,0xf (334B_0FAB / 0x3445B)
    DL = 0xF;
    // MOV BX,CX (334B_0FAD / 0x3445D)
    BX = CX;
    // TEST AX,0x4000 (334B_0FAF / 0x3445F)
    Alu.And16(AX, 0x4000);
    // JNZ 0x3000:4489 (334B_0FB2 / 0x34462)
    if(!ZeroFlag) {
      goto label_334B_0FD9_34489;
    }
    // MOV word ptr CS:[0xc3c],BP (334B_0FB4 / 0x34464)
    UInt16[cs2, 0xC3C] = BP;
    // TEST AX,0x2000 (334B_0FB9 / 0x34469)
    Alu.And16(AX, 0x2000);
    // JZ 0x3000:4486 (334B_0FBC / 0x3446C)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x3000:40f6 (334B_0FD6 / 0x34486)
      goto label_334B_0C46_340F6;
    }
    // MOV byte ptr CS:[0xc43],0xef (334B_0FBE / 0x3446E)
    UInt8[cs2, 0xC43] = 0xEF;
    // MOV AH,BL (334B_0FC4 / 0x34474)
    AH = BL;
    // DEC AH (334B_0FC6 / 0x34476)
    AH = Alu.Dec8(AH);
    // MOV CH,AH (334B_0FC8 / 0x34478)
    CH = AH;
    // XOR CL,CL (334B_0FCA / 0x3447A)
    CL = 0;
    // MOV AL,CL (334B_0FCC / 0x3447C)
    AL = CL;
    // SHR CX,1 (334B_0FCE / 0x3447E)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (334B_0FD0 / 0x34480)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // ADD DI,AX (334B_0FD2 / 0x34482)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // ADD DI,CX (334B_0FD4 / 0x34484)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    label_334B_0FD6_34486:
    // JMP 0x3000:40f6 (334B_0FD6 / 0x34486)
    goto label_334B_0C46_340F6;
    label_334B_0FD9_34489:
    // MOV word ptr CS:[0xcd6],BP (334B_0FD9 / 0x34489)
    UInt16[cs2, 0xCD6] = BP;
    // TEST AX,0x2000 (334B_0FDE / 0x3448E)
    Alu.And16(AX, 0x2000);
    // JZ 0x3000:44ab (334B_0FE1 / 0x34491)
    if(ZeroFlag) {
      goto label_334B_0FFB_344AB;
    }
    // MOV byte ptr CS:[0xcdd],0xef (334B_0FE3 / 0x34493)
    UInt8[cs2, 0xCDD] = 0xEF;
    // MOV AH,BL (334B_0FE9 / 0x34499)
    AH = BL;
    // DEC AH (334B_0FEB / 0x3449B)
    AH = Alu.Dec8(AH);
    // MOV CH,AH (334B_0FED / 0x3449D)
    CH = AH;
    // XOR CL,CL (334B_0FEF / 0x3449F)
    CL = 0;
    // MOV AL,CL (334B_0FF1 / 0x344A1)
    AL = CL;
    // SHR CX,1 (334B_0FF3 / 0x344A3)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (334B_0FF5 / 0x344A5)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // ADD DI,AX (334B_0FF7 / 0x344A7)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // ADD DI,CX (334B_0FF9 / 0x344A9)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    label_334B_0FFB_344AB:
    // ADD DI,word ptr CS:[0xd81] (334B_0FFB / 0x344AB)
    // DI += UInt16[cs2, 0xD81];
    DI = Alu.Add16(DI, UInt16[cs2, 0xD81]);
    // DEC DI (334B_1000 / 0x344B0)
    DI = Alu.Dec16(DI);
    // STD  (334B_1001 / 0x344B1)
    DirectionFlag = true;
    // JMP 0x3000:4190 (334B_1002 / 0x344B2)
    goto label_334B_0CE0_34190;
    label_334B_100A_344BA:
    // OR DI,DI (334B_100A / 0x344BA)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JS 0x3000:4514 (334B_100C / 0x344BC)
    if(SignFlag) {
      goto label_334B_1064_34514;
    }
    // MOV BP,DI (334B_100E / 0x344BE)
    BP = DI;
    // AND BP,0x1ff (334B_1010 / 0x344C0)
    // BP &= 0x1FF;
    BP = Alu.And16(BP, 0x1FF);
    // MOV AX,DI (334B_1014 / 0x344C4)
    AX = DI;
    // CALL 0x3000:40c0 (334B_1016 / 0x344C6)
    NearCall(cs2, 0x1019, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BX,CX (334B_1019 / 0x344C9)
    BX = CX;
    // XOR BH,BH (334B_101B / 0x344CB)
    BH = 0;
    // CMP CH,0xff (334B_101D / 0x344CD)
    Alu.Sub8(CH, 0xFF);
    // JZ 0x3000:44f3 (334B_1020 / 0x344D0)
    if(ZeroFlag) {
      goto label_334B_1043_344F3;
    }
    // SHR BP,1 (334B_1022 / 0x344D2)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // MOV AX,DI (334B_1024 / 0x344D4)
    AX = DI;
    // JC 0x3000:44e5 (334B_1026 / 0x344D6)
    if(CarryFlag) {
      goto label_334B_1035_344E5;
    }
    label_334B_1028_344D8:
    // MOV CX,BP (334B_1028 / 0x344D8)
    CX = BP;
    // MOV DI,AX (334B_102A / 0x344DA)
    DI = AX;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_102C / 0x344DC)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD AX,0x140 (334B_102E / 0x344DE)
    // AX += 0x140;
    AX = Alu.Add16(AX, 0x140);
    // DEC BX (334B_1031 / 0x344E1)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:44d8 (334B_1032 / 0x344E2)
    if(!ZeroFlag) {
      goto label_334B_1028_344D8;
    }
    // RETF  (334B_1034 / 0x344E4)
    return FarRet();
    label_334B_1035_344E5:
    // MOV CX,BP (334B_1035 / 0x344E5)
    CX = BP;
    // MOV DI,AX (334B_1037 / 0x344E7)
    DI = AX;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1039 / 0x344E9)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOVSB ES:DI,SI (334B_103B / 0x344EB)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD AX,0x140 (334B_103C / 0x344EC)
    // AX += 0x140;
    AX = Alu.Add16(AX, 0x140);
    // DEC BX (334B_103F / 0x344EF)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:44e5 (334B_1040 / 0x344F0)
    if(!ZeroFlag) {
      goto label_334B_1035_344E5;
    }
    // RETF  (334B_1042 / 0x344F2)
    return FarRet();
    label_334B_1043_344F3:
    // MOV DX,DI (334B_1043 / 0x344F3)
    DX = DI;
    label_334B_1045_344F5:
    // MOV CX,BP (334B_1045 / 0x344F5)
    CX = BP;
    // MOV DI,DX (334B_1047 / 0x344F7)
    DI = DX;
    label_334B_1049_344F9:
    // LODSB SI (334B_1049 / 0x344F9)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_104A / 0x344FA)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:4509 (334B_104C / 0x344FC)
    if(ZeroFlag) {
      goto label_334B_1059_34509;
    }
    // STOSB ES:DI (334B_104E / 0x344FE)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:44f9 (334B_104F / 0x344FF)
    if(--CX != 0) {
      goto label_334B_1049_344F9;
    }
    // ADD DX,0x140 (334B_1051 / 0x34501)
    // DX += 0x140;
    DX = Alu.Add16(DX, 0x140);
    // DEC BX (334B_1055 / 0x34505)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:44f5 (334B_1056 / 0x34506)
    if(!ZeroFlag) {
      goto label_334B_1045_344F5;
    }
    // RETF  (334B_1058 / 0x34508)
    return FarRet();
    label_334B_1059_34509:
    // INC DI (334B_1059 / 0x34509)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:44f9 (334B_105A / 0x3450A)
    if(--CX != 0) {
      goto label_334B_1049_344F9;
    }
    // ADD DX,0x140 (334B_105C / 0x3450C)
    // DX += 0x140;
    DX = Alu.Add16(DX, 0x140);
    // DEC BX (334B_1060 / 0x34510)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:44f5 (334B_1061 / 0x34511)
    if(!ZeroFlag) {
      goto label_334B_1045_344F5;
    }
    // RETF  (334B_1063 / 0x34513)
    return FarRet();
    label_334B_1064_34514:
    // MOV BP,DI (334B_1064 / 0x34514)
    BP = DI;
    // AND BP,0x1ff (334B_1066 / 0x34516)
    // BP &= 0x1FF;
    BP = Alu.And16(BP, 0x1FF);
    // MOV AX,DI (334B_106A / 0x3451A)
    AX = DI;
    // CALL 0x3000:40c0 (334B_106C / 0x3451C)
    NearCall(cs2, 0x106F, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BX,CX (334B_106F / 0x3451F)
    BX = CX;
    // XOR BH,BH (334B_1071 / 0x34521)
    BH = 0;
    // TEST AX,0x4000 (334B_1073 / 0x34523)
    Alu.And16(AX, 0x4000);
    // JNZ 0x3000:4558 (334B_1076 / 0x34526)
    if(!ZeroFlag) {
      goto label_334B_10A8_34558;
    }
    // TEST AX,0x2000 (334B_1078 / 0x34528)
    Alu.And16(AX, 0x2000);
    // JZ 0x3000:454b (334B_107B / 0x3452B)
    if(ZeroFlag) {
      goto label_334B_109B_3454B;
    }
    // MOV byte ptr CS:[0xe32],0xef (334B_107D / 0x3452D)
    UInt8[cs2, 0xE32] = 0xEF;
    // MOV byte ptr CS:[0xef0],0xef (334B_1083 / 0x34533)
    UInt8[cs2, 0xEF0] = 0xEF;
    // MOV AH,BL (334B_1089 / 0x34539)
    AH = BL;
    // DEC AH (334B_108B / 0x3453B)
    AH = Alu.Dec8(AH);
    // MOV DH,AH (334B_108D / 0x3453D)
    DH = AH;
    // XOR DL,DL (334B_108F / 0x3453F)
    DL = 0;
    // MOV AL,DL (334B_1091 / 0x34541)
    AL = DL;
    // SHR DX,1 (334B_1093 / 0x34543)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (334B_1095 / 0x34545)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // ADD DI,AX (334B_1097 / 0x34547)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // ADD DI,DX (334B_1099 / 0x34549)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    label_334B_109B_3454B:
    // MOV DX,BP (334B_109B / 0x3454B)
    DX = BP;
    // CMP CH,0xff (334B_109D / 0x3454D)
    Alu.Sub8(CH, 0xFF);
    // JZ 0x3000:4555 (334B_10A0 / 0x34550)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x3000:42e5 (334B_10A5 / 0x34555)
      goto label_334B_0E35_342E5;
    }
    // JMP 0x3000:43a3 (334B_10A2 / 0x34552)
    goto label_334B_0EF3_343A3;
    label_334B_10A5_34555:
    // JMP 0x3000:42e5 (334B_10A5 / 0x34555)
    goto label_334B_0E35_342E5;
    label_334B_10A8_34558:
    // TEST AX,0x2000 (334B_10A8 / 0x34558)
    Alu.And16(AX, 0x2000);
    // JZ 0x3000:457b (334B_10AB / 0x3455B)
    if(ZeroFlag) {
      goto label_334B_10CB_3457B;
    }
    // MOV byte ptr CS:[0xe93],0xef (334B_10AD / 0x3455D)
    UInt8[cs2, 0xE93] = 0xEF;
    // MOV byte ptr CS:[0xf22],0xef (334B_10B3 / 0x34563)
    UInt8[cs2, 0xF22] = 0xEF;
    // MOV AH,BL (334B_10B9 / 0x34569)
    AH = BL;
    // DEC AH (334B_10BB / 0x3456B)
    AH = Alu.Dec8(AH);
    // MOV DH,AH (334B_10BD / 0x3456D)
    DH = AH;
    // XOR DL,DL (334B_10BF / 0x3456F)
    DL = 0;
    // MOV AL,DL (334B_10C1 / 0x34571)
    AL = DL;
    // SHR DX,1 (334B_10C3 / 0x34573)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (334B_10C5 / 0x34575)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // ADD DI,AX (334B_10C7 / 0x34577)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // ADD DI,DX (334B_10C9 / 0x34579)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    label_334B_10CB_3457B:
    // ADD DI,BP (334B_10CB / 0x3457B)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // DEC DI (334B_10CD / 0x3457D)
    DI = Alu.Dec16(DI);
    // STD  (334B_10CE / 0x3457E)
    DirectionFlag = true;
    // MOV DX,BP (334B_10CF / 0x3457F)
    DX = BP;
    // CMP CH,0xff (334B_10D1 / 0x34581)
    Alu.Sub8(CH, 0xFF);
    // JZ 0x3000:4589 (334B_10D4 / 0x34584)
    if(ZeroFlag) {
      // JZ target is JMP, inlining.
      // JMP 0x3000:4346 (334B_10D9 / 0x34589)
      goto label_334B_0E96_34346;
    }
    // JMP 0x3000:43d5 (334B_10D6 / 0x34586)
    goto label_334B_0F25_343D5;
    label_334B_10D9_34589:
    // JMP 0x3000:4346 (334B_10D9 / 0x34589)
    goto label_334B_0E96_34346;
    label_334B_158A_34A3A:
    // MOV BP,0x1234 (334B_158A / 0x34A3A)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_137D_3482D, 334B_1465_34915, 334B_14A9_34959, 334B_14B9_34969, 334B_14FD_349AD, 334B_0F7E_3442E
    BP = 0x1234;
    // PUSH DI (334B_158D / 0x34A3D)
    Stack.Push(DI);
    label_334B_158E_34A3E:
    // LODSW SI (334B_158E / 0x34A3E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BL,AL (334B_158F / 0x34A3F)
    BL = AL;
    // AND AL,DL (334B_1591 / 0x34A41)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:4a7a (334B_1593 / 0x34A43)
    if(ZeroFlag) {
      goto label_334B_15CA_34A7A;
    }
    // ADD AL,DH (334B_1595 / 0x34A45)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_1597 / 0x34A47)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR BL,1 (334B_1598 / 0x34A48)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_159A / 0x34A4A)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_159C / 0x34A4C)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_159E / 0x34A4E)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // JZ 0x3000:4a89 (334B_15A0 / 0x34A50)
    if(ZeroFlag) {
      goto label_334B_15D9_34A89;
    }
    // MOV AL,BL (334B_15A2 / 0x34A52)
    AL = BL;
    label_334B_15A4_34A54:
    // ADD AL,DH (334B_15A4 / 0x34A54)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_15A6 / 0x34A56)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AL,AH (334B_15A7 / 0x34A57)
    AL = AH;
    label_334B_15A9_34A59:
    // AND AL,DL (334B_15A9 / 0x34A59)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:4a9e (334B_15AB / 0x34A5B)
    if(ZeroFlag) {
      goto label_334B_15EE_34A9E;
    }
    // ADD AL,DH (334B_15AD / 0x34A5D)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_15AF / 0x34A5F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AH,1 (334B_15B0 / 0x34A60)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_15B2_34A62:
    // SHR AH,1 (334B_15B2 / 0x34A62)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_15B4 / 0x34A64)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_15B6 / 0x34A66)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:4aa5 (334B_15B8 / 0x34A68)
    if(ZeroFlag) {
      goto label_334B_15F5_34AA5;
    }
    // MOV AL,AH (334B_15BA / 0x34A6A)
    AL = AH;
    // ADD AL,DH (334B_15BC / 0x34A6C)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_15BE / 0x34A6E)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // DEC BP (334B_15BF / 0x34A6F)
    BP = Alu.Dec16(BP);
    // JNZ 0x3000:4a3e (334B_15C0 / 0x34A70)
    if(!ZeroFlag) {
      goto label_334B_158E_34A3E;
    }
    // POP DI (334B_15C2 / 0x34A72)
    DI = Stack.Pop();
    // ADD DI,0x140 (334B_15C3 / 0x34A73)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // LOOP 0x3000:4a3a (334B_15C7 / 0x34A77)
    if(--CX != 0) {
      goto label_334B_158A_34A3A;
    }
    // RETF  (334B_15C9 / 0x34A79)
    return FarRet();
    label_334B_15CA_34A7A:
    // INC DI (334B_15CA / 0x34A7A)
    DI = Alu.Inc16(DI);
    // OR AL,BL (334B_15CB / 0x34A7B)
    // AL |= BL;
    AL = Alu.Or8(AL, BL);
    // JZ 0x3000:4a89 (334B_15CD / 0x34A7D)
    if(ZeroFlag) {
      goto label_334B_15D9_34A89;
    }
    // SHR AL,1 (334B_15CF / 0x34A7F)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_15D1 / 0x34A81)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_15D3 / 0x34A83)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_15D5 / 0x34A85)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JMP 0x3000:4a54 (334B_15D7 / 0x34A87)
    goto label_334B_15A4_34A54;
    label_334B_15D9_34A89:
    // INC DI (334B_15D9 / 0x34A89)
    DI = Alu.Inc16(DI);
    // MOV AL,AH (334B_15DA / 0x34A8A)
    AL = AH;
    // OR AL,AL (334B_15DC / 0x34A8C)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x3000:4a59 (334B_15DE / 0x34A8E)
    if(!ZeroFlag) {
      goto label_334B_15A9_34A59;
    }
    label_334B_15E0_34A90:
    // ADD DI,0x2 (334B_15E0 / 0x34A90)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // DEC BP (334B_15E3 / 0x34A93)
    BP = Alu.Dec16(BP);
    // JNZ 0x3000:4a3e (334B_15E4 / 0x34A94)
    if(!ZeroFlag) {
      goto label_334B_158E_34A3E;
    }
    label_334B_15E6_34A96:
    // POP DI (334B_15E6 / 0x34A96)
    DI = Stack.Pop();
    // ADD DI,0x140 (334B_15E7 / 0x34A97)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // LOOP 0x3000:4a3a (334B_15EB / 0x34A9B)
    if(--CX != 0) {
      goto label_334B_158A_34A3A;
    }
    // RETF  (334B_15ED / 0x34A9D)
    return FarRet();
    label_334B_15EE_34A9E:
    // SHR AH,1 (334B_15EE / 0x34A9E)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:4a90 (334B_15F0 / 0x34AA0)
    if(ZeroFlag) {
      goto label_334B_15E0_34A90;
    }
    // INC DI (334B_15F2 / 0x34AA2)
    DI = Alu.Inc16(DI);
    // JMP 0x3000:4a62 (334B_15F3 / 0x34AA3)
    goto label_334B_15B2_34A62;
    label_334B_15F5_34AA5:
    // INC DI (334B_15F5 / 0x34AA5)
    DI = Alu.Inc16(DI);
    // DEC BP (334B_15F6 / 0x34AA6)
    BP = Alu.Dec16(BP);
    // JNZ 0x3000:4a3e (334B_15F7 / 0x34AA7)
    if(!ZeroFlag) {
      goto label_334B_158E_34A3E;
    }
    // JMP 0x3000:4a96 (334B_15F9 / 0x34AA9)
    goto label_334B_15E6_34A96;
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x34AAB");
  }
  
  public Action spice86_label_334B_1452_34902(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24902: goto label_334B_1452_34902;break;
      case 0x24592: break;
      case 0: goto entry; break; //
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_10E2_34592:
    // MOV BP,word ptr CS:[0x10de] (334B_10E2 / 0x34592)
    BP = UInt16[cs2, 0x10DE];
    // SHR BP,1 (334B_10E7 / 0x34597)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // PUSHF  (334B_10E9 / 0x34599)
    Stack.Push(FlagRegister);
    // JCXZ 0x3000:45a4 (334B_10EA / 0x3459A)
    if(CX == 0) {
      goto label_334B_10F4_345A4;
    }
    // OR DL,DL (334B_10EC / 0x3459C)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JS 0x3000:45cd (334B_10EE / 0x3459E)
    if(SignFlag) {
      goto label_334B_111D_345CD;
    }
    // JMP 0x3000:45b0 (334B_10F0 / 0x345A0)
    goto label_334B_1100_345B0;
    label_334B_10F2_345A2:
    // ADD SI,CX (334B_10F2 / 0x345A2)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    label_334B_10F4_345A4:
    // LODSB SI (334B_10F4 / 0x345A4)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (334B_10F5 / 0x345A5)
    AH = 0;
    // MOV DL,AL (334B_10F7 / 0x345A7)
    DL = AL;
    // OR AL,AL (334B_10F9 / 0x345A9)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:45c7 (334B_10FB / 0x345AB)
    if(SignFlag) {
      goto label_334B_1117_345C7;
    }
    // MOV CX,AX (334B_10FD / 0x345AD)
    CX = AX;
    // INC CX (334B_10FF / 0x345AF)
    CX = Alu.Inc16(CX);
    label_334B_1100_345B0:
    // SUB BP,CX (334B_1100 / 0x345B0)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:45a2 (334B_1102 / 0x345B2)
    if(!CarryFlag) {
      goto label_334B_10F2_345A2;
    }
    // ADD CX,BP (334B_1104 / 0x345B4)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // ADD SI,CX (334B_1106 / 0x345B6)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV CX,BP (334B_1108 / 0x345B8)
    CX = BP;
    // NEG CX (334B_110A / 0x345BA)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10e0] (334B_110C / 0x345BC)
    BP = UInt16[cs2, 0x10E0];
    // POPF  (334B_1111 / 0x345C1)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:45f6 (334B_1112 / 0x345C2)
    if(!CarryFlag) {
      goto label_334B_1146_345F6;
    }
    // LODSB SI (334B_1114 / 0x345C4)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x3000:45e2 (334B_1115 / 0x345C5)
    goto label_334B_1132_345E2;
    label_334B_1117_345C7:
    // MOV CX,0x101 (334B_1117 / 0x345C7)
    CX = 0x101;
    // SUB CX,AX (334B_111A / 0x345CA)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_111C / 0x345CC)
    SI = Alu.Inc16(SI);
    label_334B_111D_345CD:
    // SUB BP,CX (334B_111D / 0x345CD)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:45a4 (334B_111F / 0x345CF)
    if(!CarryFlag) {
      goto label_334B_10F4_345A4;
    }
    // XOR AH,AH (334B_1121 / 0x345D1)
    AH = 0;
    // MOV CX,BP (334B_1123 / 0x345D3)
    CX = BP;
    // NEG CX (334B_1125 / 0x345D5)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10e0] (334B_1127 / 0x345D7)
    BP = UInt16[cs2, 0x10E0];
    // POPF  (334B_112C / 0x345DC)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:45f6 (334B_112D / 0x345DD)
    if(!CarryFlag) {
      goto label_334B_1146_345F6;
    }
    // MOV AL,byte ptr [SI + -0x1] (334B_112F / 0x345DF)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    label_334B_1132_345E2:
    // SHR AL,1 (334B_1132 / 0x345E2)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1134 / 0x345E4)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1136 / 0x345E6)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1138 / 0x345E8)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:45f1 (334B_113A / 0x345EA)
    if(ZeroFlag) {
      goto label_334B_1141_345F1;
    }
    // ADD AL,DH (334B_113C / 0x345EC)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // MOV byte ptr ES:[DI],AL (334B_113E / 0x345EE)
    UInt8[ES, DI] = AL;
    label_334B_1141_345F1:
    // INC DI (334B_1141 / 0x345F1)
    DI = Alu.Inc16(DI);
    // DEC CX (334B_1142 / 0x345F2)
    CX = Alu.Dec16(CX);
    // DEC BP (334B_1143 / 0x345F3)
    BP = Alu.Dec16(BP);
    // JZ 0x3000:4634 (334B_1144 / 0x345F4)
    if(ZeroFlag) {
      goto label_334B_1184_34634;
    }
    label_334B_1146_345F6:
    // SHR BP,1 (334B_1146 / 0x345F6)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JCXZ 0x3000:4601 (334B_1148 / 0x345F8)
    if(CX == 0) {
      goto label_334B_1151_34601;
    }
    // OR DL,DL (334B_114A / 0x345FA)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JNS 0x3000:460d (334B_114C / 0x345FC)
    if(!SignFlag) {
      goto label_334B_115D_3460D;
    }
    // JMP 0x3000:4658 (334B_114E / 0x345FE)
    goto label_334B_11A8_34658;
    label_334B_1151_34601:
    // LODSB SI (334B_1151 / 0x34601)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (334B_1152 / 0x34602)
    AH = 0;
    // MOV DL,AL (334B_1154 / 0x34604)
    DL = AL;
    // OR AL,AL (334B_1156 / 0x34606)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4652 (334B_1158 / 0x34608)
    if(SignFlag) {
      goto label_334B_11A2_34652;
    }
    // MOV CX,AX (334B_115A / 0x3460A)
    CX = AX;
    // INC CX (334B_115C / 0x3460C)
    CX = Alu.Inc16(CX);
    label_334B_115D_3460D:
    // SUB BP,CX (334B_115D / 0x3460D)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:4615 (334B_115F / 0x3460F)
    if(!CarryFlag) {
      goto label_334B_1165_34615;
    }
    // ADD CX,BP (334B_1161 / 0x34611)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // JZ 0x3000:4630 (334B_1163 / 0x34613)
    if(ZeroFlag) {
      goto label_334B_1180_34630;
    }
    label_334B_1165_34615:
    // LODSB SI (334B_1165 / 0x34615)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,AL (334B_1166 / 0x34616)
    AH = AL;
    // AND AL,0xf (334B_1168 / 0x34618)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x3000:4648 (334B_116A / 0x3461A)
    if(ZeroFlag) {
      goto label_334B_1198_34648;
    }
    // ADD AL,DH (334B_116C / 0x3461C)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_116E / 0x3461E)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AH,1 (334B_116F / 0x3461F)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_1171_34621:
    // SHR AH,1 (334B_1171 / 0x34621)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_1173 / 0x34623)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_1175 / 0x34625)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:464d (334B_1177 / 0x34627)
    if(ZeroFlag) {
      goto label_334B_119D_3464D;
    }
    // MOV AL,AH (334B_1179 / 0x34629)
    AL = AH;
    // ADD AL,DH (334B_117B / 0x3462B)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_117D / 0x3462D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4615 (334B_117E / 0x3462E)
    if(--CX != 0) {
      goto label_334B_1165_34615;
    }
    label_334B_1180_34630:
    // OR BP,BP (334B_1180 / 0x34630)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JNS 0x3000:4601 (334B_1182 / 0x34632)
    if(!SignFlag) {
      goto label_334B_1151_34601;
    }
    label_334B_1184_34634:
    // MOV CX,BP (334B_1184 / 0x34634)
    CX = BP;
    // NEG CX (334B_1186 / 0x34636)
    CX = Alu.Sub16(0, CX);
    // SUB DI,word ptr CS:[0x10e0] (334B_1188 / 0x34638)
    // DI -= UInt16[cs2, 0x10E0];
    DI = Alu.Sub16(DI, UInt16[cs2, 0x10E0]);
    // ADD DI,0x140 (334B_118D / 0x3463D)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC BX (334B_1191 / 0x34641)
    BX = Alu.Dec16(BX);
    // JZ 0x3000:4647 (334B_1192 / 0x34642)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_1197 / 0x34647)
      return FarRet();
    }
    // JMP 0x3000:4592 (334B_1194 / 0x34644)
    goto label_334B_10E2_34592;
    label_334B_1197_34647:
    // RETF  (334B_1197 / 0x34647)
    return FarRet();
    label_334B_1198_34648:
    // INC DI (334B_1198 / 0x34648)
    DI = Alu.Inc16(DI);
    // SHR AH,1 (334B_1199 / 0x34649)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JNZ 0x3000:4621 (334B_119B / 0x3464B)
    if(!ZeroFlag) {
      goto label_334B_1171_34621;
    }
    label_334B_119D_3464D:
    // INC DI (334B_119D / 0x3464D)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:4615 (334B_119E / 0x3464E)
    if(--CX != 0) {
      goto label_334B_1165_34615;
    }
    // JMP 0x3000:4630 (334B_11A0 / 0x34650)
    goto label_334B_1180_34630;
    label_334B_11A2_34652:
    // MOV CX,0x101 (334B_11A2 / 0x34652)
    CX = 0x101;
    // SUB CX,AX (334B_11A5 / 0x34655)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_11A7 / 0x34657)
    SI = Alu.Inc16(SI);
    label_334B_11A8_34658:
    // SUB BP,CX (334B_11A8 / 0x34658)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:4660 (334B_11AA / 0x3465A)
    if(!CarryFlag) {
      goto label_334B_11B0_34660;
    }
    // ADD CX,BP (334B_11AC / 0x3465C)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // JZ 0x3000:4681 (334B_11AE / 0x3465E)
    if(ZeroFlag) {
      goto label_334B_11D1_34681;
    }
    label_334B_11B0_34660:
    // MOV AL,byte ptr [SI + -0x1] (334B_11B0 / 0x34660)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // SHL AX,1 (334B_11B3 / 0x34663)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JZ 0x3000:4688 (334B_11B5 / 0x34665)
    if(ZeroFlag) {
      goto label_334B_11D8_34688;
    }
    // SHL AX,1 (334B_11B7 / 0x34667)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_11B9 / 0x34669)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_11BB / 0x3466B)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHR AL,1 (334B_11BD / 0x3466D)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:468e (334B_11BF / 0x3466F)
    if(ZeroFlag) {
      goto label_334B_11DE_3468E;
    }
    // SHR AL,1 (334B_11C1 / 0x34671)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_11C3 / 0x34673)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_11C5 / 0x34675)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // ADD AL,DH (334B_11C7 / 0x34677)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // OR AH,AH (334B_11C9 / 0x34679)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x3000:4698 (334B_11CB / 0x3467B)
    if(ZeroFlag) {
      goto label_334B_11E8_34698;
    }
    // ADD AH,DH (334B_11CD / 0x3467D)
    // AH += DH;
    AH = Alu.Add8(AH, DH);
    while (CX-- != 0) {
      // STOSW ES:DI (334B_11CF / 0x3467F)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    label_334B_11D1_34681:
    // OR BP,BP (334B_11D1 / 0x34681)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JS 0x3000:4634 (334B_11D3 / 0x34683)
    if(SignFlag) {
      goto label_334B_1184_34634;
    }
    // JMP 0x3000:4601 (334B_11D5 / 0x34685)
    goto label_334B_1151_34601;
    label_334B_11D8_34688:
    // SHL CX,1 (334B_11D8 / 0x34688)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // ADD DI,CX (334B_11DA / 0x3468A)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // JMP 0x3000:4681 (334B_11DC / 0x3468C)
    goto label_334B_11D1_34681;
    label_334B_11DE_3468E:
    // MOV AL,AH (334B_11DE / 0x3468E)
    AL = AH;
    // ADD AL,DH (334B_11E0 / 0x34690)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    label_334B_11E2_34692:
    // INC DI (334B_11E2 / 0x34692)
    DI = Alu.Inc16(DI);
    // STOSB ES:DI (334B_11E3 / 0x34693)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4692 (334B_11E4 / 0x34694)
    if(--CX != 0) {
      goto label_334B_11E2_34692;
    }
    // JMP 0x3000:4681 (334B_11E6 / 0x34696)
    goto label_334B_11D1_34681;
    label_334B_11E8_34698:
    // STOSB ES:DI (334B_11E8 / 0x34698)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DI (334B_11E9 / 0x34699)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:4698 (334B_11EA / 0x3469A)
    if(--CX != 0) {
      goto label_334B_11E8_34698;
    }
    // JMP 0x3000:4681 (334B_11EC / 0x3469C)
    goto label_334B_11D1_34681;
    label_334B_11EE_3469E:
    // MOV BP,word ptr CS:[0x10de] (334B_11EE / 0x3469E)
    BP = UInt16[cs2, 0x10DE];
    // OR BP,BP (334B_11F3 / 0x346A3)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JNZ 0x3000:46af (334B_11F5 / 0x346A5)
    if(!ZeroFlag) {
      goto label_334B_11FF_346AF;
    }
    // MOV BP,word ptr CS:[0x10e0] (334B_11F7 / 0x346A7)
    BP = UInt16[cs2, 0x10E0];
    // JMP 0x3000:4716 (334B_11FC / 0x346AC)
    goto label_334B_1266_34716;
    label_334B_11FF_346AF:
    // SHR BP,1 (334B_11FF / 0x346AF)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // PUSHF  (334B_1201 / 0x346B1)
    Stack.Push(FlagRegister);
    // JCXZ 0x3000:46bc (334B_1202 / 0x346B2)
    if(CX == 0) {
      goto label_334B_120C_346BC;
    }
    // OR DL,DL (334B_1204 / 0x346B4)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JS 0x3000:46e5 (334B_1206 / 0x346B6)
    if(SignFlag) {
      goto label_334B_1235_346E5;
    }
    // JMP 0x3000:46c8 (334B_1208 / 0x346B8)
    goto label_334B_1218_346C8;
    label_334B_120A_346BA:
    // ADD SI,CX (334B_120A / 0x346BA)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    label_334B_120C_346BC:
    // LODSB SI (334B_120C / 0x346BC)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (334B_120D / 0x346BD)
    AH = 0;
    // MOV DL,AL (334B_120F / 0x346BF)
    DL = AL;
    // OR AL,AL (334B_1211 / 0x346C1)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:46df (334B_1213 / 0x346C3)
    if(SignFlag) {
      goto label_334B_122F_346DF;
    }
    // MOV CX,AX (334B_1215 / 0x346C5)
    CX = AX;
    // INC CX (334B_1217 / 0x346C7)
    CX = Alu.Inc16(CX);
    label_334B_1218_346C8:
    // SUB BP,CX (334B_1218 / 0x346C8)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:46ba (334B_121A / 0x346CA)
    if(!CarryFlag) {
      goto label_334B_120A_346BA;
    }
    // ADD CX,BP (334B_121C / 0x346CC)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // ADD SI,CX (334B_121E / 0x346CE)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV CX,BP (334B_1220 / 0x346D0)
    CX = BP;
    // NEG CX (334B_1222 / 0x346D2)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10e0] (334B_1224 / 0x346D4)
    BP = UInt16[cs2, 0x10E0];
    // POPF  (334B_1229 / 0x346D9)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:4716 (334B_122A / 0x346DA)
    if(!CarryFlag) {
      goto label_334B_1266_34716;
    }
    // LODSB SI (334B_122C / 0x346DC)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x3000:46fa (334B_122D / 0x346DD)
    goto label_334B_124A_346FA;
    label_334B_122F_346DF:
    // MOV CX,0x101 (334B_122F / 0x346DF)
    CX = 0x101;
    // SUB CX,AX (334B_1232 / 0x346E2)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_1234 / 0x346E4)
    SI = Alu.Inc16(SI);
    label_334B_1235_346E5:
    // SUB BP,CX (334B_1235 / 0x346E5)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:46bc (334B_1237 / 0x346E7)
    if(!CarryFlag) {
      goto label_334B_120C_346BC;
    }
    // XOR AH,AH (334B_1239 / 0x346E9)
    AH = 0;
    // MOV CX,BP (334B_123B / 0x346EB)
    CX = BP;
    // NEG CX (334B_123D / 0x346ED)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10e0] (334B_123F / 0x346EF)
    BP = UInt16[cs2, 0x10E0];
    // POPF  (334B_1244 / 0x346F4)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:4716 (334B_1245 / 0x346F5)
    if(!CarryFlag) {
      goto label_334B_1266_34716;
    }
    // MOV AL,byte ptr [SI + -0x1] (334B_1247 / 0x346F7)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    label_334B_124A_346FA:
    // SHR AL,1 (334B_124A / 0x346FA)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_124C / 0x346FC)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_124E / 0x346FE)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1250 / 0x34700)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:4709 (334B_1252 / 0x34702)
    if(ZeroFlag) {
      goto label_334B_1259_34709;
    }
    // ADD AL,DH (334B_1254 / 0x34704)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // MOV byte ptr ES:[DI],AL (334B_1256 / 0x34706)
    UInt8[ES, DI] = AL;
    label_334B_1259_34709:
    // INC DI (334B_1259 / 0x34709)
    DI = Alu.Inc16(DI);
    // DEC CX (334B_125A / 0x3470A)
    CX = Alu.Dec16(CX);
    // DEC BP (334B_125B / 0x3470B)
    BP = Alu.Dec16(BP);
    // JNZ 0x3000:4716 (334B_125C / 0x3470C)
    if(!ZeroFlag) {
      goto label_334B_1266_34716;
    }
    // MOV BP,word ptr CS:[0x10dc] (334B_125E / 0x3470E)
    BP = UInt16[cs2, 0x10DC];
    // JMP 0x3000:47dc (334B_1263 / 0x34713)
    goto label_334B_132C_347DC;
    label_334B_1266_34716:
    // SHR BP,1 (334B_1266 / 0x34716)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // PUSHF  (334B_1268 / 0x34718)
    Stack.Push(FlagRegister);
    // JCXZ 0x3000:4722 (334B_1269 / 0x34719)
    if(CX == 0) {
      goto label_334B_1272_34722;
    }
    // OR DL,DL (334B_126B / 0x3471B)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JNS 0x3000:472e (334B_126D / 0x3471D)
    if(!SignFlag) {
      goto label_334B_127E_3472E;
    }
    // JMP 0x3000:4777 (334B_126F / 0x3471F)
    goto label_334B_12C7_34777;
    label_334B_1272_34722:
    // LODSB SI (334B_1272 / 0x34722)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (334B_1273 / 0x34723)
    AH = 0;
    // MOV DL,AL (334B_1275 / 0x34725)
    DL = AL;
    // OR AL,AL (334B_1277 / 0x34727)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4771 (334B_1279 / 0x34729)
    if(SignFlag) {
      goto label_334B_12C1_34771;
    }
    // MOV CX,AX (334B_127B / 0x3472B)
    CX = AX;
    // INC CX (334B_127D / 0x3472D)
    CX = Alu.Inc16(CX);
    label_334B_127E_3472E:
    // SUB BP,CX (334B_127E / 0x3472E)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:4736 (334B_1280 / 0x34730)
    if(!CarryFlag) {
      goto label_334B_1286_34736;
    }
    // ADD CX,BP (334B_1282 / 0x34732)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // JZ 0x3000:4751 (334B_1284 / 0x34734)
    if(ZeroFlag) {
      goto label_334B_12A1_34751;
    }
    label_334B_1286_34736:
    // LODSB SI (334B_1286 / 0x34736)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,AL (334B_1287 / 0x34737)
    AH = AL;
    // AND AL,0xf (334B_1289 / 0x34739)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x3000:4767 (334B_128B / 0x3473B)
    if(ZeroFlag) {
      goto label_334B_12B7_34767;
    }
    // ADD AL,DH (334B_128D / 0x3473D)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_128F / 0x3473F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AH,1 (334B_1290 / 0x34740)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_1292_34742:
    // SHR AH,1 (334B_1292 / 0x34742)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_1294 / 0x34744)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_1296 / 0x34746)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:476c (334B_1298 / 0x34748)
    if(ZeroFlag) {
      goto label_334B_12BC_3476C;
    }
    // MOV AL,AH (334B_129A / 0x3474A)
    AL = AH;
    // ADD AL,DH (334B_129C / 0x3474C)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_129E / 0x3474E)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4736 (334B_129F / 0x3474F)
    if(--CX != 0) {
      goto label_334B_1286_34736;
    }
    label_334B_12A1_34751:
    // OR BP,BP (334B_12A1 / 0x34751)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JNS 0x3000:4722 (334B_12A3 / 0x34753)
    if(!SignFlag) {
      goto label_334B_1272_34722;
    }
    // MOV CX,BP (334B_12A5 / 0x34755)
    CX = BP;
    // NEG CX (334B_12A7 / 0x34757)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10dc] (334B_12A9 / 0x34759)
    BP = UInt16[cs2, 0x10DC];
    // XOR AH,AH (334B_12AE / 0x3475E)
    AH = 0;
    // POPF  (334B_12B0 / 0x34760)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:47dc (334B_12B1 / 0x34761)
    if(!CarryFlag) {
      goto label_334B_132C_347DC;
    }
    // LODSB SI (334B_12B3 / 0x34763)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x3000:47ce (334B_12B4 / 0x34764)
    goto label_334B_131E_347CE;
    label_334B_12B7_34767:
    // INC DI (334B_12B7 / 0x34767)
    DI = Alu.Inc16(DI);
    // SHR AH,1 (334B_12B8 / 0x34768)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JNZ 0x3000:4742 (334B_12BA / 0x3476A)
    if(!ZeroFlag) {
      goto label_334B_1292_34742;
    }
    label_334B_12BC_3476C:
    // INC DI (334B_12BC / 0x3476C)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:4736 (334B_12BD / 0x3476D)
    if(--CX != 0) {
      goto label_334B_1286_34736;
    }
    // JMP 0x3000:4751 (334B_12BF / 0x3476F)
    goto label_334B_12A1_34751;
    label_334B_12C1_34771:
    // MOV CX,0x101 (334B_12C1 / 0x34771)
    CX = 0x101;
    // SUB CX,AX (334B_12C4 / 0x34774)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_12C6 / 0x34776)
    SI = Alu.Inc16(SI);
    label_334B_12C7_34777:
    // SUB BP,CX (334B_12C7 / 0x34777)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:477f (334B_12C9 / 0x34779)
    if(!CarryFlag) {
      goto label_334B_12CF_3477F;
    }
    // ADD CX,BP (334B_12CB / 0x3477B)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // JZ 0x3000:47b6 (334B_12CD / 0x3477D)
    if(ZeroFlag) {
      goto label_334B_1306_347B6;
    }
    label_334B_12CF_3477F:
    // MOV AL,byte ptr [SI + -0x1] (334B_12CF / 0x3477F)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // SHL AX,1 (334B_12D2 / 0x34782)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JZ 0x3000:47a2 (334B_12D4 / 0x34784)
    if(ZeroFlag) {
      goto label_334B_12F2_347A2;
    }
    // SHL AX,1 (334B_12D6 / 0x34786)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_12D8 / 0x34788)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_12DA / 0x3478A)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHR AL,1 (334B_12DC / 0x3478C)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JZ 0x3000:47a8 (334B_12DE / 0x3478E)
    if(ZeroFlag) {
      goto label_334B_12F8_347A8;
    }
    // SHR AL,1 (334B_12E0 / 0x34790)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_12E2 / 0x34792)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_12E4 / 0x34794)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // ADD AL,DH (334B_12E6 / 0x34796)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // OR AH,AH (334B_12E8 / 0x34798)
    // AH |= AH;
    AH = Alu.Or8(AH, AH);
    // JZ 0x3000:47b2 (334B_12EA / 0x3479A)
    if(ZeroFlag) {
      goto label_334B_1302_347B2;
    }
    // ADD AH,DH (334B_12EC / 0x3479C)
    // AH += DH;
    AH = Alu.Add8(AH, DH);
    while (CX-- != 0) {
      // STOSW ES:DI (334B_12EE / 0x3479E)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // JMP 0x3000:47b6 (334B_12F0 / 0x347A0)
    goto label_334B_1306_347B6;
    label_334B_12F2_347A2:
    // SHL CX,1 (334B_12F2 / 0x347A2)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // ADD DI,CX (334B_12F4 / 0x347A4)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // JMP 0x3000:47b6 (334B_12F6 / 0x347A6)
    goto label_334B_1306_347B6;
    label_334B_12F8_347A8:
    // MOV AL,AH (334B_12F8 / 0x347A8)
    AL = AH;
    // ADD AL,DH (334B_12FA / 0x347AA)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    label_334B_12FC_347AC:
    // INC DI (334B_12FC / 0x347AC)
    DI = Alu.Inc16(DI);
    // STOSB ES:DI (334B_12FD / 0x347AD)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:47ac (334B_12FE / 0x347AE)
    if(--CX != 0) {
      goto label_334B_12FC_347AC;
    }
    // JMP 0x3000:47b6 (334B_1300 / 0x347B0)
    goto label_334B_1306_347B6;
    label_334B_1302_347B2:
    // STOSB ES:DI (334B_1302 / 0x347B2)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DI (334B_1303 / 0x347B3)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:47b2 (334B_1304 / 0x347B4)
    if(--CX != 0) {
      goto label_334B_1302_347B2;
    }
    label_334B_1306_347B6:
    // OR BP,BP (334B_1306 / 0x347B6)
    // BP |= BP;
    BP = Alu.Or16(BP, BP);
    // JS 0x3000:47bd (334B_1308 / 0x347B8)
    if(SignFlag) {
      goto label_334B_130D_347BD;
    }
    // JMP 0x3000:4722 (334B_130A / 0x347BA)
    goto label_334B_1272_34722;
    label_334B_130D_347BD:
    // XOR AH,AH (334B_130D / 0x347BD)
    AH = 0;
    // MOV CX,BP (334B_130F / 0x347BF)
    CX = BP;
    // NEG CX (334B_1311 / 0x347C1)
    CX = Alu.Sub16(0, CX);
    // MOV BP,word ptr CS:[0x10dc] (334B_1313 / 0x347C3)
    BP = UInt16[cs2, 0x10DC];
    // POPF  (334B_1318 / 0x347C8)
    FlagRegister = Stack.Pop();
    // JNC 0x3000:47dc (334B_1319 / 0x347C9)
    if(!CarryFlag) {
      goto label_334B_132C_347DC;
    }
    // MOV AL,byte ptr [SI + -0x1] (334B_131B / 0x347CB)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    label_334B_131E_347CE:
    // AND AL,0xf (334B_131E / 0x347CE)
    // AL &= 0xF;
    AL = Alu.And8(AL, 0xF);
    // JZ 0x3000:47d7 (334B_1320 / 0x347D0)
    if(ZeroFlag) {
      goto label_334B_1327_347D7;
    }
    // ADD AL,DH (334B_1322 / 0x347D2)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // MOV byte ptr ES:[DI],AL (334B_1324 / 0x347D4)
    UInt8[ES, DI] = AL;
    label_334B_1327_347D7:
    // INC DI (334B_1327 / 0x347D7)
    DI = Alu.Inc16(DI);
    // DEC CX (334B_1328 / 0x347D8)
    CX = Alu.Dec16(CX);
    // DEC BP (334B_1329 / 0x347D9)
    BP = Alu.Dec16(BP);
    // JZ 0x3000:4812 (334B_132A / 0x347DA)
    if(ZeroFlag) {
      goto label_334B_1362_34812;
    }
    label_334B_132C_347DC:
    // SHR BP,1 (334B_132C / 0x347DC)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JCXZ 0x3000:47e8 (334B_132E / 0x347DE)
    if(CX == 0) {
      goto label_334B_1338_347E8;
    }
    // OR DL,DL (334B_1330 / 0x347E0)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JS 0x3000:4808 (334B_1332 / 0x347E2)
    if(SignFlag) {
      goto label_334B_1358_34808;
    }
    // JMP 0x3000:47f4 (334B_1334 / 0x347E4)
    goto label_334B_1344_347F4;
    label_334B_1336_347E6:
    // ADD SI,CX (334B_1336 / 0x347E6)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    label_334B_1338_347E8:
    // LODSB SI (334B_1338 / 0x347E8)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // XOR AH,AH (334B_1339 / 0x347E9)
    AH = 0;
    // MOV DL,AL (334B_133B / 0x347EB)
    DL = AL;
    // OR AL,AL (334B_133D / 0x347ED)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4802 (334B_133F / 0x347EF)
    if(SignFlag) {
      goto label_334B_1352_34802;
    }
    // MOV CX,AX (334B_1341 / 0x347F1)
    CX = AX;
    // INC CX (334B_1343 / 0x347F3)
    CX = Alu.Inc16(CX);
    label_334B_1344_347F4:
    // SUB BP,CX (334B_1344 / 0x347F4)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:47e6 (334B_1346 / 0x347F6)
    if(!CarryFlag) {
      goto label_334B_1336_347E6;
    }
    // ADD CX,BP (334B_1348 / 0x347F8)
    // CX += BP;
    CX = Alu.Add16(CX, BP);
    // ADD SI,CX (334B_134A / 0x347FA)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV CX,BP (334B_134C / 0x347FC)
    CX = BP;
    // NEG CX (334B_134E / 0x347FE)
    CX = Alu.Sub16(0, CX);
    // JMP 0x3000:4812 (334B_1350 / 0x34800)
    goto label_334B_1362_34812;
    label_334B_1352_34802:
    // MOV CX,0x101 (334B_1352 / 0x34802)
    CX = 0x101;
    // SUB CX,AX (334B_1355 / 0x34805)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_1357 / 0x34807)
    SI = Alu.Inc16(SI);
    label_334B_1358_34808:
    // SUB BP,CX (334B_1358 / 0x34808)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNC 0x3000:47e8 (334B_135A / 0x3480A)
    if(!CarryFlag) {
      goto label_334B_1338_347E8;
    }
    // XOR AH,AH (334B_135C / 0x3480C)
    AH = 0;
    // MOV CX,BP (334B_135E / 0x3480E)
    CX = BP;
    // NEG CX (334B_1360 / 0x34810)
    CX = Alu.Sub16(0, CX);
    label_334B_1362_34812:
    // SUB DI,word ptr CS:[0x10e0] (334B_1362 / 0x34812)
    // DI -= UInt16[cs2, 0x10E0];
    DI = Alu.Sub16(DI, UInt16[cs2, 0x10E0]);
    // ADD DI,0x140 (334B_1367 / 0x34817)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC BX (334B_136B / 0x3481B)
    BX = Alu.Dec16(BX);
    // JZ 0x3000:4821 (334B_136C / 0x3481C)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_1371 / 0x34821)
      return FarRet();
    }
    // JMP 0x3000:469e (334B_136E / 0x3481E)
    goto label_334B_11EE_3469E;
    label_334B_1371_34821:
    // RETF  (334B_1371 / 0x34821)
    return FarRet();
    label_334B_1372_34822:
    // MOV AL,byte ptr [SI + -0x1] (334B_1372 / 0x34822)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // MOV CS:[0x19e],AL (334B_1375 / 0x34825)
    UInt8[cs2, 0x19E] = AL;
    // AND DI,0x1fff (334B_1379 / 0x34829)
    // DI &= 0x1FFF;
    DI = Alu.And16(DI, 0x1FFF);
    // MOV word ptr CS:[0x158b],DI (334B_137D / 0x3482D)
    UInt16[cs2, 0x158B] = DI;
    // ADD DI,0x3 (334B_1382 / 0x34832)
    // DI += 0x3;
    DI = Alu.Add16(DI, 0x3);
    // SHR DI,1 (334B_1385 / 0x34835)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR DI,1 (334B_1387 / 0x34837)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHL DI,1 (334B_1389 / 0x34839)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV AX,word ptr [BP + 0x2] (334B_138B / 0x3483B)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // SUB AX,BX (334B_138E / 0x3483E)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JLE 0x3000:486e (334B_1390 / 0x34840)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_13BE_3486E;
    }
    // SUB CX,AX (334B_1392 / 0x34842)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:48a1 (334B_1394 / 0x34844)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_13F1 / 0x348A1)
      return FarRet();
    }
    // ADD BX,AX (334B_1396 / 0x34846)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // PUSH DX (334B_1398 / 0x34848)
    Stack.Push(DX);
    // PUSH CX (334B_1399 / 0x34849)
    Stack.Push(CX);
    // PUSH BP (334B_139A / 0x3484A)
    Stack.Push(BP);
    // MUL DI (334B_139B / 0x3484B)
    Cpu.Mul16(DI);
    // MOV BP,AX (334B_139D / 0x3484D)
    BP = AX;
    // XOR AH,AH (334B_139F / 0x3484F)
    AH = 0;
    label_334B_13A1_34851:
    // LODSB SI (334B_13A1 / 0x34851)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_13A2 / 0x34852)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:4861 (334B_13A4 / 0x34854)
    if(SignFlag) {
      goto label_334B_13B1_34861;
    }
    // MOV CX,AX (334B_13A6 / 0x34856)
    CX = AX;
    // INC CX (334B_13A8 / 0x34858)
    CX = Alu.Inc16(CX);
    // ADD SI,CX (334B_13A9 / 0x34859)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // SUB BP,CX (334B_13AB / 0x3485B)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNZ 0x3000:4851 (334B_13AD / 0x3485D)
    if(!ZeroFlag) {
      goto label_334B_13A1_34851;
    }
    // JMP 0x3000:486b (334B_13AF / 0x3485F)
    goto label_334B_13BB_3486B;
    label_334B_13B1_34861:
    // MOV CX,0x101 (334B_13B1 / 0x34861)
    CX = 0x101;
    // SUB CX,AX (334B_13B4 / 0x34864)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // INC SI (334B_13B6 / 0x34866)
    SI = Alu.Inc16(SI);
    // SUB BP,CX (334B_13B7 / 0x34867)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNZ 0x3000:4851 (334B_13B9 / 0x34869)
    if(!ZeroFlag) {
      goto label_334B_13A1_34851;
    }
    label_334B_13BB_3486B:
    // POP BP (334B_13BB / 0x3486B)
    BP = Stack.Pop();
    // POP CX (334B_13BC / 0x3486C)
    CX = Stack.Pop();
    // POP DX (334B_13BD / 0x3486D)
    DX = Stack.Pop();
    label_334B_13BE_3486E:
    // MOV AX,BX (334B_13BE / 0x3486E)
    AX = BX;
    // ADD AX,CX (334B_13C0 / 0x34870)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // SUB AX,word ptr [BP + 0x6] (334B_13C2 / 0x34872)
    // AX -= UInt16[SS, (ushort)(BP + 0x6)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x6)]);
    // JBE 0x3000:487b (334B_13C5 / 0x34875)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_13CB_3487B;
    }
    // SUB CX,AX (334B_13C7 / 0x34877)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:48a1 (334B_13C9 / 0x34879)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_13F1 / 0x348A1)
      return FarRet();
    }
    label_334B_13CB_3487B:
    // MOV AX,DX (334B_13CB / 0x3487B)
    AX = DX;
    // ADD AX,DI (334B_13CD / 0x3487D)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // ADD AX,DI (334B_13CF / 0x3487F)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // SUB AX,word ptr [BP + 0x4] (334B_13D1 / 0x34881)
    // AX -= UInt16[SS, (ushort)(BP + 0x4)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x4)]);
    // JG 0x3000:48c9 (334B_13D4 / 0x34884)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_1419_348C9;
    }
    // MOV AX,word ptr [BP + 0x0] (334B_13D6 / 0x34886)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_13D9 / 0x34889)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JG 0x3000:48a2 (334B_13DB / 0x3488B)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_13F2_348A2;
    }
    // MOV word ptr CS:[0xc3c],DI (334B_13DD / 0x3488D)
    UInt16[cs2, 0xC3C] = DI;
    // MOV BP,DI (334B_13E2 / 0x34892)
    BP = DI;
    // CALL 0x3000:40c0 (334B_13E4 / 0x34894)
    NearCall(cs2, 0x13E7, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BX,CX (334B_13E7 / 0x34897)
    BX = CX;
    // MOV DX,word ptr CS:[0x19d] (334B_13E9 / 0x34899)
    DX = UInt16[cs2, 0x19D];
    // JMP 0x3000:40f6 (334B_13EE / 0x3489E)
    // Jump converted to non entry function call
    return spice86_label_334B_0F5B_3440B(0x340F6 - cs1 * 0x10);
    label_334B_13F1_348A1:
    // RETF  (334B_13F1 / 0x348A1)
    return FarRet();
    label_334B_13F2_348A2:
    // CMP AX,word ptr CS:[0x158b] (334B_13F2 / 0x348A2)
    Alu.Sub16(AX, UInt16[cs2, 0x158B]);
    // JNC 0x3000:48a1 (334B_13F7 / 0x348A7)
    if(!CarryFlag) {
      // JNC target is RETF, inlining.
      // RETF  (334B_13F1 / 0x348A1)
      return FarRet();
    }
    // MOV BP,DI (334B_13F9 / 0x348A9)
    BP = DI;
    // SHL BP,1 (334B_13FB / 0x348AB)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // SUB BP,AX (334B_13FD / 0x348AD)
    // BP -= AX;
    BP = Alu.Sub16(BP, AX);
    // MOV word ptr CS:[0x10e0],BP (334B_13FF / 0x348AF)
    UInt16[cs2, 0x10E0] = BP;
    // MOV CS:[0x10de],AX (334B_1404 / 0x348B4)
    UInt16[cs2, 0x10DE] = AX;
    // ADD DX,AX (334B_1408 / 0x348B8)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // CALL 0x3000:40c0 (334B_140A / 0x348BA)
    NearCall(cs2, 0x140D, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,word ptr CS:[0x19d] (334B_140D / 0x348BD)
    DX = UInt16[cs2, 0x19D];
    // MOV BX,CX (334B_1412 / 0x348C2)
    BX = CX;
    // XOR CX,CX (334B_1414 / 0x348C4)
    CX = 0;
    // JMP 0x3000:4592 (334B_1416 / 0x348C6)
    goto label_334B_10E2_34592;
    label_334B_1419_348C9:
    // SHL DI,1 (334B_1419 / 0x348C9)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // SUB DI,AX (334B_141B / 0x348CB)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // JLE 0x3000:48a1 (334B_141D / 0x348CD)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_13F1 / 0x348A1)
      return FarRet();
    }
    // MOV CS:[0x10dc],AX (334B_141F / 0x348CF)
    UInt16[cs2, 0x10DC] = AX;
    // MOV word ptr CS:[0x10de],0x0 (334B_1423 / 0x348D3)
    UInt16[cs2, 0x10DE] = 0x0;
    // MOV AX,word ptr [BP + 0x0] (334B_142A / 0x348DA)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_142D / 0x348DD)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JLE 0x3000:48eb (334B_142F / 0x348DF)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_143B_348EB;
    }
    // MOV CS:[0x10de],AX (334B_1431 / 0x348E1)
    UInt16[cs2, 0x10DE] = AX;
    // SUB DI,AX (334B_1435 / 0x348E5)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // JLE 0x3000:48a1 (334B_1437 / 0x348E7)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_13F1 / 0x348A1)
      return FarRet();
    }
    // ADD DX,AX (334B_1439 / 0x348E9)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    label_334B_143B_348EB:
    // MOV word ptr CS:[0x10e0],DI (334B_143B / 0x348EB)
    UInt16[cs2, 0x10E0] = DI;
    // CALL 0x3000:40c0 (334B_1440 / 0x348F0)
    NearCall(cs2, 0x1443, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,word ptr CS:[0x19d] (334B_1443 / 0x348F3)
    DX = UInt16[cs2, 0x19D];
    // MOV BX,CX (334B_1448 / 0x348F8)
    BX = CX;
    // XOR CX,CX (334B_144A / 0x348FA)
    CX = 0;
    // JMP 0x3000:469e (334B_144C / 0x348FC)
    goto label_334B_11EE_3469E;
    label_334B_144F_348FF:
    // JMP 0x3000:4c98 (334B_144F / 0x348FF)
    goto label_334B_17E8_34C98;
    entry:
    label_334B_1452_34902:
    // CMP CH,0xfe (334B_1452 / 0x34902)
    Alu.Sub8(CH, 0xFE);
    // JNC 0x3000:48ff (334B_1455 / 0x34905)
    if(!CarryFlag) {
      // JNC target is JMP, inlining.
      // JMP 0x3000:4c98 (334B_144F / 0x348FF)
      goto label_334B_17E8_34C98;
    }
    // OR DI,DI (334B_1457 / 0x34907)
    // DI |= DI;
    DI = Alu.Or16(DI, DI);
    // JNS 0x3000:490e (334B_1459 / 0x34909)
    if(!SignFlag) {
      goto label_334B_145E_3490E;
    }
    // JMP 0x3000:4822 (334B_145B / 0x3490B)
    goto label_334B_1372_34822;
    label_334B_145E_3490E:
    // MOV AL,byte ptr [SI + -0x1] (334B_145E / 0x3490E)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // MOV CS:[0x19e],AL (334B_1461 / 0x34911)
    UInt8[cs2, 0x19E] = AL;
    // MOV word ptr CS:[0x158b],DI (334B_1465 / 0x34915)
    UInt16[cs2, 0x158B] = DI;
    // ADD DI,0x3 (334B_146A / 0x3491A)
    // DI += 0x3;
    DI = Alu.Add16(DI, 0x3);
    // SHR DI,1 (334B_146D / 0x3491D)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR DI,1 (334B_146F / 0x3491F)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHL DI,1 (334B_1471 / 0x34921)
    // DI <<= 1;
    DI = Alu.Shl16(DI, 1);
    // MOV AX,word ptr [BP + 0x2] (334B_1473 / 0x34923)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // SUB AX,BX (334B_1476 / 0x34926)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JLE 0x3000:4935 (334B_1478 / 0x34928)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_1485_34935;
    }
    // SUB CX,AX (334B_147A / 0x3492A)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:4968 (334B_147C / 0x3492C)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_14B8 / 0x34968)
      return FarRet();
    }
    // ADD BX,AX (334B_147E / 0x3492E)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    label_334B_1480_34930:
    // ADD SI,DI (334B_1480 / 0x34930)
    // SI += DI;
    SI = Alu.Add16(SI, DI);
    // DEC AX (334B_1482 / 0x34932)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:4930 (334B_1483 / 0x34933)
    if(!ZeroFlag) {
      goto label_334B_1480_34930;
    }
    label_334B_1485_34935:
    // MOV AX,BX (334B_1485 / 0x34935)
    AX = BX;
    // ADD AX,CX (334B_1487 / 0x34937)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // SUB AX,word ptr [BP + 0x6] (334B_1489 / 0x34939)
    // AX -= UInt16[SS, (ushort)(BP + 0x6)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x6)]);
    // JBE 0x3000:4942 (334B_148C / 0x3493C)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_1492_34942;
    }
    // SUB CX,AX (334B_148E / 0x3493E)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:4968 (334B_1490 / 0x34940)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_14B8 / 0x34968)
      return FarRet();
    }
    label_334B_1492_34942:
    // MOV AX,DX (334B_1492 / 0x34942)
    AX = DX;
    // ADD AX,word ptr CS:[0x158b] (334B_1494 / 0x34944)
    // AX += UInt16[cs2, 0x158B];
    AX = Alu.Add16(AX, UInt16[cs2, 0x158B]);
    // SUB AX,word ptr [BP + 0x4] (334B_1499 / 0x34949)
    // AX -= UInt16[SS, (ushort)(BP + 0x4)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x4)]);
    // JG 0x3000:49ad (334B_149C / 0x3494C)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_14FD_349AD;
    }
    // MOV AX,word ptr [BP + 0x0] (334B_149E / 0x3494E)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_14A1 / 0x34951)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JG 0x3000:4969 (334B_14A3 / 0x34953)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_14B9_34969;
    }
    // MOV AX,DI (334B_14A5 / 0x34955)
    AX = DI;
    // SHR AX,1 (334B_14A7 / 0x34957)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CS:[0x158b],AX (334B_14A9 / 0x34959)
    UInt16[cs2, 0x158B] = AX;
    // CALL 0x3000:40c0 (334B_14AD / 0x3495D)
    NearCall(cs2, 0x14B0, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,word ptr CS:[0x19d] (334B_14B0 / 0x34960)
    DX = UInt16[cs2, 0x19D];
    // JMP 0x3000:4a3a (334B_14B5 / 0x34965)
    // Jump converted to non entry function call
    return spice86_label_334B_0F5B_3440B(0x34A3A - cs1 * 0x10);
    label_334B_14B8_34968:
    // RETF  (334B_14B8 / 0x34968)
    return FarRet();
    label_334B_14B9_34969:
    // SUB word ptr CS:[0x158b],AX (334B_14B9 / 0x34969)
    // UInt16[cs2, 0x158B] -= AX;
    UInt16[cs2, 0x158B] = Alu.Sub16(UInt16[cs2, 0x158B], AX);
    // JLE 0x3000:4968 (334B_14BE / 0x3496E)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_14B8 / 0x34968)
      return FarRet();
    }
    // PUSH SI (334B_14C0 / 0x34970)
    Stack.Push(SI);
    // ADD DX,AX (334B_14C1 / 0x34971)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV SI,AX (334B_14C3 / 0x34973)
    SI = AX;
    // AND SI,0x3 (334B_14C5 / 0x34975)
    // SI &= 0x3;
    SI = Alu.And16(SI, 0x3);
    // SHL SI,1 (334B_14C8 / 0x34978)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr CS:[SI + 0x14f5] (334B_14CA / 0x3497A)
    SI = UInt16[cs2, (ushort)(SI + 0x14F5)];
    // SHR DI,1 (334B_14CF / 0x3497F)
    // DI >>= 1;
    DI = Alu.Shr16(DI, 1);
    // SHR AX,1 (334B_14D1 / 0x34981)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV byte ptr CS:[SI + 0x2],AL (334B_14D3 / 0x34983)
    UInt8[cs2, (ushort)(SI + 0x2)] = AL;
    // SHR AX,1 (334B_14D7 / 0x34987)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SUB DI,AX (334B_14D9 / 0x34989)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV word ptr CS:[SI + 0x4],DI (334B_14DB / 0x3498B)
    UInt16[cs2, (ushort)(SI + 0x4)] = DI;
    // CALL 0x3000:40c0 (334B_14DF / 0x3498F)
    NearCall(cs2, 0x14E2, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BP,SI (334B_14E2 / 0x34992)
    BP = SI;
    // POP SI (334B_14E4 / 0x34994)
    SI = Stack.Pop();
    // MOV AX,BP (334B_14E5 / 0x34995)
    AX = BP;
    // SUB AX,0x163d (334B_14E7 / 0x34997)
    // AX -= 0x163D;
    AX = Alu.Sub16(AX, 0x163D);
    // MOV CS:[0x163c],AL (334B_14EA / 0x3499A)
    UInt8[cs2, 0x163C] = AL;
    // MOV DX,word ptr CS:[0x19d] (334B_14EE / 0x3499E)
    DX = UInt16[cs2, 0x19D];
    // JMP BP (334B_14F3 / 0x349A3)
    // Indirect jump to BP, generating possible targets from emulator records
    uint targetAddress_334B_14F3 = (uint)(cs2 * 0x10 + BP - cs1 * 0x10);
    switch(targetAddress_334B_14F3) {
      case 0x24AAB : throw FailAsUntested("Would have been a goto but label label_334B_15FB_34AAB does not exist because no instruction was found there that belongs to a function.");
      case 0x24B34 : throw FailAsUntested("Would have been a goto but label label_334B_1684_34B34 does not exist because no instruction was found there that belongs to a function.");
      case 0x24B1E : throw FailAsUntested("Would have been a goto but label label_334B_166E_34B1E does not exist because no instruction was found there that belongs to a function.");
      case 0x24B40 : throw FailAsUntested("Would have been a goto but label label_334B_1690_34B40 does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_334B_14F3);
        break;
    }
    label_334B_14FD_349AD:
    // SUB word ptr CS:[0x158b],AX (334B_14FD / 0x349AD)
    // UInt16[cs2, 0x158B] -= AX;
    UInt16[cs2, 0x158B] = Alu.Sub16(UInt16[cs2, 0x158B], AX);
    // JLE 0x3000:4968 (334B_1502 / 0x349B2)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_14B8 / 0x34968)
      return FarRet();
    }
    // MOV AX,word ptr [BP + 0x0] (334B_1504 / 0x349B4)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_1507 / 0x349B7)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JG 0x3000:49dd (334B_1509 / 0x349B9)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_152D_349DD;
    }
    // MOV AX,CS:[0x158b] (334B_150B / 0x349BB)
    AX = UInt16[cs2, 0x158B];
    // MOV CS:[0x16ab],AX (334B_150F / 0x349BF)
    UInt16[cs2, 0x16AB] = AX;
    // ADD AX,0x3 (334B_1513 / 0x349C3)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (334B_1516 / 0x349C6)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // AND AL,0xfe (334B_1518 / 0x349C8)
    // AL &= 0xFE;
    AL = Alu.And8(AL, 0xFE);
    // SUB DI,AX (334B_151A / 0x349CA)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV AX,DI (334B_151C / 0x349CC)
    AX = DI;
    // MOV CS:[0x16a9],AL (334B_151E / 0x349CE)
    UInt8[cs2, 0x16A9] = AL;
    // CALL 0x3000:40c0 (334B_1522 / 0x349D2)
    NearCall(cs2, 0x1525, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,word ptr CS:[0x19d] (334B_1525 / 0x349D5)
    DX = UInt16[cs2, 0x19D];
    // JMP 0x3000:4b5a (334B_152A / 0x349DA)
    goto label_334B_16AA_34B5A;
    label_334B_152D_349DD:
    // SUB word ptr CS:[0x158b],AX (334B_152D / 0x349DD)
    // UInt16[cs2, 0x158B] -= AX;
    UInt16[cs2, 0x158B] = Alu.Sub16(UInt16[cs2, 0x158B], AX);
    // JLE 0x3000:4968 (334B_1532 / 0x349E2)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_14B8 / 0x34968)
      return FarRet();
    }
    // PUSH CX (334B_1534 / 0x349E4)
    Stack.Push(CX);
    // MOV CX,AX (334B_1535 / 0x349E5)
    CX = AX;
    // SHR CX,1 (334B_1537 / 0x349E7)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // ADD SI,CX (334B_1539 / 0x349E9)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // PUSH SI (334B_153B / 0x349EB)
    Stack.Push(SI);
    // ADD DX,AX (334B_153C / 0x349EC)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV SI,AX (334B_153E / 0x349EE)
    SI = AX;
    // AND SI,0x3 (334B_1540 / 0x349F0)
    // SI &= 0x3;
    SI = Alu.And16(SI, 0x3);
    // SHL SI,1 (334B_1543 / 0x349F3)
    // SI <<= 1;
    SI = Alu.Shl16(SI, 1);
    // MOV SI,word ptr CS:[SI + 0x1582] (334B_1545 / 0x349F5)
    SI = UInt16[cs2, (ushort)(SI + 0x1582)];
    // ADD AX,word ptr CS:[0x158b] (334B_154A / 0x349FA)
    // AX += UInt16[cs2, 0x158B];
    AX = Alu.Add16(AX, UInt16[cs2, 0x158B]);
    // ADD AX,0x3 (334B_154F / 0x349FF)
    // AX += 0x3;
    AX = Alu.Add16(AX, 0x3);
    // SHR AX,1 (334B_1552 / 0x34A02)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // AND AL,0xfe (334B_1554 / 0x34A04)
    // AL &= 0xFE;
    AL = Alu.And8(AL, 0xFE);
    // SUB DI,AX (334B_1556 / 0x34A06)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV AX,DI (334B_1558 / 0x34A08)
    AX = DI;
    // ADD AX,CX (334B_155A / 0x34A0A)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // MOV byte ptr CS:[SI + 0x2],AL (334B_155C / 0x34A0C)
    UInt8[cs2, (ushort)(SI + 0x2)] = AL;
    // MOV AX,CS:[0x158b] (334B_1560 / 0x34A10)
    AX = UInt16[cs2, 0x158B];
    // MOV word ptr CS:[SI + 0x4],AX (334B_1564 / 0x34A14)
    UInt16[cs2, (ushort)(SI + 0x4)] = AX;
    // CALL 0x3000:40c0 (334B_1568 / 0x34A18)
    NearCall(cs2, 0x156B, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BP,SI (334B_156B / 0x34A1B)
    BP = SI;
    // POP SI (334B_156D / 0x34A1D)
    SI = Stack.Pop();
    // POP CX (334B_156E / 0x34A1E)
    CX = Stack.Pop();
    // MOV AX,BP (334B_156F / 0x34A1F)
    AX = BP;
    // SUB AX,0x1779 (334B_1571 / 0x34A21)
    // AX -= 0x1779;
    AX = Alu.Sub16(AX, 0x1779);
    // MOV CS:[0x1778],AL (334B_1574 / 0x34A24)
    UInt8[cs2, 0x1778] = AL;
    // MOV DX,word ptr CS:[0x19d] (334B_1578 / 0x34A28)
    DX = UInt16[cs2, 0x19D];
    // ADD BP,0x3 (334B_157D / 0x34A2D)
    // BP += 0x3;
    BP = Alu.Add16(BP, 0x3);
    // JMP BP (334B_1580 / 0x34A30)
    // Indirect jump to BP, generating possible targets from emulator records
    uint targetAddress_334B_1580 = (uint)(cs2 * 0x10 + BP - cs1 * 0x10);
    switch(targetAddress_334B_1580) {
      case 0x24C82 : throw FailAsUntested("Would have been a goto but label label_334B_17D2_34C82 does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_334B_1580);
        break;
    }
    label_334B_16A7_34B57:
    // ADD SI,0x12 (334B_16A7 / 0x34B57)
    // Instruction bytes at index 2 modified by those instruction(s): 334B_151E_349CE
    // SI += 0x12;
    SI = Alu.Add16(SI, 0x12);
    label_334B_16AA_34B5A:
    // MOV BP,0x1234 (334B_16AA / 0x34B5A)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_150F_349BF
    BP = 0x1234;
    // PUSH DI (334B_16AD / 0x34B5D)
    Stack.Push(DI);
    // ADD BP,DI (334B_16AE / 0x34B5E)
    // BP += DI;
    BP = Alu.Add16(BP, DI);
    label_334B_16B0_34B60:
    // LODSW SI (334B_16B0 / 0x34B60)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BL,AL (334B_16B1 / 0x34B61)
    BL = AL;
    // AND AL,DL (334B_16B3 / 0x34B63)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:4ba9 (334B_16B5 / 0x34B65)
    if(ZeroFlag) {
      goto label_334B_16F9_34BA9;
    }
    // ADD AL,DH (334B_16B7 / 0x34B67)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_16B9 / 0x34B69)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP DI,BP (334B_16BA / 0x34B6A)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_16BC / 0x34B6C)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // SHR BL,1 (334B_16BE / 0x34B6E)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_16C0 / 0x34B70)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_16C2 / 0x34B72)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // SHR BL,1 (334B_16C4 / 0x34B74)
    // BL >>= 1;
    BL = Alu.Shr8(BL, 1);
    // JZ 0x3000:4bbc (334B_16C6 / 0x34B76)
    if(ZeroFlag) {
      goto label_334B_170C_34BBC;
    }
    // MOV AL,BL (334B_16C8 / 0x34B78)
    AL = BL;
    label_334B_16CA_34B7A:
    // ADD AL,DH (334B_16CA / 0x34B7A)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_16CC / 0x34B7C)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP DI,BP (334B_16CD / 0x34B7D)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_16CF / 0x34B7F)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // MOV AL,AH (334B_16D1 / 0x34B81)
    AL = AH;
    label_334B_16D3_34B83:
    // AND AL,DL (334B_16D3 / 0x34B83)
    // AL &= DL;
    AL = Alu.And8(AL, DL);
    // JZ 0x3000:4bcc (334B_16D5 / 0x34B85)
    if(ZeroFlag) {
      goto label_334B_171C_34BCC;
    }
    // ADD AL,DH (334B_16D7 / 0x34B87)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_16D9 / 0x34B89)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP DI,BP (334B_16DA / 0x34B8A)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_16DC / 0x34B8C)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // SHR AH,1 (334B_16DE / 0x34B8E)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    label_334B_16E0_34B90:
    // SHR AH,1 (334B_16E0 / 0x34B90)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_16E2 / 0x34B92)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // SHR AH,1 (334B_16E4 / 0x34B94)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JZ 0x3000:4bd5 (334B_16E6 / 0x34B96)
    if(ZeroFlag) {
      goto label_334B_1725_34BD5;
    }
    // MOV AL,AH (334B_16E8 / 0x34B98)
    AL = AH;
    // ADD AL,DH (334B_16EA / 0x34B9A)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_16EC / 0x34B9C)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_334B_16ED_34B9D:
    // CMP DI,BP (334B_16ED / 0x34B9D)
    Alu.Sub16(DI, BP);
    // JC 0x3000:4b60 (334B_16EF / 0x34B9F)
    if(CarryFlag) {
      goto label_334B_16B0_34B60;
    }
    label_334B_16F1_34BA1:
    // POP DI (334B_16F1 / 0x34BA1)
    DI = Stack.Pop();
    // ADD DI,0x140 (334B_16F2 / 0x34BA2)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // LOOP 0x3000:4b57 (334B_16F6 / 0x34BA6)
    if(--CX != 0) {
      goto label_334B_16A7_34B57;
    }
    // RETF  (334B_16F8 / 0x34BA8)
    return FarRet();
    label_334B_16F9_34BA9:
    // INC DI (334B_16F9 / 0x34BA9)
    DI = Alu.Inc16(DI);
    // CMP DI,BP (334B_16FA / 0x34BAA)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_16FC / 0x34BAC)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // OR AL,BL (334B_16FE / 0x34BAE)
    // AL |= BL;
    AL = Alu.Or8(AL, BL);
    // JZ 0x3000:4bbc (334B_1700 / 0x34BB0)
    if(ZeroFlag) {
      goto label_334B_170C_34BBC;
    }
    // SHR AL,1 (334B_1702 / 0x34BB2)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1704 / 0x34BB4)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1706 / 0x34BB6)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_1708 / 0x34BB8)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // JMP 0x3000:4b7a (334B_170A / 0x34BBA)
    goto label_334B_16CA_34B7A;
    label_334B_170C_34BBC:
    // INC DI (334B_170C / 0x34BBC)
    DI = Alu.Inc16(DI);
    // CMP DI,BP (334B_170D / 0x34BBD)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_170F / 0x34BBF)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // MOV AL,AH (334B_1711 / 0x34BC1)
    AL = AH;
    // OR AL,AL (334B_1713 / 0x34BC3)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNZ 0x3000:4b83 (334B_1715 / 0x34BC5)
    if(!ZeroFlag) {
      goto label_334B_16D3_34B83;
    }
    // ADD DI,0x2 (334B_1717 / 0x34BC7)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // JMP 0x3000:4b9d (334B_171A / 0x34BCA)
    goto label_334B_16ED_34B9D;
    label_334B_171C_34BCC:
    // INC DI (334B_171C / 0x34BCC)
    DI = Alu.Inc16(DI);
    // CMP DI,BP (334B_171D / 0x34BCD)
    Alu.Sub16(DI, BP);
    // JNC 0x3000:4ba1 (334B_171F / 0x34BCF)
    if(!CarryFlag) {
      goto label_334B_16F1_34BA1;
    }
    // SHR AH,1 (334B_1721 / 0x34BD1)
    // AH >>= 1;
    AH = Alu.Shr8(AH, 1);
    // JNZ 0x3000:4b90 (334B_1723 / 0x34BD3)
    if(!ZeroFlag) {
      goto label_334B_16E0_34B90;
    }
    label_334B_1725_34BD5:
    // INC DI (334B_1725 / 0x34BD5)
    DI = Alu.Inc16(DI);
    // JMP 0x3000:4b9d (334B_1726 / 0x34BD6)
    goto label_334B_16ED_34B9D;
    label_334B_17E8_34C98:
    // XOR CH,CH (334B_17E8 / 0x34C98)
    CH = 0;
    // MOV AX,word ptr [BP + 0x2] (334B_17EA / 0x34C9A)
    AX = UInt16[SS, (ushort)(BP + 0x2)];
    // SUB AX,BX (334B_17ED / 0x34C9D)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // JLE 0x3000:4cac (334B_17EF / 0x34C9F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_17FC_34CAC;
    }
    // SUB CX,AX (334B_17F1 / 0x34CA1)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:4cd5 (334B_17F3 / 0x34CA3)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_1825 / 0x34CD5)
      return FarRet();
    }
    // ADD BX,AX (334B_17F5 / 0x34CA5)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    label_334B_17F7_34CA7:
    // ADD SI,DI (334B_17F7 / 0x34CA7)
    // SI += DI;
    SI = Alu.Add16(SI, DI);
    // DEC AX (334B_17F9 / 0x34CA9)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:4ca7 (334B_17FA / 0x34CAA)
    if(!ZeroFlag) {
      goto label_334B_17F7_34CA7;
    }
    label_334B_17FC_34CAC:
    // MOV AX,BX (334B_17FC / 0x34CAC)
    AX = BX;
    // ADD AX,CX (334B_17FE / 0x34CAE)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // SUB AX,word ptr [BP + 0x6] (334B_1800 / 0x34CB0)
    // AX -= UInt16[SS, (ushort)(BP + 0x6)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x6)]);
    // JBE 0x3000:4cb9 (334B_1803 / 0x34CB3)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_1809_34CB9;
    }
    // SUB CX,AX (334B_1805 / 0x34CB5)
    // CX -= AX;
    CX = Alu.Sub16(CX, AX);
    // JBE 0x3000:4cd5 (334B_1807 / 0x34CB7)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RETF, inlining.
      // RETF  (334B_1825 / 0x34CD5)
      return FarRet();
    }
    label_334B_1809_34CB9:
    // MOV AX,DX (334B_1809 / 0x34CB9)
    AX = DX;
    // ADD AX,DI (334B_180B / 0x34CBB)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // SUB AX,word ptr [BP + 0x4] (334B_180D / 0x34CBD)
    // AX -= UInt16[SS, (ushort)(BP + 0x4)];
    AX = Alu.Sub16(AX, UInt16[SS, (ushort)(BP + 0x4)]);
    // JG 0x3000:4d04 (334B_1810 / 0x34CC0)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_1854_34D04;
    }
    // MOV AX,word ptr [BP + 0x0] (334B_1812 / 0x34CC2)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_1815 / 0x34CC5)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JG 0x3000:4cd6 (334B_1817 / 0x34CC7)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_1826_34CD6;
    }
    // MOV BP,DI (334B_1819 / 0x34CC9)
    BP = DI;
    // PUSH DI (334B_181B / 0x34CCB)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_181C / 0x34CCC)
    NearCall(cs2, 0x181F, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_181F / 0x34CCF)
    DX = Stack.Pop();
    // MOV BX,CX (334B_1820 / 0x34CD0)
    BX = CX;
    // JMP 0x3000:4ce7 (334B_1822 / 0x34CD2)
    goto label_334B_1837_34CE7;
    label_334B_1825_34CD5:
    // RETF  (334B_1825 / 0x34CD5)
    return FarRet();
    label_334B_1826_34CD6:
    // MOV BP,DI (334B_1826 / 0x34CD6)
    BP = DI;
    // SUB DI,AX (334B_1828 / 0x34CD8)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // JLE 0x3000:4cd5 (334B_182A / 0x34CDA)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_1825 / 0x34CD5)
      return FarRet();
    }
    // ADD DX,AX (334B_182C / 0x34CDC)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // ADD SI,AX (334B_182E / 0x34CDE)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // PUSH DI (334B_1830 / 0x34CE0)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_1831 / 0x34CE1)
    NearCall(cs2, 0x1834, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_1834 / 0x34CE4)
    DX = Stack.Pop();
    // MOV BX,CX (334B_1835 / 0x34CE5)
    BX = CX;
    label_334B_1837_34CE7:
    // SUB BP,DX (334B_1837 / 0x34CE7)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    label_334B_1839_34CE9:
    // MOV CX,DX (334B_1839 / 0x34CE9)
    CX = DX;
    label_334B_183B_34CEB:
    // LODSB SI (334B_183B / 0x34CEB)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // OR AL,AL (334B_183C / 0x34CEC)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JZ 0x3000:4cff (334B_183E / 0x34CEE)
    if(ZeroFlag) {
      goto label_334B_184F_34CFF;
    }
    // STOSB ES:DI (334B_1840 / 0x34CF0)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:4ceb (334B_1841 / 0x34CF1)
    if(--CX != 0) {
      goto label_334B_183B_34CEB;
    }
    label_334B_1843_34CF3:
    // SUB DI,DX (334B_1843 / 0x34CF3)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // ADD SI,BP (334B_1845 / 0x34CF5)
    // SI += BP;
    SI = Alu.Add16(SI, BP);
    // ADD DI,0x140 (334B_1847 / 0x34CF7)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC BX (334B_184B / 0x34CFB)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4ce9 (334B_184C / 0x34CFC)
    if(!ZeroFlag) {
      goto label_334B_1839_34CE9;
    }
    // RETF  (334B_184E / 0x34CFE)
    return FarRet();
    label_334B_184F_34CFF:
    // INC DI (334B_184F / 0x34CFF)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:4ceb (334B_1850 / 0x34D00)
    if(--CX != 0) {
      goto label_334B_183B_34CEB;
    }
    // JMP 0x3000:4cf3 (334B_1852 / 0x34D02)
    goto label_334B_1843_34CF3;
    label_334B_1854_34D04:
    // MOV word ptr CS:[0x158b],DI (334B_1854 / 0x34D04)
    UInt16[cs2, 0x158B] = DI;
    // SUB DI,AX (334B_1859 / 0x34D09)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // JLE 0x3000:4cd5 (334B_185B / 0x34D0B)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_1825 / 0x34CD5)
      return FarRet();
    }
    // MOV AX,word ptr [BP + 0x0] (334B_185D / 0x34D0D)
    AX = UInt16[SS, BP];
    // SUB AX,DX (334B_1860 / 0x34D10)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // JG 0x3000:4d22 (334B_1862 / 0x34D12)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_1872_34D22;
    }
    // PUSH DI (334B_1864 / 0x34D14)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_1865 / 0x34D15)
    NearCall(cs2, 0x1868, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_1868 / 0x34D18)
    DX = Stack.Pop();
    // MOV BP,word ptr CS:[0x158b] (334B_1869 / 0x34D19)
    BP = UInt16[cs2, 0x158B];
    // MOV BX,CX (334B_186E / 0x34D1E)
    BX = CX;
    // JMP 0x3000:4ce7 (334B_1870 / 0x34D20)
    goto label_334B_1837_34CE7;
    label_334B_1872_34D22:
    // SUB DI,AX (334B_1872 / 0x34D22)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // JLE 0x3000:4cd5 (334B_1874 / 0x34D24)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RETF, inlining.
      // RETF  (334B_1825 / 0x34CD5)
      return FarRet();
    }
    // ADD SI,AX (334B_1876 / 0x34D26)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // ADD DX,AX (334B_1878 / 0x34D28)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // PUSH DI (334B_187A / 0x34D2A)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_187B / 0x34D2B)
    NearCall(cs2, 0x187E, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_187E / 0x34D2E)
    DX = Stack.Pop();
    // MOV BP,word ptr CS:[0x158b] (334B_187F / 0x34D2F)
    BP = UInt16[cs2, 0x158B];
    // MOV BX,CX (334B_1884 / 0x34D34)
    BX = CX;
    // JMP 0x3000:4ce7 (334B_1886 / 0x34D36)
    goto label_334B_1837_34CE7;
    // Function call generated as ASM continues to next function entry point without return
    return spice86_label_334B_1888_34D38(0);
  }
  
  public Action spice86_label_334B_1888_34D38(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24D38: goto label_334B_1888_34D38;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1888_34D38:
    // LODSW SI (334B_1888 / 0x34D38)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB DX,AX (334B_1889 / 0x34D39)
    // DX -= AX;
    DX = Alu.Sub16(DX, AX);
    // JNC 0x3000:4d3f (334B_188B / 0x34D3B)
    if(!CarryFlag) {
      goto label_334B_188F_34D3F;
    }
    // XOR DX,DX (334B_188D / 0x34D3D)
    DX = 0;
    label_334B_188F_34D3F:
    // LODSW SI (334B_188F / 0x34D3F)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB BX,AX (334B_1890 / 0x34D40)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // JNC 0x3000:4d46 (334B_1892 / 0x34D42)
    if(!CarryFlag) {
      goto label_334B_1896_34D46;
    }
    // XOR BX,BX (334B_1894 / 0x34D44)
    BX = 0;
    label_334B_1896_34D46:
    // MOV CX,0x10 (334B_1896 / 0x34D46)
    CX = 0x10;
    // CMP BX,0xb8 (334B_1899 / 0x34D49)
    Alu.Sub16(BX, 0xB8);
    // JBE 0x3000:4d54 (334B_189D / 0x34D4D)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_18A4_34D54;
    }
    // MOV CX,0xc8 (334B_189F / 0x34D4F)
    CX = 0xC8;
    // SUB CX,BX (334B_18A2 / 0x34D52)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    label_334B_18A4_34D54:
    // CALL 0x3000:40c0 (334B_18A4 / 0x34D54)
    NearCall(cs2, 0x18A7, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV AX,0xa000 (334B_18A7 / 0x34D57)
    AX = 0xA000;
    // MOV ES,AX (334B_18AA / 0x34D5A)
    ES = AX;
    // SUB DX,0x140 (334B_18AC / 0x34D5C)
    // DX -= 0x140;
    DX = Alu.Sub16(DX, 0x140);
    // NEG DX (334B_18B0 / 0x34D60)
    DX = Alu.Sub16(0, DX);
    // CMP DX,0x10 (334B_18B2 / 0x34D62)
    Alu.Sub16(DX, 0x10);
    // JBE 0x3000:4d6a (334B_18B5 / 0x34D65)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_18BA_34D6A;
    }
    // MOV DX,0x10 (334B_18B7 / 0x34D67)
    DX = 0x10;
    label_334B_18BA_34D6A:
    // MOV word ptr CS:[0x18c],DX (334B_18BA / 0x34D6A)
    UInt16[cs2, 0x18C] = DX;
    // MOV word ptr CS:[0x18e],CX (334B_18BF / 0x34D6F)
    UInt16[cs2, 0x18E] = CX;
    // MOV word ptr CS:[0x18a],DI (334B_18C4 / 0x34D74)
    UInt16[cs2, 0x18A] = DI;
    // MOV BX,0xfa00 (334B_18C9 / 0x34D79)
    BX = 0xFA00;
    // SHR DX,1 (334B_18CC / 0x34D7C)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // MOV word ptr CS:[0x190],DX (334B_18CE / 0x34D7E)
    UInt16[cs2, 0x190] = DX;
    // MOV word ptr CS:[0x192],CX (334B_18D3 / 0x34D83)
    UInt16[cs2, 0x192] = CX;
    label_334B_18D8_34D88:
    // MOV CX,word ptr CS:[0x190] (334B_18D8 / 0x34D88)
    CX = UInt16[cs2, 0x190];
    // MOV BP,word ptr [SI + 0x20] (334B_18DD / 0x34D8D)
    BP = UInt16[DS, (ushort)(SI + 0x20)];
    // LODSW SI (334B_18E0 / 0x34D90)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (334B_18E1 / 0x34D91)
    DX = AX;
    // JCXZ 0x3000:4dc1 (334B_18E3 / 0x34D93)
    if(CX == 0) {
      goto label_334B_1911_34DC1;
    }
    label_334B_18E5_34D95:
    // MOV AX,word ptr ES:[DI] (334B_18E5 / 0x34D95)
    AX = UInt16[ES, DI];
    // MOV word ptr ES:[BX],AX (334B_18E8 / 0x34D98)
    UInt16[ES, BX] = AX;
    // ADD BX,0x2 (334B_18EB / 0x34D9B)
    // BX += 0x2;
    BX = Alu.Add16(BX, 0x2);
    // ROL BP,1 (334B_18EE / 0x34D9E)
    BP = Alu.Rol16(BP, 1);
    // ADD DX,DX (334B_18F0 / 0x34DA0)
    // DX += DX;
    DX = Alu.Add16(DX, DX);
    // JC 0x3000:4dae (334B_18F2 / 0x34DA2)
    if(CarryFlag) {
      goto label_334B_18FE_34DAE;
    }
    // XOR AL,AL (334B_18F4 / 0x34DA4)
    AL = 0;
    // TEST BP,0x1 (334B_18F6 / 0x34DA6)
    Alu.And16(BP, 0x1);
    // JZ 0x3000:4dae (334B_18FA / 0x34DAA)
    if(ZeroFlag) {
      goto label_334B_18FE_34DAE;
    }
    // MOV AL,0xf (334B_18FC / 0x34DAC)
    AL = 0xF;
    label_334B_18FE_34DAE:
    // ROL BP,1 (334B_18FE / 0x34DAE)
    BP = Alu.Rol16(BP, 1);
    // ADD DX,DX (334B_1900 / 0x34DB0)
    // DX += DX;
    DX = Alu.Add16(DX, DX);
    // JC 0x3000:4dbe (334B_1902 / 0x34DB2)
    if(CarryFlag) {
      goto label_334B_190E_34DBE;
    }
    // XOR AH,AH (334B_1904 / 0x34DB4)
    AH = 0;
    // TEST BP,0x1 (334B_1906 / 0x34DB6)
    Alu.And16(BP, 0x1);
    // JZ 0x3000:4dbe (334B_190A / 0x34DBA)
    if(ZeroFlag) {
      goto label_334B_190E_34DBE;
    }
    // MOV AH,0xf (334B_190C / 0x34DBC)
    AH = 0xF;
    label_334B_190E_34DBE:
    // STOSW ES:DI (334B_190E / 0x34DBE)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x3000:4d95 (334B_190F / 0x34DBF)
    if(--CX != 0) {
      goto label_334B_18E5_34D95;
    }
    label_334B_1911_34DC1:
    // TEST byte ptr CS:[0x18c],0x1 (334B_1911 / 0x34DC1)
    Alu.And8(UInt8[cs2, 0x18C], 0x1);
    // JZ 0x3000:4ddf (334B_1917 / 0x34DC7)
    if(ZeroFlag) {
      goto label_334B_192F_34DDF;
    }
    // MOV AL,byte ptr ES:[DI] (334B_1919 / 0x34DC9)
    AL = UInt8[ES, DI];
    // MOV byte ptr ES:[BX],AL (334B_191C / 0x34DCC)
    UInt8[ES, BX] = AL;
    // INC BX (334B_191F / 0x34DCF)
    BX = Alu.Inc16(BX);
    // INC DI (334B_1920 / 0x34DD0)
    DI = Alu.Inc16(DI);
    // ADD DX,DX (334B_1921 / 0x34DD1)
    // DX += DX;
    DX = Alu.Add16(DX, DX);
    // JC 0x3000:4ddf (334B_1923 / 0x34DD3)
    if(CarryFlag) {
      goto label_334B_192F_34DDF;
    }
    // XOR AL,AL (334B_1925 / 0x34DD5)
    AL = 0;
    // ADD BP,BP (334B_1927 / 0x34DD7)
    // BP += BP;
    BP = Alu.Add16(BP, BP);
    // JNC 0x3000:4ddd (334B_1929 / 0x34DD9)
    if(!CarryFlag) {
      goto label_334B_192D_34DDD;
    }
    // MOV AL,0xf (334B_192B / 0x34DDB)
    AL = 0xF;
    label_334B_192D_34DDD:
    // DEC DI (334B_192D / 0x34DDD)
    DI = Alu.Dec16(DI);
    // STOSB ES:DI (334B_192E / 0x34DDE)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_334B_192F_34DDF:
    // SUB DI,word ptr CS:[0x18c] (334B_192F / 0x34DDF)
    // DI -= UInt16[cs2, 0x18C];
    DI = Alu.Sub16(DI, UInt16[cs2, 0x18C]);
    // ADD DI,0x140 (334B_1934 / 0x34DE4)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC word ptr CS:[0x192] (334B_1938 / 0x34DE8)
    UInt16[cs2, 0x192] = Alu.Dec16(UInt16[cs2, 0x192]);
    // JNZ 0x3000:4d88 (334B_193D / 0x34DED)
    if(!ZeroFlag) {
      goto label_334B_18D8_34D88;
    }
    // RETF  (334B_193F / 0x34DEF)
    return FarRet();
  }
  
  public Action not_observed_334B_1940_034DF0(int gotoTarget) {
    label_334B_1940_34DF0:
    // PUSH AX (334B_1940 / 0x34DF0)
    Stack.Push(AX);
    // PUSH BX (334B_1941 / 0x34DF1)
    Stack.Push(BX);
    // PUSH CX (334B_1942 / 0x34DF2)
    Stack.Push(CX);
    // PUSH DX (334B_1943 / 0x34DF3)
    Stack.Push(DX);
    // PUSH SI (334B_1944 / 0x34DF4)
    Stack.Push(SI);
    // PUSH DI (334B_1945 / 0x34DF5)
    Stack.Push(DI);
    // PUSH BP (334B_1946 / 0x34DF6)
    Stack.Push(BP);
    // PUSH DS (334B_1947 / 0x34DF7)
    Stack.Push(DS);
    // PUSH ES (334B_1948 / 0x34DF8)
    Stack.Push(ES);
    // MOV BP,word ptr CS:[0x18a] (334B_1949 / 0x34DF9)
    BP = UInt16[cs2, 0x18A];
    // MOV BX,word ptr CS:[0x18c] (334B_194E / 0x34DFE)
    BX = UInt16[cs2, 0x18C];
    // MOV DX,word ptr CS:[0x18e] (334B_1953 / 0x34E03)
    DX = UInt16[cs2, 0x18E];
    // MOV AX,0xa000 (334B_1958 / 0x34E08)
    AX = 0xA000;
    // MOV ES,AX (334B_195B / 0x34E0B)
    ES = AX;
    // MOV DS,AX (334B_195D / 0x34E0D)
    DS = AX;
    // MOV SI,0xfa00 (334B_195F / 0x34E0F)
    SI = 0xFA00;
    label_334B_1962_34E12:
    // MOV DI,BP (334B_1962 / 0x34E12)
    DI = BP;
    // MOV CX,BX (334B_1964 / 0x34E14)
    CX = BX;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_1966 / 0x34E16)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // ADD BP,0x140 (334B_1968 / 0x34E18)
    // BP += 0x140;
    BP = Alu.Add16(BP, 0x140);
    // DEC DX (334B_196C / 0x34E1C)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:4e12 (334B_196D / 0x34E1D)
    if(!ZeroFlag) {
      goto label_334B_1962_34E12;
    }
    // POP ES (334B_196F / 0x34E1F)
    ES = Stack.Pop();
    // POP DS (334B_1970 / 0x34E20)
    DS = Stack.Pop();
    // POP BP (334B_1971 / 0x34E21)
    BP = Stack.Pop();
    // POP DI (334B_1972 / 0x34E22)
    DI = Stack.Pop();
    // POP SI (334B_1973 / 0x34E23)
    SI = Stack.Pop();
    // POP DX (334B_1974 / 0x34E24)
    DX = Stack.Pop();
    // POP CX (334B_1975 / 0x34E25)
    CX = Stack.Pop();
    // POP BX (334B_1976 / 0x34E26)
    BX = Stack.Pop();
    // POP AX (334B_1977 / 0x34E27)
    AX = Stack.Pop();
    // RETF  (334B_1978 / 0x34E28)
    return FarRet();
  }
  
  public Action spice86_label_334B_1979_34E29(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24E29: goto label_334B_1979_34E29;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1979_34E29:
    // XOR AX,AX (334B_1979 / 0x34E29)
    AX = 0;
    // Function call generated as ASM continues to next function entry point without return
    return spice86_label_334B_197B_34E2B(0);
  }
  
  public Action spice86_label_334B_197B_34E2B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24E2B: goto label_334B_197B_34E2B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_197B_34E2B:
    // MOV AH,AL (334B_197B / 0x34E2B)
    AH = AL;
    // PUSH AX (334B_197D / 0x34E2D)
    Stack.Push(AX);
    // LODSW SI (334B_197E / 0x34E2E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV DX,AX (334B_197F / 0x34E2F)
    DX = AX;
    // LODSW SI (334B_1981 / 0x34E31)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BX,AX (334B_1982 / 0x34E32)
    BX = AX;
    // CALL 0x3000:40c0 (334B_1984 / 0x34E34)
    NearCall(cs2, 0x1987, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // LODSW SI (334B_1987 / 0x34E37)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV BP,AX (334B_1988 / 0x34E38)
    BP = AX;
    // SUB BP,DX (334B_198A / 0x34E3A)
    // BP -= DX;
    BP = Alu.Sub16(BP, DX);
    // JBE 0x3000:4e77 (334B_198C / 0x34E3C)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_19C7_34E77;
    }
    // LODSW SI (334B_198E / 0x34E3E)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB BX,AX (334B_198F / 0x34E3F)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // JNC 0x3000:4e77 (334B_1991 / 0x34E41)
    if(!CarryFlag) {
      goto label_334B_19C7_34E77;
    }
    // NEG BX (334B_1993 / 0x34E43)
    BX = Alu.Sub16(0, BX);
    // POP AX (334B_1995 / 0x34E45)
    AX = Stack.Pop();
    // MOV SI,DI (334B_1996 / 0x34E46)
    SI = DI;
    // SHR BP,1 (334B_1998 / 0x34E48)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JC 0x3000:4e5c (334B_199A / 0x34E4A)
    if(CarryFlag) {
      goto label_334B_19AC_34E5C;
    }
    // JZ 0x3000:4e76 (334B_199C / 0x34E4C)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_19C6 / 0x34E76)
      return FarRet();
    }
    label_334B_199E_34E4E:
    // MOV DI,SI (334B_199E / 0x34E4E)
    DI = SI;
    // MOV CX,BP (334B_19A0 / 0x34E50)
    CX = BP;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_19A2 / 0x34E52)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD SI,0x140 (334B_19A4 / 0x34E54)
    // SI += 0x140;
    SI = Alu.Add16(SI, 0x140);
    // DEC BX (334B_19A8 / 0x34E58)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4e4e (334B_19A9 / 0x34E59)
    if(!ZeroFlag) {
      goto label_334B_199E_34E4E;
    }
    // RETF  (334B_19AB / 0x34E5B)
    return FarRet();
    label_334B_19AC_34E5C:
    // JZ 0x3000:4e6d (334B_19AC / 0x34E5C)
    if(ZeroFlag) {
      goto label_334B_19BD_34E6D;
    }
    label_334B_19AE_34E5E:
    // MOV DI,SI (334B_19AE / 0x34E5E)
    DI = SI;
    // MOV CX,BP (334B_19B0 / 0x34E60)
    CX = BP;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_19B2 / 0x34E62)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // STOSB ES:DI (334B_19B4 / 0x34E64)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD SI,0x140 (334B_19B5 / 0x34E65)
    // SI += 0x140;
    SI = Alu.Add16(SI, 0x140);
    // DEC BX (334B_19B9 / 0x34E69)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4e5e (334B_19BA / 0x34E6A)
    if(!ZeroFlag) {
      goto label_334B_19AE_34E5E;
    }
    // RETF  (334B_19BC / 0x34E6C)
    return FarRet();
    label_334B_19BD_34E6D:
    // MOV CX,BX (334B_19BD / 0x34E6D)
    CX = BX;
    label_334B_19BF_34E6F:
    // STOSB ES:DI (334B_19BF / 0x34E6F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DI,0x13f (334B_19C0 / 0x34E70)
    // DI += 0x13F;
    DI = Alu.Add16(DI, 0x13F);
    // LOOP 0x3000:4e6f (334B_19C4 / 0x34E74)
    if(--CX != 0) {
      goto label_334B_19BF_34E6F;
    }
    label_334B_19C6_34E76:
    // RETF  (334B_19C6 / 0x34E76)
    return FarRet();
    label_334B_19C7_34E77:
    // POP AX (334B_19C7 / 0x34E77)
    AX = Stack.Pop();
    // RETF  (334B_19C8 / 0x34E78)
    return FarRet();
  }
  
  public Action spice86_label_334B_19C9_34E79(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24E79: goto label_334B_19C9_34E79;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_19C9_34E79:
    // MOV DX,word ptr [BP + 0x0] (334B_19C9 / 0x34E79)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_19CC / 0x34E7C)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // CALL 0x3000:40c0 (334B_19CF / 0x34E7F)
    NearCall(cs2, 0x19D2, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV SI,DI (334B_19D2 / 0x34E82)
    SI = DI;
    // MOV DX,word ptr [BP + 0x8] (334B_19D4 / 0x34E84)
    DX = UInt16[SS, (ushort)(BP + 0x8)];
    // MOV BX,word ptr [BP + 0xa] (334B_19D7 / 0x34E87)
    BX = UInt16[SS, (ushort)(BP + 0xA)];
    // CALL 0x3000:40c0 (334B_19DA / 0x34E8A)
    NearCall(cs2, 0x19DD, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,word ptr [BP + 0x4] (334B_19DD / 0x34E8D)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV BX,word ptr [BP + 0x6] (334B_19E0 / 0x34E90)
    BX = UInt16[SS, (ushort)(BP + 0x6)];
    label_334B_19E3_34E93:
    // MOV CX,DX (334B_19E3 / 0x34E93)
    CX = DX;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_19E5 / 0x34E95)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // SUB SI,DX (334B_19E7 / 0x34E97)
    // SI -= DX;
    SI = Alu.Sub16(SI, DX);
    // SUB DI,DX (334B_19E9 / 0x34E99)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // ADD SI,0x140 (334B_19EB / 0x34E9B)
    // SI += 0x140;
    SI = Alu.Add16(SI, 0x140);
    // ADD DI,0x140 (334B_19EF / 0x34E9F)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC BX (334B_19F3 / 0x34EA3)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:4e93 (334B_19F4 / 0x34EA4)
    if(!ZeroFlag) {
      goto label_334B_19E3_34E93;
    }
    // RETF  (334B_19F6 / 0x34EA6)
    return FarRet();
  }
  
  public Action not_observed_334B_19F7_034EA7(int gotoTarget) {
    label_334B_19F7_34EA7:
    // PUSH AX (334B_19F7 / 0x34EA7)
    Stack.Push(AX);
    // PUSH CX (334B_19F8 / 0x34EA8)
    Stack.Push(CX);
    // PUSH DI (334B_19F9 / 0x34EA9)
    Stack.Push(DI);
    // XOR DI,DI (334B_19FA / 0x34EAA)
    DI = 0;
    // XOR AX,AX (334B_19FC / 0x34EAC)
    AX = 0;
    // MOV CX,0x7d00 (334B_19FE / 0x34EAE)
    CX = 0x7D00;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_1A01 / 0x34EB1)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP DI (334B_1A03 / 0x34EB3)
    DI = Stack.Pop();
    // POP CX (334B_1A04 / 0x34EB4)
    CX = Stack.Pop();
    // POP AX (334B_1A05 / 0x34EB5)
    AX = Stack.Pop();
    // RETF  (334B_1A06 / 0x34EB6)
    return FarRet();
  }
  
  public Action spice86_label_334B_1A07_34EB7(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24EB7: goto label_334B_1A07_34EB7;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1A07_34EB7:
    // MOV word ptr CS:[0x19a],BP (334B_1A07 / 0x34EB7)
    UInt16[cs2, 0x19A] = BP;
    // MOV word ptr CS:[0x198],SI (334B_1A0C / 0x34EBC)
    UInt16[cs2, 0x198] = SI;
    // MOV CS:[0x19c],AL (334B_1A11 / 0x34EC1)
    UInt8[cs2, 0x19C] = AL;
    // PUSH AX (334B_1A15 / 0x34EC5)
    Stack.Push(AX);
    // PUSH BX (334B_1A16 / 0x34EC6)
    Stack.Push(BX);
    // PUSH CX (334B_1A17 / 0x34EC7)
    Stack.Push(CX);
    // PUSH DX (334B_1A18 / 0x34EC8)
    Stack.Push(DX);
    // PUSH DI (334B_1A19 / 0x34EC9)
    Stack.Push(DI);
    // MOV word ptr CS:[0x194],DX (334B_1A1A / 0x34ECA)
    UInt16[cs2, 0x194] = DX;
    // MOV word ptr CS:[0x196],BX (334B_1A1F / 0x34ECF)
    UInt16[cs2, 0x196] = BX;
    // SUB BX,CX (334B_1A24 / 0x34ED4)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    // SUB DX,DI (334B_1A26 / 0x34ED6)
    // DX -= DI;
    DX = Alu.Sub16(DX, DI);
    // NEG BX (334B_1A28 / 0x34ED8)
    BX = Alu.Sub16(0, BX);
    // NEG DX (334B_1A2A / 0x34EDA)
    DX = Alu.Sub16(0, DX);
    // CALL 0x3000:4f8c (334B_1A2C / 0x34EDC)
    NearCall(cs2, 0x1A2F, unknown_334B_1ADC_34F8C);
    // MOV BP,word ptr CS:[0x19a] (334B_1A2F / 0x34EDF)
    BP = UInt16[cs2, 0x19A];
    // POP DI (334B_1A34 / 0x34EE4)
    DI = Stack.Pop();
    // POP DX (334B_1A35 / 0x34EE5)
    DX = Stack.Pop();
    // POP CX (334B_1A36 / 0x34EE6)
    CX = Stack.Pop();
    // POP BX (334B_1A37 / 0x34EE7)
    BX = Stack.Pop();
    // POP AX (334B_1A38 / 0x34EE8)
    AX = Stack.Pop();
    // RETF  (334B_1A39 / 0x34EE9)
    return FarRet();
  }
  
  public Action unknown_334B_1ADC_34F8C(int gotoTarget) {
    switch(gotoTarget) {
      case 0x24EEA: break;
      case 0: goto entry; break; //
    }
    label_334B_1A3A_34EEA:
    // MOV BX,word ptr CS:[0x196] (334B_1A3A / 0x34EEA)
    BX = UInt16[cs2, 0x196];
    // MOV CX,DX (334B_1A3F / 0x34EEF)
    CX = DX;
    // MOV AX,CS:[0x194] (334B_1A41 / 0x34EF1)
    AX = UInt16[cs2, 0x194];
    // MOV DX,AX (334B_1A45 / 0x34EF5)
    DX = AX;
    // ADD AX,CX (334B_1A47 / 0x34EF7)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // CMP AX,DX (334B_1A49 / 0x34EF9)
    Alu.Sub16(AX, DX);
    // JG 0x3000:4f01 (334B_1A4B / 0x34EFB)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_1A51_34F01;
    }
    // MOV DX,AX (334B_1A4D / 0x34EFD)
    DX = AX;
    // NEG CX (334B_1A4F / 0x34EFF)
    CX = Alu.Sub16(0, CX);
    label_334B_1A51_34F01:
    // MOV DI,word ptr CS:[0x198] (334B_1A51 / 0x34F01)
    DI = UInt16[cs2, 0x198];
    // CMP BX,word ptr [DI + 0x2] (334B_1A56 / 0x34F06)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JL 0x3000:4f33 (334B_1A59 / 0x34F09)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1A83_34F33;
    }
    // CMP BX,word ptr [DI + 0x6] (334B_1A5B / 0x34F0B)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JGE 0x3000:4f33 (334B_1A5E / 0x34F0E)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1A83_34F33;
    }
    // CALL 0x3000:40c0 (334B_1A60 / 0x34F10)
    NearCall(cs2, 0x1A63, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // INC CX (334B_1A63 / 0x34F13)
    CX = Alu.Inc16(CX);
    // MOV AL,CS:[0x19c] (334B_1A64 / 0x34F14)
    AL = UInt8[cs2, 0x19C];
    // MOV SI,word ptr CS:[0x198] (334B_1A68 / 0x34F18)
    SI = UInt16[cs2, 0x198];
    label_334B_1A6D_34F1D:
    // ROL word ptr CS:[0x19a],1 (334B_1A6D / 0x34F1D)
    UInt16[cs2, 0x19A] = Alu.Rol16(UInt16[cs2, 0x19A], 1);
    // JNC 0x3000:4f2f (334B_1A72 / 0x34F22)
    if(!CarryFlag) {
      goto label_334B_1A7F_34F2F;
    }
    // CMP DX,word ptr [SI] (334B_1A74 / 0x34F24)
    Alu.Sub16(DX, UInt16[DS, SI]);
    // JL 0x3000:4f2f (334B_1A76 / 0x34F26)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1A7F_34F2F;
    }
    // CMP DX,word ptr [SI + 0x4] (334B_1A78 / 0x34F28)
    Alu.Sub16(DX, UInt16[DS, (ushort)(SI + 0x4)]);
    // JGE 0x3000:4f2f (334B_1A7B / 0x34F2B)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1A7F_34F2F;
    }
    // STOSB ES:DI (334B_1A7D / 0x34F2D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // DEC DI (334B_1A7E / 0x34F2E)
    DI = Alu.Dec16(DI);
    label_334B_1A7F_34F2F:
    // INC DI (334B_1A7F / 0x34F2F)
    DI = Alu.Inc16(DI);
    // INC DX (334B_1A80 / 0x34F30)
    DX = Alu.Inc16(DX);
    // LOOP 0x3000:4f1d (334B_1A81 / 0x34F31)
    if(--CX != 0) {
      goto label_334B_1A6D_34F1D;
    }
    label_334B_1A83_34F33:
    // POP SI (334B_1A83 / 0x34F33)
    SI = Stack.Pop();
    // POP DI (334B_1A84 / 0x34F34)
    DI = Stack.Pop();
    // RET  (334B_1A85 / 0x34F35)
    return NearRet();
    label_334B_1A86_34F36:
    // MOV CX,BX (334B_1A86 / 0x34F36)
    CX = BX;
    // MOV BX,word ptr CS:[0x196] (334B_1A88 / 0x34F38)
    BX = UInt16[cs2, 0x196];
    // MOV DX,word ptr CS:[0x194] (334B_1A8D / 0x34F3D)
    DX = UInt16[cs2, 0x194];
    // OR AX,AX (334B_1A92 / 0x34F42)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x3000:4f48 (334B_1A94 / 0x34F44)
    if(!SignFlag) {
      goto label_334B_1A98_34F48;
    }
    // SUB BX,CX (334B_1A96 / 0x34F46)
    // BX -= CX;
    BX = Alu.Sub16(BX, CX);
    label_334B_1A98_34F48:
    // CMP BX,0xc8 (334B_1A98 / 0x34F48)
    Alu.Sub16(BX, 0xC8);
    // JC 0x3000:4f54 (334B_1A9C / 0x34F4C)
    if(CarryFlag) {
      goto label_334B_1AA4_34F54;
    }
    // JGE 0x3000:4f89 (334B_1A9E / 0x34F4E)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1AD9_34F89;
    }
    // ADD CX,BX (334B_1AA0 / 0x34F50)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // XOR BX,BX (334B_1AA2 / 0x34F52)
    BX = 0;
    label_334B_1AA4_34F54:
    // MOV DI,word ptr CS:[0x198] (334B_1AA4 / 0x34F54)
    DI = UInt16[cs2, 0x198];
    // CMP DX,word ptr [DI] (334B_1AA9 / 0x34F59)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JL 0x3000:4f89 (334B_1AAB / 0x34F5B)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1AD9_34F89;
    }
    // CMP DX,word ptr [DI + 0x4] (334B_1AAD / 0x34F5D)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JGE 0x3000:4f89 (334B_1AB0 / 0x34F60)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1AD9_34F89;
    }
    // CALL 0x3000:40c0 (334B_1AB2 / 0x34F62)
    NearCall(cs2, 0x1AB5, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // INC CX (334B_1AB5 / 0x34F65)
    CX = Alu.Inc16(CX);
    // MOV AL,CS:[0x19c] (334B_1AB6 / 0x34F66)
    AL = UInt8[cs2, 0x19C];
    // MOV SI,word ptr CS:[0x198] (334B_1ABA / 0x34F6A)
    SI = UInt16[cs2, 0x198];
    label_334B_1ABF_34F6F:
    // ROL word ptr CS:[0x19a],1 (334B_1ABF / 0x34F6F)
    UInt16[cs2, 0x19A] = Alu.Rol16(UInt16[cs2, 0x19A], 1);
    // JNC 0x3000:4f82 (334B_1AC4 / 0x34F74)
    if(!CarryFlag) {
      goto label_334B_1AD2_34F82;
    }
    // CMP BX,word ptr [SI + 0x2] (334B_1AC6 / 0x34F76)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x2)]);
    // JL 0x3000:4f82 (334B_1AC9 / 0x34F79)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1AD2_34F82;
    }
    // CMP BX,word ptr [SI + 0x6] (334B_1ACB / 0x34F7B)
    Alu.Sub16(BX, UInt16[DS, (ushort)(SI + 0x6)]);
    // JGE 0x3000:4f82 (334B_1ACE / 0x34F7E)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1AD2_34F82;
    }
    // STOSB ES:DI (334B_1AD0 / 0x34F80)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // DEC DI (334B_1AD1 / 0x34F81)
    DI = Alu.Dec16(DI);
    label_334B_1AD2_34F82:
    // INC BX (334B_1AD2 / 0x34F82)
    BX = Alu.Inc16(BX);
    // ADD DI,0x140 (334B_1AD3 / 0x34F83)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // LOOP 0x3000:4f6f (334B_1AD7 / 0x34F87)
    if(--CX != 0) {
      goto label_334B_1ABF_34F6F;
    }
    label_334B_1AD9_34F89:
    // POP SI (334B_1AD9 / 0x34F89)
    SI = Stack.Pop();
    // POP DI (334B_1ADA / 0x34F8A)
    DI = Stack.Pop();
    // RET  (334B_1ADB / 0x34F8B)
    return NearRet();
    entry:
    label_334B_1ADC_34F8C:
    // PUSH DI (334B_1ADC / 0x34F8C)
    Stack.Push(DI);
    // PUSH SI (334B_1ADD / 0x34F8D)
    Stack.Push(SI);
    // OR BX,BX (334B_1ADE / 0x34F8E)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JNZ 0x3000:4f95 (334B_1AE0 / 0x34F90)
    if(!ZeroFlag) {
      goto label_334B_1AE5_34F95;
    }
    // JMP 0x3000:4eea (334B_1AE2 / 0x34F92)
    goto label_334B_1A3A_34EEA;
    label_334B_1AE5_34F95:
    // MOV AX,0x1 (334B_1AE5 / 0x34F95)
    AX = 0x1;
    // JNS 0x3000:4f9e (334B_1AE8 / 0x34F98)
    if(!SignFlag) {
      goto label_334B_1AEE_34F9E;
    }
    // NEG BX (334B_1AEA / 0x34F9A)
    BX = Alu.Sub16(0, BX);
    // NEG AX (334B_1AEC / 0x34F9C)
    AX = Alu.Sub16(0, AX);
    label_334B_1AEE_34F9E:
    // OR DX,DX (334B_1AEE / 0x34F9E)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // JZ 0x3000:4f36 (334B_1AF0 / 0x34FA0)
    if(ZeroFlag) {
      goto label_334B_1A86_34F36;
    }
    // MOV CX,0x1 (334B_1AF2 / 0x34FA2)
    CX = 0x1;
    // JNS 0x3000:4fab (334B_1AF5 / 0x34FA5)
    if(!SignFlag) {
      goto label_334B_1AFB_34FAB;
    }
    // NEG CX (334B_1AF7 / 0x34FA7)
    CX = Alu.Sub16(0, CX);
    // NEG DX (334B_1AF9 / 0x34FA9)
    DX = Alu.Sub16(0, DX);
    label_334B_1AFB_34FAB:
    // PUSH AX (334B_1AFB / 0x34FAB)
    Stack.Push(AX);
    // PUSH CX (334B_1AFC / 0x34FAC)
    Stack.Push(CX);
    // PUSH AX (334B_1AFD / 0x34FAD)
    Stack.Push(AX);
    // PUSH CX (334B_1AFE / 0x34FAE)
    Stack.Push(CX);
    // MOV BP,SP (334B_1AFF / 0x34FAF)
    BP = SP;
    // MOV SI,BX (334B_1B01 / 0x34FB1)
    SI = BX;
    // MOV DI,DX (334B_1B03 / 0x34FB3)
    DI = DX;
    // XOR AX,AX (334B_1B05 / 0x34FB5)
    AX = 0;
    // CMP DX,BX (334B_1B07 / 0x34FB7)
    Alu.Sub16(DX, BX);
    // JBE 0x3000:4fc0 (334B_1B09 / 0x34FB9)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_1B10_34FC0;
    }
    // MOV word ptr [BP + 0x2],AX (334B_1B0B / 0x34FBB)
    UInt16[SS, (ushort)(BP + 0x2)] = AX;
    // JMP 0x3000:4fc9 (334B_1B0E / 0x34FBE)
    goto label_334B_1B19_34FC9;
    label_334B_1B10_34FC0:
    // OR BX,BX (334B_1B10 / 0x34FC0)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x3000:5026 (334B_1B12 / 0x34FC2)
    if(ZeroFlag) {
      goto label_334B_1B76_35026;
    }
    // XCHG SI,DI (334B_1B14 / 0x34FC4)
    ushort tmp_334B_1B14 = SI;
    SI = DI;
    DI = tmp_334B_1B14;
    // MOV word ptr [BP + 0x0],AX (334B_1B16 / 0x34FC6)
    UInt16[SS, BP] = AX;
    label_334B_1B19_34FC9:
    // MOV AX,DI (334B_1B19 / 0x34FC9)
    AX = DI;
    // MOV CX,DI (334B_1B1B / 0x34FCB)
    CX = DI;
    // SHR AX,1 (334B_1B1D / 0x34FCD)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    label_334B_1B1F_34FCF:
    // ADD AX,SI (334B_1B1F / 0x34FCF)
    // AX += SI;
    AX = Alu.Add16(AX, SI);
    // CMP AX,DI (334B_1B21 / 0x34FD1)
    Alu.Sub16(AX, DI);
    // JC 0x3000:4fdf (334B_1B23 / 0x34FD3)
    if(CarryFlag) {
      goto label_334B_1B2F_34FDF;
    }
    // SUB AX,DI (334B_1B25 / 0x34FD5)
    // AX -= DI;
    AX = Alu.Sub16(AX, DI);
    // MOV DX,word ptr [BP + 0x4] (334B_1B27 / 0x34FD7)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV BX,word ptr [BP + 0x6] (334B_1B2A / 0x34FDA)
    BX = UInt16[SS, (ushort)(BP + 0x6)];
    // JMP 0x3000:4fe5 (334B_1B2D / 0x34FDD)
    goto label_334B_1B35_34FE5;
    label_334B_1B2F_34FDF:
    // MOV DX,word ptr [BP + 0x0] (334B_1B2F / 0x34FDF)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1B32 / 0x34FE2)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    label_334B_1B35_34FE5:
    // ADD DX,word ptr CS:[0x194] (334B_1B35 / 0x34FE5)
    // DX += UInt16[cs2, 0x194];
    DX = Alu.Add16(DX, UInt16[cs2, 0x194]);
    // ADD BX,word ptr CS:[0x196] (334B_1B3A / 0x34FEA)
    // BX += UInt16[cs2, 0x196];
    BX = Alu.Add16(BX, UInt16[cs2, 0x196]);
    // MOV word ptr CS:[0x194],DX (334B_1B3F / 0x34FEF)
    UInt16[cs2, 0x194] = DX;
    // MOV word ptr CS:[0x196],BX (334B_1B44 / 0x34FF4)
    UInt16[cs2, 0x196] = BX;
    // PUSH AX (334B_1B49 / 0x34FF9)
    Stack.Push(AX);
    // PUSH DI (334B_1B4A / 0x34FFA)
    Stack.Push(DI);
    // ROL word ptr CS:[0x19a],1 (334B_1B4B / 0x34FFB)
    UInt16[cs2, 0x19A] = Alu.Rol16(UInt16[cs2, 0x19A], 1);
    // JNC 0x3000:5022 (334B_1B50 / 0x35000)
    if(!CarryFlag) {
      goto label_334B_1B72_35022;
    }
    // MOV DI,word ptr CS:[0x198] (334B_1B52 / 0x35002)
    DI = UInt16[cs2, 0x198];
    // CMP DX,word ptr [DI] (334B_1B57 / 0x35007)
    Alu.Sub16(DX, UInt16[DS, DI]);
    // JL 0x3000:5022 (334B_1B59 / 0x35009)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1B72_35022;
    }
    // CMP BX,word ptr [DI + 0x2] (334B_1B5B / 0x3500B)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x2)]);
    // JL 0x3000:5022 (334B_1B5E / 0x3500E)
    if(SignFlag != OverflowFlag) {
      goto label_334B_1B72_35022;
    }
    // CMP DX,word ptr [DI + 0x4] (334B_1B60 / 0x35010)
    Alu.Sub16(DX, UInt16[DS, (ushort)(DI + 0x4)]);
    // JGE 0x3000:5022 (334B_1B63 / 0x35013)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1B72_35022;
    }
    // CMP BX,word ptr [DI + 0x6] (334B_1B65 / 0x35015)
    Alu.Sub16(BX, UInt16[DS, (ushort)(DI + 0x6)]);
    // JGE 0x3000:5022 (334B_1B68 / 0x35018)
    if(SignFlag == OverflowFlag) {
      goto label_334B_1B72_35022;
    }
    // CALL 0x3000:40c0 (334B_1B6A / 0x3501A)
    NearCall(cs2, 0x1B6D, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV AL,CS:[0x19c] (334B_1B6D / 0x3501D)
    AL = UInt8[cs2, 0x19C];
    // STOSB ES:DI (334B_1B71 / 0x35021)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_334B_1B72_35022:
    // POP DI (334B_1B72 / 0x35022)
    DI = Stack.Pop();
    // POP AX (334B_1B73 / 0x35023)
    AX = Stack.Pop();
    // LOOP 0x3000:4fcf (334B_1B74 / 0x35024)
    if(--CX != 0) {
      goto label_334B_1B1F_34FCF;
    }
    label_334B_1B76_35026:
    // ADD SP,0x8 (334B_1B76 / 0x35026)
    // SP += 0x8;
    SP = Alu.Add16(SP, 0x8);
    // POP SI (334B_1B79 / 0x35029)
    SI = Stack.Pop();
    // POP DI (334B_1B7A / 0x3502A)
    DI = Stack.Pop();
    // RET  (334B_1B7B / 0x3502B)
    return NearRet();
  }
  
  public Action MemcpyDSToESFor64000_334B_1B7C_3502C(int gotoTarget) {
    label_334B_1B7C_3502C:
    // PUSH CX (334B_1B7C / 0x3502C)
    Stack.Push(CX);
    // PUSH SI (334B_1B7D / 0x3502D)
    Stack.Push(SI);
    // PUSH DI (334B_1B7E / 0x3502E)
    Stack.Push(DI);
    // XOR SI,SI (334B_1B7F / 0x3502F)
    SI = 0;
    // MOV DI,SI (334B_1B81 / 0x35031)
    DI = SI;
    // MOV CX,0x7d00 (334B_1B83 / 0x35033)
    CX = 0x7D00;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1B86 / 0x35036)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP DI (334B_1B88 / 0x35038)
    DI = Stack.Pop();
    // POP SI (334B_1B89 / 0x35039)
    SI = Stack.Pop();
    // POP CX (334B_1B8A / 0x3503A)
    CX = Stack.Pop();
    // RETF  (334B_1B8B / 0x3503B)
    return FarRet();
  }
  
  public Action not_observed_334B_1B8C_03503C(int gotoTarget) {
    label_334B_1B8C_3503C:
    // MOV DS,SI (334B_1B8C / 0x3503C)
    DS = SI;
    // Function call generated as ASM continues to next function entry point without return
    return CopySquareOfPixels_334B_1B8E_3503E(0);
  }
  
  public Action CopySquareOfPixels_334B_1B8E_3503E(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2503E: goto label_334B_1B8E_3503E;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1B8E_3503E:
    // CALL 0x3000:40c0 (334B_1B8E / 0x3503E)
    NearCall(cs2, 0x1B91, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // SHR BP,1 (334B_1B91 / 0x35041)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JC 0x3000:5059 (334B_1B93 / 0x35043)
    if(CarryFlag) {
      goto label_334B_1BA9_35059;
    }
    // JZ 0x3000:506d (334B_1B95 / 0x35045)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_1BBD / 0x3506D)
      return FarRet();
    }
    // MOV DX,DI (334B_1B97 / 0x35047)
    DX = DI;
    label_334B_1B99_35049:
    // MOV SI,DX (334B_1B99 / 0x35049)
    SI = DX;
    // MOV DI,SI (334B_1B9B / 0x3504B)
    DI = SI;
    // MOV CX,BP (334B_1B9D / 0x3504D)
    CX = BP;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1B9F / 0x3504F)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DX,0x140 (334B_1BA1 / 0x35051)
    // DX += 0x140;
    DX = Alu.Add16(DX, 0x140);
    // DEC AX (334B_1BA5 / 0x35055)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:5049 (334B_1BA6 / 0x35056)
    if(!ZeroFlag) {
      goto label_334B_1B99_35049;
    }
    // RETF  (334B_1BA8 / 0x35058)
    return FarRet();
    label_334B_1BA9_35059:
    // JZ 0x3000:506e (334B_1BA9 / 0x35059)
    if(ZeroFlag) {
      goto label_334B_1BBE_3506E;
    }
    // MOV DX,DI (334B_1BAB / 0x3505B)
    DX = DI;
    label_334B_1BAD_3505D:
    // MOV SI,DX (334B_1BAD / 0x3505D)
    SI = DX;
    // MOV DI,SI (334B_1BAF / 0x3505F)
    DI = SI;
    // MOV CX,BP (334B_1BB1 / 0x35061)
    CX = BP;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1BB3 / 0x35063)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOVSB ES:DI,SI (334B_1BB5 / 0x35065)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DX,0x140 (334B_1BB6 / 0x35066)
    // DX += 0x140;
    DX = Alu.Add16(DX, 0x140);
    // DEC AX (334B_1BBA / 0x3506A)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:505d (334B_1BBB / 0x3506B)
    if(!ZeroFlag) {
      goto label_334B_1BAD_3505D;
    }
    label_334B_1BBD_3506D:
    // RETF  (334B_1BBD / 0x3506D)
    return FarRet();
    label_334B_1BBE_3506E:
    // MOV CX,AX (334B_1BBE / 0x3506E)
    CX = AX;
    label_334B_1BC0_35070:
    // MOV SI,DI (334B_1BC0 / 0x35070)
    SI = DI;
    // MOVSB ES:DI,SI (334B_1BC2 / 0x35072)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DI,0x13f (334B_1BC3 / 0x35073)
    // DI += 0x13F;
    DI = Alu.Add16(DI, 0x13F);
    // LOOP 0x3000:5070 (334B_1BC7 / 0x35077)
    if(--CX != 0) {
      goto label_334B_1BC0_35070;
    }
    // RETF  (334B_1BC9 / 0x35079)
    return FarRet();
  }
  
  public Action spice86_label_334B_1BCA_3507A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2507A: goto label_334B_1BCA_3507A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1BCA_3507A:
    // MOV BP,DI (334B_1BCA / 0x3507A)
    BP = DI;
    // AND BP,0x1ff (334B_1BCC / 0x3507C)
    // BP &= 0x1FF;
    BP = Alu.And16(BP, 0x1FF);
    // CALL 0x3000:40c0 (334B_1BD0 / 0x35080)
    NearCall(cs2, 0x1BD3, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV DX,CX (334B_1BD3 / 0x35083)
    DX = CX;
    // XOR DH,DH (334B_1BD5 / 0x35085)
    DH = 0;
    label_334B_1BD7_35087:
    // MOV CX,BP (334B_1BD7 / 0x35087)
    CX = BP;
    // PUSH DI (334B_1BD9 / 0x35089)
    Stack.Push(DI);
    label_334B_1BDA_3508A:
    // MOVSB ES:DI,SI (334B_1BDA / 0x3508A)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC DI (334B_1BDB / 0x3508B)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:508a (334B_1BDC / 0x3508C)
    if(--CX != 0) {
      goto label_334B_1BDA_3508A;
    }
    // POP DI (334B_1BDE / 0x3508E)
    DI = Stack.Pop();
    // ADD DI,0x280 (334B_1BDF / 0x3508F)
    // DI += 0x280;
    DI = Alu.Add16(DI, 0x280);
    // DEC DX (334B_1BE3 / 0x35093)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:5087 (334B_1BE4 / 0x35094)
    if(!ZeroFlag) {
      goto label_334B_1BD7_35087;
    }
    // RETF  (334B_1BE6 / 0x35096)
    return FarRet();
  }
  
  public Action spice86_label_334B_1BE7_35097(int gotoTarget) {
    switch(gotoTarget) {
      case 0x25097: goto label_334B_1BE7_35097;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1BE7_35097:
    // PUSH DS (334B_1BE7 / 0x35097)
    Stack.Push(DS);
    // MOV DS,SI (334B_1BE8 / 0x35098)
    DS = SI;
    // XOR SI,SI (334B_1BEA / 0x3509A)
    SI = 0;
    // MOV DI,SI (334B_1BEC / 0x3509C)
    DI = SI;
    // MOV CX,0x5f00 (334B_1BEE / 0x3509E)
    CX = 0x5F00;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1BF1 / 0x350A1)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP DS (334B_1BF3 / 0x350A3)
    DS = Stack.Pop();
    // RETF  (334B_1BF4 / 0x350A4)
    return FarRet();
  }
  
  public Action spice86_label_334B_1BF5_350A5(int gotoTarget) {
    switch(gotoTarget) {
      case 0x250A5: goto label_334B_1BF5_350A5;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1BF5_350A5:
    // CALL 0x3000:40c0 (334B_1BF5 / 0x350A5)
    NearCall(cs2, 0x1BF8, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV BX,AX (334B_1BF8 / 0x350A8)
    BX = AX;
    // MOV DX,CX (334B_1BFA / 0x350AA)
    DX = CX;
    // XOR CX,CX (334B_1BFC / 0x350AC)
    CX = 0;
    // MOV BP,DI (334B_1BFE / 0x350AE)
    BP = DI;
    // OR BH,BH (334B_1C00 / 0x350B0)
    // BH |= BH;
    BH = Alu.Or8(BH, BH);
    // JZ 0x3000:50cf (334B_1C02 / 0x350B2)
    if(ZeroFlag) {
      goto label_334B_1C1F_350CF;
    }
    label_334B_1C04_350B4:
    // MOV CL,DL (334B_1C04 / 0x350B4)
    CL = DL;
    // LODSB SI (334B_1C06 / 0x350B6)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,AL (334B_1C07 / 0x350B7)
    AH = AL;
    label_334B_1C09_350B9:
    // MOV AL,BL (334B_1C09 / 0x350B9)
    AL = BL;
    // SHL AH,1 (334B_1C0B / 0x350BB)
    // AH <<= 1;
    AH = Alu.Shl8(AH, 1);
    // JC 0x3000:50c1 (334B_1C0D / 0x350BD)
    if(CarryFlag) {
      goto label_334B_1C11_350C1;
    }
    // MOV AL,BH (334B_1C0F / 0x350BF)
    AL = BH;
    label_334B_1C11_350C1:
    // STOSB ES:DI (334B_1C11 / 0x350C1)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:50b9 (334B_1C12 / 0x350C2)
    if(--CX != 0) {
      goto label_334B_1C09_350B9;
    }
    // ADD BP,0x140 (334B_1C14 / 0x350C4)
    // BP += 0x140;
    BP = Alu.Add16(BP, 0x140);
    // MOV DI,BP (334B_1C18 / 0x350C8)
    DI = BP;
    // DEC DH (334B_1C1A / 0x350CA)
    DH = Alu.Dec8(DH);
    // JNZ 0x3000:50b4 (334B_1C1C / 0x350CC)
    if(!ZeroFlag) {
      goto label_334B_1C04_350B4;
    }
    // RETF  (334B_1C1E / 0x350CE)
    return FarRet();
    label_334B_1C1F_350CF:
    // MOV CL,DL (334B_1C1F / 0x350CF)
    CL = DL;
    // LODSB SI (334B_1C21 / 0x350D1)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,AL (334B_1C22 / 0x350D2)
    AH = AL;
    // MOV AL,BL (334B_1C24 / 0x350D4)
    AL = BL;
    label_334B_1C26_350D6:
    // SHL AH,1 (334B_1C26 / 0x350D6)
    // AH <<= 1;
    AH = Alu.Shl8(AH, 1);
    // JC 0x3000:50e8 (334B_1C28 / 0x350D8)
    if(CarryFlag) {
      goto label_334B_1C38_350E8;
    }
    // INC DI (334B_1C2A / 0x350DA)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:50d6 (334B_1C2B / 0x350DB)
    if(--CX != 0) {
      goto label_334B_1C26_350D6;
    }
    // ADD BP,0x140 (334B_1C2D / 0x350DD)
    // BP += 0x140;
    BP = Alu.Add16(BP, 0x140);
    // MOV DI,BP (334B_1C31 / 0x350E1)
    DI = BP;
    // DEC DH (334B_1C33 / 0x350E3)
    DH = Alu.Dec8(DH);
    // JNZ 0x3000:50cf (334B_1C35 / 0x350E5)
    if(!ZeroFlag) {
      goto label_334B_1C1F_350CF;
    }
    // RETF  (334B_1C37 / 0x350E7)
    return FarRet();
    label_334B_1C38_350E8:
    // STOSB ES:DI (334B_1C38 / 0x350E8)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:50d6 (334B_1C39 / 0x350E9)
    if(--CX != 0) {
      goto label_334B_1C26_350D6;
    }
    // ADD BP,0x140 (334B_1C3B / 0x350EB)
    // BP += 0x140;
    BP = Alu.Add16(BP, 0x140);
    // MOV DI,BP (334B_1C3F / 0x350EF)
    DI = BP;
    // DEC DH (334B_1C41 / 0x350F1)
    DH = Alu.Dec8(DH);
    // JNZ 0x3000:50cf (334B_1C43 / 0x350F3)
    if(!ZeroFlag) {
      goto label_334B_1C1F_350CF;
    }
    // RETF  (334B_1C45 / 0x350F5)
    return FarRet();
  }
  
  public Action spice86_label_334B_1C46_350F6(int gotoTarget) {
    switch(gotoTarget) {
      case 0x250F6: goto label_334B_1C46_350F6;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1C46_350F6:
    // MOV DX,word ptr [BP + 0x0] (334B_1C46 / 0x350F6)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1C49 / 0x350F9)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // CALL 0x3000:40c0 (334B_1C4C / 0x350FC)
    NearCall(cs2, 0x1C4F, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV CX,word ptr [BP + 0x4] (334B_1C4F / 0x350FF)
    CX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV AX,word ptr [BP + 0x6] (334B_1C52 / 0x35102)
    AX = UInt16[SS, (ushort)(BP + 0x6)];
    // SUB CX,DX (334B_1C55 / 0x35105)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // SUB AX,BX (334B_1C57 / 0x35107)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // XCHG SI,DI (334B_1C59 / 0x35109)
    ushort tmp_334B_1C59 = SI;
    SI = DI;
    DI = tmp_334B_1C59;
    // MOV DX,0x140 (334B_1C5B / 0x3510B)
    DX = 0x140;
    // SUB DX,CX (334B_1C5E / 0x3510E)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // PUSH DS (334B_1C60 / 0x35110)
    Stack.Push(DS);
    // PUSH ES (334B_1C61 / 0x35111)
    Stack.Push(ES);
    // POP DS (334B_1C62 / 0x35112)
    DS = Stack.Pop();
    // POP ES (334B_1C63 / 0x35113)
    ES = Stack.Pop();
    label_334B_1C64_35114:
    // PUSH CX (334B_1C64 / 0x35114)
    Stack.Push(CX);
    // SHR CX,1 (334B_1C65 / 0x35115)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1C67 / 0x35117)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADC CX,CX (334B_1C69 / 0x35119)
    CX = Alu.Adc16(CX, CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_1C6B / 0x3511B)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP CX (334B_1C6D / 0x3511D)
    CX = Stack.Pop();
    // ADD SI,DX (334B_1C6E / 0x3511E)
    // SI += DX;
    SI = Alu.Add16(SI, DX);
    // DEC AX (334B_1C70 / 0x35120)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:5114 (334B_1C71 / 0x35121)
    if(!ZeroFlag) {
      goto label_334B_1C64_35114;
    }
    // PUSH SS (334B_1C73 / 0x35123)
    Stack.Push(SS);
    // POP DS (334B_1C74 / 0x35124)
    DS = Stack.Pop();
    // RETF  (334B_1C75 / 0x35125)
    return FarRet();
  }
  
  public Action spice86_label_334B_1C76_35126(int gotoTarget) {
    switch(gotoTarget) {
      case 0x25126: goto label_334B_1C76_35126;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1C76_35126:
    // MOV DX,word ptr [BP + 0x0] (334B_1C76 / 0x35126)
    DX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1C79 / 0x35129)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // CALL 0x3000:40c0 (334B_1C7C / 0x3512C)
    NearCall(cs2, 0x1C7F, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV CX,word ptr [BP + 0x4] (334B_1C7F / 0x3512F)
    CX = UInt16[SS, (ushort)(BP + 0x4)];
    // MOV AX,word ptr [BP + 0x6] (334B_1C82 / 0x35132)
    AX = UInt16[SS, (ushort)(BP + 0x6)];
    // SUB CX,DX (334B_1C85 / 0x35135)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // SUB AX,BX (334B_1C87 / 0x35137)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // MOV DX,0x140 (334B_1C89 / 0x35139)
    DX = 0x140;
    // SUB DX,CX (334B_1C8C / 0x3513C)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    label_334B_1C8E_3513E:
    // PUSH CX (334B_1C8E / 0x3513E)
    Stack.Push(CX);
    // SHR CX,1 (334B_1C8F / 0x3513F)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_1C91 / 0x35141)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADC CX,CX (334B_1C93 / 0x35143)
    CX = Alu.Adc16(CX, CX);
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_1C95 / 0x35145)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // POP CX (334B_1C97 / 0x35147)
    CX = Stack.Pop();
    // ADD DI,DX (334B_1C98 / 0x35148)
    // DI += DX;
    DI = Alu.Add16(DI, DX);
    // DEC AX (334B_1C9A / 0x3514A)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:513e (334B_1C9B / 0x3514B)
    if(!ZeroFlag) {
      goto label_334B_1C8E_3513E;
    }
    // PUSH SS (334B_1C9D / 0x3514D)
    Stack.Push(SS);
    // POP DS (334B_1C9E / 0x3514E)
    DS = Stack.Pop();
    // RETF  (334B_1C9F / 0x3514F)
    return FarRet();
  }
  
  public Action spice86_label_334B_1CB6_35166(int gotoTarget) {
    switch(gotoTarget) {
      case 0x25166: goto label_334B_1CB6_35166;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1CB6_35166:
    // OR AL,AL (334B_1CB6 / 0x35166)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // MOV AX,0x9090 (334B_1CB8 / 0x35168)
    AX = 0x9090;
    // JZ 0x3000:5170 (334B_1CBB / 0x3516B)
    if(ZeroFlag) {
      goto label_334B_1CC0_35170;
    }
    // MOV AX,0x7deb (334B_1CBD / 0x3516D)
    AX = 0x7DEB;
    label_334B_1CC0_35170:
    // MOV CS:[0x1e4a],AX (334B_1CC0 / 0x35170)
    UInt16[cs2, 0x1E4A] = AX;
    // MOV word ptr CS:[0x1ca0],SI (334B_1CC4 / 0x35174)
    UInt16[cs2, 0x1CA0] = SI;
    // MOV word ptr CS:[0x1ca2],DS (334B_1CC9 / 0x35179)
    UInt16[cs2, 0x1CA2] = DS;
    // MOV word ptr CS:[0x1ca4],BP (334B_1CCE / 0x3517E)
    UInt16[cs2, 0x1CA4] = BP;
    // ADD BP,0x319 (334B_1CD3 / 0x35183)
    // BP += 0x319;
    BP = Alu.Add16(BP, 0x319);
    // MOV word ptr CS:[0x1ca8],BP (334B_1CD7 / 0x35187)
    UInt16[cs2, 0x1CA8] = BP;
    // MOV DI,BP (334B_1CDC / 0x3518C)
    DI = BP;
    // MOV word ptr CS:[0x1ca6],BP (334B_1CDE / 0x3518E)
    UInt16[cs2, 0x1CA6] = BP;
    // ADD BP,0xcd9 (334B_1CE3 / 0x35193)
    // BP += 0xCD9;
    BP = Alu.Add16(BP, 0xCD9);
    // MOV word ptr CS:[0x1caa],BP (334B_1CE7 / 0x35197)
    UInt16[cs2, 0x1CAA] = BP;
    // ADD BP,0x3301 (334B_1CEC / 0x3519C)
    // BP += 0x3301;
    BP = Alu.Add16(BP, 0x3301);
    // MOV word ptr CS:[0x1cac],BP (334B_1CF0 / 0x351A0)
    UInt16[cs2, 0x1CAC] = BP;
    // MOV word ptr CS:[0x1cb4],0xfec0 (334B_1CF5 / 0x351A5)
    UInt16[cs2, 0x1CB4] = 0xFEC0;
    // PUSH CS (334B_1CFC / 0x351AC)
    Stack.Push(cs2);
    // CALL 0x3000:520a (334B_1CFD / 0x351AD)
    NearCall(cs2, 0x1D00, UnknownGlobeInitRelated_334B_1D5A_3520A);
    label_334B_1D00_351B0:
    // PUSH CS (334B_1D00 / 0x351B0)
    Stack.Push(cs2);
    // CALL 0x3000:51b7 (334B_1D01 / 0x351B1)
    NearCall(cs2, 0x1D04, UnknownGlobeRelated_334B_1D07_351B7);
    // JNC 0x3000:51b0 (334B_1D04 / 0x351B4)
    if(!CarryFlag) {
      goto label_334B_1D00_351B0;
    }
    // RETF  (334B_1D06 / 0x351B6)
    return FarRet();
  }
  
  public Action UnknownGlobeRelated_334B_1D07_351B7(int gotoTarget) {
    switch(gotoTarget) {
      case 0x251B7: goto label_334B_1D07_351B7;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1D07_351B7:
    // MOV DS,word ptr CS:[0x1ca2] (334B_1D07 / 0x351B7)
    DS = UInt16[cs2, 0x1CA2];
    // MOV DI,word ptr CS:[0x1ca6] (334B_1D0C / 0x351BC)
    DI = UInt16[cs2, 0x1CA6];
    // MOV AL,byte ptr SS:[DI] (334B_1D11 / 0x351C1)
    AL = UInt8[SS, DI];
    // XOR AH,AH (334B_1D14 / 0x351C4)
    AH = 0;
    // INC DI (334B_1D16 / 0x351C6)
    DI = Alu.Inc16(DI);
    // OR AL,AL (334B_1D17 / 0x351C7)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JNS 0x3000:5202 (334B_1D19 / 0x351C9)
    if(!SignFlag) {
      goto label_334B_1D52_35202;
    }
    // MOV DI,word ptr CS:[0x1ca8] (334B_1D1B / 0x351CB)
    DI = UInt16[cs2, 0x1CA8];
    // NEG word ptr CS:[0x1cb4] (334B_1D20 / 0x351D0)
    UInt16[cs2, 0x1CB4] = Alu.Sub16(0, UInt16[cs2, 0x1CB4]);
    // JS 0x3000:520a (334B_1D25 / 0x351D5)
    if(SignFlag) {
      // Jump converted to entry function call
      return UnknownGlobeInitRelated_334B_1D5A_3520A(0);
    }
    // MOV word ptr CS:[0x1ea6],0xfedb (334B_1D27 / 0x351D7)
    UInt16[cs2, 0x1EA6] = 0xFEDB;
    // MOV word ptr CS:[0x1f29],0xfe58 (334B_1D2E / 0x351DE)
    UInt16[cs2, 0x1F29] = 0xFE58;
    // MOV AX,0x64a0 (334B_1D35 / 0x351E5)
    AX = 0x64A0;
    // MOV CS:[0x1cb0],AX (334B_1D38 / 0x351E8)
    UInt16[cs2, 0x1CB0] = AX;
    // MOV CS:[0x1cb2],AX (334B_1D3C / 0x351EC)
    UInt16[cs2, 0x1CB2] = AX;
    // DEC AX (334B_1D40 / 0x351F0)
    AX = Alu.Dec16(AX);
    // MOV CS:[0x1cae],AX (334B_1D41 / 0x351F1)
    UInt16[cs2, 0x1CAE] = AX;
    // MOV AL,byte ptr SS:[DI + -0x1] (334B_1D45 / 0x351F5)
    AL = UInt8[SS, (ushort)(DI - 0x1)];
    // CBW  (334B_1D49 / 0x351F9)
    AX = (ushort)((short)((sbyte)AL));
    // SUB DI,AX (334B_1D4A / 0x351FA)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV AL,byte ptr SS:[DI] (334B_1D4C / 0x351FC)
    AL = UInt8[SS, DI];
    // XOR AH,AH (334B_1D4F / 0x351FF)
    AH = 0;
    // INC DI (334B_1D51 / 0x35201)
    DI = Alu.Inc16(DI);
    label_334B_1D52_35202:
    // MOV SI,word ptr CS:[0x1caa] (334B_1D52 / 0x35202)
    SI = UInt16[cs2, 0x1CAA];
    // JMP 0x3000:5355 (334B_1D57 / 0x35207)
    // JMP target is JMP, inlining.
    // JMP 0x3000:5235 (334B_1EA5 / 0x35355)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_1D5A_3520A, 334B_1D27_351D7, 334B_1D5F_3520F
    goto label_334B_1D85_35235;
    label_334B_1D85_35235:
    // ADD AX,AX (334B_1D85 / 0x35235)
    // AX += AX;
    AX = Alu.Add16(AX, AX);
    // MOV BP,word ptr CS:[0x1cac] (334B_1D87 / 0x35237)
    BP = UInt16[cs2, 0x1CAC];
    // ADD BP,AX (334B_1D8C / 0x3523C)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // MOV AX,word ptr [BP + 0x0] (334B_1D8E / 0x3523E)
    AX = UInt16[SS, BP];
    // OR AX,AX (334B_1D91 / 0x35241)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x3000:5293 (334B_1D93 / 0x35243)
    if(SignFlag) {
      goto label_334B_1DE3_35293;
    }
    // CBW  (334B_1D95 / 0x35245)
    AX = (ushort)((short)((sbyte)AL));
    // OR AX,AX (334B_1D96 / 0x35246)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x3000:5272 (334B_1D98 / 0x35248)
    if(!SignFlag) {
      goto label_334B_1DC2_35272;
    }
    // NEG AX (334B_1D9A / 0x3524A)
    AX = Alu.Sub16(0, AX);
    // MOV BP,AX (334B_1D9C / 0x3524C)
    BP = AX;
    // MOV BL,byte ptr [BP + SI] (334B_1D9E / 0x3524E)
    BL = UInt8[SS, (ushort)(BP + SI)];
    // MOV AL,byte ptr [BP + SI + 0x64] (334B_1DA0 / 0x35250)
    AL = UInt8[SS, (ushort)(BP + SI + 0x64)];
    // XOR AH,AH (334B_1DA3 / 0x35253)
    AH = 0;
    // MOV BH,AH (334B_1DA5 / 0x35255)
    BH = AH;
    // SHL BX,1 (334B_1DA7 / 0x35257)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_1DA9 / 0x35259)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV BP,word ptr CS:[0x1ca4] (334B_1DAB / 0x3525B)
    BP = UInt16[cs2, 0x1CA4];
    // ADD BP,BX (334B_1DB0 / 0x35260)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // MOV BX,word ptr [BP + 0x0] (334B_1DB2 / 0x35262)
    BX = UInt16[SS, BP];
    // MOV CX,word ptr [BP + 0x2] (334B_1DB5 / 0x35265)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DX,word ptr [BP + 0x4] (334B_1DB8 / 0x35268)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // NEG AX (334B_1DBB / 0x3526B)
    AX = Alu.Sub16(0, AX);
    // ADD AX,CX (334B_1DBD / 0x3526D)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // JMP 0x3000:52e2 (334B_1DBF / 0x3526F)
    goto label_334B_1E32_352E2;
    label_334B_1DC2_35272:
    // MOV BP,AX (334B_1DC2 / 0x35272)
    BP = AX;
    // MOV BL,byte ptr [BP + SI] (334B_1DC4 / 0x35274)
    BL = UInt8[SS, (ushort)(BP + SI)];
    // MOV AL,byte ptr [BP + SI + 0x64] (334B_1DC6 / 0x35276)
    AL = UInt8[SS, (ushort)(BP + SI + 0x64)];
    // XOR AH,AH (334B_1DC9 / 0x35279)
    AH = 0;
    // MOV BH,AH (334B_1DCB / 0x3527B)
    BH = AH;
    // SHL BX,1 (334B_1DCD / 0x3527D)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_1DCF / 0x3527F)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV BP,word ptr CS:[0x1ca4] (334B_1DD1 / 0x35281)
    BP = UInt16[cs2, 0x1CA4];
    // ADD BP,BX (334B_1DD6 / 0x35286)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // MOV BX,word ptr [BP + 0x0] (334B_1DD8 / 0x35288)
    BX = UInt16[SS, BP];
    // MOV CX,word ptr [BP + 0x2] (334B_1DDB / 0x3528B)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DX,word ptr [BP + 0x4] (334B_1DDE / 0x3528E)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // JMP 0x3000:52e2 (334B_1DE1 / 0x35291)
    goto label_334B_1E32_352E2;
    label_334B_1DE3_35293:
    // CBW  (334B_1DE3 / 0x35293)
    AX = (ushort)((short)((sbyte)AL));
    // OR AX,AX (334B_1DE4 / 0x35294)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x3000:52c1 (334B_1DE6 / 0x35296)
    if(!SignFlag) {
      goto label_334B_1E11_352C1;
    }
    // NEG AX (334B_1DE8 / 0x35298)
    AX = Alu.Sub16(0, AX);
    // MOV BP,AX (334B_1DEA / 0x3529A)
    BP = AX;
    // MOV BL,byte ptr [BP + SI] (334B_1DEC / 0x3529C)
    BL = UInt8[SS, (ushort)(BP + SI)];
    // MOV AL,byte ptr [BP + SI + 0x64] (334B_1DEE / 0x3529E)
    AL = UInt8[SS, (ushort)(BP + SI + 0x64)];
    // XOR AH,AH (334B_1DF1 / 0x352A1)
    AH = 0;
    // MOV BH,AH (334B_1DF3 / 0x352A3)
    BH = AH;
    // SHL BX,1 (334B_1DF5 / 0x352A5)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_1DF7 / 0x352A7)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV BP,word ptr CS:[0x1ca4] (334B_1DF9 / 0x352A9)
    BP = UInt16[cs2, 0x1CA4];
    // ADD BP,BX (334B_1DFE / 0x352AE)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // MOV BX,word ptr [BP + 0x0] (334B_1E00 / 0x352B0)
    BX = UInt16[SS, BP];
    // MOV CX,word ptr [BP + 0x2] (334B_1E03 / 0x352B3)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DX,word ptr [BP + 0x4] (334B_1E06 / 0x352B6)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // NEG AX (334B_1E09 / 0x352B9)
    AX = Alu.Sub16(0, AX);
    // ADD AX,CX (334B_1E0B / 0x352BB)
    // AX += CX;
    AX = Alu.Add16(AX, CX);
    // NEG BX (334B_1E0D / 0x352BD)
    BX = Alu.Sub16(0, BX);
    // JMP 0x3000:52e2 (334B_1E0F / 0x352BF)
    goto label_334B_1E32_352E2;
    label_334B_1E11_352C1:
    // MOV BP,AX (334B_1E11 / 0x352C1)
    BP = AX;
    // MOV BL,byte ptr [BP + SI] (334B_1E13 / 0x352C3)
    BL = UInt8[SS, (ushort)(BP + SI)];
    // MOV AL,byte ptr [BP + SI + 0x64] (334B_1E15 / 0x352C5)
    AL = UInt8[SS, (ushort)(BP + SI + 0x64)];
    // XOR AH,AH (334B_1E18 / 0x352C8)
    AH = 0;
    // MOV BH,AH (334B_1E1A / 0x352CA)
    BH = AH;
    // SHL BX,1 (334B_1E1C / 0x352CC)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // SHL BX,1 (334B_1E1E / 0x352CE)
    // BX <<= 1;
    BX = Alu.Shl16(BX, 1);
    // MOV BP,word ptr CS:[0x1ca4] (334B_1E20 / 0x352D0)
    BP = UInt16[cs2, 0x1CA4];
    // ADD BP,BX (334B_1E25 / 0x352D5)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // MOV BX,word ptr [BP + 0x0] (334B_1E27 / 0x352D7)
    BX = UInt16[SS, BP];
    // MOV CX,word ptr [BP + 0x2] (334B_1E2A / 0x352DA)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DX,word ptr [BP + 0x4] (334B_1E2D / 0x352DD)
    DX = UInt16[SS, (ushort)(BP + 0x4)];
    // NEG BX (334B_1E30 / 0x352E0)
    BX = Alu.Sub16(0, BX);
    label_334B_1E32_352E2:
    // ADD CX,CX (334B_1E32 / 0x352E2)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // MOV BP,DX (334B_1E34 / 0x352E4)
    BP = DX;
    // SUB BP,AX (334B_1E36 / 0x352E6)
    // BP -= AX;
    BP = Alu.Sub16(BP, AX);
    // JNS 0x3000:52ec (334B_1E38 / 0x352E8)
    if(!SignFlag) {
      goto label_334B_1E3C_352EC;
    }
    // ADD BP,CX (334B_1E3A / 0x352EA)
    // BP += CX;
    BP = Alu.Add16(BP, CX);
    label_334B_1E3C_352EC:
    // ADD BP,BX (334B_1E3C / 0x352EC)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // ADD DX,AX (334B_1E3E / 0x352EE)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // PUSH SI (334B_1E40 / 0x352F0)
    Stack.Push(SI);
    // PUSH DI (334B_1E41 / 0x352F1)
    Stack.Push(DI);
    // MOV SI,word ptr CS:[0x1ca0] (334B_1E42 / 0x352F2)
    SI = UInt16[cs2, 0x1CA0];
    // MOV AL,byte ptr DS:[BP + SI] (334B_1E47 / 0x352F7)
    AL = UInt8[DS, (ushort)(BP + SI)];
    // NOP  (334B_1E4A / 0x352FA)
    // Instruction bytes at index 0 modified by those instruction(s): 334B_1CC0_35170
    
    // NOP  (334B_1E4B / 0x352FB)
    // Instruction bytes at index 0 modified by those instruction(s): 334B_1CC0_35170
    
    // MOV AH,AL (334B_1E4C / 0x352FC)
    AH = AL;
    // AND AX,0x300f (334B_1E4E / 0x352FE)
    // AX &= 0x300F;
    AX = Alu.And16(AX, 0x300F);
    // CMP AH,0x10 (334B_1E51 / 0x35301)
    Alu.Sub8(AH, 0x10);
    // JNZ 0x3000:530c (334B_1E54 / 0x35304)
    if(!ZeroFlag) {
      goto label_334B_1E5C_3530C;
    }
    // CMP AL,0x8 (334B_1E56 / 0x35306)
    Alu.Sub8(AL, 0x8);
    // JNC 0x3000:530c (334B_1E58 / 0x35308)
    if(!CarryFlag) {
      goto label_334B_1E5C_3530C;
    }
    // ADD AL,0xc (334B_1E5A / 0x3530A)
    // AL += 0xC;
    AL = Alu.Add8(AL, 0xC);
    label_334B_1E5C_3530C:
    // ADD AL,0x10 (334B_1E5C / 0x3530C)
    // AL += 0x10;
    AL = Alu.Add8(AL, 0x10);
    // MOV DI,word ptr CS:[0x1cae] (334B_1E5E / 0x3530E)
    DI = UInt16[cs2, 0x1CAE];
    // STD  (334B_1E63 / 0x35313)
    DirectionFlag = true;
    // STOSB ES:DI (334B_1E64 / 0x35314)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CLD  (334B_1E65 / 0x35315)
    DirectionFlag = false;
    // MOV word ptr CS:[0x1cae],DI (334B_1E66 / 0x35316)
    UInt16[cs2, 0x1CAE] = DI;
    // MOV BP,DX (334B_1E6B / 0x3531B)
    BP = DX;
    // SUB BP,CX (334B_1E6D / 0x3531D)
    // BP -= CX;
    BP = Alu.Sub16(BP, CX);
    // JNS 0x3000:5323 (334B_1E6F / 0x3531F)
    if(!SignFlag) {
      goto label_334B_1E73_35323;
    }
    // ADD BP,CX (334B_1E71 / 0x35321)
    // BP += CX;
    BP = Alu.Add16(BP, CX);
    label_334B_1E73_35323:
    // ADD BP,BX (334B_1E73 / 0x35323)
    // BP += BX;
    BP = Alu.Add16(BP, BX);
    // MOV AL,byte ptr DS:[BP + SI] (334B_1E75 / 0x35325)
    AL = UInt8[DS, (ushort)(BP + SI)];
    // MOV AH,AL (334B_1E78 / 0x35328)
    AH = AL;
    // AND AX,0x300f (334B_1E7A / 0x3532A)
    // AX &= 0x300F;
    AX = Alu.And16(AX, 0x300F);
    // CMP AH,0x10 (334B_1E7D / 0x3532D)
    Alu.Sub8(AH, 0x10);
    // JNZ 0x3000:5338 (334B_1E80 / 0x35330)
    if(!ZeroFlag) {
      goto label_334B_1E88_35338;
    }
    // CMP AL,0x8 (334B_1E82 / 0x35332)
    Alu.Sub8(AL, 0x8);
    // JNC 0x3000:5338 (334B_1E84 / 0x35334)
    if(!CarryFlag) {
      goto label_334B_1E88_35338;
    }
    // ADD AL,0xc (334B_1E86 / 0x35336)
    // AL += 0xC;
    AL = Alu.Add8(AL, 0xC);
    label_334B_1E88_35338:
    // ADD AL,0x10 (334B_1E88 / 0x35338)
    // AL += 0x10;
    AL = Alu.Add8(AL, 0x10);
    // MOV DI,word ptr CS:[0x1cb0] (334B_1E8A / 0x3533A)
    DI = UInt16[cs2, 0x1CB0];
    // STOSB ES:DI (334B_1E8F / 0x3533F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV word ptr CS:[0x1cb0],DI (334B_1E90 / 0x35340)
    UInt16[cs2, 0x1CB0] = DI;
    // POP DI (334B_1E95 / 0x35345)
    DI = Stack.Pop();
    // POP SI (334B_1E96 / 0x35346)
    SI = Stack.Pop();
    // ADD SI,0xc8 (334B_1E97 / 0x35347)
    // SI += 0xC8;
    SI = Alu.Add16(SI, 0xC8);
    // MOV AL,byte ptr SS:[DI] (334B_1E9B / 0x3534B)
    AL = UInt8[SS, DI];
    // XOR AH,AH (334B_1E9E / 0x3534E)
    AH = 0;
    // INC DI (334B_1EA0 / 0x35350)
    DI = Alu.Inc16(DI);
    // OR AL,AL (334B_1EA1 / 0x35351)
    // AL |= AL;
    AL = Alu.Or8(AL, AL);
    // JS 0x3000:5358 (334B_1EA3 / 0x35353)
    if(SignFlag) {
      goto label_334B_1EA8_35358;
    }
    label_334B_1EA5_35355:
    // JMP 0x3000:5235 (334B_1EA5 / 0x35355)
    // Instruction bytes at index 1, 2 modified by those instruction(s): 334B_1D5A_3520A, 334B_1D27_351D7, 334B_1D5F_3520F
    goto label_334B_1D85_35235;
    label_334B_1EA8_35358:
    // MOV word ptr CS:[0x1ca6],DI (334B_1EA8 / 0x35358)
    UInt16[cs2, 0x1CA6] = DI;
    // MOV AX,CS:[0x1cb4] (334B_1EAD / 0x3535D)
    AX = UInt16[cs2, 0x1CB4];
    // ADD AX,word ptr CS:[0x1cb2] (334B_1EB1 / 0x35361)
    // AX += UInt16[cs2, 0x1CB2];
    AX = Alu.Add16(AX, UInt16[cs2, 0x1CB2]);
    // MOV CS:[0x1cb2],AX (334B_1EB6 / 0x35366)
    UInt16[cs2, 0x1CB2] = AX;
    // MOV CS:[0x1cb0],AX (334B_1EBA / 0x3536A)
    UInt16[cs2, 0x1CB0] = AX;
    // DEC AX (334B_1EBE / 0x3536E)
    AX = Alu.Dec16(AX);
    // MOV CS:[0x1cae],AX (334B_1EBF / 0x3536F)
    UInt16[cs2, 0x1CAE] = AX;
    // CLC  (334B_1EC3 / 0x35373)
    CarryFlag = false;
    // MOV AX,SS (334B_1EC4 / 0x35374)
    AX = SS;
    // MOV DS,AX (334B_1EC6 / 0x35376)
    DS = AX;
    // RETF  (334B_1EC8 / 0x35378)
    return FarRet();
  }
  
  public Action UnknownGlobeInitRelated_334B_1D5A_3520A(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2520A: goto label_334B_1D5A_3520A;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1D5A_3520A:
    // MOV word ptr CS:[0x1ca6],DI (334B_1D5A / 0x3520A)
    UInt16[cs2, 0x1CA6] = DI;
    // MOV word ptr CS:[0x1ea6],0xfedd (334B_1D5F / 0x3520F)
    UInt16[cs2, 0x1EA6] = 0xFEDD;
    // MOV word ptr CS:[0x1f29],0xfe5a (334B_1D66 / 0x35216)
    UInt16[cs2, 0x1F29] = 0xFE5A;
    // MOV AX,0x6360 (334B_1D6D / 0x3521D)
    AX = 0x6360;
    // MOV CS:[0x1cb0],AX (334B_1D70 / 0x35220)
    UInt16[cs2, 0x1CB0] = AX;
    // MOV CS:[0x1cb2],AX (334B_1D74 / 0x35224)
    UInt16[cs2, 0x1CB2] = AX;
    // DEC AX (334B_1D78 / 0x35228)
    AX = Alu.Dec16(AX);
    // MOV CS:[0x1cae],AX (334B_1D79 / 0x35229)
    UInt16[cs2, 0x1CAE] = AX;
    // MOV AX,SS (334B_1D7D / 0x3522D)
    AX = SS;
    // MOV DS,AX (334B_1D7F / 0x3522F)
    DS = AX;
    // STC  (334B_1D81 / 0x35231)
    CarryFlag = true;
    // RETF  (334B_1D82 / 0x35232)
    return FarRet();
  }
  
  public Action spice86_label_334B_1F4C_353FC(int gotoTarget) {
    switch(gotoTarget) {
      case 0x253FC: goto label_334B_1F4C_353FC;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_1F4C_353FC:
    // MOV word ptr CS:[0x1a7],DI (334B_1F4C / 0x353FC)
    UInt16[cs2, 0x1A7] = DI;
    // MOV word ptr CS:[0x1a9],ES (334B_1F51 / 0x35401)
    UInt16[cs2, 0x1A9] = ES;
    // MOV word ptr CS:[0x1bb],BP (334B_1F56 / 0x35406)
    UInt16[cs2, 0x1BB] = BP;
    // MOV word ptr CS:[0x1a5],SI (334B_1F5B / 0x3540B)
    UInt16[cs2, 0x1A5] = SI;
    // MOV word ptr CS:[0x1b7],0x24 (334B_1F60 / 0x35410)
    UInt16[cs2, 0x1B7] = 0x24;
    // MOV word ptr CS:[0x1ab],BX (334B_1F67 / 0x35417)
    UInt16[cs2, 0x1AB] = BX;
    // MOV word ptr CS:[0x1cb2],0x504 (334B_1F6C / 0x3541C)
    UInt16[cs2, 0x1CB2] = 0x504;
    // SHL AX,1 (334B_1F73 / 0x35423)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_1F75 / 0x35425)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // SHL AX,1 (334B_1F77 / 0x35427)
    // AX <<= 1;
    AX = Alu.Shl16(AX, 1);
    // JNS 0x3000:5493 (334B_1F79 / 0x35429)
    if(!SignFlag) {
      goto label_334B_1FE3_35493;
    }
    // NEG AX (334B_1F7B / 0x3542B)
    AX = Alu.Sub16(0, AX);
    // ADD BP,AX (334B_1F7D / 0x3542D)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // MOV CX,word ptr [BP + 0x0] (334B_1F7F / 0x3542F)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1F82 / 0x35432)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // NEG CX (334B_1F85 / 0x35435)
    CX = Alu.Sub16(0, CX);
    // MOV DI,word ptr CS:[0x1a5] (334B_1F87 / 0x35437)
    DI = UInt16[cs2, 0x1A5];
    // MOV word ptr CS:[0x1b9],0x8f7 (334B_1F8C / 0x3543C)
    UInt16[cs2, 0x1B9] = 0x8F7;
    // ADD word ptr CS:[0x1bb],0x2b0 (334B_1F93 / 0x35443)
    // UInt16[cs2, 0x1BB] += 0x2B0;
    UInt16[cs2, 0x1BB] = Alu.Add16(UInt16[cs2, 0x1BB], 0x2B0);
    // ADD DI,0x8c (334B_1F9A / 0x3544A)
    // DI += 0x8C;
    DI = Alu.Add16(DI, 0x8C);
    // CALL 0x3000:54d5 (334B_1F9E / 0x3544E)
    NearCall(cs2, 0x1FA1, UnknownMapRelated_334B_2025_354D5);
    label_334B_1FA1_35451:
    // SUB BP,0x8 (334B_1FA1 / 0x35451)
    // BP -= 0x8;
    BP = Alu.Sub16(BP, 0x8);
    // MOV CX,word ptr [BP + 0x0] (334B_1FA4 / 0x35454)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1FA7 / 0x35457)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // NEG CX (334B_1FAA / 0x3545A)
    CX = Alu.Sub16(0, CX);
    // JZ 0x3000:5475 (334B_1FAC / 0x3545C)
    if(ZeroFlag) {
      goto label_334B_1FC5_35475;
    }
    // MOV DI,word ptr CS:[0x1a5] (334B_1FAE / 0x3545E)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0x6cc (334B_1FB3 / 0x35463)
    // DI += 0x6CC;
    DI = Alu.Add16(DI, 0x6CC);
    // CALL 0x3000:54d5 (334B_1FB7 / 0x35467)
    NearCall(cs2, 0x1FBA, UnknownMapRelated_334B_2025_354D5);
    // CALL 0x3000:55d3 (334B_1FBA / 0x3546A)
    NearCall(cs2, 0x1FBD, unknown_334B_2123_355D3);
    // DEC word ptr CS:[0x1b7] (334B_1FBD / 0x3546D)
    UInt16[cs2, 0x1B7] = Alu.Dec16(UInt16[cs2, 0x1B7]);
    // JNZ 0x3000:5451 (334B_1FC2 / 0x35472)
    if(!ZeroFlag) {
      goto label_334B_1FA1_35451;
    }
    // RETF  (334B_1FC4 / 0x35474)
    return FarRet();
    label_334B_1FC5_35475:
    // MOV DI,word ptr CS:[0x1a5] (334B_1FC5 / 0x35475)
    DI = UInt16[cs2, 0x1A5];
    // MOV word ptr CS:[0x1b9],0x92f (334B_1FCA / 0x3547A)
    UInt16[cs2, 0x1B9] = 0x92F;
    // ADD word ptr CS:[0x1bb],0x8 (334B_1FD1 / 0x35481)
    // UInt16[cs2, 0x1BB] += 0x8;
    UInt16[cs2, 0x1BB] = Alu.Add16(UInt16[cs2, 0x1BB], 0x8);
    // ADD DI,0x6cc (334B_1FD7 / 0x35487)
    // DI += 0x6CC;
    DI = Alu.Add16(DI, 0x6CC);
    // CALL 0x3000:54d5 (334B_1FDB / 0x3548B)
    NearCall(cs2, 0x1FDE, UnknownMapRelated_334B_2025_354D5);
    // CALL 0x3000:55d3 (334B_1FDE / 0x3548E)
    NearCall(cs2, 0x1FE1, unknown_334B_2123_355D3);
    // JMP 0x3000:54cd (334B_1FE1 / 0x35491)
    goto label_334B_201D_354CD;
    label_334B_1FE3_35493:
    // ADD BP,AX (334B_1FE3 / 0x35493)
    // BP += AX;
    BP = Alu.Add16(BP, AX);
    // MOV CX,word ptr [BP + 0x0] (334B_1FE5 / 0x35495)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_1FE8 / 0x35498)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DI,word ptr CS:[0x1a5] (334B_1FEB / 0x3549B)
    DI = UInt16[cs2, 0x1A5];
    // MOV word ptr CS:[0x1b9],0x92f (334B_1FF0 / 0x354A0)
    UInt16[cs2, 0x1B9] = 0x92F;
    // ADD word ptr CS:[0x1bb],0x2b8 (334B_1FF7 / 0x354A7)
    // UInt16[cs2, 0x1BB] += 0x2B8;
    UInt16[cs2, 0x1BB] = Alu.Add16(UInt16[cs2, 0x1BB], 0x2B8);
    // ADD DI,0x8c (334B_1FFE / 0x354AE)
    // DI += 0x8C;
    DI = Alu.Add16(DI, 0x8C);
    // CALL 0x3000:54d5 (334B_2002 / 0x354B2)
    NearCall(cs2, 0x2005, UnknownMapRelated_334B_2025_354D5);
    label_334B_2005_354B5:
    // ADD BP,0x8 (334B_2005 / 0x354B5)
    // BP += 0x8;
    BP = Alu.Add16(BP, 0x8);
    // MOV CX,word ptr [BP + 0x0] (334B_2008 / 0x354B8)
    CX = UInt16[SS, BP];
    // MOV BX,word ptr [BP + 0x2] (334B_200B / 0x354BB)
    BX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DI,word ptr CS:[0x1a5] (334B_200E / 0x354BE)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0x6cc (334B_2013 / 0x354C3)
    // DI += 0x6CC;
    DI = Alu.Add16(DI, 0x6CC);
    // CALL 0x3000:54d5 (334B_2017 / 0x354C7)
    NearCall(cs2, 0x201A, UnknownMapRelated_334B_2025_354D5);
    // CALL 0x3000:5603 (334B_201A / 0x354CA)
    NearCall(cs2, 0x201D, unknown_334B_2153_35603);
    label_334B_201D_354CD:
    // DEC word ptr CS:[0x1b7] (334B_201D / 0x354CD)
    UInt16[cs2, 0x1B7] = Alu.Dec16(UInt16[cs2, 0x1B7]);
    // JNZ 0x3000:54b5 (334B_2022 / 0x354D2)
    if(!ZeroFlag) {
      goto label_334B_2005_354B5;
    }
    // RETF  (334B_2024 / 0x354D4)
    return FarRet();
  }
  
  public Action UnknownMapRelated_334B_2025_354D5(int gotoTarget) {
    label_334B_2025_354D5:
    // PUSH DX (334B_2025 / 0x354D5)
    Stack.Push(DX);
    // PUSH DS (334B_2026 / 0x354D6)
    Stack.Push(DS);
    // LDS SI,CS:[0x1a7] (334B_2027 / 0x354D7)
    SI = UInt16[cs2, 0x1A7];
    DS = UInt16[cs2, 0x1A9];
    // MOV AX,SS (334B_202C / 0x354DC)
    AX = SS;
    // MOV ES,AX (334B_202E / 0x354DE)
    ES = AX;
    // ADD SI,CX (334B_2030 / 0x354E0)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // ADD BX,BX (334B_2032 / 0x354E2)
    // BX += BX;
    BX = Alu.Add16(BX, BX);
    // MOV AX,DX (334B_2034 / 0x354E4)
    AX = DX;
    // MUL BX (334B_2036 / 0x354E6)
    Cpu.Mul16(BX);
    // MOV word ptr [BP + 0x4],DX (334B_2038 / 0x354E8)
    UInt16[SS, (ushort)(BP + 0x4)] = DX;
    // ROL AX,1 (334B_203B / 0x354EB)
    AX = Alu.Rol16(AX, 1);
    // ROL AX,1 (334B_203D / 0x354ED)
    AX = Alu.Rol16(AX, 1);
    // AND AX,0x3 (334B_203F / 0x354EF)
    // AX &= 0x3;
    AX = Alu.And16(AX, 0x3);
    // SUB DI,AX (334B_2042 / 0x354F2)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV AX,DX (334B_2044 / 0x354F4)
    AX = DX;
    // MOV CX,0x58 (334B_2046 / 0x354F6)
    CX = 0x58;
    // CMP BX,CX (334B_2049 / 0x354F9)
    Alu.Sub16(BX, CX);
    // JNC 0x3000:5529 (334B_204B / 0x354FB)
    if(!CarryFlag) {
      goto label_334B_2079_35529;
    }
    // SUB CX,BX (334B_204D / 0x354FD)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // SHL CX,1 (334B_204F / 0x354FF)
    // CX <<= 1;
    CX = Alu.Shl16(CX, 1);
    // ADD DI,CX (334B_2051 / 0x35501)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // MOV CX,BX (334B_2053 / 0x35503)
    CX = BX;
    // SHR CX,1 (334B_2055 / 0x35505)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SUB AX,CX (334B_2057 / 0x35507)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // JNS 0x3000:550d (334B_2059 / 0x35509)
    if(!SignFlag) {
      goto label_334B_205D_3550D;
    }
    // ADD AX,BX (334B_205B / 0x3550B)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    label_334B_205D_3550D:
    // MOV CX,BX (334B_205D / 0x3550D)
    CX = BX;
    // SUB BX,AX (334B_205F / 0x3550F)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // INC CX (334B_2061 / 0x35511)
    CX = Alu.Inc16(CX);
    // SUB CX,BX (334B_2062 / 0x35512)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // JNS 0x3000:554e (334B_2064 / 0x35514)
    if(!SignFlag) {
      goto label_334B_209E_3554E;
    }
    // ADD CX,BX (334B_2066 / 0x35516)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // ADD SI,AX (334B_2068 / 0x35518)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV AL,byte ptr [SI + -0x1] (334B_206A / 0x3551A)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // STC  (334B_206D / 0x3551D)
    CarryFlag = true;
    // ADC AL,AL (334B_206E / 0x3551E)
    AL = Alu.Adc8(AL, AL);
    // ADD AL,AL (334B_2070 / 0x35520)
    // AL += AL;
    AL = Alu.Add8(AL, AL);
    // SHL AL,1 (334B_2072 / 0x35522)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (334B_2074 / 0x35524)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JMP 0x3000:559b (334B_2076 / 0x35526)
    goto label_334B_20EB_3559B;
    label_334B_2079_35529:
    // SHR CX,1 (334B_2079 / 0x35529)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SUB AX,CX (334B_207B / 0x3552B)
    // AX -= CX;
    AX = Alu.Sub16(AX, CX);
    // JNS 0x3000:5531 (334B_207D / 0x3552D)
    if(!SignFlag) {
      goto label_334B_2081_35531;
    }
    // ADD AX,BX (334B_207F / 0x3552F)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    label_334B_2081_35531:
    // SUB BX,AX (334B_2081 / 0x35531)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // MOV CX,0x58 (334B_2083 / 0x35533)
    CX = 0x58;
    // INC CX (334B_2086 / 0x35536)
    CX = Alu.Inc16(CX);
    // SUB CX,BX (334B_2087 / 0x35537)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // JNS 0x3000:554e (334B_2089 / 0x35539)
    if(!SignFlag) {
      goto label_334B_209E_3554E;
    }
    // ADD CX,BX (334B_208B / 0x3553B)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // ADD SI,AX (334B_208D / 0x3553D)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV AL,byte ptr [SI + -0x1] (334B_208F / 0x3553F)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // STC  (334B_2092 / 0x35542)
    CarryFlag = true;
    // ADC AL,AL (334B_2093 / 0x35543)
    AL = Alu.Adc8(AL, AL);
    // ADD AL,AL (334B_2095 / 0x35545)
    // AL += AL;
    AL = Alu.Add8(AL, AL);
    // SHL AL,1 (334B_2097 / 0x35547)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (334B_2099 / 0x35549)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // JMP 0x3000:559b (334B_209B / 0x3554B)
    goto label_334B_20EB_3559B;
    label_334B_209E_3554E:
    // OR BX,BX (334B_209E / 0x3554E)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JZ 0x3000:559b (334B_20A0 / 0x35550)
    if(ZeroFlag) {
      goto label_334B_20EB_3559B;
    }
    // XCHG BX,CX (334B_20A2 / 0x35552)
    ushort tmp_334B_20A2 = BX;
    BX = CX;
    CX = tmp_334B_20A2;
    // PUSH SI (334B_20A4 / 0x35554)
    Stack.Push(SI);
    // ADD SI,AX (334B_20A5 / 0x35555)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // MOV AL,byte ptr [SI + -0x1] (334B_20A7 / 0x35557)
    AL = UInt8[DS, (ushort)(SI - 0x1)];
    // STC  (334B_20AA / 0x3555A)
    CarryFlag = true;
    // ADC AL,AL (334B_20AB / 0x3555B)
    AL = Alu.Adc8(AL, AL);
    // ADD AL,AL (334B_20AD / 0x3555D)
    // AL += AL;
    AL = Alu.Add8(AL, AL);
    // SHL AL,1 (334B_20AF / 0x3555F)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    // SHL AL,1 (334B_20B1 / 0x35561)
    // AL <<= 1;
    AL = Alu.Shl8(AL, 1);
    label_334B_20B3_35563:
    // MOV DH,byte ptr [SI] (334B_20B3 / 0x35563)
    DH = UInt8[DS, SI];
    // INC SI (334B_20B5 / 0x35565)
    SI = Alu.Inc16(SI);
    // STC  (334B_20B6 / 0x35566)
    CarryFlag = true;
    // ADC DH,DH (334B_20B7 / 0x35567)
    DH = Alu.Adc8(DH, DH);
    // ADD DH,DH (334B_20B9 / 0x35569)
    // DH += DH;
    DH = Alu.Add8(DH, DH);
    // SHL DH,1 (334B_20BB / 0x3556B)
    // DH <<= 1;
    DH = Alu.Shl8(DH, 1);
    // SHL DH,1 (334B_20BD / 0x3556D)
    // DH <<= 1;
    DH = Alu.Shl8(DH, 1);
    // MOV DL,DH (334B_20BF / 0x3556F)
    DL = DH;
    // SUB DL,AL (334B_20C1 / 0x35571)
    // DL -= AL;
    DL = Alu.Sub8(DL, AL);
    // SAR DL,1 (334B_20C3 / 0x35573)
    DL = Alu.Sar8(DL, 1);
    // SAR DL,1 (334B_20C5 / 0x35575)
    DL = Alu.Sar8(DL, 1);
    // OR DL,DL (334B_20C7 / 0x35577)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x3000:5590 (334B_20C9 / 0x35579)
    if(ZeroFlag) {
      goto label_334B_20E0_35590;
    }
    // MOV AH,AL (334B_20CB / 0x3557B)
    AH = AL;
    // ADD AH,DL (334B_20CD / 0x3557D)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // STOSW ES:DI (334B_20CF / 0x3557F)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD AH,DL (334B_20D0 / 0x35580)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // MOV AL,AH (334B_20D2 / 0x35582)
    AL = AH;
    // ADD AH,DL (334B_20D4 / 0x35584)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // STOSW ES:DI (334B_20D6 / 0x35586)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,DH (334B_20D7 / 0x35587)
    AL = DH;
    // LOOP 0x3000:5563 (334B_20D9 / 0x35589)
    if(--CX != 0) {
      goto label_334B_20B3_35563;
    }
    // MOV CX,BX (334B_20DB / 0x3558B)
    CX = BX;
    // POP SI (334B_20DD / 0x3558D)
    SI = Stack.Pop();
    // JMP 0x3000:559b (334B_20DE / 0x3558E)
    goto label_334B_20EB_3559B;
    label_334B_20E0_35590:
    // MOV AH,AL (334B_20E0 / 0x35590)
    AH = AL;
    // STOSW ES:DI (334B_20E2 / 0x35592)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_20E3 / 0x35593)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,DH (334B_20E4 / 0x35594)
    AL = DH;
    // LOOP 0x3000:5563 (334B_20E6 / 0x35596)
    if(--CX != 0) {
      goto label_334B_20B3_35563;
    }
    // MOV CX,BX (334B_20E8 / 0x35598)
    CX = BX;
    // POP SI (334B_20EA / 0x3559A)
    SI = Stack.Pop();
    label_334B_20EB_3559B:
    // JCXZ 0x3000:55c5 (334B_20EB / 0x3559B)
    if(CX == 0) {
      goto label_334B_2115_355C5;
    }
    label_334B_20ED_3559D:
    // MOV DH,byte ptr [SI] (334B_20ED / 0x3559D)
    DH = UInt8[DS, SI];
    // INC SI (334B_20EF / 0x3559F)
    SI = Alu.Inc16(SI);
    // STC  (334B_20F0 / 0x355A0)
    CarryFlag = true;
    // ADC DH,DH (334B_20F1 / 0x355A1)
    DH = Alu.Adc8(DH, DH);
    // ADD DH,DH (334B_20F3 / 0x355A3)
    // DH += DH;
    DH = Alu.Add8(DH, DH);
    // SHL DH,1 (334B_20F5 / 0x355A5)
    // DH <<= 1;
    DH = Alu.Shl8(DH, 1);
    // SHL DH,1 (334B_20F7 / 0x355A7)
    // DH <<= 1;
    DH = Alu.Shl8(DH, 1);
    // MOV DL,DH (334B_20F9 / 0x355A9)
    DL = DH;
    // SUB DL,AL (334B_20FB / 0x355AB)
    // DL -= AL;
    DL = Alu.Sub8(DL, AL);
    // SAR DL,1 (334B_20FD / 0x355AD)
    DL = Alu.Sar8(DL, 1);
    // SAR DL,1 (334B_20FF / 0x355AF)
    DL = Alu.Sar8(DL, 1);
    // OR DL,DL (334B_2101 / 0x355B1)
    // DL |= DL;
    DL = Alu.Or8(DL, DL);
    // JZ 0x3000:55c8 (334B_2103 / 0x355B3)
    if(ZeroFlag) {
      goto label_334B_2118_355C8;
    }
    // MOV AH,AL (334B_2105 / 0x355B5)
    AH = AL;
    // ADD AH,DL (334B_2107 / 0x355B7)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // STOSW ES:DI (334B_2109 / 0x355B9)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD AH,DL (334B_210A / 0x355BA)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // MOV AL,AH (334B_210C / 0x355BC)
    AL = AH;
    // ADD AH,DL (334B_210E / 0x355BE)
    // AH += DL;
    AH = Alu.Add8(AH, DL);
    // STOSW ES:DI (334B_2110 / 0x355C0)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,DH (334B_2111 / 0x355C1)
    AL = DH;
    // LOOP 0x3000:559d (334B_2113 / 0x355C3)
    if(--CX != 0) {
      goto label_334B_20ED_3559D;
    }
    label_334B_2115_355C5:
    // POP DS (334B_2115 / 0x355C5)
    DS = Stack.Pop();
    // POP DX (334B_2116 / 0x355C6)
    DX = Stack.Pop();
    // RET  (334B_2117 / 0x355C7)
    return NearRet();
    label_334B_2118_355C8:
    // MOV AH,AL (334B_2118 / 0x355C8)
    AH = AL;
    // STOSW ES:DI (334B_211A / 0x355CA)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_211B / 0x355CB)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AL,DH (334B_211C / 0x355CC)
    AL = DH;
    // LOOP 0x3000:559d (334B_211E / 0x355CE)
    if(--CX != 0) {
      goto label_334B_20ED_3559D;
    }
    // POP DS (334B_2120 / 0x355D0)
    DS = Stack.Pop();
    // POP DX (334B_2121 / 0x355D1)
    DX = Stack.Pop();
    // RET  (334B_2122 / 0x355D2)
    return NearRet();
  }
  
  public Action unknown_334B_2123_355D3(int gotoTarget) {
    label_334B_2123_355D3:
    // PUSH DX (334B_2123 / 0x355D3)
    Stack.Push(DX);
    // PUSH BP (334B_2124 / 0x355D4)
    Stack.Push(BP);
    // MOV CX,word ptr [BP + 0xa] (334B_2125 / 0x355D5)
    CX = UInt16[SS, (ushort)(BP + 0xA)];
    // MOV DX,word ptr [BP + 0x2] (334B_2128 / 0x355D8)
    DX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DI,word ptr CS:[0x1a5] (334B_212B / 0x355DB)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0x13c (334B_2130 / 0x355E0)
    // DI += 0x13C;
    DI = Alu.Add16(DI, 0x13C);
    // MOV word ptr CS:[0x1b3],0xb0 (334B_2134 / 0x355E4)
    UInt16[cs2, 0x1B3] = 0xB0;
    // MOV SI,DI (334B_213B / 0x355EB)
    SI = DI;
    // MOV AX,0x190 (334B_213D / 0x355ED)
    AX = 0x190;
    // ADD DI,AX (334B_2140 / 0x355F0)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV BP,DI (334B_2142 / 0x355F2)
    BP = DI;
    // ADD DI,AX (334B_2144 / 0x355F4)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV BX,DI (334B_2146 / 0x355F6)
    BX = DI;
    // ADD DI,AX (334B_2148 / 0x355F8)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV word ptr CS:[0x1b5],DI (334B_214A / 0x355FA)
    UInt16[cs2, 0x1B5] = DI;
    // ADD DI,AX (334B_214F / 0x355FF)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // JMP 0x3000:5633 (334B_2151 / 0x35601)
    goto label_334B_2183_35633;
    label_334B_2183_35633:
    // PUSH word ptr CS:[0x1b3] (334B_2183 / 0x35633)
    Stack.Push(UInt16[cs2, 0x1B3]);
    // PUSH DI (334B_2188 / 0x35638)
    Stack.Push(DI);
    // PUSH word ptr CS:[0x1b5] (334B_2189 / 0x35639)
    Stack.Push(UInt16[cs2, 0x1B5]);
    // PUSH BX (334B_218E / 0x3563E)
    Stack.Push(BX);
    // PUSH BP (334B_218F / 0x3563F)
    Stack.Push(BP);
    // PUSH SI (334B_2190 / 0x35640)
    Stack.Push(SI);
    // SUB DX,CX (334B_2191 / 0x35641)
    // DX -= CX;
    DX = Alu.Sub16(DX, CX);
    // MOV AX,DS (334B_2193 / 0x35643)
    AX = DS;
    // MOV ES,AX (334B_2195 / 0x35645)
    ES = AX;
    // XOR AX,AX (334B_2197 / 0x35647)
    AX = 0;
    // DIV CX (334B_2199 / 0x35649)
    Cpu.Div16(CX);
    // MOV CS:[0x1ad],AX (334B_219B / 0x3564B)
    UInt16[cs2, 0x1AD] = AX;
    // MOV CS:[0x1af],AX (334B_219F / 0x3564F)
    UInt16[cs2, 0x1AF] = AX;
    // SHR AX,1 (334B_21A3 / 0x35653)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV DX,AX (334B_21A5 / 0x35655)
    DX = AX;
    // SHR AX,1 (334B_21A7 / 0x35657)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CX,DX (334B_21A9 / 0x35659)
    CX = DX;
    // ADD CX,AX (334B_21AB / 0x3565B)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    // ADD AX,0x80 (334B_21AD / 0x3565D)
    // AX += 0x80;
    AX = Alu.Add16(AX, 0x80);
    // ADD CX,0x80 (334B_21B0 / 0x35660)
    // CX += 0x80;
    CX = Alu.Add16(CX, 0x80);
    // ADD DX,0x80 (334B_21B4 / 0x35664)
    // DX += 0x80;
    DX = Alu.Add16(DX, 0x80);
    // MOV CL,CH (334B_21B8 / 0x35668)
    CL = CH;
    // MOV CH,AH (334B_21BA / 0x3566A)
    CH = AH;
    // MOV DL,DH (334B_21BC / 0x3566C)
    DL = DH;
    // MOV word ptr CS:[0x1b1],CX (334B_21BE / 0x3566E)
    UInt16[cs2, 0x1B1] = CX;
    label_334B_21C3_35673:
    // LODSB SI (334B_21C3 / 0x35673)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,byte ptr [DI] (334B_21C4 / 0x35674)
    AH = UInt8[DS, DI];
    // INC DI (334B_21C6 / 0x35676)
    DI = Alu.Inc16(DI);
    // SUB AH,AL (334B_21C7 / 0x35677)
    // AH -= AL;
    AH = Alu.Sub8(AH, AL);
    // SAR AH,1 (334B_21C9 / 0x35679)
    AH = Alu.Sar8(AH, 1);
    // SAR AH,1 (334B_21CB / 0x3567B)
    AH = Alu.Sar8(AH, 1);
    // ADD AL,AH (334B_21CD / 0x3567D)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // MOV byte ptr [BP + 0x0],AL (334B_21CF / 0x3567F)
    UInt8[SS, BP] = AL;
    // INC BP (334B_21D2 / 0x35682)
    BP = Alu.Inc16(BP);
    // ADD CH,byte ptr CS:[0x1b2] (334B_21D3 / 0x35683)
    // CH += UInt8[cs2, 0x1B2];
    CH = Alu.Add8(CH, UInt8[cs2, 0x1B2]);
    // JC 0x3000:56bb (334B_21D8 / 0x35688)
    if(CarryFlag) {
      goto label_334B_220B_356BB;
    }
    label_334B_21DA_3568A:
    // ADD AL,AH (334B_21DA / 0x3568A)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // MOV byte ptr [BX],AL (334B_21DC / 0x3568C)
    UInt8[DS, BX] = AL;
    // INC BX (334B_21DE / 0x3568E)
    BX = Alu.Inc16(BX);
    // ADD DL,DH (334B_21DF / 0x3568F)
    // DL += DH;
    DL = Alu.Add8(DL, DH);
    // JC 0x3000:56c1 (334B_21E1 / 0x35691)
    if(CarryFlag) {
      goto label_334B_2211_356C1;
    }
    label_334B_21E3_35693:
    // ADD AL,AH (334B_21E3 / 0x35693)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // XCHG word ptr CS:[0x1b5],DI (334B_21E5 / 0x35695)
    ushort tmp_334B_21E5 = UInt16[cs2, 0x1B5];
    UInt16[cs2, 0x1B5] = DI;
    DI = tmp_334B_21E5;
    // STOSB ES:DI (334B_21EA / 0x3569A)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD CL,byte ptr CS:[0x1b1] (334B_21EB / 0x3569B)
    // CL += UInt8[cs2, 0x1B1];
    CL = Alu.Add8(CL, UInt8[cs2, 0x1B1]);
    // JC 0x3000:56c6 (334B_21F0 / 0x356A0)
    if(CarryFlag) {
      goto label_334B_2216_356C6;
    }
    label_334B_21F2_356A2:
    // XCHG word ptr CS:[0x1b5],DI (334B_21F2 / 0x356A2)
    ushort tmp_334B_21F2 = UInt16[cs2, 0x1B5];
    UInt16[cs2, 0x1B5] = DI;
    DI = tmp_334B_21F2;
    // MOV AX,CS:[0x1ad] (334B_21F7 / 0x356A7)
    AX = UInt16[cs2, 0x1AD];
    // ADD word ptr CS:[0x1af],AX (334B_21FB / 0x356AB)
    // UInt16[cs2, 0x1AF] += AX;
    UInt16[cs2, 0x1AF] = Alu.Add16(UInt16[cs2, 0x1AF], AX);
    // JC 0x3000:56c9 (334B_2200 / 0x356B0)
    if(CarryFlag) {
      goto label_334B_2219_356C9;
    }
    // DEC word ptr CS:[0x1b3] (334B_2202 / 0x356B2)
    UInt16[cs2, 0x1B3] = Alu.Dec16(UInt16[cs2, 0x1B3]);
    // JNZ 0x3000:5673 (334B_2207 / 0x356B7)
    if(!ZeroFlag) {
      goto label_334B_21C3_35673;
    }
    // JMP 0x3000:56d1 (334B_2209 / 0x356B9)
    goto label_334B_2221_356D1;
    label_334B_220B_356BB:
    // MOV byte ptr [BP + 0x0],AL (334B_220B / 0x356BB)
    UInt8[SS, BP] = AL;
    // INC BP (334B_220E / 0x356BE)
    BP = Alu.Inc16(BP);
    // JMP 0x3000:568a (334B_220F / 0x356BF)
    goto label_334B_21DA_3568A;
    label_334B_2211_356C1:
    // MOV byte ptr [BX],AL (334B_2211 / 0x356C1)
    UInt8[DS, BX] = AL;
    // INC BX (334B_2213 / 0x356C3)
    BX = Alu.Inc16(BX);
    // JMP 0x3000:5693 (334B_2214 / 0x356C4)
    goto label_334B_21E3_35693;
    label_334B_2216_356C6:
    // STOSB ES:DI (334B_2216 / 0x356C6)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x3000:56a2 (334B_2217 / 0x356C7)
    goto label_334B_21F2_356A2;
    label_334B_2219_356C9:
    // INC DI (334B_2219 / 0x356C9)
    DI = Alu.Inc16(DI);
    // DEC word ptr CS:[0x1b3] (334B_221A / 0x356CA)
    UInt16[cs2, 0x1B3] = Alu.Dec16(UInt16[cs2, 0x1B3]);
    // JNZ 0x3000:5673 (334B_221F / 0x356CF)
    if(!ZeroFlag) {
      goto label_334B_21C3_35673;
    }
    label_334B_2221_356D1:
    // POP SI (334B_2221 / 0x356D1)
    SI = Stack.Pop();
    // POP BP (334B_2222 / 0x356D2)
    BP = Stack.Pop();
    // POP BX (334B_2223 / 0x356D3)
    BX = Stack.Pop();
    // POP word ptr CS:[0x1b5] (334B_2224 / 0x356D4)
    UInt16[cs2, 0x1B5] = Stack.Pop();
    // POP DI (334B_2229 / 0x356D9)
    DI = Stack.Pop();
    // POP word ptr CS:[0x1b3] (334B_222A / 0x356DA)
    UInt16[cs2, 0x1B3] = Stack.Pop();
    // MOV CX,word ptr CS:[0x1b1] (334B_222F / 0x356DF)
    CX = UInt16[cs2, 0x1B1];
    // MOV DL,DH (334B_2234 / 0x356E4)
    DL = DH;
    // MOV AX,CS:[0x1ad] (334B_2236 / 0x356E6)
    AX = UInt16[cs2, 0x1AD];
    // MOV CS:[0x1af],AX (334B_223A / 0x356EA)
    UInt16[cs2, 0x1AF] = AX;
    // DEC SI (334B_223E / 0x356EE)
    SI = Alu.Dec16(SI);
    // DEC DI (334B_223F / 0x356EF)
    DI = Alu.Dec16(DI);
    // DEC word ptr CS:[0x1b5] (334B_2240 / 0x356F0)
    UInt16[cs2, 0x1B5] = Alu.Dec16(UInt16[cs2, 0x1B5]);
    // STD  (334B_2245 / 0x356F5)
    DirectionFlag = true;
    label_334B_2246_356F6:
    // LODSB SI (334B_2246 / 0x356F6)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // MOV AH,byte ptr [DI] (334B_2247 / 0x356F7)
    AH = UInt8[DS, DI];
    // DEC DI (334B_2249 / 0x356F9)
    DI = Alu.Dec16(DI);
    // SUB AH,AL (334B_224A / 0x356FA)
    // AH -= AL;
    AH = Alu.Sub8(AH, AL);
    // SAR AH,1 (334B_224C / 0x356FC)
    AH = Alu.Sar8(AH, 1);
    // SAR AH,1 (334B_224E / 0x356FE)
    AH = Alu.Sar8(AH, 1);
    // ADD AL,AH (334B_2250 / 0x35700)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // DEC BP (334B_2252 / 0x35702)
    BP = Alu.Dec16(BP);
    // MOV byte ptr [BP + 0x0],AL (334B_2253 / 0x35703)
    UInt8[SS, BP] = AL;
    // ADD CH,byte ptr CS:[0x1b2] (334B_2256 / 0x35706)
    // CH += UInt8[cs2, 0x1B2];
    CH = Alu.Add8(CH, UInt8[cs2, 0x1B2]);
    // JC 0x3000:573f (334B_225B / 0x3570B)
    if(CarryFlag) {
      goto label_334B_228F_3573F;
    }
    label_334B_225D_3570D:
    // ADD AL,AH (334B_225D / 0x3570D)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // DEC BX (334B_225F / 0x3570F)
    BX = Alu.Dec16(BX);
    // MOV byte ptr [BX],AL (334B_2260 / 0x35710)
    UInt8[DS, BX] = AL;
    // ADD DL,DH (334B_2262 / 0x35712)
    // DL += DH;
    DL = Alu.Add8(DL, DH);
    // JC 0x3000:5745 (334B_2264 / 0x35714)
    if(CarryFlag) {
      goto label_334B_2295_35745;
    }
    label_334B_2266_35716:
    // ADD AL,AH (334B_2266 / 0x35716)
    // AL += AH;
    AL = Alu.Add8(AL, AH);
    // XCHG word ptr CS:[0x1b5],DI (334B_2268 / 0x35718)
    ushort tmp_334B_2268 = UInt16[cs2, 0x1B5];
    UInt16[cs2, 0x1B5] = DI;
    DI = tmp_334B_2268;
    // STOSB ES:DI (334B_226D / 0x3571D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD CL,byte ptr CS:[0x1b1] (334B_226E / 0x3571E)
    // CL += UInt8[cs2, 0x1B1];
    CL = Alu.Add8(CL, UInt8[cs2, 0x1B1]);
    // JC 0x3000:574a (334B_2273 / 0x35723)
    if(CarryFlag) {
      goto label_334B_229A_3574A;
    }
    label_334B_2275_35725:
    // XCHG word ptr CS:[0x1b5],DI (334B_2275 / 0x35725)
    ushort tmp_334B_2275 = UInt16[cs2, 0x1B5];
    UInt16[cs2, 0x1B5] = DI;
    DI = tmp_334B_2275;
    // MOV AX,CS:[0x1ad] (334B_227A / 0x3572A)
    AX = UInt16[cs2, 0x1AD];
    // ADD word ptr CS:[0x1af],AX (334B_227E / 0x3572E)
    // UInt16[cs2, 0x1AF] += AX;
    UInt16[cs2, 0x1AF] = Alu.Add16(UInt16[cs2, 0x1AF], AX);
    // JC 0x3000:574d (334B_2283 / 0x35733)
    if(CarryFlag) {
      goto label_334B_229D_3574D;
    }
    label_334B_2285_35735:
    // DEC word ptr CS:[0x1b3] (334B_2285 / 0x35735)
    UInt16[cs2, 0x1B3] = Alu.Dec16(UInt16[cs2, 0x1B3]);
    // JNZ 0x3000:56f6 (334B_228A / 0x3573A)
    if(!ZeroFlag) {
      goto label_334B_2246_356F6;
    }
    // CLD  (334B_228C / 0x3573C)
    DirectionFlag = false;
    // JMP 0x3000:5750 (334B_228D / 0x3573D)
    goto label_334B_22A0_35750;
    label_334B_228F_3573F:
    // DEC BP (334B_228F / 0x3573F)
    BP = Alu.Dec16(BP);
    // MOV byte ptr [BP + 0x0],AL (334B_2290 / 0x35740)
    UInt8[SS, BP] = AL;
    // JMP 0x3000:570d (334B_2293 / 0x35743)
    goto label_334B_225D_3570D;
    label_334B_2295_35745:
    // DEC BX (334B_2295 / 0x35745)
    BX = Alu.Dec16(BX);
    // MOV byte ptr [BX],AL (334B_2296 / 0x35746)
    UInt8[DS, BX] = AL;
    // JMP 0x3000:5716 (334B_2298 / 0x35748)
    goto label_334B_2266_35716;
    label_334B_229A_3574A:
    // STOSB ES:DI (334B_229A / 0x3574A)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // JMP 0x3000:5725 (334B_229B / 0x3574B)
    goto label_334B_2275_35725;
    label_334B_229D_3574D:
    // DEC DI (334B_229D / 0x3574D)
    DI = Alu.Dec16(DI);
    // JMP 0x3000:5735 (334B_229E / 0x3574E)
    goto label_334B_2285_35735;
    label_334B_22A0_35750:
    // POP BP (334B_22A0 / 0x35750)
    BP = Stack.Pop();
    // PUSH BP (334B_22A1 / 0x35751)
    Stack.Push(BP);
    // SUB BP,word ptr CS:[0x1bb] (334B_22A2 / 0x35752)
    // BP -= UInt16[cs2, 0x1BB];
    BP = Alu.Sub16(BP, UInt16[cs2, 0x1BB]);
    // JC 0x3000:57ba (334B_22A7 / 0x35757)
    if(CarryFlag) {
      goto label_334B_230A_357BA;
    }
    // MOV AX,CS (334B_22A9 / 0x35759)
    AX = cs2;
    // MOV DS,AX (334B_22AB / 0x3575B)
    DS = AX;
    // ADD BP,word ptr CS:[0x1b9] (334B_22AD / 0x3575D)
    // BP += UInt16[cs2, 0x1B9];
    BP = Alu.Add16(BP, UInt16[cs2, 0x1B9]);
    // MOV DI,word ptr CS:[0x1a5] (334B_22B2 / 0x35762)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0xa0 (334B_22B7 / 0x35767)
    // DI += 0xA0;
    DI = Alu.Add16(DI, 0xA0);
    // XOR CH,CH (334B_22BB / 0x3576B)
    CH = 0;
    // XOR AL,AL (334B_22BD / 0x3576D)
    AL = 0;
    // MOV BL,0x4 (334B_22BF / 0x3576F)
    BL = 0x4;
    label_334B_22C1_35771:
    // MOV SI,0x8ef (334B_22C1 / 0x35771)
    SI = 0x8EF;
    // MOV CL,byte ptr CS:[BP + 0x0] (334B_22C4 / 0x35774)
    CL = UInt8[cs2, BP];
    // MOV BH,CL (334B_22C8 / 0x35778)
    BH = CL;
    // SUB CX,0x4 (334B_22CA / 0x3577A)
    // CX -= 0x4;
    CX = Alu.Sub16(CX, 0x4);
    // JA 0x3000:5789 (334B_22CD / 0x3577D)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_22D9_35789;
    }
    // NEG CX (334B_22CF / 0x3577F)
    CX = Alu.Sub16(0, CX);
    // ADD SI,CX (334B_22D1 / 0x35781)
    // SI += CX;
    SI = Alu.Add16(SI, CX);
    // MOV CL,BH (334B_22D3 / 0x35783)
    CL = BH;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_22D5 / 0x35785)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JMP 0x3000:578f (334B_22D7 / 0x35787)
    goto label_334B_22DF_3578F;
    label_334B_22D9_35789:
    // XOR AL,AL (334B_22D9 / 0x35789)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (334B_22DB / 0x3578B)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOVSW ES:DI,SI (334B_22DD / 0x3578D)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_22DE / 0x3578E)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_334B_22DF_3578F:
    // MOV CL,byte ptr CS:[BP + 0x1] (334B_22DF / 0x3578F)
    CL = UInt8[cs2, (ushort)(BP + 0x1)];
    // ADD DI,CX (334B_22E3 / 0x35793)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // ADD DI,CX (334B_22E5 / 0x35795)
    // DI += CX;
    DI = Alu.Add16(DI, CX);
    // MOV CL,BH (334B_22E7 / 0x35797)
    CL = BH;
    // SUB CX,0x4 (334B_22E9 / 0x35799)
    // CX -= 0x4;
    CX = Alu.Sub16(CX, 0x4);
    // JA 0x3000:57a6 (334B_22EC / 0x3579C)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_22F6_357A6;
    }
    // MOV CL,BH (334B_22EE / 0x3579E)
    CL = BH;
    // XOR CH,CH (334B_22F0 / 0x357A0)
    CH = 0;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_22F2 / 0x357A2)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // JMP 0x3000:57ac (334B_22F4 / 0x357A4)
    goto label_334B_22FC_357AC;
    label_334B_22F6_357A6:
    // MOVSW ES:DI,SI (334B_22F6 / 0x357A6)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_22F7 / 0x357A7)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AL,AL (334B_22F8 / 0x357A8)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (334B_22FA / 0x357AA)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    label_334B_22FC_357AC:
    // ADD DI,0x58 (334B_22FC / 0x357AC)
    // DI += 0x58;
    DI = Alu.Add16(DI, 0x58);
    // ADD BP,0x2 (334B_22FF / 0x357AF)
    // BP += 0x2;
    BP = Alu.Add16(BP, 0x2);
    // DEC BL (334B_2302 / 0x357B2)
    BL = Alu.Dec8(BL);
    // JNZ 0x3000:5771 (334B_2304 / 0x357B4)
    if(!ZeroFlag) {
      goto label_334B_22C1_35771;
    }
    // MOV AX,SS (334B_2306 / 0x357B6)
    AX = SS;
    // MOV DS,AX (334B_2308 / 0x357B8)
    DS = AX;
    label_334B_230A_357BA:
    // MOV ES,word ptr CS:[0x1ab] (334B_230A / 0x357BA)
    ES = UInt16[cs2, 0x1AB];
    // MOV CX,0x138 (334B_230F / 0x357BF)
    CX = 0x138;
    // MOV DI,word ptr CS:[0x1cb2] (334B_2312 / 0x357C2)
    DI = UInt16[cs2, 0x1CB2];
    // MOV SI,word ptr CS:[0x1a5] (334B_2317 / 0x357C7)
    SI = UInt16[cs2, 0x1A5];
    // ADD SI,0xa0 (334B_231C / 0x357CC)
    // SI += 0xA0;
    SI = Alu.Add16(SI, 0xA0);
    // CALL 0x3000:57f3 (334B_2320 / 0x357D0)
    NearCall(cs2, 0x2323, CopyMapBlock_334B_2343_357F3);
    // MOV word ptr CS:[0x1cb2],DI (334B_2323 / 0x357D3)
    UInt16[cs2, 0x1CB2] = DI;
    // MOV AX,DS (334B_2328 / 0x357D8)
    AX = DS;
    // MOV ES,AX (334B_232A / 0x357DA)
    ES = AX;
    // MOV DI,word ptr CS:[0x1a5] (334B_232C / 0x357DC)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0x8c (334B_2331 / 0x357E1)
    // DI += 0x8C;
    DI = Alu.Add16(DI, 0x8C);
    // MOV SI,DI (334B_2335 / 0x357E5)
    SI = DI;
    // ADD SI,0x640 (334B_2337 / 0x357E7)
    // SI += 0x640;
    SI = Alu.Add16(SI, 0x640);
    // MOV CX,0x15e (334B_233B / 0x357EB)
    CX = 0x15E;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_233E / 0x357EE)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP BP (334B_2340 / 0x357F0)
    BP = Stack.Pop();
    // POP DX (334B_2341 / 0x357F1)
    DX = Stack.Pop();
    // RET  (334B_2342 / 0x357F2)
    return NearRet();
  }
  
  public Action unknown_334B_2153_35603(int gotoTarget) {
    label_334B_2153_35603:
    // PUSH DX (334B_2153 / 0x35603)
    Stack.Push(DX);
    // PUSH BP (334B_2154 / 0x35604)
    Stack.Push(BP);
    // MOV CX,word ptr [BP + 0x2] (334B_2155 / 0x35605)
    CX = UInt16[SS, (ushort)(BP + 0x2)];
    // MOV DX,word ptr [BP + -0x6] (334B_2158 / 0x35608)
    DX = UInt16[SS, (ushort)(BP - 0x6)];
    // MOV DI,word ptr CS:[0x1a5] (334B_215B / 0x3560B)
    DI = UInt16[cs2, 0x1A5];
    // ADD DI,0x13c (334B_2160 / 0x35610)
    // DI += 0x13C;
    DI = Alu.Add16(DI, 0x13C);
    // MOV word ptr CS:[0x1b3],0xb0 (334B_2164 / 0x35614)
    UInt16[cs2, 0x1B3] = 0xB0;
    // PUSH DI (334B_216B / 0x3561B)
    Stack.Push(DI);
    // MOV AX,0x190 (334B_216C / 0x3561C)
    AX = 0x190;
    // ADD DI,AX (334B_216F / 0x3561F)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV word ptr CS:[0x1b5],DI (334B_2171 / 0x35621)
    UInt16[cs2, 0x1B5] = DI;
    // ADD DI,AX (334B_2176 / 0x35626)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV BX,DI (334B_2178 / 0x35628)
    BX = DI;
    // ADD DI,AX (334B_217A / 0x3562A)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV BP,DI (334B_217C / 0x3562C)
    BP = DI;
    // ADD DI,AX (334B_217E / 0x3562E)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV SI,DI (334B_2180 / 0x35630)
    SI = DI;
    // POP DI (334B_2182 / 0x35632)
    DI = Stack.Pop();
    // Function call generated as ASM continues to next function body without return
    return unknown_334B_2123_355D3(0x35633 - cs1 * 0x10);
  }
  
  public Action CopyMapBlock_334B_2343_357F3(int gotoTarget) {
    label_334B_2343_357F3:
    // PUSH DX (334B_2343 / 0x357F3)
    Stack.Push(DX);
    // PUSH BP (334B_2344 / 0x357F4)
    Stack.Push(BP);
    // MOV BH,0x4 (334B_2345 / 0x357F5)
    BH = 0x4;
    // MOV BP,0xf0f (334B_2347 / 0x357F7)
    BP = 0xF0F;
    // MOV DX,0x1010 (334B_234A / 0x357FA)
    DX = 0x1010;
    label_334B_234D_357FD:
    // PUSH CX (334B_234D / 0x357FD)
    Stack.Push(CX);
    // SHR CX,1 (334B_234E / 0x357FE)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // JNC 0x3000:5810 (334B_2350 / 0x35800)
    if(!CarryFlag) {
      goto label_334B_2360_35810;
    }
    // LODSB SI (334B_2352 / 0x35802)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SHR AL,1 (334B_2353 / 0x35803)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_2355 / 0x35805)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_2357 / 0x35807)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // SHR AL,1 (334B_2359 / 0x35809)
    // AL >>= 1;
    AL = Alu.Shr8(AL, 1);
    // AND AX,BP (334B_235B / 0x3580B)
    // AX &= BP;
    AX = Alu.And16(AX, BP);
    // ADD AL,DL (334B_235D / 0x3580D)
    // AL += DL;
    AL = Alu.Add8(AL, DL);
    // STOSB ES:DI (334B_235F / 0x3580F)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_334B_2360_35810:
    // LODSW SI (334B_2360 / 0x35810)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SHR AX,1 (334B_2361 / 0x35811)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_2363 / 0x35813)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_2365 / 0x35815)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_2367 / 0x35817)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // AND AX,BP (334B_2369 / 0x35819)
    // AX &= BP;
    AX = Alu.And16(AX, BP);
    // ADD AX,DX (334B_236B / 0x3581B)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // STOSW ES:DI (334B_236D / 0x3581D)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x3000:5810 (334B_236E / 0x3581E)
    if(--CX != 0) {
      goto label_334B_2360_35810;
    }
    // POP CX (334B_2370 / 0x35820)
    CX = Stack.Pop();
    // SUB DI,CX (334B_2371 / 0x35821)
    // DI -= CX;
    DI = Alu.Sub16(DI, CX);
    // SUB SI,CX (334B_2373 / 0x35823)
    // SI -= CX;
    SI = Alu.Sub16(SI, CX);
    // ADD DI,0x140 (334B_2375 / 0x35825)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // ADD SI,0x190 (334B_2379 / 0x35829)
    // SI += 0x190;
    SI = Alu.Add16(SI, 0x190);
    // DEC BH (334B_237D / 0x3582D)
    BH = Alu.Dec8(BH);
    // JNZ 0x3000:57fd (334B_237F / 0x3582F)
    if(!ZeroFlag) {
      goto label_334B_234D_357FD;
    }
    // POP BP (334B_2381 / 0x35831)
    BP = Stack.Pop();
    // POP DX (334B_2382 / 0x35832)
    DX = Stack.Pop();
    // RET  (334B_2383 / 0x35833)
    return NearRet();
  }
  
  public Action unknown_334B_2396_35846(int gotoTarget) {
    label_334B_2396_35846:
    // XOR DX,DX (334B_2396 / 0x35846)
    DX = 0;
    // OR AX,AX (334B_2398 / 0x35848)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JNS 0x3000:584e (334B_239A / 0x3584A)
    if(!SignFlag) {
      goto label_334B_239E_3584E;
    }
    // NEG AX (334B_239C / 0x3584C)
    AX = Alu.Sub16(0, AX);
    label_334B_239E_3584E:
    // SUB AX,0x46 (334B_239E / 0x3584E)
    // AX -= 0x46;
    AX = Alu.Sub16(AX, 0x46);
    // JC 0x3000:587b (334B_23A1 / 0x35851)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (334B_23CB / 0x3587B)
      return NearRet();
    }
    // MOV BX,0x2384 (334B_23A3 / 0x35853)
    BX = 0x2384;
    // XLAT CS:BX (334B_23A6 / 0x35856)
    AL = UInt8[cs2, (ushort)(BX + AL)];
    // XOR AH,AH (334B_23A8 / 0x35858)
    AH = 0;
    // MOV DX,AX (334B_23AA / 0x3585A)
    DX = AX;
    // XOR AL,AL (334B_23AC / 0x3585C)
    AL = 0;
    // ADD SI,DX (334B_23AE / 0x3585E)
    // SI += DX;
    SI = Alu.Add16(SI, DX);
    // SUB CX,DX (334B_23B0 / 0x35860)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // SUB CX,DX (334B_23B2 / 0x35862)
    // CX -= DX;
    CX = Alu.Sub16(CX, DX);
    // JC 0x3000:587c (334B_23B4 / 0x35864)
    if(CarryFlag) {
      goto label_334B_23CC_3587C;
    }
    // PUSH DX (334B_23B6 / 0x35866)
    Stack.Push(DX);
    // XCHG DX,CX (334B_23B7 / 0x35867)
    ushort tmp_334B_23B7 = DX;
    DX = CX;
    CX = tmp_334B_23B7;
    // SUB CX,0x4 (334B_23B9 / 0x35869)
    // CX -= 0x4;
    CX = Alu.Sub16(CX, 0x4);
    // JC 0x3000:5874 (334B_23BC / 0x3586C)
    if(CarryFlag) {
      goto label_334B_23C4_35874;
    }
    while (CX-- != 0) {
      // STOSB ES:DI (334B_23BE / 0x3586E)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // MOV AX,0x191c (334B_23C0 / 0x35870)
    AX = 0x191C;
    // STOSW ES:DI (334B_23C3 / 0x35873)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    label_334B_23C4_35874:
    // MOV AX,0x1718 (334B_23C4 / 0x35874)
    AX = 0x1718;
    // STOSW ES:DI (334B_23C7 / 0x35877)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV CX,DX (334B_23C8 / 0x35878)
    CX = DX;
    // POP DX (334B_23CA / 0x3587A)
    DX = Stack.Pop();
    label_334B_23CB_3587B:
    // RET  (334B_23CB / 0x3587B)
    return NearRet();
    label_334B_23CC_3587C:
    // ADD CX,DX (334B_23CC / 0x3587C)
    // CX += DX;
    CX = Alu.Add16(CX, DX);
    // ADD CX,DX (334B_23CE / 0x3587E)
    // CX += DX;
    CX = Alu.Add16(CX, DX);
    while (CX-- != 0) {
      // STOSB ES:DI (334B_23D0 / 0x35880)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // XOR CX,CX (334B_23D2 / 0x35882)
    CX = 0;
    // XOR DX,DX (334B_23D4 / 0x35884)
    DX = 0;
    // RET  (334B_23D6 / 0x35886)
    return NearRet();
  }
  
  public Action unknown_334B_23D7_35887(int gotoTarget) {
    label_334B_23D7_35887:
    // JCXZ 0x3000:589a (334B_23D7 / 0x35887)
    if(CX == 0) {
      // JCXZ target is RET, inlining.
      // RET  (334B_23EA / 0x3589A)
      return NearRet();
    }
    // MOV AX,0x1817 (334B_23D9 / 0x35889)
    AX = 0x1817;
    // STOSW ES:DI (334B_23DC / 0x3588C)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB CX,0x4 (334B_23DD / 0x3588D)
    // CX -= 0x4;
    CX = Alu.Sub16(CX, 0x4);
    // JC 0x3000:589a (334B_23E0 / 0x35890)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (334B_23EA / 0x3589A)
      return NearRet();
    }
    // MOV AX,0x1c19 (334B_23E2 / 0x35892)
    AX = 0x1C19;
    // STOSW ES:DI (334B_23E5 / 0x35895)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // XOR AL,AL (334B_23E6 / 0x35896)
    AL = 0;
    while (CX-- != 0) {
      // STOSB ES:DI (334B_23E8 / 0x35898)
      UInt8[ES, DI] = AL;
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    label_334B_23EA_3589A:
    // RET  (334B_23EA / 0x3589A)
    return NearRet();
  }
  
  public Action spice86_label_334B_23EB_3589B(int gotoTarget) {
    switch(gotoTarget) {
      case 0x2589B: goto label_334B_23EB_3589B;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_23EB_3589B:
    // PUSH DI (334B_23EB / 0x3589B)
    Stack.Push(DI);
    // MOV DI,CX (334B_23EC / 0x3589C)
    DI = CX;
    // DEC DI (334B_23EE / 0x3589E)
    DI = Alu.Dec16(DI);
    // ADD BX,DI (334B_23EF / 0x3589F)
    // BX += DI;
    BX = Alu.Add16(BX, DI);
    // ADD AX,DI (334B_23F1 / 0x358A1)
    // AX += DI;
    AX = Alu.Add16(AX, DI);
    // PUSH AX (334B_23F3 / 0x358A3)
    Stack.Push(AX);
    // PUSH DX (334B_23F4 / 0x358A4)
    Stack.Push(DX);
    // MOV AX,0xc8 (334B_23F5 / 0x358A5)
    AX = 0xC8;
    // MUL DI (334B_23F8 / 0x358A8)
    Cpu.Mul16(DI);
    // ADD SI,AX (334B_23FA / 0x358AA)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // POP DX (334B_23FC / 0x358AC)
    DX = Stack.Pop();
    // POP AX (334B_23FD / 0x358AD)
    AX = Stack.Pop();
    // CALL 0x3000:40c0 (334B_23FE / 0x358AE)
    NearCall(cs2, 0x2401, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_2401 / 0x358B1)
    DX = Stack.Pop();
    // XCHG DX,CX (334B_2402 / 0x358B2)
    ushort tmp_334B_2402 = DX;
    DX = CX;
    CX = tmp_334B_2402;
    label_334B_2404_358B4:
    // CALL 0x3000:58c3 (334B_2404 / 0x358B4)
    NearCall(cs2, 0x2407, unknown_334B_2413_358C3);
    // SUB SI,0xc8 (334B_2407 / 0x358B7)
    // SI -= 0xC8;
    SI = Alu.Sub16(SI, 0xC8);
    // SUB DI,0x140 (334B_240B / 0x358BB)
    // DI -= 0x140;
    DI = Alu.Sub16(DI, 0x140);
    // DEC DX (334B_240F / 0x358BF)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:58b4 (334B_2410 / 0x358C0)
    if(!ZeroFlag) {
      goto label_334B_2404_358B4;
    }
    // RETF  (334B_2412 / 0x358C2)
    return FarRet();
  }
  
  public Action unknown_334B_2413_358C3(int gotoTarget) {
    label_334B_2413_358C3:
    // PUSH AX (334B_2413 / 0x358C3)
    Stack.Push(AX);
    // PUSH CX (334B_2414 / 0x358C4)
    Stack.Push(CX);
    // PUSH DX (334B_2415 / 0x358C5)
    Stack.Push(DX);
    // PUSH SI (334B_2416 / 0x358C6)
    Stack.Push(SI);
    // PUSH DI (334B_2417 / 0x358C7)
    Stack.Push(DI);
    // CALL 0x3000:5846 (334B_2418 / 0x358C8)
    NearCall(cs2, 0x241B, unknown_334B_2396_35846);
    // PUSH DX (334B_241B / 0x358CB)
    Stack.Push(DX);
    // MOV BP,0xf0f (334B_241C / 0x358CC)
    BP = 0xF0F;
    // MOV DX,0x1010 (334B_241F / 0x358CF)
    DX = 0x1010;
    // SHR CX,1 (334B_2422 / 0x358D2)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // JNC 0x3000:58dc (334B_2424 / 0x358D4)
    if(!CarryFlag) {
      goto label_334B_242C_358DC;
    }
    // LODSB SI (334B_2426 / 0x358D6)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // AND AX,BP (334B_2427 / 0x358D7)
    // AX &= BP;
    AX = Alu.And16(AX, BP);
    // ADD AL,DL (334B_2429 / 0x358D9)
    // AL += DL;
    AL = Alu.Add8(AL, DL);
    // STOSB ES:DI (334B_242B / 0x358DB)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    label_334B_242C_358DC:
    // JCXZ 0x3000:58e6 (334B_242C / 0x358DC)
    if(CX == 0) {
      goto label_334B_2436_358E6;
    }
    label_334B_242E_358DE:
    // LODSW SI (334B_242E / 0x358DE)
    AX = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // AND AX,BP (334B_242F / 0x358DF)
    // AX &= BP;
    AX = Alu.And16(AX, BP);
    // ADD AX,DX (334B_2431 / 0x358E1)
    // AX += DX;
    AX = Alu.Add16(AX, DX);
    // STOSW ES:DI (334B_2433 / 0x358E3)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x3000:58de (334B_2434 / 0x358E4)
    if(--CX != 0) {
      goto label_334B_242E_358DE;
    }
    label_334B_2436_358E6:
    // POP CX (334B_2436 / 0x358E6)
    CX = Stack.Pop();
    // CALL 0x3000:5887 (334B_2437 / 0x358E7)
    NearCall(cs2, 0x243A, unknown_334B_23D7_35887);
    // POP DI (334B_243A / 0x358EA)
    DI = Stack.Pop();
    // POP SI (334B_243B / 0x358EB)
    SI = Stack.Pop();
    // POP DX (334B_243C / 0x358EC)
    DX = Stack.Pop();
    // POP CX (334B_243D / 0x358ED)
    CX = Stack.Pop();
    // POP AX (334B_243E / 0x358EE)
    AX = Stack.Pop();
    // DEC AX (334B_243F / 0x358EF)
    AX = Alu.Dec16(AX);
    // RET  (334B_2440 / 0x358F0)
    return NearRet();
  }
  
  public Action spice86_label_334B_2441_358F1(int gotoTarget) {
    switch(gotoTarget) {
      case 0x258F1: goto label_334B_2441_358F1;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_2441_358F1:
    // PUSH BX (334B_2441 / 0x358F1)
    Stack.Push(BX);
    // XOR BH,BH (334B_2442 / 0x358F2)
    BH = 0;
    // PUSH DI (334B_2444 / 0x358F4)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_2445 / 0x358F5)
    NearCall(cs2, 0x2448, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP DX (334B_2448 / 0x358F8)
    DX = Stack.Pop();
    // XCHG DX,CX (334B_2449 / 0x358F9)
    ushort tmp_334B_2449 = DX;
    DX = CX;
    CX = tmp_334B_2449;
    // POP BX (334B_244B / 0x358FB)
    BX = Stack.Pop();
    // OR BH,BH (334B_244C / 0x358FC)
    // BH |= BH;
    BH = Alu.Or8(BH, BH);
    // JNZ 0x3000:5937 (334B_244E / 0x358FE)
    if(!ZeroFlag) {
      goto label_334B_2487_35937;
    }
    label_334B_2450_35900:
    // CALL 0x3000:595d (334B_2450 / 0x35900)
    NearCall(cs2, 0x2453, unknown_334B_24AD_3595D);
    // ADD SI,0xc8 (334B_2453 / 0x35903)
    // SI += 0xC8;
    SI = Alu.Add16(SI, 0xC8);
    // ADD DI,0x140 (334B_2457 / 0x35907)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC DX (334B_245B / 0x3590B)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:5900 (334B_245C / 0x3590C)
    if(!ZeroFlag) {
      goto label_334B_2450_35900;
    }
    // CMP byte ptr CS:[0x1bd],0x0 (334B_245E / 0x3590E)
    Alu.Sub8(UInt8[cs2, 0x1BD], 0x0);
    // JZ 0x3000:5936 (334B_2464 / 0x35914)
    if(ZeroFlag) {
      // JZ target is RETF, inlining.
      // RETF  (334B_2486 / 0x35936)
      return FarRet();
    }
    // PUSH AX (334B_2466 / 0x35916)
    Stack.Push(AX);
    // PUSH BX (334B_2467 / 0x35917)
    Stack.Push(BX);
    // PUSH CX (334B_2468 / 0x35918)
    Stack.Push(CX);
    // PUSH DX (334B_2469 / 0x35919)
    Stack.Push(DX);
    // PUSH SI (334B_246A / 0x3591A)
    Stack.Push(SI);
    // PUSH DI (334B_246B / 0x3591B)
    Stack.Push(DI);
    // PUSH BP (334B_246C / 0x3591C)
    Stack.Push(BP);
    // PUSH DS (334B_246D / 0x3591D)
    Stack.Push(DS);
    // PUSH ES (334B_246E / 0x3591E)
    Stack.Push(ES);
    // PUSH CS (334B_246F / 0x3591F)
    Stack.Push(cs2);
    // POP ES (334B_2470 / 0x35920)
    ES = Stack.Pop();
    // MOV DX,0x8bf (334B_2471 / 0x35921)
    DX = 0x8BF;
    // MOV CX,0x10 (334B_2474 / 0x35924)
    CX = 0x10;
    // MOV BX,0x50 (334B_2477 / 0x35927)
    BX = 0x50;
    // CALL 0x3000:4018 (334B_247A / 0x3592A)
    NearCall(cs2, 0x247D, LoadPaletteInVgaDac_334B_0B68_34018);
    // POP ES (334B_247D / 0x3592D)
    ES = Stack.Pop();
    // POP DS (334B_247E / 0x3592E)
    DS = Stack.Pop();
    // POP BP (334B_247F / 0x3592F)
    BP = Stack.Pop();
    // POP DI (334B_2480 / 0x35930)
    DI = Stack.Pop();
    // POP SI (334B_2481 / 0x35931)
    SI = Stack.Pop();
    // POP DX (334B_2482 / 0x35932)
    DX = Stack.Pop();
    // POP CX (334B_2483 / 0x35933)
    CX = Stack.Pop();
    // POP BX (334B_2484 / 0x35934)
    BX = Stack.Pop();
    // POP AX (334B_2485 / 0x35935)
    AX = Stack.Pop();
    label_334B_2486_35936:
    // RETF  (334B_2486 / 0x35936)
    return FarRet();
    label_334B_2487_35937:
    // CALL 0x3000:5999 (334B_2487 / 0x35937)
    NearCall(cs2, 0x248A, unknown_334B_24E9_35999);
    // ADD SI,0xc8 (334B_248A / 0x3593A)
    // SI += 0xC8;
    SI = Alu.Add16(SI, 0xC8);
    // ADD DI,0x140 (334B_248E / 0x3593E)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // PUSH AX (334B_2492 / 0x35942)
    Stack.Push(AX);
    // LEA BX,[BP + 0x100] (334B_2493 / 0x35943)
    BX = (ushort)(BP + 0x100);
    label_334B_2497_35947:
    // DEC BX (334B_2497 / 0x35947)
    BX = Alu.Dec16(BX);
    // MOV AL,byte ptr [BX] (334B_2498 / 0x35948)
    AL = UInt8[DS, BX];
    // CMP AL,0x70 (334B_249A / 0x3594A)
    Alu.Sub8(AL, 0x70);
    // JZ 0x3000:5954 (334B_249C / 0x3594C)
    if(ZeroFlag) {
      goto label_334B_24A4_35954;
    }
    // ROL AL,1 (334B_249E / 0x3594E)
    AL = Alu.Rol8(AL, 1);
    // ROL AL,1 (334B_24A0 / 0x35950)
    AL = Alu.Rol8(AL, 1);
    // MOV byte ptr [BX],AL (334B_24A2 / 0x35952)
    UInt8[DS, BX] = AL;
    label_334B_24A4_35954:
    // CMP BX,BP (334B_24A4 / 0x35954)
    Alu.Sub16(BX, BP);
    // JA 0x3000:5947 (334B_24A6 / 0x35956)
    if(!CarryFlag && !ZeroFlag) {
      goto label_334B_2497_35947;
    }
    // POP AX (334B_24A8 / 0x35958)
    AX = Stack.Pop();
    // DEC DX (334B_24A9 / 0x35959)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:5937 (334B_24AA / 0x3595A)
    if(!ZeroFlag) {
      goto label_334B_2487_35937;
    }
    // RETF  (334B_24AC / 0x3595C)
    return FarRet();
  }
  
  public Action unknown_334B_24AD_3595D(int gotoTarget) {
    label_334B_24AD_3595D:
    // PUSH AX (334B_24AD / 0x3595D)
    Stack.Push(AX);
    // PUSH CX (334B_24AE / 0x3595E)
    Stack.Push(CX);
    // PUSH DX (334B_24AF / 0x3595F)
    Stack.Push(DX);
    // PUSH SI (334B_24B0 / 0x35960)
    Stack.Push(SI);
    // PUSH DI (334B_24B1 / 0x35961)
    Stack.Push(DI);
    // CALL 0x3000:5846 (334B_24B2 / 0x35962)
    NearCall(cs2, 0x24B5, unknown_334B_2396_35846);
    // PUSH DX (334B_24B5 / 0x35965)
    Stack.Push(DX);
    // MOV BX,BP (334B_24B6 / 0x35966)
    BX = BP;
    // MOV AH,0x70 (334B_24B8 / 0x35968)
    AH = 0x70;
    // DEC CX (334B_24BA / 0x3596A)
    CX = Alu.Dec16(CX);
    label_334B_24BB_3596B:
    // LODSB SI (334B_24BB / 0x3596B)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,byte ptr [SI] (334B_24BC / 0x3596C)
    Alu.Sub8(AL, UInt8[DS, SI]);
    // JNZ 0x3000:597c (334B_24BE / 0x3596E)
    if(!ZeroFlag) {
      goto label_334B_24CC_3597C;
    }
    // CMP AL,byte ptr [SI + 0xc7] (334B_24C0 / 0x35970)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xC7)]);
    // JNZ 0x3000:597c (334B_24C4 / 0x35974)
    if(!ZeroFlag) {
      goto label_334B_24CC_3597C;
    }
    // XLAT BX (334B_24C6 / 0x35976)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // STOSB ES:DI (334B_24C7 / 0x35977)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:596b (334B_24C8 / 0x35978)
    if(--CX != 0) {
      goto label_334B_24BB_3596B;
    }
    // JMP 0x3000:5981 (334B_24CA / 0x3597A)
    goto label_334B_24D1_35981;
    label_334B_24CC_3597C:
    // MOV AL,AH (334B_24CC / 0x3597C)
    AL = AH;
    // STOSB ES:DI (334B_24CE / 0x3597E)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:596b (334B_24CF / 0x3597F)
    if(--CX != 0) {
      goto label_334B_24BB_3596B;
    }
    label_334B_24D1_35981:
    // LODSB SI (334B_24D1 / 0x35981)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,byte ptr [SI + 0xc7] (334B_24D2 / 0x35982)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xC7)]);
    // JNZ 0x3000:598b (334B_24D6 / 0x35986)
    if(!ZeroFlag) {
      goto label_334B_24DB_3598B;
    }
    // XLAT BX (334B_24D8 / 0x35988)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // JMP 0x3000:598d (334B_24D9 / 0x35989)
    goto label_334B_24DD_3598D;
    label_334B_24DB_3598B:
    // MOV AL,AH (334B_24DB / 0x3598B)
    AL = AH;
    label_334B_24DD_3598D:
    // STOSB ES:DI (334B_24DD / 0x3598D)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // POP CX (334B_24DE / 0x3598E)
    CX = Stack.Pop();
    // CALL 0x3000:5887 (334B_24DF / 0x3598F)
    NearCall(cs2, 0x24E2, unknown_334B_23D7_35887);
    // POP DI (334B_24E2 / 0x35992)
    DI = Stack.Pop();
    // POP SI (334B_24E3 / 0x35993)
    SI = Stack.Pop();
    // POP DX (334B_24E4 / 0x35994)
    DX = Stack.Pop();
    // POP CX (334B_24E5 / 0x35995)
    CX = Stack.Pop();
    // POP AX (334B_24E6 / 0x35996)
    AX = Stack.Pop();
    // INC AX (334B_24E7 / 0x35997)
    AX = Alu.Inc16(AX);
    // RET  (334B_24E8 / 0x35998)
    return NearRet();
  }
  
  public Action unknown_334B_24E9_35999(int gotoTarget) {
    label_334B_24E9_35999:
    // PUSH AX (334B_24E9 / 0x35999)
    Stack.Push(AX);
    // PUSH CX (334B_24EA / 0x3599A)
    Stack.Push(CX);
    // PUSH DX (334B_24EB / 0x3599B)
    Stack.Push(DX);
    // PUSH SI (334B_24EC / 0x3599C)
    Stack.Push(SI);
    // PUSH DI (334B_24ED / 0x3599D)
    Stack.Push(DI);
    // CALL 0x3000:5846 (334B_24EE / 0x3599E)
    NearCall(cs2, 0x24F1, unknown_334B_2396_35846);
    // PUSH DX (334B_24F1 / 0x359A1)
    Stack.Push(DX);
    // MOV BX,BP (334B_24F2 / 0x359A2)
    BX = BP;
    // MOV AH,0x70 (334B_24F4 / 0x359A4)
    AH = 0x70;
    // DEC CX (334B_24F6 / 0x359A6)
    CX = Alu.Dec16(CX);
    label_334B_24F7_359A7:
    // LODSB SI (334B_24F7 / 0x359A7)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,byte ptr [SI] (334B_24F8 / 0x359A8)
    Alu.Sub8(AL, UInt8[DS, SI]);
    // JNZ 0x3000:59c0 (334B_24FA / 0x359AA)
    if(!ZeroFlag) {
      goto label_334B_2510_359C0;
    }
    // CMP AL,byte ptr [SI + 0xc7] (334B_24FC / 0x359AC)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xC7)]);
    // JNZ 0x3000:59c0 (334B_2500 / 0x359B0)
    if(!ZeroFlag) {
      goto label_334B_2510_359C0;
    }
    // XLAT BX (334B_2502 / 0x359B2)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CMP AL,AH (334B_2503 / 0x359B3)
    Alu.Sub8(AL, AH);
    // JZ 0x3000:59c2 (334B_2505 / 0x359B5)
    if(ZeroFlag) {
      goto label_334B_2512_359C2;
    }
    // AND AL,0x3 (334B_2507 / 0x359B7)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // ADD AL,0x71 (334B_2509 / 0x359B9)
    // AL += 0x71;
    AL = Alu.Add8(AL, 0x71);
    // STOSB ES:DI (334B_250B / 0x359BB)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:59a7 (334B_250C / 0x359BC)
    if(--CX != 0) {
      goto label_334B_24F7_359A7;
    }
    // JMP 0x3000:59c5 (334B_250E / 0x359BE)
    goto label_334B_2515_359C5;
    label_334B_2510_359C0:
    // MOV AL,AH (334B_2510 / 0x359C0)
    AL = AH;
    label_334B_2512_359C2:
    // STOSB ES:DI (334B_2512 / 0x359C2)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // LOOP 0x3000:59a7 (334B_2513 / 0x359C3)
    if(--CX != 0) {
      goto label_334B_24F7_359A7;
    }
    label_334B_2515_359C5:
    // LODSB SI (334B_2515 / 0x359C5)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // CMP AL,byte ptr [SI + 0xc7] (334B_2516 / 0x359C6)
    Alu.Sub8(AL, UInt8[DS, (ushort)(SI + 0xC7)]);
    // JNZ 0x3000:59d7 (334B_251A / 0x359CA)
    if(!ZeroFlag) {
      goto label_334B_2527_359D7;
    }
    // XLAT BX (334B_251C / 0x359CC)
    AL = UInt8[DS, (ushort)(BX + AL)];
    // CMP AL,AH (334B_251D / 0x359CD)
    Alu.Sub8(AL, AH);
    // JZ 0x3000:59d9 (334B_251F / 0x359CF)
    if(ZeroFlag) {
      goto label_334B_2529_359D9;
    }
    // AND AL,0x3 (334B_2521 / 0x359D1)
    // AL &= 0x3;
    AL = Alu.And8(AL, 0x3);
    // ADD AL,0x71 (334B_2523 / 0x359D3)
    // AL += 0x71;
    AL = Alu.Add8(AL, 0x71);
    // JMP 0x3000:59d9 (334B_2525 / 0x359D5)
    goto label_334B_2529_359D9;
    label_334B_2527_359D7:
    // MOV AL,AH (334B_2527 / 0x359D7)
    AL = AH;
    label_334B_2529_359D9:
    // STOSB ES:DI (334B_2529 / 0x359D9)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // POP CX (334B_252A / 0x359DA)
    CX = Stack.Pop();
    // CALL 0x3000:5887 (334B_252B / 0x359DB)
    NearCall(cs2, 0x252E, unknown_334B_23D7_35887);
    // POP DI (334B_252E / 0x359DE)
    DI = Stack.Pop();
    // POP SI (334B_252F / 0x359DF)
    SI = Stack.Pop();
    // POP DX (334B_2530 / 0x359E0)
    DX = Stack.Pop();
    // POP CX (334B_2531 / 0x359E1)
    CX = Stack.Pop();
    // POP AX (334B_2532 / 0x359E2)
    AX = Stack.Pop();
    // INC AX (334B_2533 / 0x359E3)
    AX = Alu.Inc16(AX);
    // RET  (334B_2534 / 0x359E4)
    return NearRet();
  }
  
  public Action RetraceRelatedCalledOnEnterGlobe_334B_253D_359ED(int gotoTarget) {
    label_334B_253D_359ED:
    // CMP byte ptr CS:[0x1a1],0x0 (334B_253D / 0x359ED)
    Alu.Sub8(UInt8[cs2, 0x1A1], 0x0);
    // JZ 0x3000:5a14 (334B_2543 / 0x359F3)
    if(ZeroFlag) {
      goto label_334B_2564_35A14;
    }
    label_334B_2545_359F5:
    // MOV AX,word ptr [BP + 0x0] (334B_2545 / 0x359F5)
    AX = UInt16[SS, BP];
    // SUB AX,BX (334B_2548 / 0x359F8)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x5 (334B_254A / 0x359FA)
    Alu.Sub16(AX, 0x5);
    // JC 0x3000:59f5 (334B_254D / 0x359FD)
    if(CarryFlag) {
      goto label_334B_2545_359F5;
    }
    label_334B_254F_359FF:
    // PUSH DX (334B_254F / 0x359FF)
    Stack.Push(DX);
    // MOV DX,word ptr CS:[0x19f] (334B_2550 / 0x35A00)
    DX = UInt16[cs2, 0x19F];
    label_334B_2555_35A05:
    // IN AL,DX (334B_2555 / 0x35A05)
    AL = Cpu.In8(DX);
    // AND AL,0x8 (334B_2556 / 0x35A06)
    // AL &= 0x8;
    AL = Alu.And8(AL, 0x8);
    // CMP AL,byte ptr CS:[0x1a2] (334B_2558 / 0x35A08)
    Alu.Sub8(AL, UInt8[cs2, 0x1A2]);
    // JNZ 0x3000:5a05 (334B_255D / 0x35A0D)
    if(!ZeroFlag) {
      goto label_334B_2555_35A05;
    }
    // POP DX (334B_255F / 0x35A0F)
    DX = Stack.Pop();
    // MOV BX,word ptr [BP + 0x0] (334B_2560 / 0x35A10)
    BX = UInt16[SS, BP];
    // RET  (334B_2563 / 0x35A13)
    return NearRet();
    label_334B_2564_35A14:
    // MOV AX,word ptr [BP + 0x0] (334B_2564 / 0x35A14)
    AX = UInt16[SS, BP];
    // SUB AX,BX (334B_2567 / 0x35A17)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x6 (334B_2569 / 0x35A19)
    Alu.Sub16(AX, 0x6);
    // JC 0x3000:5a14 (334B_256C / 0x35A1C)
    if(CarryFlag) {
      goto label_334B_2564_35A14;
    }
    // MOV BX,word ptr [BP + 0x0] (334B_256E / 0x35A1E)
    BX = UInt16[SS, BP];
    // RET  (334B_2571 / 0x35A21)
    return NearRet();
  }
  
  public Action WaitForRetraceInTransitions_334B_2572_35A22(int gotoTarget) {
    label_334B_2572_35A22:
    // CMP byte ptr CS:[0x1a1],0x0 (334B_2572 / 0x35A22)
    Alu.Sub8(UInt8[cs2, 0x1A1], 0x0);
    // JNZ 0x3000:59ff (334B_2578 / 0x35A28)
    if(!ZeroFlag) {
      // Jump converted to non entry function call
      return RetraceRelatedCalledOnEnterGlobe_334B_253D_359ED(0x359FF - cs1 * 0x10);
    }
    label_334B_257A_35A2A:
    // MOV AX,word ptr [BP + 0x0] (334B_257A / 0x35A2A)
    AX = UInt16[SS, BP];
    // SUB AX,BX (334B_257D / 0x35A2D)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x3 (334B_257F / 0x35A2F)
    Alu.Sub16(AX, 0x3);
    // JC 0x3000:5a2a (334B_2582 / 0x35A32)
    if(CarryFlag) {
      goto label_334B_257A_35A2A;
    }
    // MOV BX,word ptr [BP + 0x0] (334B_2584 / 0x35A34)
    BX = UInt16[SS, BP];
    // RET  (334B_2587 / 0x35A37)
    return NearRet();
  }
  
  public Action unknown_334B_2596_35A46(int gotoTarget) {
    label_334B_2596_35A46:
    // PUSH DS (334B_2596 / 0x35A46)
    Stack.Push(DS);
    // PUSH ES (334B_2597 / 0x35A47)
    Stack.Push(ES);
    // MOV DS,word ptr CS:[0x2539] (334B_2598 / 0x35A48)
    DS = UInt16[cs2, 0x2539];
    // MOV ES,word ptr CS:[0x2535] (334B_259D / 0x35A4D)
    ES = UInt16[cs2, 0x2535];
    // PUSH CS (334B_25A2 / 0x35A52)
    Stack.Push(cs2);
    // CALL 0x3000:502c (334B_25A3 / 0x35A53)
    NearCall(cs2, 0x25A6, MemcpyDSToESFor64000_334B_1B7C_3502C);
    // POP ES (334B_25A6 / 0x35A56)
    ES = Stack.Pop();
    // POP DS (334B_25A7 / 0x35A57)
    DS = Stack.Pop();
    // RET  (334B_25A8 / 0x35A58)
    return NearRet();
  }
  
  public Action spice86_label_334B_25E7_35A97(int gotoTarget) {
    switch(gotoTarget) {
      case 0x25A97: goto label_334B_25E7_35A97;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_25E7_35A97:
    // MOV word ptr CS:[0x2768],0x8 (334B_25E7 / 0x35A97)
    UInt16[cs2, 0x2768] = 0x8;
    // MOV word ptr CS:[0x276a],0x1 (334B_25EE / 0x35A9E)
    UInt16[cs2, 0x276A] = 0x1;
    // MOV word ptr CS:[0x2535],SI (334B_25F5 / 0x35AA5)
    UInt16[cs2, 0x2535] = SI;
    // MOV word ptr CS:[0x2537],DS (334B_25FA / 0x35AAA)
    UInt16[cs2, 0x2537] = DS;
    // MOV word ptr CS:[0x2539],ES (334B_25FF / 0x35AAF)
    UInt16[cs2, 0x2539] = ES;
    // MOV CX,0x98 (334B_2604 / 0x35AB4)
    CX = 0x98;
    // AND AX,0xfe (334B_2607 / 0x35AB7)
    // AX &= 0xFE;
    AX = Alu.And16(AX, 0xFE);
    label_334B_260A_35ABA:
    // CMP AX,0x3e (334B_260A / 0x35ABA)
    Alu.Sub16(AX, 0x3E);
    // JC 0x3000:5ac4 (334B_260D / 0x35ABD)
    if(CarryFlag) {
      goto label_334B_2614_35AC4;
    }
    // SUB AX,0x3e (334B_260F / 0x35ABF)
    // AX -= 0x3E;
    AX = Alu.Sub16(AX, 0x3E);
    // JMP 0x3000:5aba (334B_2612 / 0x35AC2)
    goto label_334B_260A_35ABA;
    label_334B_2614_35AC4:
    // MOV BX,AX (334B_2614 / 0x35AC4)
    BX = AX;
    // JMP word ptr CS:[BX + 0x25a9] (334B_2616 / 0x35AC6)
    // Indirect jump to word ptr CS:[BX + 0x25a9], generating possible targets from emulator records
    uint targetAddress_334B_2616 = (uint)(cs2 * 0x10 + UInt16[cs2, (ushort)(BX + 0x25A9)] - cs1 * 0x10);
    switch(targetAddress_334B_2616) {
      case 0x25BDE : throw FailAsUntested("Would have been a goto but label label_334B_272E_35BDE does not exist because no instruction was found there that belongs to a function.");
      case 0x25C07 : throw FailAsUntested("Would have been a goto but label label_334B_2757_35C07 does not exist because no instruction was found there that belongs to a function.");
      case 0x26273 : throw FailAsUntested("Would have been a goto but label label_334B_2DC3_36273 does not exist because no instruction was found there that belongs to a function.");
      case 0x26270 : throw FailAsUntested("Would have been a goto but label label_334B_2DC0_36270 does not exist because no instruction was found there that belongs to a function.");
      case 0x2617A : throw FailAsUntested("Would have been a goto but label label_334B_2CCA_3617A does not exist because no instruction was found there that belongs to a function.");
      case 0x25F18 : throw FailAsUntested("Would have been a goto but label label_334B_2A68_35F18 does not exist because no instruction was found there that belongs to a function.");
      case 0x25F81 : throw FailAsUntested("Would have been a goto but label label_334B_2AD1_35F81 does not exist because no instruction was found there that belongs to a function.");
      case 0x265E0 : throw FailAsUntested("Would have been a goto but label label_334B_3130_365E0 does not exist because no instruction was found there that belongs to a function.");
      case 0x2639A : throw FailAsUntested("Would have been a goto but label label_334B_2EEA_3639A does not exist because no instruction was found there that belongs to a function.");
      case 0x25EC5 : throw FailAsUntested("Would have been a goto but label label_334B_2A15_35EC5 does not exist because no instruction was found there that belongs to a function.");
      case 0x2644F : throw FailAsUntested("Would have been a goto but label label_334B_2F9F_3644F does not exist because no instruction was found there that belongs to a function.");
      case 0x26403 : throw FailAsUntested("Would have been a goto but label label_334B_2F53_36403 does not exist because no instruction was found there that belongs to a function.");
      case 0x25EC0 : throw FailAsUntested("Would have been a goto but label label_334B_2A10_35EC0 does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_334B_2616);
        break;
    }
    // Function call generated as ASM continues to next function entry point without return
    return WaitForRetraceDuringIntroVideo_334B_261D_35ACD(0);
  }
  
  public Action WaitForRetraceDuringIntroVideo_334B_261D_35ACD(int gotoTarget) {
    label_334B_261D_35ACD:
    // CMP byte ptr [0x1a1],0x0 (334B_261D / 0x35ACD)
    Alu.Sub8(UInt8[DS, 0x1A1], 0x0);
    // JNZ 0x3000:5ad7 (334B_2622 / 0x35AD2)
    if(!ZeroFlag) {
      // JNZ target is RET, inlining.
      // RET  (334B_2627 / 0x35AD7)
      return NearRet();
    }
    // CALL 0x3000:5a22 (334B_2624 / 0x35AD4)
    NearCall(cs2, 0x2627, WaitForRetraceInTransitions_334B_2572_35A22);
    label_334B_2627_35AD7:
    // RET  (334B_2627 / 0x35AD7)
    return NearRet();
  }
  
  public Action unknown_334B_26E3_35B93(int gotoTarget) {
    label_334B_26E3_35B93:
    // MOV CS:[0x261b],AX (334B_26E3 / 0x35B93)
    UInt16[cs2, 0x261B] = AX;
    label_334B_26E7_35B97:
    // XOR BX,BX (334B_26E7 / 0x35B97)
    BX = 0;
    label_334B_26E9_35B99:
    // PUSH BX (334B_26E9 / 0x35B99)
    Stack.Push(BX);
    // PUSH DX (334B_26EA / 0x35B9A)
    Stack.Push(DX);
    // PUSH word ptr [BP + 0x0] (334B_26EB / 0x35B9B)
    Stack.Push(UInt16[SS, BP]);
    // MOV SI,0x5bf (334B_26EE / 0x35B9E)
    SI = 0x5BF;
    // ADD SI,BX (334B_26F1 / 0x35BA1)
    // SI += BX;
    SI = Alu.Add16(SI, BX);
    // ADD SI,BX (334B_26F3 / 0x35BA3)
    // SI += BX;
    SI = Alu.Add16(SI, BX);
    // ADD SI,BX (334B_26F5 / 0x35BA5)
    // SI += BX;
    SI = Alu.Add16(SI, BX);
    // MOV DI,SI (334B_26F7 / 0x35BA7)
    DI = SI;
    // MOV AX,CS:[0x261b] (334B_26F9 / 0x35BA9)
    AX = UInt16[cs2, 0x261B];
    // PUSH AX (334B_26FD / 0x35BAD)
    Stack.Push(AX);
    // MOV CX,AX (334B_26FE / 0x35BAE)
    CX = AX;
    // ADD CX,CX (334B_2700 / 0x35BB0)
    // CX += CX;
    CX = Alu.Add16(CX, CX);
    // ADD CX,AX (334B_2702 / 0x35BB2)
    // CX += AX;
    CX = Alu.Add16(CX, AX);
    label_334B_2704_35BB4:
    // MOV AL,byte ptr [SI] (334B_2704 / 0x35BB4)
    AL = UInt8[DS, SI];
    // SUB AL,DH (334B_2706 / 0x35BB6)
    // AL -= DH;
    AL = Alu.Sub8(AL, DH);
    // JNS 0x3000:5bbc (334B_2708 / 0x35BB8)
    if(!SignFlag) {
      goto label_334B_270C_35BBC;
    }
    // XOR AL,AL (334B_270A / 0x35BBA)
    AL = 0;
    label_334B_270C_35BBC:
    // MOV byte ptr [SI],AL (334B_270C / 0x35BBC)
    UInt8[DS, SI] = AL;
    // INC SI (334B_270E / 0x35BBE)
    SI = Alu.Inc16(SI);
    // LOOP 0x3000:5bb4 (334B_270F / 0x35BBF)
    if(--CX != 0) {
      goto label_334B_2704_35BB4;
    }
    // POP CX (334B_2711 / 0x35BC1)
    CX = Stack.Pop();
    // MOV DX,DI (334B_2712 / 0x35BC2)
    DX = DI;
    // CALL 0x3000:4018 (334B_2714 / 0x35BC4)
    NearCall(cs2, 0x2717, LoadPaletteInVgaDac_334B_0B68_34018);
    // POP BX (334B_2717 / 0x35BC7)
    BX = Stack.Pop();
    // CALL 0x3000:5acd (334B_2718 / 0x35BC8)
    NearCall(cs2, 0x271B, WaitForRetraceDuringIntroVideo_334B_261D_35ACD);
    // POP DX (334B_271B / 0x35BCB)
    DX = Stack.Pop();
    // POP BX (334B_271C / 0x35BCC)
    BX = Stack.Pop();
    // MOV AX,CS:[0x261b] (334B_271D / 0x35BCD)
    AX = UInt16[cs2, 0x261B];
    // ADD BX,AX (334B_2721 / 0x35BD1)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // CMP BX,0xff (334B_2723 / 0x35BD3)
    Alu.Sub16(BX, 0xFF);
    // JC 0x3000:5b99 (334B_2727 / 0x35BD7)
    if(CarryFlag) {
      goto label_334B_26E9_35B99;
    }
    // DEC DL (334B_2729 / 0x35BD9)
    DL = Alu.Dec8(DL);
    // JNZ 0x3000:5b97 (334B_272B / 0x35BDB)
    if(!ZeroFlag) {
      goto label_334B_26E7_35B97;
    }
    // RET  (334B_272D / 0x35BDD)
    return NearRet();
  }
  
  public Action unknown_334B_2AB0_35F60(int gotoTarget) {
    label_334B_2AB0_35F60:
    // PUSH word ptr [BP + 0x0] (334B_2AB0 / 0x35F60)
    Stack.Push(UInt16[SS, BP]);
    // MOV BX,DX (334B_2AB3 / 0x35F63)
    BX = DX;
    label_334B_2AB5_35F65:
    // MOV CX,0x4 (334B_2AB5 / 0x35F65)
    CX = 0x4;
    label_334B_2AB8_35F68:
    // MOV SI,DI (334B_2AB8 / 0x35F68)
    SI = DI;
    // MOVSW ES:DI,SI (334B_2ABA / 0x35F6A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2ABB / 0x35F6B)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2ABC / 0x35F6C)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2ABD / 0x35F6D)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x138 (334B_2ABE / 0x35F6E)
    // DI += 0x138;
    DI = Alu.Add16(DI, 0x138);
    // LOOP 0x3000:5f68 (334B_2AC2 / 0x35F72)
    if(--CX != 0) {
      goto label_334B_2AB8_35F68;
    }
    // ADD DI,AX (334B_2AC4 / 0x35F74)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // DEC BX (334B_2AC6 / 0x35F76)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:5f65 (334B_2AC7 / 0x35F77)
    if(!ZeroFlag) {
      goto label_334B_2AB5_35F65;
    }
    // POP AX (334B_2AC9 / 0x35F79)
    AX = Stack.Pop();
    label_334B_2ACA_35F7A:
    // CMP AX,word ptr [BP + 0x0] (334B_2ACA / 0x35F7A)
    Alu.Sub16(AX, UInt16[SS, BP]);
    // JZ 0x3000:5f7a (334B_2ACD / 0x35F7D)
    if(ZeroFlag) {
      goto label_334B_2ACA_35F7A;
    }
    // RET  (334B_2ACF / 0x35F7F)
    return NearRet();
  }
  
  public Action unknown_334B_2B56_36006(int gotoTarget) {
    label_334B_2B56_36006:
    // PUSH DX (334B_2B56 / 0x36006)
    Stack.Push(DX);
    // MOV AX,0xc8 (334B_2B57 / 0x36007)
    AX = 0xC8;
    // NEG DX (334B_2B5A / 0x3600A)
    DX = Alu.Sub16(0, DX);
    // ADD DX,0x140 (334B_2B5C / 0x3600C)
    // DX += 0x140;
    DX = Alu.Add16(DX, 0x140);
    // INC DX (334B_2B60 / 0x36010)
    DX = Alu.Inc16(DX);
    // MUL DX (334B_2B61 / 0x36011)
    Cpu.Mul16(DX);
    // MOV SI,AX (334B_2B63 / 0x36013)
    SI = AX;
    // MOV AX,0x98 (334B_2B65 / 0x36015)
    AX = 0x98;
    // SUB SI,AX (334B_2B68 / 0x36018)
    // SI -= AX;
    SI = Alu.Sub16(SI, AX);
    // POP DX (334B_2B6A / 0x3601A)
    DX = Stack.Pop();
    // CMP DX,AX (334B_2B6B / 0x3601B)
    Alu.Sub16(DX, AX);
    // JNC 0x3000:6023 (334B_2B6D / 0x3601D)
    if(!CarryFlag) {
      goto label_334B_2B73_36023;
    }
    // ADD SI,AX (334B_2B6F / 0x3601F)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    // SUB SI,DX (334B_2B71 / 0x36021)
    // SI -= DX;
    SI = Alu.Sub16(SI, DX);
    label_334B_2B73_36023:
    // SUB AX,BX (334B_2B73 / 0x36023)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,DX (334B_2B75 / 0x36025)
    Alu.Sub16(AX, DX);
    // JC 0x3000:602b (334B_2B77 / 0x36027)
    if(CarryFlag) {
      goto label_334B_2B7B_3602B;
    }
    // MOV AX,DX (334B_2B79 / 0x36029)
    AX = DX;
    label_334B_2B7B_3602B:
    // MOV DS,word ptr CS:[0x2535] (334B_2B7B / 0x3602B)
    DS = UInt16[cs2, 0x2535];
    // SUB DI,AX (334B_2B80 / 0x36030)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    label_334B_2B82_36032:
    // MOV CX,AX (334B_2B82 / 0x36032)
    CX = AX;
    // SHR CX,1 (334B_2B84 / 0x36034)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_2B86 / 0x36036)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // SUB SI,AX (334B_2B88 / 0x36038)
    // SI -= AX;
    SI = Alu.Sub16(SI, AX);
    // SUB DI,AX (334B_2B8A / 0x3603A)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // ADD SI,0xc8 (334B_2B8C / 0x3603C)
    // SI += 0xC8;
    SI = Alu.Add16(SI, 0xC8);
    // ADD DI,0x140 (334B_2B90 / 0x36040)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC AX (334B_2B94 / 0x36044)
    AX = Alu.Dec16(AX);
    // MOV CX,AX (334B_2B95 / 0x36045)
    CX = AX;
    // SHR CX,1 (334B_2B97 / 0x36047)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_2B99 / 0x36049)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOVSB ES:DI,SI (334B_2B9B / 0x3604B)
    UInt8[ES, DI] = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // SUB SI,AX (334B_2B9C / 0x3604C)
    // SI -= AX;
    SI = Alu.Sub16(SI, AX);
    // SUB DI,AX (334B_2B9E / 0x3604E)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // ADD SI,0xc8 (334B_2BA0 / 0x36050)
    // SI += 0xC8;
    SI = Alu.Add16(SI, 0xC8);
    // ADD DI,0x140 (334B_2BA4 / 0x36054)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC AX (334B_2BA8 / 0x36058)
    AX = Alu.Dec16(AX);
    // JG 0x3000:6032 (334B_2BA9 / 0x36059)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      goto label_334B_2B82_36032;
    }
    // RET  (334B_2BAB / 0x3605B)
    return NearRet();
  }
  
  public Action unknown_334B_2BAC_3605C(int gotoTarget) {
    label_334B_2BAC_3605C:
    // MOV DS,word ptr CS:[0x2537] (334B_2BAC / 0x3605C)
    DS = UInt16[cs2, 0x2537];
    // MOV AX,0x98 (334B_2BB1 / 0x36061)
    AX = 0x98;
    // SUB AX,BX (334B_2BB4 / 0x36064)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // MOV BX,DX (334B_2BB6 / 0x36066)
    BX = DX;
    // SUB BX,AX (334B_2BB8 / 0x36068)
    // BX -= AX;
    BX = Alu.Sub16(BX, AX);
    // JNS 0x3000:606e (334B_2BBA / 0x3606A)
    if(!SignFlag) {
      goto label_334B_2BBE_3606E;
    }
    // ADD AX,BX (334B_2BBC / 0x3606C)
    // AX += BX;
    AX = Alu.Add16(AX, BX);
    label_334B_2BBE_3606E:
    // CMP DX,0x138 (334B_2BBE / 0x3606E)
    Alu.Sub16(DX, 0x138);
    // JBE 0x3000:608d (334B_2BC2 / 0x36072)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_2BDD_3608D;
    }
    // XOR DX,DX (334B_2BC4 / 0x36074)
    DX = 0;
    label_334B_2BC6_36076:
    // MOV CX,DX (334B_2BC6 / 0x36076)
    CX = DX;
    // MOV SI,DI (334B_2BC8 / 0x36078)
    SI = DI;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_2BCA / 0x3607A)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // SUB DI,DX (334B_2BCC / 0x3607C)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // ADD DI,0x13f (334B_2BCE / 0x3607E)
    // DI += 0x13F;
    DI = Alu.Add16(DI, 0x13F);
    // INC DX (334B_2BD2 / 0x36082)
    DX = Alu.Inc16(DX);
    // CMP DX,0x8 (334B_2BD3 / 0x36083)
    Alu.Sub16(DX, 0x8);
    // JC 0x3000:6076 (334B_2BD6 / 0x36086)
    if(CarryFlag) {
      goto label_334B_2BC6_36076;
    }
    // SUB AX,0x8 (334B_2BD8 / 0x36088)
    // AX -= 0x8;
    AX = Alu.Sub16(AX, 0x8);
    // JBE 0x3000:60b1 (334B_2BDB / 0x3608B)
    if(CarryFlag || ZeroFlag) {
      // JBE target is RET, inlining.
      // RET  (334B_2C01 / 0x360B1)
      return NearRet();
    }
    label_334B_2BDD_3608D:
    // MOV SI,DI (334B_2BDD / 0x3608D)
    SI = DI;
    // MOV CX,0x4 (334B_2BDF / 0x3608F)
    CX = 0x4;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_2BE2 / 0x36092)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0x137 (334B_2BE4 / 0x36094)
    // DI += 0x137;
    DI = Alu.Add16(DI, 0x137);
    // DEC AX (334B_2BE8 / 0x36098)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:608d (334B_2BE9 / 0x36099)
    if(!ZeroFlag) {
      goto label_334B_2BDD_3608D;
    }
    // OR BX,BX (334B_2BEB / 0x3609B)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JGE 0x3000:60b1 (334B_2BED / 0x3609D)
    if(SignFlag == OverflowFlag) {
      // JGE target is RET, inlining.
      // RET  (334B_2C01 / 0x360B1)
      return NearRet();
    }
    // MOV DX,0x8 (334B_2BEF / 0x3609F)
    DX = 0x8;
    label_334B_2BF2_360A2:
    // MOV CX,DX (334B_2BF2 / 0x360A2)
    CX = DX;
    // MOV SI,DI (334B_2BF4 / 0x360A4)
    SI = DI;
    while (CX-- != 0) {
      // MOVSB ES:DI,SI (334B_2BF6 / 0x360A6)
      UInt8[ES, DI] = UInt8[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
      DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    }
    // SUB DI,DX (334B_2BF8 / 0x360A8)
    // DI -= DX;
    DI = Alu.Sub16(DI, DX);
    // ADD DI,0x140 (334B_2BFA / 0x360AA)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC DX (334B_2BFE / 0x360AE)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:60a2 (334B_2BFF / 0x360AF)
    if(!ZeroFlag) {
      goto label_334B_2BF2_360A2;
    }
    label_334B_2C01_360B1:
    // RET  (334B_2C01 / 0x360B1)
    return NearRet();
  }
  
  public Action unknown_334B_2C02_360B2(int gotoTarget) {
    label_334B_2C02_360B2:
    // MOV DS,word ptr CS:[0x2537] (334B_2C02 / 0x360B2)
    DS = UInt16[cs2, 0x2537];
    // MOV AX,0x98 (334B_2C07 / 0x360B7)
    AX = 0x98;
    // ADD AX,0x8 (334B_2C0A / 0x360BA)
    // AX += 0x8;
    AX = Alu.Add16(AX, 0x8);
    // CMP DI,AX (334B_2C0D / 0x360BD)
    Alu.Sub16(DI, AX);
    // JC 0x3000:6101 (334B_2C0F / 0x360BF)
    if(CarryFlag) {
      // JC target is RET, inlining.
      // RET  (334B_2C51 / 0x36101)
      return NearRet();
    }
    // OR BX,BX (334B_2C11 / 0x360C1)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // SUB AX,0x8 (334B_2C13 / 0x360C3)
    // AX -= 0x8;
    AX = Alu.Sub16(AX, 0x8);
    // OR BX,BX (334B_2C16 / 0x360C6)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // JLE 0x3000:60ee (334B_2C18 / 0x360C8)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_2C3E_360EE;
    }
    // ADD AX,0x8 (334B_2C1A / 0x360CA)
    // AX += 0x8;
    AX = Alu.Add16(AX, 0x8);
    // SUB AX,BX (334B_2C1D / 0x360CD)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // SUB DI,AX (334B_2C1F / 0x360CF)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // SUB DI,0xa00 (334B_2C21 / 0x360D1)
    // DI -= 0xA00;
    DI = Alu.Sub16(DI, 0xA00);
    // MOV DX,0x8 (334B_2C25 / 0x360D5)
    DX = 0x8;
    label_334B_2C28_360D8:
    // MOV CX,AX (334B_2C28 / 0x360D8)
    CX = AX;
    // SHR CX,1 (334B_2C2A / 0x360DA)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // MOV SI,DI (334B_2C2C / 0x360DC)
    SI = DI;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_2C2E / 0x360DE)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // SUB DI,AX (334B_2C30 / 0x360E0)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // ADD DI,0x140 (334B_2C32 / 0x360E2)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC DX (334B_2C36 / 0x360E6)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:60d8 (334B_2C37 / 0x360E7)
    if(!ZeroFlag) {
      goto label_334B_2C28_360D8;
    }
    // SUB AX,0x8 (334B_2C39 / 0x360E9)
    // AX -= 0x8;
    AX = Alu.Sub16(AX, 0x8);
    // JMP 0x3000:60f3 (334B_2C3C / 0x360EC)
    goto label_334B_2C43_360F3;
    label_334B_2C3E_360EE:
    // SUB DI,AX (334B_2C3E / 0x360EE)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // SUB DI,0x8 (334B_2C40 / 0x360F0)
    // DI -= 0x8;
    DI = Alu.Sub16(DI, 0x8);
    label_334B_2C43_360F3:
    // MOV SI,DI (334B_2C43 / 0x360F3)
    SI = DI;
    // MOV CX,0x4 (334B_2C45 / 0x360F5)
    CX = 0x4;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_2C48 / 0x360F8)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0x138 (334B_2C4A / 0x360FA)
    // DI += 0x138;
    DI = Alu.Add16(DI, 0x138);
    // DEC AX (334B_2C4E / 0x360FE)
    AX = Alu.Dec16(AX);
    // JNZ 0x3000:60f3 (334B_2C4F / 0x360FF)
    if(!ZeroFlag) {
      goto label_334B_2C43_360F3;
    }
    label_334B_2C51_36101:
    // RET  (334B_2C51 / 0x36101)
    return NearRet();
  }
  
  public Action unknown_334B_2C52_36102(int gotoTarget) {
    label_334B_2C52_36102:
    // PUSH ES (334B_2C52 / 0x36102)
    Stack.Push(ES);
    // MOV ES,word ptr CS:[0x2535] (334B_2C53 / 0x36103)
    ES = UInt16[cs2, 0x2535];
    // MOV SI,0xf9ff (334B_2C58 / 0x36108)
    SI = 0xF9FF;
    // XOR DI,DI (334B_2C5B / 0x3610B)
    DI = 0;
    // MOV DX,0x140 (334B_2C5D / 0x3610D)
    DX = 0x140;
    // MOV BX,0x6062 (334B_2C60 / 0x36110)
    BX = 0x6062;
    label_334B_2C63_36113:
    // PUSH SI (334B_2C63 / 0x36113)
    Stack.Push(SI);
    // MOV CX,0x32 (334B_2C64 / 0x36114)
    CX = 0x32;
    label_334B_2C67_36117:
    // MOV AH,byte ptr [SI + 0xfec0] (334B_2C67 / 0x36117)
    AH = UInt8[DS, (ushort)(SI + 0xFEC0)];
    // CMP AH,BH (334B_2C6B / 0x3611B)
    Alu.Sub8(AH, BH);
    // JC 0x3000:6126 (334B_2C6D / 0x3611D)
    if(CarryFlag) {
      goto label_334B_2C76_36126;
    }
    // CMP AH,BL (334B_2C6F / 0x3611F)
    Alu.Sub8(AH, BL);
    // JNC 0x3000:6126 (334B_2C71 / 0x36121)
    if(!CarryFlag) {
      goto label_334B_2C76_36126;
    }
    // ADD AH,0x2 (334B_2C73 / 0x36123)
    // AH += 0x2;
    AH = Alu.Add8(AH, 0x2);
    label_334B_2C76_36126:
    // MOV AL,byte ptr [SI] (334B_2C76 / 0x36126)
    AL = UInt8[DS, SI];
    // CMP AL,BH (334B_2C78 / 0x36128)
    Alu.Sub8(AL, BH);
    // JC 0x3000:6132 (334B_2C7A / 0x3612A)
    if(CarryFlag) {
      goto label_334B_2C82_36132;
    }
    // CMP AL,BL (334B_2C7C / 0x3612C)
    Alu.Sub8(AL, BL);
    // JNC 0x3000:6132 (334B_2C7E / 0x3612E)
    if(!CarryFlag) {
      goto label_334B_2C82_36132;
    }
    // ADD AL,0x2 (334B_2C80 / 0x36130)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    label_334B_2C82_36132:
    // STOSW ES:DI (334B_2C82 / 0x36132)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOV AH,byte ptr [SI + 0xfc40] (334B_2C83 / 0x36133)
    AH = UInt8[DS, (ushort)(SI + 0xFC40)];
    // CMP AH,BH (334B_2C87 / 0x36137)
    Alu.Sub8(AH, BH);
    // JC 0x3000:6142 (334B_2C89 / 0x36139)
    if(CarryFlag) {
      goto label_334B_2C92_36142;
    }
    // CMP AH,BL (334B_2C8B / 0x3613B)
    Alu.Sub8(AH, BL);
    // JNC 0x3000:6142 (334B_2C8D / 0x3613D)
    if(!CarryFlag) {
      goto label_334B_2C92_36142;
    }
    // ADD AH,0x2 (334B_2C8F / 0x3613F)
    // AH += 0x2;
    AH = Alu.Add8(AH, 0x2);
    label_334B_2C92_36142:
    // MOV AL,byte ptr [SI + 0xfd80] (334B_2C92 / 0x36142)
    AL = UInt8[DS, (ushort)(SI + 0xFD80)];
    // CMP AL,BH (334B_2C96 / 0x36146)
    Alu.Sub8(AL, BH);
    // JC 0x3000:6150 (334B_2C98 / 0x36148)
    if(CarryFlag) {
      goto label_334B_2CA0_36150;
    }
    // CMP AL,BL (334B_2C9A / 0x3614A)
    Alu.Sub8(AL, BL);
    // JNC 0x3000:6150 (334B_2C9C / 0x3614C)
    if(!CarryFlag) {
      goto label_334B_2CA0_36150;
    }
    // ADD AL,0x2 (334B_2C9E / 0x3614E)
    // AL += 0x2;
    AL = Alu.Add8(AL, 0x2);
    label_334B_2CA0_36150:
    // STOSW ES:DI (334B_2CA0 / 0x36150)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // SUB SI,0x500 (334B_2CA1 / 0x36151)
    // SI -= 0x500;
    SI = Alu.Sub16(SI, 0x500);
    // LOOP 0x3000:6117 (334B_2CA5 / 0x36155)
    if(--CX != 0) {
      goto label_334B_2C67_36117;
    }
    // POP SI (334B_2CA7 / 0x36157)
    SI = Stack.Pop();
    // DEC SI (334B_2CA8 / 0x36158)
    SI = Alu.Dec16(SI);
    // DEC DX (334B_2CA9 / 0x36159)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:6113 (334B_2CAA / 0x3615A)
    if(!ZeroFlag) {
      goto label_334B_2C63_36113;
    }
    // PUSH DS (334B_2CAC / 0x3615C)
    Stack.Push(DS);
    // PUSH ES (334B_2CAD / 0x3615D)
    Stack.Push(ES);
    // POP DS (334B_2CAE / 0x3615E)
    DS = Stack.Pop();
    // MOV DI,0x62a0 (334B_2CAF / 0x3615F)
    DI = 0x62A0;
    // MOV DX,0x44 (334B_2CB2 / 0x36162)
    DX = 0x44;
    label_334B_2CB5_36165:
    // LEA SI,[DI + 0xd5d0] (334B_2CB5 / 0x36165)
    SI = (ushort)(DI + 0xD5D0);
    // MOVSW ES:DI,SI (334B_2CB9 / 0x36169)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2CBA / 0x3616A)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2CBB / 0x3616B)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // MOVSW ES:DI,SI (334B_2CBC / 0x3616C)
    UInt16[ES, DI] = UInt16[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0xc0 (334B_2CBD / 0x3616D)
    // DI += 0xC0;
    DI = Alu.Add16(DI, 0xC0);
    // DEC DX (334B_2CC1 / 0x36171)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:6165 (334B_2CC2 / 0x36172)
    if(!ZeroFlag) {
      goto label_334B_2CB5_36165;
    }
    // POP DS (334B_2CC4 / 0x36174)
    DS = Stack.Pop();
    // POP ES (334B_2CC5 / 0x36175)
    ES = Stack.Pop();
    // RET  (334B_2CC6 / 0x36176)
    return NearRet();
  }
  
  public Action unknown_334B_2FC1_36471(int gotoTarget) {
    label_334B_2FC1_36471:
    // MOV BX,word ptr [BP + 0x0] (334B_2FC1 / 0x36471)
    BX = UInt16[SS, BP];
    label_334B_2FC4_36474:
    // MOV SI,0x2fb7 (334B_2FC4 / 0x36474)
    SI = 0x2FB7;
    label_334B_2FC7_36477:
    // LODSW CS:SI (334B_2FC7 / 0x36477)
    AX = UInt16[cs2, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (334B_2FC9 / 0x36479)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x3000:6474 (334B_2FCB / 0x3647B)
    if(SignFlag) {
      goto label_334B_2FC4_36474;
    }
    // PUSH SI (334B_2FCD / 0x3647D)
    Stack.Push(SI);
    // MOV SI,AX (334B_2FCE / 0x3647E)
    SI = AX;
    // CALL 0x3000:6575 (334B_2FD0 / 0x36480)
    NearCall(cs2, 0x2FD3, unknown_334B_30C5_36575);
    // POP SI (334B_2FD3 / 0x36483)
    SI = Stack.Pop();
    // JC 0x3000:6477 (334B_2FD4 / 0x36484)
    if(CarryFlag) {
      goto label_334B_2FC7_36477;
    }
    // RET  (334B_2FD6 / 0x36486)
    return NearRet();
  }
  
  public Action unknown_334B_2FF9_364A9(int gotoTarget) {
    label_334B_2FF9_364A9:
    // MOV BX,word ptr [BP + 0x0] (334B_2FF9 / 0x364A9)
    BX = UInt16[SS, BP];
    label_334B_2FFC_364AC:
    // MOV SI,0x2fd7 (334B_2FFC / 0x364AC)
    SI = 0x2FD7;
    label_334B_2FFF_364AF:
    // LODSW CS:SI (334B_2FFF / 0x364AF)
    AX = UInt16[cs2, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (334B_3001 / 0x364B1)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x3000:64ac (334B_3003 / 0x364B3)
    if(SignFlag) {
      goto label_334B_2FFC_364AC;
    }
    // PUSH SI (334B_3005 / 0x364B5)
    Stack.Push(SI);
    // MOV SI,AX (334B_3006 / 0x364B6)
    SI = AX;
    // CALL 0x3000:653c (334B_3008 / 0x364B8)
    NearCall(cs2, 0x300B, unknown_334B_308C_3653C);
    // POP SI (334B_300B / 0x364BB)
    SI = Stack.Pop();
    // JC 0x3000:64af (334B_300C / 0x364BC)
    if(CarryFlag) {
      goto label_334B_2FFF_364AF;
    }
    // RET  (334B_300E / 0x364BE)
    return NearRet();
  }
  
  public Action unknown_334B_3031_364E1(int gotoTarget) {
    label_334B_3031_364E1:
    // MOV BX,word ptr [BP + 0x0] (334B_3031 / 0x364E1)
    BX = UInt16[SS, BP];
    label_334B_3034_364E4:
    // MOV SI,0x300f (334B_3034 / 0x364E4)
    SI = 0x300F;
    label_334B_3037_364E7:
    // LODSW CS:SI (334B_3037 / 0x364E7)
    AX = UInt16[cs2, SI];
    SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // OR AX,AX (334B_3039 / 0x364E9)
    // AX |= AX;
    AX = Alu.Or16(AX, AX);
    // JS 0x3000:64e4 (334B_303B / 0x364EB)
    if(SignFlag) {
      goto label_334B_3034_364E4;
    }
    // PUSH SI (334B_303D / 0x364ED)
    Stack.Push(SI);
    // MOV SI,AX (334B_303E / 0x364EE)
    SI = AX;
    // CALL 0x3000:64f7 (334B_3040 / 0x364F0)
    NearCall(cs2, 0x3043, unknown_334B_3047_364F7);
    // POP SI (334B_3043 / 0x364F3)
    SI = Stack.Pop();
    // JC 0x3000:64e7 (334B_3044 / 0x364F4)
    if(CarryFlag) {
      goto label_334B_3037_364E7;
    }
    // RET  (334B_3046 / 0x364F6)
    return NearRet();
  }
  
  public Action unknown_334B_3047_364F7(int gotoTarget) {
    switch(gotoTarget) {
      case 0x26532: goto label_334B_3082_36532;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_3047_364F7:
    // PUSH CX (334B_3047 / 0x364F7)
    Stack.Push(CX);
    // MOV DI,word ptr CS:[0x1a3] (334B_3048 / 0x364F8)
    DI = UInt16[cs2, 0x1A3];
    // ADD SI,DI (334B_304D / 0x364FD)
    // SI += DI;
    SI = Alu.Add16(SI, DI);
    // SHR CX,1 (334B_304F / 0x364FF)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (334B_3051 / 0x36501)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (334B_3053 / 0x36503)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    label_334B_3055_36505:
    // PUSH CX (334B_3055 / 0x36505)
    Stack.Push(CX);
    // PUSH SI (334B_3056 / 0x36506)
    Stack.Push(SI);
    // PUSH DI (334B_3057 / 0x36507)
    Stack.Push(DI);
    // MOV CX,0x28 (334B_3058 / 0x36508)
    CX = 0x28;
    label_334B_305B_3650B:
    // LODSB SI (334B_305B / 0x3650B)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD SI,0x7 (334B_305C / 0x3650C)
    // SI += 0x7;
    SI = Alu.Add16(SI, 0x7);
    // MOV AH,AL (334B_305F / 0x3650F)
    AH = AL;
    // MOV DX,0x8 (334B_3061 / 0x36511)
    DX = 0x8;
    label_334B_3064_36514:
    // STOSW ES:DI (334B_3064 / 0x36514)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_3065 / 0x36515)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_3066 / 0x36516)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_3067 / 0x36517)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x138 (334B_3068 / 0x36518)
    // DI += 0x138;
    DI = Alu.Add16(DI, 0x138);
    // DEC DX (334B_306C / 0x3651C)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:6514 (334B_306D / 0x3651D)
    if(!ZeroFlag) {
      goto label_334B_3064_36514;
    }
    // SUB DI,0x9f8 (334B_306F / 0x3651F)
    // DI -= 0x9F8;
    DI = Alu.Sub16(DI, 0x9F8);
    // LOOP 0x3000:650b (334B_3073 / 0x36523)
    if(--CX != 0) {
      goto label_334B_305B_3650B;
    }
    // POP DI (334B_3075 / 0x36525)
    DI = Stack.Pop();
    // POP SI (334B_3076 / 0x36526)
    SI = Stack.Pop();
    // POP CX (334B_3077 / 0x36527)
    CX = Stack.Pop();
    // ADD DI,0xa00 (334B_3078 / 0x36528)
    // DI += 0xA00;
    DI = Alu.Add16(DI, 0xA00);
    // ADD SI,0xa00 (334B_307C / 0x3652C)
    // SI += 0xA00;
    SI = Alu.Add16(SI, 0xA00);
    // LOOP 0x3000:6505 (334B_3080 / 0x36530)
    if(--CX != 0) {
      goto label_334B_3055_36505;
    }
    label_334B_3082_36532:
    // MOV AX,word ptr [BP + 0x0] (334B_3082 / 0x36532)
    AX = UInt16[SS, BP];
    // SUB AX,BX (334B_3085 / 0x36535)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // CMP AX,0x24 (334B_3087 / 0x36537)
    Alu.Sub16(AX, 0x24);
    // POP CX (334B_308A / 0x3653A)
    CX = Stack.Pop();
    // RET  (334B_308B / 0x3653B)
    return NearRet();
  }
  
  public Action unknown_334B_308C_3653C(int gotoTarget) {
    label_334B_308C_3653C:
    // PUSH CX (334B_308C / 0x3653C)
    Stack.Push(CX);
    // SHR CX,1 (334B_308D / 0x3653D)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // SHR CX,1 (334B_308F / 0x3653F)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    // MOV DI,word ptr CS:[0x1a3] (334B_3091 / 0x36541)
    DI = UInt16[cs2, 0x1A3];
    // ADD SI,DI (334B_3096 / 0x36546)
    // SI += DI;
    SI = Alu.Add16(SI, DI);
    label_334B_3098_36548:
    // PUSH CX (334B_3098 / 0x36548)
    Stack.Push(CX);
    // PUSH SI (334B_3099 / 0x36549)
    Stack.Push(SI);
    // PUSH DI (334B_309A / 0x3654A)
    Stack.Push(DI);
    // MOV CX,0x50 (334B_309B / 0x3654B)
    CX = 0x50;
    label_334B_309E_3654E:
    // LODSB SI (334B_309E / 0x3654E)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD SI,0x3 (334B_309F / 0x3654F)
    // SI += 0x3;
    SI = Alu.Add16(SI, 0x3);
    // MOV AH,AL (334B_30A2 / 0x36552)
    AH = AL;
    // MOV DX,0x4 (334B_30A4 / 0x36554)
    DX = 0x4;
    label_334B_30A7_36557:
    // STOSW ES:DI (334B_30A7 / 0x36557)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // STOSW ES:DI (334B_30A8 / 0x36558)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // ADD DI,0x13c (334B_30A9 / 0x36559)
    // DI += 0x13C;
    DI = Alu.Add16(DI, 0x13C);
    // DEC DX (334B_30AD / 0x3655D)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:6557 (334B_30AE / 0x3655E)
    if(!ZeroFlag) {
      goto label_334B_30A7_36557;
    }
    // SUB DI,0x4fc (334B_30B0 / 0x36560)
    // DI -= 0x4FC;
    DI = Alu.Sub16(DI, 0x4FC);
    // LOOP 0x3000:654e (334B_30B4 / 0x36564)
    if(--CX != 0) {
      goto label_334B_309E_3654E;
    }
    // POP DI (334B_30B6 / 0x36566)
    DI = Stack.Pop();
    // POP SI (334B_30B7 / 0x36567)
    SI = Stack.Pop();
    // POP CX (334B_30B8 / 0x36568)
    CX = Stack.Pop();
    // ADD SI,0x500 (334B_30B9 / 0x36569)
    // SI += 0x500;
    SI = Alu.Add16(SI, 0x500);
    // ADD DI,0x500 (334B_30BD / 0x3656D)
    // DI += 0x500;
    DI = Alu.Add16(DI, 0x500);
    // LOOP 0x3000:6548 (334B_30C1 / 0x36571)
    if(--CX != 0) {
      goto label_334B_3098_36548;
    }
    // JMP 0x3000:6532 (334B_30C3 / 0x36573)
    // Jump converted to non entry function call
    return unknown_334B_3047_364F7(0x36532 - cs1 * 0x10);
  }
  
  public Action unknown_334B_30C5_36575(int gotoTarget) {
    label_334B_30C5_36575:
    // PUSH CX (334B_30C5 / 0x36575)
    Stack.Push(CX);
    // MOV DI,word ptr CS:[0x1a3] (334B_30C6 / 0x36576)
    DI = UInt16[cs2, 0x1A3];
    // ADD SI,DI (334B_30CB / 0x3657B)
    // SI += DI;
    SI = Alu.Add16(SI, DI);
    // SHR CX,1 (334B_30CD / 0x3657D)
    // CX >>= 1;
    CX = Alu.Shr16(CX, 1);
    label_334B_30CF_3657F:
    // PUSH CX (334B_30CF / 0x3657F)
    Stack.Push(CX);
    // PUSH SI (334B_30D0 / 0x36580)
    Stack.Push(SI);
    // PUSH DI (334B_30D1 / 0x36581)
    Stack.Push(DI);
    // MOV CX,0xa0 (334B_30D2 / 0x36582)
    CX = 0xA0;
    label_334B_30D5_36585:
    // LODSB SI (334B_30D5 / 0x36585)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC SI (334B_30D6 / 0x36586)
    SI = Alu.Inc16(SI);
    // MOV AH,AL (334B_30D7 / 0x36587)
    AH = AL;
    // MOV word ptr ES:[DI + 0x140],AX (334B_30D9 / 0x36589)
    UInt16[ES, (ushort)(DI + 0x140)] = AX;
    // STOSW ES:DI (334B_30DE / 0x3658E)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x3000:6585 (334B_30DF / 0x3658F)
    if(--CX != 0) {
      goto label_334B_30D5_36585;
    }
    // POP DI (334B_30E1 / 0x36591)
    DI = Stack.Pop();
    // POP SI (334B_30E2 / 0x36592)
    SI = Stack.Pop();
    // POP CX (334B_30E3 / 0x36593)
    CX = Stack.Pop();
    // ADD SI,0x280 (334B_30E4 / 0x36594)
    // SI += 0x280;
    SI = Alu.Add16(SI, 0x280);
    // ADD DI,0x280 (334B_30E8 / 0x36598)
    // DI += 0x280;
    DI = Alu.Add16(DI, 0x280);
    // LOOP 0x3000:657f (334B_30EC / 0x3659C)
    if(--CX != 0) {
      goto label_334B_30CF_3657F;
    }
    // JMP 0x3000:6532 (334B_30EE / 0x3659E)
    // Jump converted to non entry function call
    return unknown_334B_3047_364F7(0x36532 - cs1 * 0x10);
  }
  
  public Action unknown_334B_316D_3661D(int gotoTarget) {
    switch(gotoTarget) {
      case 0x265CA: break;
      case 0: goto entry; break; //
    }
    label_334B_311A_365CA:
    // MOV DI,word ptr CS:[0x3118] (334B_311A / 0x365CA)
    DI = UInt16[cs2, 0x3118];
    // XOR AX,AX (334B_311F / 0x365CF)
    AX = 0;
    // MOV CX,0x12c0 (334B_3121 / 0x365D1)
    CX = 0x12C0;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_3124 / 0x365D4)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // MOV DS,word ptr CS:[0x2537] (334B_3126 / 0x365D6)
    DS = UInt16[cs2, 0x2537];
    // PUSH CS (334B_312B / 0x365DB)
    Stack.Push(cs2);
    // CALL 0x3000:3fbc (334B_312C / 0x365DC)
    NearCall(cs2, 0x312F, unknown_334B_0B0C_33FBC);
    // RET  (334B_312F / 0x365DF)
    return NearRet();
    entry:
    label_334B_316D_3661D:
    // CMP CL,0x9 (334B_316D / 0x3661D)
    Alu.Sub8(CL, 0x9);
    // JZ 0x3000:65ca (334B_3170 / 0x36620)
    if(ZeroFlag) {
      goto label_334B_311A_365CA;
    }
    // MOV CS:[0x3114],AX (334B_3172 / 0x36622)
    UInt16[cs2, 0x3114] = AX;
    // MOV DI,0x5dc0 (334B_3176 / 0x36626)
    DI = 0x5DC0;
    // ADD DI,word ptr CS:[0x1a3] (334B_3179 / 0x36629)
    // DI += UInt16[cs2, 0x1A3];
    DI = Alu.Add16(DI, UInt16[cs2, 0x1A3]);
    // LEA BP,[DI + 0x140] (334B_317E / 0x3662E)
    BP = (ushort)(DI + 0x140);
    // MOV SI,DI (334B_3182 / 0x36632)
    SI = DI;
    // MOV BX,BP (334B_3184 / 0x36634)
    BX = BP;
    // MOV DX,0x4c (334B_3186 / 0x36636)
    DX = 0x4C;
    // JMP 0x3000:6643 (334B_3189 / 0x36639)
    goto label_334B_3193_36643;
    label_334B_318B_3663B:
    // SUB SI,0x280 (334B_318B / 0x3663B)
    // SI -= 0x280;
    SI = Alu.Sub16(SI, 0x280);
    // SUB DI,0x280 (334B_318F / 0x3663F)
    // DI -= 0x280;
    DI = Alu.Sub16(DI, 0x280);
    label_334B_3193_36643:
    // DEC DX (334B_3193 / 0x36643)
    DX = Alu.Dec16(DX);
    // JS 0x3000:6675 (334B_3194 / 0x36644)
    if(SignFlag) {
      goto label_334B_31C5_36675;
    }
    // MOV CX,0xa0 (334B_3196 / 0x36646)
    CX = 0xA0;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_3199 / 0x36649)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG BP,DI (334B_319B / 0x3664B)
    ushort tmp_334B_319B = BP;
    BP = DI;
    DI = tmp_334B_319B;
    // XCHG BX,SI (334B_319D / 0x3664D)
    ushort tmp_334B_319D = BX;
    BX = SI;
    SI = tmp_334B_319D;
    // MOV CX,0xa0 (334B_319F / 0x3664F)
    CX = 0xA0;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_31A2 / 0x36652)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG BP,DI (334B_31A4 / 0x36654)
    ushort tmp_334B_31A4 = BP;
    BP = DI;
    DI = tmp_334B_31A4;
    // XCHG BX,SI (334B_31A6 / 0x36656)
    ushort tmp_334B_31A6 = BX;
    BX = SI;
    SI = tmp_334B_31A6;
    // DEC AL (334B_31A8 / 0x36658)
    AL = Alu.Dec8(AL);
    // JNZ 0x3000:663b (334B_31AA / 0x3665A)
    if(!ZeroFlag) {
      goto label_334B_318B_3663B;
    }
    // MOV CX,0x140 (334B_31AC / 0x3665C)
    CX = 0x140;
    // SUB DL,AH (334B_31AF / 0x3665F)
    // DL -= AH;
    DL = Alu.Sub8(DL, AH);
    // JBE 0x3000:6671 (334B_31B1 / 0x36661)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_31C1_36671;
    }
    label_334B_31B3_36663:
    // SUB SI,CX (334B_31B3 / 0x36663)
    // SI -= CX;
    SI = Alu.Sub16(SI, CX);
    // ADD BX,CX (334B_31B5 / 0x36665)
    // BX += CX;
    BX = Alu.Add16(BX, CX);
    // DEC AH (334B_31B7 / 0x36667)
    AH = Alu.Dec8(AH);
    // JNZ 0x3000:6663 (334B_31B9 / 0x36669)
    if(!ZeroFlag) {
      goto label_334B_31B3_36663;
    }
    // MOV AX,CS:[0x3114] (334B_31BB / 0x3666B)
    AX = UInt16[cs2, 0x3114];
    // JMP 0x3000:663b (334B_31BF / 0x3666F)
    goto label_334B_318B_3663B;
    label_334B_31C1_36671:
    // SUB DI,0x280 (334B_31C1 / 0x36671)
    // DI -= 0x280;
    DI = Alu.Sub16(DI, 0x280);
    label_334B_31C5_36675:
    // MOV BX,DI (334B_31C5 / 0x36675)
    BX = DI;
    // XCHG word ptr CS:[0x3118],BX (334B_31C7 / 0x36677)
    ushort tmp_334B_31C7 = UInt16[cs2, 0x3118];
    UInt16[cs2, 0x3118] = BX;
    BX = tmp_334B_31C7;
    // XOR AX,AX (334B_31CC / 0x3667C)
    AX = 0;
    label_334B_31CE_3667E:
    // CMP BX,DI (334B_31CE / 0x3667E)
    Alu.Sub16(BX, DI);
    // JG 0x3000:6695 (334B_31D0 / 0x36680)
    if(!ZeroFlag && SignFlag == OverflowFlag) {
      // JG target is RET, inlining.
      // RET  (334B_31E5 / 0x36695)
      return NearRet();
    }
    // MOV CX,0xa0 (334B_31D2 / 0x36682)
    CX = 0xA0;
    // XCHG DI,BP (334B_31D5 / 0x36685)
    ushort tmp_334B_31D5 = DI;
    DI = BP;
    BP = tmp_334B_31D5;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_31D7 / 0x36687)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG DI,BP (334B_31D9 / 0x36689)
    ushort tmp_334B_31D9 = DI;
    DI = BP;
    BP = tmp_334B_31D9;
    // MOV CL,0xa0 (334B_31DB / 0x3668B)
    CL = 0xA0;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_31DD / 0x3668D)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // SUB DI,0x280 (334B_31DF / 0x3668F)
    // DI -= 0x280;
    DI = Alu.Sub16(DI, 0x280);
    // JMP 0x3000:667e (334B_31E3 / 0x36693)
    goto label_334B_31CE_3667E;
    label_334B_31E5_36695:
    // RET  (334B_31E5 / 0x36695)
    return NearRet();
  }
  
  public Action spice86_label_334B_3200_366B0(int gotoTarget) {
    switch(gotoTarget) {
      case 0x266B0: goto label_334B_3200_366B0;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_3200_366B0:
    // MOV word ptr CS:[0x2535],SI (334B_3200 / 0x366B0)
    UInt16[cs2, 0x2535] = SI;
    // MOV word ptr CS:[0x2537],DS (334B_3205 / 0x366B5)
    UInt16[cs2, 0x2537] = DS;
    // MOV word ptr CS:[0x2539],ES (334B_320A / 0x366BA)
    UInt16[cs2, 0x2539] = ES;
    // AND AX,0xfe (334B_320F / 0x366BF)
    // AX &= 0xFE;
    AX = Alu.And16(AX, 0xFE);
    label_334B_3212_366C2:
    // CMP AX,0x1a (334B_3212 / 0x366C2)
    Alu.Sub16(AX, 0x1A);
    // JC 0x3000:66cc (334B_3215 / 0x366C5)
    if(CarryFlag) {
      goto label_334B_321C_366CC;
    }
    // SUB AX,0x1a (334B_3217 / 0x366C7)
    // AX -= 0x1A;
    AX = Alu.Sub16(AX, 0x1A);
    // JMP 0x3000:66c2 (334B_321A / 0x366CA)
    goto label_334B_3212_366C2;
    label_334B_321C_366CC:
    // MOV BX,AX (334B_321C / 0x366CC)
    BX = AX;
    // JMP word ptr CS:[BX + 0x31e6] (334B_321E / 0x366CE)
    // Indirect jump to word ptr CS:[BX + 0x31e6], generating possible targets from emulator records
    uint targetAddress_334B_321E = (uint)(cs2 * 0x10 + UInt16[cs2, (ushort)(BX + 0x31E6)] - cs1 * 0x10);
    switch(targetAddress_334B_321E) {
      case 0x2687A : throw FailAsUntested("Would have been a goto but label label_334B_33CA_3687A does not exist because no instruction was found there that belongs to a function.");
      case 0x268D9 : throw FailAsUntested("Would have been a goto but label label_334B_3429_368D9 does not exist because no instruction was found there that belongs to a function.");
      case 0x26D88 : throw FailAsUntested("Would have been a goto but label label_334B_38D8_36D88 does not exist because no instruction was found there that belongs to a function.");
      case 0x26A31 : throw FailAsUntested("Would have been a goto but label label_334B_3581_36A31 does not exist because no instruction was found there that belongs to a function.");
      case 0x26832 : throw FailAsUntested("Would have been a goto but label label_334B_3382_36832 does not exist because no instruction was found there that belongs to a function.");
      case 0x26E6B : throw FailAsUntested("Would have been a goto but label label_334B_39BB_36E6B does not exist because no instruction was found there that belongs to a function.");
      case 0x26AB2 : throw FailAsUntested("Would have been a goto but label label_334B_3602_36AB2 does not exist because no instruction was found there that belongs to a function.");
      case 0x26CF1 : throw FailAsUntested("Would have been a goto but label label_334B_3841_36CF1 does not exist because no instruction was found there that belongs to a function.");
      case 0x269B0 : throw FailAsUntested("Would have been a goto but label label_334B_3500_369B0 does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_334B_321E);
        break;
    }
    // Function call generated as ASM continues to next function body without return
    return GenerateMenuTransitionFrame_334B_32C1_36771(0x36730 - cs1 * 0x10);
  }
  
  public Action GenerateMenuTransitionFrame_334B_32C1_36771(int gotoTarget) {
    switch(gotoTarget) {
      case 0x26730: break;
      case 0: goto entry; break; //
    }
    label_334B_3280_36730:
    // MOV DI,0xc71c (334B_3280 / 0x36730)
    DI = 0xC71C;
    // MOV DX,0x10 (334B_3283 / 0x36733)
    DX = 0x10;
    // MOV AX,0xfefe (334B_3286 / 0x36736)
    AX = 0xFEFE;
    label_334B_3289_36739:
    // MOV CX,0x44 (334B_3289 / 0x36739)
    CX = 0x44;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_328C / 0x3673C)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0xb8 (334B_328E / 0x3673E)
    // DI += 0xB8;
    DI = Alu.Add16(DI, 0xB8);
    // DEC DX (334B_3292 / 0x36742)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:6739 (334B_3293 / 0x36743)
    if(!ZeroFlag) {
      goto label_334B_3289_36739;
    }
    // MOV DX,0x8 (334B_3295 / 0x36745)
    DX = 0x8;
    // MOV AX,0xf208 (334B_3298 / 0x36748)
    AX = 0xF208;
    label_334B_329B_3674B:
    // MOV CX,0x44 (334B_329B / 0x3674B)
    CX = 0x44;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_329E / 0x3674E)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0xb8 (334B_32A0 / 0x36750)
    // DI += 0xB8;
    DI = Alu.Add16(DI, 0xB8);
    // XCHG AH,AL (334B_32A4 / 0x36754)
    byte tmp_334B_32A4 = AH;
    AH = AL;
    AL = tmp_334B_32A4;
    // DEC DX (334B_32A6 / 0x36756)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:674b (334B_32A7 / 0x36757)
    if(!ZeroFlag) {
      goto label_334B_329B_3674B;
    }
    // MOV DX,0x10 (334B_32A9 / 0x36759)
    DX = 0x10;
    // MOV AX,0xfefe (334B_32AC / 0x3675C)
    AX = 0xFEFE;
    label_334B_32AF_3675F:
    // MOV CX,0x44 (334B_32AF / 0x3675F)
    CX = 0x44;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_32B2 / 0x36762)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0xb8 (334B_32B4 / 0x36764)
    // DI += 0xB8;
    DI = Alu.Add16(DI, 0xB8);
    // DEC DX (334B_32B8 / 0x36768)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:675f (334B_32B9 / 0x36769)
    if(!ZeroFlag) {
      goto label_334B_32AF_3675F;
    }
    // MOV DS,word ptr CS:[0x2537] (334B_32BB / 0x3676B)
    DS = UInt16[cs2, 0x2537];
    // RET  (334B_32C0 / 0x36770)
    return NearRet();
    entry:
    label_334B_32C1_36771:
    // CMP CL,0x9 (334B_32C1 / 0x36771)
    Alu.Sub8(CL, 0x9);
    // JZ 0x3000:6730 (334B_32C4 / 0x36774)
    if(ZeroFlag) {
      goto label_334B_3280_36730;
    }
    // MOV word ptr CS:[0x3116],CX (334B_32C6 / 0x36776)
    UInt16[cs2, 0x3116] = CX;
    // MOV CS:[0x3114],AX (334B_32CB / 0x3677B)
    UInt16[cs2, 0x3114] = AX;
    // MOV DI,0xe01c (334B_32CF / 0x3677F)
    DI = 0xE01C;
    // LEA BP,[DI + 0xfec0] (334B_32D2 / 0x36782)
    BP = (ushort)(DI + 0xFEC0);
    // MOV CX,0x44 (334B_32D6 / 0x36786)
    CX = 0x44;
    // MOV SI,DI (334B_32D9 / 0x36789)
    SI = DI;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_32DB / 0x3678B)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // ADD DI,0xb8 (334B_32DD / 0x3678D)
    // DI += 0xB8;
    DI = Alu.Add16(DI, 0xB8);
    // MOV SI,DI (334B_32E1 / 0x36791)
    SI = DI;
    // MOV BX,BP (334B_32E3 / 0x36793)
    BX = BP;
    // MOV DX,0x14 (334B_32E5 / 0x36795)
    DX = 0x14;
    // JMP 0x3000:67aa (334B_32E8 / 0x36798)
    goto label_334B_32FA_367AA;
    label_334B_32EA_3679A:
    // SUB SI,0x1c8 (334B_32EA / 0x3679A)
    // SI -= 0x1C8;
    SI = Alu.Sub16(SI, 0x1C8);
    // SUB DI,0x1c8 (334B_32EE / 0x3679E)
    // DI -= 0x1C8;
    DI = Alu.Sub16(DI, 0x1C8);
    // ADD BX,0xb8 (334B_32F2 / 0x367A2)
    // BX += 0xB8;
    BX = Alu.Add16(BX, 0xB8);
    // ADD BP,0xb8 (334B_32F6 / 0x367A6)
    // BP += 0xB8;
    BP = Alu.Add16(BP, 0xB8);
    label_334B_32FA_367AA:
    // DEC DX (334B_32FA / 0x367AA)
    DX = Alu.Dec16(DX);
    // JS 0x3000:67e0 (334B_32FB / 0x367AB)
    if(SignFlag) {
      goto label_334B_3330_367E0;
    }
    // MOV CX,0x44 (334B_32FD / 0x367AD)
    CX = 0x44;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_3300 / 0x367B0)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG BP,DI (334B_3302 / 0x367B2)
    ushort tmp_334B_3302 = BP;
    BP = DI;
    DI = tmp_334B_3302;
    // XCHG BX,SI (334B_3304 / 0x367B4)
    ushort tmp_334B_3304 = BX;
    BX = SI;
    SI = tmp_334B_3304;
    // MOV CX,0x44 (334B_3306 / 0x367B6)
    CX = 0x44;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_3309 / 0x367B9)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG BP,DI (334B_330B / 0x367BB)
    ushort tmp_334B_330B = BP;
    BP = DI;
    DI = tmp_334B_330B;
    // XCHG BX,SI (334B_330D / 0x367BD)
    ushort tmp_334B_330D = BX;
    BX = SI;
    SI = tmp_334B_330D;
    // DEC AL (334B_330F / 0x367BF)
    AL = Alu.Dec8(AL);
    // JNZ 0x3000:679a (334B_3311 / 0x367C1)
    if(!ZeroFlag) {
      goto label_334B_32EA_3679A;
    }
    // MOV CX,0x140 (334B_3313 / 0x367C3)
    CX = 0x140;
    // SUB DL,AH (334B_3316 / 0x367C6)
    // DL -= AH;
    DL = Alu.Sub8(DL, AH);
    // JBE 0x3000:67d8 (334B_3318 / 0x367C8)
    if(CarryFlag || ZeroFlag) {
      goto label_334B_3328_367D8;
    }
    label_334B_331A_367CA:
    // SUB SI,CX (334B_331A / 0x367CA)
    // SI -= CX;
    SI = Alu.Sub16(SI, CX);
    // ADD BX,CX (334B_331C / 0x367CC)
    // BX += CX;
    BX = Alu.Add16(BX, CX);
    // DEC AH (334B_331E / 0x367CE)
    AH = Alu.Dec8(AH);
    // JNZ 0x3000:67ca (334B_3320 / 0x367D0)
    if(!ZeroFlag) {
      goto label_334B_331A_367CA;
    }
    // MOV AX,CS:[0x3114] (334B_3322 / 0x367D2)
    AX = UInt16[cs2, 0x3114];
    // JMP 0x3000:679a (334B_3326 / 0x367D6)
    goto label_334B_32EA_3679A;
    label_334B_3328_367D8:
    // SUB DI,0x1c8 (334B_3328 / 0x367D8)
    // DI -= 0x1C8;
    DI = Alu.Sub16(DI, 0x1C8);
    // ADD BP,0xb8 (334B_332C / 0x367DC)
    // BP += 0xB8;
    BP = Alu.Add16(BP, 0xB8);
    label_334B_3330_367E0:
    // MOV BX,0xfefe (334B_3330 / 0x367E0)
    BX = 0xFEFE;
    // MOV AX,0xf208 (334B_3333 / 0x367E3)
    AX = 0xF208;
    // MOV DX,word ptr CS:[0x3116] (334B_3336 / 0x367E6)
    DX = UInt16[cs2, 0x3116];
    // CMP DX,0x9 (334B_333B / 0x367EB)
    Alu.Sub16(DX, 0x9);
    // JC 0x3000:67f6 (334B_333E / 0x367EE)
    if(CarryFlag) {
      goto label_334B_3346_367F6;
    }
    // SUB DX,0x12 (334B_3340 / 0x367F0)
    // DX -= 0x12;
    DX = Alu.Sub16(DX, 0x12);
    // NEG DX (334B_3343 / 0x367F3)
    DX = Alu.Sub16(0, DX);
    // XCHG AX,BX (334B_3345 / 0x367F5)
    ushort tmp_334B_3345 = AX;
    AX = BX;
    BX = tmp_334B_3345;
    label_334B_3346_367F6:
    // MOV CX,0x44 (334B_3346 / 0x367F6)
    CX = 0x44;
    // XCHG AX,BX (334B_3349 / 0x367F9)
    ushort tmp_334B_3349 = AX;
    AX = BX;
    BX = tmp_334B_3349;
    // XCHG DI,BP (334B_334A / 0x367FA)
    ushort tmp_334B_334A = DI;
    DI = BP;
    BP = tmp_334B_334A;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_334C / 0x367FC)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG AX,BX (334B_334E / 0x367FE)
    ushort tmp_334B_334E = AX;
    AX = BX;
    BX = tmp_334B_334E;
    // XCHG DI,BP (334B_334F / 0x367FF)
    ushort tmp_334B_334F = DI;
    DI = BP;
    BP = tmp_334B_334F;
    // MOV CL,0x44 (334B_3351 / 0x36801)
    CL = 0x44;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_3353 / 0x36803)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG AH,AL (334B_3355 / 0x36805)
    byte tmp_334B_3355 = AH;
    AH = AL;
    AL = tmp_334B_3355;
    // XCHG BH,BL (334B_3357 / 0x36807)
    byte tmp_334B_3357 = BH;
    BH = BL;
    BL = tmp_334B_3357;
    // SUB DI,0x1c8 (334B_3359 / 0x36809)
    // DI -= 0x1C8;
    DI = Alu.Sub16(DI, 0x1C8);
    // ADD BP,0xb8 (334B_335D / 0x3680D)
    // BP += 0xB8;
    BP = Alu.Add16(BP, 0xB8);
    // DEC DX (334B_3361 / 0x36811)
    DX = Alu.Dec16(DX);
    // JNZ 0x3000:67f6 (334B_3362 / 0x36812)
    if(!ZeroFlag) {
      goto label_334B_3346_367F6;
    }
    // MOV AX,0xfefe (334B_3364 / 0x36814)
    AX = 0xFEFE;
    label_334B_3367_36817:
    // MOV CL,0x44 (334B_3367 / 0x36817)
    CL = 0x44;
    // XCHG DI,BP (334B_3369 / 0x36819)
    ushort tmp_334B_3369 = DI;
    DI = BP;
    BP = tmp_334B_3369;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_336B / 0x3681B)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // XCHG DI,BP (334B_336D / 0x3681D)
    ushort tmp_334B_336D = DI;
    DI = BP;
    BP = tmp_334B_336D;
    // MOV CL,0x44 (334B_336F / 0x3681F)
    CL = 0x44;
    while (CX-- != 0) {
      // STOSW ES:DI (334B_3371 / 0x36821)
      UInt16[ES, DI] = AX;
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // SUB DI,0x1c8 (334B_3373 / 0x36823)
    // DI -= 0x1C8;
    DI = Alu.Sub16(DI, 0x1C8);
    // ADD BP,0xb8 (334B_3377 / 0x36827)
    // BP += 0xB8;
    BP = Alu.Add16(BP, 0xB8);
    // CMP DI,0xc6c0 (334B_337B / 0x3682B)
    Alu.Sub16(DI, 0xC6C0);
    // JNC 0x3000:6817 (334B_337F / 0x3682F)
    if(!CarryFlag) {
      goto label_334B_3367_36817;
    }
    // RET  (334B_3381 / 0x36831)
    return NearRet();
  }
  
  public Action unknown_334B_356F_36A1F(int gotoTarget) {
    label_334B_356F_36A1F:
    // PUSH SI (334B_356F / 0x36A1F)
    Stack.Push(SI);
    // PUSH DI (334B_3570 / 0x36A20)
    Stack.Push(DI);
    // MOV SI,DI (334B_3571 / 0x36A21)
    SI = DI;
    // CBW  (334B_3573 / 0x36A23)
    AX = (ushort)((short)((sbyte)AL));
    // ADD DI,AX (334B_3574 / 0x36A24)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV CX,DX (334B_3576 / 0x36A26)
    CX = DX;
    while (CX-- != 0) {
      // MOVSW ES:DI,SI (334B_3578 / 0x36A28)
      UInt16[ES, DI] = UInt16[DS, SI];
      SI = (ushort)(SI + (DirectionFlag ? -2 : 2));
      DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    }
    // POP DI (334B_357A / 0x36A2A)
    DI = Stack.Pop();
    // POP SI (334B_357B / 0x36A2B)
    SI = Stack.Pop();
    // ADD DI,0x140 (334B_357C / 0x36A2C)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // RET  (334B_3580 / 0x36A30)
    return NearRet();
  }
  
  public Action unknown_334B_35C8_36A78(int gotoTarget) {
    label_334B_35C8_36A78:
    // MOV SI,DI (334B_35C8 / 0x36A78)
    SI = DI;
    // ADD SI,AX (334B_35CA / 0x36A7A)
    // SI += AX;
    SI = Alu.Add16(SI, AX);
    label_334B_35CC_36A7C:
    // PUSH SI (334B_35CC / 0x36A7C)
    Stack.Push(SI);
    // PUSH DI (334B_35CD / 0x36A7D)
    Stack.Push(DI);
    // MOV CX,DX (334B_35CE / 0x36A7E)
    CX = DX;
    label_334B_35D0_36A80:
    // LODSB SI (334B_35D0 / 0x36A80)
    AL = UInt8[DS, SI];
    SI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // INC SI (334B_35D1 / 0x36A81)
    SI = Alu.Inc16(SI);
    // MOV AH,AL (334B_35D2 / 0x36A82)
    AH = AL;
    // MOV word ptr ES:[DI + 0x140],AX (334B_35D4 / 0x36A84)
    UInt16[ES, (ushort)(DI + 0x140)] = AX;
    // STOSW ES:DI (334B_35D9 / 0x36A89)
    UInt16[ES, DI] = AX;
    DI = (ushort)(SI + (DirectionFlag ? -2 : 2));
    // LOOP 0x3000:6a80 (334B_35DA / 0x36A8A)
    if(--CX != 0) {
      goto label_334B_35D0_36A80;
    }
    // POP DI (334B_35DC / 0x36A8C)
    DI = Stack.Pop();
    // POP SI (334B_35DD / 0x36A8D)
    SI = Stack.Pop();
    // ADD SI,0x280 (334B_35DE / 0x36A8E)
    // SI += 0x280;
    SI = Alu.Add16(SI, 0x280);
    // ADD DI,0x280 (334B_35E2 / 0x36A92)
    // DI += 0x280;
    DI = Alu.Add16(DI, 0x280);
    // DEC BX (334B_35E6 / 0x36A96)
    BX = Alu.Dec16(BX);
    // JNZ 0x3000:6a7c (334B_35E7 / 0x36A97)
    if(!ZeroFlag) {
      goto label_334B_35CC_36A7C;
    }
    // RET  (334B_35E9 / 0x36A99)
    return NearRet();
  }
  
  public Action unknown_334B_36B0_36B60(int gotoTarget) {
    label_334B_36B0_36B60:
    // MOV AX,word ptr [DI + 0x4] (334B_36B0 / 0x36B60)
    AX = UInt16[DS, (ushort)(DI + 0x4)];
    // MOV DX,word ptr [DI] (334B_36B3 / 0x36B63)
    DX = UInt16[DS, DI];
    // SUB AX,DX (334B_36B5 / 0x36B65)
    // AX -= DX;
    AX = Alu.Sub16(AX, DX);
    // SUB AX,0x14 (334B_36B7 / 0x36B67)
    // AX -= 0x14;
    AX = Alu.Sub16(AX, 0x14);
    // SHR AX,1 (334B_36BA / 0x36B6A)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD DX,AX (334B_36BC / 0x36B6C)
    // DX += AX;
    DX = Alu.Add16(DX, AX);
    // MOV word ptr CS:[0x35f6],DX (334B_36BE / 0x36B6E)
    UInt16[cs2, 0x35F6] = DX;
    // SHR AX,1 (334B_36C3 / 0x36B73)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_36C5 / 0x36B75)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_36C7 / 0x36B77)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CS:[0x35ee],AX (334B_36C9 / 0x36B79)
    UInt16[cs2, 0x35EE] = AX;
    // MOV AX,word ptr [DI + 0x6] (334B_36CD / 0x36B7D)
    AX = UInt16[DS, (ushort)(DI + 0x6)];
    // MOV BX,word ptr [DI + 0x2] (334B_36D0 / 0x36B80)
    BX = UInt16[DS, (ushort)(DI + 0x2)];
    // SUB AX,BX (334B_36D3 / 0x36B83)
    // AX -= BX;
    AX = Alu.Sub16(AX, BX);
    // SUB AX,0x14 (334B_36D5 / 0x36B85)
    // AX -= 0x14;
    AX = Alu.Sub16(AX, 0x14);
    // SHR AX,1 (334B_36D8 / 0x36B88)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // ADD BX,AX (334B_36DA / 0x36B8A)
    // BX += AX;
    BX = Alu.Add16(BX, AX);
    // MOV word ptr CS:[0x35f8],BX (334B_36DC / 0x36B8C)
    UInt16[cs2, 0x35F8] = BX;
    // SHR AX,1 (334B_36E1 / 0x36B91)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_36E3 / 0x36B93)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // SHR AX,1 (334B_36E5 / 0x36B95)
    // AX >>= 1;
    AX = Alu.Shr16(AX, 1);
    // MOV CS:[0x35f0],AX (334B_36E7 / 0x36B97)
    UInt16[cs2, 0x35F0] = AX;
    // SUB DX,word ptr CS:[0x35f2] (334B_36EB / 0x36B9B)
    // DX -= UInt16[cs2, 0x35F2];
    DX = Alu.Sub16(DX, UInt16[cs2, 0x35F2]);
    // SUB BX,word ptr CS:[0x35f4] (334B_36F0 / 0x36BA0)
    // BX -= UInt16[cs2, 0x35F4];
    BX = Alu.Sub16(BX, UInt16[cs2, 0x35F4]);
    // OR DX,DX (334B_36F5 / 0x36BA5)
    // DX |= DX;
    DX = Alu.Or16(DX, DX);
    // PUSHF  (334B_36F7 / 0x36BA7)
    Stack.Push(FlagRegister);
    // JNS 0x3000:6bac (334B_36F8 / 0x36BA8)
    if(!SignFlag) {
      goto label_334B_36FC_36BAC;
    }
    // NEG DX (334B_36FA / 0x36BAA)
    DX = Alu.Sub16(0, DX);
    label_334B_36FC_36BAC:
    // SHR DX,1 (334B_36FC / 0x36BAC)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (334B_36FE / 0x36BAE)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // SHR DX,1 (334B_3700 / 0x36BB0)
    // DX >>= 1;
    DX = Alu.Shr16(DX, 1);
    // POPF  (334B_3702 / 0x36BB2)
    FlagRegister = Stack.Pop();
    // JNS 0x3000:6bb7 (334B_3703 / 0x36BB3)
    if(!SignFlag) {
      goto label_334B_3707_36BB7;
    }
    // NEG DX (334B_3705 / 0x36BB5)
    DX = Alu.Sub16(0, DX);
    label_334B_3707_36BB7:
    // OR BX,BX (334B_3707 / 0x36BB7)
    // BX |= BX;
    BX = Alu.Or16(BX, BX);
    // PUSHF  (334B_3709 / 0x36BB9)
    Stack.Push(FlagRegister);
    // JNS 0x3000:6bbe (334B_370A / 0x36BBA)
    if(!SignFlag) {
      goto label_334B_370E_36BBE;
    }
    // NEG BX (334B_370C / 0x36BBC)
    BX = Alu.Sub16(0, BX);
    label_334B_370E_36BBE:
    // SHR BX,1 (334B_370E / 0x36BBE)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (334B_3710 / 0x36BC0)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // SHR BX,1 (334B_3712 / 0x36BC2)
    // BX >>= 1;
    BX = Alu.Shr16(BX, 1);
    // POPF  (334B_3714 / 0x36BC4)
    FlagRegister = Stack.Pop();
    // JNS 0x3000:6bc9 (334B_3715 / 0x36BC5)
    if(!SignFlag) {
      goto label_334B_3719_36BC9;
    }
    // NEG BX (334B_3717 / 0x36BC7)
    BX = Alu.Sub16(0, BX);
    label_334B_3719_36BC9:
    // MOV word ptr CS:[0x35ea],DX (334B_3719 / 0x36BC9)
    UInt16[cs2, 0x35EA] = DX;
    // MOV word ptr CS:[0x35ec],BX (334B_371E / 0x36BCE)
    UInt16[cs2, 0x35EC] = BX;
    // RET  (334B_3723 / 0x36BD3)
    return NearRet();
  }
  
  public Action spice86_label_334B_3724_36BD4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x26BD4: goto label_334B_3724_36BD4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_3724_36BD4:
    // DEC SI (334B_3724 / 0x36BD4)
    SI = Alu.Dec16(SI);
    // PUSH DS (334B_3725 / 0x36BD5)
    Stack.Push(DS);
    // PUSH ES (334B_3726 / 0x36BD6)
    Stack.Push(ES);
    // POP DS (334B_3727 / 0x36BD7)
    DS = Stack.Pop();
    // CALL 0x3000:6be3 (334B_3728 / 0x36BD8)
    NearCall(cs2, 0x372B, unknown_334B_3733_36BE3);
    // POP DS (334B_372B / 0x36BDB)
    DS = Stack.Pop();
    // RETF  (334B_372C / 0x36BDC)
    return FarRet();
  }
  
  public Action unknown_334B_372D_36BDD(int gotoTarget) {
    label_334B_372D_36BDD:
    // MOV CX,0x14 (334B_372D / 0x36BDD)
    CX = 0x14;
    // MOV SI,0x14 (334B_3730 / 0x36BE0)
    SI = 0x14;
    // Function call generated as ASM continues to next function entry point without return
    return unknown_334B_3733_36BE3(0);
  }
  
  public Action unknown_334B_3733_36BE3(int gotoTarget) {
    label_334B_3733_36BE3:
    // ADD SI,DX (334B_3733 / 0x36BE3)
    // SI += DX;
    SI = Alu.Add16(SI, DX);
    // ADD CX,BX (334B_3735 / 0x36BE5)
    // CX += BX;
    CX = Alu.Add16(CX, BX);
    // MOV AX,0x4 (334B_3737 / 0x36BE7)
    AX = 0x4;
    // CMP DX,AX (334B_373A / 0x36BEA)
    Alu.Sub16(DX, AX);
    // JGE 0x3000:6bf0 (334B_373C / 0x36BEC)
    if(SignFlag == OverflowFlag) {
      goto label_334B_3740_36BF0;
    }
    // MOV DX,AX (334B_373E / 0x36BEE)
    DX = AX;
    label_334B_3740_36BF0:
    // CMP SI,AX (334B_3740 / 0x36BF0)
    Alu.Sub16(SI, AX);
    // JGE 0x3000:6bf6 (334B_3742 / 0x36BF2)
    if(SignFlag == OverflowFlag) {
      goto label_334B_3746_36BF6;
    }
    // MOV SI,AX (334B_3744 / 0x36BF4)
    SI = AX;
    label_334B_3746_36BF6:
    // MOV AX,0x13c (334B_3746 / 0x36BF6)
    AX = 0x13C;
    // CMP DX,AX (334B_3749 / 0x36BF9)
    Alu.Sub16(DX, AX);
    // JLE 0x3000:6bff (334B_374B / 0x36BFB)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_374F_36BFF;
    }
    // MOV DX,AX (334B_374D / 0x36BFD)
    DX = AX;
    label_334B_374F_36BFF:
    // CMP SI,AX (334B_374F / 0x36BFF)
    Alu.Sub16(SI, AX);
    // JLE 0x3000:6c05 (334B_3751 / 0x36C01)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_3755_36C05;
    }
    // MOV SI,AX (334B_3753 / 0x36C03)
    SI = AX;
    label_334B_3755_36C05:
    // MOV AX,0x4 (334B_3755 / 0x36C05)
    AX = 0x4;
    // CMP BX,AX (334B_3758 / 0x36C08)
    Alu.Sub16(BX, AX);
    // JGE 0x3000:6c0e (334B_375A / 0x36C0A)
    if(SignFlag == OverflowFlag) {
      goto label_334B_375E_36C0E;
    }
    // MOV BX,AX (334B_375C / 0x36C0C)
    BX = AX;
    label_334B_375E_36C0E:
    // CMP CX,AX (334B_375E / 0x36C0E)
    Alu.Sub16(CX, AX);
    // JGE 0x3000:6c14 (334B_3760 / 0x36C10)
    if(SignFlag == OverflowFlag) {
      goto label_334B_3764_36C14;
    }
    // MOV CX,AX (334B_3762 / 0x36C12)
    CX = AX;
    label_334B_3764_36C14:
    // MOV AX,0x94 (334B_3764 / 0x36C14)
    AX = 0x94;
    // CMP BX,AX (334B_3767 / 0x36C17)
    Alu.Sub16(BX, AX);
    // JLE 0x3000:6c1d (334B_3769 / 0x36C19)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_376D_36C1D;
    }
    // MOV BX,AX (334B_376B / 0x36C1B)
    BX = AX;
    label_334B_376D_36C1D:
    // CMP CX,AX (334B_376D / 0x36C1D)
    Alu.Sub16(CX, AX);
    // JLE 0x3000:6c23 (334B_376F / 0x36C1F)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_3773_36C23;
    }
    // MOV CX,AX (334B_3771 / 0x36C21)
    CX = AX;
    label_334B_3773_36C23:
    // SUB SI,DX (334B_3773 / 0x36C23)
    // SI -= DX;
    SI = Alu.Sub16(SI, DX);
    // SUB CX,BX (334B_3775 / 0x36C25)
    // CX -= BX;
    CX = Alu.Sub16(CX, BX);
    // INC SI (334B_3777 / 0x36C27)
    SI = Alu.Inc16(SI);
    // SUB CX,0x2 (334B_3778 / 0x36C28)
    // CX -= 0x2;
    CX = Alu.Sub16(CX, 0x2);
    // CALL 0x3000:40c0 (334B_377B / 0x36C2B)
    NearCall(cs2, 0x377E, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // PUSH CX (334B_377E / 0x36C2E)
    Stack.Push(CX);
    // PUSH CX (334B_377F / 0x36C2F)
    Stack.Push(CX);
    // MOV CX,SI (334B_3780 / 0x36C30)
    CX = SI;
    // MOV AL,0xf (334B_3782 / 0x36C32)
    AL = 0xF;
    label_334B_3784_36C34:
    // XOR byte ptr [DI],AL (334B_3784 / 0x36C34)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // INC DI (334B_3786 / 0x36C36)
    DI = Alu.Inc16(DI);
    // LOOP 0x3000:6c34 (334B_3787 / 0x36C37)
    if(--CX != 0) {
      goto label_334B_3784_36C34;
    }
    // DEC DI (334B_3789 / 0x36C39)
    DI = Alu.Dec16(DI);
    // POP CX (334B_378A / 0x36C3A)
    CX = Stack.Pop();
    // OR CX,CX (334B_378B / 0x36C3B)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JLE 0x3000:6c4b (334B_378D / 0x36C3D)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      goto label_334B_379B_36C4B;
    }
    label_334B_378F_36C3F:
    // ADD DI,0x140 (334B_378F / 0x36C3F)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_3793 / 0x36C43)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6c3f (334B_3795 / 0x36C45)
    if(--CX != 0) {
      goto label_334B_378F_36C3F;
    }
    // ADD DI,0x140 (334B_3797 / 0x36C47)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    label_334B_379B_36C4B:
    // MOV CX,SI (334B_379B / 0x36C4B)
    CX = SI;
    label_334B_379D_36C4D:
    // XOR byte ptr [DI],AL (334B_379D / 0x36C4D)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // DEC DI (334B_379F / 0x36C4F)
    DI = Alu.Dec16(DI);
    // LOOP 0x3000:6c4d (334B_37A0 / 0x36C50)
    if(--CX != 0) {
      goto label_334B_379D_36C4D;
    }
    // INC DI (334B_37A2 / 0x36C52)
    DI = Alu.Inc16(DI);
    // POP CX (334B_37A3 / 0x36C53)
    CX = Stack.Pop();
    // OR CX,CX (334B_37A4 / 0x36C54)
    // CX |= CX;
    CX = Alu.Or16(CX, CX);
    // JLE 0x3000:6c60 (334B_37A6 / 0x36C56)
    if(ZeroFlag || SignFlag != OverflowFlag) {
      // JLE target is RET, inlining.
      // RET  (334B_37B0 / 0x36C60)
      return NearRet();
    }
    label_334B_37A8_36C58:
    // SUB DI,0x140 (334B_37A8 / 0x36C58)
    // DI -= 0x140;
    DI = Alu.Sub16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_37AC / 0x36C5C)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6c58 (334B_37AE / 0x36C5E)
    if(--CX != 0) {
      goto label_334B_37A8_36C58;
    }
    label_334B_37B0_36C60:
    // RET  (334B_37B0 / 0x36C60)
    return NearRet();
  }
  
  public Action unknown_334B_37B1_36C61(int gotoTarget) {
    label_334B_37B1_36C61:
    // PUSH BP (334B_37B1 / 0x36C61)
    Stack.Push(BP);
    // MOV BP,CX (334B_37B2 / 0x36C62)
    BP = CX;
    // CALL 0x3000:40c0 (334B_37B4 / 0x36C64)
    NearCall(cs2, 0x37B7, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV AX,0xf0f (334B_37B7 / 0x36C67)
    AX = 0xF0F;
    // MOV CX,0x5 (334B_37BA / 0x36C6A)
    CX = 0x5;
    label_334B_37BD_36C6D:
    // XOR word ptr [DI],AX (334B_37BD / 0x36C6D)
    // UInt16[DS, DI] ^= AX;
    UInt16[DS, DI] = Alu.Xor16(UInt16[DS, DI], AX);
    // ADD DI,0x2 (334B_37BF / 0x36C6F)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // LOOP 0x3000:6c6d (334B_37C2 / 0x36C72)
    if(--CX != 0) {
      goto label_334B_37BD_36C6D;
    }
    // ADD DI,BP (334B_37C4 / 0x36C74)
    // DI += BP;
    DI = Alu.Add16(DI, BP);
    // SUB DI,0x14 (334B_37C6 / 0x36C76)
    // DI -= 0x14;
    DI = Alu.Sub16(DI, 0x14);
    // MOV CX,0x5 (334B_37C9 / 0x36C79)
    CX = 0x5;
    label_334B_37CC_36C7C:
    // XOR word ptr [DI],AX (334B_37CC / 0x36C7C)
    // UInt16[DS, DI] ^= AX;
    UInt16[DS, DI] = Alu.Xor16(UInt16[DS, DI], AX);
    // ADD DI,0x2 (334B_37CE / 0x36C7E)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // LOOP 0x3000:6c7c (334B_37D1 / 0x36C81)
    if(--CX != 0) {
      goto label_334B_37CC_36C7C;
    }
    // DEC DI (334B_37D3 / 0x36C83)
    DI = Alu.Dec16(DI);
    // MOV CX,0x9 (334B_37D4 / 0x36C84)
    CX = 0x9;
    label_334B_37D7_36C87:
    // ADD DI,0x140 (334B_37D7 / 0x36C87)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_37DB / 0x36C8B)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6c87 (334B_37DD / 0x36C8D)
    if(--CX != 0) {
      goto label_334B_37D7_36C87;
    }
    // MOV AX,SI (334B_37DF / 0x36C8F)
    AX = SI;
    // SUB AX,0x14 (334B_37E1 / 0x36C91)
    // AX -= 0x14;
    AX = Alu.Sub16(AX, 0x14);
    // MOV CX,0x140 (334B_37E4 / 0x36C94)
    CX = 0x140;
    // IMUL CX (334B_37E7 / 0x36C97)
    Cpu.IMul16(CX);
    // ADD DI,AX (334B_37E9 / 0x36C99)
    // DI += AX;
    DI = Alu.Add16(DI, AX);
    // MOV AX,0xf0f (334B_37EB / 0x36C9B)
    AX = 0xF0F;
    // MOV CX,0x9 (334B_37EE / 0x36C9E)
    CX = 0x9;
    label_334B_37F1_36CA1:
    // ADD DI,0x140 (334B_37F1 / 0x36CA1)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_37F5 / 0x36CA5)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6ca1 (334B_37F7 / 0x36CA7)
    if(--CX != 0) {
      goto label_334B_37F1_36CA1;
    }
    // ADD DI,0x140 (334B_37F9 / 0x36CA9)
    // DI += 0x140;
    DI = Alu.Add16(DI, 0x140);
    // DEC DI (334B_37FD / 0x36CAD)
    DI = Alu.Dec16(DI);
    // MOV CX,0x5 (334B_37FE / 0x36CAE)
    CX = 0x5;
    label_334B_3801_36CB1:
    // XOR word ptr [DI],AX (334B_3801 / 0x36CB1)
    // UInt16[DS, DI] ^= AX;
    UInt16[DS, DI] = Alu.Xor16(UInt16[DS, DI], AX);
    // SUB DI,0x2 (334B_3803 / 0x36CB3)
    // DI -= 0x2;
    DI = Alu.Sub16(DI, 0x2);
    // LOOP 0x3000:6cb1 (334B_3806 / 0x36CB6)
    if(--CX != 0) {
      goto label_334B_3801_36CB1;
    }
    // SUB DI,BP (334B_3808 / 0x36CB8)
    // DI -= BP;
    DI = Alu.Sub16(DI, BP);
    // ADD DI,0x14 (334B_380A / 0x36CBA)
    // DI += 0x14;
    DI = Alu.Add16(DI, 0x14);
    // MOV CX,0x5 (334B_380D / 0x36CBD)
    CX = 0x5;
    label_334B_3810_36CC0:
    // XOR word ptr [DI],AX (334B_3810 / 0x36CC0)
    // UInt16[DS, DI] ^= AX;
    UInt16[DS, DI] = Alu.Xor16(UInt16[DS, DI], AX);
    // SUB DI,0x2 (334B_3812 / 0x36CC2)
    // DI -= 0x2;
    DI = Alu.Sub16(DI, 0x2);
    // LOOP 0x3000:6cc0 (334B_3815 / 0x36CC5)
    if(--CX != 0) {
      goto label_334B_3810_36CC0;
    }
    // ADD DI,0x2 (334B_3817 / 0x36CC7)
    // DI += 0x2;
    DI = Alu.Add16(DI, 0x2);
    // MOV CX,0x9 (334B_381A / 0x36CCA)
    CX = 0x9;
    label_334B_381D_36CCD:
    // SUB DI,0x140 (334B_381D / 0x36CCD)
    // DI -= 0x140;
    DI = Alu.Sub16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_3821 / 0x36CD1)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6ccd (334B_3823 / 0x36CD3)
    if(--CX != 0) {
      goto label_334B_381D_36CCD;
    }
    // MOV AX,SI (334B_3825 / 0x36CD5)
    AX = SI;
    // SUB AX,0x14 (334B_3827 / 0x36CD7)
    // AX -= 0x14;
    AX = Alu.Sub16(AX, 0x14);
    // MOV CX,0x140 (334B_382A / 0x36CDA)
    CX = 0x140;
    // IMUL CX (334B_382D / 0x36CDD)
    Cpu.IMul16(CX);
    // SUB DI,AX (334B_382F / 0x36CDF)
    // DI -= AX;
    DI = Alu.Sub16(DI, AX);
    // MOV AX,0xf0f (334B_3831 / 0x36CE1)
    AX = 0xF0F;
    // MOV CX,0x9 (334B_3834 / 0x36CE4)
    CX = 0x9;
    label_334B_3837_36CE7:
    // SUB DI,0x140 (334B_3837 / 0x36CE7)
    // DI -= 0x140;
    DI = Alu.Sub16(DI, 0x140);
    // XOR byte ptr [DI],AL (334B_383B / 0x36CEB)
    // UInt8[DS, DI] ^= AL;
    UInt8[DS, DI] = Alu.Xor8(UInt8[DS, DI], AL);
    // LOOP 0x3000:6ce7 (334B_383D / 0x36CED)
    if(--CX != 0) {
      goto label_334B_3837_36CE7;
    }
    // POP BP (334B_383F / 0x36CEF)
    BP = Stack.Pop();
    // RET  (334B_3840 / 0x36CF0)
    return NearRet();
  }
  
  public Action not_observed_334B_39E9_036E99(int gotoTarget) {
    label_334B_39E9_36E99:
    // PUSH AX (334B_39E9 / 0x36E99)
    Stack.Push(AX);
    // PUSH DI (334B_39EA / 0x36E9A)
    Stack.Push(DI);
    // CALL 0x3000:40c0 (334B_39EB / 0x36E9B)
    NearCall(cs2, 0x39EE, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // POP BX (334B_39EE / 0x36E9E)
    BX = Stack.Pop();
    // MOV DX,AX (334B_39EF / 0x36E9F)
    DX = AX;
    label_334B_39F1_36EA1:
    // SHR BP,1 (334B_39F1 / 0x36EA1)
    // BP >>= 1;
    BP = Alu.Shr16(BP, 1);
    // JNC 0x3000:6ea7 (334B_39F3 / 0x36EA3)
    if(!CarryFlag) {
      goto label_334B_39F7_36EA7;
    }
    // XOR BP,SI (334B_39F5 / 0x36EA5)
    // BP ^= SI;
    BP = Alu.Xor16(BP, SI);
    label_334B_39F7_36EA7:
    // MOV AX,BP (334B_39F7 / 0x36EA7)
    AX = BP;
    // AND AX,0x3 (334B_39F9 / 0x36EA9)
    // AX &= 0x3;
    AX = Alu.And16(AX, 0x3);
    // DEC AX (334B_39FC / 0x36EAC)
    AX = Alu.Dec16(AX);
    // ADD AL,DH (334B_39FD / 0x36EAD)
    // AL += DH;
    AL = Alu.Add8(AL, DH);
    // STOSB ES:DI (334B_39FF / 0x36EAF)
    UInt8[ES, DI] = AL;
    DI = (ushort)(SI + (DirectionFlag ? -1 : 1));
    // ADD DX,BX (334B_3A00 / 0x36EB0)
    // DX += BX;
    DX = Alu.Add16(DX, BX);
    // LOOP 0x3000:6ea1 (334B_3A02 / 0x36EB2)
    if(--CX != 0) {
      goto label_334B_39F1_36EA1;
    }
    // POP AX (334B_3A04 / 0x36EB4)
    AX = Stack.Pop();
    // RETF  (334B_3A05 / 0x36EB5)
    return FarRet();
  }
  
  public Action spice86_label_334B_3A14_36EC4(int gotoTarget) {
    switch(gotoTarget) {
      case 0x26EC4: goto label_334B_3A14_36EC4;break;
      case 0: break;
      default: throw FailAsUntested("Could not find any label from outside with address " + gotoTarget);
    }
    label_334B_3A14_36EC4:
    // CALL 0x3000:40c0 (334B_3A14 / 0x36EC4)
    NearCall(cs2, 0x3A17, SetDiFromXYCordsDxBx_334B_0C10_340C0);
    // MOV SI,DI (334B_3A17 / 0x36EC7)
    SI = DI;
    // MOV DI,word ptr CS:[0x1a3] (334B_3A19 / 0x36EC9)
    DI = UInt16[cs2, 0x1A3];
    // SHL BP,1 (334B_3A1E / 0x36ECE)
    // BP <<= 1;
    BP = Alu.Shl16(BP, 1);
    // JMP word ptr CS:[BP + 0x3a04] (334B_3A20 / 0x36ED0)
    // Indirect jump to word ptr CS:[BP + 0x3a04], generating possible targets from emulator records
    uint targetAddress_334B_3A20 = (uint)(cs2 * 0x10 + UInt16[cs2, (ushort)(BP + 0x3A04)] - cs1 * 0x10);
    switch(targetAddress_334B_3A20) {
      case 0x26FF6 : throw FailAsUntested("Would have been a goto but label label_334B_3B46_36FF6 does not exist because no instruction was found there that belongs to a function.");
      case 0x26F89 : throw FailAsUntested("Would have been a goto but label label_334B_3AD9_36F89 does not exist because no instruction was found there that belongs to a function.");
      case 0x26F4D : throw FailAsUntested("Would have been a goto but label label_334B_3A9D_36F4D does not exist because no instruction was found there that belongs to a function.");
      case 0x26FA6 : throw FailAsUntested("Would have been a goto but label label_334B_3AF6_36FA6 does not exist because no instruction was found there that belongs to a function.");
      default: throw FailAsUntested("Error: Jump not registered at address " + targetAddress_334B_3A20);
        break;
    }
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0x36F4D");
  }
  
  public Action PcSpeakerActivationWithBXAndALCleanup_5635_0100_56450(int gotoTarget) {
    label_5635_0100_56450:
    // ADD byte ptr [BX + SI],AL (5635_0100 / 0x56450)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0102 / 0x56452)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0104 / 0x56454)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0106 / 0x56456)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0108 / 0x56458)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_010A / 0x5645A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return ClearAL_5635_010C_5645C(0);
  }
  
  public Action ClearAL_5635_010C_5645C(int gotoTarget) {
    label_5635_010C_5645C:
    // ADD byte ptr [BX + SI],AL (5635_010C / 0x5645C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_010E / 0x5645E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0110 / 0x56460)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0112 / 0x56462)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0114 / 0x56464)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0116 / 0x56466)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0118 / 0x56468)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_011A / 0x5646A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_011C / 0x5646C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_011E / 0x5646E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0120 / 0x56470)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return PcSpeakerActivationWithALCleanup_5635_0182_564D2(0);
  }
  
  public Action PcSpeakerActivationWithALCleanup_5635_0182_564D2(int gotoTarget) {
    label_5635_0182_564D2:
    // ADD byte ptr [BX + SI],AL (5635_0182 / 0x564D2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0184 / 0x564D4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_0186 / 0x564D6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return PcSpeakerActivation_5635_0188_564D8(0);
  }
  
  public Action PcSpeakerActivation_5635_0188_564D8(int gotoTarget) {
    label_5635_0188_564D8:
    // ADD byte ptr [BX + SI],AL (5635_0188 / 0x564D8)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_018A / 0x564DA)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_018C / 0x564DC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (5635_018E / 0x564DE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return PcSpeakerActivationWithBXAndALCleanup_563E_0100_564E0(0);
  }
  
  public Action PcSpeakerActivationWithBXAndALCleanup_563E_0100_564E0(int gotoTarget) {
    label_563E_0100_564E0:
    // ADD byte ptr [BX + SI],AL (563E_0100 / 0x564E0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0102 / 0x564E2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0104 / 0x564E4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return ClearAL_563E_0106_564E6(0);
  }
  
  public Action ClearAL_563E_0106_564E6(int gotoTarget) {
    label_563E_0106_564E6:
    // ADD byte ptr [BX + SI],AL (563E_0106 / 0x564E6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0108 / 0x564E8)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_010A / 0x564EA)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_010C_564EC(0);
  }
  
  public Action unknown_563E_010C_564EC(int gotoTarget) {
    label_563E_010C_564EC:
    // ADD byte ptr [BX + SI],AL (563E_010C / 0x564EC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_010E / 0x564EE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0110 / 0x564F0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return ClearAL_563E_0112_564F2(0);
  }
  
  public Action ClearAL_563E_0112_564F2(int gotoTarget) {
    label_563E_0112_564F2:
    // ADD byte ptr [BX + SI],AL (563E_0112 / 0x564F2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return PcSpeakerActivationWithALCleanup_563E_0182_56562(0);
  }
  
  public Action PcSpeakerActivationWithALCleanup_563E_0182_56562(int gotoTarget) {
    label_563E_0182_56562:
    // ADD byte ptr [BX + SI],AL (563E_0182 / 0x56562)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0184 / 0x56564)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0186 / 0x56566)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return PcSpeakerActivation_563E_0188_56568(0);
  }
  
  public Action PcSpeakerActivation_563E_0188_56568(int gotoTarget) {
    label_563E_0188_56568:
    // ADD byte ptr [BX + SI],AL (563E_0188 / 0x56568)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_018A / 0x5656A)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_018C / 0x5656C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_018E / 0x5656E)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0190 / 0x56570)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0192 / 0x56572)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0194 / 0x56574)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0196 / 0x56576)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0198 / 0x56578)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_019A / 0x5657A)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_03EB_567CB
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_019C / 0x5657C)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_02D9_566B9
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_019E / 0x5657E)
    // Instruction bytes at index 0, 1 modified by those instruction(s): 563E_02D9_566B9
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01A0 / 0x56580)
    // Instruction bytes at index 0 modified by those instruction(s): 563E_02D9_566B9, 563E_0443_56823
    // Instruction bytes at index 1 modified by those instruction(s): 563E_02D9_566B9
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01A2 / 0x56582)
    // Instruction bytes at index 1 modified by those instruction(s): 563E_02D9_566B9, 563E_0443_56823
    // Instruction bytes at index 0 modified by those instruction(s): 563E_02D9_566B9
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_01E1_565C1(0);
  }
  
  public Action unknown_563E_01E1_565C1(int gotoTarget) {
    label_563E_01E1_565C1:
    // ADD byte ptr [BX + SI],AL (563E_01E1 / 0x565C1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01E3 / 0x565C3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01E5 / 0x565C5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01E7 / 0x565C7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01E9 / 0x565C9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01EB / 0x565CB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01ED / 0x565CD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01EF / 0x565CF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01F1 / 0x565D1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01F3 / 0x565D3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01F5 / 0x565D5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01F7 / 0x565D7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01F9 / 0x565D9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01FB / 0x565DB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01FD / 0x565DD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_01FF / 0x565DF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0201 / 0x565E1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_02AE_5668E(0);
  }
  
  public Action unknown_563E_02AE_5668E(int gotoTarget) {
    label_563E_02AE_5668E:
    // ADD byte ptr [BX + SI],AL (563E_02AE / 0x5668E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02B0 / 0x56690)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02B2 / 0x56692)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02B4 / 0x56694)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02B6 / 0x56696)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02B8 / 0x56698)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02BA / 0x5669A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02BC / 0x5669C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02BE / 0x5669E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02C0 / 0x566A0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02C2 / 0x566A2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02C4 / 0x566A4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02C6 / 0x566A6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02C8 / 0x566A8)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02CA / 0x566AA)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02CC / 0x566AC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02CE / 0x566AE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_02E0_566C0(0);
  }
  
  public Action unknown_563E_02E0_566C0(int gotoTarget) {
    label_563E_02E0_566C0:
    // ADD byte ptr [BX + SI],AL (563E_02E0 / 0x566C0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02E2 / 0x566C2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02E4 / 0x566C4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02E6 / 0x566C6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02E8 / 0x566C8)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02EA / 0x566CA)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02EC / 0x566CC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02EE / 0x566CE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02F0 / 0x566D0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    label_563E_02F2_566D2:
    // ADD byte ptr [BX + SI],AL (563E_02F2 / 0x566D2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02F4 / 0x566D4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02F6 / 0x566D6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02F8 / 0x566D8)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02FA / 0x566DA)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02FC / 0x566DC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_02FE / 0x566DE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0300 / 0x566E0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0349_56729(0);
  }
  
  public Action unknown_563E_0349_56729(int gotoTarget) {
    label_563E_0349_56729:
    // ADD byte ptr [BX + SI],AL (563E_0349 / 0x56729)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_034B / 0x5672B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_034D / 0x5672D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_034F / 0x5672F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0351 / 0x56731)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0353 / 0x56733)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0355 / 0x56735)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0357 / 0x56737)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0359 / 0x56739)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_035B / 0x5673B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_035D / 0x5673D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_035F / 0x5673F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0361 / 0x56741)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0363 / 0x56743)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0365 / 0x56745)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0367 / 0x56747)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0369 / 0x56749)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_036F_5674F(0);
  }
  
  public Action unknown_563E_036F_5674F(int gotoTarget) {
    label_563E_036F_5674F:
    // ADD byte ptr [BX + SI],AL (563E_036F / 0x5674F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0371 / 0x56751)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0373 / 0x56753)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0375 / 0x56755)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0377 / 0x56757)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0379 / 0x56759)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_037B / 0x5675B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_037D / 0x5675D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_037F / 0x5675F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0381 / 0x56761)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0383 / 0x56763)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    label_563E_0385_56765:
    // ADD byte ptr [BX + SI],AL (563E_0385 / 0x56765)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0387 / 0x56767)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    label_563E_0389_56769:
    // ADD byte ptr [BX + SI],AL (563E_0389 / 0x56769)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_038B / 0x5676B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_038D / 0x5676D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_038F / 0x5676F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_03C7_567A7(0);
  }
  
  public Action unknown_563E_03C7_567A7(int gotoTarget) {
    label_563E_03C7_567A7:
    // ADD byte ptr [BX + SI],AL (563E_03C7 / 0x567A7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03C9 / 0x567A9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03CB / 0x567AB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03CD / 0x567AD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03CF / 0x567AF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03D1 / 0x567B1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03D3 / 0x567B3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03D5 / 0x567B5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03D7 / 0x567B7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03D9 / 0x567B9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03DB / 0x567BB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03DD / 0x567BD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03DF / 0x567BF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03E1 / 0x567C1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03E3 / 0x567C3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03E5 / 0x567C5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_03E7 / 0x567C7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_041C_567FC(0);
  }
  
  public Action unknown_563E_041C_567FC(int gotoTarget) {
    label_563E_041C_567FC:
    // ADD byte ptr [BX + SI],AL (563E_041C / 0x567FC)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_041E / 0x567FE)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0420 / 0x56800)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0422_56802(0);
  }
  
  public Action unknown_563E_0422_56802(int gotoTarget) {
    label_563E_0422_56802:
    // ADD byte ptr [BX + SI],AL (563E_0422 / 0x56802)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0424 / 0x56804)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0426 / 0x56806)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0428_56808(0);
  }
  
  public Action unknown_563E_0428_56808(int gotoTarget) {
    label_563E_0428_56808:
    // ADD byte ptr [BX + SI],AL (563E_0428 / 0x56808)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_042A / 0x5680A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_042C / 0x5680C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_042E / 0x5680E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0430 / 0x56810)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0432_56812(0);
  }
  
  public Action unknown_563E_0432_56812(int gotoTarget) {
    label_563E_0432_56812:
    // ADD byte ptr [BX + SI],AL (563E_0432 / 0x56812)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0434 / 0x56814)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0436 / 0x56816)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0438 / 0x56818)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_043A / 0x5681A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_043C / 0x5681C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0453_56833(0);
  }
  
  public Action unknown_563E_0453_56833(int gotoTarget) {
    label_563E_0453_56833:
    // ADD byte ptr [BX + SI],AL (563E_0453 / 0x56833)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0455 / 0x56835)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0457 / 0x56837)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0459 / 0x56839)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_045B / 0x5683B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_045D_5683D(0);
  }
  
  public Action unknown_563E_045D_5683D(int gotoTarget) {
    label_563E_045D_5683D:
    // ADD byte ptr [BX + SI],AL (563E_045D / 0x5683D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_045F / 0x5683F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0461 / 0x56841)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0463 / 0x56843)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0465 / 0x56845)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0467 / 0x56847)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0469 / 0x56849)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_046B / 0x5684B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_046D / 0x5684D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_046F / 0x5684F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0471 / 0x56851)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0473 / 0x56853)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_049B_5687B(0);
  }
  
  public Action unknown_563E_049B_5687B(int gotoTarget) {
    label_563E_049B_5687B:
    // ADD byte ptr [BX + SI],AL (563E_049B / 0x5687B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_049D / 0x5687D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_049F / 0x5687F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04A1 / 0x56881)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04A3 / 0x56883)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04A5 / 0x56885)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    label_563E_04A7_56887:
    // ADD byte ptr [BX + SI],AL (563E_04A7 / 0x56887)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04A9 / 0x56889)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04AB / 0x5688B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04AD / 0x5688D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04AF / 0x5688F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04B1 / 0x56891)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04B3 / 0x56893)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04B5 / 0x56895)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04B7 / 0x56897)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04B9 / 0x56899)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04BB / 0x5689B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_04D7_568B7(0);
  }
  
  public Action unknown_563E_04D7_568B7(int gotoTarget) {
    label_563E_04D7_568B7:
    // ADD byte ptr [BX + SI],AL (563E_04D7 / 0x568B7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04D9 / 0x568B9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04DB / 0x568BB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04DD / 0x568BD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04DF / 0x568BF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04E1 / 0x568C1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04E3 / 0x568C3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04E5 / 0x568C5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04E7 / 0x568C7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04E9 / 0x568C9)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04EB / 0x568CB)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04ED / 0x568CD)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04EF / 0x568CF)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04F1 / 0x568D1)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04F3 / 0x568D3)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04F5 / 0x568D5)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_04F7 / 0x568D7)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_052F_5690F(0);
  }
  
  public Action unknown_563E_052F_5690F(int gotoTarget) {
    label_563E_052F_5690F:
    // ADD byte ptr [BX + SI],AL (563E_052F / 0x5690F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0531 / 0x56911)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0533 / 0x56913)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0535 / 0x56915)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0537 / 0x56917)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0539 / 0x56919)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_053B / 0x5691B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_053D / 0x5691D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_053F / 0x5691F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0541 / 0x56921)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0543 / 0x56923)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0545 / 0x56925)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0547 / 0x56927)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0549 / 0x56929)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_054B / 0x5692B)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_054D / 0x5692D)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_054F / 0x5692F)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_0564_56944(0);
  }
  
  public Action unknown_563E_0564_56944(int gotoTarget) {
    label_563E_0564_56944:
    // ADD byte ptr [BX + SI],AL (563E_0564 / 0x56944)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0566 / 0x56946)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0568 / 0x56948)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_056A / 0x5694A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_056C / 0x5694C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_056E / 0x5694E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0570 / 0x56950)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0572 / 0x56952)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0574 / 0x56954)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0576 / 0x56956)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0578 / 0x56958)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_057A / 0x5695A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_057C / 0x5695C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_057E / 0x5695E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0580 / 0x56960)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0582 / 0x56962)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_0584 / 0x56964)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // Function call generated as ASM continues to next function entry point without return
    return unknown_563E_05A6_56986(0);
  }
  
  public Action unknown_563E_05A6_56986(int gotoTarget) {
    label_563E_05A6_56986:
    // ADD byte ptr [BX + SI],AL (563E_05A6 / 0x56986)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05A8 / 0x56988)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05AA / 0x5698A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05AC / 0x5698C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05AE / 0x5698E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05B0 / 0x56990)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05B2 / 0x56992)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05B4 / 0x56994)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05B6 / 0x56996)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05B8 / 0x56998)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05BA / 0x5699A)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05BC / 0x5699C)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05BE / 0x5699E)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05C0 / 0x569A0)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05C2 / 0x569A2)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05C4 / 0x569A4)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    // ADD byte ptr [BX + SI],AL (563E_05C6 / 0x569A6)
    // UInt8[DS, (ushort)(BX + SI)] += AL;
    UInt8[DS, (ushort)(BX + SI)] = Alu.Add8(UInt8[DS, (ushort)(BX + SI)], AL);
    throw FailAsUntested("Function does not end with return and no other function found after the body at address 0xF0017");
  }
  
}
